0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014-2017 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/types/types.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/types/types.go][vendor/github.com/vmware/govmomi/vim25/types/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AbdicateDomOwnership AbdicateDomOwnershipRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AbdicateDomOwnership"] = reflect.TypeOf((*AbdicateDomOwnership)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AbdicateDomOwnershipRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids []string               `xml:"uuids"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AbdicateDomOwnershipRequestType"] = reflect.TypeOf((*AbdicateDomOwnershipRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AbdicateDomOwnershipResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AboutInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name                  string `xml:"name"`
0000000000000000000000000000000000000000;;		FullName              string `xml:"fullName"`
0000000000000000000000000000000000000000;;		Vendor                string `xml:"vendor"`
0000000000000000000000000000000000000000;;		Version               string `xml:"version"`
0000000000000000000000000000000000000000;;		Build                 string `xml:"build"`
0000000000000000000000000000000000000000;;		LocaleVersion         string `xml:"localeVersion,omitempty"`
0000000000000000000000000000000000000000;;		LocaleBuild           string `xml:"localeBuild,omitempty"`
0000000000000000000000000000000000000000;;		OsType                string `xml:"osType"`
0000000000000000000000000000000000000000;;		ProductLineId         string `xml:"productLineId"`
0000000000000000000000000000000000000000;;		ApiType               string `xml:"apiType"`
0000000000000000000000000000000000000000;;		ApiVersion            string `xml:"apiVersion"`
0000000000000000000000000000000000000000;;		InstanceUuid          string `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;		LicenseProductName    string `xml:"licenseProductName,omitempty"`
0000000000000000000000000000000000000000;;		LicenseProductVersion string `xml:"licenseProductVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AboutInfo"] = reflect.TypeOf((*AboutInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AccountCreatedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Spec  BaseHostAccountSpec `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;		Group bool                `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AccountCreatedEvent"] = reflect.TypeOf((*AccountCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AccountRemovedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Account string `xml:"account"`
0000000000000000000000000000000000000000;;		Group   bool   `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AccountRemovedEvent"] = reflect.TypeOf((*AccountRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AccountUpdatedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Spec            BaseHostAccountSpec `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;		Group           bool                `xml:"group"`
0000000000000000000000000000000000000000;;		PrevDescription string              `xml:"prevDescription,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AccountUpdatedEvent"] = reflect.TypeOf((*AccountUpdatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcknowledgeAlarm AcknowledgeAlarmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcknowledgeAlarm"] = reflect.TypeOf((*AcknowledgeAlarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcknowledgeAlarmRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Alarm  ManagedObjectReference `xml:"alarm"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcknowledgeAlarmRequestType"] = reflect.TypeOf((*AcknowledgeAlarmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcknowledgeAlarmResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCimServicesTicket AcquireCimServicesTicketRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireCimServicesTicket"] = reflect.TypeOf((*AcquireCimServicesTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCimServicesTicketRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireCimServicesTicketRequestType"] = reflect.TypeOf((*AcquireCimServicesTicketRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCimServicesTicketResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostServiceTicket `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCloneTicket AcquireCloneTicketRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireCloneTicket"] = reflect.TypeOf((*AcquireCloneTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCloneTicketRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireCloneTicketRequestType"] = reflect.TypeOf((*AcquireCloneTicketRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCloneTicketResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCredentialsInGuest AcquireCredentialsInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireCredentialsInGuest"] = reflect.TypeOf((*AcquireCredentialsInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCredentialsInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		RequestedAuth BaseGuestAuthentication `xml:"requestedAuth,typeattr"`
0000000000000000000000000000000000000000;;		SessionID     int64                   `xml:"sessionID,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireCredentialsInGuestRequestType"] = reflect.TypeOf((*AcquireCredentialsInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireCredentialsInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval BaseGuestAuthentication `xml:"returnval,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireGenericServiceTicket AcquireGenericServiceTicketRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireGenericServiceTicket"] = reflect.TypeOf((*AcquireGenericServiceTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireGenericServiceTicketRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec BaseSessionManagerServiceRequestSpec `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireGenericServiceTicketRequestType"] = reflect.TypeOf((*AcquireGenericServiceTicketRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireGenericServiceTicketResponse struct {
0000000000000000000000000000000000000000;;		Returnval SessionManagerGenericServiceTicket `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireLocalTicket AcquireLocalTicketRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireLocalTicket"] = reflect.TypeOf((*AcquireLocalTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireLocalTicketRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		UserName string                 `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireLocalTicketRequestType"] = reflect.TypeOf((*AcquireLocalTicketRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireLocalTicketResponse struct {
0000000000000000000000000000000000000000;;		Returnval SessionManagerLocalTicket `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireMksTicket AcquireMksTicketRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireMksTicket"] = reflect.TypeOf((*AcquireMksTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireMksTicketRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireMksTicketRequestType"] = reflect.TypeOf((*AcquireMksTicketRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireMksTicketResponse struct {
0000000000000000000000000000000000000000;;		Returnval VirtualMachineMksTicket `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireTicket AcquireTicketRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireTicket"] = reflect.TypeOf((*AcquireTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireTicketRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		TicketType string                 `xml:"ticketType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AcquireTicketRequestType"] = reflect.TypeOf((*AcquireTicketRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AcquireTicketResponse struct {
0000000000000000000000000000000000000000;;		Returnval VirtualMachineTicket `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Action struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Action"] = reflect.TypeOf((*Action)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveDirectoryFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ErrorCode int32 `xml:"errorCode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ActiveDirectoryFault"] = reflect.TypeOf((*ActiveDirectoryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveDirectoryFaultFault BaseActiveDirectoryFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ActiveDirectoryFaultFault"] = reflect.TypeOf((*ActiveDirectoryFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveDirectoryProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ActiveDirectoryProfile"] = reflect.TypeOf((*ActiveDirectoryProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveVMsBlockingEVC struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EvcMode  string                   `xml:"evcMode,omitempty"`
0000000000000000000000000000000000000000;;		Host     []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		HostName []string                 `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ActiveVMsBlockingEVC"] = reflect.TypeOf((*ActiveVMsBlockingEVC)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveVMsBlockingEVCFault ActiveVMsBlockingEVC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ActiveVMsBlockingEVCFault"] = reflect.TypeOf((*ActiveVMsBlockingEVCFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddAuthorizationRole AddAuthorizationRoleRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddAuthorizationRole"] = reflect.TypeOf((*AddAuthorizationRole)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddAuthorizationRoleRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name    string                 `xml:"name"`
0000000000000000000000000000000000000000;;		PrivIds []string               `xml:"privIds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddAuthorizationRoleRequestType"] = reflect.TypeOf((*AddAuthorizationRoleRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddAuthorizationRoleResponse struct {
0000000000000000000000000000000000000000;;		Returnval int32 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddCustomFieldDef AddCustomFieldDefRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddCustomFieldDef"] = reflect.TypeOf((*AddCustomFieldDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddCustomFieldDefRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name           string                 `xml:"name"`
0000000000000000000000000000000000000000;;		MoType         string                 `xml:"moType,omitempty"`
0000000000000000000000000000000000000000;;		FieldDefPolicy *PrivilegePolicyDef    `xml:"fieldDefPolicy,omitempty"`
0000000000000000000000000000000000000000;;		FieldPolicy    *PrivilegePolicyDef    `xml:"fieldPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddCustomFieldDefRequestType"] = reflect.TypeOf((*AddCustomFieldDefRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddCustomFieldDefResponse struct {
0000000000000000000000000000000000000000;;		Returnval CustomFieldDef `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddDVPortgroupRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec []DVPortgroupConfigSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddDVPortgroupRequestType"] = reflect.TypeOf((*AddDVPortgroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddDVPortgroup_Task AddDVPortgroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddDVPortgroup_Task"] = reflect.TypeOf((*AddDVPortgroup_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddDVPortgroup_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddDisksRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Disk []HostScsiDisk         `xml:"disk"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddDisksRequestType"] = reflect.TypeOf((*AddDisksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddDisks_Task AddDisksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddDisks_Task"] = reflect.TypeOf((*AddDisks_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddDisks_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddFilter AddFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddFilter"] = reflect.TypeOf((*AddFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddFilterEntities AddFilterEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddFilterEntities"] = reflect.TypeOf((*AddFilterEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddFilterEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                   `xml:"filterId"`
0000000000000000000000000000000000000000;;		Entities []ManagedObjectReference `xml:"entities,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddFilterEntitiesRequestType"] = reflect.TypeOf((*AddFilterEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddFilterEntitiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddFilterRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;		FilterName string                 `xml:"filterName"`
0000000000000000000000000000000000000000;;		InfoIds    []string               `xml:"infoIds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddFilterRequestType"] = reflect.TypeOf((*AddFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddFilterResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddGuestAlias AddGuestAliasRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddGuestAlias"] = reflect.TypeOf((*AddGuestAlias)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddGuestAliasRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm         ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth       BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Username   string                  `xml:"username"`
0000000000000000000000000000000000000000;;		MapCert    bool                    `xml:"mapCert"`
0000000000000000000000000000000000000000;;		Base64Cert string                  `xml:"base64Cert"`
0000000000000000000000000000000000000000;;		AliasInfo  GuestAuthAliasInfo      `xml:"aliasInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddGuestAliasRequestType"] = reflect.TypeOf((*AddGuestAliasRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddGuestAliasResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddHostRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec         HostConnectSpec         `xml:"spec"`
0000000000000000000000000000000000000000;;		AsConnected  bool                    `xml:"asConnected"`
0000000000000000000000000000000000000000;;		ResourcePool *ManagedObjectReference `xml:"resourcePool,omitempty"`
0000000000000000000000000000000000000000;;		License      string                  `xml:"license,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddHostRequestType"] = reflect.TypeOf((*AddHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddHost_Task AddHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddHost_Task"] = reflect.TypeOf((*AddHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddInternetScsiSendTargets AddInternetScsiSendTargetsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddInternetScsiSendTargets"] = reflect.TypeOf((*AddInternetScsiSendTargets)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddInternetScsiSendTargetsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                          `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		Targets        []HostInternetScsiHbaSendTarget `xml:"targets"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddInternetScsiSendTargetsRequestType"] = reflect.TypeOf((*AddInternetScsiSendTargetsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddInternetScsiSendTargetsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddInternetScsiStaticTargets AddInternetScsiStaticTargetsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddInternetScsiStaticTargets"] = reflect.TypeOf((*AddInternetScsiStaticTargets)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddInternetScsiStaticTargetsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                            `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		Targets        []HostInternetScsiHbaStaticTarget `xml:"targets"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddInternetScsiStaticTargetsRequestType"] = reflect.TypeOf((*AddInternetScsiStaticTargetsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddInternetScsiStaticTargetsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddKey AddKeyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddKey"] = reflect.TypeOf((*AddKey)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddKeyRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  CryptoKeyPlain         `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddKeyRequestType"] = reflect.TypeOf((*AddKeyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddKeyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddKeys AddKeysRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddKeys"] = reflect.TypeOf((*AddKeys)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddKeysRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Keys []CryptoKeyPlain       `xml:"keys,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddKeysRequestType"] = reflect.TypeOf((*AddKeysRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddKeysResponse struct {
0000000000000000000000000000000000000000;;		Returnval []CryptoKeyResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddLicense AddLicenseRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddLicense"] = reflect.TypeOf((*AddLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddLicenseRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LicenseKey string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;		Labels     []KeyValue             `xml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddLicenseRequestType"] = reflect.TypeOf((*AddLicenseRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddLicenseResponse struct {
0000000000000000000000000000000000000000;;		Returnval LicenseManagerLicenseInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddMonitoredEntities AddMonitoredEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddMonitoredEntities"] = reflect.TypeOf((*AddMonitoredEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddMonitoredEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                   `xml:"providerId"`
0000000000000000000000000000000000000000;;		Entities   []ManagedObjectReference `xml:"entities,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddMonitoredEntitiesRequestType"] = reflect.TypeOf((*AddMonitoredEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddMonitoredEntitiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddNetworkResourcePool AddNetworkResourcePoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddNetworkResourcePool"] = reflect.TypeOf((*AddNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddNetworkResourcePoolRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference             `xml:"_this"`
0000000000000000000000000000000000000000;;		ConfigSpec []DVSNetworkResourcePoolConfigSpec `xml:"configSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddNetworkResourcePoolRequestType"] = reflect.TypeOf((*AddNetworkResourcePoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddNetworkResourcePoolResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddPortGroup AddPortGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddPortGroup"] = reflect.TypeOf((*AddPortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddPortGroupRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Portgrp HostPortGroupSpec      `xml:"portgrp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddPortGroupRequestType"] = reflect.TypeOf((*AddPortGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddPortGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddServiceConsoleVirtualNic AddServiceConsoleVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddServiceConsoleVirtualNic"] = reflect.TypeOf((*AddServiceConsoleVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddServiceConsoleVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Portgroup string                 `xml:"portgroup"`
0000000000000000000000000000000000000000;;		Nic       HostVirtualNicSpec     `xml:"nic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddServiceConsoleVirtualNicRequestType"] = reflect.TypeOf((*AddServiceConsoleVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddServiceConsoleVirtualNicResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddStandaloneHostRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference        `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec         HostConnectSpec               `xml:"spec"`
0000000000000000000000000000000000000000;;		CompResSpec  BaseComputeResourceConfigSpec `xml:"compResSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		AddConnected bool                          `xml:"addConnected"`
0000000000000000000000000000000000000000;;		License      string                        `xml:"license,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddStandaloneHostRequestType"] = reflect.TypeOf((*AddStandaloneHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddStandaloneHost_Task AddStandaloneHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddStandaloneHost_Task"] = reflect.TypeOf((*AddStandaloneHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddStandaloneHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddVirtualNic AddVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddVirtualNic"] = reflect.TypeOf((*AddVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Portgroup string                 `xml:"portgroup"`
0000000000000000000000000000000000000000;;		Nic       HostVirtualNicSpec     `xml:"nic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddVirtualNicRequestType"] = reflect.TypeOf((*AddVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddVirtualNicResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddVirtualSwitch AddVirtualSwitchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddVirtualSwitch"] = reflect.TypeOf((*AddVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddVirtualSwitchRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VswitchName string                 `xml:"vswitchName"`
0000000000000000000000000000000000000000;;		Spec        *HostVirtualSwitchSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AddVirtualSwitchRequestType"] = reflect.TypeOf((*AddVirtualSwitchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddVirtualSwitchResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AdminDisabled struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AdminDisabled"] = reflect.TypeOf((*AdminDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AdminDisabledFault AdminDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AdminDisabledFault"] = reflect.TypeOf((*AdminDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AdminNotDisabled struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AdminNotDisabled"] = reflect.TypeOf((*AdminNotDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AdminNotDisabledFault AdminNotDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AdminNotDisabledFault"] = reflect.TypeOf((*AdminNotDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AdminPasswordNotChangedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AdminPasswordNotChangedEvent"] = reflect.TypeOf((*AdminPasswordNotChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AffinityConfigured struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfiguredAffinity []string `xml:"configuredAffinity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AffinityConfigured"] = reflect.TypeOf((*AffinityConfigured)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AffinityConfiguredFault AffinityConfigured
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AffinityConfiguredFault"] = reflect.TypeOf((*AffinityConfiguredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AfterStartupTaskScheduler struct {
0000000000000000000000000000000000000000;;		TaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Minute int32 `xml:"minute"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AfterStartupTaskScheduler"] = reflect.TypeOf((*AfterStartupTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AgentInstallFailed struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason          string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		StatusCode      int32  `xml:"statusCode,omitempty"`
0000000000000000000000000000000000000000;;		InstallerOutput string `xml:"installerOutput,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AgentInstallFailed"] = reflect.TypeOf((*AgentInstallFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AgentInstallFailedFault AgentInstallFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AgentInstallFailedFault"] = reflect.TypeOf((*AgentInstallFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmAcknowledgedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source ManagedEntityEventArgument `xml:"source"`
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmAcknowledgedEvent"] = reflect.TypeOf((*AlarmAcknowledgedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmAction struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmAction"] = reflect.TypeOf((*AlarmAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmActionTriggeredEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source ManagedEntityEventArgument `xml:"source"`
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmActionTriggeredEvent"] = reflect.TypeOf((*AlarmActionTriggeredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmClearedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source ManagedEntityEventArgument `xml:"source"`
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		From   string                     `xml:"from"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmClearedEvent"] = reflect.TypeOf((*AlarmClearedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmCreatedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmCreatedEvent"] = reflect.TypeOf((*AlarmCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expr                               []BaseTypeDescription    `xml:"expr,typeattr"`
0000000000000000000000000000000000000000;;		StateOperator                      []BaseElementDescription `xml:"stateOperator,typeattr"`
0000000000000000000000000000000000000000;;		MetricOperator                     []BaseElementDescription `xml:"metricOperator,typeattr"`
0000000000000000000000000000000000000000;;		HostSystemConnectionState          []BaseElementDescription `xml:"hostSystemConnectionState,typeattr"`
0000000000000000000000000000000000000000;;		VirtualMachinePowerState           []BaseElementDescription `xml:"virtualMachinePowerState,typeattr"`
0000000000000000000000000000000000000000;;		DatastoreConnectionState           []BaseElementDescription `xml:"datastoreConnectionState,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		HostSystemPowerState               []BaseElementDescription `xml:"hostSystemPowerState,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		VirtualMachineGuestHeartbeatStatus []BaseElementDescription `xml:"virtualMachineGuestHeartbeatStatus,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		EntityStatus                       []BaseElementDescription `xml:"entityStatus,typeattr"`
0000000000000000000000000000000000000000;;		Action                             []BaseTypeDescription    `xml:"action,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmDescription"] = reflect.TypeOf((*AlarmDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmEmailCompletedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		To     string                     `xml:"to"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmEmailCompletedEvent"] = reflect.TypeOf((*AlarmEmailCompletedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmEmailFailedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		To     string                     `xml:"to"`
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault       `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmEmailFailedEvent"] = reflect.TypeOf((*AlarmEmailFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Alarm AlarmEventArgument `xml:"alarm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmEvent"] = reflect.TypeOf((*AlarmEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Alarm ManagedObjectReference `xml:"alarm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmEventArgument"] = reflect.TypeOf((*AlarmEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmExpression struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmExpression"] = reflect.TypeOf((*AlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmInfo struct {
0000000000000000000000000000000000000000;;		AlarmSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              string                 `xml:"key"`
0000000000000000000000000000000000000000;;		Alarm            ManagedObjectReference `xml:"alarm"`
0000000000000000000000000000000000000000;;		Entity           ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		LastModifiedTime time.Time              `xml:"lastModifiedTime"`
0000000000000000000000000000000000000000;;		LastModifiedUser string                 `xml:"lastModifiedUser"`
0000000000000000000000000000000000000000;;		CreationEventId  int32                  `xml:"creationEventId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmInfo"] = reflect.TypeOf((*AlarmInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity        ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument  `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmReconfiguredEvent"] = reflect.TypeOf((*AlarmReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmRemovedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmRemovedEvent"] = reflect.TypeOf((*AlarmRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmScriptCompleteEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		Script string                     `xml:"script"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmScriptCompleteEvent"] = reflect.TypeOf((*AlarmScriptCompleteEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmScriptFailedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		Script string                     `xml:"script"`
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault       `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmScriptFailedEvent"] = reflect.TypeOf((*AlarmScriptFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmSetting struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ToleranceRange     int32 `xml:"toleranceRange"`
0000000000000000000000000000000000000000;;		ReportingFrequency int32 `xml:"reportingFrequency"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmSetting"] = reflect.TypeOf((*AlarmSetting)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmSnmpCompletedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmSnmpCompletedEvent"] = reflect.TypeOf((*AlarmSnmpCompletedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmSnmpFailedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault       `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmSnmpFailedEvent"] = reflect.TypeOf((*AlarmSnmpFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name            string              `xml:"name"`
0000000000000000000000000000000000000000;;		SystemName      string              `xml:"systemName,omitempty"`
0000000000000000000000000000000000000000;;		Description     string              `xml:"description"`
0000000000000000000000000000000000000000;;		Enabled         bool                `xml:"enabled"`
0000000000000000000000000000000000000000;;		Expression      BaseAlarmExpression `xml:"expression,typeattr"`
0000000000000000000000000000000000000000;;		Action          BaseAlarmAction     `xml:"action,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ActionFrequency int32               `xml:"actionFrequency,omitempty"`
0000000000000000000000000000000000000000;;		Setting         *AlarmSetting       `xml:"setting,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmSpec"] = reflect.TypeOf((*AlarmSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                string                 `xml:"key"`
0000000000000000000000000000000000000000;;		Entity             ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Alarm              ManagedObjectReference `xml:"alarm"`
0000000000000000000000000000000000000000;;		OverallStatus      ManagedEntityStatus    `xml:"overallStatus"`
0000000000000000000000000000000000000000;;		Time               time.Time              `xml:"time"`
0000000000000000000000000000000000000000;;		Acknowledged       *bool                  `xml:"acknowledged"`
0000000000000000000000000000000000000000;;		AcknowledgedByUser string                 `xml:"acknowledgedByUser,omitempty"`
0000000000000000000000000000000000000000;;		AcknowledgedTime   *time.Time             `xml:"acknowledgedTime"`
0000000000000000000000000000000000000000;;		EventKey           int32                  `xml:"eventKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmState"] = reflect.TypeOf((*AlarmState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmStatusChangedEvent struct {
0000000000000000000000000000000000000000;;		AlarmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source ManagedEntityEventArgument `xml:"source"`
0000000000000000000000000000000000000000;;		Entity ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		From   string                     `xml:"from"`
0000000000000000000000000000000000000000;;		To     string                     `xml:"to"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmStatusChangedEvent"] = reflect.TypeOf((*AlarmStatusChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmTriggeringAction struct {
0000000000000000000000000000000000000000;;		AlarmAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Action          BaseAction                            `xml:"action,typeattr"`
0000000000000000000000000000000000000000;;		TransitionSpecs []AlarmTriggeringActionTransitionSpec `xml:"transitionSpecs,omitempty"`
0000000000000000000000000000000000000000;;		Green2yellow    bool                                  `xml:"green2yellow"`
0000000000000000000000000000000000000000;;		Yellow2red      bool                                  `xml:"yellow2red"`
0000000000000000000000000000000000000000;;		Red2yellow      bool                                  `xml:"red2yellow"`
0000000000000000000000000000000000000000;;		Yellow2green    bool                                  `xml:"yellow2green"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmTriggeringAction"] = reflect.TypeOf((*AlarmTriggeringAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmTriggeringActionTransitionSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartState ManagedEntityStatus `xml:"startState"`
0000000000000000000000000000000000000000;;		FinalState ManagedEntityStatus `xml:"finalState"`
0000000000000000000000000000000000000000;;		Repeats    bool                `xml:"repeats"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmTriggeringActionTransitionSpec"] = reflect.TypeOf((*AlarmTriggeringActionTransitionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllVirtualMachinesLicensedEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AllVirtualMachinesLicensedEvent"] = reflect.TypeOf((*AllVirtualMachinesLicensedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocateIpv4Address AllocateIpv4AddressRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AllocateIpv4Address"] = reflect.TypeOf((*AllocateIpv4Address)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocateIpv4AddressRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc           ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		PoolId       int32                  `xml:"poolId"`
0000000000000000000000000000000000000000;;		AllocationId string                 `xml:"allocationId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AllocateIpv4AddressRequestType"] = reflect.TypeOf((*AllocateIpv4AddressRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocateIpv4AddressResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocateIpv6Address AllocateIpv6AddressRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AllocateIpv6Address"] = reflect.TypeOf((*AllocateIpv6Address)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocateIpv6AddressRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc           ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		PoolId       int32                  `xml:"poolId"`
0000000000000000000000000000000000000000;;		AllocationId string                 `xml:"allocationId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AllocateIpv6AddressRequestType"] = reflect.TypeOf((*AllocateIpv6AddressRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocateIpv6AddressResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyAuthenticatedSessionEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyAuthenticatedSessionEvent"] = reflect.TypeOf((*AlreadyAuthenticatedSessionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyBeingManaged struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyBeingManaged"] = reflect.TypeOf((*AlreadyBeingManaged)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyBeingManagedFault AlreadyBeingManaged
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyBeingManagedFault"] = reflect.TypeOf((*AlreadyBeingManagedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyConnected struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyConnected"] = reflect.TypeOf((*AlreadyConnected)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyConnectedFault AlreadyConnected
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyConnectedFault"] = reflect.TypeOf((*AlreadyConnectedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyExists struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyExists"] = reflect.TypeOf((*AlreadyExists)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyExistsFault AlreadyExists
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyExistsFault"] = reflect.TypeOf((*AlreadyExistsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyUpgraded struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyUpgraded"] = reflect.TypeOf((*AlreadyUpgraded)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlreadyUpgradedFault AlreadyUpgraded
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlreadyUpgradedFault"] = reflect.TypeOf((*AlreadyUpgradedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AndAlarmExpression struct {
0000000000000000000000000000000000000000;;		AlarmExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expression []BaseAlarmExpression `xml:"expression,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AndAlarmExpression"] = reflect.TypeOf((*AndAlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFile struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserInput    []ProfileDeferredPolicyOptionParameter `xml:"userInput,omitempty"`
0000000000000000000000000000000000000000;;		CreatedTime  time.Time                              `xml:"createdTime"`
0000000000000000000000000000000000000000;;		ModifiedTime time.Time                              `xml:"modifiedTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFile"] = reflect.TypeOf((*AnswerFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileCreateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Validating *bool `xml:"validating"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileCreateSpec"] = reflect.TypeOf((*AnswerFileCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileOptionsCreateSpec struct {
0000000000000000000000000000000000000000;;		AnswerFileCreateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserInput []ProfileDeferredPolicyOptionParameter `xml:"userInput,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileOptionsCreateSpec"] = reflect.TypeOf((*AnswerFileOptionsCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileSerializedCreateSpec struct {
0000000000000000000000000000000000000000;;		AnswerFileCreateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AnswerFileConfigString string `xml:"answerFileConfigString"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileSerializedCreateSpec"] = reflect.TypeOf((*AnswerFileSerializedCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileStatusError struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserInputPath ProfilePropertyPath `xml:"userInputPath"`
0000000000000000000000000000000000000000;;		ErrMsg        LocalizableMessage  `xml:"errMsg"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileStatusError"] = reflect.TypeOf((*AnswerFileStatusError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileStatusResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CheckedTime time.Time               `xml:"checkedTime"`
0000000000000000000000000000000000000000;;		Host        ManagedObjectReference  `xml:"host"`
0000000000000000000000000000000000000000;;		Status      string                  `xml:"status"`
0000000000000000000000000000000000000000;;		Error       []AnswerFileStatusError `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileStatusResult"] = reflect.TypeOf((*AnswerFileStatusResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileUpdateFailed struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Failure []AnswerFileUpdateFailure `xml:"failure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileUpdateFailed"] = reflect.TypeOf((*AnswerFileUpdateFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileUpdateFailedFault AnswerFileUpdateFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileUpdateFailedFault"] = reflect.TypeOf((*AnswerFileUpdateFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerFileUpdateFailure struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserInputPath ProfilePropertyPath `xml:"userInputPath"`
0000000000000000000000000000000000000000;;		ErrMsg        LocalizableMessage  `xml:"errMsg"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerFileUpdateFailure"] = reflect.TypeOf((*AnswerFileUpdateFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerVM AnswerVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerVM"] = reflect.TypeOf((*AnswerVM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerVMRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		QuestionId   string                 `xml:"questionId"`
0000000000000000000000000000000000000000;;		AnswerChoice string                 `xml:"answerChoice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AnswerVMRequestType"] = reflect.TypeOf((*AnswerVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnswerVMResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplicationQuiesceFault struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplicationQuiesceFault"] = reflect.TypeOf((*ApplicationQuiesceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplicationQuiesceFaultFault ApplicationQuiesceFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplicationQuiesceFaultFault"] = reflect.TypeOf((*ApplicationQuiesceFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyEntitiesConfigRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference              `xml:"_this"`
0000000000000000000000000000000000000000;;		ApplyConfigSpecs []ApplyHostProfileConfigurationSpec `xml:"applyConfigSpecs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyEntitiesConfigRequestType"] = reflect.TypeOf((*ApplyEntitiesConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyEntitiesConfig_Task ApplyEntitiesConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyEntitiesConfig_Task"] = reflect.TypeOf((*ApplyEntitiesConfig_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyEntitiesConfig_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyHostConfigRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference                 `xml:"_this"`
0000000000000000000000000000000000000000;;		Host       ManagedObjectReference                 `xml:"host"`
0000000000000000000000000000000000000000;;		ConfigSpec HostConfigSpec                         `xml:"configSpec"`
0000000000000000000000000000000000000000;;		UserInput  []ProfileDeferredPolicyOptionParameter `xml:"userInput,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyHostConfigRequestType"] = reflect.TypeOf((*ApplyHostConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyHostConfig_Task ApplyHostConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyHostConfig_Task"] = reflect.TypeOf((*ApplyHostConfig_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyHostConfig_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyHostProfileConfigurationSpec struct {
0000000000000000000000000000000000000000;;		ProfileExecuteResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host                ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		TaskListRequirement []string               `xml:"taskListRequirement,omitempty"`
0000000000000000000000000000000000000000;;		TaskDescription     []LocalizableMessage   `xml:"taskDescription,omitempty"`
0000000000000000000000000000000000000000;;		RebootStateless     *bool                  `xml:"rebootStateless"`
0000000000000000000000000000000000000000;;		RebootHost          *bool                  `xml:"rebootHost"`
0000000000000000000000000000000000000000;;		FaultData           *LocalizedMethodFault  `xml:"faultData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyHostProfileConfigurationSpec"] = reflect.TypeOf((*ApplyHostProfileConfigurationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyProfile struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled          bool                          `xml:"enabled"`
0000000000000000000000000000000000000000;;		Policy           []ProfilePolicy               `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;		ProfileTypeName  string                        `xml:"profileTypeName,omitempty"`
0000000000000000000000000000000000000000;;		ProfileVersion   string                        `xml:"profileVersion,omitempty"`
0000000000000000000000000000000000000000;;		Property         []ProfileApplyProfileProperty `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;		Favorite         *bool                         `xml:"favorite"`
0000000000000000000000000000000000000000;;		ToBeMerged       *bool                         `xml:"toBeMerged"`
0000000000000000000000000000000000000000;;		ToReplaceWith    *bool                         `xml:"toReplaceWith"`
0000000000000000000000000000000000000000;;		ToBeDeleted      *bool                         `xml:"toBeDeleted"`
0000000000000000000000000000000000000000;;		CopyEnableStatus *bool                         `xml:"copyEnableStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyProfile"] = reflect.TypeOf((*ApplyProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyRecommendation ApplyRecommendationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyRecommendation"] = reflect.TypeOf((*ApplyRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyRecommendationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  string                 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyRecommendationRequestType"] = reflect.TypeOf((*ApplyRecommendationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyRecommendationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageDrsRecommendationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  []string               `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyStorageDrsRecommendationRequestType"] = reflect.TypeOf((*ApplyStorageDrsRecommendationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageDrsRecommendationToPodRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Pod  ManagedObjectReference `xml:"pod"`
0000000000000000000000000000000000000000;;		Key  string                 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyStorageDrsRecommendationToPodRequestType"] = reflect.TypeOf((*ApplyStorageDrsRecommendationToPodRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageDrsRecommendationToPod_Task ApplyStorageDrsRecommendationToPodRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyStorageDrsRecommendationToPod_Task"] = reflect.TypeOf((*ApplyStorageDrsRecommendationToPod_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageDrsRecommendationToPod_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageDrsRecommendation_Task ApplyStorageDrsRecommendationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyStorageDrsRecommendation_Task"] = reflect.TypeOf((*ApplyStorageDrsRecommendation_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageDrsRecommendation_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ApplyStorageRecommendationResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm *ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ApplyStorageRecommendationResult"] = reflect.TypeOf((*ApplyStorageRecommendationResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AreAlarmActionsEnabled AreAlarmActionsEnabledRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AreAlarmActionsEnabled"] = reflect.TypeOf((*AreAlarmActionsEnabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AreAlarmActionsEnabledRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AreAlarmActionsEnabledRequestType"] = reflect.TypeOf((*AreAlarmActionsEnabledRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AreAlarmActionsEnabledResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAlarmAction struct {
0000000000000000000000000000000000000000;;		AlarmAction []BaseAlarmAction `xml:"AlarmAction,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAlarmAction"] = reflect.TypeOf((*ArrayOfAlarmAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAlarmExpression struct {
0000000000000000000000000000000000000000;;		AlarmExpression []BaseAlarmExpression `xml:"AlarmExpression,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAlarmExpression"] = reflect.TypeOf((*ArrayOfAlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAlarmState struct {
0000000000000000000000000000000000000000;;		AlarmState []AlarmState `xml:"AlarmState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAlarmState"] = reflect.TypeOf((*ArrayOfAlarmState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAlarmTriggeringActionTransitionSpec struct {
0000000000000000000000000000000000000000;;		AlarmTriggeringActionTransitionSpec []AlarmTriggeringActionTransitionSpec `xml:"AlarmTriggeringActionTransitionSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAlarmTriggeringActionTransitionSpec"] = reflect.TypeOf((*ArrayOfAlarmTriggeringActionTransitionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAnswerFileStatusError struct {
0000000000000000000000000000000000000000;;		AnswerFileStatusError []AnswerFileStatusError `xml:"AnswerFileStatusError,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAnswerFileStatusError"] = reflect.TypeOf((*ArrayOfAnswerFileStatusError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAnswerFileStatusResult struct {
0000000000000000000000000000000000000000;;		AnswerFileStatusResult []AnswerFileStatusResult `xml:"AnswerFileStatusResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAnswerFileStatusResult"] = reflect.TypeOf((*ArrayOfAnswerFileStatusResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAnswerFileUpdateFailure struct {
0000000000000000000000000000000000000000;;		AnswerFileUpdateFailure []AnswerFileUpdateFailure `xml:"AnswerFileUpdateFailure,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAnswerFileUpdateFailure"] = reflect.TypeOf((*ArrayOfAnswerFileUpdateFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAnyType struct {
0000000000000000000000000000000000000000;;		AnyType []AnyType `xml:"anyType,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAnyType"] = reflect.TypeOf((*ArrayOfAnyType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAnyURI struct {
0000000000000000000000000000000000000000;;		AnyURI []url.URL `xml:"anyURI,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAnyURI"] = reflect.TypeOf((*ArrayOfAnyURI)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfApplyHostProfileConfigurationSpec struct {
0000000000000000000000000000000000000000;;		ApplyHostProfileConfigurationSpec []ApplyHostProfileConfigurationSpec `xml:"ApplyHostProfileConfigurationSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfApplyHostProfileConfigurationSpec"] = reflect.TypeOf((*ArrayOfApplyHostProfileConfigurationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfApplyProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile []BaseApplyProfile `xml:"ApplyProfile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfApplyProfile"] = reflect.TypeOf((*ArrayOfApplyProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAuthorizationPrivilege struct {
0000000000000000000000000000000000000000;;		AuthorizationPrivilege []AuthorizationPrivilege `xml:"AuthorizationPrivilege,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAuthorizationPrivilege"] = reflect.TypeOf((*ArrayOfAuthorizationPrivilege)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAuthorizationRole struct {
0000000000000000000000000000000000000000;;		AuthorizationRole []AuthorizationRole `xml:"AuthorizationRole,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAuthorizationRole"] = reflect.TypeOf((*ArrayOfAuthorizationRole)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfAutoStartPowerInfo struct {
0000000000000000000000000000000000000000;;		AutoStartPowerInfo []AutoStartPowerInfo `xml:"AutoStartPowerInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfAutoStartPowerInfo"] = reflect.TypeOf((*ArrayOfAutoStartPowerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfBoolean struct {
0000000000000000000000000000000000000000;;		Boolean []bool `xml:"boolean,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfBoolean"] = reflect.TypeOf((*ArrayOfBoolean)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfByte struct {
0000000000000000000000000000000000000000;;		Byte []byte `xml:"byte,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfByte"] = reflect.TypeOf((*ArrayOfByte)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfChangesInfoEventArgument struct {
0000000000000000000000000000000000000000;;		ChangesInfoEventArgument []ChangesInfoEventArgument `xml:"ChangesInfoEventArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfChangesInfoEventArgument"] = reflect.TypeOf((*ArrayOfChangesInfoEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCheckResult struct {
0000000000000000000000000000000000000000;;		CheckResult []CheckResult `xml:"CheckResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCheckResult"] = reflect.TypeOf((*ArrayOfCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterAction struct {
0000000000000000000000000000000000000000;;		ClusterAction []BaseClusterAction `xml:"ClusterAction,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterAction"] = reflect.TypeOf((*ArrayOfClusterAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterActionHistory struct {
0000000000000000000000000000000000000000;;		ClusterActionHistory []ClusterActionHistory `xml:"ClusterActionHistory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterActionHistory"] = reflect.TypeOf((*ArrayOfClusterActionHistory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterAttemptedVmInfo struct {
0000000000000000000000000000000000000000;;		ClusterAttemptedVmInfo []ClusterAttemptedVmInfo `xml:"ClusterAttemptedVmInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterAttemptedVmInfo"] = reflect.TypeOf((*ArrayOfClusterAttemptedVmInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDasAamNodeState struct {
0000000000000000000000000000000000000000;;		ClusterDasAamNodeState []ClusterDasAamNodeState `xml:"ClusterDasAamNodeState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDasAamNodeState"] = reflect.TypeOf((*ArrayOfClusterDasAamNodeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots struct {
0000000000000000000000000000000000000000;;		ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots []ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots `xml:"ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots"] = reflect.TypeOf((*ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots struct {
0000000000000000000000000000000000000000;;		ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots []ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots `xml:"ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots"] = reflect.TypeOf((*ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDasVmConfigInfo struct {
0000000000000000000000000000000000000000;;		ClusterDasVmConfigInfo []ClusterDasVmConfigInfo `xml:"ClusterDasVmConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDasVmConfigInfo"] = reflect.TypeOf((*ArrayOfClusterDasVmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDasVmConfigSpec struct {
0000000000000000000000000000000000000000;;		ClusterDasVmConfigSpec []ClusterDasVmConfigSpec `xml:"ClusterDasVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDasVmConfigSpec"] = reflect.TypeOf((*ArrayOfClusterDasVmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDpmHostConfigInfo struct {
0000000000000000000000000000000000000000;;		ClusterDpmHostConfigInfo []ClusterDpmHostConfigInfo `xml:"ClusterDpmHostConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDpmHostConfigInfo"] = reflect.TypeOf((*ArrayOfClusterDpmHostConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDpmHostConfigSpec struct {
0000000000000000000000000000000000000000;;		ClusterDpmHostConfigSpec []ClusterDpmHostConfigSpec `xml:"ClusterDpmHostConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDpmHostConfigSpec"] = reflect.TypeOf((*ArrayOfClusterDpmHostConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDrsFaults struct {
0000000000000000000000000000000000000000;;		ClusterDrsFaults []ClusterDrsFaults `xml:"ClusterDrsFaults,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDrsFaults"] = reflect.TypeOf((*ArrayOfClusterDrsFaults)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDrsFaultsFaultsByVm struct {
0000000000000000000000000000000000000000;;		ClusterDrsFaultsFaultsByVm []BaseClusterDrsFaultsFaultsByVm `xml:"ClusterDrsFaultsFaultsByVm,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDrsFaultsFaultsByVm"] = reflect.TypeOf((*ArrayOfClusterDrsFaultsFaultsByVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDrsMigration struct {
0000000000000000000000000000000000000000;;		ClusterDrsMigration []ClusterDrsMigration `xml:"ClusterDrsMigration,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDrsMigration"] = reflect.TypeOf((*ArrayOfClusterDrsMigration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDrsRecommendation struct {
0000000000000000000000000000000000000000;;		ClusterDrsRecommendation []ClusterDrsRecommendation `xml:"ClusterDrsRecommendation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDrsRecommendation"] = reflect.TypeOf((*ArrayOfClusterDrsRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDrsVmConfigInfo struct {
0000000000000000000000000000000000000000;;		ClusterDrsVmConfigInfo []ClusterDrsVmConfigInfo `xml:"ClusterDrsVmConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDrsVmConfigInfo"] = reflect.TypeOf((*ArrayOfClusterDrsVmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterDrsVmConfigSpec struct {
0000000000000000000000000000000000000000;;		ClusterDrsVmConfigSpec []ClusterDrsVmConfigSpec `xml:"ClusterDrsVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterDrsVmConfigSpec"] = reflect.TypeOf((*ArrayOfClusterDrsVmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterEVCManagerCheckResult struct {
0000000000000000000000000000000000000000;;		ClusterEVCManagerCheckResult []ClusterEVCManagerCheckResult `xml:"ClusterEVCManagerCheckResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterEVCManagerCheckResult"] = reflect.TypeOf((*ArrayOfClusterEVCManagerCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus struct {
0000000000000000000000000000000000000000;;		ClusterFailoverHostAdmissionControlInfoHostStatus []ClusterFailoverHostAdmissionControlInfoHostStatus `xml:"ClusterFailoverHostAdmissionControlInfoHostStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus"] = reflect.TypeOf((*ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterGroupInfo struct {
0000000000000000000000000000000000000000;;		ClusterGroupInfo []BaseClusterGroupInfo `xml:"ClusterGroupInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterGroupInfo"] = reflect.TypeOf((*ArrayOfClusterGroupInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterGroupSpec struct {
0000000000000000000000000000000000000000;;		ClusterGroupSpec []ClusterGroupSpec `xml:"ClusterGroupSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterGroupSpec"] = reflect.TypeOf((*ArrayOfClusterGroupSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterHostRecommendation struct {
0000000000000000000000000000000000000000;;		ClusterHostRecommendation []ClusterHostRecommendation `xml:"ClusterHostRecommendation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterHostRecommendation"] = reflect.TypeOf((*ArrayOfClusterHostRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterIoFilterInfo struct {
0000000000000000000000000000000000000000;;		ClusterIoFilterInfo []ClusterIoFilterInfo `xml:"ClusterIoFilterInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterIoFilterInfo"] = reflect.TypeOf((*ArrayOfClusterIoFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterNotAttemptedVmInfo struct {
0000000000000000000000000000000000000000;;		ClusterNotAttemptedVmInfo []ClusterNotAttemptedVmInfo `xml:"ClusterNotAttemptedVmInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterNotAttemptedVmInfo"] = reflect.TypeOf((*ArrayOfClusterNotAttemptedVmInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterRecommendation struct {
0000000000000000000000000000000000000000;;		ClusterRecommendation []ClusterRecommendation `xml:"ClusterRecommendation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterRecommendation"] = reflect.TypeOf((*ArrayOfClusterRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterRuleInfo struct {
0000000000000000000000000000000000000000;;		ClusterRuleInfo []BaseClusterRuleInfo `xml:"ClusterRuleInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterRuleInfo"] = reflect.TypeOf((*ArrayOfClusterRuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterRuleSpec struct {
0000000000000000000000000000000000000000;;		ClusterRuleSpec []ClusterRuleSpec `xml:"ClusterRuleSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterRuleSpec"] = reflect.TypeOf((*ArrayOfClusterRuleSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterVmOrchestrationInfo struct {
0000000000000000000000000000000000000000;;		ClusterVmOrchestrationInfo []ClusterVmOrchestrationInfo `xml:"ClusterVmOrchestrationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterVmOrchestrationInfo"] = reflect.TypeOf((*ArrayOfClusterVmOrchestrationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfClusterVmOrchestrationSpec struct {
0000000000000000000000000000000000000000;;		ClusterVmOrchestrationSpec []ClusterVmOrchestrationSpec `xml:"ClusterVmOrchestrationSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfClusterVmOrchestrationSpec"] = reflect.TypeOf((*ArrayOfClusterVmOrchestrationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfComplianceFailure struct {
0000000000000000000000000000000000000000;;		ComplianceFailure []ComplianceFailure `xml:"ComplianceFailure,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfComplianceFailure"] = reflect.TypeOf((*ArrayOfComplianceFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfComplianceFailureComplianceFailureValues struct {
0000000000000000000000000000000000000000;;		ComplianceFailureComplianceFailureValues []ComplianceFailureComplianceFailureValues `xml:"ComplianceFailureComplianceFailureValues,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfComplianceFailureComplianceFailureValues"] = reflect.TypeOf((*ArrayOfComplianceFailureComplianceFailureValues)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfComplianceLocator struct {
0000000000000000000000000000000000000000;;		ComplianceLocator []ComplianceLocator `xml:"ComplianceLocator,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfComplianceLocator"] = reflect.TypeOf((*ArrayOfComplianceLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfComplianceResult struct {
0000000000000000000000000000000000000000;;		ComplianceResult []ComplianceResult `xml:"ComplianceResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfComplianceResult"] = reflect.TypeOf((*ArrayOfComplianceResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfComputeResourceHostSPBMLicenseInfo struct {
0000000000000000000000000000000000000000;;		ComputeResourceHostSPBMLicenseInfo []ComputeResourceHostSPBMLicenseInfo `xml:"ComputeResourceHostSPBMLicenseInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfComputeResourceHostSPBMLicenseInfo"] = reflect.TypeOf((*ArrayOfComputeResourceHostSPBMLicenseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfConflictingConfigurationConfig struct {
0000000000000000000000000000000000000000;;		ConflictingConfigurationConfig []ConflictingConfigurationConfig `xml:"ConflictingConfigurationConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfConflictingConfigurationConfig"] = reflect.TypeOf((*ArrayOfConflictingConfigurationConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCryptoKeyId struct {
0000000000000000000000000000000000000000;;		CryptoKeyId []CryptoKeyId `xml:"CryptoKeyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCryptoKeyId"] = reflect.TypeOf((*ArrayOfCryptoKeyId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCryptoKeyPlain struct {
0000000000000000000000000000000000000000;;		CryptoKeyPlain []CryptoKeyPlain `xml:"CryptoKeyPlain,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCryptoKeyPlain"] = reflect.TypeOf((*ArrayOfCryptoKeyPlain)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCryptoKeyResult struct {
0000000000000000000000000000000000000000;;		CryptoKeyResult []CryptoKeyResult `xml:"CryptoKeyResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCryptoKeyResult"] = reflect.TypeOf((*ArrayOfCryptoKeyResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCryptoManagerKmipClusterStatus struct {
0000000000000000000000000000000000000000;;		CryptoManagerKmipClusterStatus []CryptoManagerKmipClusterStatus `xml:"CryptoManagerKmipClusterStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCryptoManagerKmipClusterStatus"] = reflect.TypeOf((*ArrayOfCryptoManagerKmipClusterStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCryptoManagerKmipServerStatus struct {
0000000000000000000000000000000000000000;;		CryptoManagerKmipServerStatus []CryptoManagerKmipServerStatus `xml:"CryptoManagerKmipServerStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCryptoManagerKmipServerStatus"] = reflect.TypeOf((*ArrayOfCryptoManagerKmipServerStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCustomFieldDef struct {
0000000000000000000000000000000000000000;;		CustomFieldDef []CustomFieldDef `xml:"CustomFieldDef,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCustomFieldDef"] = reflect.TypeOf((*ArrayOfCustomFieldDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCustomFieldValue struct {
0000000000000000000000000000000000000000;;		CustomFieldValue []BaseCustomFieldValue `xml:"CustomFieldValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCustomFieldValue"] = reflect.TypeOf((*ArrayOfCustomFieldValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCustomizationAdapterMapping struct {
0000000000000000000000000000000000000000;;		CustomizationAdapterMapping []CustomizationAdapterMapping `xml:"CustomizationAdapterMapping,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCustomizationAdapterMapping"] = reflect.TypeOf((*ArrayOfCustomizationAdapterMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCustomizationIpV6Generator struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator []BaseCustomizationIpV6Generator `xml:"CustomizationIpV6Generator,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCustomizationIpV6Generator"] = reflect.TypeOf((*ArrayOfCustomizationIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfCustomizationSpecInfo struct {
0000000000000000000000000000000000000000;;		CustomizationSpecInfo []CustomizationSpecInfo `xml:"CustomizationSpecInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfCustomizationSpecInfo"] = reflect.TypeOf((*ArrayOfCustomizationSpecInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDVPortConfigSpec struct {
0000000000000000000000000000000000000000;;		DVPortConfigSpec []DVPortConfigSpec `xml:"DVPortConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDVPortConfigSpec"] = reflect.TypeOf((*ArrayOfDVPortConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDVPortgroupConfigSpec struct {
0000000000000000000000000000000000000000;;		DVPortgroupConfigSpec []DVPortgroupConfigSpec `xml:"DVPortgroupConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDVPortgroupConfigSpec"] = reflect.TypeOf((*ArrayOfDVPortgroupConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDVSHealthCheckConfig struct {
0000000000000000000000000000000000000000;;		DVSHealthCheckConfig []BaseDVSHealthCheckConfig `xml:"DVSHealthCheckConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDVSHealthCheckConfig"] = reflect.TypeOf((*ArrayOfDVSHealthCheckConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDVSNetworkResourcePool struct {
0000000000000000000000000000000000000000;;		DVSNetworkResourcePool []DVSNetworkResourcePool `xml:"DVSNetworkResourcePool,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDVSNetworkResourcePool"] = reflect.TypeOf((*ArrayOfDVSNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDVSNetworkResourcePoolConfigSpec struct {
0000000000000000000000000000000000000000;;		DVSNetworkResourcePoolConfigSpec []DVSNetworkResourcePoolConfigSpec `xml:"DVSNetworkResourcePoolConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDVSNetworkResourcePoolConfigSpec"] = reflect.TypeOf((*ArrayOfDVSNetworkResourcePoolConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDVSVmVnicNetworkResourcePool struct {
0000000000000000000000000000000000000000;;		DVSVmVnicNetworkResourcePool []DVSVmVnicNetworkResourcePool `xml:"DVSVmVnicNetworkResourcePool,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDVSVmVnicNetworkResourcePool"] = reflect.TypeOf((*ArrayOfDVSVmVnicNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDasHeartbeatDatastoreInfo struct {
0000000000000000000000000000000000000000;;		DasHeartbeatDatastoreInfo []DasHeartbeatDatastoreInfo `xml:"DasHeartbeatDatastoreInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDasHeartbeatDatastoreInfo"] = reflect.TypeOf((*ArrayOfDasHeartbeatDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDatacenterMismatchArgument struct {
0000000000000000000000000000000000000000;;		DatacenterMismatchArgument []DatacenterMismatchArgument `xml:"DatacenterMismatchArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDatacenterMismatchArgument"] = reflect.TypeOf((*ArrayOfDatacenterMismatchArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDatastoreHostMount struct {
0000000000000000000000000000000000000000;;		DatastoreHostMount []DatastoreHostMount `xml:"DatastoreHostMount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDatastoreHostMount"] = reflect.TypeOf((*ArrayOfDatastoreHostMount)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDatastoreMountPathDatastorePair struct {
0000000000000000000000000000000000000000;;		DatastoreMountPathDatastorePair []DatastoreMountPathDatastorePair `xml:"DatastoreMountPathDatastorePair,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDatastoreMountPathDatastorePair"] = reflect.TypeOf((*ArrayOfDatastoreMountPathDatastorePair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDatastoreVVolContainerFailoverPair struct {
0000000000000000000000000000000000000000;;		DatastoreVVolContainerFailoverPair []DatastoreVVolContainerFailoverPair `xml:"DatastoreVVolContainerFailoverPair,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDatastoreVVolContainerFailoverPair"] = reflect.TypeOf((*ArrayOfDatastoreVVolContainerFailoverPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDiagnosticManagerBundleInfo struct {
0000000000000000000000000000000000000000;;		DiagnosticManagerBundleInfo []DiagnosticManagerBundleInfo `xml:"DiagnosticManagerBundleInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDiagnosticManagerBundleInfo"] = reflect.TypeOf((*ArrayOfDiagnosticManagerBundleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDiagnosticManagerLogDescriptor struct {
0000000000000000000000000000000000000000;;		DiagnosticManagerLogDescriptor []DiagnosticManagerLogDescriptor `xml:"DiagnosticManagerLogDescriptor,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDiagnosticManagerLogDescriptor"] = reflect.TypeOf((*ArrayOfDiagnosticManagerLogDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDiskChangeExtent struct {
0000000000000000000000000000000000000000;;		DiskChangeExtent []DiskChangeExtent `xml:"DiskChangeExtent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDiskChangeExtent"] = reflect.TypeOf((*ArrayOfDiskChangeExtent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualPort struct {
0000000000000000000000000000000000000000;;		DistributedVirtualPort []DistributedVirtualPort `xml:"DistributedVirtualPort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualPort"] = reflect.TypeOf((*ArrayOfDistributedVirtualPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualPortgroupInfo struct {
0000000000000000000000000000000000000000;;		DistributedVirtualPortgroupInfo []DistributedVirtualPortgroupInfo `xml:"DistributedVirtualPortgroupInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualPortgroupInfo"] = reflect.TypeOf((*ArrayOfDistributedVirtualPortgroupInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchHostMember struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchHostMember []DistributedVirtualSwitchHostMember `xml:"DistributedVirtualSwitchHostMember,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchHostMember"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchHostMember)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchHostMemberConfigSpec struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchHostMemberConfigSpec []DistributedVirtualSwitchHostMemberConfigSpec `xml:"DistributedVirtualSwitchHostMemberConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchHostMemberConfigSpec"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchHostMemberConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchHostMemberPnicSpec struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchHostMemberPnicSpec []DistributedVirtualSwitchHostMemberPnicSpec `xml:"DistributedVirtualSwitchHostMemberPnicSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchHostMemberPnicSpec"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchHostMemberPnicSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchHostProductSpec struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchHostProductSpec []DistributedVirtualSwitchHostProductSpec `xml:"DistributedVirtualSwitchHostProductSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchHostProductSpec"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchHostProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchInfo struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchInfo []DistributedVirtualSwitchInfo `xml:"DistributedVirtualSwitchInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchInfo"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchKeyedOpaqueBlob []DistributedVirtualSwitchKeyedOpaqueBlob `xml:"DistributedVirtualSwitchKeyedOpaqueBlob,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchManagerCompatibilityResult struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchManagerCompatibilityResult []DistributedVirtualSwitchManagerCompatibilityResult `xml:"DistributedVirtualSwitchManagerCompatibilityResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchManagerCompatibilityResult"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchManagerCompatibilityResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchManagerHostDvsFilterSpec []BaseDistributedVirtualSwitchManagerHostDvsFilterSpec `xml:"DistributedVirtualSwitchManagerHostDvsFilterSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDistributedVirtualSwitchProductSpec struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchProductSpec []DistributedVirtualSwitchProductSpec `xml:"DistributedVirtualSwitchProductSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDistributedVirtualSwitchProductSpec"] = reflect.TypeOf((*ArrayOfDistributedVirtualSwitchProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDouble struct {
0000000000000000000000000000000000000000;;		Double []float64 `xml:"double,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDouble"] = reflect.TypeOf((*ArrayOfDouble)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsApplyOperationFaultFaultOnObject struct {
0000000000000000000000000000000000000000;;		DvsApplyOperationFaultFaultOnObject []DvsApplyOperationFaultFaultOnObject `xml:"DvsApplyOperationFaultFaultOnObject,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsApplyOperationFaultFaultOnObject"] = reflect.TypeOf((*ArrayOfDvsApplyOperationFaultFaultOnObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsFilterConfig struct {
0000000000000000000000000000000000000000;;		DvsFilterConfig []BaseDvsFilterConfig `xml:"DvsFilterConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsFilterConfig"] = reflect.TypeOf((*ArrayOfDvsFilterConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsHostInfrastructureTrafficResource struct {
0000000000000000000000000000000000000000;;		DvsHostInfrastructureTrafficResource []DvsHostInfrastructureTrafficResource `xml:"DvsHostInfrastructureTrafficResource,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsHostInfrastructureTrafficResource"] = reflect.TypeOf((*ArrayOfDvsHostInfrastructureTrafficResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsHostVNicProfile struct {
0000000000000000000000000000000000000000;;		DvsHostVNicProfile []DvsHostVNicProfile `xml:"DvsHostVNicProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsHostVNicProfile"] = reflect.TypeOf((*ArrayOfDvsHostVNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsNetworkRuleQualifier struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleQualifier []BaseDvsNetworkRuleQualifier `xml:"DvsNetworkRuleQualifier,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsNetworkRuleQualifier"] = reflect.TypeOf((*ArrayOfDvsNetworkRuleQualifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsOperationBulkFaultFaultOnHost struct {
0000000000000000000000000000000000000000;;		DvsOperationBulkFaultFaultOnHost []DvsOperationBulkFaultFaultOnHost `xml:"DvsOperationBulkFaultFaultOnHost,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsOperationBulkFaultFaultOnHost"] = reflect.TypeOf((*ArrayOfDvsOperationBulkFaultFaultOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsOutOfSyncHostArgument struct {
0000000000000000000000000000000000000000;;		DvsOutOfSyncHostArgument []DvsOutOfSyncHostArgument `xml:"DvsOutOfSyncHostArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsOutOfSyncHostArgument"] = reflect.TypeOf((*ArrayOfDvsOutOfSyncHostArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsProfile struct {
0000000000000000000000000000000000000000;;		DvsProfile []DvsProfile `xml:"DvsProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsProfile"] = reflect.TypeOf((*ArrayOfDvsProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsServiceConsoleVNicProfile struct {
0000000000000000000000000000000000000000;;		DvsServiceConsoleVNicProfile []DvsServiceConsoleVNicProfile `xml:"DvsServiceConsoleVNicProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsServiceConsoleVNicProfile"] = reflect.TypeOf((*ArrayOfDvsServiceConsoleVNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsTrafficRule struct {
0000000000000000000000000000000000000000;;		DvsTrafficRule []DvsTrafficRule `xml:"DvsTrafficRule,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsTrafficRule"] = reflect.TypeOf((*ArrayOfDvsTrafficRule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DvsVmVnicNetworkResourcePoolRuntimeInfo []DvsVmVnicNetworkResourcePoolRuntimeInfo `xml:"DvsVmVnicNetworkResourcePoolRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo"] = reflect.TypeOf((*ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsVmVnicResourcePoolConfigSpec struct {
0000000000000000000000000000000000000000;;		DvsVmVnicResourcePoolConfigSpec []DvsVmVnicResourcePoolConfigSpec `xml:"DvsVmVnicResourcePoolConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsVmVnicResourcePoolConfigSpec"] = reflect.TypeOf((*ArrayOfDvsVmVnicResourcePoolConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDvsVnicAllocatedResource struct {
0000000000000000000000000000000000000000;;		DvsVnicAllocatedResource []DvsVnicAllocatedResource `xml:"DvsVnicAllocatedResource,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDvsVnicAllocatedResource"] = reflect.TypeOf((*ArrayOfDvsVnicAllocatedResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfDynamicProperty struct {
0000000000000000000000000000000000000000;;		DynamicProperty []DynamicProperty `xml:"DynamicProperty,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfDynamicProperty"] = reflect.TypeOf((*ArrayOfDynamicProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEVCMode struct {
0000000000000000000000000000000000000000;;		EVCMode []EVCMode `xml:"EVCMode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEVCMode"] = reflect.TypeOf((*ArrayOfEVCMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfElementDescription struct {
0000000000000000000000000000000000000000;;		ElementDescription []BaseElementDescription `xml:"ElementDescription,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfElementDescription"] = reflect.TypeOf((*ArrayOfElementDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEntityBackupConfig struct {
0000000000000000000000000000000000000000;;		EntityBackupConfig []EntityBackupConfig `xml:"EntityBackupConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEntityBackupConfig"] = reflect.TypeOf((*ArrayOfEntityBackupConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEntityPrivilege struct {
0000000000000000000000000000000000000000;;		EntityPrivilege []EntityPrivilege `xml:"EntityPrivilege,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEntityPrivilege"] = reflect.TypeOf((*ArrayOfEntityPrivilege)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEnumDescription struct {
0000000000000000000000000000000000000000;;		EnumDescription []EnumDescription `xml:"EnumDescription,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEnumDescription"] = reflect.TypeOf((*ArrayOfEnumDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEvent struct {
0000000000000000000000000000000000000000;;		Event []BaseEvent `xml:"Event,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEvent"] = reflect.TypeOf((*ArrayOfEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEventAlarmExpressionComparison struct {
0000000000000000000000000000000000000000;;		EventAlarmExpressionComparison []EventAlarmExpressionComparison `xml:"EventAlarmExpressionComparison,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEventAlarmExpressionComparison"] = reflect.TypeOf((*ArrayOfEventAlarmExpressionComparison)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEventArgDesc struct {
0000000000000000000000000000000000000000;;		EventArgDesc []EventArgDesc `xml:"EventArgDesc,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEventArgDesc"] = reflect.TypeOf((*ArrayOfEventArgDesc)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfEventDescriptionEventDetail struct {
0000000000000000000000000000000000000000;;		EventDescriptionEventDetail []EventDescriptionEventDetail `xml:"EventDescriptionEventDetail,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfEventDescriptionEventDetail"] = reflect.TypeOf((*ArrayOfEventDescriptionEventDetail)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtManagedEntityInfo struct {
0000000000000000000000000000000000000000;;		ExtManagedEntityInfo []ExtManagedEntityInfo `xml:"ExtManagedEntityInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtManagedEntityInfo"] = reflect.TypeOf((*ArrayOfExtManagedEntityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtSolutionManagerInfoTabInfo struct {
0000000000000000000000000000000000000000;;		ExtSolutionManagerInfoTabInfo []ExtSolutionManagerInfoTabInfo `xml:"ExtSolutionManagerInfoTabInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtSolutionManagerInfoTabInfo"] = reflect.TypeOf((*ArrayOfExtSolutionManagerInfoTabInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtendedEventPair struct {
0000000000000000000000000000000000000000;;		ExtendedEventPair []ExtendedEventPair `xml:"ExtendedEventPair,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtendedEventPair"] = reflect.TypeOf((*ArrayOfExtendedEventPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtension struct {
0000000000000000000000000000000000000000;;		Extension []Extension `xml:"Extension,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtension"] = reflect.TypeOf((*ArrayOfExtension)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionClientInfo struct {
0000000000000000000000000000000000000000;;		ExtensionClientInfo []ExtensionClientInfo `xml:"ExtensionClientInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionClientInfo"] = reflect.TypeOf((*ArrayOfExtensionClientInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionEventTypeInfo struct {
0000000000000000000000000000000000000000;;		ExtensionEventTypeInfo []ExtensionEventTypeInfo `xml:"ExtensionEventTypeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionEventTypeInfo"] = reflect.TypeOf((*ArrayOfExtensionEventTypeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionFaultTypeInfo struct {
0000000000000000000000000000000000000000;;		ExtensionFaultTypeInfo []ExtensionFaultTypeInfo `xml:"ExtensionFaultTypeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionFaultTypeInfo"] = reflect.TypeOf((*ArrayOfExtensionFaultTypeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionManagerIpAllocationUsage struct {
0000000000000000000000000000000000000000;;		ExtensionManagerIpAllocationUsage []ExtensionManagerIpAllocationUsage `xml:"ExtensionManagerIpAllocationUsage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionManagerIpAllocationUsage"] = reflect.TypeOf((*ArrayOfExtensionManagerIpAllocationUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionPrivilegeInfo struct {
0000000000000000000000000000000000000000;;		ExtensionPrivilegeInfo []ExtensionPrivilegeInfo `xml:"ExtensionPrivilegeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionPrivilegeInfo"] = reflect.TypeOf((*ArrayOfExtensionPrivilegeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionResourceInfo struct {
0000000000000000000000000000000000000000;;		ExtensionResourceInfo []ExtensionResourceInfo `xml:"ExtensionResourceInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionResourceInfo"] = reflect.TypeOf((*ArrayOfExtensionResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionServerInfo struct {
0000000000000000000000000000000000000000;;		ExtensionServerInfo []ExtensionServerInfo `xml:"ExtensionServerInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionServerInfo"] = reflect.TypeOf((*ArrayOfExtensionServerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfExtensionTaskTypeInfo struct {
0000000000000000000000000000000000000000;;		ExtensionTaskTypeInfo []ExtensionTaskTypeInfo `xml:"ExtensionTaskTypeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfExtensionTaskTypeInfo"] = reflect.TypeOf((*ArrayOfExtensionTaskTypeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfFaultToleranceDiskSpec struct {
0000000000000000000000000000000000000000;;		FaultToleranceDiskSpec []FaultToleranceDiskSpec `xml:"FaultToleranceDiskSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfFaultToleranceDiskSpec"] = reflect.TypeOf((*ArrayOfFaultToleranceDiskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfFcoeConfigVlanRange struct {
0000000000000000000000000000000000000000;;		FcoeConfigVlanRange []FcoeConfigVlanRange `xml:"FcoeConfigVlanRange,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfFcoeConfigVlanRange"] = reflect.TypeOf((*ArrayOfFcoeConfigVlanRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo []BaseFileInfo `xml:"FileInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfFileInfo"] = reflect.TypeOf((*ArrayOfFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery []BaseFileQuery `xml:"FileQuery,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfFileQuery"] = reflect.TypeOf((*ArrayOfFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfFirewallProfileRulesetProfile struct {
0000000000000000000000000000000000000000;;		FirewallProfileRulesetProfile []FirewallProfileRulesetProfile `xml:"FirewallProfileRulesetProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfFirewallProfileRulesetProfile"] = reflect.TypeOf((*ArrayOfFirewallProfileRulesetProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestAliases struct {
0000000000000000000000000000000000000000;;		GuestAliases []GuestAliases `xml:"GuestAliases,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestAliases"] = reflect.TypeOf((*ArrayOfGuestAliases)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestAuthAliasInfo struct {
0000000000000000000000000000000000000000;;		GuestAuthAliasInfo []GuestAuthAliasInfo `xml:"GuestAuthAliasInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestAuthAliasInfo"] = reflect.TypeOf((*ArrayOfGuestAuthAliasInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestAuthSubject struct {
0000000000000000000000000000000000000000;;		GuestAuthSubject []BaseGuestAuthSubject `xml:"GuestAuthSubject,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestAuthSubject"] = reflect.TypeOf((*ArrayOfGuestAuthSubject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestDiskInfo struct {
0000000000000000000000000000000000000000;;		GuestDiskInfo []GuestDiskInfo `xml:"GuestDiskInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestDiskInfo"] = reflect.TypeOf((*ArrayOfGuestDiskInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestFileInfo struct {
0000000000000000000000000000000000000000;;		GuestFileInfo []GuestFileInfo `xml:"GuestFileInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestFileInfo"] = reflect.TypeOf((*ArrayOfGuestFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestInfoNamespaceGenerationInfo struct {
0000000000000000000000000000000000000000;;		GuestInfoNamespaceGenerationInfo []GuestInfoNamespaceGenerationInfo `xml:"GuestInfoNamespaceGenerationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestInfoNamespaceGenerationInfo"] = reflect.TypeOf((*ArrayOfGuestInfoNamespaceGenerationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestMappedAliases struct {
0000000000000000000000000000000000000000;;		GuestMappedAliases []GuestMappedAliases `xml:"GuestMappedAliases,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestMappedAliases"] = reflect.TypeOf((*ArrayOfGuestMappedAliases)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestNicInfo struct {
0000000000000000000000000000000000000000;;		GuestNicInfo []GuestNicInfo `xml:"GuestNicInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestNicInfo"] = reflect.TypeOf((*ArrayOfGuestNicInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestOsDescriptor struct {
0000000000000000000000000000000000000000;;		GuestOsDescriptor []GuestOsDescriptor `xml:"GuestOsDescriptor,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestOsDescriptor"] = reflect.TypeOf((*ArrayOfGuestOsDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestProcessInfo struct {
0000000000000000000000000000000000000000;;		GuestProcessInfo []GuestProcessInfo `xml:"GuestProcessInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestProcessInfo"] = reflect.TypeOf((*ArrayOfGuestProcessInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestRegKeyRecordSpec struct {
0000000000000000000000000000000000000000;;		GuestRegKeyRecordSpec []GuestRegKeyRecordSpec `xml:"GuestRegKeyRecordSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestRegKeyRecordSpec"] = reflect.TypeOf((*ArrayOfGuestRegKeyRecordSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestRegValueSpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueSpec []GuestRegValueSpec `xml:"GuestRegValueSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestRegValueSpec"] = reflect.TypeOf((*ArrayOfGuestRegValueSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfGuestStackInfo struct {
0000000000000000000000000000000000000000;;		GuestStackInfo []GuestStackInfo `xml:"GuestStackInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfGuestStackInfo"] = reflect.TypeOf((*ArrayOfGuestStackInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHbrManagerVmReplicationCapability struct {
0000000000000000000000000000000000000000;;		HbrManagerVmReplicationCapability []HbrManagerVmReplicationCapability `xml:"HbrManagerVmReplicationCapability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHbrManagerVmReplicationCapability"] = reflect.TypeOf((*ArrayOfHbrManagerVmReplicationCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHealthUpdate struct {
0000000000000000000000000000000000000000;;		HealthUpdate []HealthUpdate `xml:"HealthUpdate,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHealthUpdate"] = reflect.TypeOf((*ArrayOfHealthUpdate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHealthUpdateInfo struct {
0000000000000000000000000000000000000000;;		HealthUpdateInfo []HealthUpdateInfo `xml:"HealthUpdateInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHealthUpdateInfo"] = reflect.TypeOf((*ArrayOfHealthUpdateInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostAccessControlEntry struct {
0000000000000000000000000000000000000000;;		HostAccessControlEntry []HostAccessControlEntry `xml:"HostAccessControlEntry,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostAccessControlEntry"] = reflect.TypeOf((*ArrayOfHostAccessControlEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostAccountSpec struct {
0000000000000000000000000000000000000000;;		HostAccountSpec []BaseHostAccountSpec `xml:"HostAccountSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostAccountSpec"] = reflect.TypeOf((*ArrayOfHostAccountSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostActiveDirectory struct {
0000000000000000000000000000000000000000;;		HostActiveDirectory []HostActiveDirectory `xml:"HostActiveDirectory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostActiveDirectory"] = reflect.TypeOf((*ArrayOfHostActiveDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostAuthenticationStoreInfo struct {
0000000000000000000000000000000000000000;;		HostAuthenticationStoreInfo []BaseHostAuthenticationStoreInfo `xml:"HostAuthenticationStoreInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostAuthenticationStoreInfo"] = reflect.TypeOf((*ArrayOfHostAuthenticationStoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostBootDevice struct {
0000000000000000000000000000000000000000;;		HostBootDevice []HostBootDevice `xml:"HostBootDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostBootDevice"] = reflect.TypeOf((*ArrayOfHostBootDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostCacheConfigurationInfo struct {
0000000000000000000000000000000000000000;;		HostCacheConfigurationInfo []HostCacheConfigurationInfo `xml:"HostCacheConfigurationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostCacheConfigurationInfo"] = reflect.TypeOf((*ArrayOfHostCacheConfigurationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostConnectInfoNetworkInfo struct {
0000000000000000000000000000000000000000;;		HostConnectInfoNetworkInfo []BaseHostConnectInfoNetworkInfo `xml:"HostConnectInfoNetworkInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostConnectInfoNetworkInfo"] = reflect.TypeOf((*ArrayOfHostConnectInfoNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostCpuIdInfo struct {
0000000000000000000000000000000000000000;;		HostCpuIdInfo []HostCpuIdInfo `xml:"HostCpuIdInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostCpuIdInfo"] = reflect.TypeOf((*ArrayOfHostCpuIdInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostCpuPackage struct {
0000000000000000000000000000000000000000;;		HostCpuPackage []HostCpuPackage `xml:"HostCpuPackage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostCpuPackage"] = reflect.TypeOf((*ArrayOfHostCpuPackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDatastoreBrowserSearchResults struct {
0000000000000000000000000000000000000000;;		HostDatastoreBrowserSearchResults []HostDatastoreBrowserSearchResults `xml:"HostDatastoreBrowserSearchResults,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDatastoreBrowserSearchResults"] = reflect.TypeOf((*ArrayOfHostDatastoreBrowserSearchResults)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDatastoreConnectInfo struct {
0000000000000000000000000000000000000000;;		HostDatastoreConnectInfo []BaseHostDatastoreConnectInfo `xml:"HostDatastoreConnectInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDatastoreConnectInfo"] = reflect.TypeOf((*ArrayOfHostDatastoreConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDatastoreSystemDatastoreResult struct {
0000000000000000000000000000000000000000;;		HostDatastoreSystemDatastoreResult []HostDatastoreSystemDatastoreResult `xml:"HostDatastoreSystemDatastoreResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDatastoreSystemDatastoreResult"] = reflect.TypeOf((*ArrayOfHostDatastoreSystemDatastoreResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDateTimeSystemTimeZone struct {
0000000000000000000000000000000000000000;;		HostDateTimeSystemTimeZone []HostDateTimeSystemTimeZone `xml:"HostDateTimeSystemTimeZone,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDateTimeSystemTimeZone"] = reflect.TypeOf((*ArrayOfHostDateTimeSystemTimeZone)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDhcpService struct {
0000000000000000000000000000000000000000;;		HostDhcpService []HostDhcpService `xml:"HostDhcpService,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDhcpService"] = reflect.TypeOf((*ArrayOfHostDhcpService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDhcpServiceConfig struct {
0000000000000000000000000000000000000000;;		HostDhcpServiceConfig []HostDhcpServiceConfig `xml:"HostDhcpServiceConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDhcpServiceConfig"] = reflect.TypeOf((*ArrayOfHostDhcpServiceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiagnosticPartition struct {
0000000000000000000000000000000000000000;;		HostDiagnosticPartition []HostDiagnosticPartition `xml:"HostDiagnosticPartition,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiagnosticPartition"] = reflect.TypeOf((*ArrayOfHostDiagnosticPartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiagnosticPartitionCreateOption struct {
0000000000000000000000000000000000000000;;		HostDiagnosticPartitionCreateOption []HostDiagnosticPartitionCreateOption `xml:"HostDiagnosticPartitionCreateOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiagnosticPartitionCreateOption"] = reflect.TypeOf((*ArrayOfHostDiagnosticPartitionCreateOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiskConfigurationResult struct {
0000000000000000000000000000000000000000;;		HostDiskConfigurationResult []HostDiskConfigurationResult `xml:"HostDiskConfigurationResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiskConfigurationResult"] = reflect.TypeOf((*ArrayOfHostDiskConfigurationResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiskMappingPartitionOption struct {
0000000000000000000000000000000000000000;;		HostDiskMappingPartitionOption []HostDiskMappingPartitionOption `xml:"HostDiskMappingPartitionOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiskMappingPartitionOption"] = reflect.TypeOf((*ArrayOfHostDiskMappingPartitionOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiskPartitionAttributes struct {
0000000000000000000000000000000000000000;;		HostDiskPartitionAttributes []HostDiskPartitionAttributes `xml:"HostDiskPartitionAttributes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiskPartitionAttributes"] = reflect.TypeOf((*ArrayOfHostDiskPartitionAttributes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiskPartitionBlockRange struct {
0000000000000000000000000000000000000000;;		HostDiskPartitionBlockRange []HostDiskPartitionBlockRange `xml:"HostDiskPartitionBlockRange,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiskPartitionBlockRange"] = reflect.TypeOf((*ArrayOfHostDiskPartitionBlockRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostDiskPartitionInfo struct {
0000000000000000000000000000000000000000;;		HostDiskPartitionInfo []HostDiskPartitionInfo `xml:"HostDiskPartitionInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostDiskPartitionInfo"] = reflect.TypeOf((*ArrayOfHostDiskPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostEventArgument struct {
0000000000000000000000000000000000000000;;		HostEventArgument []HostEventArgument `xml:"HostEventArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostEventArgument"] = reflect.TypeOf((*ArrayOfHostEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFeatureCapability struct {
0000000000000000000000000000000000000000;;		HostFeatureCapability []HostFeatureCapability `xml:"HostFeatureCapability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFeatureCapability"] = reflect.TypeOf((*ArrayOfHostFeatureCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFeatureMask struct {
0000000000000000000000000000000000000000;;		HostFeatureMask []HostFeatureMask `xml:"HostFeatureMask,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFeatureMask"] = reflect.TypeOf((*ArrayOfHostFeatureMask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFeatureVersionInfo struct {
0000000000000000000000000000000000000000;;		HostFeatureVersionInfo []HostFeatureVersionInfo `xml:"HostFeatureVersionInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFeatureVersionInfo"] = reflect.TypeOf((*ArrayOfHostFeatureVersionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFileSystemMountInfo struct {
0000000000000000000000000000000000000000;;		HostFileSystemMountInfo []HostFileSystemMountInfo `xml:"HostFileSystemMountInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFileSystemMountInfo"] = reflect.TypeOf((*ArrayOfHostFileSystemMountInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFirewallConfigRuleSetConfig struct {
0000000000000000000000000000000000000000;;		HostFirewallConfigRuleSetConfig []HostFirewallConfigRuleSetConfig `xml:"HostFirewallConfigRuleSetConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFirewallConfigRuleSetConfig"] = reflect.TypeOf((*ArrayOfHostFirewallConfigRuleSetConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFirewallRule struct {
0000000000000000000000000000000000000000;;		HostFirewallRule []HostFirewallRule `xml:"HostFirewallRule,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFirewallRule"] = reflect.TypeOf((*ArrayOfHostFirewallRule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFirewallRuleset struct {
0000000000000000000000000000000000000000;;		HostFirewallRuleset []HostFirewallRuleset `xml:"HostFirewallRuleset,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFirewallRuleset"] = reflect.TypeOf((*ArrayOfHostFirewallRuleset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostFirewallRulesetIpNetwork struct {
0000000000000000000000000000000000000000;;		HostFirewallRulesetIpNetwork []HostFirewallRulesetIpNetwork `xml:"HostFirewallRulesetIpNetwork,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostFirewallRulesetIpNetwork"] = reflect.TypeOf((*ArrayOfHostFirewallRulesetIpNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostGraphicsConfigDeviceType struct {
0000000000000000000000000000000000000000;;		HostGraphicsConfigDeviceType []HostGraphicsConfigDeviceType `xml:"HostGraphicsConfigDeviceType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostGraphicsConfigDeviceType"] = reflect.TypeOf((*ArrayOfHostGraphicsConfigDeviceType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostGraphicsInfo struct {
0000000000000000000000000000000000000000;;		HostGraphicsInfo []HostGraphicsInfo `xml:"HostGraphicsInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostGraphicsInfo"] = reflect.TypeOf((*ArrayOfHostGraphicsInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostHardwareElementInfo struct {
0000000000000000000000000000000000000000;;		HostHardwareElementInfo []BaseHostHardwareElementInfo `xml:"HostHardwareElementInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostHardwareElementInfo"] = reflect.TypeOf((*ArrayOfHostHardwareElementInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostHostBusAdapter struct {
0000000000000000000000000000000000000000;;		HostHostBusAdapter []BaseHostHostBusAdapter `xml:"HostHostBusAdapter,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostHostBusAdapter"] = reflect.TypeOf((*ArrayOfHostHostBusAdapter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostInternetScsiHbaIscsiIpv6Address struct {
0000000000000000000000000000000000000000;;		HostInternetScsiHbaIscsiIpv6Address []HostInternetScsiHbaIscsiIpv6Address `xml:"HostInternetScsiHbaIscsiIpv6Address,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostInternetScsiHbaIscsiIpv6Address"] = reflect.TypeOf((*ArrayOfHostInternetScsiHbaIscsiIpv6Address)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostInternetScsiHbaParamValue struct {
0000000000000000000000000000000000000000;;		HostInternetScsiHbaParamValue []HostInternetScsiHbaParamValue `xml:"HostInternetScsiHbaParamValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostInternetScsiHbaParamValue"] = reflect.TypeOf((*ArrayOfHostInternetScsiHbaParamValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostInternetScsiHbaSendTarget struct {
0000000000000000000000000000000000000000;;		HostInternetScsiHbaSendTarget []HostInternetScsiHbaSendTarget `xml:"HostInternetScsiHbaSendTarget,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostInternetScsiHbaSendTarget"] = reflect.TypeOf((*ArrayOfHostInternetScsiHbaSendTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostInternetScsiHbaStaticTarget struct {
0000000000000000000000000000000000000000;;		HostInternetScsiHbaStaticTarget []HostInternetScsiHbaStaticTarget `xml:"HostInternetScsiHbaStaticTarget,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostInternetScsiHbaStaticTarget"] = reflect.TypeOf((*ArrayOfHostInternetScsiHbaStaticTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostIoFilterInfo struct {
0000000000000000000000000000000000000000;;		HostIoFilterInfo []HostIoFilterInfo `xml:"HostIoFilterInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostIoFilterInfo"] = reflect.TypeOf((*ArrayOfHostIoFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostIpConfigIpV6Address struct {
0000000000000000000000000000000000000000;;		HostIpConfigIpV6Address []HostIpConfigIpV6Address `xml:"HostIpConfigIpV6Address,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostIpConfigIpV6Address"] = reflect.TypeOf((*ArrayOfHostIpConfigIpV6Address)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostIpRouteEntry struct {
0000000000000000000000000000000000000000;;		HostIpRouteEntry []HostIpRouteEntry `xml:"HostIpRouteEntry,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostIpRouteEntry"] = reflect.TypeOf((*ArrayOfHostIpRouteEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostIpRouteOp struct {
0000000000000000000000000000000000000000;;		HostIpRouteOp []HostIpRouteOp `xml:"HostIpRouteOp,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostIpRouteOp"] = reflect.TypeOf((*ArrayOfHostIpRouteOp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec struct {
0000000000000000000000000000000000000000;;		HostLowLevelProvisioningManagerDiskLayoutSpec []HostLowLevelProvisioningManagerDiskLayoutSpec `xml:"HostLowLevelProvisioningManagerDiskLayoutSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec"] = reflect.TypeOf((*ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostLowLevelProvisioningManagerFileDeleteResult struct {
0000000000000000000000000000000000000000;;		HostLowLevelProvisioningManagerFileDeleteResult []HostLowLevelProvisioningManagerFileDeleteResult `xml:"HostLowLevelProvisioningManagerFileDeleteResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostLowLevelProvisioningManagerFileDeleteResult"] = reflect.TypeOf((*ArrayOfHostLowLevelProvisioningManagerFileDeleteResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec struct {
0000000000000000000000000000000000000000;;		HostLowLevelProvisioningManagerFileDeleteSpec []HostLowLevelProvisioningManagerFileDeleteSpec `xml:"HostLowLevelProvisioningManagerFileDeleteSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec"] = reflect.TypeOf((*ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostLowLevelProvisioningManagerFileReserveResult struct {
0000000000000000000000000000000000000000;;		HostLowLevelProvisioningManagerFileReserveResult []HostLowLevelProvisioningManagerFileReserveResult `xml:"HostLowLevelProvisioningManagerFileReserveResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostLowLevelProvisioningManagerFileReserveResult"] = reflect.TypeOf((*ArrayOfHostLowLevelProvisioningManagerFileReserveResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostLowLevelProvisioningManagerFileReserveSpec struct {
0000000000000000000000000000000000000000;;		HostLowLevelProvisioningManagerFileReserveSpec []HostLowLevelProvisioningManagerFileReserveSpec `xml:"HostLowLevelProvisioningManagerFileReserveSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostLowLevelProvisioningManagerFileReserveSpec"] = reflect.TypeOf((*ArrayOfHostLowLevelProvisioningManagerFileReserveSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec struct {
0000000000000000000000000000000000000000;;		HostLowLevelProvisioningManagerSnapshotLayoutSpec []HostLowLevelProvisioningManagerSnapshotLayoutSpec `xml:"HostLowLevelProvisioningManagerSnapshotLayoutSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec"] = reflect.TypeOf((*ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostMemberHealthCheckResult struct {
0000000000000000000000000000000000000000;;		HostMemberHealthCheckResult []BaseHostMemberHealthCheckResult `xml:"HostMemberHealthCheckResult,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostMemberHealthCheckResult"] = reflect.TypeOf((*ArrayOfHostMemberHealthCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostMemberRuntimeInfo struct {
0000000000000000000000000000000000000000;;		HostMemberRuntimeInfo []HostMemberRuntimeInfo `xml:"HostMemberRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostMemberRuntimeInfo"] = reflect.TypeOf((*ArrayOfHostMemberRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostMultipathInfoLogicalUnit struct {
0000000000000000000000000000000000000000;;		HostMultipathInfoLogicalUnit []HostMultipathInfoLogicalUnit `xml:"HostMultipathInfoLogicalUnit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostMultipathInfoLogicalUnit"] = reflect.TypeOf((*ArrayOfHostMultipathInfoLogicalUnit)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostMultipathInfoPath struct {
0000000000000000000000000000000000000000;;		HostMultipathInfoPath []HostMultipathInfoPath `xml:"HostMultipathInfoPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostMultipathInfoPath"] = reflect.TypeOf((*ArrayOfHostMultipathInfoPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostMultipathStateInfoPath struct {
0000000000000000000000000000000000000000;;		HostMultipathStateInfoPath []HostMultipathStateInfoPath `xml:"HostMultipathStateInfoPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostMultipathStateInfoPath"] = reflect.TypeOf((*ArrayOfHostMultipathStateInfoPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNasVolumeConfig struct {
0000000000000000000000000000000000000000;;		HostNasVolumeConfig []HostNasVolumeConfig `xml:"HostNasVolumeConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNasVolumeConfig"] = reflect.TypeOf((*ArrayOfHostNasVolumeConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNatService struct {
0000000000000000000000000000000000000000;;		HostNatService []HostNatService `xml:"HostNatService,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNatService"] = reflect.TypeOf((*ArrayOfHostNatService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNatServiceConfig struct {
0000000000000000000000000000000000000000;;		HostNatServiceConfig []HostNatServiceConfig `xml:"HostNatServiceConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNatServiceConfig"] = reflect.TypeOf((*ArrayOfHostNatServiceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNatServicePortForwardSpec struct {
0000000000000000000000000000000000000000;;		HostNatServicePortForwardSpec []HostNatServicePortForwardSpec `xml:"HostNatServicePortForwardSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNatServicePortForwardSpec"] = reflect.TypeOf((*ArrayOfHostNatServicePortForwardSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNetStackInstance struct {
0000000000000000000000000000000000000000;;		HostNetStackInstance []HostNetStackInstance `xml:"HostNetStackInstance,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNetStackInstance"] = reflect.TypeOf((*ArrayOfHostNetStackInstance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNetworkConfigNetStackSpec struct {
0000000000000000000000000000000000000000;;		HostNetworkConfigNetStackSpec []HostNetworkConfigNetStackSpec `xml:"HostNetworkConfigNetStackSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNetworkConfigNetStackSpec"] = reflect.TypeOf((*ArrayOfHostNetworkConfigNetStackSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNumaNode struct {
0000000000000000000000000000000000000000;;		HostNumaNode []HostNumaNode `xml:"HostNumaNode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNumaNode"] = reflect.TypeOf((*ArrayOfHostNumaNode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostNumericSensorInfo struct {
0000000000000000000000000000000000000000;;		HostNumericSensorInfo []HostNumericSensorInfo `xml:"HostNumericSensorInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostNumericSensorInfo"] = reflect.TypeOf((*ArrayOfHostNumericSensorInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostOpaqueNetworkInfo struct {
0000000000000000000000000000000000000000;;		HostOpaqueNetworkInfo []HostOpaqueNetworkInfo `xml:"HostOpaqueNetworkInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostOpaqueNetworkInfo"] = reflect.TypeOf((*ArrayOfHostOpaqueNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostOpaqueSwitch struct {
0000000000000000000000000000000000000000;;		HostOpaqueSwitch []HostOpaqueSwitch `xml:"HostOpaqueSwitch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostOpaqueSwitch"] = reflect.TypeOf((*ArrayOfHostOpaqueSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostOpaqueSwitchPhysicalNicZone struct {
0000000000000000000000000000000000000000;;		HostOpaqueSwitchPhysicalNicZone []HostOpaqueSwitchPhysicalNicZone `xml:"HostOpaqueSwitchPhysicalNicZone,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostOpaqueSwitchPhysicalNicZone"] = reflect.TypeOf((*ArrayOfHostOpaqueSwitchPhysicalNicZone)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPatchManagerStatus struct {
0000000000000000000000000000000000000000;;		HostPatchManagerStatus []HostPatchManagerStatus `xml:"HostPatchManagerStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPatchManagerStatus"] = reflect.TypeOf((*ArrayOfHostPatchManagerStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPatchManagerStatusPrerequisitePatch struct {
0000000000000000000000000000000000000000;;		HostPatchManagerStatusPrerequisitePatch []HostPatchManagerStatusPrerequisitePatch `xml:"HostPatchManagerStatusPrerequisitePatch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPatchManagerStatusPrerequisitePatch"] = reflect.TypeOf((*ArrayOfHostPatchManagerStatusPrerequisitePatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPathSelectionPolicyOption struct {
0000000000000000000000000000000000000000;;		HostPathSelectionPolicyOption []HostPathSelectionPolicyOption `xml:"HostPathSelectionPolicyOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPathSelectionPolicyOption"] = reflect.TypeOf((*ArrayOfHostPathSelectionPolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPciDevice struct {
0000000000000000000000000000000000000000;;		HostPciDevice []HostPciDevice `xml:"HostPciDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPciDevice"] = reflect.TypeOf((*ArrayOfHostPciDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPciPassthruConfig struct {
0000000000000000000000000000000000000000;;		HostPciPassthruConfig []BaseHostPciPassthruConfig `xml:"HostPciPassthruConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPciPassthruConfig"] = reflect.TypeOf((*ArrayOfHostPciPassthruConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPciPassthruInfo struct {
0000000000000000000000000000000000000000;;		HostPciPassthruInfo []BaseHostPciPassthruInfo `xml:"HostPciPassthruInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPciPassthruInfo"] = reflect.TypeOf((*ArrayOfHostPciPassthruInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPlacedVirtualNicIdentifier struct {
0000000000000000000000000000000000000000;;		HostPlacedVirtualNicIdentifier []HostPlacedVirtualNicIdentifier `xml:"HostPlacedVirtualNicIdentifier,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPlacedVirtualNicIdentifier"] = reflect.TypeOf((*ArrayOfHostPlacedVirtualNicIdentifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPlugStoreTopologyAdapter struct {
0000000000000000000000000000000000000000;;		HostPlugStoreTopologyAdapter []HostPlugStoreTopologyAdapter `xml:"HostPlugStoreTopologyAdapter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPlugStoreTopologyAdapter"] = reflect.TypeOf((*ArrayOfHostPlugStoreTopologyAdapter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPlugStoreTopologyDevice struct {
0000000000000000000000000000000000000000;;		HostPlugStoreTopologyDevice []HostPlugStoreTopologyDevice `xml:"HostPlugStoreTopologyDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPlugStoreTopologyDevice"] = reflect.TypeOf((*ArrayOfHostPlugStoreTopologyDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPlugStoreTopologyPath struct {
0000000000000000000000000000000000000000;;		HostPlugStoreTopologyPath []HostPlugStoreTopologyPath `xml:"HostPlugStoreTopologyPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPlugStoreTopologyPath"] = reflect.TypeOf((*ArrayOfHostPlugStoreTopologyPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPlugStoreTopologyPlugin struct {
0000000000000000000000000000000000000000;;		HostPlugStoreTopologyPlugin []HostPlugStoreTopologyPlugin `xml:"HostPlugStoreTopologyPlugin,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPlugStoreTopologyPlugin"] = reflect.TypeOf((*ArrayOfHostPlugStoreTopologyPlugin)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPlugStoreTopologyTarget struct {
0000000000000000000000000000000000000000;;		HostPlugStoreTopologyTarget []HostPlugStoreTopologyTarget `xml:"HostPlugStoreTopologyTarget,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPlugStoreTopologyTarget"] = reflect.TypeOf((*ArrayOfHostPlugStoreTopologyTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPnicNetworkResourceInfo struct {
0000000000000000000000000000000000000000;;		HostPnicNetworkResourceInfo []HostPnicNetworkResourceInfo `xml:"HostPnicNetworkResourceInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPnicNetworkResourceInfo"] = reflect.TypeOf((*ArrayOfHostPnicNetworkResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPortGroup struct {
0000000000000000000000000000000000000000;;		HostPortGroup []HostPortGroup `xml:"HostPortGroup,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPortGroup"] = reflect.TypeOf((*ArrayOfHostPortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPortGroupConfig struct {
0000000000000000000000000000000000000000;;		HostPortGroupConfig []HostPortGroupConfig `xml:"HostPortGroupConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPortGroupConfig"] = reflect.TypeOf((*ArrayOfHostPortGroupConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPortGroupPort struct {
0000000000000000000000000000000000000000;;		HostPortGroupPort []HostPortGroupPort `xml:"HostPortGroupPort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPortGroupPort"] = reflect.TypeOf((*ArrayOfHostPortGroupPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPortGroupProfile struct {
0000000000000000000000000000000000000000;;		HostPortGroupProfile []HostPortGroupProfile `xml:"HostPortGroupProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPortGroupProfile"] = reflect.TypeOf((*ArrayOfHostPortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostPowerPolicy struct {
0000000000000000000000000000000000000000;;		HostPowerPolicy []HostPowerPolicy `xml:"HostPowerPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostPowerPolicy"] = reflect.TypeOf((*ArrayOfHostPowerPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProfileManagerCompositionValidationResultResultElement struct {
0000000000000000000000000000000000000000;;		HostProfileManagerCompositionValidationResultResultElement []HostProfileManagerCompositionValidationResultResultElement `xml:"HostProfileManagerCompositionValidationResultResultElement,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProfileManagerCompositionValidationResultResultElement"] = reflect.TypeOf((*ArrayOfHostProfileManagerCompositionValidationResultResultElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProfileManagerHostToConfigSpecMap struct {
0000000000000000000000000000000000000000;;		HostProfileManagerHostToConfigSpecMap []HostProfileManagerHostToConfigSpecMap `xml:"HostProfileManagerHostToConfigSpecMap,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProfileManagerHostToConfigSpecMap"] = reflect.TypeOf((*ArrayOfHostProfileManagerHostToConfigSpecMap)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProfilesEntityCustomizations struct {
0000000000000000000000000000000000000000;;		HostProfilesEntityCustomizations []BaseHostProfilesEntityCustomizations `xml:"HostProfilesEntityCustomizations,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProfilesEntityCustomizations"] = reflect.TypeOf((*ArrayOfHostProfilesEntityCustomizations)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProtocolEndpoint struct {
0000000000000000000000000000000000000000;;		HostProtocolEndpoint []HostProtocolEndpoint `xml:"HostProtocolEndpoint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProtocolEndpoint"] = reflect.TypeOf((*ArrayOfHostProtocolEndpoint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProxySwitch struct {
0000000000000000000000000000000000000000;;		HostProxySwitch []HostProxySwitch `xml:"HostProxySwitch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProxySwitch"] = reflect.TypeOf((*ArrayOfHostProxySwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProxySwitchConfig struct {
0000000000000000000000000000000000000000;;		HostProxySwitchConfig []HostProxySwitchConfig `xml:"HostProxySwitchConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProxySwitchConfig"] = reflect.TypeOf((*ArrayOfHostProxySwitchConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostProxySwitchHostLagConfig struct {
0000000000000000000000000000000000000000;;		HostProxySwitchHostLagConfig []HostProxySwitchHostLagConfig `xml:"HostProxySwitchHostLagConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostProxySwitchHostLagConfig"] = reflect.TypeOf((*ArrayOfHostProxySwitchHostLagConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo struct {
0000000000000000000000000000000000000000;;		HostRuntimeInfoNetStackInstanceRuntimeInfo []HostRuntimeInfoNetStackInstanceRuntimeInfo `xml:"HostRuntimeInfoNetStackInstanceRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo"] = reflect.TypeOf((*ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostScsiDisk struct {
0000000000000000000000000000000000000000;;		HostScsiDisk []HostScsiDisk `xml:"HostScsiDisk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostScsiDisk"] = reflect.TypeOf((*ArrayOfHostScsiDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostScsiDiskPartition struct {
0000000000000000000000000000000000000000;;		HostScsiDiskPartition []HostScsiDiskPartition `xml:"HostScsiDiskPartition,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostScsiDiskPartition"] = reflect.TypeOf((*ArrayOfHostScsiDiskPartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostScsiTopologyInterface struct {
0000000000000000000000000000000000000000;;		HostScsiTopologyInterface []HostScsiTopologyInterface `xml:"HostScsiTopologyInterface,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostScsiTopologyInterface"] = reflect.TypeOf((*ArrayOfHostScsiTopologyInterface)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostScsiTopologyLun struct {
0000000000000000000000000000000000000000;;		HostScsiTopologyLun []HostScsiTopologyLun `xml:"HostScsiTopologyLun,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostScsiTopologyLun"] = reflect.TypeOf((*ArrayOfHostScsiTopologyLun)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostScsiTopologyTarget struct {
0000000000000000000000000000000000000000;;		HostScsiTopologyTarget []HostScsiTopologyTarget `xml:"HostScsiTopologyTarget,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostScsiTopologyTarget"] = reflect.TypeOf((*ArrayOfHostScsiTopologyTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostService struct {
0000000000000000000000000000000000000000;;		HostService []HostService `xml:"HostService,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostService"] = reflect.TypeOf((*ArrayOfHostService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostServiceConfig struct {
0000000000000000000000000000000000000000;;		HostServiceConfig []HostServiceConfig `xml:"HostServiceConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostServiceConfig"] = reflect.TypeOf((*ArrayOfHostServiceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSnmpDestination struct {
0000000000000000000000000000000000000000;;		HostSnmpDestination []HostSnmpDestination `xml:"HostSnmpDestination,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSnmpDestination"] = reflect.TypeOf((*ArrayOfHostSnmpDestination)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSriovDevicePoolInfo struct {
0000000000000000000000000000000000000000;;		HostSriovDevicePoolInfo []BaseHostSriovDevicePoolInfo `xml:"HostSriovDevicePoolInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSriovDevicePoolInfo"] = reflect.TypeOf((*ArrayOfHostSriovDevicePoolInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSslThumbprintInfo struct {
0000000000000000000000000000000000000000;;		HostSslThumbprintInfo []HostSslThumbprintInfo `xml:"HostSslThumbprintInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSslThumbprintInfo"] = reflect.TypeOf((*ArrayOfHostSslThumbprintInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostStorageArrayTypePolicyOption struct {
0000000000000000000000000000000000000000;;		HostStorageArrayTypePolicyOption []HostStorageArrayTypePolicyOption `xml:"HostStorageArrayTypePolicyOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostStorageArrayTypePolicyOption"] = reflect.TypeOf((*ArrayOfHostStorageArrayTypePolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostStorageElementInfo struct {
0000000000000000000000000000000000000000;;		HostStorageElementInfo []HostStorageElementInfo `xml:"HostStorageElementInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostStorageElementInfo"] = reflect.TypeOf((*ArrayOfHostStorageElementInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostStorageOperationalInfo struct {
0000000000000000000000000000000000000000;;		HostStorageOperationalInfo []HostStorageOperationalInfo `xml:"HostStorageOperationalInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostStorageOperationalInfo"] = reflect.TypeOf((*ArrayOfHostStorageOperationalInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostStorageSystemDiskLocatorLedResult struct {
0000000000000000000000000000000000000000;;		HostStorageSystemDiskLocatorLedResult []HostStorageSystemDiskLocatorLedResult `xml:"HostStorageSystemDiskLocatorLedResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostStorageSystemDiskLocatorLedResult"] = reflect.TypeOf((*ArrayOfHostStorageSystemDiskLocatorLedResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostStorageSystemScsiLunResult struct {
0000000000000000000000000000000000000000;;		HostStorageSystemScsiLunResult []HostStorageSystemScsiLunResult `xml:"HostStorageSystemScsiLunResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostStorageSystemScsiLunResult"] = reflect.TypeOf((*ArrayOfHostStorageSystemScsiLunResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostStorageSystemVmfsVolumeResult struct {
0000000000000000000000000000000000000000;;		HostStorageSystemVmfsVolumeResult []HostStorageSystemVmfsVolumeResult `xml:"HostStorageSystemVmfsVolumeResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostStorageSystemVmfsVolumeResult"] = reflect.TypeOf((*ArrayOfHostStorageSystemVmfsVolumeResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSubSpecification struct {
0000000000000000000000000000000000000000;;		HostSubSpecification []HostSubSpecification `xml:"HostSubSpecification,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSubSpecification"] = reflect.TypeOf((*ArrayOfHostSubSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSystemIdentificationInfo struct {
0000000000000000000000000000000000000000;;		HostSystemIdentificationInfo []HostSystemIdentificationInfo `xml:"HostSystemIdentificationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSystemIdentificationInfo"] = reflect.TypeOf((*ArrayOfHostSystemIdentificationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSystemResourceInfo struct {
0000000000000000000000000000000000000000;;		HostSystemResourceInfo []HostSystemResourceInfo `xml:"HostSystemResourceInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSystemResourceInfo"] = reflect.TypeOf((*ArrayOfHostSystemResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostSystemSwapConfigurationSystemSwapOption struct {
0000000000000000000000000000000000000000;;		HostSystemSwapConfigurationSystemSwapOption []BaseHostSystemSwapConfigurationSystemSwapOption `xml:"HostSystemSwapConfigurationSystemSwapOption,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostSystemSwapConfigurationSystemSwapOption"] = reflect.TypeOf((*ArrayOfHostSystemSwapConfigurationSystemSwapOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostTpmDigestInfo struct {
0000000000000000000000000000000000000000;;		HostTpmDigestInfo []HostTpmDigestInfo `xml:"HostTpmDigestInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostTpmDigestInfo"] = reflect.TypeOf((*ArrayOfHostTpmDigestInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostTpmEventLogEntry struct {
0000000000000000000000000000000000000000;;		HostTpmEventLogEntry []HostTpmEventLogEntry `xml:"HostTpmEventLogEntry,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostTpmEventLogEntry"] = reflect.TypeOf((*ArrayOfHostTpmEventLogEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostUnresolvedVmfsExtent struct {
0000000000000000000000000000000000000000;;		HostUnresolvedVmfsExtent []HostUnresolvedVmfsExtent `xml:"HostUnresolvedVmfsExtent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostUnresolvedVmfsExtent"] = reflect.TypeOf((*ArrayOfHostUnresolvedVmfsExtent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostUnresolvedVmfsResolutionResult struct {
0000000000000000000000000000000000000000;;		HostUnresolvedVmfsResolutionResult []HostUnresolvedVmfsResolutionResult `xml:"HostUnresolvedVmfsResolutionResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostUnresolvedVmfsResolutionResult"] = reflect.TypeOf((*ArrayOfHostUnresolvedVmfsResolutionResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostUnresolvedVmfsResolutionSpec struct {
0000000000000000000000000000000000000000;;		HostUnresolvedVmfsResolutionSpec []HostUnresolvedVmfsResolutionSpec `xml:"HostUnresolvedVmfsResolutionSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostUnresolvedVmfsResolutionSpec"] = reflect.TypeOf((*ArrayOfHostUnresolvedVmfsResolutionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostUnresolvedVmfsVolume struct {
0000000000000000000000000000000000000000;;		HostUnresolvedVmfsVolume []HostUnresolvedVmfsVolume `xml:"HostUnresolvedVmfsVolume,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostUnresolvedVmfsVolume"] = reflect.TypeOf((*ArrayOfHostUnresolvedVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption struct {
0000000000000000000000000000000000000000;;		HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption []HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption `xml:"HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption"] = reflect.TypeOf((*ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVMotionCompatibility struct {
0000000000000000000000000000000000000000;;		HostVMotionCompatibility []HostVMotionCompatibility `xml:"HostVMotionCompatibility,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVMotionCompatibility"] = reflect.TypeOf((*ArrayOfHostVMotionCompatibility)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVirtualNic struct {
0000000000000000000000000000000000000000;;		HostVirtualNic []HostVirtualNic `xml:"HostVirtualNic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVirtualNic"] = reflect.TypeOf((*ArrayOfHostVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVirtualNicConfig struct {
0000000000000000000000000000000000000000;;		HostVirtualNicConfig []HostVirtualNicConfig `xml:"HostVirtualNicConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVirtualNicConfig"] = reflect.TypeOf((*ArrayOfHostVirtualNicConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVirtualNicManagerNicTypeSelection struct {
0000000000000000000000000000000000000000;;		HostVirtualNicManagerNicTypeSelection []HostVirtualNicManagerNicTypeSelection `xml:"HostVirtualNicManagerNicTypeSelection,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVirtualNicManagerNicTypeSelection"] = reflect.TypeOf((*ArrayOfHostVirtualNicManagerNicTypeSelection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVirtualSwitch struct {
0000000000000000000000000000000000000000;;		HostVirtualSwitch []HostVirtualSwitch `xml:"HostVirtualSwitch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVirtualSwitch"] = reflect.TypeOf((*ArrayOfHostVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVirtualSwitchConfig struct {
0000000000000000000000000000000000000000;;		HostVirtualSwitchConfig []HostVirtualSwitchConfig `xml:"HostVirtualSwitchConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVirtualSwitchConfig"] = reflect.TypeOf((*ArrayOfHostVirtualSwitchConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVmciAccessManagerAccessSpec struct {
0000000000000000000000000000000000000000;;		HostVmciAccessManagerAccessSpec []HostVmciAccessManagerAccessSpec `xml:"HostVmciAccessManagerAccessSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVmciAccessManagerAccessSpec"] = reflect.TypeOf((*ArrayOfHostVmciAccessManagerAccessSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVmfsRescanResult struct {
0000000000000000000000000000000000000000;;		HostVmfsRescanResult []HostVmfsRescanResult `xml:"HostVmfsRescanResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVmfsRescanResult"] = reflect.TypeOf((*ArrayOfHostVmfsRescanResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVsanInternalSystemCmmdsQuery struct {
0000000000000000000000000000000000000000;;		HostVsanInternalSystemCmmdsQuery []HostVsanInternalSystemCmmdsQuery `xml:"HostVsanInternalSystemCmmdsQuery,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVsanInternalSystemCmmdsQuery"] = reflect.TypeOf((*ArrayOfHostVsanInternalSystemCmmdsQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult struct {
0000000000000000000000000000000000000000;;		HostVsanInternalSystemDeleteVsanObjectsResult []HostVsanInternalSystemDeleteVsanObjectsResult `xml:"HostVsanInternalSystemDeleteVsanObjectsResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult"] = reflect.TypeOf((*ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVsanInternalSystemVsanObjectOperationResult struct {
0000000000000000000000000000000000000000;;		HostVsanInternalSystemVsanObjectOperationResult []HostVsanInternalSystemVsanObjectOperationResult `xml:"HostVsanInternalSystemVsanObjectOperationResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVsanInternalSystemVsanObjectOperationResult"] = reflect.TypeOf((*ArrayOfHostVsanInternalSystemVsanObjectOperationResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult struct {
0000000000000000000000000000000000000000;;		HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult []HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult `xml:"HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult"] = reflect.TypeOf((*ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHttpNfcLeaseDatastoreLeaseInfo struct {
0000000000000000000000000000000000000000;;		HttpNfcLeaseDatastoreLeaseInfo []HttpNfcLeaseDatastoreLeaseInfo `xml:"HttpNfcLeaseDatastoreLeaseInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHttpNfcLeaseDatastoreLeaseInfo"] = reflect.TypeOf((*ArrayOfHttpNfcLeaseDatastoreLeaseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHttpNfcLeaseDeviceUrl struct {
0000000000000000000000000000000000000000;;		HttpNfcLeaseDeviceUrl []HttpNfcLeaseDeviceUrl `xml:"HttpNfcLeaseDeviceUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHttpNfcLeaseDeviceUrl"] = reflect.TypeOf((*ArrayOfHttpNfcLeaseDeviceUrl)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHttpNfcLeaseHostInfo struct {
0000000000000000000000000000000000000000;;		HttpNfcLeaseHostInfo []HttpNfcLeaseHostInfo `xml:"HttpNfcLeaseHostInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHttpNfcLeaseHostInfo"] = reflect.TypeOf((*ArrayOfHttpNfcLeaseHostInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfHttpNfcLeaseManifestEntry struct {
0000000000000000000000000000000000000000;;		HttpNfcLeaseManifestEntry []HttpNfcLeaseManifestEntry `xml:"HttpNfcLeaseManifestEntry,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfHttpNfcLeaseManifestEntry"] = reflect.TypeOf((*ArrayOfHttpNfcLeaseManifestEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfID struct {
0000000000000000000000000000000000000000;;		ID []ID `xml:"ID,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfID"] = reflect.TypeOf((*ArrayOfID)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfImportOperationBulkFaultFaultOnImport struct {
0000000000000000000000000000000000000000;;		ImportOperationBulkFaultFaultOnImport []ImportOperationBulkFaultFaultOnImport `xml:"ImportOperationBulkFaultFaultOnImport,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfImportOperationBulkFaultFaultOnImport"] = reflect.TypeOf((*ArrayOfImportOperationBulkFaultFaultOnImport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfImportSpec struct {
0000000000000000000000000000000000000000;;		ImportSpec []BaseImportSpec `xml:"ImportSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfImportSpec"] = reflect.TypeOf((*ArrayOfImportSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfInt struct {
0000000000000000000000000000000000000000;;		Int []int32 `xml:"int,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfInt"] = reflect.TypeOf((*ArrayOfInt)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfIoFilterHostIssue struct {
0000000000000000000000000000000000000000;;		IoFilterHostIssue []IoFilterHostIssue `xml:"IoFilterHostIssue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfIoFilterHostIssue"] = reflect.TypeOf((*ArrayOfIoFilterHostIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfIpPool struct {
0000000000000000000000000000000000000000;;		IpPool []IpPool `xml:"IpPool,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfIpPool"] = reflect.TypeOf((*ArrayOfIpPool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfIpPoolAssociation struct {
0000000000000000000000000000000000000000;;		IpPoolAssociation []IpPoolAssociation `xml:"IpPoolAssociation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfIpPoolAssociation"] = reflect.TypeOf((*ArrayOfIpPoolAssociation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfIpPoolManagerIpAllocation struct {
0000000000000000000000000000000000000000;;		IpPoolManagerIpAllocation []IpPoolManagerIpAllocation `xml:"IpPoolManagerIpAllocation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfIpPoolManagerIpAllocation"] = reflect.TypeOf((*ArrayOfIpPoolManagerIpAllocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfIscsiDependencyEntity struct {
0000000000000000000000000000000000000000;;		IscsiDependencyEntity []IscsiDependencyEntity `xml:"IscsiDependencyEntity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfIscsiDependencyEntity"] = reflect.TypeOf((*ArrayOfIscsiDependencyEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfIscsiPortInfo struct {
0000000000000000000000000000000000000000;;		IscsiPortInfo []IscsiPortInfo `xml:"IscsiPortInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfIscsiPortInfo"] = reflect.TypeOf((*ArrayOfIscsiPortInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfKernelModuleInfo struct {
0000000000000000000000000000000000000000;;		KernelModuleInfo []KernelModuleInfo `xml:"KernelModuleInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfKernelModuleInfo"] = reflect.TypeOf((*ArrayOfKernelModuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfKeyAnyValue struct {
0000000000000000000000000000000000000000;;		KeyAnyValue []KeyAnyValue `xml:"KeyAnyValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfKeyAnyValue"] = reflect.TypeOf((*ArrayOfKeyAnyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfKeyValue struct {
0000000000000000000000000000000000000000;;		KeyValue []KeyValue `xml:"KeyValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfKeyValue"] = reflect.TypeOf((*ArrayOfKeyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfKmipClusterInfo struct {
0000000000000000000000000000000000000000;;		KmipClusterInfo []KmipClusterInfo `xml:"KmipClusterInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfKmipClusterInfo"] = reflect.TypeOf((*ArrayOfKmipClusterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfKmipServerInfo struct {
0000000000000000000000000000000000000000;;		KmipServerInfo []KmipServerInfo `xml:"KmipServerInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfKmipServerInfo"] = reflect.TypeOf((*ArrayOfKmipServerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLicenseAssignmentManagerLicenseAssignment struct {
0000000000000000000000000000000000000000;;		LicenseAssignmentManagerLicenseAssignment []LicenseAssignmentManagerLicenseAssignment `xml:"LicenseAssignmentManagerLicenseAssignment,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLicenseAssignmentManagerLicenseAssignment"] = reflect.TypeOf((*ArrayOfLicenseAssignmentManagerLicenseAssignment)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLicenseAvailabilityInfo struct {
0000000000000000000000000000000000000000;;		LicenseAvailabilityInfo []LicenseAvailabilityInfo `xml:"LicenseAvailabilityInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLicenseAvailabilityInfo"] = reflect.TypeOf((*ArrayOfLicenseAvailabilityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLicenseFeatureInfo struct {
0000000000000000000000000000000000000000;;		LicenseFeatureInfo []LicenseFeatureInfo `xml:"LicenseFeatureInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLicenseFeatureInfo"] = reflect.TypeOf((*ArrayOfLicenseFeatureInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLicenseManagerLicenseInfo struct {
0000000000000000000000000000000000000000;;		LicenseManagerLicenseInfo []LicenseManagerLicenseInfo `xml:"LicenseManagerLicenseInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLicenseManagerLicenseInfo"] = reflect.TypeOf((*ArrayOfLicenseManagerLicenseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLicenseReservationInfo struct {
0000000000000000000000000000000000000000;;		LicenseReservationInfo []LicenseReservationInfo `xml:"LicenseReservationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLicenseReservationInfo"] = reflect.TypeOf((*ArrayOfLicenseReservationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLocalizableMessage struct {
0000000000000000000000000000000000000000;;		LocalizableMessage []LocalizableMessage `xml:"LocalizableMessage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLocalizableMessage"] = reflect.TypeOf((*ArrayOfLocalizableMessage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLocalizationManagerMessageCatalog struct {
0000000000000000000000000000000000000000;;		LocalizationManagerMessageCatalog []LocalizationManagerMessageCatalog `xml:"LocalizationManagerMessageCatalog,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLocalizationManagerMessageCatalog"] = reflect.TypeOf((*ArrayOfLocalizationManagerMessageCatalog)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfLong struct {
0000000000000000000000000000000000000000;;		Long []int64 `xml:"long,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfLong"] = reflect.TypeOf((*ArrayOfLong)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfManagedObjectReference struct {
0000000000000000000000000000000000000000;;		ManagedObjectReference []ManagedObjectReference `xml:"ManagedObjectReference,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfManagedObjectReference"] = reflect.TypeOf((*ArrayOfManagedObjectReference)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfMethodActionArgument struct {
0000000000000000000000000000000000000000;;		MethodActionArgument []MethodActionArgument `xml:"MethodActionArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfMethodActionArgument"] = reflect.TypeOf((*ArrayOfMethodActionArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfMethodFault struct {
0000000000000000000000000000000000000000;;		MethodFault []BaseMethodFault `xml:"MethodFault,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfMethodFault"] = reflect.TypeOf((*ArrayOfMethodFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfMissingObject struct {
0000000000000000000000000000000000000000;;		MissingObject []MissingObject `xml:"MissingObject,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfMissingObject"] = reflect.TypeOf((*ArrayOfMissingObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfMissingProperty struct {
0000000000000000000000000000000000000000;;		MissingProperty []MissingProperty `xml:"MissingProperty,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfMissingProperty"] = reflect.TypeOf((*ArrayOfMissingProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfMultipleCertificatesVerifyFaultThumbprintData struct {
0000000000000000000000000000000000000000;;		MultipleCertificatesVerifyFaultThumbprintData []MultipleCertificatesVerifyFaultThumbprintData `xml:"MultipleCertificatesVerifyFaultThumbprintData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfMultipleCertificatesVerifyFaultThumbprintData"] = reflect.TypeOf((*ArrayOfMultipleCertificatesVerifyFaultThumbprintData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNasStorageProfile struct {
0000000000000000000000000000000000000000;;		NasStorageProfile []NasStorageProfile `xml:"NasStorageProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNasStorageProfile"] = reflect.TypeOf((*ArrayOfNasStorageProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetIpConfigInfoIpAddress struct {
0000000000000000000000000000000000000000;;		NetIpConfigInfoIpAddress []NetIpConfigInfoIpAddress `xml:"NetIpConfigInfoIpAddress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetIpConfigInfoIpAddress"] = reflect.TypeOf((*ArrayOfNetIpConfigInfoIpAddress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetIpConfigSpecIpAddressSpec struct {
0000000000000000000000000000000000000000;;		NetIpConfigSpecIpAddressSpec []NetIpConfigSpecIpAddressSpec `xml:"NetIpConfigSpecIpAddressSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetIpConfigSpecIpAddressSpec"] = reflect.TypeOf((*ArrayOfNetIpConfigSpecIpAddressSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetIpRouteConfigInfoIpRoute struct {
0000000000000000000000000000000000000000;;		NetIpRouteConfigInfoIpRoute []NetIpRouteConfigInfoIpRoute `xml:"NetIpRouteConfigInfoIpRoute,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetIpRouteConfigInfoIpRoute"] = reflect.TypeOf((*ArrayOfNetIpRouteConfigInfoIpRoute)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetIpRouteConfigSpecIpRouteSpec struct {
0000000000000000000000000000000000000000;;		NetIpRouteConfigSpecIpRouteSpec []NetIpRouteConfigSpecIpRouteSpec `xml:"NetIpRouteConfigSpecIpRouteSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetIpRouteConfigSpecIpRouteSpec"] = reflect.TypeOf((*ArrayOfNetIpRouteConfigSpecIpRouteSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetIpStackInfoDefaultRouter struct {
0000000000000000000000000000000000000000;;		NetIpStackInfoDefaultRouter []NetIpStackInfoDefaultRouter `xml:"NetIpStackInfoDefaultRouter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetIpStackInfoDefaultRouter"] = reflect.TypeOf((*ArrayOfNetIpStackInfoDefaultRouter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetIpStackInfoNetToMedia struct {
0000000000000000000000000000000000000000;;		NetIpStackInfoNetToMedia []NetIpStackInfoNetToMedia `xml:"NetIpStackInfoNetToMedia,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetIpStackInfoNetToMedia"] = reflect.TypeOf((*ArrayOfNetIpStackInfoNetToMedia)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNetStackInstanceProfile struct {
0000000000000000000000000000000000000000;;		NetStackInstanceProfile []NetStackInstanceProfile `xml:"NetStackInstanceProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNetStackInstanceProfile"] = reflect.TypeOf((*ArrayOfNetStackInstanceProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfNumericRange struct {
0000000000000000000000000000000000000000;;		NumericRange []NumericRange `xml:"NumericRange,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfNumericRange"] = reflect.TypeOf((*ArrayOfNumericRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfObjectContent struct {
0000000000000000000000000000000000000000;;		ObjectContent []ObjectContent `xml:"ObjectContent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfObjectContent"] = reflect.TypeOf((*ArrayOfObjectContent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfObjectSpec struct {
0000000000000000000000000000000000000000;;		ObjectSpec []ObjectSpec `xml:"ObjectSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfObjectSpec"] = reflect.TypeOf((*ArrayOfObjectSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfObjectUpdate struct {
0000000000000000000000000000000000000000;;		ObjectUpdate []ObjectUpdate `xml:"ObjectUpdate,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfObjectUpdate"] = reflect.TypeOf((*ArrayOfObjectUpdate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOpaqueNetworkTargetInfo struct {
0000000000000000000000000000000000000000;;		OpaqueNetworkTargetInfo []OpaqueNetworkTargetInfo `xml:"OpaqueNetworkTargetInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOpaqueNetworkTargetInfo"] = reflect.TypeOf((*ArrayOfOpaqueNetworkTargetInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOptionDef struct {
0000000000000000000000000000000000000000;;		OptionDef []OptionDef `xml:"OptionDef,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOptionDef"] = reflect.TypeOf((*ArrayOfOptionDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOptionProfile struct {
0000000000000000000000000000000000000000;;		OptionProfile []OptionProfile `xml:"OptionProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOptionProfile"] = reflect.TypeOf((*ArrayOfOptionProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOptionValue struct {
0000000000000000000000000000000000000000;;		OptionValue []BaseOptionValue `xml:"OptionValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOptionValue"] = reflect.TypeOf((*ArrayOfOptionValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfConsumerOstNode struct {
0000000000000000000000000000000000000000;;		OvfConsumerOstNode []OvfConsumerOstNode `xml:"OvfConsumerOstNode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfConsumerOstNode"] = reflect.TypeOf((*ArrayOfOvfConsumerOstNode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfConsumerOvfSection struct {
0000000000000000000000000000000000000000;;		OvfConsumerOvfSection []OvfConsumerOvfSection `xml:"OvfConsumerOvfSection,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfConsumerOvfSection"] = reflect.TypeOf((*ArrayOfOvfConsumerOvfSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfDeploymentOption struct {
0000000000000000000000000000000000000000;;		OvfDeploymentOption []OvfDeploymentOption `xml:"OvfDeploymentOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfDeploymentOption"] = reflect.TypeOf((*ArrayOfOvfDeploymentOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfFile struct {
0000000000000000000000000000000000000000;;		OvfFile []OvfFile `xml:"OvfFile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfFile"] = reflect.TypeOf((*ArrayOfOvfFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfFileItem struct {
0000000000000000000000000000000000000000;;		OvfFileItem []OvfFileItem `xml:"OvfFileItem,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfFileItem"] = reflect.TypeOf((*ArrayOfOvfFileItem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfNetworkInfo struct {
0000000000000000000000000000000000000000;;		OvfNetworkInfo []OvfNetworkInfo `xml:"OvfNetworkInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfNetworkInfo"] = reflect.TypeOf((*ArrayOfOvfNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfNetworkMapping struct {
0000000000000000000000000000000000000000;;		OvfNetworkMapping []OvfNetworkMapping `xml:"OvfNetworkMapping,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfNetworkMapping"] = reflect.TypeOf((*ArrayOfOvfNetworkMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfOptionInfo struct {
0000000000000000000000000000000000000000;;		OvfOptionInfo []OvfOptionInfo `xml:"OvfOptionInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfOptionInfo"] = reflect.TypeOf((*ArrayOfOvfOptionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfOvfResourceMap struct {
0000000000000000000000000000000000000000;;		OvfResourceMap []OvfResourceMap `xml:"OvfResourceMap,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfOvfResourceMap"] = reflect.TypeOf((*ArrayOfOvfResourceMap)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfCounterInfo struct {
0000000000000000000000000000000000000000;;		PerfCounterInfo []PerfCounterInfo `xml:"PerfCounterInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfCounterInfo"] = reflect.TypeOf((*ArrayOfPerfCounterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfEntityMetricBase struct {
0000000000000000000000000000000000000000;;		PerfEntityMetricBase []BasePerfEntityMetricBase `xml:"PerfEntityMetricBase,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfEntityMetricBase"] = reflect.TypeOf((*ArrayOfPerfEntityMetricBase)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfInterval struct {
0000000000000000000000000000000000000000;;		PerfInterval []PerfInterval `xml:"PerfInterval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfInterval"] = reflect.TypeOf((*ArrayOfPerfInterval)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfMetricId struct {
0000000000000000000000000000000000000000;;		PerfMetricId []PerfMetricId `xml:"PerfMetricId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfMetricId"] = reflect.TypeOf((*ArrayOfPerfMetricId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfMetricSeries struct {
0000000000000000000000000000000000000000;;		PerfMetricSeries []BasePerfMetricSeries `xml:"PerfMetricSeries,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfMetricSeries"] = reflect.TypeOf((*ArrayOfPerfMetricSeries)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfMetricSeriesCSV struct {
0000000000000000000000000000000000000000;;		PerfMetricSeriesCSV []PerfMetricSeriesCSV `xml:"PerfMetricSeriesCSV,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfMetricSeriesCSV"] = reflect.TypeOf((*ArrayOfPerfMetricSeriesCSV)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfQuerySpec struct {
0000000000000000000000000000000000000000;;		PerfQuerySpec []PerfQuerySpec `xml:"PerfQuerySpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfQuerySpec"] = reflect.TypeOf((*ArrayOfPerfQuerySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerfSampleInfo struct {
0000000000000000000000000000000000000000;;		PerfSampleInfo []PerfSampleInfo `xml:"PerfSampleInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerfSampleInfo"] = reflect.TypeOf((*ArrayOfPerfSampleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPerformanceManagerCounterLevelMapping struct {
0000000000000000000000000000000000000000;;		PerformanceManagerCounterLevelMapping []PerformanceManagerCounterLevelMapping `xml:"PerformanceManagerCounterLevelMapping,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPerformanceManagerCounterLevelMapping"] = reflect.TypeOf((*ArrayOfPerformanceManagerCounterLevelMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPermission struct {
0000000000000000000000000000000000000000;;		Permission []Permission `xml:"Permission,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPermission"] = reflect.TypeOf((*ArrayOfPermission)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPermissionProfile struct {
0000000000000000000000000000000000000000;;		PermissionProfile []PermissionProfile `xml:"PermissionProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPermissionProfile"] = reflect.TypeOf((*ArrayOfPermissionProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNic struct {
0000000000000000000000000000000000000000;;		PhysicalNic []PhysicalNic `xml:"PhysicalNic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNic"] = reflect.TypeOf((*ArrayOfPhysicalNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNicConfig struct {
0000000000000000000000000000000000000000;;		PhysicalNicConfig []PhysicalNicConfig `xml:"PhysicalNicConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNicConfig"] = reflect.TypeOf((*ArrayOfPhysicalNicConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNicHintInfo struct {
0000000000000000000000000000000000000000;;		PhysicalNicHintInfo []PhysicalNicHintInfo `xml:"PhysicalNicHintInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNicHintInfo"] = reflect.TypeOf((*ArrayOfPhysicalNicHintInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNicIpHint struct {
0000000000000000000000000000000000000000;;		PhysicalNicIpHint []PhysicalNicIpHint `xml:"PhysicalNicIpHint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNicIpHint"] = reflect.TypeOf((*ArrayOfPhysicalNicIpHint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNicLinkInfo struct {
0000000000000000000000000000000000000000;;		PhysicalNicLinkInfo []PhysicalNicLinkInfo `xml:"PhysicalNicLinkInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNicLinkInfo"] = reflect.TypeOf((*ArrayOfPhysicalNicLinkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNicNameHint struct {
0000000000000000000000000000000000000000;;		PhysicalNicNameHint []PhysicalNicNameHint `xml:"PhysicalNicNameHint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNicNameHint"] = reflect.TypeOf((*ArrayOfPhysicalNicNameHint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPhysicalNicProfile struct {
0000000000000000000000000000000000000000;;		PhysicalNicProfile []PhysicalNicProfile `xml:"PhysicalNicProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPhysicalNicProfile"] = reflect.TypeOf((*ArrayOfPhysicalNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPlacementAffinityRule struct {
0000000000000000000000000000000000000000;;		PlacementAffinityRule []PlacementAffinityRule `xml:"PlacementAffinityRule,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPlacementAffinityRule"] = reflect.TypeOf((*ArrayOfPlacementAffinityRule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPlacementSpec struct {
0000000000000000000000000000000000000000;;		PlacementSpec []PlacementSpec `xml:"PlacementSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPlacementSpec"] = reflect.TypeOf((*ArrayOfPlacementSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPnicUplinkProfile struct {
0000000000000000000000000000000000000000;;		PnicUplinkProfile []PnicUplinkProfile `xml:"PnicUplinkProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPnicUplinkProfile"] = reflect.TypeOf((*ArrayOfPnicUplinkProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPodDiskLocator struct {
0000000000000000000000000000000000000000;;		PodDiskLocator []PodDiskLocator `xml:"PodDiskLocator,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPodDiskLocator"] = reflect.TypeOf((*ArrayOfPodDiskLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPolicyOption struct {
0000000000000000000000000000000000000000;;		PolicyOption []BasePolicyOption `xml:"PolicyOption,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPolicyOption"] = reflect.TypeOf((*ArrayOfPolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPrivilegeAvailability struct {
0000000000000000000000000000000000000000;;		PrivilegeAvailability []PrivilegeAvailability `xml:"PrivilegeAvailability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPrivilegeAvailability"] = reflect.TypeOf((*ArrayOfPrivilegeAvailability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProductComponentInfo struct {
0000000000000000000000000000000000000000;;		ProductComponentInfo []ProductComponentInfo `xml:"ProductComponentInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProductComponentInfo"] = reflect.TypeOf((*ArrayOfProductComponentInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileApplyProfileProperty struct {
0000000000000000000000000000000000000000;;		ProfileApplyProfileProperty []ProfileApplyProfileProperty `xml:"ProfileApplyProfileProperty,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileApplyProfileProperty"] = reflect.TypeOf((*ArrayOfProfileApplyProfileProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileDeferredPolicyOptionParameter struct {
0000000000000000000000000000000000000000;;		ProfileDeferredPolicyOptionParameter []ProfileDeferredPolicyOptionParameter `xml:"ProfileDeferredPolicyOptionParameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileDeferredPolicyOptionParameter"] = reflect.TypeOf((*ArrayOfProfileDeferredPolicyOptionParameter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileDescriptionSection struct {
0000000000000000000000000000000000000000;;		ProfileDescriptionSection []ProfileDescriptionSection `xml:"ProfileDescriptionSection,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileDescriptionSection"] = reflect.TypeOf((*ArrayOfProfileDescriptionSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileExecuteError struct {
0000000000000000000000000000000000000000;;		ProfileExecuteError []ProfileExecuteError `xml:"ProfileExecuteError,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileExecuteError"] = reflect.TypeOf((*ArrayOfProfileExecuteError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileExpression struct {
0000000000000000000000000000000000000000;;		ProfileExpression []BaseProfileExpression `xml:"ProfileExpression,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileExpression"] = reflect.TypeOf((*ArrayOfProfileExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileExpressionMetadata struct {
0000000000000000000000000000000000000000;;		ProfileExpressionMetadata []ProfileExpressionMetadata `xml:"ProfileExpressionMetadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileExpressionMetadata"] = reflect.TypeOf((*ArrayOfProfileExpressionMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileMetadata struct {
0000000000000000000000000000000000000000;;		ProfileMetadata []ProfileMetadata `xml:"ProfileMetadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileMetadata"] = reflect.TypeOf((*ArrayOfProfileMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileMetadataProfileSortSpec struct {
0000000000000000000000000000000000000000;;		ProfileMetadataProfileSortSpec []ProfileMetadataProfileSortSpec `xml:"ProfileMetadataProfileSortSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileMetadataProfileSortSpec"] = reflect.TypeOf((*ArrayOfProfileMetadataProfileSortSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileParameterMetadata struct {
0000000000000000000000000000000000000000;;		ProfileParameterMetadata []ProfileParameterMetadata `xml:"ProfileParameterMetadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileParameterMetadata"] = reflect.TypeOf((*ArrayOfProfileParameterMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfilePolicy struct {
0000000000000000000000000000000000000000;;		ProfilePolicy []ProfilePolicy `xml:"ProfilePolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfilePolicy"] = reflect.TypeOf((*ArrayOfProfilePolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfilePolicyMetadata struct {
0000000000000000000000000000000000000000;;		ProfilePolicyMetadata []ProfilePolicyMetadata `xml:"ProfilePolicyMetadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfilePolicyMetadata"] = reflect.TypeOf((*ArrayOfProfilePolicyMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfilePolicyOptionMetadata struct {
0000000000000000000000000000000000000000;;		ProfilePolicyOptionMetadata []BaseProfilePolicyOptionMetadata `xml:"ProfilePolicyOptionMetadata,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfilePolicyOptionMetadata"] = reflect.TypeOf((*ArrayOfProfilePolicyOptionMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileProfileStructureProperty struct {
0000000000000000000000000000000000000000;;		ProfileProfileStructureProperty []ProfileProfileStructureProperty `xml:"ProfileProfileStructureProperty,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileProfileStructureProperty"] = reflect.TypeOf((*ArrayOfProfileProfileStructureProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfilePropertyPath struct {
0000000000000000000000000000000000000000;;		ProfilePropertyPath []ProfilePropertyPath `xml:"ProfilePropertyPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfilePropertyPath"] = reflect.TypeOf((*ArrayOfProfilePropertyPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfProfileUpdateFailedUpdateFailure struct {
0000000000000000000000000000000000000000;;		ProfileUpdateFailedUpdateFailure []ProfileUpdateFailedUpdateFailure `xml:"ProfileUpdateFailedUpdateFailure,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfProfileUpdateFailedUpdateFailure"] = reflect.TypeOf((*ArrayOfProfileUpdateFailedUpdateFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPropertyChange struct {
0000000000000000000000000000000000000000;;		PropertyChange []PropertyChange `xml:"PropertyChange,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPropertyChange"] = reflect.TypeOf((*ArrayOfPropertyChange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPropertyFilterSpec struct {
0000000000000000000000000000000000000000;;		PropertyFilterSpec []PropertyFilterSpec `xml:"PropertyFilterSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPropertyFilterSpec"] = reflect.TypeOf((*ArrayOfPropertyFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPropertyFilterUpdate struct {
0000000000000000000000000000000000000000;;		PropertyFilterUpdate []PropertyFilterUpdate `xml:"PropertyFilterUpdate,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPropertyFilterUpdate"] = reflect.TypeOf((*ArrayOfPropertyFilterUpdate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfPropertySpec struct {
0000000000000000000000000000000000000000;;		PropertySpec []PropertySpec `xml:"PropertySpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfPropertySpec"] = reflect.TypeOf((*ArrayOfPropertySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfRelation struct {
0000000000000000000000000000000000000000;;		Relation []Relation `xml:"Relation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfRelation"] = reflect.TypeOf((*ArrayOfRelation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfReplicationInfoDiskSettings struct {
0000000000000000000000000000000000000000;;		ReplicationInfoDiskSettings []ReplicationInfoDiskSettings `xml:"ReplicationInfoDiskSettings,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfReplicationInfoDiskSettings"] = reflect.TypeOf((*ArrayOfReplicationInfoDiskSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfResourceConfigSpec struct {
0000000000000000000000000000000000000000;;		ResourceConfigSpec []ResourceConfigSpec `xml:"ResourceConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfResourceConfigSpec"] = reflect.TypeOf((*ArrayOfResourceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfScheduledTaskDetail struct {
0000000000000000000000000000000000000000;;		ScheduledTaskDetail []ScheduledTaskDetail `xml:"ScheduledTaskDetail,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfScheduledTaskDetail"] = reflect.TypeOf((*ArrayOfScheduledTaskDetail)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfScsiLun struct {
0000000000000000000000000000000000000000;;		ScsiLun []BaseScsiLun `xml:"ScsiLun,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfScsiLun"] = reflect.TypeOf((*ArrayOfScsiLun)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfScsiLunDescriptor struct {
0000000000000000000000000000000000000000;;		ScsiLunDescriptor []ScsiLunDescriptor `xml:"ScsiLunDescriptor,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfScsiLunDescriptor"] = reflect.TypeOf((*ArrayOfScsiLunDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfScsiLunDurableName struct {
0000000000000000000000000000000000000000;;		ScsiLunDurableName []ScsiLunDurableName `xml:"ScsiLunDurableName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfScsiLunDurableName"] = reflect.TypeOf((*ArrayOfScsiLunDurableName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfSelectionSet struct {
0000000000000000000000000000000000000000;;		SelectionSet []BaseSelectionSet `xml:"SelectionSet,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfSelectionSet"] = reflect.TypeOf((*ArrayOfSelectionSet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfSelectionSpec struct {
0000000000000000000000000000000000000000;;		SelectionSpec []BaseSelectionSpec `xml:"SelectionSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfSelectionSpec"] = reflect.TypeOf((*ArrayOfSelectionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfServiceConsolePortGroupProfile struct {
0000000000000000000000000000000000000000;;		ServiceConsolePortGroupProfile []ServiceConsolePortGroupProfile `xml:"ServiceConsolePortGroupProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfServiceConsolePortGroupProfile"] = reflect.TypeOf((*ArrayOfServiceConsolePortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfServiceLocator struct {
0000000000000000000000000000000000000000;;		ServiceLocator []ServiceLocator `xml:"ServiceLocator,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfServiceLocator"] = reflect.TypeOf((*ArrayOfServiceLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfServiceManagerServiceInfo struct {
0000000000000000000000000000000000000000;;		ServiceManagerServiceInfo []ServiceManagerServiceInfo `xml:"ServiceManagerServiceInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfServiceManagerServiceInfo"] = reflect.TypeOf((*ArrayOfServiceManagerServiceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfServiceProfile struct {
0000000000000000000000000000000000000000;;		ServiceProfile []ServiceProfile `xml:"ServiceProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfServiceProfile"] = reflect.TypeOf((*ArrayOfServiceProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfShort struct {
0000000000000000000000000000000000000000;;		Short []int16 `xml:"short,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfShort"] = reflect.TypeOf((*ArrayOfShort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfSoftwarePackage struct {
0000000000000000000000000000000000000000;;		SoftwarePackage []SoftwarePackage `xml:"SoftwarePackage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfSoftwarePackage"] = reflect.TypeOf((*ArrayOfSoftwarePackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStaticRouteProfile struct {
0000000000000000000000000000000000000000;;		StaticRouteProfile []StaticRouteProfile `xml:"StaticRouteProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStaticRouteProfile"] = reflect.TypeOf((*ArrayOfStaticRouteProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStorageDrsOptionSpec struct {
0000000000000000000000000000000000000000;;		StorageDrsOptionSpec []StorageDrsOptionSpec `xml:"StorageDrsOptionSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStorageDrsOptionSpec"] = reflect.TypeOf((*ArrayOfStorageDrsOptionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStorageDrsPlacementRankVmSpec struct {
0000000000000000000000000000000000000000;;		StorageDrsPlacementRankVmSpec []StorageDrsPlacementRankVmSpec `xml:"StorageDrsPlacementRankVmSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStorageDrsPlacementRankVmSpec"] = reflect.TypeOf((*ArrayOfStorageDrsPlacementRankVmSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStorageDrsVmConfigInfo struct {
0000000000000000000000000000000000000000;;		StorageDrsVmConfigInfo []StorageDrsVmConfigInfo `xml:"StorageDrsVmConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStorageDrsVmConfigInfo"] = reflect.TypeOf((*ArrayOfStorageDrsVmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStorageDrsVmConfigSpec struct {
0000000000000000000000000000000000000000;;		StorageDrsVmConfigSpec []StorageDrsVmConfigSpec `xml:"StorageDrsVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStorageDrsVmConfigSpec"] = reflect.TypeOf((*ArrayOfStorageDrsVmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStoragePerformanceSummary struct {
0000000000000000000000000000000000000000;;		StoragePerformanceSummary []StoragePerformanceSummary `xml:"StoragePerformanceSummary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStoragePerformanceSummary"] = reflect.TypeOf((*ArrayOfStoragePerformanceSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStorageRequirement struct {
0000000000000000000000000000000000000000;;		StorageRequirement []StorageRequirement `xml:"StorageRequirement,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStorageRequirement"] = reflect.TypeOf((*ArrayOfStorageRequirement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfString struct {
0000000000000000000000000000000000000000;;		String []string `xml:"string,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfString"] = reflect.TypeOf((*ArrayOfString)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfStructuredCustomizations struct {
0000000000000000000000000000000000000000;;		StructuredCustomizations []StructuredCustomizations `xml:"StructuredCustomizations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfStructuredCustomizations"] = reflect.TypeOf((*ArrayOfStructuredCustomizations)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfSystemEventInfo struct {
0000000000000000000000000000000000000000;;		SystemEventInfo []SystemEventInfo `xml:"SystemEventInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfSystemEventInfo"] = reflect.TypeOf((*ArrayOfSystemEventInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfTag struct {
0000000000000000000000000000000000000000;;		Tag []Tag `xml:"Tag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfTag"] = reflect.TypeOf((*ArrayOfTag)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfTaskInfo struct {
0000000000000000000000000000000000000000;;		TaskInfo []TaskInfo `xml:"TaskInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfTaskInfo"] = reflect.TypeOf((*ArrayOfTaskInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfTaskInfoState struct {
0000000000000000000000000000000000000000;;		TaskInfoState []TaskInfoState `xml:"TaskInfoState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfTaskInfoState"] = reflect.TypeOf((*ArrayOfTaskInfoState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfTypeDescription struct {
0000000000000000000000000000000000000000;;		TypeDescription []BaseTypeDescription `xml:"TypeDescription,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfTypeDescription"] = reflect.TypeOf((*ArrayOfTypeDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo struct {
0000000000000000000000000000000000000000;;		UpdateVirtualMachineFilesResultFailedVmFileInfo []UpdateVirtualMachineFilesResultFailedVmFileInfo `xml:"UpdateVirtualMachineFilesResultFailedVmFileInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo"] = reflect.TypeOf((*ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUsbScanCodeSpecKeyEvent struct {
0000000000000000000000000000000000000000;;		UsbScanCodeSpecKeyEvent []UsbScanCodeSpecKeyEvent `xml:"UsbScanCodeSpecKeyEvent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUsbScanCodeSpecKeyEvent"] = reflect.TypeOf((*ArrayOfUsbScanCodeSpecKeyEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUserGroupProfile struct {
0000000000000000000000000000000000000000;;		UserGroupProfile []UserGroupProfile `xml:"UserGroupProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUserGroupProfile"] = reflect.TypeOf((*ArrayOfUserGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUserPrivilegeResult struct {
0000000000000000000000000000000000000000;;		UserPrivilegeResult []UserPrivilegeResult `xml:"UserPrivilegeResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUserPrivilegeResult"] = reflect.TypeOf((*ArrayOfUserPrivilegeResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUserProfile struct {
0000000000000000000000000000000000000000;;		UserProfile []UserProfile `xml:"UserProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUserProfile"] = reflect.TypeOf((*ArrayOfUserProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUserSearchResult struct {
0000000000000000000000000000000000000000;;		UserSearchResult []BaseUserSearchResult `xml:"UserSearchResult,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUserSearchResult"] = reflect.TypeOf((*ArrayOfUserSearchResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfUserSession struct {
0000000000000000000000000000000000000000;;		UserSession []UserSession `xml:"UserSession,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfUserSession"] = reflect.TypeOf((*ArrayOfUserSession)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVASAStorageArray struct {
0000000000000000000000000000000000000000;;		VASAStorageArray []VASAStorageArray `xml:"VASAStorageArray,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVASAStorageArray"] = reflect.TypeOf((*ArrayOfVASAStorageArray)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppCloneSpecNetworkMappingPair struct {
0000000000000000000000000000000000000000;;		VAppCloneSpecNetworkMappingPair []VAppCloneSpecNetworkMappingPair `xml:"VAppCloneSpecNetworkMappingPair,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppCloneSpecNetworkMappingPair"] = reflect.TypeOf((*ArrayOfVAppCloneSpecNetworkMappingPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppCloneSpecResourceMap struct {
0000000000000000000000000000000000000000;;		VAppCloneSpecResourceMap []VAppCloneSpecResourceMap `xml:"VAppCloneSpecResourceMap,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppCloneSpecResourceMap"] = reflect.TypeOf((*ArrayOfVAppCloneSpecResourceMap)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppEntityConfigInfo struct {
0000000000000000000000000000000000000000;;		VAppEntityConfigInfo []VAppEntityConfigInfo `xml:"VAppEntityConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppEntityConfigInfo"] = reflect.TypeOf((*ArrayOfVAppEntityConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppOvfSectionInfo struct {
0000000000000000000000000000000000000000;;		VAppOvfSectionInfo []VAppOvfSectionInfo `xml:"VAppOvfSectionInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppOvfSectionInfo"] = reflect.TypeOf((*ArrayOfVAppOvfSectionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppOvfSectionSpec struct {
0000000000000000000000000000000000000000;;		VAppOvfSectionSpec []VAppOvfSectionSpec `xml:"VAppOvfSectionSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppOvfSectionSpec"] = reflect.TypeOf((*ArrayOfVAppOvfSectionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppProductInfo struct {
0000000000000000000000000000000000000000;;		VAppProductInfo []VAppProductInfo `xml:"VAppProductInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppProductInfo"] = reflect.TypeOf((*ArrayOfVAppProductInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppProductSpec struct {
0000000000000000000000000000000000000000;;		VAppProductSpec []VAppProductSpec `xml:"VAppProductSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppProductSpec"] = reflect.TypeOf((*ArrayOfVAppProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppPropertyInfo struct {
0000000000000000000000000000000000000000;;		VAppPropertyInfo []VAppPropertyInfo `xml:"VAppPropertyInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppPropertyInfo"] = reflect.TypeOf((*ArrayOfVAppPropertyInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVAppPropertySpec struct {
0000000000000000000000000000000000000000;;		VAppPropertySpec []VAppPropertySpec `xml:"VAppPropertySpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVAppPropertySpec"] = reflect.TypeOf((*ArrayOfVAppPropertySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVMwareDVSPvlanConfigSpec struct {
0000000000000000000000000000000000000000;;		VMwareDVSPvlanConfigSpec []VMwareDVSPvlanConfigSpec `xml:"VMwareDVSPvlanConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVMwareDVSPvlanConfigSpec"] = reflect.TypeOf((*ArrayOfVMwareDVSPvlanConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVMwareDVSPvlanMapEntry struct {
0000000000000000000000000000000000000000;;		VMwareDVSPvlanMapEntry []VMwareDVSPvlanMapEntry `xml:"VMwareDVSPvlanMapEntry,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVMwareDVSPvlanMapEntry"] = reflect.TypeOf((*ArrayOfVMwareDVSPvlanMapEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVMwareDVSVspanConfigSpec struct {
0000000000000000000000000000000000000000;;		VMwareDVSVspanConfigSpec []VMwareDVSVspanConfigSpec `xml:"VMwareDVSVspanConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVMwareDVSVspanConfigSpec"] = reflect.TypeOf((*ArrayOfVMwareDVSVspanConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVMwareDvsLacpGroupConfig struct {
0000000000000000000000000000000000000000;;		VMwareDvsLacpGroupConfig []VMwareDvsLacpGroupConfig `xml:"VMwareDvsLacpGroupConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVMwareDvsLacpGroupConfig"] = reflect.TypeOf((*ArrayOfVMwareDvsLacpGroupConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVMwareDvsLacpGroupSpec struct {
0000000000000000000000000000000000000000;;		VMwareDvsLacpGroupSpec []VMwareDvsLacpGroupSpec `xml:"VMwareDvsLacpGroupSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVMwareDvsLacpGroupSpec"] = reflect.TypeOf((*ArrayOfVMwareDvsLacpGroupSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVMwareVspanSession struct {
0000000000000000000000000000000000000000;;		VMwareVspanSession []VMwareVspanSession `xml:"VMwareVspanSession,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVMwareVspanSession"] = reflect.TypeOf((*ArrayOfVMwareVspanSession)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVVolHostPE struct {
0000000000000000000000000000000000000000;;		VVolHostPE []VVolHostPE `xml:"VVolHostPE,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVVolHostPE"] = reflect.TypeOf((*ArrayOfVVolHostPE)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo struct {
0000000000000000000000000000000000000000;;		VVolVmConfigFileUpdateResultFailedVmConfigFileInfo []VVolVmConfigFileUpdateResultFailedVmConfigFileInfo `xml:"VVolVmConfigFileUpdateResultFailedVmConfigFileInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo"] = reflect.TypeOf((*ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVchaNodeRuntimeInfo struct {
0000000000000000000000000000000000000000;;		VchaNodeRuntimeInfo []VchaNodeRuntimeInfo `xml:"VchaNodeRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVchaNodeRuntimeInfo"] = reflect.TypeOf((*ArrayOfVchaNodeRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVimVasaProviderInfo struct {
0000000000000000000000000000000000000000;;		VimVasaProviderInfo []VimVasaProviderInfo `xml:"VimVasaProviderInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVimVasaProviderInfo"] = reflect.TypeOf((*ArrayOfVimVasaProviderInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVimVasaProviderStatePerArray struct {
0000000000000000000000000000000000000000;;		VimVasaProviderStatePerArray []VimVasaProviderStatePerArray `xml:"VimVasaProviderStatePerArray,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVimVasaProviderStatePerArray"] = reflect.TypeOf((*ArrayOfVimVasaProviderStatePerArray)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualAppLinkInfo struct {
0000000000000000000000000000000000000000;;		VirtualAppLinkInfo []VirtualAppLinkInfo `xml:"VirtualAppLinkInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualAppLinkInfo"] = reflect.TypeOf((*ArrayOfVirtualAppLinkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDevice struct {
0000000000000000000000000000000000000000;;		VirtualDevice []BaseVirtualDevice `xml:"VirtualDevice,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDevice"] = reflect.TypeOf((*ArrayOfVirtualDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption []BaseVirtualDeviceBackingOption `xml:"VirtualDeviceBackingOption,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDeviceBackingOption"] = reflect.TypeOf((*ArrayOfVirtualDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDeviceConfigSpec struct {
0000000000000000000000000000000000000000;;		VirtualDeviceConfigSpec []BaseVirtualDeviceConfigSpec `xml:"VirtualDeviceConfigSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDeviceConfigSpec"] = reflect.TypeOf((*ArrayOfVirtualDeviceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDeviceOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption []BaseVirtualDeviceOption `xml:"VirtualDeviceOption,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDeviceOption"] = reflect.TypeOf((*ArrayOfVirtualDeviceOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDisk struct {
0000000000000000000000000000000000000000;;		VirtualDisk []VirtualDisk `xml:"VirtualDisk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDisk"] = reflect.TypeOf((*ArrayOfVirtualDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDiskDeltaDiskFormatsSupported struct {
0000000000000000000000000000000000000000;;		VirtualDiskDeltaDiskFormatsSupported []VirtualDiskDeltaDiskFormatsSupported `xml:"VirtualDiskDeltaDiskFormatsSupported,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDiskDeltaDiskFormatsSupported"] = reflect.TypeOf((*ArrayOfVirtualDiskDeltaDiskFormatsSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualDiskId struct {
0000000000000000000000000000000000000000;;		VirtualDiskId []VirtualDiskId `xml:"VirtualDiskId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualDiskId"] = reflect.TypeOf((*ArrayOfVirtualDiskId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineBootOptionsBootableDevice struct {
0000000000000000000000000000000000000000;;		VirtualMachineBootOptionsBootableDevice []BaseVirtualMachineBootOptionsBootableDevice `xml:"VirtualMachineBootOptionsBootableDevice,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineBootOptionsBootableDevice"] = reflect.TypeOf((*ArrayOfVirtualMachineBootOptionsBootableDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineCdromInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineCdromInfo []VirtualMachineCdromInfo `xml:"VirtualMachineCdromInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineCdromInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineCdromInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineConfigInfoDatastoreUrlPair struct {
0000000000000000000000000000000000000000;;		VirtualMachineConfigInfoDatastoreUrlPair []VirtualMachineConfigInfoDatastoreUrlPair `xml:"VirtualMachineConfigInfoDatastoreUrlPair,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineConfigInfoDatastoreUrlPair"] = reflect.TypeOf((*ArrayOfVirtualMachineConfigInfoDatastoreUrlPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineConfigOptionDescriptor struct {
0000000000000000000000000000000000000000;;		VirtualMachineConfigOptionDescriptor []VirtualMachineConfigOptionDescriptor `xml:"VirtualMachineConfigOptionDescriptor,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineConfigOptionDescriptor"] = reflect.TypeOf((*ArrayOfVirtualMachineConfigOptionDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineCpuIdInfoSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineCpuIdInfoSpec []VirtualMachineCpuIdInfoSpec `xml:"VirtualMachineCpuIdInfoSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineCpuIdInfoSpec"] = reflect.TypeOf((*ArrayOfVirtualMachineCpuIdInfoSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineDatastoreInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineDatastoreInfo []VirtualMachineDatastoreInfo `xml:"VirtualMachineDatastoreInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineDatastoreInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineDatastoreVolumeOption struct {
0000000000000000000000000000000000000000;;		VirtualMachineDatastoreVolumeOption []VirtualMachineDatastoreVolumeOption `xml:"VirtualMachineDatastoreVolumeOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineDatastoreVolumeOption"] = reflect.TypeOf((*ArrayOfVirtualMachineDatastoreVolumeOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineDeviceRuntimeInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineDeviceRuntimeInfo []VirtualMachineDeviceRuntimeInfo `xml:"VirtualMachineDeviceRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineDeviceRuntimeInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineDeviceRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineDisplayTopology struct {
0000000000000000000000000000000000000000;;		VirtualMachineDisplayTopology []VirtualMachineDisplayTopology `xml:"VirtualMachineDisplayTopology,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineDisplayTopology"] = reflect.TypeOf((*ArrayOfVirtualMachineDisplayTopology)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFeatureRequirement struct {
0000000000000000000000000000000000000000;;		VirtualMachineFeatureRequirement []VirtualMachineFeatureRequirement `xml:"VirtualMachineFeatureRequirement,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFeatureRequirement"] = reflect.TypeOf((*ArrayOfVirtualMachineFeatureRequirement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFileLayoutDiskLayout struct {
0000000000000000000000000000000000000000;;		VirtualMachineFileLayoutDiskLayout []VirtualMachineFileLayoutDiskLayout `xml:"VirtualMachineFileLayoutDiskLayout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFileLayoutDiskLayout"] = reflect.TypeOf((*ArrayOfVirtualMachineFileLayoutDiskLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFileLayoutExDiskLayout struct {
0000000000000000000000000000000000000000;;		VirtualMachineFileLayoutExDiskLayout []VirtualMachineFileLayoutExDiskLayout `xml:"VirtualMachineFileLayoutExDiskLayout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFileLayoutExDiskLayout"] = reflect.TypeOf((*ArrayOfVirtualMachineFileLayoutExDiskLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFileLayoutExDiskUnit struct {
0000000000000000000000000000000000000000;;		VirtualMachineFileLayoutExDiskUnit []VirtualMachineFileLayoutExDiskUnit `xml:"VirtualMachineFileLayoutExDiskUnit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFileLayoutExDiskUnit"] = reflect.TypeOf((*ArrayOfVirtualMachineFileLayoutExDiskUnit)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFileLayoutExFileInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineFileLayoutExFileInfo []VirtualMachineFileLayoutExFileInfo `xml:"VirtualMachineFileLayoutExFileInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFileLayoutExFileInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineFileLayoutExFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFileLayoutExSnapshotLayout struct {
0000000000000000000000000000000000000000;;		VirtualMachineFileLayoutExSnapshotLayout []VirtualMachineFileLayoutExSnapshotLayout `xml:"VirtualMachineFileLayoutExSnapshotLayout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFileLayoutExSnapshotLayout"] = reflect.TypeOf((*ArrayOfVirtualMachineFileLayoutExSnapshotLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFileLayoutSnapshotLayout struct {
0000000000000000000000000000000000000000;;		VirtualMachineFileLayoutSnapshotLayout []VirtualMachineFileLayoutSnapshotLayout `xml:"VirtualMachineFileLayoutSnapshotLayout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFileLayoutSnapshotLayout"] = reflect.TypeOf((*ArrayOfVirtualMachineFileLayoutSnapshotLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineFloppyInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineFloppyInfo []VirtualMachineFloppyInfo `xml:"VirtualMachineFloppyInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineFloppyInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineFloppyInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineIdeDiskDeviceInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineIdeDiskDeviceInfo []VirtualMachineIdeDiskDeviceInfo `xml:"VirtualMachineIdeDiskDeviceInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineIdeDiskDeviceInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineIdeDiskDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineIdeDiskDevicePartitionInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineIdeDiskDevicePartitionInfo []VirtualMachineIdeDiskDevicePartitionInfo `xml:"VirtualMachineIdeDiskDevicePartitionInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineIdeDiskDevicePartitionInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineIdeDiskDevicePartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineLegacyNetworkSwitchInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineLegacyNetworkSwitchInfo []VirtualMachineLegacyNetworkSwitchInfo `xml:"VirtualMachineLegacyNetworkSwitchInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineLegacyNetworkSwitchInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineLegacyNetworkSwitchInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineMessage struct {
0000000000000000000000000000000000000000;;		VirtualMachineMessage []VirtualMachineMessage `xml:"VirtualMachineMessage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineMessage"] = reflect.TypeOf((*ArrayOfVirtualMachineMessage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineMetadataManagerVmMetadataInput struct {
0000000000000000000000000000000000000000;;		VirtualMachineMetadataManagerVmMetadataInput []VirtualMachineMetadataManagerVmMetadataInput `xml:"VirtualMachineMetadataManagerVmMetadataInput,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineMetadataManagerVmMetadataInput"] = reflect.TypeOf((*ArrayOfVirtualMachineMetadataManagerVmMetadataInput)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineMetadataManagerVmMetadataResult struct {
0000000000000000000000000000000000000000;;		VirtualMachineMetadataManagerVmMetadataResult []VirtualMachineMetadataManagerVmMetadataResult `xml:"VirtualMachineMetadataManagerVmMetadataResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineMetadataManagerVmMetadataResult"] = reflect.TypeOf((*ArrayOfVirtualMachineMetadataManagerVmMetadataResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineNetworkInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineNetworkInfo []VirtualMachineNetworkInfo `xml:"VirtualMachineNetworkInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineNetworkInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineParallelInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineParallelInfo []VirtualMachineParallelInfo `xml:"VirtualMachineParallelInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineParallelInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineParallelInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachinePciPassthroughInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachinePciPassthroughInfo []BaseVirtualMachinePciPassthroughInfo `xml:"VirtualMachinePciPassthroughInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachinePciPassthroughInfo"] = reflect.TypeOf((*ArrayOfVirtualMachinePciPassthroughInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachinePciSharedGpuPassthroughInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachinePciSharedGpuPassthroughInfo []VirtualMachinePciSharedGpuPassthroughInfo `xml:"VirtualMachinePciSharedGpuPassthroughInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachinePciSharedGpuPassthroughInfo"] = reflect.TypeOf((*ArrayOfVirtualMachinePciSharedGpuPassthroughInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineProfileSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineProfileSpec []BaseVirtualMachineProfileSpec `xml:"VirtualMachineProfileSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineProfileSpec"] = reflect.TypeOf((*ArrayOfVirtualMachineProfileSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineRelocateSpecDiskLocator struct {
0000000000000000000000000000000000000000;;		VirtualMachineRelocateSpecDiskLocator []VirtualMachineRelocateSpecDiskLocator `xml:"VirtualMachineRelocateSpecDiskLocator,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineRelocateSpecDiskLocator"] = reflect.TypeOf((*ArrayOfVirtualMachineRelocateSpecDiskLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineScsiDiskDeviceInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineScsiDiskDeviceInfo []VirtualMachineScsiDiskDeviceInfo `xml:"VirtualMachineScsiDiskDeviceInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineScsiDiskDeviceInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineScsiDiskDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineScsiPassthroughInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineScsiPassthroughInfo []VirtualMachineScsiPassthroughInfo `xml:"VirtualMachineScsiPassthroughInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineScsiPassthroughInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineScsiPassthroughInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineSerialInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineSerialInfo []VirtualMachineSerialInfo `xml:"VirtualMachineSerialInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineSerialInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineSerialInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineSnapshotTree struct {
0000000000000000000000000000000000000000;;		VirtualMachineSnapshotTree []VirtualMachineSnapshotTree `xml:"VirtualMachineSnapshotTree,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineSnapshotTree"] = reflect.TypeOf((*ArrayOfVirtualMachineSnapshotTree)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineSoundInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineSoundInfo []VirtualMachineSoundInfo `xml:"VirtualMachineSoundInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineSoundInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineSoundInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineSriovInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineSriovInfo []VirtualMachineSriovInfo `xml:"VirtualMachineSriovInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineSriovInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineSriovInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineSummary struct {
0000000000000000000000000000000000000000;;		VirtualMachineSummary []VirtualMachineSummary `xml:"VirtualMachineSummary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineSummary"] = reflect.TypeOf((*ArrayOfVirtualMachineSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineUsageOnDatastore struct {
0000000000000000000000000000000000000000;;		VirtualMachineUsageOnDatastore []VirtualMachineUsageOnDatastore `xml:"VirtualMachineUsageOnDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineUsageOnDatastore"] = reflect.TypeOf((*ArrayOfVirtualMachineUsageOnDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineUsbInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineUsbInfo []VirtualMachineUsbInfo `xml:"VirtualMachineUsbInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineUsbInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineUsbInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineVFlashModuleInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineVFlashModuleInfo []VirtualMachineVFlashModuleInfo `xml:"VirtualMachineVFlashModuleInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineVFlashModuleInfo"] = reflect.TypeOf((*ArrayOfVirtualMachineVFlashModuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualMachineVMCIDeviceFilterSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineVMCIDeviceFilterSpec []VirtualMachineVMCIDeviceFilterSpec `xml:"VirtualMachineVMCIDeviceFilterSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualMachineVMCIDeviceFilterSpec"] = reflect.TypeOf((*ArrayOfVirtualMachineVMCIDeviceFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualNicManagerNetConfig struct {
0000000000000000000000000000000000000000;;		VirtualNicManagerNetConfig []VirtualNicManagerNetConfig `xml:"VirtualNicManagerNetConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualNicManagerNetConfig"] = reflect.TypeOf((*ArrayOfVirtualNicManagerNetConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualSCSISharing struct {
0000000000000000000000000000000000000000;;		VirtualSCSISharing []VirtualSCSISharing `xml:"VirtualSCSISharing,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualSCSISharing"] = reflect.TypeOf((*ArrayOfVirtualSCSISharing)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVirtualSwitchProfile struct {
0000000000000000000000000000000000000000;;		VirtualSwitchProfile []VirtualSwitchProfile `xml:"VirtualSwitchProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVirtualSwitchProfile"] = reflect.TypeOf((*ArrayOfVirtualSwitchProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVmEventArgument struct {
0000000000000000000000000000000000000000;;		VmEventArgument []VmEventArgument `xml:"VmEventArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVmEventArgument"] = reflect.TypeOf((*ArrayOfVmEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVmPodConfigForPlacement struct {
0000000000000000000000000000000000000000;;		VmPodConfigForPlacement []VmPodConfigForPlacement `xml:"VmPodConfigForPlacement,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVmPodConfigForPlacement"] = reflect.TypeOf((*ArrayOfVmPodConfigForPlacement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVmPortGroupProfile struct {
0000000000000000000000000000000000000000;;		VmPortGroupProfile []VmPortGroupProfile `xml:"VmPortGroupProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVmPortGroupProfile"] = reflect.TypeOf((*ArrayOfVmPortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVmfsConfigOption struct {
0000000000000000000000000000000000000000;;		VmfsConfigOption []VmfsConfigOption `xml:"VmfsConfigOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVmfsConfigOption"] = reflect.TypeOf((*ArrayOfVmfsConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVmfsDatastoreOption struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreOption []VmfsDatastoreOption `xml:"VmfsDatastoreOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVmfsDatastoreOption"] = reflect.TypeOf((*ArrayOfVmfsDatastoreOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVnicPortArgument struct {
0000000000000000000000000000000000000000;;		VnicPortArgument []VnicPortArgument `xml:"VnicPortArgument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVnicPortArgument"] = reflect.TypeOf((*ArrayOfVnicPortArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostConfigInfo struct {
0000000000000000000000000000000000000000;;		VsanHostConfigInfo []VsanHostConfigInfo `xml:"VsanHostConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostConfigInfo"] = reflect.TypeOf((*ArrayOfVsanHostConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostConfigInfoNetworkInfoPortConfig struct {
0000000000000000000000000000000000000000;;		VsanHostConfigInfoNetworkInfoPortConfig []VsanHostConfigInfoNetworkInfoPortConfig `xml:"VsanHostConfigInfoNetworkInfoPortConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostConfigInfoNetworkInfoPortConfig"] = reflect.TypeOf((*ArrayOfVsanHostConfigInfoNetworkInfoPortConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostDiskMapInfo struct {
0000000000000000000000000000000000000000;;		VsanHostDiskMapInfo []VsanHostDiskMapInfo `xml:"VsanHostDiskMapInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostDiskMapInfo"] = reflect.TypeOf((*ArrayOfVsanHostDiskMapInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostDiskMapResult struct {
0000000000000000000000000000000000000000;;		VsanHostDiskMapResult []VsanHostDiskMapResult `xml:"VsanHostDiskMapResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostDiskMapResult"] = reflect.TypeOf((*ArrayOfVsanHostDiskMapResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostDiskMapping struct {
0000000000000000000000000000000000000000;;		VsanHostDiskMapping []VsanHostDiskMapping `xml:"VsanHostDiskMapping,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostDiskMapping"] = reflect.TypeOf((*ArrayOfVsanHostDiskMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostDiskResult struct {
0000000000000000000000000000000000000000;;		VsanHostDiskResult []VsanHostDiskResult `xml:"VsanHostDiskResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostDiskResult"] = reflect.TypeOf((*ArrayOfVsanHostDiskResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostMembershipInfo struct {
0000000000000000000000000000000000000000;;		VsanHostMembershipInfo []VsanHostMembershipInfo `xml:"VsanHostMembershipInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostMembershipInfo"] = reflect.TypeOf((*ArrayOfVsanHostMembershipInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanHostRuntimeInfoDiskIssue struct {
0000000000000000000000000000000000000000;;		VsanHostRuntimeInfoDiskIssue []VsanHostRuntimeInfoDiskIssue `xml:"VsanHostRuntimeInfoDiskIssue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanHostRuntimeInfoDiskIssue"] = reflect.TypeOf((*ArrayOfVsanHostRuntimeInfoDiskIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanNewPolicyBatch struct {
0000000000000000000000000000000000000000;;		VsanNewPolicyBatch []VsanNewPolicyBatch `xml:"VsanNewPolicyBatch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanNewPolicyBatch"] = reflect.TypeOf((*ArrayOfVsanNewPolicyBatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanPolicyChangeBatch struct {
0000000000000000000000000000000000000000;;		VsanPolicyChangeBatch []VsanPolicyChangeBatch `xml:"VsanPolicyChangeBatch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanPolicyChangeBatch"] = reflect.TypeOf((*ArrayOfVsanPolicyChangeBatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanPolicySatisfiability struct {
0000000000000000000000000000000000000000;;		VsanPolicySatisfiability []VsanPolicySatisfiability `xml:"VsanPolicySatisfiability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanPolicySatisfiability"] = reflect.TypeOf((*ArrayOfVsanPolicySatisfiability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanUpgradeSystemNetworkPartitionInfo struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemNetworkPartitionInfo []VsanUpgradeSystemNetworkPartitionInfo `xml:"VsanUpgradeSystemNetworkPartitionInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanUpgradeSystemNetworkPartitionInfo"] = reflect.TypeOf((*ArrayOfVsanUpgradeSystemNetworkPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanUpgradeSystemPreflightCheckIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue []BaseVsanUpgradeSystemPreflightCheckIssue `xml:"VsanUpgradeSystemPreflightCheckIssue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanUpgradeSystemPreflightCheckIssue"] = reflect.TypeOf((*ArrayOfVsanUpgradeSystemPreflightCheckIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVsanUpgradeSystemUpgradeHistoryItem struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemUpgradeHistoryItem []BaseVsanUpgradeSystemUpgradeHistoryItem `xml:"VsanUpgradeSystemUpgradeHistoryItem,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVsanUpgradeSystemUpgradeHistoryItem"] = reflect.TypeOf((*ArrayOfVsanUpgradeSystemUpgradeHistoryItem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayOfVslmTagEntry struct {
0000000000000000000000000000000000000000;;		VslmTagEntry []VslmTagEntry `xml:"VslmTagEntry,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayOfVslmTagEntry"] = reflect.TypeOf((*ArrayOfVslmTagEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArrayUpdateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation ArrayUpdateOperation `xml:"operation"`
0000000000000000000000000000000000000000;;		RemoveKey AnyType              `xml:"removeKey,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ArrayUpdateSpec"] = reflect.TypeOf((*ArrayUpdateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssignUserToGroup AssignUserToGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AssignUserToGroup"] = reflect.TypeOf((*AssignUserToGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssignUserToGroupRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		User  string                 `xml:"user"`
0000000000000000000000000000000000000000;;		Group string                 `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AssignUserToGroupRequestType"] = reflect.TypeOf((*AssignUserToGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssignUserToGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssociateProfile AssociateProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AssociateProfile"] = reflect.TypeOf((*AssociateProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssociateProfileRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AssociateProfileRequestType"] = reflect.TypeOf((*AssociateProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssociateProfileResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachDiskRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DiskId        ID                     `xml:"diskId"`
0000000000000000000000000000000000000000;;		Datastore     ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		ControllerKey int32                  `xml:"controllerKey,omitempty"`
0000000000000000000000000000000000000000;;		UnitNumber    *int32                 `xml:"unitNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachDiskRequestType"] = reflect.TypeOf((*AttachDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachDisk_Task AttachDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachDisk_Task"] = reflect.TypeOf((*AttachDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachScsiLun AttachScsiLunRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachScsiLun"] = reflect.TypeOf((*AttachScsiLun)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachScsiLunExRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LunUuid []string               `xml:"lunUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachScsiLunExRequestType"] = reflect.TypeOf((*AttachScsiLunExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachScsiLunEx_Task AttachScsiLunExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachScsiLunEx_Task"] = reflect.TypeOf((*AttachScsiLunEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachScsiLunEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachScsiLunRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LunUuid string                 `xml:"lunUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachScsiLunRequestType"] = reflect.TypeOf((*AttachScsiLunRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachScsiLunResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachTagToVStorageObject AttachTagToVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachTagToVStorageObject"] = reflect.TypeOf((*AttachTagToVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachTagToVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id       ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Category string                 `xml:"category"`
0000000000000000000000000000000000000000;;		Tag      string                 `xml:"tag"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachTagToVStorageObjectRequestType"] = reflect.TypeOf((*AttachTagToVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachTagToVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachVmfsExtent AttachVmfsExtentRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachVmfsExtent"] = reflect.TypeOf((*AttachVmfsExtent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachVmfsExtentRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsPath string                 `xml:"vmfsPath"`
0000000000000000000000000000000000000000;;		Extent   HostScsiDiskPartition  `xml:"extent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AttachVmfsExtentRequestType"] = reflect.TypeOf((*AttachVmfsExtentRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachVmfsExtentResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthMinimumAdminPermission struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthMinimumAdminPermission"] = reflect.TypeOf((*AuthMinimumAdminPermission)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthMinimumAdminPermissionFault AuthMinimumAdminPermission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthMinimumAdminPermissionFault"] = reflect.TypeOf((*AuthMinimumAdminPermissionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthenticationProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActiveDirectory *ActiveDirectoryProfile `xml:"activeDirectory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthenticationProfile"] = reflect.TypeOf((*AuthenticationProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Privilege      []BaseElementDescription `xml:"privilege,typeattr"`
0000000000000000000000000000000000000000;;		PrivilegeGroup []BaseElementDescription `xml:"privilegeGroup,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthorizationDescription"] = reflect.TypeOf((*AuthorizationDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthorizationEvent"] = reflect.TypeOf((*AuthorizationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationPrivilege struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivId        string `xml:"privId"`
0000000000000000000000000000000000000000;;		OnParent      bool   `xml:"onParent"`
0000000000000000000000000000000000000000;;		Name          string `xml:"name"`
0000000000000000000000000000000000000000;;		PrivGroupName string `xml:"privGroupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthorizationPrivilege"] = reflect.TypeOf((*AuthorizationPrivilege)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationRole struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RoleId    int32           `xml:"roleId"`
0000000000000000000000000000000000000000;;		System    bool            `xml:"system"`
0000000000000000000000000000000000000000;;		Name      string          `xml:"name"`
0000000000000000000000000000000000000000;;		Info      BaseDescription `xml:"info,typeattr"`
0000000000000000000000000000000000000000;;		Privilege []string        `xml:"privilege,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthorizationRole"] = reflect.TypeOf((*AuthorizationRole)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartDefaults struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled          *bool  `xml:"enabled"`
0000000000000000000000000000000000000000;;		StartDelay       int32  `xml:"startDelay,omitempty"`
0000000000000000000000000000000000000000;;		StopDelay        int32  `xml:"stopDelay,omitempty"`
0000000000000000000000000000000000000000;;		WaitForHeartbeat *bool  `xml:"waitForHeartbeat"`
0000000000000000000000000000000000000000;;		StopAction       string `xml:"stopAction,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AutoStartDefaults"] = reflect.TypeOf((*AutoStartDefaults)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              ManagedObjectReference        `xml:"key"`
0000000000000000000000000000000000000000;;		StartOrder       int32                         `xml:"startOrder"`
0000000000000000000000000000000000000000;;		StartDelay       int32                         `xml:"startDelay"`
0000000000000000000000000000000000000000;;		WaitForHeartbeat AutoStartWaitHeartbeatSetting `xml:"waitForHeartbeat"`
0000000000000000000000000000000000000000;;		StartAction      string                        `xml:"startAction"`
0000000000000000000000000000000000000000;;		StopDelay        int32                         `xml:"stopDelay"`
0000000000000000000000000000000000000000;;		StopAction       string                        `xml:"stopAction"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AutoStartPowerInfo"] = reflect.TypeOf((*AutoStartPowerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerOff AutoStartPowerOffRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AutoStartPowerOff"] = reflect.TypeOf((*AutoStartPowerOff)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerOffRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AutoStartPowerOffRequestType"] = reflect.TypeOf((*AutoStartPowerOffRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerOffResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerOn AutoStartPowerOnRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AutoStartPowerOn"] = reflect.TypeOf((*AutoStartPowerOn)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerOnRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AutoStartPowerOnRequestType"] = reflect.TypeOf((*AutoStartPowerOnRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoStartPowerOnResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupBlobReadFailure struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityName string               `xml:"entityName"`
0000000000000000000000000000000000000000;;		EntityType string               `xml:"entityType"`
0000000000000000000000000000000000000000;;		Fault      LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BackupBlobReadFailure"] = reflect.TypeOf((*BackupBlobReadFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupBlobReadFailureFault BackupBlobReadFailure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BackupBlobReadFailureFault"] = reflect.TypeOf((*BackupBlobReadFailureFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupBlobWriteFailure struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityName string               `xml:"entityName"`
0000000000000000000000000000000000000000;;		EntityType string               `xml:"entityType"`
0000000000000000000000000000000000000000;;		Fault      LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BackupBlobWriteFailure"] = reflect.TypeOf((*BackupBlobWriteFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupBlobWriteFailureFault BackupBlobWriteFailure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BackupBlobWriteFailureFault"] = reflect.TypeOf((*BackupBlobWriteFailureFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupFirmwareConfiguration BackupFirmwareConfigurationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BackupFirmwareConfiguration"] = reflect.TypeOf((*BackupFirmwareConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupFirmwareConfigurationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BackupFirmwareConfigurationRequestType"] = reflect.TypeOf((*BackupFirmwareConfigurationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackupFirmwareConfigurationResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BadUsernameSessionEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BadUsernameSessionEvent"] = reflect.TypeOf((*BadUsernameSessionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id         ID                            `xml:"id"`
0000000000000000000000000000000000000000;;		Name       string                        `xml:"name"`
0000000000000000000000000000000000000000;;		CreateTime time.Time                     `xml:"createTime"`
0000000000000000000000000000000000000000;;		Backing    BaseBaseConfigInfoBackingInfo `xml:"backing,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BaseConfigInfo"] = reflect.TypeOf((*BaseConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseConfigInfoBackingInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BaseConfigInfoBackingInfo"] = reflect.TypeOf((*BaseConfigInfoBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseConfigInfoDiskFileBackingInfo struct {
0000000000000000000000000000000000000000;;		BaseConfigInfoFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProvisioningType string `xml:"provisioningType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BaseConfigInfoDiskFileBackingInfo"] = reflect.TypeOf((*BaseConfigInfoDiskFileBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseConfigInfoFileBackingInfo struct {
0000000000000000000000000000000000000000;;		BaseConfigInfoBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FilePath        string                            `xml:"filePath"`
0000000000000000000000000000000000000000;;		BackingObjectId string                            `xml:"backingObjectId,omitempty"`
0000000000000000000000000000000000000000;;		Parent          BaseBaseConfigInfoFileBackingInfo `xml:"parent,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DeltaSizeInMB   int64                             `xml:"deltaSizeInMB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BaseConfigInfoFileBackingInfo"] = reflect.TypeOf((*BaseConfigInfoFileBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseConfigInfoRawDiskMappingBackingInfo struct {
0000000000000000000000000000000000000000;;		BaseConfigInfoFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LunUuid           string `xml:"lunUuid"`
0000000000000000000000000000000000000000;;		CompatibilityMode string `xml:"compatibilityMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BaseConfigInfoRawDiskMappingBackingInfo"] = reflect.TypeOf((*BaseConfigInfoRawDiskMappingBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BatchResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Result  string                  `xml:"result"`
0000000000000000000000000000000000000000;;		HostKey string                  `xml:"hostKey"`
0000000000000000000000000000000000000000;;		Ds      *ManagedObjectReference `xml:"ds,omitempty"`
0000000000000000000000000000000000000000;;		Fault   *LocalizedMethodFault   `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BatchResult"] = reflect.TypeOf((*BatchResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BindVnic BindVnicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BindVnic"] = reflect.TypeOf((*BindVnic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BindVnicRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaName string                 `xml:"iScsiHbaName"`
0000000000000000000000000000000000000000;;		VnicDevice   string                 `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BindVnicRequestType"] = reflect.TypeOf((*BindVnicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BindVnicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BlockedByFirewall struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BlockedByFirewall"] = reflect.TypeOf((*BlockedByFirewall)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BlockedByFirewallFault BlockedByFirewall
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BlockedByFirewallFault"] = reflect.TypeOf((*BlockedByFirewallFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BoolOption struct {
0000000000000000000000000000000000000000;;		OptionType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Supported    bool `xml:"supported"`
0000000000000000000000000000000000000000;;		DefaultValue bool `xml:"defaultValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BoolOption"] = reflect.TypeOf((*BoolOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BoolPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value *bool `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BoolPolicy"] = reflect.TypeOf((*BoolPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BrowseDiagnosticLog BrowseDiagnosticLogRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BrowseDiagnosticLog"] = reflect.TypeOf((*BrowseDiagnosticLog)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BrowseDiagnosticLogRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host  *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Key   string                  `xml:"key"`
0000000000000000000000000000000000000000;;		Start int32                   `xml:"start,omitempty"`
0000000000000000000000000000000000000000;;		Lines int32                   `xml:"lines,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["BrowseDiagnosticLogRequestType"] = reflect.TypeOf((*BrowseDiagnosticLogRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BrowseDiagnosticLogResponse struct {
0000000000000000000000000000000000000000;;		Returnval DiagnosticManagerLogHeader `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CAMServerRefusedConnection struct {
0000000000000000000000000000000000000000;;		InvalidCAMServer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CAMServerRefusedConnection"] = reflect.TypeOf((*CAMServerRefusedConnection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CAMServerRefusedConnectionFault CAMServerRefusedConnection
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CAMServerRefusedConnectionFault"] = reflect.TypeOf((*CAMServerRefusedConnectionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CanProvisionObjects CanProvisionObjectsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CanProvisionObjects"] = reflect.TypeOf((*CanProvisionObjects)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CanProvisionObjectsRequestType struct {
0000000000000000000000000000000000000000;;		This                 ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Npbs                 []VsanNewPolicyBatch   `xml:"npbs"`
0000000000000000000000000000000000000000;;		IgnoreSatisfiability *bool                  `xml:"ignoreSatisfiability"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CanProvisionObjectsRequestType"] = reflect.TypeOf((*CanProvisionObjectsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CanProvisionObjectsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VsanPolicySatisfiability `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelRecommendation CancelRecommendationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelRecommendation"] = reflect.TypeOf((*CancelRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelRecommendationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  string                 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelRecommendationRequestType"] = reflect.TypeOf((*CancelRecommendationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelRecommendationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelRetrievePropertiesEx CancelRetrievePropertiesExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelRetrievePropertiesEx"] = reflect.TypeOf((*CancelRetrievePropertiesEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelRetrievePropertiesExRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Token string                 `xml:"token"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelRetrievePropertiesExRequestType"] = reflect.TypeOf((*CancelRetrievePropertiesExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelRetrievePropertiesExResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelStorageDrsRecommendation CancelStorageDrsRecommendationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelStorageDrsRecommendation"] = reflect.TypeOf((*CancelStorageDrsRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelStorageDrsRecommendationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  []string               `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelStorageDrsRecommendationRequestType"] = reflect.TypeOf((*CancelStorageDrsRecommendationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelStorageDrsRecommendationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelTask CancelTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelTask"] = reflect.TypeOf((*CancelTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelTaskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelTaskRequestType"] = reflect.TypeOf((*CancelTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelTaskResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelWaitForUpdates CancelWaitForUpdatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelWaitForUpdates"] = reflect.TypeOf((*CancelWaitForUpdates)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelWaitForUpdatesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CancelWaitForUpdatesRequestType"] = reflect.TypeOf((*CancelWaitForUpdatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelWaitForUpdatesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CanceledHostOperationEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CanceledHostOperationEvent"] = reflect.TypeOf((*CanceledHostOperationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessFile struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessFile"] = reflect.TypeOf((*CannotAccessFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessFileFault CannotAccessFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessFileFault"] = reflect.TypeOf((*CannotAccessFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessLocalSource struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessLocalSource"] = reflect.TypeOf((*CannotAccessLocalSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessLocalSourceFault CannotAccessLocalSource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessLocalSourceFault"] = reflect.TypeOf((*CannotAccessLocalSourceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessNetwork struct {
0000000000000000000000000000000000000000;;		CannotAccessVmDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network *ManagedObjectReference `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessNetwork"] = reflect.TypeOf((*CannotAccessNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessNetworkFault BaseCannotAccessNetwork
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessNetworkFault"] = reflect.TypeOf((*CannotAccessNetworkFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmComponent struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmComponent"] = reflect.TypeOf((*CannotAccessVmComponent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmComponentFault BaseCannotAccessVmComponent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmComponentFault"] = reflect.TypeOf((*CannotAccessVmComponentFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmConfig struct {
0000000000000000000000000000000000000000;;		CannotAccessVmComponent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmConfig"] = reflect.TypeOf((*CannotAccessVmConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmConfigFault CannotAccessVmConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmConfigFault"] = reflect.TypeOf((*CannotAccessVmConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmDevice struct {
0000000000000000000000000000000000000000;;		CannotAccessVmComponent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device    string `xml:"device"`
0000000000000000000000000000000000000000;;		Backing   string `xml:"backing"`
0000000000000000000000000000000000000000;;		Connected bool   `xml:"connected"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmDevice"] = reflect.TypeOf((*CannotAccessVmDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmDeviceFault BaseCannotAccessVmDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmDeviceFault"] = reflect.TypeOf((*CannotAccessVmDeviceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmDisk struct {
0000000000000000000000000000000000000000;;		CannotAccessVmDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmDisk"] = reflect.TypeOf((*CannotAccessVmDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAccessVmDiskFault BaseCannotAccessVmDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAccessVmDiskFault"] = reflect.TypeOf((*CannotAccessVmDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAddHostWithFTVmAsStandalone struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAddHostWithFTVmAsStandalone"] = reflect.TypeOf((*CannotAddHostWithFTVmAsStandalone)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAddHostWithFTVmAsStandaloneFault CannotAddHostWithFTVmAsStandalone
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAddHostWithFTVmAsStandaloneFault"] = reflect.TypeOf((*CannotAddHostWithFTVmAsStandaloneFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAddHostWithFTVmToDifferentCluster struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAddHostWithFTVmToDifferentCluster"] = reflect.TypeOf((*CannotAddHostWithFTVmToDifferentCluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAddHostWithFTVmToDifferentClusterFault CannotAddHostWithFTVmToDifferentCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAddHostWithFTVmToDifferentClusterFault"] = reflect.TypeOf((*CannotAddHostWithFTVmToDifferentClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAddHostWithFTVmToNonHACluster struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAddHostWithFTVmToNonHACluster"] = reflect.TypeOf((*CannotAddHostWithFTVmToNonHACluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotAddHostWithFTVmToNonHAClusterFault CannotAddHostWithFTVmToNonHACluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotAddHostWithFTVmToNonHAClusterFault"] = reflect.TypeOf((*CannotAddHostWithFTVmToNonHAClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeDrsBehaviorForFtSecondary struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeDrsBehaviorForFtSecondary"] = reflect.TypeOf((*CannotChangeDrsBehaviorForFtSecondary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeDrsBehaviorForFtSecondaryFault CannotChangeDrsBehaviorForFtSecondary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeDrsBehaviorForFtSecondaryFault"] = reflect.TypeOf((*CannotChangeDrsBehaviorForFtSecondaryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeHaSettingsForFtSecondary struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeHaSettingsForFtSecondary"] = reflect.TypeOf((*CannotChangeHaSettingsForFtSecondary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeHaSettingsForFtSecondaryFault CannotChangeHaSettingsForFtSecondary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeHaSettingsForFtSecondaryFault"] = reflect.TypeOf((*CannotChangeHaSettingsForFtSecondaryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeVsanClusterUuid struct {
0000000000000000000000000000000000000000;;		VsanFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeVsanClusterUuid"] = reflect.TypeOf((*CannotChangeVsanClusterUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeVsanClusterUuidFault CannotChangeVsanClusterUuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeVsanClusterUuidFault"] = reflect.TypeOf((*CannotChangeVsanClusterUuidFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeVsanNodeUuid struct {
0000000000000000000000000000000000000000;;		VsanFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeVsanNodeUuid"] = reflect.TypeOf((*CannotChangeVsanNodeUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotChangeVsanNodeUuidFault CannotChangeVsanNodeUuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotChangeVsanNodeUuidFault"] = reflect.TypeOf((*CannotChangeVsanNodeUuidFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotComputeFTCompatibleHosts struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotComputeFTCompatibleHosts"] = reflect.TypeOf((*CannotComputeFTCompatibleHosts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotComputeFTCompatibleHostsFault CannotComputeFTCompatibleHosts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotComputeFTCompatibleHostsFault"] = reflect.TypeOf((*CannotComputeFTCompatibleHostsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotCreateFile struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotCreateFile"] = reflect.TypeOf((*CannotCreateFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotCreateFileFault CannotCreateFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotCreateFileFault"] = reflect.TypeOf((*CannotCreateFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDecryptPasswords struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDecryptPasswords"] = reflect.TypeOf((*CannotDecryptPasswords)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDecryptPasswordsFault CannotDecryptPasswords
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDecryptPasswordsFault"] = reflect.TypeOf((*CannotDecryptPasswordsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDeleteFile struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDeleteFile"] = reflect.TypeOf((*CannotDeleteFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDeleteFileFault CannotDeleteFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDeleteFileFault"] = reflect.TypeOf((*CannotDeleteFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDisableDrsOnClustersWithVApps struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDisableDrsOnClustersWithVApps"] = reflect.TypeOf((*CannotDisableDrsOnClustersWithVApps)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDisableDrsOnClustersWithVAppsFault CannotDisableDrsOnClustersWithVApps
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDisableDrsOnClustersWithVAppsFault"] = reflect.TypeOf((*CannotDisableDrsOnClustersWithVAppsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDisableSnapshot struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDisableSnapshot"] = reflect.TypeOf((*CannotDisableSnapshot)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDisableSnapshotFault CannotDisableSnapshot
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDisableSnapshotFault"] = reflect.TypeOf((*CannotDisableSnapshotFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDisconnectHostWithFaultToleranceVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDisconnectHostWithFaultToleranceVm"] = reflect.TypeOf((*CannotDisconnectHostWithFaultToleranceVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotDisconnectHostWithFaultToleranceVmFault CannotDisconnectHostWithFaultToleranceVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotDisconnectHostWithFaultToleranceVmFault"] = reflect.TypeOf((*CannotDisconnectHostWithFaultToleranceVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotEnableVmcpForCluster struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		HostName string                  `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		Reason   string                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotEnableVmcpForCluster"] = reflect.TypeOf((*CannotEnableVmcpForCluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotEnableVmcpForClusterFault CannotEnableVmcpForCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotEnableVmcpForClusterFault"] = reflect.TypeOf((*CannotEnableVmcpForClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotModifyConfigCpuRequirements struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotModifyConfigCpuRequirements"] = reflect.TypeOf((*CannotModifyConfigCpuRequirements)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotModifyConfigCpuRequirementsFault CannotModifyConfigCpuRequirements
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotModifyConfigCpuRequirementsFault"] = reflect.TypeOf((*CannotModifyConfigCpuRequirementsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveFaultToleranceVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MoveType string `xml:"moveType"`
0000000000000000000000000000000000000000;;		VmName   string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveFaultToleranceVm"] = reflect.TypeOf((*CannotMoveFaultToleranceVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveFaultToleranceVmFault CannotMoveFaultToleranceVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveFaultToleranceVmFault"] = reflect.TypeOf((*CannotMoveFaultToleranceVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveHostWithFaultToleranceVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveHostWithFaultToleranceVm"] = reflect.TypeOf((*CannotMoveHostWithFaultToleranceVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveHostWithFaultToleranceVmFault CannotMoveHostWithFaultToleranceVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveHostWithFaultToleranceVmFault"] = reflect.TypeOf((*CannotMoveHostWithFaultToleranceVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveVmWithDeltaDisk struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveVmWithDeltaDisk"] = reflect.TypeOf((*CannotMoveVmWithDeltaDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveVmWithDeltaDiskFault CannotMoveVmWithDeltaDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveVmWithDeltaDiskFault"] = reflect.TypeOf((*CannotMoveVmWithDeltaDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveVmWithNativeDeltaDisk struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveVmWithNativeDeltaDisk"] = reflect.TypeOf((*CannotMoveVmWithNativeDeltaDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveVmWithNativeDeltaDiskFault CannotMoveVmWithNativeDeltaDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveVmWithNativeDeltaDiskFault"] = reflect.TypeOf((*CannotMoveVmWithNativeDeltaDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveVsanEnabledHost struct {
0000000000000000000000000000000000000000;;		VsanFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveVsanEnabledHost"] = reflect.TypeOf((*CannotMoveVsanEnabledHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotMoveVsanEnabledHostFault BaseCannotMoveVsanEnabledHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotMoveVsanEnabledHostFault"] = reflect.TypeOf((*CannotMoveVsanEnabledHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotPlaceWithoutPrerequisiteMoves struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotPlaceWithoutPrerequisiteMoves"] = reflect.TypeOf((*CannotPlaceWithoutPrerequisiteMoves)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotPlaceWithoutPrerequisiteMovesFault CannotPlaceWithoutPrerequisiteMoves
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotPlaceWithoutPrerequisiteMovesFault"] = reflect.TypeOf((*CannotPlaceWithoutPrerequisiteMovesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotPowerOffVmInCluster struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation string                 `xml:"operation"`
0000000000000000000000000000000000000000;;		Vm        ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName    string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotPowerOffVmInCluster"] = reflect.TypeOf((*CannotPowerOffVmInCluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotPowerOffVmInClusterFault CannotPowerOffVmInCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotPowerOffVmInClusterFault"] = reflect.TypeOf((*CannotPowerOffVmInClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotReconfigureVsanWhenHaEnabled struct {
0000000000000000000000000000000000000000;;		VsanFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotReconfigureVsanWhenHaEnabled"] = reflect.TypeOf((*CannotReconfigureVsanWhenHaEnabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotReconfigureVsanWhenHaEnabledFault CannotReconfigureVsanWhenHaEnabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotReconfigureVsanWhenHaEnabledFault"] = reflect.TypeOf((*CannotReconfigureVsanWhenHaEnabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotUseNetwork struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device    string                  `xml:"device"`
0000000000000000000000000000000000000000;;		Backing   string                  `xml:"backing"`
0000000000000000000000000000000000000000;;		Connected bool                    `xml:"connected"`
0000000000000000000000000000000000000000;;		Reason    string                  `xml:"reason"`
0000000000000000000000000000000000000000;;		Network   *ManagedObjectReference `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotUseNetwork"] = reflect.TypeOf((*CannotUseNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CannotUseNetworkFault CannotUseNetwork
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CannotUseNetworkFault"] = reflect.TypeOf((*CannotUseNetworkFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Capability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProvisioningSupported            bool      `xml:"provisioningSupported"`
0000000000000000000000000000000000000000;;		MultiHostSupported               bool      `xml:"multiHostSupported"`
0000000000000000000000000000000000000000;;		UserShellAccessSupported         bool      `xml:"userShellAccessSupported"`
0000000000000000000000000000000000000000;;		SupportedEVCMode                 []EVCMode `xml:"supportedEVCMode,omitempty"`
0000000000000000000000000000000000000000;;		NetworkBackupAndRestoreSupported *bool     `xml:"networkBackupAndRestoreSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Capability"] = reflect.TypeOf((*Capability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRefreshCACertificatesAndCRLsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertMgrRefreshCACertificatesAndCRLsRequestType"] = reflect.TypeOf((*CertMgrRefreshCACertificatesAndCRLsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRefreshCACertificatesAndCRLs_Task CertMgrRefreshCACertificatesAndCRLsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertMgrRefreshCACertificatesAndCRLs_Task"] = reflect.TypeOf((*CertMgrRefreshCACertificatesAndCRLs_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRefreshCACertificatesAndCRLs_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRefreshCertificatesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertMgrRefreshCertificatesRequestType"] = reflect.TypeOf((*CertMgrRefreshCertificatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRefreshCertificates_Task CertMgrRefreshCertificatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertMgrRefreshCertificates_Task"] = reflect.TypeOf((*CertMgrRefreshCertificates_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRefreshCertificates_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRevokeCertificatesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertMgrRevokeCertificatesRequestType"] = reflect.TypeOf((*CertMgrRevokeCertificatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRevokeCertificates_Task CertMgrRevokeCertificatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertMgrRevokeCertificates_Task"] = reflect.TypeOf((*CertMgrRevokeCertificates_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertMgrRevokeCertificates_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeAccessMode ChangeAccessModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeAccessMode"] = reflect.TypeOf((*ChangeAccessMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeAccessModeRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Principal  string                 `xml:"principal"`
0000000000000000000000000000000000000000;;		IsGroup    bool                   `xml:"isGroup"`
0000000000000000000000000000000000000000;;		AccessMode HostAccessMode         `xml:"accessMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeAccessModeRequestType"] = reflect.TypeOf((*ChangeAccessModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeAccessModeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeFileAttributesInGuest ChangeFileAttributesInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeFileAttributesInGuest"] = reflect.TypeOf((*ChangeFileAttributesInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeFileAttributesInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm             ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth           BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		GuestFilePath  string                  `xml:"guestFilePath"`
0000000000000000000000000000000000000000;;		FileAttributes BaseGuestFileAttributes `xml:"fileAttributes,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeFileAttributesInGuestRequestType"] = reflect.TypeOf((*ChangeFileAttributesInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeFileAttributesInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeLockdownMode ChangeLockdownModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeLockdownMode"] = reflect.TypeOf((*ChangeLockdownMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeLockdownModeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Mode HostLockdownMode       `xml:"mode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeLockdownModeRequestType"] = reflect.TypeOf((*ChangeLockdownModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeLockdownModeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeNFSUserPassword ChangeNFSUserPasswordRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeNFSUserPassword"] = reflect.TypeOf((*ChangeNFSUserPassword)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeNFSUserPasswordRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Password string                 `xml:"password"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeNFSUserPasswordRequestType"] = reflect.TypeOf((*ChangeNFSUserPasswordRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeNFSUserPasswordResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeOwner ChangeOwnerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeOwner"] = reflect.TypeOf((*ChangeOwner)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeOwnerRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Owner      string                  `xml:"owner"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangeOwnerRequestType"] = reflect.TypeOf((*ChangeOwnerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeOwnerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangesInfoEventArgument struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Modified string `xml:"modified,omitempty"`
0000000000000000000000000000000000000000;;		Added    string `xml:"added,omitempty"`
0000000000000000000000000000000000000000;;		Deleted  string `xml:"deleted,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChangesInfoEventArgument"] = reflect.TypeOf((*ChangesInfoEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckAddHostEvcRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CnxSpec HostConnectSpec        `xml:"cnxSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckAddHostEvcRequestType"] = reflect.TypeOf((*CheckAddHostEvcRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckAddHostEvc_Task CheckAddHostEvcRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckAddHostEvc_Task"] = reflect.TypeOf((*CheckAddHostEvc_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckAddHostEvc_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckAnswerFileStatusRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckAnswerFileStatusRequestType"] = reflect.TypeOf((*CheckAnswerFileStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckAnswerFileStatus_Task CheckAnswerFileStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckAnswerFileStatus_Task"] = reflect.TypeOf((*CheckAnswerFileStatus_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckAnswerFileStatus_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCompatibilityRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm       ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Host     *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Pool     *ManagedObjectReference `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;		TestType []string                `xml:"testType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCompatibilityRequestType"] = reflect.TypeOf((*CheckCompatibilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCompatibility_Task CheckCompatibilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCompatibility_Task"] = reflect.TypeOf((*CheckCompatibility_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCompatibility_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckComplianceRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Profile []ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;		Entity  []ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckComplianceRequestType"] = reflect.TypeOf((*CheckComplianceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCompliance_Task CheckComplianceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCompliance_Task"] = reflect.TypeOf((*CheckCompliance_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCompliance_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckConfigureEvcModeRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EvcModeKey string                 `xml:"evcModeKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckConfigureEvcModeRequestType"] = reflect.TypeOf((*CheckConfigureEvcModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckConfigureEvcMode_Task CheckConfigureEvcModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckConfigureEvcMode_Task"] = reflect.TypeOf((*CheckConfigureEvcMode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckConfigureEvcMode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCustomizationResources CheckCustomizationResourcesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCustomizationResources"] = reflect.TypeOf((*CheckCustomizationResources)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCustomizationResourcesRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		GuestOs string                 `xml:"guestOs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCustomizationResourcesRequestType"] = reflect.TypeOf((*CheckCustomizationResourcesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCustomizationResourcesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCustomizationSpec CheckCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCustomizationSpec"] = reflect.TypeOf((*CheckCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec CustomizationSpec      `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckCustomizationSpecRequestType"] = reflect.TypeOf((*CheckCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckForUpdates CheckForUpdatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckForUpdates"] = reflect.TypeOf((*CheckForUpdates)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckForUpdatesRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Version string                 `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckForUpdatesRequestType"] = reflect.TypeOf((*CheckForUpdatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckForUpdatesResponse struct {
0000000000000000000000000000000000000000;;		Returnval *UpdateSet `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckHostPatchRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference                     `xml:"_this"`
0000000000000000000000000000000000000000;;		MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
0000000000000000000000000000000000000000;;		BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
0000000000000000000000000000000000000000;;		Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckHostPatchRequestType"] = reflect.TypeOf((*CheckHostPatchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckHostPatch_Task CheckHostPatchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckHostPatch_Task"] = reflect.TypeOf((*CheckHostPatch_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckHostPatch_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckLicenseFeature CheckLicenseFeatureRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckLicenseFeature"] = reflect.TypeOf((*CheckLicenseFeature)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckLicenseFeatureRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host       *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		FeatureKey string                  `xml:"featureKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckLicenseFeatureRequestType"] = reflect.TypeOf((*CheckLicenseFeatureRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckLicenseFeatureResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckMigrateRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm       ManagedObjectReference   `xml:"vm"`
0000000000000000000000000000000000000000;;		Host     *ManagedObjectReference  `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Pool     *ManagedObjectReference  `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;		State    VirtualMachinePowerState `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		TestType []string                 `xml:"testType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckMigrateRequestType"] = reflect.TypeOf((*CheckMigrateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckMigrate_Task CheckMigrateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckMigrate_Task"] = reflect.TypeOf((*CheckMigrate_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckMigrate_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckProfileComplianceRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckProfileComplianceRequestType"] = reflect.TypeOf((*CheckProfileComplianceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckProfileCompliance_Task CheckProfileComplianceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckProfileCompliance_Task"] = reflect.TypeOf((*CheckProfileCompliance_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckProfileCompliance_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckRelocateRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm       ManagedObjectReference     `xml:"vm"`
0000000000000000000000000000000000000000;;		Spec     VirtualMachineRelocateSpec `xml:"spec"`
0000000000000000000000000000000000000000;;		TestType []string                   `xml:"testType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckRelocateRequestType"] = reflect.TypeOf((*CheckRelocateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckRelocate_Task CheckRelocateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckRelocate_Task"] = reflect.TypeOf((*CheckRelocate_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckRelocate_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CheckResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm      *ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Host    *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Warning []LocalizedMethodFault  `xml:"warning,omitempty"`
0000000000000000000000000000000000000000;;		Error   []LocalizedMethodFault  `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CheckResult"] = reflect.TypeOf((*CheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChoiceOption struct {
0000000000000000000000000000000000000000;;		OptionType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChoiceInfo   []BaseElementDescription `xml:"choiceInfo,typeattr"`
0000000000000000000000000000000000000000;;		DefaultIndex int32                    `xml:"defaultIndex,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ChoiceOption"] = reflect.TypeOf((*ChoiceOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearComplianceStatus ClearComplianceStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClearComplianceStatus"] = reflect.TypeOf((*ClearComplianceStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearComplianceStatusRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Profile []ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;		Entity  []ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClearComplianceStatusRequestType"] = reflect.TypeOf((*ClearComplianceStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearComplianceStatusResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearNFSUser ClearNFSUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClearNFSUser"] = reflect.TypeOf((*ClearNFSUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearNFSUserRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClearNFSUserRequestType"] = reflect.TypeOf((*ClearNFSUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearNFSUserResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearSystemEventLog ClearSystemEventLogRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClearSystemEventLog"] = reflect.TypeOf((*ClearSystemEventLog)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearSystemEventLogRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClearSystemEventLogRequestType"] = reflect.TypeOf((*ClearSystemEventLogRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClearSystemEventLogResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClockSkew struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClockSkew"] = reflect.TypeOf((*ClockSkew)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClockSkewFault ClockSkew
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClockSkewFault"] = reflect.TypeOf((*ClockSkewFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneFromSnapshotNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneFromSnapshotNotSupported"] = reflect.TypeOf((*CloneFromSnapshotNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneFromSnapshotNotSupportedFault CloneFromSnapshotNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneFromSnapshotNotSupportedFault"] = reflect.TypeOf((*CloneFromSnapshotNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneSession CloneSessionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneSession"] = reflect.TypeOf((*CloneSession)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneSessionRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CloneTicket string                 `xml:"cloneTicket"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneSessionRequestType"] = reflect.TypeOf((*CloneSessionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneSessionResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVAppRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name   string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Target ManagedObjectReference `xml:"target"`
0000000000000000000000000000000000000000;;		Spec   VAppCloneSpec          `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneVAppRequestType"] = reflect.TypeOf((*CloneVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVApp_Task CloneVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneVApp_Task"] = reflect.TypeOf((*CloneVApp_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVApp_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVMRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Folder ManagedObjectReference  `xml:"folder"`
0000000000000000000000000000000000000000;;		Name   string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Spec   VirtualMachineCloneSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneVMRequestType"] = reflect.TypeOf((*CloneVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVM_Task CloneVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneVM_Task"] = reflect.TypeOf((*CloneVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      VslmCloneSpec          `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneVStorageObjectRequestType"] = reflect.TypeOf((*CloneVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVStorageObject_Task CloneVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloneVStorageObject_Task"] = reflect.TypeOf((*CloneVStorageObject_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloneVStorageObject_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloseInventoryViewFolder CloseInventoryViewFolderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloseInventoryViewFolder"] = reflect.TypeOf((*CloseInventoryViewFolder)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloseInventoryViewFolderRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CloseInventoryViewFolderRequestType"] = reflect.TypeOf((*CloseInventoryViewFolderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloseInventoryViewFolderResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterAction struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type   string                  `xml:"type"`
0000000000000000000000000000000000000000;;		Target *ManagedObjectReference `xml:"target,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterAction"] = reflect.TypeOf((*ClusterAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterActionHistory struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Action BaseClusterAction `xml:"action,typeattr"`
0000000000000000000000000000000000000000;;		Time   time.Time         `xml:"time"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterActionHistory"] = reflect.TypeOf((*ClusterActionHistory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterAffinityRuleSpec struct {
0000000000000000000000000000000000000000;;		ClusterRuleInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm []ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterAffinityRuleSpec"] = reflect.TypeOf((*ClusterAffinityRuleSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterAntiAffinityRuleSpec struct {
0000000000000000000000000000000000000000;;		ClusterRuleInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm []ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterAntiAffinityRuleSpec"] = reflect.TypeOf((*ClusterAntiAffinityRuleSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterAttemptedVmInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Task *ManagedObjectReference `xml:"task,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterAttemptedVmInfo"] = reflect.TypeOf((*ClusterAttemptedVmInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterComplianceCheckedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile ProfileEventArgument `xml:"profile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterComplianceCheckedEvent"] = reflect.TypeOf((*ClusterComplianceCheckedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterComputeResourceSummary struct {
0000000000000000000000000000000000000000;;		ComputeResourceSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentFailoverLevel int32                              `xml:"currentFailoverLevel"`
0000000000000000000000000000000000000000;;		AdmissionControlInfo BaseClusterDasAdmissionControlInfo `xml:"admissionControlInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		NumVmotions          int32                              `xml:"numVmotions"`
0000000000000000000000000000000000000000;;		TargetBalance        int32                              `xml:"targetBalance,omitempty"`
0000000000000000000000000000000000000000;;		CurrentBalance       int32                              `xml:"currentBalance,omitempty"`
0000000000000000000000000000000000000000;;		UsageSummary         *ClusterUsageSummary               `xml:"usageSummary,omitempty"`
0000000000000000000000000000000000000000;;		CurrentEVCModeKey    string                             `xml:"currentEVCModeKey,omitempty"`
0000000000000000000000000000000000000000;;		DasData              BaseClusterDasData                 `xml:"dasData,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterComputeResourceSummary"] = reflect.TypeOf((*ClusterComputeResourceSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DasConfig   ClusterDasConfigInfo     `xml:"dasConfig"`
0000000000000000000000000000000000000000;;		DasVmConfig []ClusterDasVmConfigInfo `xml:"dasVmConfig,omitempty"`
0000000000000000000000000000000000000000;;		DrsConfig   ClusterDrsConfigInfo     `xml:"drsConfig"`
0000000000000000000000000000000000000000;;		DrsVmConfig []ClusterDrsVmConfigInfo `xml:"drsVmConfig,omitempty"`
0000000000000000000000000000000000000000;;		Rule        []BaseClusterRuleInfo    `xml:"rule,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterConfigInfo"] = reflect.TypeOf((*ClusterConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterConfigInfoEx struct {
0000000000000000000000000000000000000000;;		ComputeResourceConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DasConfig           ClusterDasConfigInfo            `xml:"dasConfig"`
0000000000000000000000000000000000000000;;		DasVmConfig         []ClusterDasVmConfigInfo        `xml:"dasVmConfig,omitempty"`
0000000000000000000000000000000000000000;;		DrsConfig           ClusterDrsConfigInfo            `xml:"drsConfig"`
0000000000000000000000000000000000000000;;		DrsVmConfig         []ClusterDrsVmConfigInfo        `xml:"drsVmConfig,omitempty"`
0000000000000000000000000000000000000000;;		Rule                []BaseClusterRuleInfo           `xml:"rule,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Orchestration       *ClusterOrchestrationInfo       `xml:"orchestration,omitempty"`
0000000000000000000000000000000000000000;;		VmOrchestration     []ClusterVmOrchestrationInfo    `xml:"vmOrchestration,omitempty"`
0000000000000000000000000000000000000000;;		DpmConfigInfo       *ClusterDpmConfigInfo           `xml:"dpmConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;		DpmHostConfig       []ClusterDpmHostConfigInfo      `xml:"dpmHostConfig,omitempty"`
0000000000000000000000000000000000000000;;		VsanConfigInfo      *VsanClusterConfigInfo          `xml:"vsanConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;		VsanHostConfig      []VsanHostConfigInfo            `xml:"vsanHostConfig,omitempty"`
0000000000000000000000000000000000000000;;		Group               []BaseClusterGroupInfo          `xml:"group,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		InfraUpdateHaConfig *ClusterInfraUpdateHaConfigInfo `xml:"infraUpdateHaConfig,omitempty"`
0000000000000000000000000000000000000000;;		ProactiveDrsConfig  *ClusterProactiveDrsConfigInfo  `xml:"proactiveDrsConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterConfigInfoEx"] = reflect.TypeOf((*ClusterConfigInfoEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DasConfig       *ClusterDasConfigInfo    `xml:"dasConfig,omitempty"`
0000000000000000000000000000000000000000;;		DasVmConfigSpec []ClusterDasVmConfigSpec `xml:"dasVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		DrsConfig       *ClusterDrsConfigInfo    `xml:"drsConfig,omitempty"`
0000000000000000000000000000000000000000;;		DrsVmConfigSpec []ClusterDrsVmConfigSpec `xml:"drsVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		RulesSpec       []ClusterRuleSpec        `xml:"rulesSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterConfigSpec"] = reflect.TypeOf((*ClusterConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterConfigSpecEx struct {
0000000000000000000000000000000000000000;;		ComputeResourceConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DasConfig           *ClusterDasConfigInfo           `xml:"dasConfig,omitempty"`
0000000000000000000000000000000000000000;;		DasVmConfigSpec     []ClusterDasVmConfigSpec        `xml:"dasVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		DrsConfig           *ClusterDrsConfigInfo           `xml:"drsConfig,omitempty"`
0000000000000000000000000000000000000000;;		DrsVmConfigSpec     []ClusterDrsVmConfigSpec        `xml:"drsVmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		RulesSpec           []ClusterRuleSpec               `xml:"rulesSpec,omitempty"`
0000000000000000000000000000000000000000;;		Orchestration       *ClusterOrchestrationInfo       `xml:"orchestration,omitempty"`
0000000000000000000000000000000000000000;;		VmOrchestrationSpec []ClusterVmOrchestrationSpec    `xml:"vmOrchestrationSpec,omitempty"`
0000000000000000000000000000000000000000;;		DpmConfig           *ClusterDpmConfigInfo           `xml:"dpmConfig,omitempty"`
0000000000000000000000000000000000000000;;		DpmHostConfigSpec   []ClusterDpmHostConfigSpec      `xml:"dpmHostConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		VsanConfig          *VsanClusterConfigInfo          `xml:"vsanConfig,omitempty"`
0000000000000000000000000000000000000000;;		VsanHostConfigSpec  []VsanHostConfigInfo            `xml:"vsanHostConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		GroupSpec           []ClusterGroupSpec              `xml:"groupSpec,omitempty"`
0000000000000000000000000000000000000000;;		InfraUpdateHaConfig *ClusterInfraUpdateHaConfigInfo `xml:"infraUpdateHaConfig,omitempty"`
0000000000000000000000000000000000000000;;		ProactiveDrsConfig  *ClusterProactiveDrsConfigInfo  `xml:"proactiveDrsConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterConfigSpecEx"] = reflect.TypeOf((*ClusterConfigSpecEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterCreatedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent FolderEventArgument `xml:"parent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterCreatedEvent"] = reflect.TypeOf((*ClusterCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasAamHostInfo struct {
0000000000000000000000000000000000000000;;		ClusterDasHostInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostDasState []ClusterDasAamNodeState `xml:"hostDasState,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryHosts []string                 `xml:"primaryHosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasAamHostInfo"] = reflect.TypeOf((*ClusterDasAamHostInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasAamNodeState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host         ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Name         string                 `xml:"name"`
0000000000000000000000000000000000000000;;		ConfigState  string                 `xml:"configState"`
0000000000000000000000000000000000000000;;		RuntimeState string                 `xml:"runtimeState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasAamNodeState"] = reflect.TypeOf((*ClusterDasAamNodeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasAdmissionControlInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasAdmissionControlInfo"] = reflect.TypeOf((*ClusterDasAdmissionControlInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasAdmissionControlPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceReductionToToleratePercent int32 `xml:"resourceReductionToToleratePercent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasAdmissionControlPolicy"] = reflect.TypeOf((*ClusterDasAdmissionControlPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasAdvancedRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DasHostInfo            BaseClusterDasHostInfo                           `xml:"dasHostInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		VmcpSupported          *ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo `xml:"vmcpSupported,omitempty"`
0000000000000000000000000000000000000000;;		HeartbeatDatastoreInfo []DasHeartbeatDatastoreInfo                      `xml:"heartbeatDatastoreInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasAdvancedRuntimeInfo"] = reflect.TypeOf((*ClusterDasAdvancedRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageAPDSupported bool `xml:"storageAPDSupported"`
0000000000000000000000000000000000000000;;		StoragePDLSupported bool `xml:"storagePDLSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo"] = reflect.TypeOf((*ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled                    *bool                                `xml:"enabled"`
0000000000000000000000000000000000000000;;		VmMonitoring               string                               `xml:"vmMonitoring,omitempty"`
0000000000000000000000000000000000000000;;		HostMonitoring             string                               `xml:"hostMonitoring,omitempty"`
0000000000000000000000000000000000000000;;		VmComponentProtecting      string                               `xml:"vmComponentProtecting,omitempty"`
0000000000000000000000000000000000000000;;		FailoverLevel              int32                                `xml:"failoverLevel,omitempty"`
0000000000000000000000000000000000000000;;		AdmissionControlPolicy     BaseClusterDasAdmissionControlPolicy `xml:"admissionControlPolicy,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		AdmissionControlEnabled    *bool                                `xml:"admissionControlEnabled"`
0000000000000000000000000000000000000000;;		DefaultVmSettings          *ClusterDasVmSettings                `xml:"defaultVmSettings,omitempty"`
0000000000000000000000000000000000000000;;		Option                     []BaseOptionValue                    `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		HeartbeatDatastore         []ManagedObjectReference             `xml:"heartbeatDatastore,omitempty"`
0000000000000000000000000000000000000000;;		HBDatastoreCandidatePolicy string                               `xml:"hBDatastoreCandidatePolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasConfigInfo"] = reflect.TypeOf((*ClusterDasConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasData struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasData"] = reflect.TypeOf((*ClusterDasData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasDataSummary struct {
0000000000000000000000000000000000000000;;		ClusterDasData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostListVersion      int64 `xml:"hostListVersion"`
0000000000000000000000000000000000000000;;		ClusterConfigVersion int64 `xml:"clusterConfigVersion"`
0000000000000000000000000000000000000000;;		CompatListVersion    int64 `xml:"compatListVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasDataSummary"] = reflect.TypeOf((*ClusterDasDataSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasFailoverLevelAdvancedRuntimeInfo struct {
0000000000000000000000000000000000000000;;		ClusterDasAdvancedRuntimeInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SlotInfo                  ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo    `xml:"slotInfo"`
0000000000000000000000000000000000000000;;		TotalSlots                int32                                                 `xml:"totalSlots"`
0000000000000000000000000000000000000000;;		UsedSlots                 int32                                                 `xml:"usedSlots"`
0000000000000000000000000000000000000000;;		UnreservedSlots           int32                                                 `xml:"unreservedSlots"`
0000000000000000000000000000000000000000;;		TotalVms                  int32                                                 `xml:"totalVms"`
0000000000000000000000000000000000000000;;		TotalHosts                int32                                                 `xml:"totalHosts"`
0000000000000000000000000000000000000000;;		TotalGoodHosts            int32                                                 `xml:"totalGoodHosts"`
0000000000000000000000000000000000000000;;		HostSlots                 []ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots `xml:"hostSlots,omitempty"`
0000000000000000000000000000000000000000;;		VmsRequiringMultipleSlots []ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots   `xml:"vmsRequiringMultipleSlots,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasFailoverLevelAdvancedRuntimeInfo"] = reflect.TypeOf((*ClusterDasFailoverLevelAdvancedRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Slots int32                  `xml:"slots"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots"] = reflect.TypeOf((*ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumVcpus int32 `xml:"numVcpus"`
0000000000000000000000000000000000000000;;		CpuMHz   int32 `xml:"cpuMHz"`
0000000000000000000000000000000000000000;;		MemoryMB int32 `xml:"memoryMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"] = reflect.TypeOf((*ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm    ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		Slots int32                  `xml:"slots"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots"] = reflect.TypeOf((*ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasFdmHostState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State         string                  `xml:"state"`
0000000000000000000000000000000000000000;;		StateReporter *ManagedObjectReference `xml:"stateReporter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasFdmHostState"] = reflect.TypeOf((*ClusterDasFdmHostState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasHostInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasHostInfo"] = reflect.TypeOf((*ClusterDasHostInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasHostRecommendation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host      ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		DrsRating int32                  `xml:"drsRating,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasHostRecommendation"] = reflect.TypeOf((*ClusterDasHostRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasVmConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                 ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		RestartPriority     DasVmPriority          `xml:"restartPriority,omitempty"`
0000000000000000000000000000000000000000;;		PowerOffOnIsolation *bool                  `xml:"powerOffOnIsolation"`
0000000000000000000000000000000000000000;;		DasSettings         *ClusterDasVmSettings  `xml:"dasSettings,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasVmConfigInfo"] = reflect.TypeOf((*ClusterDasVmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasVmConfigSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *ClusterDasVmConfigInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasVmConfigSpec"] = reflect.TypeOf((*ClusterDasVmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDasVmSettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RestartPriority               string                                `xml:"restartPriority,omitempty"`
0000000000000000000000000000000000000000;;		RestartPriorityTimeout        int32                                 `xml:"restartPriorityTimeout,omitempty"`
0000000000000000000000000000000000000000;;		IsolationResponse             string                                `xml:"isolationResponse,omitempty"`
0000000000000000000000000000000000000000;;		VmToolsMonitoringSettings     *ClusterVmToolsMonitoringSettings     `xml:"vmToolsMonitoringSettings,omitempty"`
0000000000000000000000000000000000000000;;		VmComponentProtectionSettings *ClusterVmComponentProtectionSettings `xml:"vmComponentProtectionSettings,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDasVmSettings"] = reflect.TypeOf((*ClusterDasVmSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDependencyRuleInfo struct {
0000000000000000000000000000000000000000;;		ClusterRuleInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmGroup          string `xml:"vmGroup"`
0000000000000000000000000000000000000000;;		DependsOnVmGroup string `xml:"dependsOnVmGroup"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDependencyRuleInfo"] = reflect.TypeOf((*ClusterDependencyRuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDestroyedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDestroyedEvent"] = reflect.TypeOf((*ClusterDestroyedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDpmConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled             *bool             `xml:"enabled"`
0000000000000000000000000000000000000000;;		DefaultDpmBehavior  DpmBehavior       `xml:"defaultDpmBehavior,omitempty"`
0000000000000000000000000000000000000000;;		HostPowerActionRate int32             `xml:"hostPowerActionRate,omitempty"`
0000000000000000000000000000000000000000;;		Option              []BaseOptionValue `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDpmConfigInfo"] = reflect.TypeOf((*ClusterDpmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDpmHostConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		Enabled  *bool                  `xml:"enabled"`
0000000000000000000000000000000000000000;;		Behavior DpmBehavior            `xml:"behavior,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDpmHostConfigInfo"] = reflect.TypeOf((*ClusterDpmHostConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDpmHostConfigSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *ClusterDpmHostConfigInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDpmHostConfigSpec"] = reflect.TypeOf((*ClusterDpmHostConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled                   *bool             `xml:"enabled"`
0000000000000000000000000000000000000000;;		EnableVmBehaviorOverrides *bool             `xml:"enableVmBehaviorOverrides"`
0000000000000000000000000000000000000000;;		DefaultVmBehavior         DrsBehavior       `xml:"defaultVmBehavior,omitempty"`
0000000000000000000000000000000000000000;;		VmotionRate               int32             `xml:"vmotionRate,omitempty"`
0000000000000000000000000000000000000000;;		Option                    []BaseOptionValue `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsConfigInfo"] = reflect.TypeOf((*ClusterDrsConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsFaults struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason     string                           `xml:"reason"`
0000000000000000000000000000000000000000;;		FaultsByVm []BaseClusterDrsFaultsFaultsByVm `xml:"faultsByVm,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsFaults"] = reflect.TypeOf((*ClusterDrsFaults)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsFaultsFaultsByVirtualDisk struct {
0000000000000000000000000000000000000000;;		ClusterDrsFaultsFaultsByVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk *VirtualDiskId `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsFaultsFaultsByVirtualDisk"] = reflect.TypeOf((*ClusterDrsFaultsFaultsByVirtualDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsFaultsFaultsByVm struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm    *ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Fault []LocalizedMethodFault  `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsFaultsFaultsByVm"] = reflect.TypeOf((*ClusterDrsFaultsFaultsByVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsMigration struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                   string                 `xml:"key"`
0000000000000000000000000000000000000000;;		Time                  time.Time              `xml:"time"`
0000000000000000000000000000000000000000;;		Vm                    ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		CpuLoad               int32                  `xml:"cpuLoad,omitempty"`
0000000000000000000000000000000000000000;;		MemoryLoad            int64                  `xml:"memoryLoad,omitempty"`
0000000000000000000000000000000000000000;;		Source                ManagedObjectReference `xml:"source"`
0000000000000000000000000000000000000000;;		SourceCpuLoad         int32                  `xml:"sourceCpuLoad,omitempty"`
0000000000000000000000000000000000000000;;		SourceMemoryLoad      int64                  `xml:"sourceMemoryLoad,omitempty"`
0000000000000000000000000000000000000000;;		Destination           ManagedObjectReference `xml:"destination"`
0000000000000000000000000000000000000000;;		DestinationCpuLoad    int32                  `xml:"destinationCpuLoad,omitempty"`
0000000000000000000000000000000000000000;;		DestinationMemoryLoad int64                  `xml:"destinationMemoryLoad,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsMigration"] = reflect.TypeOf((*ClusterDrsMigration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsRecommendation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string                `xml:"key"`
0000000000000000000000000000000000000000;;		Rating        int32                 `xml:"rating"`
0000000000000000000000000000000000000000;;		Reason        string                `xml:"reason"`
0000000000000000000000000000000000000000;;		ReasonText    string                `xml:"reasonText"`
0000000000000000000000000000000000000000;;		MigrationList []ClusterDrsMigration `xml:"migrationList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsRecommendation"] = reflect.TypeOf((*ClusterDrsRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsVmConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		Enabled  *bool                  `xml:"enabled"`
0000000000000000000000000000000000000000;;		Behavior DrsBehavior            `xml:"behavior,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsVmConfigInfo"] = reflect.TypeOf((*ClusterDrsVmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterDrsVmConfigSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *ClusterDrsVmConfigInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterDrsVmConfigSpec"] = reflect.TypeOf((*ClusterDrsVmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEVCManagerCheckResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EvcModeKey string                   `xml:"evcModeKey"`
0000000000000000000000000000000000000000;;		Error      LocalizedMethodFault     `xml:"error"`
0000000000000000000000000000000000000000;;		Host       []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEVCManagerCheckResult"] = reflect.TypeOf((*ClusterEVCManagerCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEVCManagerEVCState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SupportedEVCMode      []EVCMode                          `xml:"supportedEVCMode"`
0000000000000000000000000000000000000000;;		CurrentEVCModeKey     string                             `xml:"currentEVCModeKey,omitempty"`
0000000000000000000000000000000000000000;;		GuaranteedCPUFeatures []HostCpuIdInfo                    `xml:"guaranteedCPUFeatures,omitempty"`
0000000000000000000000000000000000000000;;		FeatureCapability     []HostFeatureCapability            `xml:"featureCapability,omitempty"`
0000000000000000000000000000000000000000;;		FeatureMask           []HostFeatureMask                  `xml:"featureMask,omitempty"`
0000000000000000000000000000000000000000;;		FeatureRequirement    []VirtualMachineFeatureRequirement `xml:"featureRequirement,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEVCManagerEVCState"] = reflect.TypeOf((*ClusterEVCManagerEVCState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEnterMaintenanceMode ClusterEnterMaintenanceModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEnterMaintenanceMode"] = reflect.TypeOf((*ClusterEnterMaintenanceMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEnterMaintenanceModeRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host   []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Option []BaseOptionValue        `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEnterMaintenanceModeRequestType"] = reflect.TypeOf((*ClusterEnterMaintenanceModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEnterMaintenanceModeResponse struct {
0000000000000000000000000000000000000000;;		Returnval ClusterEnterMaintenanceResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEnterMaintenanceResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Recommendations []ClusterRecommendation `xml:"recommendations,omitempty"`
0000000000000000000000000000000000000000;;		Fault           *ClusterDrsFaults       `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEnterMaintenanceResult"] = reflect.TypeOf((*ClusterEnterMaintenanceResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEvent"] = reflect.TypeOf((*ClusterEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverHostAdmissionControlInfo struct {
0000000000000000000000000000000000000000;;		ClusterDasAdmissionControlInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostStatus []ClusterFailoverHostAdmissionControlInfoHostStatus `xml:"hostStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverHostAdmissionControlInfo"] = reflect.TypeOf((*ClusterFailoverHostAdmissionControlInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverHostAdmissionControlInfoHostStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host   ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Status ManagedEntityStatus    `xml:"status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverHostAdmissionControlInfoHostStatus"] = reflect.TypeOf((*ClusterFailoverHostAdmissionControlInfoHostStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverHostAdmissionControlPolicy struct {
0000000000000000000000000000000000000000;;		ClusterDasAdmissionControlPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailoverHosts []ManagedObjectReference `xml:"failoverHosts,omitempty"`
0000000000000000000000000000000000000000;;		FailoverLevel int32                    `xml:"failoverLevel,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverHostAdmissionControlPolicy"] = reflect.TypeOf((*ClusterFailoverHostAdmissionControlPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverLevelAdmissionControlInfo struct {
0000000000000000000000000000000000000000;;		ClusterDasAdmissionControlInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentFailoverLevel int32 `xml:"currentFailoverLevel"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverLevelAdmissionControlInfo"] = reflect.TypeOf((*ClusterFailoverLevelAdmissionControlInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverLevelAdmissionControlPolicy struct {
0000000000000000000000000000000000000000;;		ClusterDasAdmissionControlPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailoverLevel int32                 `xml:"failoverLevel"`
0000000000000000000000000000000000000000;;		SlotPolicy    BaseClusterSlotPolicy `xml:"slotPolicy,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverLevelAdmissionControlPolicy"] = reflect.TypeOf((*ClusterFailoverLevelAdmissionControlPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverResourcesAdmissionControlInfo struct {
0000000000000000000000000000000000000000;;		ClusterDasAdmissionControlInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentCpuFailoverResourcesPercent    int32 `xml:"currentCpuFailoverResourcesPercent"`
0000000000000000000000000000000000000000;;		CurrentMemoryFailoverResourcesPercent int32 `xml:"currentMemoryFailoverResourcesPercent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverResourcesAdmissionControlInfo"] = reflect.TypeOf((*ClusterFailoverResourcesAdmissionControlInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFailoverResourcesAdmissionControlPolicy struct {
0000000000000000000000000000000000000000;;		ClusterDasAdmissionControlPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuFailoverResourcesPercent    int32 `xml:"cpuFailoverResourcesPercent"`
0000000000000000000000000000000000000000;;		MemoryFailoverResourcesPercent int32 `xml:"memoryFailoverResourcesPercent"`
0000000000000000000000000000000000000000;;		FailoverLevel                  int32 `xml:"failoverLevel,omitempty"`
0000000000000000000000000000000000000000;;		AutoComputePercentages         *bool `xml:"autoComputePercentages"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFailoverResourcesAdmissionControlPolicy"] = reflect.TypeOf((*ClusterFailoverResourcesAdmissionControlPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterFixedSizeSlotPolicy struct {
0000000000000000000000000000000000000000;;		ClusterSlotPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cpu    int32 `xml:"cpu"`
0000000000000000000000000000000000000000;;		Memory int32 `xml:"memory"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterFixedSizeSlotPolicy"] = reflect.TypeOf((*ClusterFixedSizeSlotPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterGroupInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name        string `xml:"name"`
0000000000000000000000000000000000000000;;		UserCreated *bool  `xml:"userCreated"`
0000000000000000000000000000000000000000;;		UniqueID    string `xml:"uniqueID,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterGroupInfo"] = reflect.TypeOf((*ClusterGroupInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterGroupSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info BaseClusterGroupInfo `xml:"info,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterGroupSpec"] = reflect.TypeOf((*ClusterGroupSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterHostGroup struct {
0000000000000000000000000000000000000000;;		ClusterGroupInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterHostGroup"] = reflect.TypeOf((*ClusterHostGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterHostInfraUpdateHaModeAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OperationType string `xml:"operationType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterHostInfraUpdateHaModeAction"] = reflect.TypeOf((*ClusterHostInfraUpdateHaModeAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterHostPowerAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OperationType        HostPowerOperationType `xml:"operationType"`
0000000000000000000000000000000000000000;;		PowerConsumptionWatt int32                  `xml:"powerConsumptionWatt,omitempty"`
0000000000000000000000000000000000000000;;		CpuCapacityMHz       int32                  `xml:"cpuCapacityMHz,omitempty"`
0000000000000000000000000000000000000000;;		MemCapacityMB        int32                  `xml:"memCapacityMB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterHostPowerAction"] = reflect.TypeOf((*ClusterHostPowerAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterHostRecommendation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host   ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Rating int32                  `xml:"rating"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterHostRecommendation"] = reflect.TypeOf((*ClusterHostRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterInfraUpdateHaConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled             *bool    `xml:"enabled"`
0000000000000000000000000000000000000000;;		Behavior            string   `xml:"behavior,omitempty"`
0000000000000000000000000000000000000000;;		ModerateRemediation string   `xml:"moderateRemediation,omitempty"`
0000000000000000000000000000000000000000;;		SevereRemediation   string   `xml:"severeRemediation,omitempty"`
0000000000000000000000000000000000000000;;		Providers           []string `xml:"providers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterInfraUpdateHaConfigInfo"] = reflect.TypeOf((*ClusterInfraUpdateHaConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterInitialPlacementAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TargetHost ManagedObjectReference  `xml:"targetHost"`
0000000000000000000000000000000000000000;;		Pool       *ManagedObjectReference `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterInitialPlacementAction"] = reflect.TypeOf((*ClusterInitialPlacementAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterIoFilterInfo struct {
0000000000000000000000000000000000000000;;		IoFilterInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpType string `xml:"opType"`
0000000000000000000000000000000000000000;;		VibUrl string `xml:"vibUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterIoFilterInfo"] = reflect.TypeOf((*ClusterIoFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterMigrationAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DrsMigration *ClusterDrsMigration `xml:"drsMigration,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterMigrationAction"] = reflect.TypeOf((*ClusterMigrationAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterNetworkConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkPortGroup ManagedObjectReference  `xml:"networkPortGroup"`
0000000000000000000000000000000000000000;;		IpSettings       CustomizationIPSettings `xml:"ipSettings"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterNetworkConfigSpec"] = reflect.TypeOf((*ClusterNetworkConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterNotAttemptedVmInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm    ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault   `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterNotAttemptedVmInfo"] = reflect.TypeOf((*ClusterNotAttemptedVmInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterOrchestrationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultVmReadiness *ClusterVmReadiness `xml:"defaultVmReadiness,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterOrchestrationInfo"] = reflect.TypeOf((*ClusterOrchestrationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterOvercommittedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterOvercommittedEvent"] = reflect.TypeOf((*ClusterOvercommittedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterPowerOnVmResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Attempted       []ClusterAttemptedVmInfo    `xml:"attempted,omitempty"`
0000000000000000000000000000000000000000;;		NotAttempted    []ClusterNotAttemptedVmInfo `xml:"notAttempted,omitempty"`
0000000000000000000000000000000000000000;;		Recommendations []ClusterRecommendation     `xml:"recommendations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterPowerOnVmResult"] = reflect.TypeOf((*ClusterPowerOnVmResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProactiveDrsConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled *bool `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProactiveDrsConfigInfo"] = reflect.TypeOf((*ClusterProactiveDrsConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfileCompleteConfigSpec struct {
0000000000000000000000000000000000000000;;		ClusterProfileConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComplyProfile *ComplianceProfile `xml:"complyProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfileCompleteConfigSpec"] = reflect.TypeOf((*ClusterProfileCompleteConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfileConfigInfo struct {
0000000000000000000000000000000000000000;;		ProfileConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComplyProfile *ComplianceProfile `xml:"complyProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfileConfigInfo"] = reflect.TypeOf((*ClusterProfileConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfileConfigServiceCreateSpec struct {
0000000000000000000000000000000000000000;;		ClusterProfileConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceType []string `xml:"serviceType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfileConfigServiceCreateSpec"] = reflect.TypeOf((*ClusterProfileConfigServiceCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfileConfigSpec struct {
0000000000000000000000000000000000000000;;		ClusterProfileCreateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfileConfigSpec"] = reflect.TypeOf((*ClusterProfileConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfileCreateSpec struct {
0000000000000000000000000000000000000000;;		ProfileCreateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfileCreateSpec"] = reflect.TypeOf((*ClusterProfileCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterRecommendation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            string                  `xml:"key"`
0000000000000000000000000000000000000000;;		Type           string                  `xml:"type"`
0000000000000000000000000000000000000000;;		Time           time.Time               `xml:"time"`
0000000000000000000000000000000000000000;;		Rating         int32                   `xml:"rating"`
0000000000000000000000000000000000000000;;		Reason         string                  `xml:"reason"`
0000000000000000000000000000000000000000;;		ReasonText     string                  `xml:"reasonText"`
0000000000000000000000000000000000000000;;		WarningText    string                  `xml:"warningText,omitempty"`
0000000000000000000000000000000000000000;;		WarningDetails *LocalizableMessage     `xml:"warningDetails,omitempty"`
0000000000000000000000000000000000000000;;		Prerequisite   []string                `xml:"prerequisite,omitempty"`
0000000000000000000000000000000000000000;;		Action         []BaseClusterAction     `xml:"action,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Target         *ManagedObjectReference `xml:"target,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterRecommendation"] = reflect.TypeOf((*ClusterRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterReconfiguredEvent"] = reflect.TypeOf((*ClusterReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterResourceUsageSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuUsedMHz        int32 `xml:"cpuUsedMHz"`
0000000000000000000000000000000000000000;;		CpuCapacityMHz    int32 `xml:"cpuCapacityMHz"`
0000000000000000000000000000000000000000;;		MemUsedMB         int32 `xml:"memUsedMB"`
0000000000000000000000000000000000000000;;		MemCapacityMB     int32 `xml:"memCapacityMB"`
0000000000000000000000000000000000000000;;		StorageUsedMB     int64 `xml:"storageUsedMB"`
0000000000000000000000000000000000000000;;		StorageCapacityMB int64 `xml:"storageCapacityMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterResourceUsageSummary"] = reflect.TypeOf((*ClusterResourceUsageSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterRuleInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key          int32               `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Status       ManagedEntityStatus `xml:"status,omitempty"`
0000000000000000000000000000000000000000;;		Enabled      *bool               `xml:"enabled"`
0000000000000000000000000000000000000000;;		Name         string              `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Mandatory    *bool               `xml:"mandatory"`
0000000000000000000000000000000000000000;;		UserCreated  *bool               `xml:"userCreated"`
0000000000000000000000000000000000000000;;		InCompliance *bool               `xml:"inCompliance"`
0000000000000000000000000000000000000000;;		RuleUuid     string              `xml:"ruleUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterRuleInfo"] = reflect.TypeOf((*ClusterRuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterRuleSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info BaseClusterRuleInfo `xml:"info,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterRuleSpec"] = reflect.TypeOf((*ClusterRuleSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterSlotPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterSlotPolicy"] = reflect.TypeOf((*ClusterSlotPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterStatusChangedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldStatus string `xml:"oldStatus"`
0000000000000000000000000000000000000000;;		NewStatus string `xml:"newStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterStatusChangedEvent"] = reflect.TypeOf((*ClusterStatusChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterUsageSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TotalCpuCapacityMhz         int32 `xml:"totalCpuCapacityMhz"`
0000000000000000000000000000000000000000;;		TotalMemCapacityMB          int32 `xml:"totalMemCapacityMB"`
0000000000000000000000000000000000000000;;		CpuReservationMhz           int32 `xml:"cpuReservationMhz"`
0000000000000000000000000000000000000000;;		MemReservationMB            int32 `xml:"memReservationMB"`
0000000000000000000000000000000000000000;;		PoweredOffCpuReservationMhz int32 `xml:"poweredOffCpuReservationMhz,omitempty"`
0000000000000000000000000000000000000000;;		PoweredOffMemReservationMB  int32 `xml:"poweredOffMemReservationMB,omitempty"`
0000000000000000000000000000000000000000;;		CpuDemandMhz                int32 `xml:"cpuDemandMhz"`
0000000000000000000000000000000000000000;;		MemDemandMB                 int32 `xml:"memDemandMB"`
0000000000000000000000000000000000000000;;		StatsGenNumber              int64 `xml:"statsGenNumber"`
0000000000000000000000000000000000000000;;		CpuEntitledMhz              int32 `xml:"cpuEntitledMhz"`
0000000000000000000000000000000000000000;;		MemEntitledMB               int32 `xml:"memEntitledMB"`
0000000000000000000000000000000000000000;;		PoweredOffVmCount           int32 `xml:"poweredOffVmCount"`
0000000000000000000000000000000000000000;;		TotalVmCount                int32 `xml:"totalVmCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterUsageSummary"] = reflect.TypeOf((*ClusterUsageSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmComponentProtectionSettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmStorageProtectionForAPD string `xml:"vmStorageProtectionForAPD,omitempty"`
0000000000000000000000000000000000000000;;		EnableAPDTimeoutForHosts  *bool  `xml:"enableAPDTimeoutForHosts"`
0000000000000000000000000000000000000000;;		VmTerminateDelayForAPDSec int32  `xml:"vmTerminateDelayForAPDSec,omitempty"`
0000000000000000000000000000000000000000;;		VmReactionOnAPDCleared    string `xml:"vmReactionOnAPDCleared,omitempty"`
0000000000000000000000000000000000000000;;		VmStorageProtectionForPDL string `xml:"vmStorageProtectionForPDL,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmComponentProtectionSettings"] = reflect.TypeOf((*ClusterVmComponentProtectionSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmGroup struct {
0000000000000000000000000000000000000000;;		ClusterGroupInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm []ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmGroup"] = reflect.TypeOf((*ClusterVmGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmHostRuleInfo struct {
0000000000000000000000000000000000000000;;		ClusterRuleInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmGroupName             string `xml:"vmGroupName,omitempty"`
0000000000000000000000000000000000000000;;		AffineHostGroupName     string `xml:"affineHostGroupName,omitempty"`
0000000000000000000000000000000000000000;;		AntiAffineHostGroupName string `xml:"antiAffineHostGroupName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmHostRuleInfo"] = reflect.TypeOf((*ClusterVmHostRuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmOrchestrationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm          ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmReadiness ClusterVmReadiness     `xml:"vmReadiness"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmOrchestrationInfo"] = reflect.TypeOf((*ClusterVmOrchestrationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmOrchestrationSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *ClusterVmOrchestrationInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmOrchestrationSpec"] = reflect.TypeOf((*ClusterVmOrchestrationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmReadiness struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReadyCondition string `xml:"readyCondition,omitempty"`
0000000000000000000000000000000000000000;;		PostReadyDelay int32  `xml:"postReadyDelay,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmReadiness"] = reflect.TypeOf((*ClusterVmReadiness)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterVmToolsMonitoringSettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled          *bool  `xml:"enabled"`
0000000000000000000000000000000000000000;;		VmMonitoring     string `xml:"vmMonitoring,omitempty"`
0000000000000000000000000000000000000000;;		ClusterSettings  *bool  `xml:"clusterSettings"`
0000000000000000000000000000000000000000;;		FailureInterval  int32  `xml:"failureInterval,omitempty"`
0000000000000000000000000000000000000000;;		MinUpTime        int32  `xml:"minUpTime,omitempty"`
0000000000000000000000000000000000000000;;		MaxFailures      int32  `xml:"maxFailures,omitempty"`
0000000000000000000000000000000000000000;;		MaxFailureWindow int32  `xml:"maxFailureWindow,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterVmToolsMonitoringSettings"] = reflect.TypeOf((*ClusterVmToolsMonitoringSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CollectorAddressUnset struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CollectorAddressUnset"] = reflect.TypeOf((*CollectorAddressUnset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CollectorAddressUnsetFault CollectorAddressUnset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CollectorAddressUnsetFault"] = reflect.TypeOf((*CollectorAddressUnsetFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComplianceFailure struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailureType    string                                     `xml:"failureType"`
0000000000000000000000000000000000000000;;		Message        LocalizableMessage                         `xml:"message"`
0000000000000000000000000000000000000000;;		ExpressionName string                                     `xml:"expressionName,omitempty"`
0000000000000000000000000000000000000000;;		FailureValues  []ComplianceFailureComplianceFailureValues `xml:"failureValues,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComplianceFailure"] = reflect.TypeOf((*ComplianceFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComplianceFailureComplianceFailureValues struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComparisonIdentifier string  `xml:"comparisonIdentifier"`
0000000000000000000000000000000000000000;;		ProfileInstance      string  `xml:"profileInstance,omitempty"`
0000000000000000000000000000000000000000;;		HostValue            AnyType `xml:"hostValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ProfileValue         AnyType `xml:"profileValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComplianceFailureComplianceFailureValues"] = reflect.TypeOf((*ComplianceFailureComplianceFailureValues)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComplianceLocator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExpressionName string              `xml:"expressionName"`
0000000000000000000000000000000000000000;;		ApplyPath      ProfilePropertyPath `xml:"applyPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComplianceLocator"] = reflect.TypeOf((*ComplianceLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComplianceProfile struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expression     []BaseProfileExpression `xml:"expression,typeattr"`
0000000000000000000000000000000000000000;;		RootExpression string                  `xml:"rootExpression"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComplianceProfile"] = reflect.TypeOf((*ComplianceProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComplianceResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile          *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;		ComplianceStatus string                  `xml:"complianceStatus"`
0000000000000000000000000000000000000000;;		Entity           *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		CheckTime        *time.Time              `xml:"checkTime"`
0000000000000000000000000000000000000000;;		Failure          []ComplianceFailure     `xml:"failure,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComplianceResult"] = reflect.TypeOf((*ComplianceResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CompositePolicyOption struct {
0000000000000000000000000000000000000000;;		PolicyOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Option []BasePolicyOption `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CompositePolicyOption"] = reflect.TypeOf((*CompositePolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeDiskPartitionInfo ComputeDiskPartitionInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeDiskPartitionInfo"] = reflect.TypeOf((*ComputeDiskPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeDiskPartitionInfoForResize ComputeDiskPartitionInfoForResizeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeDiskPartitionInfoForResize"] = reflect.TypeOf((*ComputeDiskPartitionInfoForResize)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeDiskPartitionInfoForResizeRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference      `xml:"_this"`
0000000000000000000000000000000000000000;;		Partition       HostScsiDiskPartition       `xml:"partition"`
0000000000000000000000000000000000000000;;		BlockRange      HostDiskPartitionBlockRange `xml:"blockRange"`
0000000000000000000000000000000000000000;;		PartitionFormat string                      `xml:"partitionFormat,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeDiskPartitionInfoForResizeRequestType"] = reflect.TypeOf((*ComputeDiskPartitionInfoForResizeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeDiskPartitionInfoForResizeResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostDiskPartitionInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeDiskPartitionInfoRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		DevicePath      string                  `xml:"devicePath"`
0000000000000000000000000000000000000000;;		Layout          HostDiskPartitionLayout `xml:"layout"`
0000000000000000000000000000000000000000;;		PartitionFormat string                  `xml:"partitionFormat,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeDiskPartitionInfoRequestType"] = reflect.TypeOf((*ComputeDiskPartitionInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeDiskPartitionInfoResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostDiskPartitionInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResourceConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmSwapPlacement           string `xml:"vmSwapPlacement"`
0000000000000000000000000000000000000000;;		SpbmEnabled               *bool  `xml:"spbmEnabled"`
0000000000000000000000000000000000000000;;		DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeResourceConfigInfo"] = reflect.TypeOf((*ComputeResourceConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResourceConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmSwapPlacement           string `xml:"vmSwapPlacement,omitempty"`
0000000000000000000000000000000000000000;;		SpbmEnabled               *bool  `xml:"spbmEnabled"`
0000000000000000000000000000000000000000;;		DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeResourceConfigSpec"] = reflect.TypeOf((*ComputeResourceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResourceEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComputeResource ManagedObjectReference `xml:"computeResource"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeResourceEventArgument"] = reflect.TypeOf((*ComputeResourceEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResourceHostSPBMLicenseInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host         ManagedObjectReference                                 `xml:"host"`
0000000000000000000000000000000000000000;;		LicenseState ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState `xml:"licenseState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeResourceHostSPBMLicenseInfo"] = reflect.TypeOf((*ComputeResourceHostSPBMLicenseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResourceSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TotalCpu          int32               `xml:"totalCpu"`
0000000000000000000000000000000000000000;;		TotalMemory       int64               `xml:"totalMemory"`
0000000000000000000000000000000000000000;;		NumCpuCores       int16               `xml:"numCpuCores"`
0000000000000000000000000000000000000000;;		NumCpuThreads     int16               `xml:"numCpuThreads"`
0000000000000000000000000000000000000000;;		EffectiveCpu      int32               `xml:"effectiveCpu"`
0000000000000000000000000000000000000000;;		EffectiveMemory   int64               `xml:"effectiveMemory"`
0000000000000000000000000000000000000000;;		NumHosts          int32               `xml:"numHosts"`
0000000000000000000000000000000000000000;;		NumEffectiveHosts int32               `xml:"numEffectiveHosts"`
0000000000000000000000000000000000000000;;		OverallStatus     ManagedEntityStatus `xml:"overallStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeResourceSummary"] = reflect.TypeOf((*ComputeResourceSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConcurrentAccess struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConcurrentAccess"] = reflect.TypeOf((*ConcurrentAccess)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConcurrentAccessFault ConcurrentAccess
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConcurrentAccessFault"] = reflect.TypeOf((*ConcurrentAccessFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigTarget struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumCpus                     int32                                       `xml:"numCpus"`
0000000000000000000000000000000000000000;;		NumCpuCores                 int32                                       `xml:"numCpuCores"`
0000000000000000000000000000000000000000;;		NumNumaNodes                int32                                       `xml:"numNumaNodes"`
0000000000000000000000000000000000000000;;		SmcPresent                  *bool                                       `xml:"smcPresent"`
0000000000000000000000000000000000000000;;		Datastore                   []VirtualMachineDatastoreInfo               `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		Network                     []VirtualMachineNetworkInfo                 `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueNetwork               []OpaqueNetworkTargetInfo                   `xml:"opaqueNetwork,omitempty"`
0000000000000000000000000000000000000000;;		DistributedVirtualPortgroup []DistributedVirtualPortgroupInfo           `xml:"distributedVirtualPortgroup,omitempty"`
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch    []DistributedVirtualSwitchInfo              `xml:"distributedVirtualSwitch,omitempty"`
0000000000000000000000000000000000000000;;		CdRom                       []VirtualMachineCdromInfo                   `xml:"cdRom,omitempty"`
0000000000000000000000000000000000000000;;		Serial                      []VirtualMachineSerialInfo                  `xml:"serial,omitempty"`
0000000000000000000000000000000000000000;;		Parallel                    []VirtualMachineParallelInfo                `xml:"parallel,omitempty"`
0000000000000000000000000000000000000000;;		Sound                       []VirtualMachineSoundInfo                   `xml:"sound,omitempty"`
0000000000000000000000000000000000000000;;		Usb                         []VirtualMachineUsbInfo                     `xml:"usb,omitempty"`
0000000000000000000000000000000000000000;;		Floppy                      []VirtualMachineFloppyInfo                  `xml:"floppy,omitempty"`
0000000000000000000000000000000000000000;;		LegacyNetworkInfo           []VirtualMachineLegacyNetworkSwitchInfo     `xml:"legacyNetworkInfo,omitempty"`
0000000000000000000000000000000000000000;;		ScsiPassthrough             []VirtualMachineScsiPassthroughInfo         `xml:"scsiPassthrough,omitempty"`
0000000000000000000000000000000000000000;;		ScsiDisk                    []VirtualMachineScsiDiskDeviceInfo          `xml:"scsiDisk,omitempty"`
0000000000000000000000000000000000000000;;		IdeDisk                     []VirtualMachineIdeDiskDeviceInfo           `xml:"ideDisk,omitempty"`
0000000000000000000000000000000000000000;;		MaxMemMBOptimalPerf         int32                                       `xml:"maxMemMBOptimalPerf"`
0000000000000000000000000000000000000000;;		ResourcePool                *ResourcePoolRuntimeInfo                    `xml:"resourcePool,omitempty"`
0000000000000000000000000000000000000000;;		AutoVmotion                 *bool                                       `xml:"autoVmotion"`
0000000000000000000000000000000000000000;;		PciPassthrough              []BaseVirtualMachinePciPassthroughInfo      `xml:"pciPassthrough,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Sriov                       []VirtualMachineSriovInfo                   `xml:"sriov,omitempty"`
0000000000000000000000000000000000000000;;		VFlashModule                []VirtualMachineVFlashModuleInfo            `xml:"vFlashModule,omitempty"`
0000000000000000000000000000000000000000;;		SharedGpuPassthroughTypes   []VirtualMachinePciSharedGpuPassthroughInfo `xml:"sharedGpuPassthroughTypes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigTarget"] = reflect.TypeOf((*ConfigTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureCryptoKey ConfigureCryptoKeyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureCryptoKey"] = reflect.TypeOf((*ConfigureCryptoKey)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureCryptoKeyRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		KeyId *CryptoKeyId           `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureCryptoKeyRequestType"] = reflect.TypeOf((*ConfigureCryptoKeyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureCryptoKeyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureDatastoreIORMRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      StorageIORMConfigSpec  `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureDatastoreIORMRequestType"] = reflect.TypeOf((*ConfigureDatastoreIORMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureDatastoreIORM_Task ConfigureDatastoreIORMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureDatastoreIORM_Task"] = reflect.TypeOf((*ConfigureDatastoreIORM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureDatastoreIORM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureDatastorePrincipal ConfigureDatastorePrincipalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureDatastorePrincipal"] = reflect.TypeOf((*ConfigureDatastorePrincipal)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureDatastorePrincipalRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		UserName string                 `xml:"userName"`
0000000000000000000000000000000000000000;;		Password string                 `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureDatastorePrincipalRequestType"] = reflect.TypeOf((*ConfigureDatastorePrincipalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureDatastorePrincipalResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureEvcModeRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EvcModeKey string                 `xml:"evcModeKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureEvcModeRequestType"] = reflect.TypeOf((*ConfigureEvcModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureEvcMode_Task ConfigureEvcModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureEvcMode_Task"] = reflect.TypeOf((*ConfigureEvcMode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureEvcMode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureHostCacheRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostCacheConfigurationSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureHostCacheRequestType"] = reflect.TypeOf((*ConfigureHostCacheRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureHostCache_Task ConfigureHostCacheRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureHostCache_Task"] = reflect.TypeOf((*ConfigureHostCache_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureHostCache_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureLicenseSource ConfigureLicenseSourceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureLicenseSource"] = reflect.TypeOf((*ConfigureLicenseSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureLicenseSourceRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host          *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		LicenseSource BaseLicenseSource       `xml:"licenseSource,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureLicenseSourceRequestType"] = reflect.TypeOf((*ConfigureLicenseSourceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureLicenseSourceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigurePowerPolicy ConfigurePowerPolicyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigurePowerPolicy"] = reflect.TypeOf((*ConfigurePowerPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigurePowerPolicyRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  int32                  `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigurePowerPolicyRequestType"] = reflect.TypeOf((*ConfigurePowerPolicyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigurePowerPolicyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureStorageDrsForPodRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Pod    ManagedObjectReference `xml:"pod"`
0000000000000000000000000000000000000000;;		Spec   StorageDrsConfigSpec   `xml:"spec"`
0000000000000000000000000000000000000000;;		Modify bool                   `xml:"modify"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureStorageDrsForPodRequestType"] = reflect.TypeOf((*ConfigureStorageDrsForPodRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureStorageDrsForPod_Task ConfigureStorageDrsForPodRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureStorageDrsForPod_Task"] = reflect.TypeOf((*ConfigureStorageDrsForPod_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureStorageDrsForPod_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureVFlashResourceExRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DevicePath []string               `xml:"devicePath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureVFlashResourceExRequestType"] = reflect.TypeOf((*ConfigureVFlashResourceExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureVFlashResourceEx_Task ConfigureVFlashResourceExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConfigureVFlashResourceEx_Task"] = reflect.TypeOf((*ConfigureVFlashResourceEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureVFlashResourceEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConflictingConfiguration struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigInConflict []ConflictingConfigurationConfig `xml:"configInConflict"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConflictingConfiguration"] = reflect.TypeOf((*ConflictingConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConflictingConfigurationConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity       *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		PropertyPath string                  `xml:"propertyPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConflictingConfigurationConfig"] = reflect.TypeOf((*ConflictingConfigurationConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConflictingConfigurationFault ConflictingConfiguration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConflictingConfigurationFault"] = reflect.TypeOf((*ConflictingConfigurationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConflictingDatastoreFound struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;		Url  string `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConflictingDatastoreFound"] = reflect.TypeOf((*ConflictingDatastoreFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConflictingDatastoreFoundFault ConflictingDatastoreFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConflictingDatastoreFoundFault"] = reflect.TypeOf((*ConflictingDatastoreFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConnectedIso struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cdrom    VirtualCdrom `xml:"cdrom"`
0000000000000000000000000000000000000000;;		Filename string       `xml:"filename"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConnectedIso"] = reflect.TypeOf((*ConnectedIso)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConnectedIsoFault ConnectedIso
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConnectedIsoFault"] = reflect.TypeOf((*ConnectedIsoFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConsolidateVMDisksRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConsolidateVMDisksRequestType"] = reflect.TypeOf((*ConsolidateVMDisksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConsolidateVMDisks_Task ConsolidateVMDisksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConsolidateVMDisks_Task"] = reflect.TypeOf((*ConsolidateVMDisks_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConsolidateVMDisks_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContinueRetrievePropertiesEx ContinueRetrievePropertiesExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ContinueRetrievePropertiesEx"] = reflect.TypeOf((*ContinueRetrievePropertiesEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContinueRetrievePropertiesExRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Token string                 `xml:"token"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ContinueRetrievePropertiesExRequestType"] = reflect.TypeOf((*ContinueRetrievePropertiesExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContinueRetrievePropertiesExResponse struct {
0000000000000000000000000000000000000000;;		Returnval RetrieveResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConvertNamespacePathToUuidPath ConvertNamespacePathToUuidPathRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConvertNamespacePathToUuidPath"] = reflect.TypeOf((*ConvertNamespacePathToUuidPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConvertNamespacePathToUuidPathRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter   *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		NamespaceUrl string                  `xml:"namespaceUrl"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ConvertNamespacePathToUuidPathRequestType"] = reflect.TypeOf((*ConvertNamespacePathToUuidPathRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConvertNamespacePathToUuidPathResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyDatastoreFileRequestType struct {
0000000000000000000000000000000000000000;;		This                  ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		SourceName            string                  `xml:"sourceName"`
0000000000000000000000000000000000000000;;		SourceDatacenter      *ManagedObjectReference `xml:"sourceDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestinationName       string                  `xml:"destinationName"`
0000000000000000000000000000000000000000;;		DestinationDatacenter *ManagedObjectReference `xml:"destinationDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		Force                 *bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CopyDatastoreFileRequestType"] = reflect.TypeOf((*CopyDatastoreFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyDatastoreFile_Task CopyDatastoreFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CopyDatastoreFile_Task"] = reflect.TypeOf((*CopyDatastoreFile_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyDatastoreFile_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		SourceName       string                  `xml:"sourceName"`
0000000000000000000000000000000000000000;;		SourceDatacenter *ManagedObjectReference `xml:"sourceDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestName         string                  `xml:"destName"`
0000000000000000000000000000000000000000;;		DestDatacenter   *ManagedObjectReference `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestSpec         BaseVirtualDiskSpec     `xml:"destSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Force            *bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CopyVirtualDiskRequestType"] = reflect.TypeOf((*CopyVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyVirtualDisk_Task CopyVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CopyVirtualDisk_Task"] = reflect.TypeOf((*CopyVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuCompatibilityUnknown struct {
0000000000000000000000000000000000000000;;		CpuIncompatible
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuCompatibilityUnknown"] = reflect.TypeOf((*CpuCompatibilityUnknown)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuCompatibilityUnknownFault CpuCompatibilityUnknown
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuCompatibilityUnknownFault"] = reflect.TypeOf((*CpuCompatibilityUnknownFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuHotPlugNotSupported struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuHotPlugNotSupported"] = reflect.TypeOf((*CpuHotPlugNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuHotPlugNotSupportedFault CpuHotPlugNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuHotPlugNotSupportedFault"] = reflect.TypeOf((*CpuHotPlugNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuIncompatible struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Level        int32                   `xml:"level"`
0000000000000000000000000000000000000000;;		RegisterName string                  `xml:"registerName"`
0000000000000000000000000000000000000000;;		RegisterBits string                  `xml:"registerBits,omitempty"`
0000000000000000000000000000000000000000;;		DesiredBits  string                  `xml:"desiredBits,omitempty"`
0000000000000000000000000000000000000000;;		Host         *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuIncompatible"] = reflect.TypeOf((*CpuIncompatible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuIncompatible1ECX struct {
0000000000000000000000000000000000000000;;		CpuIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Sse3      bool  `xml:"sse3"`
0000000000000000000000000000000000000000;;		Pclmulqdq *bool `xml:"pclmulqdq"`
0000000000000000000000000000000000000000;;		Ssse3     bool  `xml:"ssse3"`
0000000000000000000000000000000000000000;;		Sse41     bool  `xml:"sse41"`
0000000000000000000000000000000000000000;;		Sse42     bool  `xml:"sse42"`
0000000000000000000000000000000000000000;;		Aes       *bool `xml:"aes"`
0000000000000000000000000000000000000000;;		Other     bool  `xml:"other"`
0000000000000000000000000000000000000000;;		OtherOnly bool  `xml:"otherOnly"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuIncompatible1ECX"] = reflect.TypeOf((*CpuIncompatible1ECX)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuIncompatible1ECXFault CpuIncompatible1ECX
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuIncompatible1ECXFault"] = reflect.TypeOf((*CpuIncompatible1ECXFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuIncompatible81EDX struct {
0000000000000000000000000000000000000000;;		CpuIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Nx        bool `xml:"nx"`
0000000000000000000000000000000000000000;;		Ffxsr     bool `xml:"ffxsr"`
0000000000000000000000000000000000000000;;		Rdtscp    bool `xml:"rdtscp"`
0000000000000000000000000000000000000000;;		Lm        bool `xml:"lm"`
0000000000000000000000000000000000000000;;		Other     bool `xml:"other"`
0000000000000000000000000000000000000000;;		OtherOnly bool `xml:"otherOnly"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuIncompatible81EDX"] = reflect.TypeOf((*CpuIncompatible81EDX)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuIncompatible81EDXFault CpuIncompatible81EDX
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuIncompatible81EDXFault"] = reflect.TypeOf((*CpuIncompatible81EDXFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuIncompatibleFault BaseCpuIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CpuIncompatibleFault"] = reflect.TypeOf((*CpuIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateAlarm CreateAlarmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateAlarm"] = reflect.TypeOf((*CreateAlarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateAlarmRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Spec   BaseAlarmSpec          `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateAlarmRequestType"] = reflect.TypeOf((*CreateAlarmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateAlarmResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateChildVMRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Config VirtualMachineConfigSpec `xml:"config"`
0000000000000000000000000000000000000000;;		Host   *ManagedObjectReference  `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateChildVMRequestType"] = reflect.TypeOf((*CreateChildVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateChildVM_Task CreateChildVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateChildVM_Task"] = reflect.TypeOf((*CreateChildVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateChildVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCluster CreateClusterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCluster"] = reflect.TypeOf((*CreateCluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateClusterEx CreateClusterExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateClusterEx"] = reflect.TypeOf((*CreateClusterEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateClusterExRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Spec ClusterConfigSpecEx    `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateClusterExRequestType"] = reflect.TypeOf((*CreateClusterExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateClusterExResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateClusterRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Spec ClusterConfigSpec      `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateClusterRequestType"] = reflect.TypeOf((*CreateClusterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateClusterResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCollectorForEvents CreateCollectorForEventsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCollectorForEvents"] = reflect.TypeOf((*CreateCollectorForEvents)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCollectorForEventsRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Filter EventFilterSpec        `xml:"filter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCollectorForEventsRequestType"] = reflect.TypeOf((*CreateCollectorForEventsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCollectorForEventsResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCollectorForTasks CreateCollectorForTasksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCollectorForTasks"] = reflect.TypeOf((*CreateCollectorForTasks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCollectorForTasksRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Filter TaskFilterSpec         `xml:"filter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCollectorForTasksRequestType"] = reflect.TypeOf((*CreateCollectorForTasksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCollectorForTasksResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateContainerView CreateContainerViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateContainerView"] = reflect.TypeOf((*CreateContainerView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateContainerViewRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Container ManagedObjectReference `xml:"container"`
0000000000000000000000000000000000000000;;		Type      []string               `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Recursive bool                   `xml:"recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateContainerViewRequestType"] = reflect.TypeOf((*CreateContainerViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateContainerViewResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCustomizationSpec CreateCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCustomizationSpec"] = reflect.TypeOf((*CreateCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Item CustomizationSpecItem  `xml:"item"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateCustomizationSpecRequestType"] = reflect.TypeOf((*CreateCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDVPortgroupRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec DVPortgroupConfigSpec  `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDVPortgroupRequestType"] = reflect.TypeOf((*CreateDVPortgroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDVPortgroup_Task CreateDVPortgroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDVPortgroup_Task"] = reflect.TypeOf((*CreateDVPortgroup_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDVPortgroup_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDVSRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec DVSCreateSpec          `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDVSRequestType"] = reflect.TypeOf((*CreateDVSRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDVS_Task CreateDVSRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDVS_Task"] = reflect.TypeOf((*CreateDVS_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDVS_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDatacenter CreateDatacenterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDatacenter"] = reflect.TypeOf((*CreateDatacenter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDatacenterRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDatacenterRequestType"] = reflect.TypeOf((*CreateDatacenterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDatacenterResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDefaultProfile CreateDefaultProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDefaultProfile"] = reflect.TypeOf((*CreateDefaultProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDefaultProfileRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		ProfileType     string                  `xml:"profileType"`
0000000000000000000000000000000000000000;;		ProfileTypeName string                  `xml:"profileTypeName,omitempty"`
0000000000000000000000000000000000000000;;		Profile         *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDefaultProfileRequestType"] = reflect.TypeOf((*CreateDefaultProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDefaultProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval BaseApplyProfile `xml:"returnval,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDescriptor CreateDescriptorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDescriptor"] = reflect.TypeOf((*CreateDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDescriptorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference    `xml:"_this"`
0000000000000000000000000000000000000000;;		Obj  ManagedObjectReference    `xml:"obj"`
0000000000000000000000000000000000000000;;		Cdp  OvfCreateDescriptorParams `xml:"cdp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDescriptorRequestType"] = reflect.TypeOf((*CreateDescriptorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDescriptorResponse struct {
0000000000000000000000000000000000000000;;		Returnval OvfCreateDescriptorResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDiagnosticPartition CreateDiagnosticPartitionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDiagnosticPartition"] = reflect.TypeOf((*CreateDiagnosticPartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDiagnosticPartitionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostDiagnosticPartitionCreateSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDiagnosticPartitionRequestType"] = reflect.TypeOf((*CreateDiagnosticPartitionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDiagnosticPartitionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDirectory CreateDirectoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDirectory"] = reflect.TypeOf((*CreateDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDirectoryRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore   ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		DisplayName string                 `xml:"displayName,omitempty"`
0000000000000000000000000000000000000000;;		Policy      string                 `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDirectoryRequestType"] = reflect.TypeOf((*CreateDirectoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDirectoryResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDiskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec VslmCreateSpec         `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDiskRequestType"] = reflect.TypeOf((*CreateDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDisk_Task CreateDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateDisk_Task"] = reflect.TypeOf((*CreateDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateFilter CreateFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateFilter"] = reflect.TypeOf((*CreateFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateFilterRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec           PropertyFilterSpec     `xml:"spec"`
0000000000000000000000000000000000000000;;		PartialUpdates bool                   `xml:"partialUpdates"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateFilterRequestType"] = reflect.TypeOf((*CreateFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateFilterResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateFolder CreateFolderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateFolder"] = reflect.TypeOf((*CreateFolder)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateFolderRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateFolderRequestType"] = reflect.TypeOf((*CreateFolderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateFolderResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateGroup CreateGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateGroup"] = reflect.TypeOf((*CreateGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateGroupRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Group BaseHostAccountSpec    `xml:"group,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateGroupRequestType"] = reflect.TypeOf((*CreateGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateImportSpec CreateImportSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateImportSpec"] = reflect.TypeOf((*CreateImportSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateImportSpecRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference    `xml:"_this"`
0000000000000000000000000000000000000000;;		OvfDescriptor string                    `xml:"ovfDescriptor"`
0000000000000000000000000000000000000000;;		ResourcePool  ManagedObjectReference    `xml:"resourcePool"`
0000000000000000000000000000000000000000;;		Datastore     ManagedObjectReference    `xml:"datastore"`
0000000000000000000000000000000000000000;;		Cisp          OvfCreateImportSpecParams `xml:"cisp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateImportSpecRequestType"] = reflect.TypeOf((*CreateImportSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateImportSpecResponse struct {
0000000000000000000000000000000000000000;;		Returnval OvfCreateImportSpecResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateInventoryView CreateInventoryViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateInventoryView"] = reflect.TypeOf((*CreateInventoryView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateInventoryViewRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateInventoryViewRequestType"] = reflect.TypeOf((*CreateInventoryViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateInventoryViewResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateIpPool CreateIpPoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateIpPool"] = reflect.TypeOf((*CreateIpPool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateIpPoolRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc   ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		Pool IpPool                 `xml:"pool"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateIpPoolRequestType"] = reflect.TypeOf((*CreateIpPoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateIpPoolResponse struct {
0000000000000000000000000000000000000000;;		Returnval int32 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateListView CreateListViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateListView"] = reflect.TypeOf((*CreateListView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateListViewFromView CreateListViewFromViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateListViewFromView"] = reflect.TypeOf((*CreateListViewFromView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateListViewFromViewRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		View ManagedObjectReference `xml:"view"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateListViewFromViewRequestType"] = reflect.TypeOf((*CreateListViewFromViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateListViewFromViewResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateListViewRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Obj  []ManagedObjectReference `xml:"obj,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateListViewRequestType"] = reflect.TypeOf((*CreateListViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateListViewResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateLocalDatastore CreateLocalDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateLocalDatastore"] = reflect.TypeOf((*CreateLocalDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateLocalDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Path string                 `xml:"path"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateLocalDatastoreRequestType"] = reflect.TypeOf((*CreateLocalDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateLocalDatastoreResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateNasDatastore CreateNasDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateNasDatastore"] = reflect.TypeOf((*CreateNasDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateNasDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostNasVolumeSpec      `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateNasDatastoreRequestType"] = reflect.TypeOf((*CreateNasDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateNasDatastoreResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateObjectScheduledTask CreateObjectScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateObjectScheduledTask"] = reflect.TypeOf((*CreateObjectScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateObjectScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Obj  ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;		Spec BaseScheduledTaskSpec  `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateObjectScheduledTaskRequestType"] = reflect.TypeOf((*CreateObjectScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateObjectScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePerfInterval CreatePerfIntervalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreatePerfInterval"] = reflect.TypeOf((*CreatePerfInterval)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePerfIntervalRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IntervalId PerfInterval           `xml:"intervalId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreatePerfIntervalRequestType"] = reflect.TypeOf((*CreatePerfIntervalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePerfIntervalResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateProfile CreateProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateProfile"] = reflect.TypeOf((*CreateProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateProfileRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CreateSpec BaseProfileCreateSpec  `xml:"createSpec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateProfileRequestType"] = reflect.TypeOf((*CreateProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePropertyCollector CreatePropertyCollectorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreatePropertyCollector"] = reflect.TypeOf((*CreatePropertyCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePropertyCollectorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreatePropertyCollectorRequestType"] = reflect.TypeOf((*CreatePropertyCollectorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePropertyCollectorResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateRegistryKeyInGuest CreateRegistryKeyInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateRegistryKeyInGuest"] = reflect.TypeOf((*CreateRegistryKeyInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateRegistryKeyInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm         ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth       BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		KeyName    GuestRegKeyNameSpec     `xml:"keyName"`
0000000000000000000000000000000000000000;;		IsVolatile bool                    `xml:"isVolatile"`
0000000000000000000000000000000000000000;;		ClassType  string                  `xml:"classType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateRegistryKeyInGuestRequestType"] = reflect.TypeOf((*CreateRegistryKeyInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateRegistryKeyInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateResourcePool CreateResourcePoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateResourcePool"] = reflect.TypeOf((*CreateResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateResourcePoolRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Spec ResourceConfigSpec     `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateResourcePoolRequestType"] = reflect.TypeOf((*CreateResourcePoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateResourcePoolResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateScheduledTask CreateScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateScheduledTask"] = reflect.TypeOf((*CreateScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Spec   BaseScheduledTaskSpec  `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateScheduledTaskRequestType"] = reflect.TypeOf((*CreateScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateScreenshotRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateScreenshotRequestType"] = reflect.TypeOf((*CreateScreenshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateScreenshot_Task CreateScreenshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateScreenshot_Task"] = reflect.TypeOf((*CreateScreenshot_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateScreenshot_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSecondaryVMExRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference    `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference   `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Spec *FaultToleranceConfigSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSecondaryVMExRequestType"] = reflect.TypeOf((*CreateSecondaryVMExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSecondaryVMEx_Task CreateSecondaryVMExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSecondaryVMEx_Task"] = reflect.TypeOf((*CreateSecondaryVMEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSecondaryVMEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSecondaryVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSecondaryVMRequestType"] = reflect.TypeOf((*CreateSecondaryVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSecondaryVM_Task CreateSecondaryVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSecondaryVM_Task"] = reflect.TypeOf((*CreateSecondaryVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSecondaryVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSnapshotExRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference             `xml:"_this"`
0000000000000000000000000000000000000000;;		Name        string                             `xml:"name"`
0000000000000000000000000000000000000000;;		Description string                             `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Memory      bool                               `xml:"memory"`
0000000000000000000000000000000000000000;;		QuiesceSpec BaseVirtualMachineGuestQuiesceSpec `xml:"quiesceSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSnapshotExRequestType"] = reflect.TypeOf((*CreateSnapshotExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSnapshotEx_Task CreateSnapshotExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSnapshotEx_Task"] = reflect.TypeOf((*CreateSnapshotEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSnapshotEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name        string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Description string                 `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Memory      bool                   `xml:"memory"`
0000000000000000000000000000000000000000;;		Quiesce     bool                   `xml:"quiesce"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSnapshotRequestType"] = reflect.TypeOf((*CreateSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSnapshot_Task CreateSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateSnapshot_Task"] = reflect.TypeOf((*CreateSnapshot_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateSnapshot_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateStoragePod CreateStoragePodRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateStoragePod"] = reflect.TypeOf((*CreateStoragePod)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateStoragePodRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateStoragePodRequestType"] = reflect.TypeOf((*CreateStoragePodRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateStoragePodResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTask CreateTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTask"] = reflect.TypeOf((*CreateTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTaskAction struct {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TaskTypeId string `xml:"taskTypeId"`
0000000000000000000000000000000000000000;;		Cancelable bool   `xml:"cancelable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTaskAction"] = reflect.TypeOf((*CreateTaskAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTaskRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Obj           ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;		TaskTypeId    string                 `xml:"taskTypeId"`
0000000000000000000000000000000000000000;;		InitiatedBy   string                 `xml:"initiatedBy,omitempty"`
0000000000000000000000000000000000000000;;		Cancelable    bool                   `xml:"cancelable"`
0000000000000000000000000000000000000000;;		ParentTaskKey string                 `xml:"parentTaskKey,omitempty"`
0000000000000000000000000000000000000000;;		ActivationId  string                 `xml:"activationId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTaskRequestType"] = reflect.TypeOf((*CreateTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval TaskInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTemporaryDirectoryInGuest CreateTemporaryDirectoryInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTemporaryDirectoryInGuest"] = reflect.TypeOf((*CreateTemporaryDirectoryInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTemporaryDirectoryInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth          BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Prefix        string                  `xml:"prefix"`
0000000000000000000000000000000000000000;;		Suffix        string                  `xml:"suffix"`
0000000000000000000000000000000000000000;;		DirectoryPath string                  `xml:"directoryPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTemporaryDirectoryInGuestRequestType"] = reflect.TypeOf((*CreateTemporaryDirectoryInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTemporaryDirectoryInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTemporaryFileInGuest CreateTemporaryFileInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTemporaryFileInGuest"] = reflect.TypeOf((*CreateTemporaryFileInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTemporaryFileInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth          BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Prefix        string                  `xml:"prefix"`
0000000000000000000000000000000000000000;;		Suffix        string                  `xml:"suffix"`
0000000000000000000000000000000000000000;;		DirectoryPath string                  `xml:"directoryPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateTemporaryFileInGuestRequestType"] = reflect.TypeOf((*CreateTemporaryFileInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateTemporaryFileInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateUser CreateUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateUser"] = reflect.TypeOf((*CreateUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateUserRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		User BaseHostAccountSpec    `xml:"user,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateUserRequestType"] = reflect.TypeOf((*CreateUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateUserResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVApp CreateVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVApp"] = reflect.TypeOf((*CreateVApp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVAppRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		ResSpec    ResourceConfigSpec      `xml:"resSpec"`
0000000000000000000000000000000000000000;;		ConfigSpec VAppConfigSpec          `xml:"configSpec"`
0000000000000000000000000000000000000000;;		VmFolder   *ManagedObjectReference `xml:"vmFolder,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVAppRequestType"] = reflect.TypeOf((*CreateVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVAppResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVMRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Config VirtualMachineConfigSpec `xml:"config"`
0000000000000000000000000000000000000000;;		Pool   ManagedObjectReference   `xml:"pool"`
0000000000000000000000000000000000000000;;		Host   *ManagedObjectReference  `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVMRequestType"] = reflect.TypeOf((*CreateVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVM_Task CreateVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVM_Task"] = reflect.TypeOf((*CreateVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Spec       BaseVirtualDiskSpec     `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVirtualDiskRequestType"] = reflect.TypeOf((*CreateVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVirtualDisk_Task CreateVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVirtualDisk_Task"] = reflect.TypeOf((*CreateVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVmfsDatastore CreateVmfsDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVmfsDatastore"] = reflect.TypeOf((*CreateVmfsDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVmfsDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec VmfsDatastoreCreateSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVmfsDatastoreRequestType"] = reflect.TypeOf((*CreateVmfsDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVmfsDatastoreResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVvolDatastore CreateVvolDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVvolDatastore"] = reflect.TypeOf((*CreateVvolDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVvolDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostDatastoreSystemVvolDatastoreSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CreateVvolDatastoreRequestType"] = reflect.TypeOf((*CreateVvolDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVvolDatastoreResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoKeyId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyId      string         `xml:"keyId"`
0000000000000000000000000000000000000000;;		ProviderId *KeyProviderId `xml:"providerId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoKeyId"] = reflect.TypeOf((*CryptoKeyId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoKeyPlain struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyId     CryptoKeyId `xml:"keyId"`
0000000000000000000000000000000000000000;;		Algorithm string      `xml:"algorithm"`
0000000000000000000000000000000000000000;;		KeyData   string      `xml:"keyData"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoKeyPlain"] = reflect.TypeOf((*CryptoKeyPlain)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoKeyResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyId   CryptoKeyId `xml:"keyId"`
0000000000000000000000000000000000000000;;		Success bool        `xml:"success"`
0000000000000000000000000000000000000000;;		Reason  string      `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoKeyResult"] = reflect.TypeOf((*CryptoKeyResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoManagerKmipCertificateInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Subject             string    `xml:"subject"`
0000000000000000000000000000000000000000;;		Issuer              string    `xml:"issuer"`
0000000000000000000000000000000000000000;;		SerialNumber        string    `xml:"serialNumber"`
0000000000000000000000000000000000000000;;		NotBefore           time.Time `xml:"notBefore"`
0000000000000000000000000000000000000000;;		NotAfter            time.Time `xml:"notAfter"`
0000000000000000000000000000000000000000;;		Fingerprint         string    `xml:"fingerprint"`
0000000000000000000000000000000000000000;;		CheckTime           time.Time `xml:"checkTime"`
0000000000000000000000000000000000000000;;		SecondsSinceValid   int32     `xml:"secondsSinceValid,omitempty"`
0000000000000000000000000000000000000000;;		SecondsBeforeExpire int32     `xml:"secondsBeforeExpire,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoManagerKmipCertificateInfo"] = reflect.TypeOf((*CryptoManagerKmipCertificateInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoManagerKmipClusterStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterId      KeyProviderId                     `xml:"clusterId"`
0000000000000000000000000000000000000000;;		Servers        []CryptoManagerKmipServerStatus   `xml:"servers"`
0000000000000000000000000000000000000000;;		ClientCertInfo *CryptoManagerKmipCertificateInfo `xml:"clientCertInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoManagerKmipClusterStatus"] = reflect.TypeOf((*CryptoManagerKmipClusterStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoManagerKmipServerCertInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Certificate       string                            `xml:"certificate"`
0000000000000000000000000000000000000000;;		CertInfo          *CryptoManagerKmipCertificateInfo `xml:"certInfo,omitempty"`
0000000000000000000000000000000000000000;;		ClientTrustServer *bool                             `xml:"clientTrustServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoManagerKmipServerCertInfo"] = reflect.TypeOf((*CryptoManagerKmipServerCertInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoManagerKmipServerStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name              string                            `xml:"name"`
0000000000000000000000000000000000000000;;		Status            ManagedEntityStatus               `xml:"status"`
0000000000000000000000000000000000000000;;		ConnectionStatus  string                            `xml:"connectionStatus"`
0000000000000000000000000000000000000000;;		CertInfo          *CryptoManagerKmipCertificateInfo `xml:"certInfo,omitempty"`
0000000000000000000000000000000000000000;;		ClientTrustServer *bool                             `xml:"clientTrustServer"`
0000000000000000000000000000000000000000;;		ServerTrustClient *bool                             `xml:"serverTrustClient"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoManagerKmipServerStatus"] = reflect.TypeOf((*CryptoManagerKmipServerStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpec"] = reflect.TypeOf((*CryptoSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpecDecrypt struct {
0000000000000000000000000000000000000000;;		CryptoSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpecDecrypt"] = reflect.TypeOf((*CryptoSpecDecrypt)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpecDeepRecrypt struct {
0000000000000000000000000000000000000000;;		CryptoSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewKeyId CryptoKeyId `xml:"newKeyId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpecDeepRecrypt"] = reflect.TypeOf((*CryptoSpecDeepRecrypt)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpecEncrypt struct {
0000000000000000000000000000000000000000;;		CryptoSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CryptoKeyId CryptoKeyId `xml:"cryptoKeyId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpecEncrypt"] = reflect.TypeOf((*CryptoSpecEncrypt)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpecNoOp struct {
0000000000000000000000000000000000000000;;		CryptoSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpecNoOp"] = reflect.TypeOf((*CryptoSpecNoOp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpecRegister struct {
0000000000000000000000000000000000000000;;		CryptoSpecNoOp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CryptoKeyId CryptoKeyId `xml:"cryptoKeyId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpecRegister"] = reflect.TypeOf((*CryptoSpecRegister)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoSpecShallowRecrypt struct {
0000000000000000000000000000000000000000;;		CryptoSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewKeyId CryptoKeyId `xml:"newKeyId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoSpecShallowRecrypt"] = reflect.TypeOf((*CryptoSpecShallowRecrypt)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CurrentTime CurrentTimeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CurrentTime"] = reflect.TypeOf((*CurrentTime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CurrentTimeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CurrentTimeRequestType"] = reflect.TypeOf((*CurrentTimeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CurrentTimeResponse struct {
0000000000000000000000000000000000000000;;		Returnval time.Time `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldDef struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                     int32               `xml:"key"`
0000000000000000000000000000000000000000;;		Name                    string              `xml:"name"`
0000000000000000000000000000000000000000;;		Type                    string              `xml:"type"`
0000000000000000000000000000000000000000;;		ManagedObjectType       string              `xml:"managedObjectType,omitempty"`
0000000000000000000000000000000000000000;;		FieldDefPrivileges      *PrivilegePolicyDef `xml:"fieldDefPrivileges,omitempty"`
0000000000000000000000000000000000000000;;		FieldInstancePrivileges *PrivilegePolicyDef `xml:"fieldInstancePrivileges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldDef"] = reflect.TypeOf((*CustomFieldDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldDefAddedEvent struct {
0000000000000000000000000000000000000000;;		CustomFieldDefEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldDefAddedEvent"] = reflect.TypeOf((*CustomFieldDefAddedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldDefEvent struct {
0000000000000000000000000000000000000000;;		CustomFieldEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FieldKey int32  `xml:"fieldKey"`
0000000000000000000000000000000000000000;;		Name     string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldDefEvent"] = reflect.TypeOf((*CustomFieldDefEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldDefRemovedEvent struct {
0000000000000000000000000000000000000000;;		CustomFieldDefEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldDefRemovedEvent"] = reflect.TypeOf((*CustomFieldDefRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldDefRenamedEvent struct {
0000000000000000000000000000000000000000;;		CustomFieldDefEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldDefRenamedEvent"] = reflect.TypeOf((*CustomFieldDefRenamedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldEvent"] = reflect.TypeOf((*CustomFieldEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldStringValue struct {
0000000000000000000000000000000000000000;;		CustomFieldValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldStringValue"] = reflect.TypeOf((*CustomFieldStringValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldValue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key int32 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldValue"] = reflect.TypeOf((*CustomFieldValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldValueChangedEvent struct {
0000000000000000000000000000000000000000;;		CustomFieldEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity    ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		FieldKey  int32                      `xml:"fieldKey"`
0000000000000000000000000000000000000000;;		Name      string                     `xml:"name"`
0000000000000000000000000000000000000000;;		Value     string                     `xml:"value"`
0000000000000000000000000000000000000000;;		PrevState string                     `xml:"prevState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldValueChangedEvent"] = reflect.TypeOf((*CustomFieldValueChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationAdapterMapping struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MacAddress string                  `xml:"macAddress,omitempty"`
0000000000000000000000000000000000000000;;		Adapter    CustomizationIPSettings `xml:"adapter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationAdapterMapping"] = reflect.TypeOf((*CustomizationAdapterMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationAutoIpV6Generator struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationAutoIpV6Generator"] = reflect.TypeOf((*CustomizationAutoIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationCustomIpGenerator struct {
0000000000000000000000000000000000000000;;		CustomizationIpGenerator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Argument string `xml:"argument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationCustomIpGenerator"] = reflect.TypeOf((*CustomizationCustomIpGenerator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationCustomIpV6Generator struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Argument string `xml:"argument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationCustomIpV6Generator"] = reflect.TypeOf((*CustomizationCustomIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationCustomName struct {
0000000000000000000000000000000000000000;;		CustomizationName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Argument string `xml:"argument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationCustomName"] = reflect.TypeOf((*CustomizationCustomName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationDhcpIpGenerator struct {
0000000000000000000000000000000000000000;;		CustomizationIpGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationDhcpIpGenerator"] = reflect.TypeOf((*CustomizationDhcpIpGenerator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationDhcpIpV6Generator struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationDhcpIpV6Generator"] = reflect.TypeOf((*CustomizationDhcpIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LogLocation string `xml:"logLocation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationEvent"] = reflect.TypeOf((*CustomizationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationFailed struct {
0000000000000000000000000000000000000000;;		CustomizationEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationFailed"] = reflect.TypeOf((*CustomizationFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationFault"] = reflect.TypeOf((*CustomizationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationFaultFault BaseCustomizationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationFaultFault"] = reflect.TypeOf((*CustomizationFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationFixedIp struct {
0000000000000000000000000000000000000000;;		CustomizationIpGenerator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationFixedIp"] = reflect.TypeOf((*CustomizationFixedIp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationFixedIpV6 struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress  string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		SubnetMask int32  `xml:"subnetMask"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationFixedIpV6"] = reflect.TypeOf((*CustomizationFixedIpV6)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationFixedName struct {
0000000000000000000000000000000000000000;;		CustomizationName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationFixedName"] = reflect.TypeOf((*CustomizationFixedName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationGlobalIPSettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DnsSuffixList []string `xml:"dnsSuffixList,omitempty"`
0000000000000000000000000000000000000000;;		DnsServerList []string `xml:"dnsServerList,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationGlobalIPSettings"] = reflect.TypeOf((*CustomizationGlobalIPSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationGuiRunOnce struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CommandList []string `xml:"commandList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationGuiRunOnce"] = reflect.TypeOf((*CustomizationGuiRunOnce)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationGuiUnattended struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Password       *CustomizationPassword `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;		TimeZone       int32                  `xml:"timeZone"`
0000000000000000000000000000000000000000;;		AutoLogon      bool                   `xml:"autoLogon"`
0000000000000000000000000000000000000000;;		AutoLogonCount int32                  `xml:"autoLogonCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationGuiUnattended"] = reflect.TypeOf((*CustomizationGuiUnattended)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationIPSettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ip            BaseCustomizationIpGenerator            `xml:"ip,typeattr"`
0000000000000000000000000000000000000000;;		SubnetMask    string                                  `xml:"subnetMask,omitempty"`
0000000000000000000000000000000000000000;;		Gateway       []string                                `xml:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		IpV6Spec      *CustomizationIPSettingsIpV6AddressSpec `xml:"ipV6Spec,omitempty"`
0000000000000000000000000000000000000000;;		DnsServerList []string                                `xml:"dnsServerList,omitempty"`
0000000000000000000000000000000000000000;;		DnsDomain     string                                  `xml:"dnsDomain,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryWINS   string                                  `xml:"primaryWINS,omitempty"`
0000000000000000000000000000000000000000;;		SecondaryWINS string                                  `xml:"secondaryWINS,omitempty"`
0000000000000000000000000000000000000000;;		NetBIOS       CustomizationNetBIOSMode                `xml:"netBIOS,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationIPSettings"] = reflect.TypeOf((*CustomizationIPSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationIPSettingsIpV6AddressSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ip      []BaseCustomizationIpV6Generator `xml:"ip,typeattr"`
0000000000000000000000000000000000000000;;		Gateway []string                         `xml:"gateway,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationIPSettingsIpV6AddressSpec"] = reflect.TypeOf((*CustomizationIPSettingsIpV6AddressSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationIdentification struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		JoinWorkgroup       string                 `xml:"joinWorkgroup,omitempty"`
0000000000000000000000000000000000000000;;		JoinDomain          string                 `xml:"joinDomain,omitempty"`
0000000000000000000000000000000000000000;;		DomainAdmin         string                 `xml:"domainAdmin,omitempty"`
0000000000000000000000000000000000000000;;		DomainAdminPassword *CustomizationPassword `xml:"domainAdminPassword,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationIdentification"] = reflect.TypeOf((*CustomizationIdentification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationIdentitySettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationIdentitySettings"] = reflect.TypeOf((*CustomizationIdentitySettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationIpGenerator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationIpGenerator"] = reflect.TypeOf((*CustomizationIpGenerator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationIpV6Generator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationIpV6Generator"] = reflect.TypeOf((*CustomizationIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationLicenseFilePrintData struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoMode  CustomizationLicenseDataMode `xml:"autoMode"`
0000000000000000000000000000000000000000;;		AutoUsers int32                        `xml:"autoUsers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationLicenseFilePrintData"] = reflect.TypeOf((*CustomizationLicenseFilePrintData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationLinuxIdentityFailed struct {
0000000000000000000000000000000000000000;;		CustomizationFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationLinuxIdentityFailed"] = reflect.TypeOf((*CustomizationLinuxIdentityFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationLinuxOptions struct {
0000000000000000000000000000000000000000;;		CustomizationOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationLinuxOptions"] = reflect.TypeOf((*CustomizationLinuxOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationLinuxPrep struct {
0000000000000000000000000000000000000000;;		CustomizationIdentitySettings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName   BaseCustomizationName `xml:"hostName,typeattr"`
0000000000000000000000000000000000000000;;		Domain     string                `xml:"domain"`
0000000000000000000000000000000000000000;;		TimeZone   string                `xml:"timeZone,omitempty"`
0000000000000000000000000000000000000000;;		HwClockUTC *bool                 `xml:"hwClockUTC"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationLinuxPrep"] = reflect.TypeOf((*CustomizationLinuxPrep)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationName struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationName"] = reflect.TypeOf((*CustomizationName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationNetworkSetupFailed struct {
0000000000000000000000000000000000000000;;		CustomizationFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationNetworkSetupFailed"] = reflect.TypeOf((*CustomizationNetworkSetupFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationOptions struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationOptions"] = reflect.TypeOf((*CustomizationOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationPassword struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value     string `xml:"value"`
0000000000000000000000000000000000000000;;		PlainText bool   `xml:"plainText"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationPassword"] = reflect.TypeOf((*CustomizationPassword)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationPending struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationPending"] = reflect.TypeOf((*CustomizationPending)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationPendingFault CustomizationPending
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationPendingFault"] = reflect.TypeOf((*CustomizationPendingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationPrefixName struct {
0000000000000000000000000000000000000000;;		CustomizationName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Base string `xml:"base"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationPrefixName"] = reflect.TypeOf((*CustomizationPrefixName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Options          BaseCustomizationOptions          `xml:"options,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Identity         BaseCustomizationIdentitySettings `xml:"identity,typeattr"`
0000000000000000000000000000000000000000;;		GlobalIPSettings CustomizationGlobalIPSettings     `xml:"globalIPSettings"`
0000000000000000000000000000000000000000;;		NicSettingMap    []CustomizationAdapterMapping     `xml:"nicSettingMap,omitempty"`
0000000000000000000000000000000000000000;;		EncryptionKey    []byte                            `xml:"encryptionKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSpec"] = reflect.TypeOf((*CustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpecInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name           string     `xml:"name"`
0000000000000000000000000000000000000000;;		Description    string     `xml:"description"`
0000000000000000000000000000000000000000;;		Type           string     `xml:"type"`
0000000000000000000000000000000000000000;;		ChangeVersion  string     `xml:"changeVersion,omitempty"`
0000000000000000000000000000000000000000;;		LastUpdateTime *time.Time `xml:"lastUpdateTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSpecInfo"] = reflect.TypeOf((*CustomizationSpecInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpecItem struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info CustomizationSpecInfo `xml:"info"`
0000000000000000000000000000000000000000;;		Spec CustomizationSpec     `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSpecItem"] = reflect.TypeOf((*CustomizationSpecItem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpecItemToXml CustomizationSpecItemToXmlRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSpecItemToXml"] = reflect.TypeOf((*CustomizationSpecItemToXml)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpecItemToXmlRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Item CustomizationSpecItem  `xml:"item"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSpecItemToXmlRequestType"] = reflect.TypeOf((*CustomizationSpecItemToXmlRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpecItemToXmlResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationStartedEvent struct {
0000000000000000000000000000000000000000;;		CustomizationEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationStartedEvent"] = reflect.TypeOf((*CustomizationStartedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationStatelessIpV6Generator struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationStatelessIpV6Generator"] = reflect.TypeOf((*CustomizationStatelessIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSucceeded struct {
0000000000000000000000000000000000000000;;		CustomizationEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSucceeded"] = reflect.TypeOf((*CustomizationSucceeded)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSysprep struct {
0000000000000000000000000000000000000000;;		CustomizationIdentitySettings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GuiUnattended        CustomizationGuiUnattended         `xml:"guiUnattended"`
0000000000000000000000000000000000000000;;		UserData             CustomizationUserData              `xml:"userData"`
0000000000000000000000000000000000000000;;		GuiRunOnce           *CustomizationGuiRunOnce           `xml:"guiRunOnce,omitempty"`
0000000000000000000000000000000000000000;;		Identification       CustomizationIdentification        `xml:"identification"`
0000000000000000000000000000000000000000;;		LicenseFilePrintData *CustomizationLicenseFilePrintData `xml:"licenseFilePrintData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSysprep"] = reflect.TypeOf((*CustomizationSysprep)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSysprepFailed struct {
0000000000000000000000000000000000000000;;		CustomizationFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SysprepVersion string `xml:"sysprepVersion"`
0000000000000000000000000000000000000000;;		SystemVersion  string `xml:"systemVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSysprepFailed"] = reflect.TypeOf((*CustomizationSysprepFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSysprepText struct {
0000000000000000000000000000000000000000;;		CustomizationIdentitySettings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSysprepText"] = reflect.TypeOf((*CustomizationSysprepText)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationUnknownFailure struct {
0000000000000000000000000000000000000000;;		CustomizationFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationUnknownFailure"] = reflect.TypeOf((*CustomizationUnknownFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationUnknownIpGenerator struct {
0000000000000000000000000000000000000000;;		CustomizationIpGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationUnknownIpGenerator"] = reflect.TypeOf((*CustomizationUnknownIpGenerator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationUnknownIpV6Generator struct {
0000000000000000000000000000000000000000;;		CustomizationIpV6Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationUnknownIpV6Generator"] = reflect.TypeOf((*CustomizationUnknownIpV6Generator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationUnknownName struct {
0000000000000000000000000000000000000000;;		CustomizationName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationUnknownName"] = reflect.TypeOf((*CustomizationUnknownName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationUserData struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FullName     string                `xml:"fullName"`
0000000000000000000000000000000000000000;;		OrgName      string                `xml:"orgName"`
0000000000000000000000000000000000000000;;		ComputerName BaseCustomizationName `xml:"computerName,typeattr"`
0000000000000000000000000000000000000000;;		ProductId    string                `xml:"productId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationUserData"] = reflect.TypeOf((*CustomizationUserData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationVirtualMachineName struct {
0000000000000000000000000000000000000000;;		CustomizationName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationVirtualMachineName"] = reflect.TypeOf((*CustomizationVirtualMachineName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationWinOptions struct {
0000000000000000000000000000000000000000;;		CustomizationOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeSID      bool                             `xml:"changeSID"`
0000000000000000000000000000000000000000;;		DeleteAccounts bool                             `xml:"deleteAccounts"`
0000000000000000000000000000000000000000;;		Reboot         CustomizationSysprepRebootOption `xml:"reboot,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationWinOptions"] = reflect.TypeOf((*CustomizationWinOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizeVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec CustomizationSpec      `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizeVMRequestType"] = reflect.TypeOf((*CustomizeVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizeVM_Task CustomizeVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizeVM_Task"] = reflect.TypeOf((*CustomizeVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizeVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name          string                   `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Scope         []ManagedObjectReference `xml:"scope,omitempty"`
0000000000000000000000000000000000000000;;		Description   string                   `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Setting       BaseDVPortSetting        `xml:"setting,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ConfigVersion string                   `xml:"configVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortConfigInfo"] = reflect.TypeOf((*DVPortConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation     string                   `xml:"operation"`
0000000000000000000000000000000000000000;;		Key           string                   `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Name          string                   `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Scope         []ManagedObjectReference `xml:"scope,omitempty"`
0000000000000000000000000000000000000000;;		Description   string                   `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Setting       BaseDVPortSetting        `xml:"setting,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ConfigVersion string                   `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortConfigSpec"] = reflect.TypeOf((*DVPortConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceBackingNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortNotSupported"] = reflect.TypeOf((*DVPortNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortNotSupportedFault DVPortNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortNotSupportedFault"] = reflect.TypeOf((*DVPortNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortSetting struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Blocked                 *BoolPolicy              `xml:"blocked,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2Allowed *BoolPolicy              `xml:"vmDirectPathGen2Allowed,omitempty"`
0000000000000000000000000000000000000000;;		InShapingPolicy         *DVSTrafficShapingPolicy `xml:"inShapingPolicy,omitempty"`
0000000000000000000000000000000000000000;;		OutShapingPolicy        *DVSTrafficShapingPolicy `xml:"outShapingPolicy,omitempty"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig    *DVSVendorSpecificConfig `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;		NetworkResourcePoolKey  *StringPolicy            `xml:"networkResourcePoolKey,omitempty"`
0000000000000000000000000000000000000000;;		FilterPolicy            *DvsFilterPolicy         `xml:"filterPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortSetting"] = reflect.TypeOf((*DVPortSetting)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RuntimeInfo         *DVPortStatus                             `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		Stats               DistributedVirtualSwitchPortStatistics    `xml:"stats"`
0000000000000000000000000000000000000000;;		VendorSpecificState []DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortState"] = reflect.TypeOf((*DVPortState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LinkUp                                 bool           `xml:"linkUp"`
0000000000000000000000000000000000000000;;		Blocked                                bool           `xml:"blocked"`
0000000000000000000000000000000000000000;;		VlanIds                                []NumericRange `xml:"vlanIds,omitempty"`
0000000000000000000000000000000000000000;;		TrunkingMode                           *bool          `xml:"trunkingMode"`
0000000000000000000000000000000000000000;;		Mtu                                    int32          `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;		LinkPeer                               string         `xml:"linkPeer,omitempty"`
0000000000000000000000000000000000000000;;		MacAddress                             string         `xml:"macAddress,omitempty"`
0000000000000000000000000000000000000000;;		StatusDetail                           string         `xml:"statusDetail,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2Active                 *bool          `xml:"vmDirectPathGen2Active"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2InactiveReasonNetwork  []string       `xml:"vmDirectPathGen2InactiveReasonNetwork,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2InactiveReasonOther    []string       `xml:"vmDirectPathGen2InactiveReasonOther,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2InactiveReasonExtended string         `xml:"vmDirectPathGen2InactiveReasonExtended,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortStatus"] = reflect.TypeOf((*DVPortStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                          string                                    `xml:"key"`
0000000000000000000000000000000000000000;;		Name                         string                                    `xml:"name"`
0000000000000000000000000000000000000000;;		NumPorts                     int32                                     `xml:"numPorts"`
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch     *ManagedObjectReference                   `xml:"distributedVirtualSwitch,omitempty"`
0000000000000000000000000000000000000000;;		DefaultPortConfig            BaseDVPortSetting                         `xml:"defaultPortConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Description                  string                                    `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Type                         string                                    `xml:"type"`
0000000000000000000000000000000000000000;;		Policy                       BaseDVPortgroupPolicy                     `xml:"policy,typeattr"`
0000000000000000000000000000000000000000;;		PortNameFormat               string                                    `xml:"portNameFormat,omitempty"`
0000000000000000000000000000000000000000;;		Scope                        []ManagedObjectReference                  `xml:"scope,omitempty"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig         []DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;		ConfigVersion                string                                    `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;		AutoExpand                   *bool                                     `xml:"autoExpand"`
0000000000000000000000000000000000000000;;		VmVnicNetworkResourcePoolKey string                                    `xml:"vmVnicNetworkResourcePoolKey,omitempty"`
0000000000000000000000000000000000000000;;		Uplink                       *bool                                     `xml:"uplink"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupConfigInfo"] = reflect.TypeOf((*DVPortgroupConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigVersion                string                                    `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;		Name                         string                                    `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		NumPorts                     int32                                     `xml:"numPorts,omitempty"`
0000000000000000000000000000000000000000;;		PortNameFormat               string                                    `xml:"portNameFormat,omitempty"`
0000000000000000000000000000000000000000;;		DefaultPortConfig            BaseDVPortSetting                         `xml:"defaultPortConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Description                  string                                    `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Type                         string                                    `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Scope                        []ManagedObjectReference                  `xml:"scope,omitempty"`
0000000000000000000000000000000000000000;;		Policy                       BaseDVPortgroupPolicy                     `xml:"policy,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig         []DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;		AutoExpand                   *bool                                     `xml:"autoExpand"`
0000000000000000000000000000000000000000;;		VmVnicNetworkResourcePoolKey string                                    `xml:"vmVnicNetworkResourcePoolKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupConfigSpec"] = reflect.TypeOf((*DVPortgroupConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupCreatedEvent struct {
0000000000000000000000000000000000000000;;		DVPortgroupEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupCreatedEvent"] = reflect.TypeOf((*DVPortgroupCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupDestroyedEvent struct {
0000000000000000000000000000000000000000;;		DVPortgroupEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupDestroyedEvent"] = reflect.TypeOf((*DVPortgroupDestroyedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupEvent"] = reflect.TypeOf((*DVPortgroupEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BlockOverrideAllowed               bool  `xml:"blockOverrideAllowed"`
0000000000000000000000000000000000000000;;		ShapingOverrideAllowed             bool  `xml:"shapingOverrideAllowed"`
0000000000000000000000000000000000000000;;		VendorConfigOverrideAllowed        bool  `xml:"vendorConfigOverrideAllowed"`
0000000000000000000000000000000000000000;;		LivePortMovingAllowed              bool  `xml:"livePortMovingAllowed"`
0000000000000000000000000000000000000000;;		PortConfigResetAtDisconnect        bool  `xml:"portConfigResetAtDisconnect"`
0000000000000000000000000000000000000000;;		NetworkResourcePoolOverrideAllowed *bool `xml:"networkResourcePoolOverrideAllowed"`
0000000000000000000000000000000000000000;;		TrafficFilterOverrideAllowed       *bool `xml:"trafficFilterOverrideAllowed"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupPolicy"] = reflect.TypeOf((*DVPortgroupPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		DVPortgroupEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec    DVPortgroupConfigSpec     `xml:"configSpec"`
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupReconfiguredEvent"] = reflect.TypeOf((*DVPortgroupReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupRenamedEvent struct {
0000000000000000000000000000000000000000;;		DVPortgroupEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupRenamedEvent"] = reflect.TypeOf((*DVPortgroupRenamedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupRollbackRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EntityBackup *EntityBackupConfig    `xml:"entityBackup,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupRollbackRequestType"] = reflect.TypeOf((*DVPortgroupRollbackRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupRollback_Task DVPortgroupRollbackRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupRollback_Task"] = reflect.TypeOf((*DVPortgroupRollback_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupRollback_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVPortgroupSelection struct {
0000000000000000000000000000000000000000;;		SelectionSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DvsUuid      string   `xml:"dvsUuid"`
0000000000000000000000000000000000000000;;		PortgroupKey []string `xml:"portgroupKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVPortgroupSelection"] = reflect.TypeOf((*DVPortgroupSelection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSBackupRestoreCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BackupRestoreSupported bool `xml:"backupRestoreSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSBackupRestoreCapability"] = reflect.TypeOf((*DVSBackupRestoreCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DvsOperationSupported              *bool                                     `xml:"dvsOperationSupported"`
0000000000000000000000000000000000000000;;		DvPortGroupOperationSupported      *bool                                     `xml:"dvPortGroupOperationSupported"`
0000000000000000000000000000000000000000;;		DvPortOperationSupported           *bool                                     `xml:"dvPortOperationSupported"`
0000000000000000000000000000000000000000;;		CompatibleHostComponentProductInfo []DistributedVirtualSwitchHostProductSpec `xml:"compatibleHostComponentProductInfo,omitempty"`
0000000000000000000000000000000000000000;;		FeaturesSupported                  BaseDVSFeatureCapability                  `xml:"featuresSupported,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSCapability"] = reflect.TypeOf((*DVSCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid                                string                                    `xml:"uuid"`
0000000000000000000000000000000000000000;;		Name                                string                                    `xml:"name"`
0000000000000000000000000000000000000000;;		NumStandalonePorts                  int32                                     `xml:"numStandalonePorts"`
0000000000000000000000000000000000000000;;		NumPorts                            int32                                     `xml:"numPorts"`
0000000000000000000000000000000000000000;;		MaxPorts                            int32                                     `xml:"maxPorts"`
0000000000000000000000000000000000000000;;		UplinkPortPolicy                    BaseDVSUplinkPortPolicy                   `xml:"uplinkPortPolicy,typeattr"`
0000000000000000000000000000000000000000;;		UplinkPortgroup                     []ManagedObjectReference                  `xml:"uplinkPortgroup,omitempty"`
0000000000000000000000000000000000000000;;		DefaultPortConfig                   BaseDVPortSetting                         `xml:"defaultPortConfig,typeattr"`
0000000000000000000000000000000000000000;;		Host                                []DistributedVirtualSwitchHostMember      `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		ProductInfo                         DistributedVirtualSwitchProductSpec       `xml:"productInfo"`
0000000000000000000000000000000000000000;;		TargetInfo                          *DistributedVirtualSwitchProductSpec      `xml:"targetInfo,omitempty"`
0000000000000000000000000000000000000000;;		ExtensionKey                        string                                    `xml:"extensionKey,omitempty"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig                []DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;		Policy                              *DVSPolicy                                `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;		Description                         string                                    `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		ConfigVersion                       string                                    `xml:"configVersion"`
0000000000000000000000000000000000000000;;		Contact                             DVSContactInfo                            `xml:"contact"`
0000000000000000000000000000000000000000;;		SwitchIpAddress                     string                                    `xml:"switchIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		CreateTime                          time.Time                                 `xml:"createTime"`
0000000000000000000000000000000000000000;;		NetworkResourceManagementEnabled    *bool                                     `xml:"networkResourceManagementEnabled"`
0000000000000000000000000000000000000000;;		DefaultProxySwitchMaxNumPorts       int32                                     `xml:"defaultProxySwitchMaxNumPorts,omitempty"`
0000000000000000000000000000000000000000;;		HealthCheckConfig                   []BaseDVSHealthCheckConfig                `xml:"healthCheckConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		InfrastructureTrafficResourceConfig []DvsHostInfrastructureTrafficResource    `xml:"infrastructureTrafficResourceConfig,omitempty"`
0000000000000000000000000000000000000000;;		NetworkResourceControlVersion       string                                    `xml:"networkResourceControlVersion,omitempty"`
0000000000000000000000000000000000000000;;		VmVnicNetworkResourcePool           []DVSVmVnicNetworkResourcePool            `xml:"vmVnicNetworkResourcePool,omitempty"`
0000000000000000000000000000000000000000;;		PnicCapacityRatioForReservation     int32                                     `xml:"pnicCapacityRatioForReservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSConfigInfo"] = reflect.TypeOf((*DVSConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigVersion                       string                                         `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;		Name                                string                                         `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		NumStandalonePorts                  int32                                          `xml:"numStandalonePorts,omitempty"`
0000000000000000000000000000000000000000;;		MaxPorts                            int32                                          `xml:"maxPorts,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPortPolicy                    BaseDVSUplinkPortPolicy                        `xml:"uplinkPortPolicy,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		UplinkPortgroup                     []ManagedObjectReference                       `xml:"uplinkPortgroup,omitempty"`
0000000000000000000000000000000000000000;;		DefaultPortConfig                   BaseDVPortSetting                              `xml:"defaultPortConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Host                                []DistributedVirtualSwitchHostMemberConfigSpec `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		ExtensionKey                        string                                         `xml:"extensionKey,omitempty"`
0000000000000000000000000000000000000000;;		Description                         string                                         `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Policy                              *DVSPolicy                                     `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig                []DistributedVirtualSwitchKeyedOpaqueBlob      `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;		Contact                             *DVSContactInfo                                `xml:"contact,omitempty"`
0000000000000000000000000000000000000000;;		SwitchIpAddress                     string                                         `xml:"switchIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		DefaultProxySwitchMaxNumPorts       int32                                          `xml:"defaultProxySwitchMaxNumPorts,omitempty"`
0000000000000000000000000000000000000000;;		InfrastructureTrafficResourceConfig []DvsHostInfrastructureTrafficResource         `xml:"infrastructureTrafficResourceConfig,omitempty"`
0000000000000000000000000000000000000000;;		NetworkResourceControlVersion       string                                         `xml:"networkResourceControlVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSConfigSpec"] = reflect.TypeOf((*DVSConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSContactInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name    string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Contact string `xml:"contact,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSContactInfo"] = reflect.TypeOf((*DVSContactInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSCreateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec  BaseDVSConfigSpec                    `xml:"configSpec,typeattr"`
0000000000000000000000000000000000000000;;		ProductInfo *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
0000000000000000000000000000000000000000;;		Capability  *DVSCapability                       `xml:"capability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSCreateSpec"] = reflect.TypeOf((*DVSCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSFailureCriteria struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CheckSpeed        *StringPolicy `xml:"checkSpeed,omitempty"`
0000000000000000000000000000000000000000;;		Speed             *IntPolicy    `xml:"speed,omitempty"`
0000000000000000000000000000000000000000;;		CheckDuplex       *BoolPolicy   `xml:"checkDuplex,omitempty"`
0000000000000000000000000000000000000000;;		FullDuplex        *BoolPolicy   `xml:"fullDuplex,omitempty"`
0000000000000000000000000000000000000000;;		CheckErrorPercent *BoolPolicy   `xml:"checkErrorPercent,omitempty"`
0000000000000000000000000000000000000000;;		Percentage        *IntPolicy    `xml:"percentage,omitempty"`
0000000000000000000000000000000000000000;;		CheckBeacon       *BoolPolicy   `xml:"checkBeacon,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSFailureCriteria"] = reflect.TypeOf((*DVSFailureCriteria)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSFeatureCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkResourceManagementSupported  bool                                    `xml:"networkResourceManagementSupported"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2Supported           bool                                    `xml:"vmDirectPathGen2Supported"`
0000000000000000000000000000000000000000;;		NicTeamingPolicy                    []string                                `xml:"nicTeamingPolicy,omitempty"`
0000000000000000000000000000000000000000;;		NetworkResourcePoolHighShareValue   int32                                   `xml:"networkResourcePoolHighShareValue,omitempty"`
0000000000000000000000000000000000000000;;		NetworkResourceManagementCapability *DVSNetworkResourceManagementCapability `xml:"networkResourceManagementCapability,omitempty"`
0000000000000000000000000000000000000000;;		HealthCheckCapability               BaseDVSHealthCheckCapability            `xml:"healthCheckCapability,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		RollbackCapability                  *DVSRollbackCapability                  `xml:"rollbackCapability,omitempty"`
0000000000000000000000000000000000000000;;		BackupRestoreCapability             *DVSBackupRestoreCapability             `xml:"backupRestoreCapability,omitempty"`
0000000000000000000000000000000000000000;;		NetworkFilterSupported              *bool                                   `xml:"networkFilterSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSFeatureCapability"] = reflect.TypeOf((*DVSFeatureCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSHealthCheckCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSHealthCheckCapability"] = reflect.TypeOf((*DVSHealthCheckCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSHealthCheckConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enable   *bool `xml:"enable"`
0000000000000000000000000000000000000000;;		Interval int32 `xml:"interval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSHealthCheckConfig"] = reflect.TypeOf((*DVSHealthCheckConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSHostLocalPortInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchUuid string            `xml:"switchUuid"`
0000000000000000000000000000000000000000;;		PortKey    string            `xml:"portKey"`
0000000000000000000000000000000000000000;;		Setting    BaseDVPortSetting `xml:"setting,typeattr"`
0000000000000000000000000000000000000000;;		Vnic       string            `xml:"vnic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSHostLocalPortInfo"] = reflect.TypeOf((*DVSHostLocalPortInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerDvsConfigTarget struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DistributedVirtualPortgroup []DistributedVirtualPortgroupInfo `xml:"distributedVirtualPortgroup,omitempty"`
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch    []DistributedVirtualSwitchInfo    `xml:"distributedVirtualSwitch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerDvsConfigTarget"] = reflect.TypeOf((*DVSManagerDvsConfigTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerExportEntityRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SelectionSet []BaseSelectionSet     `xml:"selectionSet,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerExportEntityRequestType"] = reflect.TypeOf((*DVSManagerExportEntityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerExportEntity_Task DVSManagerExportEntityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerExportEntity_Task"] = reflect.TypeOf((*DVSManagerExportEntity_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerExportEntity_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerImportEntityRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EntityBackup []EntityBackupConfig   `xml:"entityBackup"`
0000000000000000000000000000000000000000;;		ImportType   string                 `xml:"importType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerImportEntityRequestType"] = reflect.TypeOf((*DVSManagerImportEntityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerImportEntity_Task DVSManagerImportEntityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerImportEntity_Task"] = reflect.TypeOf((*DVSManagerImportEntity_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerImportEntity_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerLookupDvPortGroup DVSManagerLookupDvPortGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerLookupDvPortGroup"] = reflect.TypeOf((*DVSManagerLookupDvPortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerLookupDvPortGroupRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SwitchUuid   string                 `xml:"switchUuid"`
0000000000000000000000000000000000000000;;		PortgroupKey string                 `xml:"portgroupKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSManagerLookupDvPortGroupRequestType"] = reflect.TypeOf((*DVSManagerLookupDvPortGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSManagerLookupDvPortGroupResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSNameArrayUplinkPortPolicy struct {
0000000000000000000000000000000000000000;;		DVSUplinkPortPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UplinkPortName []string `xml:"uplinkPortName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSNameArrayUplinkPortPolicy"] = reflect.TypeOf((*DVSNameArrayUplinkPortPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSNetworkResourceManagementCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkResourceManagementSupported       bool  `xml:"networkResourceManagementSupported"`
0000000000000000000000000000000000000000;;		NetworkResourcePoolHighShareValue        int32 `xml:"networkResourcePoolHighShareValue"`
0000000000000000000000000000000000000000;;		QosSupported                             bool  `xml:"qosSupported"`
0000000000000000000000000000000000000000;;		UserDefinedNetworkResourcePoolsSupported bool  `xml:"userDefinedNetworkResourcePoolsSupported"`
0000000000000000000000000000000000000000;;		NetworkResourceControlVersion3Supported  *bool `xml:"networkResourceControlVersion3Supported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSNetworkResourceManagementCapability"] = reflect.TypeOf((*DVSNetworkResourceManagementCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSNetworkResourcePool struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            string                               `xml:"key"`
0000000000000000000000000000000000000000;;		Name           string                               `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description    string                               `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		ConfigVersion  string                               `xml:"configVersion"`
0000000000000000000000000000000000000000;;		AllocationInfo DVSNetworkResourcePoolAllocationInfo `xml:"allocationInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSNetworkResourcePool"] = reflect.TypeOf((*DVSNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSNetworkResourcePoolAllocationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Limit       int64       `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Shares      *SharesInfo `xml:"shares,omitempty"`
0000000000000000000000000000000000000000;;		PriorityTag int32       `xml:"priorityTag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSNetworkResourcePoolAllocationInfo"] = reflect.TypeOf((*DVSNetworkResourcePoolAllocationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSNetworkResourcePoolConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            string                                `xml:"key"`
0000000000000000000000000000000000000000;;		ConfigVersion  string                                `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;		AllocationInfo *DVSNetworkResourcePoolAllocationInfo `xml:"allocationInfo,omitempty"`
0000000000000000000000000000000000000000;;		Name           string                                `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description    string                                `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSNetworkResourcePoolConfigSpec"] = reflect.TypeOf((*DVSNetworkResourcePoolConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoPreInstallAllowed *bool `xml:"autoPreInstallAllowed"`
0000000000000000000000000000000000000000;;		AutoUpgradeAllowed    *bool `xml:"autoUpgradeAllowed"`
0000000000000000000000000000000000000000;;		PartialUpgradeAllowed *bool `xml:"partialUpgradeAllowed"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSPolicy"] = reflect.TypeOf((*DVSPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSRollbackCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RollbackSupported bool `xml:"rollbackSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSRollbackCapability"] = reflect.TypeOf((*DVSRollbackCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSRollbackRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EntityBackup *EntityBackupConfig    `xml:"entityBackup,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSRollbackRequestType"] = reflect.TypeOf((*DVSRollbackRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSRollback_Task DVSRollbackRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSRollback_Task"] = reflect.TypeOf((*DVSRollback_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSRollback_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostMemberRuntime   []HostMemberRuntimeInfo `xml:"hostMemberRuntime,omitempty"`
0000000000000000000000000000000000000000;;		ResourceRuntimeInfo *DvsResourceRuntimeInfo `xml:"resourceRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSRuntimeInfo"] = reflect.TypeOf((*DVSRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSSecurityPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowPromiscuous *BoolPolicy `xml:"allowPromiscuous,omitempty"`
0000000000000000000000000000000000000000;;		MacChanges       *BoolPolicy `xml:"macChanges,omitempty"`
0000000000000000000000000000000000000000;;		ForgedTransmits  *BoolPolicy `xml:"forgedTransmits,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSSecurityPolicy"] = reflect.TypeOf((*DVSSecurityPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSSelection struct {
0000000000000000000000000000000000000000;;		SelectionSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DvsUuid string `xml:"dvsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSSelection"] = reflect.TypeOf((*DVSSelection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name          string                               `xml:"name"`
0000000000000000000000000000000000000000;;		Uuid          string                               `xml:"uuid"`
0000000000000000000000000000000000000000;;		NumPorts      int32                                `xml:"numPorts"`
0000000000000000000000000000000000000000;;		ProductInfo   *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
0000000000000000000000000000000000000000;;		HostMember    []ManagedObjectReference             `xml:"hostMember,omitempty"`
0000000000000000000000000000000000000000;;		Vm            []ManagedObjectReference             `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Host          []ManagedObjectReference             `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		PortgroupName []string                             `xml:"portgroupName,omitempty"`
0000000000000000000000000000000000000000;;		Description   string                               `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Contact       *DVSContactInfo                      `xml:"contact,omitempty"`
0000000000000000000000000000000000000000;;		NumHosts      int32                                `xml:"numHosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSSummary"] = reflect.TypeOf((*DVSSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSTrafficShapingPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled          *BoolPolicy `xml:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		AverageBandwidth *LongPolicy `xml:"averageBandwidth,omitempty"`
0000000000000000000000000000000000000000;;		PeakBandwidth    *LongPolicy `xml:"peakBandwidth,omitempty"`
0000000000000000000000000000000000000000;;		BurstSize        *LongPolicy `xml:"burstSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSTrafficShapingPolicy"] = reflect.TypeOf((*DVSTrafficShapingPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSUplinkPortPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSUplinkPortPolicy"] = reflect.TypeOf((*DVSUplinkPortPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSVendorSpecificConfig struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyValue []DistributedVirtualSwitchKeyedOpaqueBlob `xml:"keyValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSVendorSpecificConfig"] = reflect.TypeOf((*DVSVendorSpecificConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DVSVmVnicNetworkResourcePool struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            string                       `xml:"key"`
0000000000000000000000000000000000000000;;		Name           string                       `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description    string                       `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		ConfigVersion  string                       `xml:"configVersion"`
0000000000000000000000000000000000000000;;		AllocationInfo *DvsVmVnicResourceAllocation `xml:"allocationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DVSVmVnicNetworkResourcePool"] = reflect.TypeOf((*DVSVmVnicNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DailyTaskScheduler struct {
0000000000000000000000000000000000000000;;		HourlyTaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hour int32 `xml:"hour"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DailyTaskScheduler"] = reflect.TypeOf((*DailyTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasAdmissionControlDisabledEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasAdmissionControlDisabledEvent"] = reflect.TypeOf((*DasAdmissionControlDisabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasAdmissionControlEnabledEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasAdmissionControlEnabledEvent"] = reflect.TypeOf((*DasAdmissionControlEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasAgentFoundEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasAgentFoundEvent"] = reflect.TypeOf((*DasAgentFoundEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasAgentUnavailableEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasAgentUnavailableEvent"] = reflect.TypeOf((*DasAgentUnavailableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasClusterIsolatedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasClusterIsolatedEvent"] = reflect.TypeOf((*DasClusterIsolatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasConfigFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string      `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		Output string      `xml:"output,omitempty"`
0000000000000000000000000000000000000000;;		Event  []BaseEvent `xml:"event,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasConfigFault"] = reflect.TypeOf((*DasConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasConfigFaultFault DasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasConfigFaultFault"] = reflect.TypeOf((*DasConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasDisabledEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasDisabledEvent"] = reflect.TypeOf((*DasDisabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasEnabledEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasEnabledEvent"] = reflect.TypeOf((*DasEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasHeartbeatDatastoreInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference   `xml:"datastore"`
0000000000000000000000000000000000000000;;		Hosts     []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasHeartbeatDatastoreInfo"] = reflect.TypeOf((*DasHeartbeatDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasHostFailedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailedHost HostEventArgument `xml:"failedHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasHostFailedEvent"] = reflect.TypeOf((*DasHostFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DasHostIsolatedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsolatedHost HostEventArgument `xml:"isolatedHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DasHostIsolatedEvent"] = reflect.TypeOf((*DasHostIsolatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabaseError struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatabaseError"] = reflect.TypeOf((*DatabaseError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabaseErrorFault DatabaseError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatabaseErrorFault"] = reflect.TypeOf((*DatabaseErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabaseSizeEstimate struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Size int64 `xml:"size"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatabaseSizeEstimate"] = reflect.TypeOf((*DatabaseSizeEstimate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabaseSizeParam struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InventoryDesc InventoryDescription              `xml:"inventoryDesc"`
0000000000000000000000000000000000000000;;		PerfStatsDesc *PerformanceStatisticsDescription `xml:"perfStatsDesc,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatabaseSizeParam"] = reflect.TypeOf((*DatabaseSizeParam)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterConfigInfo"] = reflect.TypeOf((*DatacenterConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterConfigSpec"] = reflect.TypeOf((*DatacenterConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterCreatedEvent struct {
0000000000000000000000000000000000000000;;		DatacenterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent FolderEventArgument `xml:"parent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterCreatedEvent"] = reflect.TypeOf((*DatacenterCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterEvent"] = reflect.TypeOf((*DatacenterEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datacenter ManagedObjectReference `xml:"datacenter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterEventArgument"] = reflect.TypeOf((*DatacenterEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterMismatch struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InvalidArgument    []DatacenterMismatchArgument `xml:"invalidArgument"`
0000000000000000000000000000000000000000;;		ExpectedDatacenter ManagedObjectReference       `xml:"expectedDatacenter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterMismatch"] = reflect.TypeOf((*DatacenterMismatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterMismatchArgument struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity          ManagedObjectReference  `xml:"entity"`
0000000000000000000000000000000000000000;;		InputDatacenter *ManagedObjectReference `xml:"inputDatacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterMismatchArgument"] = reflect.TypeOf((*DatacenterMismatchArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterMismatchFault DatacenterMismatch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterMismatchFault"] = reflect.TypeOf((*DatacenterMismatchFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterRenamedEvent struct {
0000000000000000000000000000000000000000;;		DatacenterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatacenterRenamedEvent"] = reflect.TypeOf((*DatacenterRenamedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DirectoryHierarchySupported      bool  `xml:"directoryHierarchySupported"`
0000000000000000000000000000000000000000;;		RawDiskMappingsSupported         bool  `xml:"rawDiskMappingsSupported"`
0000000000000000000000000000000000000000;;		PerFileThinProvisioningSupported bool  `xml:"perFileThinProvisioningSupported"`
0000000000000000000000000000000000000000;;		StorageIORMSupported             *bool `xml:"storageIORMSupported"`
0000000000000000000000000000000000000000;;		NativeSnapshotSupported          *bool `xml:"nativeSnapshotSupported"`
0000000000000000000000000000000000000000;;		TopLevelDirectoryCreateSupported *bool `xml:"topLevelDirectoryCreateSupported"`
0000000000000000000000000000000000000000;;		SeSparseSupported                *bool `xml:"seSparseSupported"`
0000000000000000000000000000000000000000;;		VmfsSparseSupported              *bool `xml:"vmfsSparseSupported"`
0000000000000000000000000000000000000000;;		VsanSparseSupported              *bool `xml:"vsanSparseSupported"`
0000000000000000000000000000000000000000;;		UpitSupported                    *bool `xml:"upitSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreCapability"] = reflect.TypeOf((*DatastoreCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreCapacityIncreasedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldCapacity int64 `xml:"oldCapacity"`
0000000000000000000000000000000000000000;;		NewCapacity int64 `xml:"newCapacity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreCapacityIncreasedEvent"] = reflect.TypeOf((*DatastoreCapacityIncreasedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreDestroyedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreDestroyedEvent"] = reflect.TypeOf((*DatastoreDestroyedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreDiscoveredEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreDiscoveredEvent"] = reflect.TypeOf((*DatastoreDiscoveredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreDuplicatedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreDuplicatedEvent"] = reflect.TypeOf((*DatastoreDuplicatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreEnterMaintenanceMode DatastoreEnterMaintenanceModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreEnterMaintenanceMode"] = reflect.TypeOf((*DatastoreEnterMaintenanceMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreEnterMaintenanceModeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreEnterMaintenanceModeRequestType"] = reflect.TypeOf((*DatastoreEnterMaintenanceModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreEnterMaintenanceModeResponse struct {
0000000000000000000000000000000000000000;;		Returnval StoragePlacementResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreEvent"] = reflect.TypeOf((*DatastoreEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreEventArgument"] = reflect.TypeOf((*DatastoreEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreExitMaintenanceModeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreExitMaintenanceModeRequestType"] = reflect.TypeOf((*DatastoreExitMaintenanceModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreExitMaintenanceMode_Task DatastoreExitMaintenanceModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreExitMaintenanceMode_Task"] = reflect.TypeOf((*DatastoreExitMaintenanceMode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreExitMaintenanceMode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreFileCopiedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreFileEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceDatastore DatastoreEventArgument `xml:"sourceDatastore"`
0000000000000000000000000000000000000000;;		SourceFile      string                 `xml:"sourceFile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreFileCopiedEvent"] = reflect.TypeOf((*DatastoreFileCopiedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreFileDeletedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreFileEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreFileDeletedEvent"] = reflect.TypeOf((*DatastoreFileDeletedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreFileEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TargetFile        string `xml:"targetFile"`
0000000000000000000000000000000000000000;;		SourceOfOperation string `xml:"sourceOfOperation,omitempty"`
0000000000000000000000000000000000000000;;		Succeeded         *bool  `xml:"succeeded"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreFileEvent"] = reflect.TypeOf((*DatastoreFileEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreFileMovedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreFileEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceDatastore DatastoreEventArgument `xml:"sourceDatastore"`
0000000000000000000000000000000000000000;;		SourceFile      string                 `xml:"sourceFile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreFileMovedEvent"] = reflect.TypeOf((*DatastoreFileMovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreHostMount struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key       ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		MountInfo HostMountInfo          `xml:"mountInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreHostMount"] = reflect.TypeOf((*DatastoreHostMount)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreIORMReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreIORMReconfiguredEvent"] = reflect.TypeOf((*DatastoreIORMReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name                   string     `xml:"name"`
0000000000000000000000000000000000000000;;		Url                    string     `xml:"url"`
0000000000000000000000000000000000000000;;		FreeSpace              int64      `xml:"freeSpace"`
0000000000000000000000000000000000000000;;		MaxFileSize            int64      `xml:"maxFileSize"`
0000000000000000000000000000000000000000;;		MaxVirtualDiskCapacity int64      `xml:"maxVirtualDiskCapacity,omitempty"`
0000000000000000000000000000000000000000;;		MaxMemoryFileSize      int64      `xml:"maxMemoryFileSize,omitempty"`
0000000000000000000000000000000000000000;;		Timestamp              *time.Time `xml:"timestamp"`
0000000000000000000000000000000000000000;;		ContainerId            string     `xml:"containerId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreInfo"] = reflect.TypeOf((*DatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreMountPathDatastorePair struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldMountPath string                 `xml:"oldMountPath"`
0000000000000000000000000000000000000000;;		Datastore    ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreMountPathDatastorePair"] = reflect.TypeOf((*DatastoreMountPathDatastorePair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreNotWritableOnHost struct {
0000000000000000000000000000000000000000;;		InvalidDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreNotWritableOnHost"] = reflect.TypeOf((*DatastoreNotWritableOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreNotWritableOnHostFault BaseDatastoreNotWritableOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreNotWritableOnHostFault"] = reflect.TypeOf((*DatastoreNotWritableOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UnsupportedVolumes []VirtualMachineDatastoreVolumeOption `xml:"unsupportedVolumes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreOption"] = reflect.TypeOf((*DatastoreOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastorePrincipalConfigured struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastorePrincipal string `xml:"datastorePrincipal"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastorePrincipalConfigured"] = reflect.TypeOf((*DatastorePrincipalConfigured)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreRemovedOnHostEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreRemovedOnHostEvent"] = reflect.TypeOf((*DatastoreRemovedOnHostEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreRenamedEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreRenamedEvent"] = reflect.TypeOf((*DatastoreRenamedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreRenamedOnHostEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreRenamedOnHostEvent"] = reflect.TypeOf((*DatastoreRenamedOnHostEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore          *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		Name               string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Url                string                  `xml:"url"`
0000000000000000000000000000000000000000;;		Capacity           int64                   `xml:"capacity"`
0000000000000000000000000000000000000000;;		FreeSpace          int64                   `xml:"freeSpace"`
0000000000000000000000000000000000000000;;		Uncommitted        int64                   `xml:"uncommitted,omitempty"`
0000000000000000000000000000000000000000;;		Accessible         bool                    `xml:"accessible"`
0000000000000000000000000000000000000000;;		MultipleHostAccess *bool                   `xml:"multipleHostAccess"`
0000000000000000000000000000000000000000;;		Type               string                  `xml:"type"`
0000000000000000000000000000000000000000;;		MaintenanceMode    string                  `xml:"maintenanceMode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreSummary"] = reflect.TypeOf((*DatastoreSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreVVolContainerFailoverPair struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SrcContainer string     `xml:"srcContainer,omitempty"`
0000000000000000000000000000000000000000;;		TgtContainer string     `xml:"tgtContainer"`
0000000000000000000000000000000000000000;;		VvolMapping  []KeyValue `xml:"vvolMapping,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreVVolContainerFailoverPair"] = reflect.TypeOf((*DatastoreVVolContainerFailoverPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DateTimeProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DateTimeProfile"] = reflect.TypeOf((*DateTimeProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DecodeLicense DecodeLicenseRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DecodeLicense"] = reflect.TypeOf((*DecodeLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DecodeLicenseRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LicenseKey string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DecodeLicenseRequestType"] = reflect.TypeOf((*DecodeLicenseRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DecodeLicenseResponse struct {
0000000000000000000000000000000000000000;;		Returnval LicenseManagerLicenseInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefragmentAllDisks DefragmentAllDisksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DefragmentAllDisks"] = reflect.TypeOf((*DefragmentAllDisks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefragmentAllDisksRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DefragmentAllDisksRequestType"] = reflect.TypeOf((*DefragmentAllDisksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefragmentAllDisksResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefragmentVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DefragmentVirtualDiskRequestType"] = reflect.TypeOf((*DefragmentVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefragmentVirtualDisk_Task DefragmentVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DefragmentVirtualDisk_Task"] = reflect.TypeOf((*DefragmentVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefragmentVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteCustomizationSpec DeleteCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteCustomizationSpec"] = reflect.TypeOf((*DeleteCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteCustomizationSpecRequestType"] = reflect.TypeOf((*DeleteCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDatastoreFileRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteDatastoreFileRequestType"] = reflect.TypeOf((*DeleteDatastoreFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDatastoreFile_Task DeleteDatastoreFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteDatastoreFile_Task"] = reflect.TypeOf((*DeleteDatastoreFile_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDatastoreFile_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDirectory DeleteDirectoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteDirectory"] = reflect.TypeOf((*DeleteDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDirectoryInGuest DeleteDirectoryInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteDirectoryInGuest"] = reflect.TypeOf((*DeleteDirectoryInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDirectoryInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth          BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		DirectoryPath string                  `xml:"directoryPath"`
0000000000000000000000000000000000000000;;		Recursive     bool                    `xml:"recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteDirectoryInGuestRequestType"] = reflect.TypeOf((*DeleteDirectoryInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDirectoryInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDirectoryRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter    *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		DatastorePath string                  `xml:"datastorePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteDirectoryRequestType"] = reflect.TypeOf((*DeleteDirectoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDirectoryResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteFile DeleteFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteFile"] = reflect.TypeOf((*DeleteFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteFileInGuest DeleteFileInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteFileInGuest"] = reflect.TypeOf((*DeleteFileInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteFileInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm       ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth     BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		FilePath string                  `xml:"filePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteFileInGuestRequestType"] = reflect.TypeOf((*DeleteFileInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteFileInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteFileRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DatastorePath string                 `xml:"datastorePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteFileRequestType"] = reflect.TypeOf((*DeleteFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteFileResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostSpecification DeleteHostSpecificationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteHostSpecification"] = reflect.TypeOf((*DeleteHostSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostSpecificationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteHostSpecificationRequestType"] = reflect.TypeOf((*DeleteHostSpecificationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostSpecificationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostSubSpecification DeleteHostSubSpecificationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteHostSubSpecification"] = reflect.TypeOf((*DeleteHostSubSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostSubSpecificationRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host        ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		SubSpecName string                 `xml:"subSpecName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteHostSubSpecificationRequestType"] = reflect.TypeOf((*DeleteHostSubSpecificationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostSubSpecificationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteRegistryKeyInGuest DeleteRegistryKeyInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteRegistryKeyInGuest"] = reflect.TypeOf((*DeleteRegistryKeyInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteRegistryKeyInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm        ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth      BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		KeyName   GuestRegKeyNameSpec     `xml:"keyName"`
0000000000000000000000000000000000000000;;		Recursive bool                    `xml:"recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteRegistryKeyInGuestRequestType"] = reflect.TypeOf((*DeleteRegistryKeyInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteRegistryKeyInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteRegistryValueInGuest DeleteRegistryValueInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteRegistryValueInGuest"] = reflect.TypeOf((*DeleteRegistryValueInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteRegistryValueInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm        ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth      BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		ValueName GuestRegValueNameSpec   `xml:"valueName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteRegistryValueInGuestRequestType"] = reflect.TypeOf((*DeleteRegistryValueInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteRegistryValueInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteScsiLunState DeleteScsiLunStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteScsiLunState"] = reflect.TypeOf((*DeleteScsiLunState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteScsiLunStateRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LunCanonicalName string                 `xml:"lunCanonicalName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteScsiLunStateRequestType"] = reflect.TypeOf((*DeleteScsiLunStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteScsiLunStateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVStorageObjectRequestType"] = reflect.TypeOf((*DeleteVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVStorageObject_Task DeleteVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVStorageObject_Task"] = reflect.TypeOf((*DeleteVStorageObject_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVStorageObject_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVffsVolumeState DeleteVffsVolumeStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVffsVolumeState"] = reflect.TypeOf((*DeleteVffsVolumeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVffsVolumeStateRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VffsUuid string                 `xml:"vffsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVffsVolumeStateRequestType"] = reflect.TypeOf((*DeleteVffsVolumeStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVffsVolumeStateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVirtualDiskRequestType"] = reflect.TypeOf((*DeleteVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVirtualDisk_Task DeleteVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVirtualDisk_Task"] = reflect.TypeOf((*DeleteVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVmfsVolumeState DeleteVmfsVolumeStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVmfsVolumeState"] = reflect.TypeOf((*DeleteVmfsVolumeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVmfsVolumeStateRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid string                 `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVmfsVolumeStateRequestType"] = reflect.TypeOf((*DeleteVmfsVolumeStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVmfsVolumeStateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVsanObjects DeleteVsanObjectsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVsanObjects"] = reflect.TypeOf((*DeleteVsanObjects)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVsanObjectsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids []string               `xml:"uuids"`
0000000000000000000000000000000000000000;;		Force *bool                  `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeleteVsanObjectsRequestType"] = reflect.TypeOf((*DeleteVsanObjectsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVsanObjectsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostVsanInternalSystemDeleteVsanObjectsResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeltaDiskFormatNotSupported struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore       []ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		DeltaDiskFormat string                   `xml:"deltaDiskFormat"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeltaDiskFormatNotSupported"] = reflect.TypeOf((*DeltaDiskFormatNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeltaDiskFormatNotSupportedFault DeltaDiskFormatNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeltaDiskFormatNotSupportedFault"] = reflect.TypeOf((*DeltaDiskFormatNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Description struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Label   string `xml:"label"`
0000000000000000000000000000000000000000;;		Summary string `xml:"summary"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Description"] = reflect.TypeOf((*Description)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeselectVnic DeselectVnicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeselectVnic"] = reflect.TypeOf((*DeselectVnic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeselectVnicForNicType DeselectVnicForNicTypeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeselectVnicForNicType"] = reflect.TypeOf((*DeselectVnicForNicType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeselectVnicForNicTypeRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		NicType string                 `xml:"nicType"`
0000000000000000000000000000000000000000;;		Device  string                 `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeselectVnicForNicTypeRequestType"] = reflect.TypeOf((*DeselectVnicForNicTypeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeselectVnicForNicTypeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeselectVnicRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeselectVnicRequestType"] = reflect.TypeOf((*DeselectVnicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeselectVnicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestinationSwitchFull struct {
0000000000000000000000000000000000000000;;		CannotAccessNetwork
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestinationSwitchFull"] = reflect.TypeOf((*DestinationSwitchFull)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestinationSwitchFullFault DestinationSwitchFull
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestinationSwitchFullFault"] = reflect.TypeOf((*DestinationSwitchFullFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestinationVsanDisabled struct {
0000000000000000000000000000000000000000;;		CannotMoveVsanEnabledHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestinationCluster string `xml:"destinationCluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestinationVsanDisabled"] = reflect.TypeOf((*DestinationVsanDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestinationVsanDisabledFault DestinationVsanDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestinationVsanDisabledFault"] = reflect.TypeOf((*DestinationVsanDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyChildren DestroyChildrenRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyChildren"] = reflect.TypeOf((*DestroyChildren)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyChildrenRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyChildrenRequestType"] = reflect.TypeOf((*DestroyChildrenRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyChildrenResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyCollector DestroyCollectorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyCollector"] = reflect.TypeOf((*DestroyCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyCollectorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyCollectorRequestType"] = reflect.TypeOf((*DestroyCollectorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyCollectorResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyDatastore DestroyDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyDatastore"] = reflect.TypeOf((*DestroyDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyDatastoreRequestType"] = reflect.TypeOf((*DestroyDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyDatastoreResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyIpPool DestroyIpPoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyIpPool"] = reflect.TypeOf((*DestroyIpPool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyIpPoolRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc    ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		Id    int32                  `xml:"id"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyIpPoolRequestType"] = reflect.TypeOf((*DestroyIpPoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyIpPoolResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyNetwork DestroyNetworkRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyNetwork"] = reflect.TypeOf((*DestroyNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyNetworkRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyNetworkRequestType"] = reflect.TypeOf((*DestroyNetworkRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyNetworkResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyProfile DestroyProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyProfile"] = reflect.TypeOf((*DestroyProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyProfileRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyProfileRequestType"] = reflect.TypeOf((*DestroyProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyProfileResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyPropertyCollector DestroyPropertyCollectorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyPropertyCollector"] = reflect.TypeOf((*DestroyPropertyCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyPropertyCollectorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyPropertyCollectorRequestType"] = reflect.TypeOf((*DestroyPropertyCollectorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyPropertyCollectorResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyPropertyFilter DestroyPropertyFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyPropertyFilter"] = reflect.TypeOf((*DestroyPropertyFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyPropertyFilterRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyPropertyFilterRequestType"] = reflect.TypeOf((*DestroyPropertyFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyPropertyFilterResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyRequestType"] = reflect.TypeOf((*DestroyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyVffs DestroyVffsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyVffs"] = reflect.TypeOf((*DestroyVffs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyVffsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VffsPath string                 `xml:"vffsPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyVffsRequestType"] = reflect.TypeOf((*DestroyVffsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyVffsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyView DestroyViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyView"] = reflect.TypeOf((*DestroyView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyViewRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DestroyViewRequestType"] = reflect.TypeOf((*DestroyViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyViewResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Destroy_Task DestroyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Destroy_Task"] = reflect.TypeOf((*Destroy_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Destroy_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachDiskRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DiskId ID                     `xml:"diskId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachDiskRequestType"] = reflect.TypeOf((*DetachDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachDisk_Task DetachDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachDisk_Task"] = reflect.TypeOf((*DetachDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachScsiLun DetachScsiLunRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachScsiLun"] = reflect.TypeOf((*DetachScsiLun)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachScsiLunExRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LunUuid []string               `xml:"lunUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachScsiLunExRequestType"] = reflect.TypeOf((*DetachScsiLunExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachScsiLunEx_Task DetachScsiLunExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachScsiLunEx_Task"] = reflect.TypeOf((*DetachScsiLunEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachScsiLunEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachScsiLunRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LunUuid string                 `xml:"lunUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachScsiLunRequestType"] = reflect.TypeOf((*DetachScsiLunRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachScsiLunResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachTagFromVStorageObject DetachTagFromVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachTagFromVStorageObject"] = reflect.TypeOf((*DetachTagFromVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachTagFromVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id       ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Category string                 `xml:"category"`
0000000000000000000000000000000000000000;;		Tag      string                 `xml:"tag"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DetachTagFromVStorageObjectRequestType"] = reflect.TypeOf((*DetachTagFromVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachTagFromVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceBackedVirtualDiskSpec struct {
0000000000000000000000000000000000000000;;		VirtualDiskSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceBackedVirtualDiskSpec"] = reflect.TypeOf((*DeviceBackedVirtualDiskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceBackingNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Backing string `xml:"backing"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceBackingNotSupported"] = reflect.TypeOf((*DeviceBackingNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceBackingNotSupportedFault BaseDeviceBackingNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceBackingNotSupportedFault"] = reflect.TypeOf((*DeviceBackingNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceControllerNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Controller string `xml:"controller"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceControllerNotSupported"] = reflect.TypeOf((*DeviceControllerNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceControllerNotSupportedFault DeviceControllerNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceControllerNotSupportedFault"] = reflect.TypeOf((*DeviceControllerNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceGroupId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id string `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceGroupId"] = reflect.TypeOf((*DeviceGroupId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceHotPlugNotSupported struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceHotPlugNotSupported"] = reflect.TypeOf((*DeviceHotPlugNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceHotPlugNotSupportedFault DeviceHotPlugNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceHotPlugNotSupportedFault"] = reflect.TypeOf((*DeviceHotPlugNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceNotFound struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceNotFound"] = reflect.TypeOf((*DeviceNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceNotFoundFault DeviceNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceNotFoundFault"] = reflect.TypeOf((*DeviceNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceNotSupported"] = reflect.TypeOf((*DeviceNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceNotSupportedFault BaseDeviceNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceNotSupportedFault"] = reflect.TypeOf((*DeviceNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceUnsupportedForVmPlatform struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceUnsupportedForVmPlatform"] = reflect.TypeOf((*DeviceUnsupportedForVmPlatform)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceUnsupportedForVmPlatformFault DeviceUnsupportedForVmPlatform
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceUnsupportedForVmPlatformFault"] = reflect.TypeOf((*DeviceUnsupportedForVmPlatformFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceUnsupportedForVmVersion struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentVersion  string `xml:"currentVersion"`
0000000000000000000000000000000000000000;;		ExpectedVersion string `xml:"expectedVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceUnsupportedForVmVersion"] = reflect.TypeOf((*DeviceUnsupportedForVmVersion)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceUnsupportedForVmVersionFault DeviceUnsupportedForVmVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DeviceUnsupportedForVmVersionFault"] = reflect.TypeOf((*DeviceUnsupportedForVmVersionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiagnosticManagerBundleInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		System *ManagedObjectReference `xml:"system,omitempty"`
0000000000000000000000000000000000000000;;		Url    string                  `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiagnosticManagerBundleInfo"] = reflect.TypeOf((*DiagnosticManagerBundleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiagnosticManagerLogDescriptor struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      string          `xml:"key"`
0000000000000000000000000000000000000000;;		FileName string          `xml:"fileName"`
0000000000000000000000000000000000000000;;		Creator  string          `xml:"creator"`
0000000000000000000000000000000000000000;;		Format   string          `xml:"format"`
0000000000000000000000000000000000000000;;		MimeType string          `xml:"mimeType"`
0000000000000000000000000000000000000000;;		Info     BaseDescription `xml:"info,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiagnosticManagerLogDescriptor"] = reflect.TypeOf((*DiagnosticManagerLogDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiagnosticManagerLogHeader struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LineStart int32    `xml:"lineStart"`
0000000000000000000000000000000000000000;;		LineEnd   int32    `xml:"lineEnd"`
0000000000000000000000000000000000000000;;		LineText  []string `xml:"lineText,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiagnosticManagerLogHeader"] = reflect.TypeOf((*DiagnosticManagerLogHeader)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DigestNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DigestNotSupported"] = reflect.TypeOf((*DigestNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DigestNotSupportedFault DigestNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DigestNotSupportedFault"] = reflect.TypeOf((*DigestNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DirectoryNotEmpty struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DirectoryNotEmpty"] = reflect.TypeOf((*DirectoryNotEmpty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DirectoryNotEmptyFault DirectoryNotEmpty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DirectoryNotEmptyFault"] = reflect.TypeOf((*DirectoryNotEmptyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableAdminNotSupported struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableAdminNotSupported"] = reflect.TypeOf((*DisableAdminNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableAdminNotSupportedFault DisableAdminNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableAdminNotSupportedFault"] = reflect.TypeOf((*DisableAdminNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableEvcModeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableEvcModeRequestType"] = reflect.TypeOf((*DisableEvcModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableEvcMode_Task DisableEvcModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableEvcMode_Task"] = reflect.TypeOf((*DisableEvcMode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableEvcMode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableFeature DisableFeatureRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableFeature"] = reflect.TypeOf((*DisableFeature)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableFeatureRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host       *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		FeatureKey string                  `xml:"featureKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableFeatureRequestType"] = reflect.TypeOf((*DisableFeatureRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableFeatureResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableHyperThreading DisableHyperThreadingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableHyperThreading"] = reflect.TypeOf((*DisableHyperThreading)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableHyperThreadingRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableHyperThreadingRequestType"] = reflect.TypeOf((*DisableHyperThreadingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableHyperThreadingResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableMultipathPath DisableMultipathPathRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableMultipathPath"] = reflect.TypeOf((*DisableMultipathPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableMultipathPathRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PathName string                 `xml:"pathName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableMultipathPathRequestType"] = reflect.TypeOf((*DisableMultipathPathRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableMultipathPathResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableRuleset DisableRulesetRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableRuleset"] = reflect.TypeOf((*DisableRuleset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableRulesetRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableRulesetRequestType"] = reflect.TypeOf((*DisableRulesetRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableRulesetResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableSecondaryVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableSecondaryVMRequestType"] = reflect.TypeOf((*DisableSecondaryVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableSecondaryVM_Task DisableSecondaryVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableSecondaryVM_Task"] = reflect.TypeOf((*DisableSecondaryVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableSecondaryVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableSmartCardAuthentication DisableSmartCardAuthenticationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableSmartCardAuthentication"] = reflect.TypeOf((*DisableSmartCardAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableSmartCardAuthenticationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisableSmartCardAuthenticationRequestType"] = reflect.TypeOf((*DisableSmartCardAuthenticationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableSmartCardAuthenticationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedChangeByService struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceName      string `xml:"serviceName"`
0000000000000000000000000000000000000000;;		DisallowedChange string `xml:"disallowedChange,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedChangeByService"] = reflect.TypeOf((*DisallowedChangeByService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedChangeByServiceFault DisallowedChangeByService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedChangeByServiceFault"] = reflect.TypeOf((*DisallowedChangeByServiceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedDiskModeChange struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedDiskModeChange"] = reflect.TypeOf((*DisallowedDiskModeChange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedDiskModeChangeFault DisallowedDiskModeChange
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedDiskModeChangeFault"] = reflect.TypeOf((*DisallowedDiskModeChangeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedMigrationDeviceAttached struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedMigrationDeviceAttached"] = reflect.TypeOf((*DisallowedMigrationDeviceAttached)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedMigrationDeviceAttachedFault DisallowedMigrationDeviceAttached
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedMigrationDeviceAttachedFault"] = reflect.TypeOf((*DisallowedMigrationDeviceAttachedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedOperationOnFailoverHost struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Hostname string                 `xml:"hostname"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedOperationOnFailoverHost"] = reflect.TypeOf((*DisallowedOperationOnFailoverHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisallowedOperationOnFailoverHostFault DisallowedOperationOnFailoverHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisallowedOperationOnFailoverHostFault"] = reflect.TypeOf((*DisallowedOperationOnFailoverHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisconnectHostRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisconnectHostRequestType"] = reflect.TypeOf((*DisconnectHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisconnectHost_Task DisconnectHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisconnectHost_Task"] = reflect.TypeOf((*DisconnectHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisconnectHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisconnectedHostsBlockingEVC struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisconnectedHostsBlockingEVC"] = reflect.TypeOf((*DisconnectedHostsBlockingEVC)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisconnectedHostsBlockingEVCFault DisconnectedHostsBlockingEVC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DisconnectedHostsBlockingEVCFault"] = reflect.TypeOf((*DisconnectedHostsBlockingEVCFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiscoverFcoeHbas DiscoverFcoeHbasRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiscoverFcoeHbas"] = reflect.TypeOf((*DiscoverFcoeHbas)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiscoverFcoeHbasRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference      `xml:"_this"`
0000000000000000000000000000000000000000;;		FcoeSpec FcoeConfigFcoeSpecification `xml:"fcoeSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiscoverFcoeHbasRequestType"] = reflect.TypeOf((*DiscoverFcoeHbasRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiscoverFcoeHbasResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskChangeExtent struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Start  int64 `xml:"start"`
0000000000000000000000000000000000000000;;		Length int64 `xml:"length"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskChangeExtent"] = reflect.TypeOf((*DiskChangeExtent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskChangeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartOffset int64              `xml:"startOffset"`
0000000000000000000000000000000000000000;;		Length      int64              `xml:"length"`
0000000000000000000000000000000000000000;;		ChangedArea []DiskChangeExtent `xml:"changedArea,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskChangeInfo"] = reflect.TypeOf((*DiskChangeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskHasPartitions struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskHasPartitions"] = reflect.TypeOf((*DiskHasPartitions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskHasPartitionsFault DiskHasPartitions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskHasPartitionsFault"] = reflect.TypeOf((*DiskHasPartitionsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskIsLastRemainingNonSSD struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskIsLastRemainingNonSSD"] = reflect.TypeOf((*DiskIsLastRemainingNonSSD)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskIsLastRemainingNonSSDFault DiskIsLastRemainingNonSSD
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskIsLastRemainingNonSSDFault"] = reflect.TypeOf((*DiskIsLastRemainingNonSSDFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskIsNonLocal struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskIsNonLocal"] = reflect.TypeOf((*DiskIsNonLocal)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskIsNonLocalFault DiskIsNonLocal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskIsNonLocalFault"] = reflect.TypeOf((*DiskIsNonLocalFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskIsUSB struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskIsUSB"] = reflect.TypeOf((*DiskIsUSB)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskIsUSBFault DiskIsUSB
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskIsUSBFault"] = reflect.TypeOf((*DiskIsUSBFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskMoveTypeNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskMoveTypeNotSupported"] = reflect.TypeOf((*DiskMoveTypeNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskMoveTypeNotSupportedFault DiskMoveTypeNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskMoveTypeNotSupportedFault"] = reflect.TypeOf((*DiskMoveTypeNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk int32 `xml:"disk"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskNotSupported"] = reflect.TypeOf((*DiskNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskNotSupportedFault BaseDiskNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskNotSupportedFault"] = reflect.TypeOf((*DiskNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskTooSmall struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskTooSmall"] = reflect.TypeOf((*DiskTooSmall)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskTooSmallFault DiskTooSmall
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiskTooSmallFault"] = reflect.TypeOf((*DiskTooSmallFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DissociateProfile DissociateProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DissociateProfile"] = reflect.TypeOf((*DissociateProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DissociateProfileRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DissociateProfileRequestType"] = reflect.TypeOf((*DissociateProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DissociateProfileResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualPort struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              string                                 `xml:"key"`
0000000000000000000000000000000000000000;;		Config           DVPortConfigInfo                       `xml:"config"`
0000000000000000000000000000000000000000;;		DvsUuid          string                                 `xml:"dvsUuid"`
0000000000000000000000000000000000000000;;		PortgroupKey     string                                 `xml:"portgroupKey,omitempty"`
0000000000000000000000000000000000000000;;		ProxyHost        *ManagedObjectReference                `xml:"proxyHost,omitempty"`
0000000000000000000000000000000000000000;;		Connectee        *DistributedVirtualSwitchPortConnectee `xml:"connectee,omitempty"`
0000000000000000000000000000000000000000;;		Conflict         bool                                   `xml:"conflict"`
0000000000000000000000000000000000000000;;		ConflictPortKey  string                                 `xml:"conflictPortKey,omitempty"`
0000000000000000000000000000000000000000;;		State            *DVPortState                           `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionCookie int32                                  `xml:"connectionCookie,omitempty"`
0000000000000000000000000000000000000000;;		LastStatusChange time.Time                              `xml:"lastStatusChange"`
0000000000000000000000000000000000000000;;		HostLocalPort    *bool                                  `xml:"hostLocalPort"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualPort"] = reflect.TypeOf((*DistributedVirtualPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualPortgroupInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchName                  string                 `xml:"switchName"`
0000000000000000000000000000000000000000;;		SwitchUuid                  string                 `xml:"switchUuid"`
0000000000000000000000000000000000000000;;		PortgroupName               string                 `xml:"portgroupName"`
0000000000000000000000000000000000000000;;		PortgroupKey                string                 `xml:"portgroupKey"`
0000000000000000000000000000000000000000;;		PortgroupType               string                 `xml:"portgroupType"`
0000000000000000000000000000000000000000;;		UplinkPortgroup             bool                   `xml:"uplinkPortgroup"`
0000000000000000000000000000000000000000;;		Portgroup                   ManagedObjectReference `xml:"portgroup"`
0000000000000000000000000000000000000000;;		NetworkReservationSupported *bool                  `xml:"networkReservationSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualPortgroupInfo"] = reflect.TypeOf((*DistributedVirtualPortgroupInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMember struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RuntimeState  *DistributedVirtualSwitchHostMemberRuntimeState `xml:"runtimeState,omitempty"`
0000000000000000000000000000000000000000;;		Config        DistributedVirtualSwitchHostMemberConfigInfo    `xml:"config"`
0000000000000000000000000000000000000000;;		ProductInfo   *DistributedVirtualSwitchProductSpec            `xml:"productInfo,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPortKey []string                                        `xml:"uplinkPortKey,omitempty"`
0000000000000000000000000000000000000000;;		Status        string                                          `xml:"status"`
0000000000000000000000000000000000000000;;		StatusDetail  string                                          `xml:"statusDetail,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMember"] = reflect.TypeOf((*DistributedVirtualSwitchHostMember)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMemberBacking struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMemberBacking"] = reflect.TypeOf((*DistributedVirtualSwitchHostMemberBacking)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMemberConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host                 *ManagedObjectReference                       `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		MaxProxySwitchPorts  int32                                         `xml:"maxProxySwitchPorts"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig []DistributedVirtualSwitchKeyedOpaqueBlob     `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;		Backing              BaseDistributedVirtualSwitchHostMemberBacking `xml:"backing,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMemberConfigInfo"] = reflect.TypeOf((*DistributedVirtualSwitchHostMemberConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMemberConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation            string                                        `xml:"operation"`
0000000000000000000000000000000000000000;;		Host                 ManagedObjectReference                        `xml:"host"`
0000000000000000000000000000000000000000;;		Backing              BaseDistributedVirtualSwitchHostMemberBacking `xml:"backing,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		MaxProxySwitchPorts  int32                                         `xml:"maxProxySwitchPorts,omitempty"`
0000000000000000000000000000000000000000;;		VendorSpecificConfig []DistributedVirtualSwitchKeyedOpaqueBlob     `xml:"vendorSpecificConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMemberConfigSpec"] = reflect.TypeOf((*DistributedVirtualSwitchHostMemberConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMemberPnicBacking struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchHostMemberBacking
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PnicSpec []DistributedVirtualSwitchHostMemberPnicSpec `xml:"pnicSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMemberPnicBacking"] = reflect.TypeOf((*DistributedVirtualSwitchHostMemberPnicBacking)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMemberPnicSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PnicDevice         string `xml:"pnicDevice"`
0000000000000000000000000000000000000000;;		UplinkPortKey      string `xml:"uplinkPortKey,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPortgroupKey string `xml:"uplinkPortgroupKey,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionCookie   int32  `xml:"connectionCookie,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMemberPnicSpec"] = reflect.TypeOf((*DistributedVirtualSwitchHostMemberPnicSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostMemberRuntimeState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentMaxProxySwitchPorts int32 `xml:"currentMaxProxySwitchPorts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostMemberRuntimeState"] = reflect.TypeOf((*DistributedVirtualSwitchHostMemberRuntimeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchHostProductSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProductLineId string `xml:"productLineId,omitempty"`
0000000000000000000000000000000000000000;;		Version       string `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchHostProductSpec"] = reflect.TypeOf((*DistributedVirtualSwitchHostProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchName                  string                 `xml:"switchName"`
0000000000000000000000000000000000000000;;		SwitchUuid                  string                 `xml:"switchUuid"`
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch    ManagedObjectReference `xml:"distributedVirtualSwitch"`
0000000000000000000000000000000000000000;;		NetworkReservationSupported *bool                  `xml:"networkReservationSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchInfo"] = reflect.TypeOf((*DistributedVirtualSwitchInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchKeyedOpaqueBlob struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key        string `xml:"key"`
0000000000000000000000000000000000000000;;		OpaqueData string `xml:"opaqueData"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchKeyedOpaqueBlob"] = reflect.TypeOf((*DistributedVirtualSwitchKeyedOpaqueBlob)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerCompatibilityResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Error []LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerCompatibilityResult"] = reflect.TypeOf((*DistributedVirtualSwitchManagerCompatibilityResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerDvsProductSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewSwitchProductSpec     *DistributedVirtualSwitchProductSpec `xml:"newSwitchProductSpec,omitempty"`
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch *ManagedObjectReference              `xml:"distributedVirtualSwitch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerDvsProductSpec"] = reflect.TypeOf((*DistributedVirtualSwitchManagerDvsProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerHostArrayFilter struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchManagerHostDvsFilterSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerHostArrayFilter"] = reflect.TypeOf((*DistributedVirtualSwitchManagerHostArrayFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerHostContainer struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Container ManagedObjectReference `xml:"container"`
0000000000000000000000000000000000000000;;		Recursive bool                   `xml:"recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerHostContainer"] = reflect.TypeOf((*DistributedVirtualSwitchManagerHostContainer)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerHostContainerFilter struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchManagerHostDvsFilterSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostContainer DistributedVirtualSwitchManagerHostContainer `xml:"hostContainer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerHostContainerFilter"] = reflect.TypeOf((*DistributedVirtualSwitchManagerHostContainerFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerHostDvsFilterSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Inclusive bool `xml:"inclusive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerHostDvsFilterSpec"] = reflect.TypeOf((*DistributedVirtualSwitchManagerHostDvsFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerHostDvsMembershipFilter struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitchManagerHostDvsFilterSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch ManagedObjectReference `xml:"distributedVirtualSwitch"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerHostDvsMembershipFilter"] = reflect.TypeOf((*DistributedVirtualSwitchManagerHostDvsMembershipFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManagerImportResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch    []ManagedObjectReference                `xml:"distributedVirtualSwitch,omitempty"`
0000000000000000000000000000000000000000;;		DistributedVirtualPortgroup []ManagedObjectReference                `xml:"distributedVirtualPortgroup,omitempty"`
0000000000000000000000000000000000000000;;		ImportFault                 []ImportOperationBulkFaultFaultOnImport `xml:"importFault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManagerImportResult"] = reflect.TypeOf((*DistributedVirtualSwitchManagerImportResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchPortConnectee struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConnectedEntity *ManagedObjectReference `xml:"connectedEntity,omitempty"`
0000000000000000000000000000000000000000;;		NicKey          string                  `xml:"nicKey,omitempty"`
0000000000000000000000000000000000000000;;		Type            string                  `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		AddressHint     string                  `xml:"addressHint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchPortConnectee"] = reflect.TypeOf((*DistributedVirtualSwitchPortConnectee)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchPortConnection struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchUuid       string `xml:"switchUuid"`
0000000000000000000000000000000000000000;;		PortgroupKey     string `xml:"portgroupKey,omitempty"`
0000000000000000000000000000000000000000;;		PortKey          string `xml:"portKey,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionCookie int32  `xml:"connectionCookie,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchPortConnection"] = reflect.TypeOf((*DistributedVirtualSwitchPortConnection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchPortCriteria struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Connected    *bool                    `xml:"connected"`
0000000000000000000000000000000000000000;;		Active       *bool                    `xml:"active"`
0000000000000000000000000000000000000000;;		UplinkPort   *bool                    `xml:"uplinkPort"`
0000000000000000000000000000000000000000;;		Scope        *ManagedObjectReference  `xml:"scope,omitempty"`
0000000000000000000000000000000000000000;;		PortgroupKey []string                 `xml:"portgroupKey,omitempty"`
0000000000000000000000000000000000000000;;		Inside       *bool                    `xml:"inside"`
0000000000000000000000000000000000000000;;		PortKey      []string                 `xml:"portKey,omitempty"`
0000000000000000000000000000000000000000;;		Host         []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchPortCriteria"] = reflect.TypeOf((*DistributedVirtualSwitchPortCriteria)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchPortStatistics struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PacketsInMulticast  int64 `xml:"packetsInMulticast"`
0000000000000000000000000000000000000000;;		PacketsOutMulticast int64 `xml:"packetsOutMulticast"`
0000000000000000000000000000000000000000;;		BytesInMulticast    int64 `xml:"bytesInMulticast"`
0000000000000000000000000000000000000000;;		BytesOutMulticast   int64 `xml:"bytesOutMulticast"`
0000000000000000000000000000000000000000;;		PacketsInUnicast    int64 `xml:"packetsInUnicast"`
0000000000000000000000000000000000000000;;		PacketsOutUnicast   int64 `xml:"packetsOutUnicast"`
0000000000000000000000000000000000000000;;		BytesInUnicast      int64 `xml:"bytesInUnicast"`
0000000000000000000000000000000000000000;;		BytesOutUnicast     int64 `xml:"bytesOutUnicast"`
0000000000000000000000000000000000000000;;		PacketsInBroadcast  int64 `xml:"packetsInBroadcast"`
0000000000000000000000000000000000000000;;		PacketsOutBroadcast int64 `xml:"packetsOutBroadcast"`
0000000000000000000000000000000000000000;;		BytesInBroadcast    int64 `xml:"bytesInBroadcast"`
0000000000000000000000000000000000000000;;		BytesOutBroadcast   int64 `xml:"bytesOutBroadcast"`
0000000000000000000000000000000000000000;;		PacketsInDropped    int64 `xml:"packetsInDropped"`
0000000000000000000000000000000000000000;;		PacketsOutDropped   int64 `xml:"packetsOutDropped"`
0000000000000000000000000000000000000000;;		PacketsInException  int64 `xml:"packetsInException"`
0000000000000000000000000000000000000000;;		PacketsOutException int64 `xml:"packetsOutException"`
0000000000000000000000000000000000000000;;		BytesInFromPnic     int64 `xml:"bytesInFromPnic,omitempty"`
0000000000000000000000000000000000000000;;		BytesOutToPnic      int64 `xml:"bytesOutToPnic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchPortStatistics"] = reflect.TypeOf((*DistributedVirtualSwitchPortStatistics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchProductSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name            string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Vendor          string `xml:"vendor,omitempty"`
0000000000000000000000000000000000000000;;		Version         string `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;		Build           string `xml:"build,omitempty"`
0000000000000000000000000000000000000000;;		ForwardingClass string `xml:"forwardingClass,omitempty"`
0000000000000000000000000000000000000000;;		BundleId        string `xml:"bundleId,omitempty"`
0000000000000000000000000000000000000000;;		BundleUrl       string `xml:"bundleUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchProductSpec"] = reflect.TypeOf((*DistributedVirtualSwitchProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DoesCustomizationSpecExist DoesCustomizationSpecExistRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DoesCustomizationSpecExist"] = reflect.TypeOf((*DoesCustomizationSpecExist)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DoesCustomizationSpecExistRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DoesCustomizationSpecExistRequestType"] = reflect.TypeOf((*DoesCustomizationSpecExistRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DoesCustomizationSpecExistResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DomainNotFound struct {
0000000000000000000000000000000000000000;;		ActiveDirectoryFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DomainName string `xml:"domainName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DomainNotFound"] = reflect.TypeOf((*DomainNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DomainNotFoundFault DomainNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DomainNotFoundFault"] = reflect.TypeOf((*DomainNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsDisabledEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsDisabledEvent"] = reflect.TypeOf((*DrsDisabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsDisabledOnVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsDisabledOnVm"] = reflect.TypeOf((*DrsDisabledOnVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsDisabledOnVmFault DrsDisabledOnVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsDisabledOnVmFault"] = reflect.TypeOf((*DrsDisabledOnVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsEnabledEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Behavior string `xml:"behavior"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsEnabledEvent"] = reflect.TypeOf((*DrsEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsEnteredStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		EnteredStandbyModeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsEnteredStandbyModeEvent"] = reflect.TypeOf((*DrsEnteredStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsEnteringStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		EnteringStandbyModeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsEnteringStandbyModeEvent"] = reflect.TypeOf((*DrsEnteringStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsExitStandbyModeFailedEvent struct {
0000000000000000000000000000000000000000;;		ExitStandbyModeFailedEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsExitStandbyModeFailedEvent"] = reflect.TypeOf((*DrsExitStandbyModeFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsExitedStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		ExitedStandbyModeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsExitedStandbyModeEvent"] = reflect.TypeOf((*DrsExitedStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsExitingStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		ExitingStandbyModeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsExitingStandbyModeEvent"] = reflect.TypeOf((*DrsExitingStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsInvocationFailedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsInvocationFailedEvent"] = reflect.TypeOf((*DrsInvocationFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsRecoveredFromFailureEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsRecoveredFromFailureEvent"] = reflect.TypeOf((*DrsRecoveredFromFailureEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsResourceConfigureFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsResourceConfigureFailedEvent"] = reflect.TypeOf((*DrsResourceConfigureFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsResourceConfigureSyncedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsResourceConfigureSyncedEvent"] = reflect.TypeOf((*DrsResourceConfigureSyncedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsRuleComplianceEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsRuleComplianceEvent"] = reflect.TypeOf((*DrsRuleComplianceEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsRuleViolationEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsRuleViolationEvent"] = reflect.TypeOf((*DrsRuleViolationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsSoftRuleViolationEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsSoftRuleViolationEvent"] = reflect.TypeOf((*DrsSoftRuleViolationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsVmMigratedEvent struct {
0000000000000000000000000000000000000000;;		VmMigratedEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsVmMigratedEvent"] = reflect.TypeOf((*DrsVmMigratedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsVmPoweredOnEvent struct {
0000000000000000000000000000000000000000;;		VmPoweredOnEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsVmPoweredOnEvent"] = reflect.TypeOf((*DrsVmPoweredOnEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsVmotionIncompatibleFault struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsVmotionIncompatibleFault"] = reflect.TypeOf((*DrsVmotionIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DrsVmotionIncompatibleFaultFault DrsVmotionIncompatibleFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DrsVmotionIncompatibleFaultFault"] = reflect.TypeOf((*DrsVmotionIncompatibleFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateCustomizationSpec DuplicateCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateCustomizationSpec"] = reflect.TypeOf((*DuplicateCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name    string                 `xml:"name"`
0000000000000000000000000000000000000000;;		NewName string                 `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateCustomizationSpecRequestType"] = reflect.TypeOf((*DuplicateCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateDisks struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateDisks"] = reflect.TypeOf((*DuplicateDisks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateDisksFault DuplicateDisks
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateDisksFault"] = reflect.TypeOf((*DuplicateDisksFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateIpDetectedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DuplicateIP string `xml:"duplicateIP"`
0000000000000000000000000000000000000000;;		MacAddress  string `xml:"macAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateIpDetectedEvent"] = reflect.TypeOf((*DuplicateIpDetectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateName struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name   string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Object ManagedObjectReference `xml:"object"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateName"] = reflect.TypeOf((*DuplicateName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateNameFault DuplicateName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateNameFault"] = reflect.TypeOf((*DuplicateNameFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateVsanNetworkInterface struct {
0000000000000000000000000000000000000000;;		VsanFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateVsanNetworkInterface"] = reflect.TypeOf((*DuplicateVsanNetworkInterface)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DuplicateVsanNetworkInterfaceFault DuplicateVsanNetworkInterface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DuplicateVsanNetworkInterfaceFault"] = reflect.TypeOf((*DuplicateVsanNetworkInterfaceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvpgImportEvent struct {
0000000000000000000000000000000000000000;;		DVPortgroupEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ImportType string `xml:"importType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvpgImportEvent"] = reflect.TypeOf((*DvpgImportEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvpgRestoreEvent struct {
0000000000000000000000000000000000000000;;		DVPortgroupEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvpgRestoreEvent"] = reflect.TypeOf((*DvpgRestoreEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsAcceptNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsAcceptNetworkRuleAction"] = reflect.TypeOf((*DvsAcceptNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsApplyOperationFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ObjectFault []DvsApplyOperationFaultFaultOnObject `xml:"objectFault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsApplyOperationFault"] = reflect.TypeOf((*DvsApplyOperationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsApplyOperationFaultFault DvsApplyOperationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsApplyOperationFaultFault"] = reflect.TypeOf((*DvsApplyOperationFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsApplyOperationFaultFaultOnObject struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ObjectId string               `xml:"objectId"`
0000000000000000000000000000000000000000;;		Type     string               `xml:"type"`
0000000000000000000000000000000000000000;;		Fault    LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsApplyOperationFaultFaultOnObject"] = reflect.TypeOf((*DvsApplyOperationFaultFaultOnObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsCopyNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsCopyNetworkRuleAction"] = reflect.TypeOf((*DvsCopyNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsCreatedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent FolderEventArgument `xml:"parent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsCreatedEvent"] = reflect.TypeOf((*DvsCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsDestroyedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsDestroyedEvent"] = reflect.TypeOf((*DvsDestroyedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsDropNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsDropNetworkRuleAction"] = reflect.TypeOf((*DvsDropNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsEvent"] = reflect.TypeOf((*DvsEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dvs ManagedObjectReference `xml:"dvs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsEventArgument"] = reflect.TypeOf((*DvsEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsFault"] = reflect.TypeOf((*DvsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsFaultFault BaseDvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsFaultFault"] = reflect.TypeOf((*DvsFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsFilterConfig struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key        string              `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		AgentName  string              `xml:"agentName,omitempty"`
0000000000000000000000000000000000000000;;		SlotNumber string              `xml:"slotNumber,omitempty"`
0000000000000000000000000000000000000000;;		Parameters *DvsFilterParameter `xml:"parameters,omitempty"`
0000000000000000000000000000000000000000;;		OnFailure  string              `xml:"onFailure,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsFilterConfig"] = reflect.TypeOf((*DvsFilterConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsFilterConfigSpec struct {
0000000000000000000000000000000000000000;;		DvsFilterConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation string `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsFilterConfigSpec"] = reflect.TypeOf((*DvsFilterConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsFilterParameter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parameters []string `xml:"parameters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsFilterParameter"] = reflect.TypeOf((*DvsFilterParameter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsFilterPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FilterConfig []BaseDvsFilterConfig `xml:"filterConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsFilterPolicy"] = reflect.TypeOf((*DvsFilterPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsGreEncapNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EncapsulationIp SingleIp `xml:"encapsulationIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsGreEncapNetworkRuleAction"] = reflect.TypeOf((*DvsGreEncapNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHealthStatusChangeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchUuid   string                          `xml:"switchUuid"`
0000000000000000000000000000000000000000;;		HealthResult BaseHostMemberHealthCheckResult `xml:"healthResult,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHealthStatusChangeEvent"] = reflect.TypeOf((*DvsHealthStatusChangeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostBackInSyncEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostBackInSync HostEventArgument `xml:"hostBackInSync"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostBackInSyncEvent"] = reflect.TypeOf((*DvsHostBackInSyncEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostInfrastructureTrafficResource struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            string                                         `xml:"key"`
0000000000000000000000000000000000000000;;		Description    string                                         `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		AllocationInfo DvsHostInfrastructureTrafficResourceAllocation `xml:"allocationInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostInfrastructureTrafficResource"] = reflect.TypeOf((*DvsHostInfrastructureTrafficResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostInfrastructureTrafficResourceAllocation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Limit       int64       `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Shares      *SharesInfo `xml:"shares,omitempty"`
0000000000000000000000000000000000000000;;		Reservation int64       `xml:"reservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostInfrastructureTrafficResourceAllocation"] = reflect.TypeOf((*DvsHostInfrastructureTrafficResourceAllocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostJoinedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostJoined HostEventArgument `xml:"hostJoined"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostJoinedEvent"] = reflect.TypeOf((*DvsHostJoinedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostLeftEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostLeft HostEventArgument `xml:"hostLeft"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostLeftEvent"] = reflect.TypeOf((*DvsHostLeftEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostStatusUpdated struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostMember      HostEventArgument `xml:"hostMember"`
0000000000000000000000000000000000000000;;		OldStatus       string            `xml:"oldStatus,omitempty"`
0000000000000000000000000000000000000000;;		NewStatus       string            `xml:"newStatus,omitempty"`
0000000000000000000000000000000000000000;;		OldStatusDetail string            `xml:"oldStatusDetail,omitempty"`
0000000000000000000000000000000000000000;;		NewStatusDetail string            `xml:"newStatusDetail,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostStatusUpdated"] = reflect.TypeOf((*DvsHostStatusUpdated)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostVNicProfile struct {
0000000000000000000000000000000000000000;;		DvsVNicProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostVNicProfile"] = reflect.TypeOf((*DvsHostVNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsHostWentOutOfSyncEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostOutOfSync DvsOutOfSyncHostArgument `xml:"hostOutOfSync"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsHostWentOutOfSyncEvent"] = reflect.TypeOf((*DvsHostWentOutOfSyncEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsImportEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ImportType string `xml:"importType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsImportEvent"] = reflect.TypeOf((*DvsImportEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsIpNetworkRuleQualifier struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleQualifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceAddress      BaseIpAddress  `xml:"sourceAddress,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DestinationAddress BaseIpAddress  `xml:"destinationAddress,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Protocol           *IntExpression `xml:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		SourceIpPort       BaseDvsIpPort  `xml:"sourceIpPort,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DestinationIpPort  BaseDvsIpPort  `xml:"destinationIpPort,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		TcpFlags           *IntExpression `xml:"tcpFlags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsIpNetworkRuleQualifier"] = reflect.TypeOf((*DvsIpNetworkRuleQualifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsIpPort struct {
0000000000000000000000000000000000000000;;		NegatableExpression
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsIpPort"] = reflect.TypeOf((*DvsIpPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsIpPortRange struct {
0000000000000000000000000000000000000000;;		DvsIpPort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartPortNumber int32 `xml:"startPortNumber"`
0000000000000000000000000000000000000000;;		EndPortNumber   int32 `xml:"endPortNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsIpPortRange"] = reflect.TypeOf((*DvsIpPortRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsLogNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsLogNetworkRuleAction"] = reflect.TypeOf((*DvsLogNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsMacNetworkRuleQualifier struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleQualifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceAddress      BaseMacAddress `xml:"sourceAddress,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DestinationAddress BaseMacAddress `xml:"destinationAddress,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Protocol           *IntExpression `xml:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		VlanId             *IntExpression `xml:"vlanId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsMacNetworkRuleQualifier"] = reflect.TypeOf((*DvsMacNetworkRuleQualifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsMacRewriteNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RewriteMac string `xml:"rewriteMac"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsMacRewriteNetworkRuleAction"] = reflect.TypeOf((*DvsMacRewriteNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsMergedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceDvs      DvsEventArgument `xml:"sourceDvs"`
0000000000000000000000000000000000000000;;		DestinationDvs DvsEventArgument `xml:"destinationDvs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsMergedEvent"] = reflect.TypeOf((*DvsMergedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsNetworkRuleAction"] = reflect.TypeOf((*DvsNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsNetworkRuleQualifier struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsNetworkRuleQualifier"] = reflect.TypeOf((*DvsNetworkRuleQualifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsNotAuthorized struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SessionExtensionKey string `xml:"sessionExtensionKey,omitempty"`
0000000000000000000000000000000000000000;;		DvsExtensionKey     string `xml:"dvsExtensionKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsNotAuthorized"] = reflect.TypeOf((*DvsNotAuthorized)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsNotAuthorizedFault DvsNotAuthorized
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsNotAuthorizedFault"] = reflect.TypeOf((*DvsNotAuthorizedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsOperationBulkFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostFault []DvsOperationBulkFaultFaultOnHost `xml:"hostFault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsOperationBulkFault"] = reflect.TypeOf((*DvsOperationBulkFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsOperationBulkFaultFault DvsOperationBulkFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsOperationBulkFaultFault"] = reflect.TypeOf((*DvsOperationBulkFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsOperationBulkFaultFaultOnHost struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault   `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsOperationBulkFaultFaultOnHost"] = reflect.TypeOf((*DvsOperationBulkFaultFaultOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsOutOfSyncHostArgument struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OutOfSyncHost   HostEventArgument `xml:"outOfSyncHost"`
0000000000000000000000000000000000000000;;		ConfigParamters []string          `xml:"configParamters"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsOutOfSyncHostArgument"] = reflect.TypeOf((*DvsOutOfSyncHostArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortBlockedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey        string        `xml:"portKey"`
0000000000000000000000000000000000000000;;		StatusDetail   string        `xml:"statusDetail,omitempty"`
0000000000000000000000000000000000000000;;		RuntimeInfo    *DVPortStatus `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		PrevBlockState string        `xml:"prevBlockState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortBlockedEvent"] = reflect.TypeOf((*DvsPortBlockedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortConnectedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey   string                                 `xml:"portKey"`
0000000000000000000000000000000000000000;;		Connectee *DistributedVirtualSwitchPortConnectee `xml:"connectee,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortConnectedEvent"] = reflect.TypeOf((*DvsPortConnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortCreatedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey []string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortCreatedEvent"] = reflect.TypeOf((*DvsPortCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortDeletedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey []string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortDeletedEvent"] = reflect.TypeOf((*DvsPortDeletedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortDisconnectedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey   string                                 `xml:"portKey"`
0000000000000000000000000000000000000000;;		Connectee *DistributedVirtualSwitchPortConnectee `xml:"connectee,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortDisconnectedEvent"] = reflect.TypeOf((*DvsPortDisconnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortEnteredPassthruEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey     string        `xml:"portKey"`
0000000000000000000000000000000000000000;;		RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortEnteredPassthruEvent"] = reflect.TypeOf((*DvsPortEnteredPassthruEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortExitedPassthruEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey     string        `xml:"portKey"`
0000000000000000000000000000000000000000;;		RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortExitedPassthruEvent"] = reflect.TypeOf((*DvsPortExitedPassthruEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortJoinPortgroupEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey       string `xml:"portKey"`
0000000000000000000000000000000000000000;;		PortgroupKey  string `xml:"portgroupKey"`
0000000000000000000000000000000000000000;;		PortgroupName string `xml:"portgroupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortJoinPortgroupEvent"] = reflect.TypeOf((*DvsPortJoinPortgroupEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortLeavePortgroupEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey       string `xml:"portKey"`
0000000000000000000000000000000000000000;;		PortgroupKey  string `xml:"portgroupKey"`
0000000000000000000000000000000000000000;;		PortgroupName string `xml:"portgroupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortLeavePortgroupEvent"] = reflect.TypeOf((*DvsPortLeavePortgroupEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortLinkDownEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey     string        `xml:"portKey"`
0000000000000000000000000000000000000000;;		RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortLinkDownEvent"] = reflect.TypeOf((*DvsPortLinkDownEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortLinkUpEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey     string        `xml:"portKey"`
0000000000000000000000000000000000000000;;		RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortLinkUpEvent"] = reflect.TypeOf((*DvsPortLinkUpEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey       []string                   `xml:"portKey"`
0000000000000000000000000000000000000000;;		ConfigChanges []ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortReconfiguredEvent"] = reflect.TypeOf((*DvsPortReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortRuntimeChangeEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey     string       `xml:"portKey"`
0000000000000000000000000000000000000000;;		RuntimeInfo DVPortStatus `xml:"runtimeInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortRuntimeChangeEvent"] = reflect.TypeOf((*DvsPortRuntimeChangeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortUnblockedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey        string        `xml:"portKey"`
0000000000000000000000000000000000000000;;		RuntimeInfo    *DVPortStatus `xml:"runtimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		PrevBlockState string        `xml:"prevBlockState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortUnblockedEvent"] = reflect.TypeOf((*DvsPortUnblockedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPortVendorSpecificStateChangeEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPortVendorSpecificStateChangeEvent"] = reflect.TypeOf((*DvsPortVendorSpecificStateChangeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key    string              `xml:"key"`
0000000000000000000000000000000000000000;;		Name   string              `xml:"name"`
0000000000000000000000000000000000000000;;		Uplink []PnicUplinkProfile `xml:"uplink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsProfile"] = reflect.TypeOf((*DvsProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsPuntNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsPuntNetworkRuleAction"] = reflect.TypeOf((*DvsPuntNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsRateLimitNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PacketsPerSecond int32 `xml:"packetsPerSecond"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsRateLimitNetworkRuleAction"] = reflect.TypeOf((*DvsRateLimitNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsReconfigureVmVnicNetworkResourcePoolRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		ConfigSpec []DvsVmVnicResourcePoolConfigSpec `xml:"configSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsReconfigureVmVnicNetworkResourcePoolRequestType"] = reflect.TypeOf((*DvsReconfigureVmVnicNetworkResourcePoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsReconfigureVmVnicNetworkResourcePool_Task DvsReconfigureVmVnicNetworkResourcePoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsReconfigureVmVnicNetworkResourcePool_Task"] = reflect.TypeOf((*DvsReconfigureVmVnicNetworkResourcePool_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsReconfigureVmVnicNetworkResourcePool_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec    BaseDVSConfigSpec         `xml:"configSpec,typeattr"`
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsReconfiguredEvent"] = reflect.TypeOf((*DvsReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsRenamedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsRenamedEvent"] = reflect.TypeOf((*DvsRenamedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsResourceRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capacity                         int32                                     `xml:"capacity,omitempty"`
0000000000000000000000000000000000000000;;		Usage                            int32                                     `xml:"usage,omitempty"`
0000000000000000000000000000000000000000;;		Available                        int32                                     `xml:"available,omitempty"`
0000000000000000000000000000000000000000;;		AllocatedResource                []DvsVnicAllocatedResource                `xml:"allocatedResource,omitempty"`
0000000000000000000000000000000000000000;;		VmVnicNetworkResourcePoolRuntime []DvsVmVnicNetworkResourcePoolRuntimeInfo `xml:"vmVnicNetworkResourcePoolRuntime,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsResourceRuntimeInfo"] = reflect.TypeOf((*DvsResourceRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsRestoreEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsRestoreEvent"] = reflect.TypeOf((*DvsRestoreEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsScopeViolated struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Scope  []ManagedObjectReference `xml:"scope"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference   `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsScopeViolated"] = reflect.TypeOf((*DvsScopeViolated)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsScopeViolatedFault DvsScopeViolated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsScopeViolatedFault"] = reflect.TypeOf((*DvsScopeViolatedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsServiceConsoleVNicProfile struct {
0000000000000000000000000000000000000000;;		DvsVNicProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsServiceConsoleVNicProfile"] = reflect.TypeOf((*DvsServiceConsoleVNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsSingleIpPort struct {
0000000000000000000000000000000000000000;;		DvsIpPort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortNumber int32 `xml:"portNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsSingleIpPort"] = reflect.TypeOf((*DvsSingleIpPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsSystemTrafficNetworkRuleQualifier struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleQualifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TypeOfSystemTraffic *StringExpression `xml:"typeOfSystemTraffic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsSystemTrafficNetworkRuleQualifier"] = reflect.TypeOf((*DvsSystemTrafficNetworkRuleQualifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsTrafficFilterConfig struct {
0000000000000000000000000000000000000000;;		DvsFilterConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TrafficRuleset *DvsTrafficRuleset `xml:"trafficRuleset,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsTrafficFilterConfig"] = reflect.TypeOf((*DvsTrafficFilterConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsTrafficFilterConfigSpec struct {
0000000000000000000000000000000000000000;;		DvsTrafficFilterConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation string `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsTrafficFilterConfigSpec"] = reflect.TypeOf((*DvsTrafficFilterConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsTrafficRule struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string                        `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Description string                        `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Sequence    int32                         `xml:"sequence,omitempty"`
0000000000000000000000000000000000000000;;		Qualifier   []BaseDvsNetworkRuleQualifier `xml:"qualifier,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Action      BaseDvsNetworkRuleAction      `xml:"action,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Direction   string                        `xml:"direction,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsTrafficRule"] = reflect.TypeOf((*DvsTrafficRule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsTrafficRuleset struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key        string           `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Enabled    *bool            `xml:"enabled"`
0000000000000000000000000000000000000000;;		Precedence int32            `xml:"precedence,omitempty"`
0000000000000000000000000000000000000000;;		Rules      []DvsTrafficRule `xml:"rules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsTrafficRuleset"] = reflect.TypeOf((*DvsTrafficRuleset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsUpdateTagNetworkRuleAction struct {
0000000000000000000000000000000000000000;;		DvsNetworkRuleAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		QosTag  int32 `xml:"qosTag,omitempty"`
0000000000000000000000000000000000000000;;		DscpTag int32 `xml:"dscpTag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsUpdateTagNetworkRuleAction"] = reflect.TypeOf((*DvsUpdateTagNetworkRuleAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsUpgradeAvailableEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProductInfo DistributedVirtualSwitchProductSpec `xml:"productInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsUpgradeAvailableEvent"] = reflect.TypeOf((*DvsUpgradeAvailableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsUpgradeInProgressEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProductInfo DistributedVirtualSwitchProductSpec `xml:"productInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsUpgradeInProgressEvent"] = reflect.TypeOf((*DvsUpgradeInProgressEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsUpgradeRejectedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProductInfo DistributedVirtualSwitchProductSpec `xml:"productInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsUpgradeRejectedEvent"] = reflect.TypeOf((*DvsUpgradeRejectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsUpgradedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProductInfo DistributedVirtualSwitchProductSpec `xml:"productInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsUpgradedEvent"] = reflect.TypeOf((*DvsUpgradedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsVNicProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      string           `xml:"key"`
0000000000000000000000000000000000000000;;		IpConfig IpAddressProfile `xml:"ipConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsVNicProfile"] = reflect.TypeOf((*DvsVNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsVmVnicNetworkResourcePoolRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key               string                     `xml:"key"`
0000000000000000000000000000000000000000;;		Name              string                     `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Capacity          int32                      `xml:"capacity,omitempty"`
0000000000000000000000000000000000000000;;		Usage             int32                      `xml:"usage,omitempty"`
0000000000000000000000000000000000000000;;		Available         int32                      `xml:"available,omitempty"`
0000000000000000000000000000000000000000;;		Status            string                     `xml:"status"`
0000000000000000000000000000000000000000;;		AllocatedResource []DvsVnicAllocatedResource `xml:"allocatedResource,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsVmVnicNetworkResourcePoolRuntimeInfo"] = reflect.TypeOf((*DvsVmVnicNetworkResourcePoolRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsVmVnicResourceAllocation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReservationQuota int64 `xml:"reservationQuota,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsVmVnicResourceAllocation"] = reflect.TypeOf((*DvsVmVnicResourceAllocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsVmVnicResourcePoolConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation      string                       `xml:"operation"`
0000000000000000000000000000000000000000;;		Key            string                       `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		ConfigVersion  string                       `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;		AllocationInfo *DvsVmVnicResourceAllocation `xml:"allocationInfo,omitempty"`
0000000000000000000000000000000000000000;;		Name           string                       `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description    string                       `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsVmVnicResourcePoolConfigSpec"] = reflect.TypeOf((*DvsVmVnicResourcePoolConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DvsVnicAllocatedResource struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm          ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VnicKey     string                 `xml:"vnicKey"`
0000000000000000000000000000000000000000;;		Reservation int64                  `xml:"reservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DvsVnicAllocatedResource"] = reflect.TypeOf((*DvsVnicAllocatedResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DynamicArray struct {
0000000000000000000000000000000000000000;;		Val []AnyType `xml:"val,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DynamicArray"] = reflect.TypeOf((*DynamicArray)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DynamicData struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DynamicData"] = reflect.TypeOf((*DynamicData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DynamicProperty struct {
0000000000000000000000000000000000000000;;		Name string  `xml:"name"`
0000000000000000000000000000000000000000;;		Val  AnyType `xml:"val,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DynamicProperty"] = reflect.TypeOf((*DynamicProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailed struct {
0000000000000000000000000000000000000000;;		NotSupportedHostInCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Faults []LocalizedMethodFault `xml:"faults,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailed"] = reflect.TypeOf((*EVCAdmissionFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUFeaturesForMode struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentEVCModeKey string `xml:"currentEVCModeKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUFeaturesForMode"] = reflect.TypeOf((*EVCAdmissionFailedCPUFeaturesForMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUFeaturesForModeFault EVCAdmissionFailedCPUFeaturesForMode
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUFeaturesForModeFault"] = reflect.TypeOf((*EVCAdmissionFailedCPUFeaturesForModeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUModel struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUModel"] = reflect.TypeOf((*EVCAdmissionFailedCPUModel)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUModelFault EVCAdmissionFailedCPUModel
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUModelFault"] = reflect.TypeOf((*EVCAdmissionFailedCPUModelFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUModelForMode struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentEVCModeKey string `xml:"currentEVCModeKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUModelForMode"] = reflect.TypeOf((*EVCAdmissionFailedCPUModelForMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUModelForModeFault EVCAdmissionFailedCPUModelForMode
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUModelForModeFault"] = reflect.TypeOf((*EVCAdmissionFailedCPUModelForModeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUVendor struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterCPUVendor string `xml:"clusterCPUVendor"`
0000000000000000000000000000000000000000;;		HostCPUVendor    string `xml:"hostCPUVendor"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUVendor"] = reflect.TypeOf((*EVCAdmissionFailedCPUVendor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUVendorFault EVCAdmissionFailedCPUVendor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUVendorFault"] = reflect.TypeOf((*EVCAdmissionFailedCPUVendorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUVendorUnknown struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUVendorUnknown"] = reflect.TypeOf((*EVCAdmissionFailedCPUVendorUnknown)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedCPUVendorUnknownFault EVCAdmissionFailedCPUVendorUnknown
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedCPUVendorUnknownFault"] = reflect.TypeOf((*EVCAdmissionFailedCPUVendorUnknownFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedFault BaseEVCAdmissionFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedFault"] = reflect.TypeOf((*EVCAdmissionFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedHostDisconnected struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedHostDisconnected"] = reflect.TypeOf((*EVCAdmissionFailedHostDisconnected)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedHostDisconnectedFault EVCAdmissionFailedHostDisconnected
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedHostDisconnectedFault"] = reflect.TypeOf((*EVCAdmissionFailedHostDisconnectedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedHostSoftware struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedHostSoftware"] = reflect.TypeOf((*EVCAdmissionFailedHostSoftware)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedHostSoftwareFault EVCAdmissionFailedHostSoftware
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedHostSoftwareFault"] = reflect.TypeOf((*EVCAdmissionFailedHostSoftwareFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedHostSoftwareForMode struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedHostSoftwareForMode"] = reflect.TypeOf((*EVCAdmissionFailedHostSoftwareForMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedHostSoftwareForModeFault EVCAdmissionFailedHostSoftwareForMode
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedHostSoftwareForModeFault"] = reflect.TypeOf((*EVCAdmissionFailedHostSoftwareForModeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedVmActive struct {
0000000000000000000000000000000000000000;;		EVCAdmissionFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedVmActive"] = reflect.TypeOf((*EVCAdmissionFailedVmActive)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCAdmissionFailedVmActiveFault EVCAdmissionFailedVmActive
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCAdmissionFailedVmActiveFault"] = reflect.TypeOf((*EVCAdmissionFailedVmActiveFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCConfigFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Faults []LocalizedMethodFault `xml:"faults,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCConfigFault"] = reflect.TypeOf((*EVCConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCConfigFaultFault BaseEVCConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCConfigFaultFault"] = reflect.TypeOf((*EVCConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCMode struct {
0000000000000000000000000000000000000000;;		ElementDescription
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GuaranteedCPUFeatures []HostCpuIdInfo                    `xml:"guaranteedCPUFeatures,omitempty"`
0000000000000000000000000000000000000000;;		FeatureCapability     []HostFeatureCapability            `xml:"featureCapability,omitempty"`
0000000000000000000000000000000000000000;;		FeatureMask           []HostFeatureMask                  `xml:"featureMask,omitempty"`
0000000000000000000000000000000000000000;;		FeatureRequirement    []VirtualMachineFeatureRequirement `xml:"featureRequirement,omitempty"`
0000000000000000000000000000000000000000;;		Vendor                string                             `xml:"vendor"`
0000000000000000000000000000000000000000;;		Track                 []string                           `xml:"track,omitempty"`
0000000000000000000000000000000000000000;;		VendorTier            int32                              `xml:"vendorTier"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCMode"] = reflect.TypeOf((*EVCMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCModeIllegalByVendor struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterCPUVendor string `xml:"clusterCPUVendor"`
0000000000000000000000000000000000000000;;		ModeCPUVendor    string `xml:"modeCPUVendor"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCModeIllegalByVendor"] = reflect.TypeOf((*EVCModeIllegalByVendor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCModeIllegalByVendorFault EVCModeIllegalByVendor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCModeIllegalByVendorFault"] = reflect.TypeOf((*EVCModeIllegalByVendorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCModeUnsupportedByHosts struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EvcMode  string                   `xml:"evcMode,omitempty"`
0000000000000000000000000000000000000000;;		Host     []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		HostName []string                 `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCModeUnsupportedByHosts"] = reflect.TypeOf((*EVCModeUnsupportedByHosts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCModeUnsupportedByHostsFault EVCModeUnsupportedByHosts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCModeUnsupportedByHostsFault"] = reflect.TypeOf((*EVCModeUnsupportedByHostsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCUnsupportedByHostHardware struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostName []string                 `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCUnsupportedByHostHardware"] = reflect.TypeOf((*EVCUnsupportedByHostHardware)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCUnsupportedByHostHardwareFault EVCUnsupportedByHostHardware
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCUnsupportedByHostHardwareFault"] = reflect.TypeOf((*EVCUnsupportedByHostHardwareFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCUnsupportedByHostSoftware struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostName []string                 `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCUnsupportedByHostSoftware"] = reflect.TypeOf((*EVCUnsupportedByHostSoftware)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EVCUnsupportedByHostSoftwareFault EVCUnsupportedByHostSoftware
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EVCUnsupportedByHostSoftwareFault"] = reflect.TypeOf((*EVCUnsupportedByHostSoftwareFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EagerZeroVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EagerZeroVirtualDiskRequestType"] = reflect.TypeOf((*EagerZeroVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EagerZeroVirtualDisk_Task EagerZeroVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EagerZeroVirtualDisk_Task"] = reflect.TypeOf((*EagerZeroVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EagerZeroVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EightHostLimitViolated struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EightHostLimitViolated"] = reflect.TypeOf((*EightHostLimitViolated)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EightHostLimitViolatedFault EightHostLimitViolated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EightHostLimitViolatedFault"] = reflect.TypeOf((*EightHostLimitViolatedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ElementDescription struct {
0000000000000000000000000000000000000000;;		Description
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ElementDescription"] = reflect.TypeOf((*ElementDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableAlarmActions EnableAlarmActionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableAlarmActions"] = reflect.TypeOf((*EnableAlarmActions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableAlarmActionsRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity  ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Enabled bool                   `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableAlarmActionsRequestType"] = reflect.TypeOf((*EnableAlarmActionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableAlarmActionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableCrypto EnableCryptoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableCrypto"] = reflect.TypeOf((*EnableCrypto)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableCryptoRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		KeyPlain CryptoKeyPlain         `xml:"keyPlain"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableCryptoRequestType"] = reflect.TypeOf((*EnableCryptoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableCryptoResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableFeature EnableFeatureRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableFeature"] = reflect.TypeOf((*EnableFeature)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableFeatureRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host       *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		FeatureKey string                  `xml:"featureKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableFeatureRequestType"] = reflect.TypeOf((*EnableFeatureRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableFeatureResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableHyperThreading EnableHyperThreadingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableHyperThreading"] = reflect.TypeOf((*EnableHyperThreading)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableHyperThreadingRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableHyperThreadingRequestType"] = reflect.TypeOf((*EnableHyperThreadingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableHyperThreadingResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableMultipathPath EnableMultipathPathRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableMultipathPath"] = reflect.TypeOf((*EnableMultipathPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableMultipathPathRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PathName string                 `xml:"pathName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableMultipathPathRequestType"] = reflect.TypeOf((*EnableMultipathPathRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableMultipathPathResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableNetworkResourceManagement EnableNetworkResourceManagementRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableNetworkResourceManagement"] = reflect.TypeOf((*EnableNetworkResourceManagement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableNetworkResourceManagementRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Enable bool                   `xml:"enable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableNetworkResourceManagementRequestType"] = reflect.TypeOf((*EnableNetworkResourceManagementRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableNetworkResourceManagementResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableRuleset EnableRulesetRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableRuleset"] = reflect.TypeOf((*EnableRuleset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableRulesetRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableRulesetRequestType"] = reflect.TypeOf((*EnableRulesetRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableRulesetResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableSecondaryVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableSecondaryVMRequestType"] = reflect.TypeOf((*EnableSecondaryVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableSecondaryVM_Task EnableSecondaryVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableSecondaryVM_Task"] = reflect.TypeOf((*EnableSecondaryVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableSecondaryVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableSmartCardAuthentication EnableSmartCardAuthenticationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableSmartCardAuthentication"] = reflect.TypeOf((*EnableSmartCardAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableSmartCardAuthenticationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnableSmartCardAuthenticationRequestType"] = reflect.TypeOf((*EnableSmartCardAuthenticationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableSmartCardAuthenticationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnterLockdownMode EnterLockdownModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnterLockdownMode"] = reflect.TypeOf((*EnterLockdownMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnterLockdownModeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnterLockdownModeRequestType"] = reflect.TypeOf((*EnterLockdownModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnterLockdownModeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnterMaintenanceModeRequestType struct {
0000000000000000000000000000000000000000;;		This                  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Timeout               int32                  `xml:"timeout"`
0000000000000000000000000000000000000000;;		EvacuatePoweredOffVms *bool                  `xml:"evacuatePoweredOffVms"`
0000000000000000000000000000000000000000;;		MaintenanceSpec       *HostMaintenanceSpec   `xml:"maintenanceSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnterMaintenanceModeRequestType"] = reflect.TypeOf((*EnterMaintenanceModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnterMaintenanceMode_Task EnterMaintenanceModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnterMaintenanceMode_Task"] = reflect.TypeOf((*EnterMaintenanceMode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnterMaintenanceMode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnteredMaintenanceModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnteredMaintenanceModeEvent"] = reflect.TypeOf((*EnteredMaintenanceModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnteredStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnteredStandbyModeEvent"] = reflect.TypeOf((*EnteredStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnteringMaintenanceModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnteringMaintenanceModeEvent"] = reflect.TypeOf((*EnteringMaintenanceModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnteringStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnteringStandbyModeEvent"] = reflect.TypeOf((*EnteringStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntityBackup struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EntityBackup"] = reflect.TypeOf((*EntityBackup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntityBackupConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityType    string                  `xml:"entityType"`
0000000000000000000000000000000000000000;;		ConfigBlob    []byte                  `xml:"configBlob"`
0000000000000000000000000000000000000000;;		Key           string                  `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Name          string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Container     *ManagedObjectReference `xml:"container,omitempty"`
0000000000000000000000000000000000000000;;		ConfigVersion string                  `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EntityBackupConfig"] = reflect.TypeOf((*EntityBackupConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntityEventArgument struct {
0000000000000000000000000000000000000000;;		EventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EntityEventArgument"] = reflect.TypeOf((*EntityEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntityPrivilege struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity           ManagedObjectReference  `xml:"entity"`
0000000000000000000000000000000000000000;;		PrivAvailability []PrivilegeAvailability `xml:"privAvailability"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EntityPrivilege"] = reflect.TypeOf((*EntityPrivilege)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnumDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key  string                   `xml:"key"`
0000000000000000000000000000000000000000;;		Tags []BaseElementDescription `xml:"tags,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnumDescription"] = reflect.TypeOf((*EnumDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnvironmentBrowserConfigOptionQuerySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key     string                  `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Host    *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		GuestId []string                `xml:"guestId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnvironmentBrowserConfigOptionQuerySpec"] = reflect.TypeOf((*EnvironmentBrowserConfigOptionQuerySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorUpgradeEvent struct {
0000000000000000000000000000000000000000;;		UpgradeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ErrorUpgradeEvent"] = reflect.TypeOf((*ErrorUpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EstimateDatabaseSize EstimateDatabaseSizeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EstimateDatabaseSize"] = reflect.TypeOf((*EstimateDatabaseSize)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EstimateDatabaseSizeRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DbSizeParam DatabaseSizeParam      `xml:"dbSizeParam"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EstimateDatabaseSizeRequestType"] = reflect.TypeOf((*EstimateDatabaseSizeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EstimateDatabaseSizeResponse struct {
0000000000000000000000000000000000000000;;		Returnval DatabaseSizeEstimate `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EstimateStorageForConsolidateSnapshotsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EstimateStorageForConsolidateSnapshotsRequestType"] = reflect.TypeOf((*EstimateStorageForConsolidateSnapshotsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EstimateStorageForConsolidateSnapshots_Task EstimateStorageForConsolidateSnapshotsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EstimateStorageForConsolidateSnapshots_Task"] = reflect.TypeOf((*EstimateStorageForConsolidateSnapshots_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EstimateStorageForConsolidateSnapshots_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EsxAgentHostManagerUpdateConfig EsxAgentHostManagerUpdateConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EsxAgentHostManagerUpdateConfig"] = reflect.TypeOf((*EsxAgentHostManagerUpdateConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EsxAgentHostManagerUpdateConfigRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		ConfigInfo HostEsxAgentHostManagerConfigInfo `xml:"configInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EsxAgentHostManagerUpdateConfigRequestType"] = reflect.TypeOf((*EsxAgentHostManagerUpdateConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EsxAgentHostManagerUpdateConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvacuateVsanNodeRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MaintenanceSpec HostMaintenanceSpec    `xml:"maintenanceSpec"`
0000000000000000000000000000000000000000;;		Timeout         int32                  `xml:"timeout"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EvacuateVsanNodeRequestType"] = reflect.TypeOf((*EvacuateVsanNodeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvacuateVsanNode_Task EvacuateVsanNodeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EvacuateVsanNode_Task"] = reflect.TypeOf((*EvacuateVsanNode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvacuateVsanNode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvaluationLicenseSource struct {
0000000000000000000000000000000000000000;;		LicenseSource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemainingHours int64 `xml:"remainingHours,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EvaluationLicenseSource"] = reflect.TypeOf((*EvaluationLicenseSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvcManager EvcManagerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EvcManager"] = reflect.TypeOf((*EvcManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvcManagerRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EvcManagerRequestType"] = reflect.TypeOf((*EvcManagerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EvcManagerResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Event struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                  int32                         `xml:"key"`
0000000000000000000000000000000000000000;;		ChainId              int32                         `xml:"chainId"`
0000000000000000000000000000000000000000;;		CreatedTime          time.Time                     `xml:"createdTime"`
0000000000000000000000000000000000000000;;		UserName             string                        `xml:"userName"`
0000000000000000000000000000000000000000;;		Datacenter           *DatacenterEventArgument      `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		ComputeResource      *ComputeResourceEventArgument `xml:"computeResource,omitempty"`
0000000000000000000000000000000000000000;;		Host                 *HostEventArgument            `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Vm                   *VmEventArgument              `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Ds                   *DatastoreEventArgument       `xml:"ds,omitempty"`
0000000000000000000000000000000000000000;;		Net                  *NetworkEventArgument         `xml:"net,omitempty"`
0000000000000000000000000000000000000000;;		Dvs                  *DvsEventArgument             `xml:"dvs,omitempty"`
0000000000000000000000000000000000000000;;		FullFormattedMessage string                        `xml:"fullFormattedMessage,omitempty"`
0000000000000000000000000000000000000000;;		ChangeTag            string                        `xml:"changeTag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Event"] = reflect.TypeOf((*Event)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventAlarmExpression struct {
0000000000000000000000000000000000000000;;		AlarmExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Comparisons []EventAlarmExpressionComparison `xml:"comparisons,omitempty"`
0000000000000000000000000000000000000000;;		EventType   string                           `xml:"eventType"`
0000000000000000000000000000000000000000;;		EventTypeId string                           `xml:"eventTypeId,omitempty"`
0000000000000000000000000000000000000000;;		ObjectType  string                           `xml:"objectType,omitempty"`
0000000000000000000000000000000000000000;;		Status      ManagedEntityStatus              `xml:"status,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventAlarmExpression"] = reflect.TypeOf((*EventAlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventAlarmExpressionComparison struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AttributeName string `xml:"attributeName"`
0000000000000000000000000000000000000000;;		Operator      string `xml:"operator"`
0000000000000000000000000000000000000000;;		Value         string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventAlarmExpressionComparison"] = reflect.TypeOf((*EventAlarmExpressionComparison)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventArgDesc struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name        string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Type        string                 `xml:"type"`
0000000000000000000000000000000000000000;;		Description BaseElementDescription `xml:"description,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventArgDesc"] = reflect.TypeOf((*EventArgDesc)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventArgument struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventArgument"] = reflect.TypeOf((*EventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Category        []BaseElementDescription      `xml:"category,typeattr"`
0000000000000000000000000000000000000000;;		EventInfo       []EventDescriptionEventDetail `xml:"eventInfo"`
0000000000000000000000000000000000000000;;		EnumeratedTypes []EnumDescription             `xml:"enumeratedTypes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventDescription"] = reflect.TypeOf((*EventDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventDescriptionEventDetail struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                     string `xml:"key"`
0000000000000000000000000000000000000000;;		Description             string `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Category                string `xml:"category"`
0000000000000000000000000000000000000000;;		FormatOnDatacenter      string `xml:"formatOnDatacenter"`
0000000000000000000000000000000000000000;;		FormatOnComputeResource string `xml:"formatOnComputeResource"`
0000000000000000000000000000000000000000;;		FormatOnHost            string `xml:"formatOnHost"`
0000000000000000000000000000000000000000;;		FormatOnVm              string `xml:"formatOnVm"`
0000000000000000000000000000000000000000;;		FullFormat              string `xml:"fullFormat"`
0000000000000000000000000000000000000000;;		LongDescription         string `xml:"longDescription,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventDescriptionEventDetail"] = reflect.TypeOf((*EventDescriptionEventDetail)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventEx struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EventTypeId string                `xml:"eventTypeId"`
0000000000000000000000000000000000000000;;		Severity    string                `xml:"severity,omitempty"`
0000000000000000000000000000000000000000;;		Message     string                `xml:"message,omitempty"`
0000000000000000000000000000000000000000;;		Arguments   []KeyAnyValue         `xml:"arguments,omitempty"`
0000000000000000000000000000000000000000;;		ObjectId    string                `xml:"objectId,omitempty"`
0000000000000000000000000000000000000000;;		ObjectType  string                `xml:"objectType,omitempty"`
0000000000000000000000000000000000000000;;		ObjectName  string                `xml:"objectName,omitempty"`
0000000000000000000000000000000000000000;;		Fault       *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventEx"] = reflect.TypeOf((*EventEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventFilterSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity             *EventFilterSpecByEntity   `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		Time               *EventFilterSpecByTime     `xml:"time,omitempty"`
0000000000000000000000000000000000000000;;		UserName           *EventFilterSpecByUsername `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		EventChainId       int32                      `xml:"eventChainId,omitempty"`
0000000000000000000000000000000000000000;;		Alarm              *ManagedObjectReference    `xml:"alarm,omitempty"`
0000000000000000000000000000000000000000;;		ScheduledTask      *ManagedObjectReference    `xml:"scheduledTask,omitempty"`
0000000000000000000000000000000000000000;;		DisableFullMessage *bool                      `xml:"disableFullMessage"`
0000000000000000000000000000000000000000;;		Category           []string                   `xml:"category,omitempty"`
0000000000000000000000000000000000000000;;		Type               []string                   `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Tag                []string                   `xml:"tag,omitempty"`
0000000000000000000000000000000000000000;;		EventTypeId        []string                   `xml:"eventTypeId,omitempty"`
0000000000000000000000000000000000000000;;		MaxCount           int32                      `xml:"maxCount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventFilterSpec"] = reflect.TypeOf((*EventFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventFilterSpecByEntity struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity    ManagedObjectReference         `xml:"entity"`
0000000000000000000000000000000000000000;;		Recursion EventFilterSpecRecursionOption `xml:"recursion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventFilterSpecByEntity"] = reflect.TypeOf((*EventFilterSpecByEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventFilterSpecByTime struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeginTime *time.Time `xml:"beginTime"`
0000000000000000000000000000000000000000;;		EndTime   *time.Time `xml:"endTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventFilterSpecByTime"] = reflect.TypeOf((*EventFilterSpecByTime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventFilterSpecByUsername struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemUser bool     `xml:"systemUser"`
0000000000000000000000000000000000000000;;		UserList   []string `xml:"userList,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventFilterSpecByUsername"] = reflect.TypeOf((*EventFilterSpecByUsername)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecuteHostProfile ExecuteHostProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExecuteHostProfile"] = reflect.TypeOf((*ExecuteHostProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecuteHostProfileRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference                 `xml:"_this"`
0000000000000000000000000000000000000000;;		Host          ManagedObjectReference                 `xml:"host"`
0000000000000000000000000000000000000000;;		DeferredParam []ProfileDeferredPolicyOptionParameter `xml:"deferredParam,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExecuteHostProfileRequestType"] = reflect.TypeOf((*ExecuteHostProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecuteHostProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval BaseProfileExecuteResult `xml:"returnval,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecuteSimpleCommand ExecuteSimpleCommandRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExecuteSimpleCommand"] = reflect.TypeOf((*ExecuteSimpleCommand)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecuteSimpleCommandRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Arguments []string               `xml:"arguments,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExecuteSimpleCommandRequestType"] = reflect.TypeOf((*ExecuteSimpleCommandRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExecuteSimpleCommandResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitLockdownMode ExitLockdownModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitLockdownMode"] = reflect.TypeOf((*ExitLockdownMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitLockdownModeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitLockdownModeRequestType"] = reflect.TypeOf((*ExitLockdownModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitLockdownModeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitMaintenanceModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitMaintenanceModeEvent"] = reflect.TypeOf((*ExitMaintenanceModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitMaintenanceModeRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Timeout int32                  `xml:"timeout"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitMaintenanceModeRequestType"] = reflect.TypeOf((*ExitMaintenanceModeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitMaintenanceMode_Task ExitMaintenanceModeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitMaintenanceMode_Task"] = reflect.TypeOf((*ExitMaintenanceMode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitMaintenanceMode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitStandbyModeFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitStandbyModeFailedEvent"] = reflect.TypeOf((*ExitStandbyModeFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitedStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitedStandbyModeEvent"] = reflect.TypeOf((*ExitedStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExitingStandbyModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExitingStandbyModeEvent"] = reflect.TypeOf((*ExitingStandbyModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpandVmfsDatastore ExpandVmfsDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpandVmfsDatastore"] = reflect.TypeOf((*ExpandVmfsDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpandVmfsDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference  `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      VmfsDatastoreExpandSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpandVmfsDatastoreRequestType"] = reflect.TypeOf((*ExpandVmfsDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpandVmfsDatastoreResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpandVmfsExtent ExpandVmfsExtentRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpandVmfsExtent"] = reflect.TypeOf((*ExpandVmfsExtent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpandVmfsExtentRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsPath string                 `xml:"vmfsPath"`
0000000000000000000000000000000000000000;;		Extent   HostScsiDiskPartition  `xml:"extent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpandVmfsExtentRequestType"] = reflect.TypeOf((*ExpandVmfsExtentRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpandVmfsExtentResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpiredAddonLicense struct {
0000000000000000000000000000000000000000;;		ExpiredFeatureLicense
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpiredAddonLicense"] = reflect.TypeOf((*ExpiredAddonLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpiredAddonLicenseFault ExpiredAddonLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpiredAddonLicenseFault"] = reflect.TypeOf((*ExpiredAddonLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpiredEditionLicense struct {
0000000000000000000000000000000000000000;;		ExpiredFeatureLicense
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpiredEditionLicense"] = reflect.TypeOf((*ExpiredEditionLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpiredEditionLicenseFault ExpiredEditionLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpiredEditionLicenseFault"] = reflect.TypeOf((*ExpiredEditionLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpiredFeatureLicense struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Feature        string    `xml:"feature"`
0000000000000000000000000000000000000000;;		Count          int32     `xml:"count"`
0000000000000000000000000000000000000000;;		ExpirationDate time.Time `xml:"expirationDate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpiredFeatureLicense"] = reflect.TypeOf((*ExpiredFeatureLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpiredFeatureLicenseFault BaseExpiredFeatureLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExpiredFeatureLicenseFault"] = reflect.TypeOf((*ExpiredFeatureLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportAnswerFileRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportAnswerFileRequestType"] = reflect.TypeOf((*ExportAnswerFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportAnswerFile_Task ExportAnswerFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportAnswerFile_Task"] = reflect.TypeOf((*ExportAnswerFile_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportAnswerFile_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportProfile ExportProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportProfile"] = reflect.TypeOf((*ExportProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportProfileRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportProfileRequestType"] = reflect.TypeOf((*ExportProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportSnapshot ExportSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportSnapshot"] = reflect.TypeOf((*ExportSnapshot)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportSnapshotRequestType"] = reflect.TypeOf((*ExportSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportSnapshotResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportVApp ExportVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportVApp"] = reflect.TypeOf((*ExportVApp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportVAppRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportVAppRequestType"] = reflect.TypeOf((*ExportVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportVAppResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportVm ExportVmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportVm"] = reflect.TypeOf((*ExportVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportVmRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExportVmRequestType"] = reflect.TypeOf((*ExportVmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExportVmResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtExtendedProductInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CompanyUrl    string                  `xml:"companyUrl,omitempty"`
0000000000000000000000000000000000000000;;		ProductUrl    string                  `xml:"productUrl,omitempty"`
0000000000000000000000000000000000000000;;		ManagementUrl string                  `xml:"managementUrl,omitempty"`
0000000000000000000000000000000000000000;;		Self          *ManagedObjectReference `xml:"self,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtExtendedProductInfo"] = reflect.TypeOf((*ExtExtendedProductInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtManagedEntityInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type         string `xml:"type"`
0000000000000000000000000000000000000000;;		SmallIconUrl string `xml:"smallIconUrl,omitempty"`
0000000000000000000000000000000000000000;;		IconUrl      string `xml:"iconUrl,omitempty"`
0000000000000000000000000000000000000000;;		Description  string `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtManagedEntityInfo"] = reflect.TypeOf((*ExtManagedEntityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtSolutionManagerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tab          []ExtSolutionManagerInfoTabInfo `xml:"tab,omitempty"`
0000000000000000000000000000000000000000;;		SmallIconUrl string                          `xml:"smallIconUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtSolutionManagerInfo"] = reflect.TypeOf((*ExtSolutionManagerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtSolutionManagerInfoTabInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Label string `xml:"label"`
0000000000000000000000000000000000000000;;		Url   string `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtSolutionManagerInfoTabInfo"] = reflect.TypeOf((*ExtSolutionManagerInfoTabInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendDiskRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id              ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore       ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		NewCapacityInMB int64                  `xml:"newCapacityInMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendDiskRequestType"] = reflect.TypeOf((*ExtendDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendDisk_Task ExtendDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendDisk_Task"] = reflect.TypeOf((*ExtendDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVffs ExtendVffsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendVffs"] = reflect.TypeOf((*ExtendVffs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVffsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VffsPath   string                 `xml:"vffsPath"`
0000000000000000000000000000000000000000;;		DevicePath string                 `xml:"devicePath"`
0000000000000000000000000000000000000000;;		Spec       *HostDiskPartitionSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendVffsRequestType"] = reflect.TypeOf((*ExtendVffsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVffsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name          string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter    *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		NewCapacityKb int64                   `xml:"newCapacityKb"`
0000000000000000000000000000000000000000;;		EagerZero     *bool                   `xml:"eagerZero"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendVirtualDiskRequestType"] = reflect.TypeOf((*ExtendVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVirtualDisk_Task ExtendVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendVirtualDisk_Task"] = reflect.TypeOf((*ExtendVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVmfsDatastore ExtendVmfsDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendVmfsDatastore"] = reflect.TypeOf((*ExtendVmfsDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVmfsDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference  `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      VmfsDatastoreExtendSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendVmfsDatastoreRequestType"] = reflect.TypeOf((*ExtendVmfsDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendVmfsDatastoreResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendedDescription struct {
0000000000000000000000000000000000000000;;		Description
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MessageCatalogKeyPrefix string        `xml:"messageCatalogKeyPrefix"`
0000000000000000000000000000000000000000;;		MessageArg              []KeyAnyValue `xml:"messageArg,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendedDescription"] = reflect.TypeOf((*ExtendedDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendedElementDescription struct {
0000000000000000000000000000000000000000;;		ElementDescription
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MessageCatalogKeyPrefix string        `xml:"messageCatalogKeyPrefix"`
0000000000000000000000000000000000000000;;		MessageArg              []KeyAnyValue `xml:"messageArg,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendedElementDescription"] = reflect.TypeOf((*ExtendedElementDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendedEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EventTypeId   string                 `xml:"eventTypeId"`
0000000000000000000000000000000000000000;;		ManagedObject ManagedObjectReference `xml:"managedObject"`
0000000000000000000000000000000000000000;;		Data          []ExtendedEventPair    `xml:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendedEvent"] = reflect.TypeOf((*ExtendedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendedEventPair struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string `xml:"key"`
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendedEventPair"] = reflect.TypeOf((*ExtendedEventPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendedFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FaultTypeId string     `xml:"faultTypeId"`
0000000000000000000000000000000000000000;;		Data        []KeyValue `xml:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendedFault"] = reflect.TypeOf((*ExtendedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtendedFaultFault ExtendedFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtendedFaultFault"] = reflect.TypeOf((*ExtendedFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Extension struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description            BaseDescription           `xml:"description,typeattr"`
0000000000000000000000000000000000000000;;		Key                    string                    `xml:"key"`
0000000000000000000000000000000000000000;;		Company                string                    `xml:"company,omitempty"`
0000000000000000000000000000000000000000;;		Type                   string                    `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version                string                    `xml:"version"`
0000000000000000000000000000000000000000;;		SubjectName            string                    `xml:"subjectName,omitempty"`
0000000000000000000000000000000000000000;;		Server                 []ExtensionServerInfo     `xml:"server,omitempty"`
0000000000000000000000000000000000000000;;		Client                 []ExtensionClientInfo     `xml:"client,omitempty"`
0000000000000000000000000000000000000000;;		TaskList               []ExtensionTaskTypeInfo   `xml:"taskList,omitempty"`
0000000000000000000000000000000000000000;;		EventList              []ExtensionEventTypeInfo  `xml:"eventList,omitempty"`
0000000000000000000000000000000000000000;;		FaultList              []ExtensionFaultTypeInfo  `xml:"faultList,omitempty"`
0000000000000000000000000000000000000000;;		PrivilegeList          []ExtensionPrivilegeInfo  `xml:"privilegeList,omitempty"`
0000000000000000000000000000000000000000;;		ResourceList           []ExtensionResourceInfo   `xml:"resourceList,omitempty"`
0000000000000000000000000000000000000000;;		LastHeartbeatTime      time.Time                 `xml:"lastHeartbeatTime"`
0000000000000000000000000000000000000000;;		HealthInfo             *ExtensionHealthInfo      `xml:"healthInfo,omitempty"`
0000000000000000000000000000000000000000;;		OvfConsumerInfo        *ExtensionOvfConsumerInfo `xml:"ovfConsumerInfo,omitempty"`
0000000000000000000000000000000000000000;;		ExtendedProductInfo    *ExtExtendedProductInfo   `xml:"extendedProductInfo,omitempty"`
0000000000000000000000000000000000000000;;		ManagedEntityInfo      []ExtManagedEntityInfo    `xml:"managedEntityInfo,omitempty"`
0000000000000000000000000000000000000000;;		ShownInSolutionManager *bool                     `xml:"shownInSolutionManager"`
0000000000000000000000000000000000000000;;		SolutionManagerInfo    *ExtSolutionManagerInfo   `xml:"solutionManagerInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Extension"] = reflect.TypeOf((*Extension)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionClientInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version     string          `xml:"version"`
0000000000000000000000000000000000000000;;		Description BaseDescription `xml:"description,typeattr"`
0000000000000000000000000000000000000000;;		Company     string          `xml:"company"`
0000000000000000000000000000000000000000;;		Type        string          `xml:"type"`
0000000000000000000000000000000000000000;;		Url         string          `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionClientInfo"] = reflect.TypeOf((*ExtensionClientInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionEventTypeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EventID         string `xml:"eventID"`
0000000000000000000000000000000000000000;;		EventTypeSchema string `xml:"eventTypeSchema,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionEventTypeInfo"] = reflect.TypeOf((*ExtensionEventTypeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionFaultTypeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FaultID string `xml:"faultID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionFaultTypeInfo"] = reflect.TypeOf((*ExtensionFaultTypeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionHealthInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url string `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionHealthInfo"] = reflect.TypeOf((*ExtensionHealthInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionManagerIpAllocationUsage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionKey string `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		NumAddresses int32  `xml:"numAddresses"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionManagerIpAllocationUsage"] = reflect.TypeOf((*ExtensionManagerIpAllocationUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionOvfConsumerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CallbackUrl string   `xml:"callbackUrl"`
0000000000000000000000000000000000000000;;		SectionType []string `xml:"sectionType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionOvfConsumerInfo"] = reflect.TypeOf((*ExtensionOvfConsumerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionPrivilegeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivID        string `xml:"privID"`
0000000000000000000000000000000000000000;;		PrivGroupName string `xml:"privGroupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionPrivilegeInfo"] = reflect.TypeOf((*ExtensionPrivilegeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionResourceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Locale string     `xml:"locale"`
0000000000000000000000000000000000000000;;		Module string     `xml:"module"`
0000000000000000000000000000000000000000;;		Data   []KeyValue `xml:"data"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionResourceInfo"] = reflect.TypeOf((*ExtensionResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionServerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url              string          `xml:"url"`
0000000000000000000000000000000000000000;;		Description      BaseDescription `xml:"description,typeattr"`
0000000000000000000000000000000000000000;;		Company          string          `xml:"company"`
0000000000000000000000000000000000000000;;		Type             string          `xml:"type"`
0000000000000000000000000000000000000000;;		AdminEmail       []string        `xml:"adminEmail"`
0000000000000000000000000000000000000000;;		ServerThumbprint string          `xml:"serverThumbprint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionServerInfo"] = reflect.TypeOf((*ExtensionServerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionTaskTypeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TaskID string `xml:"taskID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionTaskTypeInfo"] = reflect.TypeOf((*ExtensionTaskTypeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractOvfEnvironment ExtractOvfEnvironmentRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtractOvfEnvironment"] = reflect.TypeOf((*ExtractOvfEnvironment)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractOvfEnvironmentRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtractOvfEnvironmentRequestType"] = reflect.TypeOf((*ExtractOvfEnvironmentRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractOvfEnvironmentResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailToEnableSPBM struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cs                ManagedObjectReference               `xml:"cs"`
0000000000000000000000000000000000000000;;		CsName            string                               `xml:"csName"`
0000000000000000000000000000000000000000;;		HostLicenseStates []ComputeResourceHostSPBMLicenseInfo `xml:"hostLicenseStates"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailToEnableSPBM"] = reflect.TypeOf((*FailToEnableSPBM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailToEnableSPBMFault FailToEnableSPBM
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailToEnableSPBMFault"] = reflect.TypeOf((*FailToEnableSPBMFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailToLockFaultToleranceVMs struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName          string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;		Vm              ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		AlreadyLockedVm ManagedObjectReference `xml:"alreadyLockedVm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailToLockFaultToleranceVMs"] = reflect.TypeOf((*FailToLockFaultToleranceVMs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailToLockFaultToleranceVMsFault FailToLockFaultToleranceVMs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailToLockFaultToleranceVMsFault"] = reflect.TypeOf((*FailToLockFaultToleranceVMsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailoverLevelRestored struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailoverLevelRestored"] = reflect.TypeOf((*FailoverLevelRestored)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailoverNodeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterIpSettings CustomizationIPSettings  `xml:"clusterIpSettings"`
0000000000000000000000000000000000000000;;		FailoverIp        *CustomizationIPSettings `xml:"failoverIp,omitempty"`
0000000000000000000000000000000000000000;;		BiosUuid          string                   `xml:"biosUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailoverNodeInfo"] = reflect.TypeOf((*FailoverNodeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultDomainId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id string `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultDomainId"] = reflect.TypeOf((*FaultDomainId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceAntiAffinityViolated struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string                 `xml:"hostName"`
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceAntiAffinityViolated"] = reflect.TypeOf((*FaultToleranceAntiAffinityViolated)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceAntiAffinityViolatedFault FaultToleranceAntiAffinityViolated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceAntiAffinityViolatedFault"] = reflect.TypeOf((*FaultToleranceAntiAffinityViolatedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceCannotEditMem struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceCannotEditMem"] = reflect.TypeOf((*FaultToleranceCannotEditMem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceCannotEditMemFault FaultToleranceCannotEditMem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceCannotEditMemFault"] = reflect.TypeOf((*FaultToleranceCannotEditMemFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Role          int32    `xml:"role"`
0000000000000000000000000000000000000000;;		InstanceUuids []string `xml:"instanceUuids"`
0000000000000000000000000000000000000000;;		ConfigPaths   []string `xml:"configPaths"`
0000000000000000000000000000000000000000;;		Orphaned      *bool    `xml:"orphaned"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceConfigInfo"] = reflect.TypeOf((*FaultToleranceConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MetaDataPath    *FaultToleranceMetaSpec     `xml:"metaDataPath,omitempty"`
0000000000000000000000000000000000000000;;		SecondaryVmSpec *FaultToleranceVMConfigSpec `xml:"secondaryVmSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceConfigSpec"] = reflect.TypeOf((*FaultToleranceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceCpuIncompatible struct {
0000000000000000000000000000000000000000;;		CpuIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Model    bool `xml:"model"`
0000000000000000000000000000000000000000;;		Family   bool `xml:"family"`
0000000000000000000000000000000000000000;;		Stepping bool `xml:"stepping"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceCpuIncompatible"] = reflect.TypeOf((*FaultToleranceCpuIncompatible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceCpuIncompatibleFault FaultToleranceCpuIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceCpuIncompatibleFault"] = reflect.TypeOf((*FaultToleranceCpuIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceDiskSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk      BaseVirtualDevice      `xml:"disk,typeattr"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceDiskSpec"] = reflect.TypeOf((*FaultToleranceDiskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceMetaSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MetaDataDatastore ManagedObjectReference `xml:"metaDataDatastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceMetaSpec"] = reflect.TypeOf((*FaultToleranceMetaSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceNeedsThickDisk struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceNeedsThickDisk"] = reflect.TypeOf((*FaultToleranceNeedsThickDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceNeedsThickDiskFault FaultToleranceNeedsThickDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceNeedsThickDiskFault"] = reflect.TypeOf((*FaultToleranceNeedsThickDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceNotLicensed struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceNotLicensed"] = reflect.TypeOf((*FaultToleranceNotLicensed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceNotLicensedFault FaultToleranceNotLicensed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceNotLicensedFault"] = reflect.TypeOf((*FaultToleranceNotLicensedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceNotSameBuild struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Build string `xml:"build"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceNotSameBuild"] = reflect.TypeOf((*FaultToleranceNotSameBuild)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceNotSameBuildFault FaultToleranceNotSameBuild
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceNotSameBuildFault"] = reflect.TypeOf((*FaultToleranceNotSameBuildFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultTolerancePrimaryConfigInfo struct {
0000000000000000000000000000000000000000;;		FaultToleranceConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Secondaries []ManagedObjectReference `xml:"secondaries"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultTolerancePrimaryConfigInfo"] = reflect.TypeOf((*FaultTolerancePrimaryConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultTolerancePrimaryPowerOnNotAttempted struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecondaryVm ManagedObjectReference `xml:"secondaryVm"`
0000000000000000000000000000000000000000;;		PrimaryVm   ManagedObjectReference `xml:"primaryVm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultTolerancePrimaryPowerOnNotAttempted"] = reflect.TypeOf((*FaultTolerancePrimaryPowerOnNotAttempted)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultTolerancePrimaryPowerOnNotAttemptedFault FaultTolerancePrimaryPowerOnNotAttempted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultTolerancePrimaryPowerOnNotAttemptedFault"] = reflect.TypeOf((*FaultTolerancePrimaryPowerOnNotAttemptedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceSecondaryConfigInfo struct {
0000000000000000000000000000000000000000;;		FaultToleranceConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrimaryVM ManagedObjectReference `xml:"primaryVM"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceSecondaryConfigInfo"] = reflect.TypeOf((*FaultToleranceSecondaryConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceSecondaryOpResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm               ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		PowerOnAttempted bool                    `xml:"powerOnAttempted"`
0000000000000000000000000000000000000000;;		PowerOnResult    *ClusterPowerOnVmResult `xml:"powerOnResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceSecondaryOpResult"] = reflect.TypeOf((*FaultToleranceSecondaryOpResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceVMConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmConfig *ManagedObjectReference  `xml:"vmConfig,omitempty"`
0000000000000000000000000000000000000000;;		Disks    []FaultToleranceDiskSpec `xml:"disks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceVMConfigSpec"] = reflect.TypeOf((*FaultToleranceVMConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceVmNotDasProtected struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceVmNotDasProtected"] = reflect.TypeOf((*FaultToleranceVmNotDasProtected)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FaultToleranceVmNotDasProtectedFault FaultToleranceVmNotDasProtected
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FaultToleranceVmNotDasProtectedFault"] = reflect.TypeOf((*FaultToleranceVmNotDasProtectedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PriorityClass int32                      `xml:"priorityClass"`
0000000000000000000000000000000000000000;;		SourceMac     string                     `xml:"sourceMac"`
0000000000000000000000000000000000000000;;		VlanRange     []FcoeConfigVlanRange      `xml:"vlanRange"`
0000000000000000000000000000000000000000;;		Capabilities  FcoeConfigFcoeCapabilities `xml:"capabilities"`
0000000000000000000000000000000000000000;;		FcoeActive    bool                       `xml:"fcoeActive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeConfig"] = reflect.TypeOf((*FcoeConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeConfigFcoeCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PriorityClass    bool `xml:"priorityClass"`
0000000000000000000000000000000000000000;;		SourceMacAddress bool `xml:"sourceMacAddress"`
0000000000000000000000000000000000000000;;		VlanRange        bool `xml:"vlanRange"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeConfigFcoeCapabilities"] = reflect.TypeOf((*FcoeConfigFcoeCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeConfigFcoeSpecification struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UnderlyingPnic string                `xml:"underlyingPnic"`
0000000000000000000000000000000000000000;;		PriorityClass  int32                 `xml:"priorityClass,omitempty"`
0000000000000000000000000000000000000000;;		SourceMac      string                `xml:"sourceMac,omitempty"`
0000000000000000000000000000000000000000;;		VlanRange      []FcoeConfigVlanRange `xml:"vlanRange,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeConfigFcoeSpecification"] = reflect.TypeOf((*FcoeConfigFcoeSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeConfigVlanRange struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanLow  int32 `xml:"vlanLow"`
0000000000000000000000000000000000000000;;		VlanHigh int32 `xml:"vlanHigh"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeConfigVlanRange"] = reflect.TypeOf((*FcoeConfigVlanRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeFault"] = reflect.TypeOf((*FcoeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeFaultFault BaseFcoeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeFaultFault"] = reflect.TypeOf((*FcoeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeFaultPnicHasNoPortSet struct {
0000000000000000000000000000000000000000;;		FcoeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NicDevice string `xml:"nicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeFaultPnicHasNoPortSet"] = reflect.TypeOf((*FcoeFaultPnicHasNoPortSet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FcoeFaultPnicHasNoPortSetFault FcoeFaultPnicHasNoPortSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FcoeFaultPnicHasNoPortSetFault"] = reflect.TypeOf((*FcoeFaultPnicHasNoPortSetFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FeatureRequirementsNotMet struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FeatureRequirement []VirtualMachineFeatureRequirement `xml:"featureRequirement,omitempty"`
0000000000000000000000000000000000000000;;		Vm                 *ManagedObjectReference            `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Host               *ManagedObjectReference            `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FeatureRequirementsNotMet"] = reflect.TypeOf((*FeatureRequirementsNotMet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FeatureRequirementsNotMetFault FeatureRequirementsNotMet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FeatureRequirementsNotMetFault"] = reflect.TypeOf((*FeatureRequirementsNotMetFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchDVPortKeys FetchDVPortKeysRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchDVPortKeys"] = reflect.TypeOf((*FetchDVPortKeys)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchDVPortKeysRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference                `xml:"_this"`
0000000000000000000000000000000000000000;;		Criteria *DistributedVirtualSwitchPortCriteria `xml:"criteria,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchDVPortKeysRequestType"] = reflect.TypeOf((*FetchDVPortKeysRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchDVPortKeysResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchDVPorts FetchDVPortsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchDVPorts"] = reflect.TypeOf((*FetchDVPorts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchDVPortsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference                `xml:"_this"`
0000000000000000000000000000000000000000;;		Criteria *DistributedVirtualSwitchPortCriteria `xml:"criteria,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchDVPortsRequestType"] = reflect.TypeOf((*FetchDVPortsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchDVPortsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []DistributedVirtualPort `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchSystemEventLog FetchSystemEventLogRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchSystemEventLog"] = reflect.TypeOf((*FetchSystemEventLog)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchSystemEventLogRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchSystemEventLogRequestType"] = reflect.TypeOf((*FetchSystemEventLogRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchSystemEventLogResponse struct {
0000000000000000000000000000000000000000;;		Returnval []SystemEventInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchUserPrivilegeOnEntities FetchUserPrivilegeOnEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchUserPrivilegeOnEntities"] = reflect.TypeOf((*FetchUserPrivilegeOnEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchUserPrivilegeOnEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entities []ManagedObjectReference `xml:"entities"`
0000000000000000000000000000000000000000;;		UserName string                   `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FetchUserPrivilegeOnEntitiesRequestType"] = reflect.TypeOf((*FetchUserPrivilegeOnEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FetchUserPrivilegeOnEntitiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []UserPrivilegeResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileAlreadyExists struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileAlreadyExists"] = reflect.TypeOf((*FileAlreadyExists)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileAlreadyExistsFault FileAlreadyExists
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileAlreadyExistsFault"] = reflect.TypeOf((*FileAlreadyExistsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileBackedPortNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileBackedPortNotSupported"] = reflect.TypeOf((*FileBackedPortNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileBackedPortNotSupportedFault FileBackedPortNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileBackedPortNotSupportedFault"] = reflect.TypeOf((*FileBackedPortNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileBackedVirtualDiskSpec struct {
0000000000000000000000000000000000000000;;		VirtualDiskSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CapacityKb int64                           `xml:"capacityKb"`
0000000000000000000000000000000000000000;;		Profile    []BaseVirtualMachineProfileSpec `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Crypto     BaseCryptoSpec                  `xml:"crypto,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileBackedVirtualDiskSpec"] = reflect.TypeOf((*FileBackedVirtualDiskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		File string `xml:"file"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileFault"] = reflect.TypeOf((*FileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileFaultFault BaseFileFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileFaultFault"] = reflect.TypeOf((*FileFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path         string     `xml:"path"`
0000000000000000000000000000000000000000;;		FriendlyName string     `xml:"friendlyName,omitempty"`
0000000000000000000000000000000000000000;;		FileSize     int64      `xml:"fileSize,omitempty"`
0000000000000000000000000000000000000000;;		Modification *time.Time `xml:"modification"`
0000000000000000000000000000000000000000;;		Owner        string     `xml:"owner,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileInfo"] = reflect.TypeOf((*FileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileLocked struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileLocked"] = reflect.TypeOf((*FileLocked)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileLockedFault FileLocked
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileLockedFault"] = reflect.TypeOf((*FileLockedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNameTooLong struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileNameTooLong"] = reflect.TypeOf((*FileNameTooLong)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNameTooLongFault FileNameTooLong
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileNameTooLongFault"] = reflect.TypeOf((*FileNameTooLongFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNotFound struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileNotFound"] = reflect.TypeOf((*FileNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNotFoundFault FileNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileNotFoundFault"] = reflect.TypeOf((*FileNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNotWritable struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileNotWritable"] = reflect.TypeOf((*FileNotWritable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNotWritableFault FileNotWritable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileNotWritableFault"] = reflect.TypeOf((*FileNotWritableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileQuery struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileQuery"] = reflect.TypeOf((*FileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileQueryFlags struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileType     bool  `xml:"fileType"`
0000000000000000000000000000000000000000;;		FileSize     bool  `xml:"fileSize"`
0000000000000000000000000000000000000000;;		Modification bool  `xml:"modification"`
0000000000000000000000000000000000000000;;		FileOwner    *bool `xml:"fileOwner"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileQueryFlags"] = reflect.TypeOf((*FileQueryFlags)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileTooLarge struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore   string `xml:"datastore"`
0000000000000000000000000000000000000000;;		FileSize    int64  `xml:"fileSize"`
0000000000000000000000000000000000000000;;		MaxFileSize int64  `xml:"maxFileSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileTooLarge"] = reflect.TypeOf((*FileTooLarge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileTooLargeFault FileTooLarge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileTooLargeFault"] = reflect.TypeOf((*FileTooLargeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileTransferInformation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Attributes BaseGuestFileAttributes `xml:"attributes,typeattr"`
0000000000000000000000000000000000000000;;		Size       int64                   `xml:"size"`
0000000000000000000000000000000000000000;;		Url        string                  `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileTransferInformation"] = reflect.TypeOf((*FileTransferInformation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FilesystemQuiesceFault struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FilesystemQuiesceFault"] = reflect.TypeOf((*FilesystemQuiesceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FilesystemQuiesceFaultFault FilesystemQuiesceFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FilesystemQuiesceFaultFault"] = reflect.TypeOf((*FilesystemQuiesceFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FilterInUse struct {
0000000000000000000000000000000000000000;;		ResourceInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk []VirtualDiskId `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FilterInUse"] = reflect.TypeOf((*FilterInUse)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FilterInUseFault FilterInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FilterInUseFault"] = reflect.TypeOf((*FilterInUseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByDnsName FindAllByDnsNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAllByDnsName"] = reflect.TypeOf((*FindAllByDnsName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByDnsNameRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		DnsName    string                  `xml:"dnsName"`
0000000000000000000000000000000000000000;;		VmSearch   bool                    `xml:"vmSearch"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAllByDnsNameRequestType"] = reflect.TypeOf((*FindAllByDnsNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByDnsNameResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByIp FindAllByIpRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAllByIp"] = reflect.TypeOf((*FindAllByIp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByIpRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Ip         string                  `xml:"ip"`
0000000000000000000000000000000000000000;;		VmSearch   bool                    `xml:"vmSearch"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAllByIpRequestType"] = reflect.TypeOf((*FindAllByIpRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByIpResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByUuid FindAllByUuidRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAllByUuid"] = reflect.TypeOf((*FindAllByUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByUuidRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter   *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Uuid         string                  `xml:"uuid"`
0000000000000000000000000000000000000000;;		VmSearch     bool                    `xml:"vmSearch"`
0000000000000000000000000000000000000000;;		InstanceUuid *bool                   `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAllByUuidRequestType"] = reflect.TypeOf((*FindAllByUuidRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAllByUuidResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAssociatedProfile FindAssociatedProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAssociatedProfile"] = reflect.TypeOf((*FindAssociatedProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAssociatedProfileRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindAssociatedProfileRequestType"] = reflect.TypeOf((*FindAssociatedProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindAssociatedProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByDatastorePath FindByDatastorePathRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByDatastorePath"] = reflect.TypeOf((*FindByDatastorePath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByDatastorePathRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter ManagedObjectReference `xml:"datacenter"`
0000000000000000000000000000000000000000;;		Path       string                 `xml:"path"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByDatastorePathRequestType"] = reflect.TypeOf((*FindByDatastorePathRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByDatastorePathResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByDnsName FindByDnsNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByDnsName"] = reflect.TypeOf((*FindByDnsName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByDnsNameRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		DnsName    string                  `xml:"dnsName"`
0000000000000000000000000000000000000000;;		VmSearch   bool                    `xml:"vmSearch"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByDnsNameRequestType"] = reflect.TypeOf((*FindByDnsNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByDnsNameResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByInventoryPath FindByInventoryPathRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByInventoryPath"] = reflect.TypeOf((*FindByInventoryPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByInventoryPathRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		InventoryPath string                 `xml:"inventoryPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByInventoryPathRequestType"] = reflect.TypeOf((*FindByInventoryPathRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByInventoryPathResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByIp FindByIpRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByIp"] = reflect.TypeOf((*FindByIp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByIpRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Ip         string                  `xml:"ip"`
0000000000000000000000000000000000000000;;		VmSearch   bool                    `xml:"vmSearch"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByIpRequestType"] = reflect.TypeOf((*FindByIpRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByIpResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByUuid FindByUuidRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByUuid"] = reflect.TypeOf((*FindByUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByUuidRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datacenter   *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Uuid         string                  `xml:"uuid"`
0000000000000000000000000000000000000000;;		VmSearch     bool                    `xml:"vmSearch"`
0000000000000000000000000000000000000000;;		InstanceUuid *bool                   `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindByUuidRequestType"] = reflect.TypeOf((*FindByUuidRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindByUuidResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindChild FindChildRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindChild"] = reflect.TypeOf((*FindChild)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindChildRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Name   string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindChildRequestType"] = reflect.TypeOf((*FindChildRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindChildResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindExtension FindExtensionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindExtension"] = reflect.TypeOf((*FindExtension)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindExtensionRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindExtensionRequestType"] = reflect.TypeOf((*FindExtensionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindExtensionResponse struct {
0000000000000000000000000000000000000000;;		Returnval *Extension `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindRulesForVm FindRulesForVmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindRulesForVm"] = reflect.TypeOf((*FindRulesForVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindRulesForVmRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FindRulesForVmRequestType"] = reflect.TypeOf((*FindRulesForVmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindRulesForVmResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseClusterRuleInfo `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FirewallProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ruleset []FirewallProfileRulesetProfile `xml:"ruleset,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FirewallProfile"] = reflect.TypeOf((*FirewallProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FirewallProfileRulesetProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FirewallProfileRulesetProfile"] = reflect.TypeOf((*FirewallProfileRulesetProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FloatOption struct {
0000000000000000000000000000000000000000;;		OptionType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Min          float32 `xml:"min"`
0000000000000000000000000000000000000000;;		Max          float32 `xml:"max"`
0000000000000000000000000000000000000000;;		DefaultValue float32 `xml:"defaultValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FloatOption"] = reflect.TypeOf((*FloatOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FloppyImageFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FloppyImageFileInfo"] = reflect.TypeOf((*FloppyImageFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FloppyImageFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FloppyImageFileQuery"] = reflect.TypeOf((*FloppyImageFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FolderEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Folder ManagedObjectReference `xml:"folder"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FolderEventArgument"] = reflect.TypeOf((*FolderEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FolderFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FolderFileInfo"] = reflect.TypeOf((*FolderFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FolderFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FolderFileQuery"] = reflect.TypeOf((*FolderFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FormatVffs FormatVffsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FormatVffs"] = reflect.TypeOf((*FormatVffs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FormatVffsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CreateSpec HostVffsSpec           `xml:"createSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FormatVffsRequestType"] = reflect.TypeOf((*FormatVffsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FormatVffsResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostVffsVolume `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FormatVmfs FormatVmfsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FormatVmfs"] = reflect.TypeOf((*FormatVmfs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FormatVmfsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CreateSpec HostVmfsSpec           `xml:"createSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FormatVmfsRequestType"] = reflect.TypeOf((*FormatVmfsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FormatVmfsResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostVmfsVolume `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FtIssuesOnHost struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostName string                 `xml:"hostName"`
0000000000000000000000000000000000000000;;		Errors   []LocalizedMethodFault `xml:"errors,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FtIssuesOnHost"] = reflect.TypeOf((*FtIssuesOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FtIssuesOnHostFault FtIssuesOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FtIssuesOnHostFault"] = reflect.TypeOf((*FtIssuesOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FullStorageVMotionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FullStorageVMotionNotSupported"] = reflect.TypeOf((*FullStorageVMotionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FullStorageVMotionNotSupportedFault FullStorageVMotionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FullStorageVMotionNotSupportedFault"] = reflect.TypeOf((*FullStorageVMotionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayConnectFault struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GatewayType string              `xml:"gatewayType"`
0000000000000000000000000000000000000000;;		GatewayId   string              `xml:"gatewayId"`
0000000000000000000000000000000000000000;;		GatewayInfo string              `xml:"gatewayInfo"`
0000000000000000000000000000000000000000;;		Details     *LocalizableMessage `xml:"details,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayConnectFault"] = reflect.TypeOf((*GatewayConnectFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayConnectFaultFault BaseGatewayConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayConnectFaultFault"] = reflect.TypeOf((*GatewayConnectFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayHostNotReachable struct {
0000000000000000000000000000000000000000;;		GatewayToHostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayHostNotReachable"] = reflect.TypeOf((*GatewayHostNotReachable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayHostNotReachableFault GatewayHostNotReachable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayHostNotReachableFault"] = reflect.TypeOf((*GatewayHostNotReachableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayNotFound struct {
0000000000000000000000000000000000000000;;		GatewayConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayNotFound"] = reflect.TypeOf((*GatewayNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayNotFoundFault GatewayNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayNotFoundFault"] = reflect.TypeOf((*GatewayNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayNotReachable struct {
0000000000000000000000000000000000000000;;		GatewayConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayNotReachable"] = reflect.TypeOf((*GatewayNotReachable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayNotReachableFault GatewayNotReachable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayNotReachableFault"] = reflect.TypeOf((*GatewayNotReachableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayOperationRefused struct {
0000000000000000000000000000000000000000;;		GatewayConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayOperationRefused"] = reflect.TypeOf((*GatewayOperationRefused)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayOperationRefusedFault GatewayOperationRefused
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayOperationRefusedFault"] = reflect.TypeOf((*GatewayOperationRefusedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayToHostAuthFault struct {
0000000000000000000000000000000000000000;;		GatewayToHostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InvalidProperties []string `xml:"invalidProperties"`
0000000000000000000000000000000000000000;;		MissingProperties []string `xml:"missingProperties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayToHostAuthFault"] = reflect.TypeOf((*GatewayToHostAuthFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayToHostAuthFaultFault GatewayToHostAuthFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayToHostAuthFaultFault"] = reflect.TypeOf((*GatewayToHostAuthFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayToHostConnectFault struct {
0000000000000000000000000000000000000000;;		GatewayConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `xml:"hostname"`
0000000000000000000000000000000000000000;;		Port     int32  `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayToHostConnectFault"] = reflect.TypeOf((*GatewayToHostConnectFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayToHostConnectFaultFault BaseGatewayToHostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayToHostConnectFaultFault"] = reflect.TypeOf((*GatewayToHostConnectFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayToHostTrustVerifyFault struct {
0000000000000000000000000000000000000000;;		GatewayToHostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VerificationToken  string     `xml:"verificationToken"`
0000000000000000000000000000000000000000;;		PropertiesToVerify []KeyValue `xml:"propertiesToVerify"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayToHostTrustVerifyFault"] = reflect.TypeOf((*GatewayToHostTrustVerifyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GatewayToHostTrustVerifyFaultFault GatewayToHostTrustVerifyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GatewayToHostTrustVerifyFaultFault"] = reflect.TypeOf((*GatewayToHostTrustVerifyFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message string `xml:"message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralEvent"] = reflect.TypeOf((*GeneralEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralHostErrorEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralHostErrorEvent"] = reflect.TypeOf((*GeneralHostErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralHostInfoEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralHostInfoEvent"] = reflect.TypeOf((*GeneralHostInfoEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralHostWarningEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralHostWarningEvent"] = reflect.TypeOf((*GeneralHostWarningEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralUserEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralUserEvent"] = reflect.TypeOf((*GeneralUserEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralVmErrorEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralVmErrorEvent"] = reflect.TypeOf((*GeneralVmErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralVmInfoEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralVmInfoEvent"] = reflect.TypeOf((*GeneralVmInfoEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneralVmWarningEvent struct {
0000000000000000000000000000000000000000;;		GeneralEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GeneralVmWarningEvent"] = reflect.TypeOf((*GeneralVmWarningEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateCertificateSigningRequest GenerateCertificateSigningRequestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateCertificateSigningRequest"] = reflect.TypeOf((*GenerateCertificateSigningRequest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateCertificateSigningRequestByDn GenerateCertificateSigningRequestByDnRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateCertificateSigningRequestByDn"] = reflect.TypeOf((*GenerateCertificateSigningRequestByDn)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateCertificateSigningRequestByDnRequestType struct {
0000000000000000000000000000000000000000;;		This              ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DistinguishedName string                 `xml:"distinguishedName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateCertificateSigningRequestByDnRequestType"] = reflect.TypeOf((*GenerateCertificateSigningRequestByDnRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateCertificateSigningRequestByDnResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateCertificateSigningRequestRequestType struct {
0000000000000000000000000000000000000000;;		This                     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		UseIpAddressAsCommonName bool                   `xml:"useIpAddressAsCommonName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateCertificateSigningRequestRequestType"] = reflect.TypeOf((*GenerateCertificateSigningRequestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateCertificateSigningRequestResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateClientCsr GenerateClientCsrRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateClientCsr"] = reflect.TypeOf((*GenerateClientCsr)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateClientCsrRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateClientCsrRequestType"] = reflect.TypeOf((*GenerateClientCsrRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateClientCsrResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateConfigTaskList GenerateConfigTaskListRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateConfigTaskList"] = reflect.TypeOf((*GenerateConfigTaskList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateConfigTaskListRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ConfigSpec HostConfigSpec         `xml:"configSpec"`
0000000000000000000000000000000000000000;;		Host       ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateConfigTaskListRequestType"] = reflect.TypeOf((*GenerateConfigTaskListRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateConfigTaskListResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostProfileManagerConfigTaskList `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateHostConfigTaskSpecRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		HostsInfo []StructuredCustomizations `xml:"hostsInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateHostConfigTaskSpecRequestType"] = reflect.TypeOf((*GenerateHostConfigTaskSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateHostConfigTaskSpec_Task GenerateHostConfigTaskSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateHostConfigTaskSpec_Task"] = reflect.TypeOf((*GenerateHostConfigTaskSpec_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateHostConfigTaskSpec_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateHostProfileTaskListRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ConfigSpec HostConfigSpec         `xml:"configSpec"`
0000000000000000000000000000000000000000;;		Host       ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateHostProfileTaskListRequestType"] = reflect.TypeOf((*GenerateHostProfileTaskListRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateHostProfileTaskList_Task GenerateHostProfileTaskListRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateHostProfileTaskList_Task"] = reflect.TypeOf((*GenerateHostProfileTaskList_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateHostProfileTaskList_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateKey GenerateKeyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateKey"] = reflect.TypeOf((*GenerateKey)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateKeyRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		KeyProvider *KeyProviderId         `xml:"keyProvider,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateKeyRequestType"] = reflect.TypeOf((*GenerateKeyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateKeyResponse struct {
0000000000000000000000000000000000000000;;		Returnval CryptoKeyResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateLogBundlesRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		IncludeDefault bool                     `xml:"includeDefault"`
0000000000000000000000000000000000000000;;		Host           []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateLogBundlesRequestType"] = reflect.TypeOf((*GenerateLogBundlesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateLogBundles_Task GenerateLogBundlesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateLogBundles_Task"] = reflect.TypeOf((*GenerateLogBundles_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateLogBundles_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateSelfSignedClientCert GenerateSelfSignedClientCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateSelfSignedClientCert"] = reflect.TypeOf((*GenerateSelfSignedClientCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateSelfSignedClientCertRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenerateSelfSignedClientCertRequestType"] = reflect.TypeOf((*GenerateSelfSignedClientCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateSelfSignedClientCertResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericDrsFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostFaults []LocalizedMethodFault `xml:"hostFaults,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenericDrsFault"] = reflect.TypeOf((*GenericDrsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericDrsFaultFault GenericDrsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenericDrsFaultFault"] = reflect.TypeOf((*GenericDrsFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericVmConfigFault struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenericVmConfigFault"] = reflect.TypeOf((*GenericVmConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericVmConfigFaultFault GenericVmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GenericVmConfigFaultFault"] = reflect.TypeOf((*GenericVmConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAlarm GetAlarmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetAlarm"] = reflect.TypeOf((*GetAlarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAlarmRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetAlarmRequestType"] = reflect.TypeOf((*GetAlarmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAlarmResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAlarmState GetAlarmStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetAlarmState"] = reflect.TypeOf((*GetAlarmState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAlarmStateRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetAlarmStateRequestType"] = reflect.TypeOf((*GetAlarmStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAlarmStateResponse struct {
0000000000000000000000000000000000000000;;		Returnval []AlarmState `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetCustomizationSpec GetCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetCustomizationSpec"] = reflect.TypeOf((*GetCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetCustomizationSpecRequestType"] = reflect.TypeOf((*GetCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;		Returnval CustomizationSpecItem `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetPublicKey GetPublicKeyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetPublicKey"] = reflect.TypeOf((*GetPublicKey)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetPublicKeyRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetPublicKeyRequestType"] = reflect.TypeOf((*GetPublicKeyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetPublicKeyResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetResourceUsage GetResourceUsageRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetResourceUsage"] = reflect.TypeOf((*GetResourceUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetResourceUsageRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetResourceUsageRequestType"] = reflect.TypeOf((*GetResourceUsageRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetResourceUsageResponse struct {
0000000000000000000000000000000000000000;;		Returnval ClusterResourceUsageSummary `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVchaClusterHealth GetVchaClusterHealthRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetVchaClusterHealth"] = reflect.TypeOf((*GetVchaClusterHealth)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVchaClusterHealthRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetVchaClusterHealthRequestType"] = reflect.TypeOf((*GetVchaClusterHealthRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVchaClusterHealthResponse struct {
0000000000000000000000000000000000000000;;		Returnval VchaClusterHealth `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVsanObjExtAttrs GetVsanObjExtAttrsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetVsanObjExtAttrs"] = reflect.TypeOf((*GetVsanObjExtAttrs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVsanObjExtAttrsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids []string               `xml:"uuids"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GetVsanObjExtAttrsRequestType"] = reflect.TypeOf((*GetVsanObjExtAttrsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVsanObjExtAttrsResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GhostDvsProxySwitchDetectedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchUuid []string `xml:"switchUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GhostDvsProxySwitchDetectedEvent"] = reflect.TypeOf((*GhostDvsProxySwitchDetectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GhostDvsProxySwitchRemovedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchUuid []string `xml:"switchUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GhostDvsProxySwitchRemovedEvent"] = reflect.TypeOf((*GhostDvsProxySwitchRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GlobalMessageChangedEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message     string `xml:"message"`
0000000000000000000000000000000000000000;;		PrevMessage string `xml:"prevMessage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GlobalMessageChangedEvent"] = reflect.TypeOf((*GlobalMessageChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GroupAlarmAction struct {
0000000000000000000000000000000000000000;;		AlarmAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Action []BaseAlarmAction `xml:"action,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GroupAlarmAction"] = reflect.TypeOf((*GroupAlarmAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAliases struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Base64Cert string               `xml:"base64Cert"`
0000000000000000000000000000000000000000;;		Aliases    []GuestAuthAliasInfo `xml:"aliases"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAliases"] = reflect.TypeOf((*GuestAliases)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthAliasInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Subject BaseGuestAuthSubject `xml:"subject,typeattr"`
0000000000000000000000000000000000000000;;		Comment string               `xml:"comment"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthAliasInfo"] = reflect.TypeOf((*GuestAuthAliasInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthAnySubject struct {
0000000000000000000000000000000000000000;;		GuestAuthSubject
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthAnySubject"] = reflect.TypeOf((*GuestAuthAnySubject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthNamedSubject struct {
0000000000000000000000000000000000000000;;		GuestAuthSubject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthNamedSubject"] = reflect.TypeOf((*GuestAuthNamedSubject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthSubject struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthSubject"] = reflect.TypeOf((*GuestAuthSubject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthentication struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InteractiveSession bool `xml:"interactiveSession"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthentication"] = reflect.TypeOf((*GuestAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthenticationChallenge struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServerChallenge BaseGuestAuthentication `xml:"serverChallenge,typeattr"`
0000000000000000000000000000000000000000;;		SessionID       int64                   `xml:"sessionID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthenticationChallenge"] = reflect.TypeOf((*GuestAuthenticationChallenge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthenticationChallengeFault GuestAuthenticationChallenge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthenticationChallengeFault"] = reflect.TypeOf((*GuestAuthenticationChallengeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestComponentsOutOfDate struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestComponentsOutOfDate"] = reflect.TypeOf((*GuestComponentsOutOfDate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestComponentsOutOfDateFault GuestComponentsOutOfDate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestComponentsOutOfDateFault"] = reflect.TypeOf((*GuestComponentsOutOfDateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestDiskInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskPath  string `xml:"diskPath,omitempty"`
0000000000000000000000000000000000000000;;		Capacity  int64  `xml:"capacity,omitempty"`
0000000000000000000000000000000000000000;;		FreeSpace int64  `xml:"freeSpace,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestDiskInfo"] = reflect.TypeOf((*GuestDiskInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestFileAttributes struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ModificationTime *time.Time `xml:"modificationTime"`
0000000000000000000000000000000000000000;;		AccessTime       *time.Time `xml:"accessTime"`
0000000000000000000000000000000000000000;;		SymlinkTarget    string     `xml:"symlinkTarget,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestFileAttributes"] = reflect.TypeOf((*GuestFileAttributes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestFileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path       string                  `xml:"path"`
0000000000000000000000000000000000000000;;		Type       string                  `xml:"type"`
0000000000000000000000000000000000000000;;		Size       int64                   `xml:"size"`
0000000000000000000000000000000000000000;;		Attributes BaseGuestFileAttributes `xml:"attributes,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestFileInfo"] = reflect.TypeOf((*GuestFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ToolsStatus                     VirtualMachineToolsStatus          `xml:"toolsStatus,omitempty"`
0000000000000000000000000000000000000000;;		ToolsVersionStatus              string                             `xml:"toolsVersionStatus,omitempty"`
0000000000000000000000000000000000000000;;		ToolsVersionStatus2             string                             `xml:"toolsVersionStatus2,omitempty"`
0000000000000000000000000000000000000000;;		ToolsRunningStatus              string                             `xml:"toolsRunningStatus,omitempty"`
0000000000000000000000000000000000000000;;		ToolsVersion                    string                             `xml:"toolsVersion,omitempty"`
0000000000000000000000000000000000000000;;		ToolsInstallType                string                             `xml:"toolsInstallType,omitempty"`
0000000000000000000000000000000000000000;;		GuestId                         string                             `xml:"guestId,omitempty"`
0000000000000000000000000000000000000000;;		GuestFamily                     string                             `xml:"guestFamily,omitempty"`
0000000000000000000000000000000000000000;;		GuestFullName                   string                             `xml:"guestFullName,omitempty"`
0000000000000000000000000000000000000000;;		HostName                        string                             `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		IpAddress                       string                             `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		Net                             []GuestNicInfo                     `xml:"net,omitempty"`
0000000000000000000000000000000000000000;;		IpStack                         []GuestStackInfo                   `xml:"ipStack,omitempty"`
0000000000000000000000000000000000000000;;		Disk                            []GuestDiskInfo                    `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;		Screen                          *GuestScreenInfo                   `xml:"screen,omitempty"`
0000000000000000000000000000000000000000;;		GuestState                      string                             `xml:"guestState"`
0000000000000000000000000000000000000000;;		AppHeartbeatStatus              string                             `xml:"appHeartbeatStatus,omitempty"`
0000000000000000000000000000000000000000;;		GuestKernelCrashed              *bool                              `xml:"guestKernelCrashed"`
0000000000000000000000000000000000000000;;		AppState                        string                             `xml:"appState,omitempty"`
0000000000000000000000000000000000000000;;		GuestOperationsReady            *bool                              `xml:"guestOperationsReady"`
0000000000000000000000000000000000000000;;		InteractiveGuestOperationsReady *bool                              `xml:"interactiveGuestOperationsReady"`
0000000000000000000000000000000000000000;;		GuestStateChangeSupported       *bool                              `xml:"guestStateChangeSupported"`
0000000000000000000000000000000000000000;;		GenerationInfo                  []GuestInfoNamespaceGenerationInfo `xml:"generationInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestInfo"] = reflect.TypeOf((*GuestInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestInfoNamespaceGenerationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key          string `xml:"key"`
0000000000000000000000000000000000000000;;		GenerationNo int32  `xml:"generationNo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestInfoNamespaceGenerationInfo"] = reflect.TypeOf((*GuestInfoNamespaceGenerationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestListFileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Files     []GuestFileInfo `xml:"files,omitempty"`
0000000000000000000000000000000000000000;;		Remaining int32           `xml:"remaining"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestListFileInfo"] = reflect.TypeOf((*GuestListFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestMappedAliases struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Base64Cert string                 `xml:"base64Cert"`
0000000000000000000000000000000000000000;;		Username   string                 `xml:"username"`
0000000000000000000000000000000000000000;;		Subjects   []BaseGuestAuthSubject `xml:"subjects,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestMappedAliases"] = reflect.TypeOf((*GuestMappedAliases)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestMultipleMappings struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestMultipleMappings"] = reflect.TypeOf((*GuestMultipleMappings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestMultipleMappingsFault GuestMultipleMappings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestMultipleMappingsFault"] = reflect.TypeOf((*GuestMultipleMappingsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestNicInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network        string                `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		IpAddress      []string              `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		MacAddress     string                `xml:"macAddress,omitempty"`
0000000000000000000000000000000000000000;;		Connected      bool                  `xml:"connected"`
0000000000000000000000000000000000000000;;		DeviceConfigId int32                 `xml:"deviceConfigId"`
0000000000000000000000000000000000000000;;		DnsConfig      *NetDnsConfigInfo     `xml:"dnsConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpConfig       *NetIpConfigInfo      `xml:"ipConfig,omitempty"`
0000000000000000000000000000000000000000;;		NetBIOSConfig  BaseNetBIOSConfigInfo `xml:"netBIOSConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestNicInfo"] = reflect.TypeOf((*GuestNicInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOperationsFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestOperationsFault"] = reflect.TypeOf((*GuestOperationsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOperationsFaultFault BaseGuestOperationsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestOperationsFaultFault"] = reflect.TypeOf((*GuestOperationsFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOperationsUnavailable struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestOperationsUnavailable"] = reflect.TypeOf((*GuestOperationsUnavailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOperationsUnavailableFault GuestOperationsUnavailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestOperationsUnavailableFault"] = reflect.TypeOf((*GuestOperationsUnavailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOsDescriptor struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id                              string          `xml:"id"`
0000000000000000000000000000000000000000;;		Family                          string          `xml:"family"`
0000000000000000000000000000000000000000;;		FullName                        string          `xml:"fullName"`
0000000000000000000000000000000000000000;;		SupportedMaxCPUs                int32           `xml:"supportedMaxCPUs"`
0000000000000000000000000000000000000000;;		NumSupportedPhysicalSockets     int32           `xml:"numSupportedPhysicalSockets,omitempty"`
0000000000000000000000000000000000000000;;		NumSupportedCoresPerSocket      int32           `xml:"numSupportedCoresPerSocket,omitempty"`
0000000000000000000000000000000000000000;;		SupportedMinMemMB               int32           `xml:"supportedMinMemMB"`
0000000000000000000000000000000000000000;;		SupportedMaxMemMB               int32           `xml:"supportedMaxMemMB"`
0000000000000000000000000000000000000000;;		RecommendedMemMB                int32           `xml:"recommendedMemMB"`
0000000000000000000000000000000000000000;;		RecommendedColorDepth           int32           `xml:"recommendedColorDepth"`
0000000000000000000000000000000000000000;;		SupportedDiskControllerList     []string        `xml:"supportedDiskControllerList"`
0000000000000000000000000000000000000000;;		RecommendedSCSIController       string          `xml:"recommendedSCSIController,omitempty"`
0000000000000000000000000000000000000000;;		RecommendedDiskController       string          `xml:"recommendedDiskController"`
0000000000000000000000000000000000000000;;		SupportedNumDisks               int32           `xml:"supportedNumDisks"`
0000000000000000000000000000000000000000;;		RecommendedDiskSizeMB           int32           `xml:"recommendedDiskSizeMB"`
0000000000000000000000000000000000000000;;		RecommendedCdromController      string          `xml:"recommendedCdromController,omitempty"`
0000000000000000000000000000000000000000;;		SupportedEthernetCard           []string        `xml:"supportedEthernetCard"`
0000000000000000000000000000000000000000;;		RecommendedEthernetCard         string          `xml:"recommendedEthernetCard,omitempty"`
0000000000000000000000000000000000000000;;		SupportsSlaveDisk               *bool           `xml:"supportsSlaveDisk"`
0000000000000000000000000000000000000000;;		CpuFeatureMask                  []HostCpuIdInfo `xml:"cpuFeatureMask,omitempty"`
0000000000000000000000000000000000000000;;		SmcRequired                     *bool           `xml:"smcRequired"`
0000000000000000000000000000000000000000;;		SupportsWakeOnLan               bool            `xml:"supportsWakeOnLan"`
0000000000000000000000000000000000000000;;		SupportsVMI                     *bool           `xml:"supportsVMI"`
0000000000000000000000000000000000000000;;		SupportsMemoryHotAdd            *bool           `xml:"supportsMemoryHotAdd"`
0000000000000000000000000000000000000000;;		SupportsCpuHotAdd               *bool           `xml:"supportsCpuHotAdd"`
0000000000000000000000000000000000000000;;		SupportsCpuHotRemove            *bool           `xml:"supportsCpuHotRemove"`
0000000000000000000000000000000000000000;;		SupportedFirmware               []string        `xml:"supportedFirmware,omitempty"`
0000000000000000000000000000000000000000;;		RecommendedFirmware             string          `xml:"recommendedFirmware,omitempty"`
0000000000000000000000000000000000000000;;		SupportedUSBControllerList      []string        `xml:"supportedUSBControllerList,omitempty"`
0000000000000000000000000000000000000000;;		RecommendedUSBController        string          `xml:"recommendedUSBController,omitempty"`
0000000000000000000000000000000000000000;;		Supports3D                      *bool           `xml:"supports3D"`
0000000000000000000000000000000000000000;;		Recommended3D                   *bool           `xml:"recommended3D"`
0000000000000000000000000000000000000000;;		SmcRecommended                  *bool           `xml:"smcRecommended"`
0000000000000000000000000000000000000000;;		Ich7mRecommended                *bool           `xml:"ich7mRecommended"`
0000000000000000000000000000000000000000;;		UsbRecommended                  *bool           `xml:"usbRecommended"`
0000000000000000000000000000000000000000;;		SupportLevel                    string          `xml:"supportLevel,omitempty"`
0000000000000000000000000000000000000000;;		SupportedForCreate              *bool           `xml:"supportedForCreate"`
0000000000000000000000000000000000000000;;		VRAMSizeInKB                    *IntOption      `xml:"vRAMSizeInKB,omitempty"`
0000000000000000000000000000000000000000;;		NumSupportedFloppyDevices       int32           `xml:"numSupportedFloppyDevices,omitempty"`
0000000000000000000000000000000000000000;;		WakeOnLanEthernetCard           []string        `xml:"wakeOnLanEthernetCard,omitempty"`
0000000000000000000000000000000000000000;;		SupportsPvscsiControllerForBoot *bool           `xml:"supportsPvscsiControllerForBoot"`
0000000000000000000000000000000000000000;;		DiskUuidEnabled                 *bool           `xml:"diskUuidEnabled"`
0000000000000000000000000000000000000000;;		SupportsHotPlugPCI              *bool           `xml:"supportsHotPlugPCI"`
0000000000000000000000000000000000000000;;		SupportsSecureBoot              *bool           `xml:"supportsSecureBoot"`
0000000000000000000000000000000000000000;;		DefaultSecureBoot               *bool           `xml:"defaultSecureBoot"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestOsDescriptor"] = reflect.TypeOf((*GuestOsDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestPermissionDenied struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestPermissionDenied"] = reflect.TypeOf((*GuestPermissionDenied)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestPermissionDeniedFault GuestPermissionDenied
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestPermissionDeniedFault"] = reflect.TypeOf((*GuestPermissionDeniedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestPosixFileAttributes struct {
0000000000000000000000000000000000000000;;		GuestFileAttributes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OwnerId     int32 `xml:"ownerId,omitempty"`
0000000000000000000000000000000000000000;;		GroupId     int32 `xml:"groupId,omitempty"`
0000000000000000000000000000000000000000;;		Permissions int64 `xml:"permissions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestPosixFileAttributes"] = reflect.TypeOf((*GuestPosixFileAttributes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestProcessInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string     `xml:"name"`
0000000000000000000000000000000000000000;;		Pid       int64      `xml:"pid"`
0000000000000000000000000000000000000000;;		Owner     string     `xml:"owner"`
0000000000000000000000000000000000000000;;		CmdLine   string     `xml:"cmdLine"`
0000000000000000000000000000000000000000;;		StartTime time.Time  `xml:"startTime"`
0000000000000000000000000000000000000000;;		EndTime   *time.Time `xml:"endTime"`
0000000000000000000000000000000000000000;;		ExitCode  int32      `xml:"exitCode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestProcessInfo"] = reflect.TypeOf((*GuestProcessInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestProcessNotFound struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Pid int64 `xml:"pid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestProcessNotFound"] = reflect.TypeOf((*GuestProcessNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestProcessNotFoundFault GuestProcessNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestProcessNotFoundFault"] = reflect.TypeOf((*GuestProcessNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestProgramSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProgramPath      string   `xml:"programPath"`
0000000000000000000000000000000000000000;;		Arguments        string   `xml:"arguments"`
0000000000000000000000000000000000000000;;		WorkingDirectory string   `xml:"workingDirectory,omitempty"`
0000000000000000000000000000000000000000;;		EnvVariables     []string `xml:"envVariables,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestProgramSpec"] = reflect.TypeOf((*GuestProgramSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegKeyNameSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RegistryPath string `xml:"registryPath"`
0000000000000000000000000000000000000000;;		WowBitness   string `xml:"wowBitness"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegKeyNameSpec"] = reflect.TypeOf((*GuestRegKeyNameSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegKeyRecordSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   GuestRegKeySpec       `xml:"key"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegKeyRecordSpec"] = reflect.TypeOf((*GuestRegKeyRecordSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegKeySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyName     GuestRegKeyNameSpec `xml:"keyName"`
0000000000000000000000000000000000000000;;		ClassType   string              `xml:"classType"`
0000000000000000000000000000000000000000;;		LastWritten time.Time           `xml:"lastWritten"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegKeySpec"] = reflect.TypeOf((*GuestRegKeySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueBinarySpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueDataSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value []byte `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueBinarySpec"] = reflect.TypeOf((*GuestRegValueBinarySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueDataSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueDataSpec"] = reflect.TypeOf((*GuestRegValueDataSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueDwordSpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueDataSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value int32 `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueDwordSpec"] = reflect.TypeOf((*GuestRegValueDwordSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueExpandStringSpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueDataSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueExpandStringSpec"] = reflect.TypeOf((*GuestRegValueExpandStringSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueMultiStringSpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueDataSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value []string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueMultiStringSpec"] = reflect.TypeOf((*GuestRegValueMultiStringSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueNameSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyName GuestRegKeyNameSpec `xml:"keyName"`
0000000000000000000000000000000000000000;;		Name    string              `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueNameSpec"] = reflect.TypeOf((*GuestRegValueNameSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueQwordSpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueDataSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value int64 `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueQwordSpec"] = reflect.TypeOf((*GuestRegValueQwordSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name GuestRegValueNameSpec     `xml:"name"`
0000000000000000000000000000000000000000;;		Data BaseGuestRegValueDataSpec `xml:"data,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueSpec"] = reflect.TypeOf((*GuestRegValueSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegValueStringSpec struct {
0000000000000000000000000000000000000000;;		GuestRegValueDataSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegValueStringSpec"] = reflect.TypeOf((*GuestRegValueStringSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryFault struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WindowsSystemErrorCode int64 `xml:"windowsSystemErrorCode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryFault"] = reflect.TypeOf((*GuestRegistryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryFaultFault BaseGuestRegistryFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryFaultFault"] = reflect.TypeOf((*GuestRegistryFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyAlreadyExists struct {
0000000000000000000000000000000000000000;;		GuestRegistryKeyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyAlreadyExists"] = reflect.TypeOf((*GuestRegistryKeyAlreadyExists)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyAlreadyExistsFault GuestRegistryKeyAlreadyExists
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyAlreadyExistsFault"] = reflect.TypeOf((*GuestRegistryKeyAlreadyExistsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyFault struct {
0000000000000000000000000000000000000000;;		GuestRegistryFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyName string `xml:"keyName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyFault"] = reflect.TypeOf((*GuestRegistryKeyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyFaultFault BaseGuestRegistryKeyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyFaultFault"] = reflect.TypeOf((*GuestRegistryKeyFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyHasSubkeys struct {
0000000000000000000000000000000000000000;;		GuestRegistryKeyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyHasSubkeys"] = reflect.TypeOf((*GuestRegistryKeyHasSubkeys)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyHasSubkeysFault GuestRegistryKeyHasSubkeys
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyHasSubkeysFault"] = reflect.TypeOf((*GuestRegistryKeyHasSubkeysFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyInvalid struct {
0000000000000000000000000000000000000000;;		GuestRegistryKeyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyInvalid"] = reflect.TypeOf((*GuestRegistryKeyInvalid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyInvalidFault GuestRegistryKeyInvalid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyInvalidFault"] = reflect.TypeOf((*GuestRegistryKeyInvalidFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyParentVolatile struct {
0000000000000000000000000000000000000000;;		GuestRegistryKeyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyParentVolatile"] = reflect.TypeOf((*GuestRegistryKeyParentVolatile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryKeyParentVolatileFault GuestRegistryKeyParentVolatile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryKeyParentVolatileFault"] = reflect.TypeOf((*GuestRegistryKeyParentVolatileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryValueFault struct {
0000000000000000000000000000000000000000;;		GuestRegistryFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyName   string `xml:"keyName"`
0000000000000000000000000000000000000000;;		ValueName string `xml:"valueName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryValueFault"] = reflect.TypeOf((*GuestRegistryValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryValueFaultFault BaseGuestRegistryValueFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryValueFaultFault"] = reflect.TypeOf((*GuestRegistryValueFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryValueNotFound struct {
0000000000000000000000000000000000000000;;		GuestRegistryValueFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryValueNotFound"] = reflect.TypeOf((*GuestRegistryValueNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestRegistryValueNotFoundFault GuestRegistryValueNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestRegistryValueNotFoundFault"] = reflect.TypeOf((*GuestRegistryValueNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestScreenInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Width  int32 `xml:"width"`
0000000000000000000000000000000000000000;;		Height int32 `xml:"height"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestScreenInfo"] = reflect.TypeOf((*GuestScreenInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestStackInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DnsConfig     *NetDnsConfigInfo     `xml:"dnsConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpRouteConfig *NetIpRouteConfigInfo `xml:"ipRouteConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpStackConfig []KeyValue            `xml:"ipStackConfig,omitempty"`
0000000000000000000000000000000000000000;;		DhcpConfig    *NetDhcpConfigInfo    `xml:"dhcpConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestStackInfo"] = reflect.TypeOf((*GuestStackInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestWindowsFileAttributes struct {
0000000000000000000000000000000000000000;;		GuestFileAttributes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hidden     *bool      `xml:"hidden"`
0000000000000000000000000000000000000000;;		ReadOnly   *bool      `xml:"readOnly"`
0000000000000000000000000000000000000000;;		CreateTime *time.Time `xml:"createTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestWindowsFileAttributes"] = reflect.TypeOf((*GuestWindowsFileAttributes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestWindowsProgramSpec struct {
0000000000000000000000000000000000000000;;		GuestProgramSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartMinimized bool `xml:"startMinimized"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestWindowsProgramSpec"] = reflect.TypeOf((*GuestWindowsProgramSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HAErrorsAtDest struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HAErrorsAtDest"] = reflect.TypeOf((*HAErrorsAtDest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HAErrorsAtDestFault HAErrorsAtDest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HAErrorsAtDestFault"] = reflect.TypeOf((*HAErrorsAtDestFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasMonitoredEntity HasMonitoredEntityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasMonitoredEntity"] = reflect.TypeOf((*HasMonitoredEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasMonitoredEntityRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasMonitoredEntityRequestType"] = reflect.TypeOf((*HasMonitoredEntityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasMonitoredEntityResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasPrivilegeOnEntities HasPrivilegeOnEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasPrivilegeOnEntities"] = reflect.TypeOf((*HasPrivilegeOnEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasPrivilegeOnEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity    []ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		SessionId string                   `xml:"sessionId"`
0000000000000000000000000000000000000000;;		PrivId    []string                 `xml:"privId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasPrivilegeOnEntitiesRequestType"] = reflect.TypeOf((*HasPrivilegeOnEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasPrivilegeOnEntitiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []EntityPrivilege `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasPrivilegeOnEntity HasPrivilegeOnEntityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasPrivilegeOnEntity"] = reflect.TypeOf((*HasPrivilegeOnEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasPrivilegeOnEntityRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity    ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		SessionId string                 `xml:"sessionId"`
0000000000000000000000000000000000000000;;		PrivId    []string               `xml:"privId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasPrivilegeOnEntityRequestType"] = reflect.TypeOf((*HasPrivilegeOnEntityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasPrivilegeOnEntityResponse struct {
0000000000000000000000000000000000000000;;		Returnval []bool `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasProvider HasProviderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasProvider"] = reflect.TypeOf((*HasProvider)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasProviderRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasProviderRequestType"] = reflect.TypeOf((*HasProviderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasProviderResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasUserPrivilegeOnEntities HasUserPrivilegeOnEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasUserPrivilegeOnEntities"] = reflect.TypeOf((*HasUserPrivilegeOnEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasUserPrivilegeOnEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entities []ManagedObjectReference `xml:"entities"`
0000000000000000000000000000000000000000;;		UserName string                   `xml:"userName"`
0000000000000000000000000000000000000000;;		PrivId   []string                 `xml:"privId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HasUserPrivilegeOnEntitiesRequestType"] = reflect.TypeOf((*HasUserPrivilegeOnEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HasUserPrivilegeOnEntitiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []EntityPrivilege `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HbrDiskMigrationAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CollectionId       string                 `xml:"collectionId"`
0000000000000000000000000000000000000000;;		CollectionName     string                 `xml:"collectionName"`
0000000000000000000000000000000000000000;;		DiskIds            []string               `xml:"diskIds"`
0000000000000000000000000000000000000000;;		Source             ManagedObjectReference `xml:"source"`
0000000000000000000000000000000000000000;;		Destination        ManagedObjectReference `xml:"destination"`
0000000000000000000000000000000000000000;;		SizeTransferred    int64                  `xml:"sizeTransferred"`
0000000000000000000000000000000000000000;;		SpaceUtilSrcBefore float32                `xml:"spaceUtilSrcBefore,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilDstBefore float32                `xml:"spaceUtilDstBefore,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilSrcAfter  float32                `xml:"spaceUtilSrcAfter,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilDstAfter  float32                `xml:"spaceUtilDstAfter,omitempty"`
0000000000000000000000000000000000000000;;		IoLatencySrcBefore float32                `xml:"ioLatencySrcBefore,omitempty"`
0000000000000000000000000000000000000000;;		IoLatencyDstBefore float32                `xml:"ioLatencyDstBefore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HbrDiskMigrationAction"] = reflect.TypeOf((*HbrDiskMigrationAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HbrManagerReplicationVmInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State        string                     `xml:"state"`
0000000000000000000000000000000000000000;;		ProgressInfo *ReplicationVmProgressInfo `xml:"progressInfo,omitempty"`
0000000000000000000000000000000000000000;;		ImageId      string                     `xml:"imageId,omitempty"`
0000000000000000000000000000000000000000;;		LastError    *LocalizedMethodFault      `xml:"lastError,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HbrManagerReplicationVmInfo"] = reflect.TypeOf((*HbrManagerReplicationVmInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HbrManagerVmReplicationCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm                             ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		SupportedQuiesceMode           string                 `xml:"supportedQuiesceMode"`
0000000000000000000000000000000000000000;;		CompressionSupported           bool                   `xml:"compressionSupported"`
0000000000000000000000000000000000000000;;		MaxSupportedSourceDiskCapacity int64                  `xml:"maxSupportedSourceDiskCapacity"`
0000000000000000000000000000000000000000;;		MinRpo                         int64                  `xml:"minRpo,omitempty"`
0000000000000000000000000000000000000000;;		Fault                          *LocalizedMethodFault  `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HbrManagerVmReplicationCapability"] = reflect.TypeOf((*HbrManagerVmReplicationCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HealthStatusChangedEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComponentId   string `xml:"componentId"`
0000000000000000000000000000000000000000;;		OldStatus     string `xml:"oldStatus"`
0000000000000000000000000000000000000000;;		NewStatus     string `xml:"newStatus"`
0000000000000000000000000000000000000000;;		ComponentName string `xml:"componentName"`
0000000000000000000000000000000000000000;;		ServiceId     string `xml:"serviceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HealthStatusChangedEvent"] = reflect.TypeOf((*HealthStatusChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HealthSystemRuntime struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemHealthInfo   *HostSystemHealthInfo   `xml:"systemHealthInfo,omitempty"`
0000000000000000000000000000000000000000;;		HardwareStatusInfo *HostHardwareStatusInfo `xml:"hardwareStatusInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HealthSystemRuntime"] = reflect.TypeOf((*HealthSystemRuntime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HealthUpdate struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity             ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		HealthUpdateInfoId string                 `xml:"healthUpdateInfoId"`
0000000000000000000000000000000000000000;;		Id                 string                 `xml:"id"`
0000000000000000000000000000000000000000;;		Status             ManagedEntityStatus    `xml:"status"`
0000000000000000000000000000000000000000;;		Remediation        string                 `xml:"remediation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HealthUpdate"] = reflect.TypeOf((*HealthUpdate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HealthUpdateInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id            string `xml:"id"`
0000000000000000000000000000000000000000;;		ComponentType string `xml:"componentType"`
0000000000000000000000000000000000000000;;		Description   string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HealthUpdateInfo"] = reflect.TypeOf((*HealthUpdateInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HeterogenousHostsBlockingEVC struct {
0000000000000000000000000000000000000000;;		EVCConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HeterogenousHostsBlockingEVC"] = reflect.TypeOf((*HeterogenousHostsBlockingEVC)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HeterogenousHostsBlockingEVCFault HeterogenousHostsBlockingEVC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HeterogenousHostsBlockingEVCFault"] = reflect.TypeOf((*HeterogenousHostsBlockingEVCFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessControlEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Principal  string         `xml:"principal"`
0000000000000000000000000000000000000000;;		Group      bool           `xml:"group"`
0000000000000000000000000000000000000000;;		AccessMode HostAccessMode `xml:"accessMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAccessControlEntry"] = reflect.TypeOf((*HostAccessControlEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessRestrictedToManagementServer struct {
0000000000000000000000000000000000000000;;		NotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagementServer string `xml:"managementServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAccessRestrictedToManagementServer"] = reflect.TypeOf((*HostAccessRestrictedToManagementServer)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessRestrictedToManagementServerFault HostAccessRestrictedToManagementServer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAccessRestrictedToManagementServerFault"] = reflect.TypeOf((*HostAccessRestrictedToManagementServerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccountSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id          string `xml:"id"`
0000000000000000000000000000000000000000;;		Password    string `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;		Description string `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAccountSpec"] = reflect.TypeOf((*HostAccountSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostActiveDirectory struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string                   `xml:"changeOperation"`
0000000000000000000000000000000000000000;;		Spec            *HostActiveDirectorySpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostActiveDirectory"] = reflect.TypeOf((*HostActiveDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostActiveDirectoryInfo struct {
0000000000000000000000000000000000000000;;		HostDirectoryStoreInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		JoinedDomain                   string   `xml:"joinedDomain,omitempty"`
0000000000000000000000000000000000000000;;		TrustedDomain                  []string `xml:"trustedDomain,omitempty"`
0000000000000000000000000000000000000000;;		DomainMembershipStatus         string   `xml:"domainMembershipStatus,omitempty"`
0000000000000000000000000000000000000000;;		SmartCardAuthenticationEnabled *bool    `xml:"smartCardAuthenticationEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostActiveDirectoryInfo"] = reflect.TypeOf((*HostActiveDirectoryInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostActiveDirectorySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DomainName                     string   `xml:"domainName,omitempty"`
0000000000000000000000000000000000000000;;		UserName                       string   `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		Password                       string   `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;		CamServer                      string   `xml:"camServer,omitempty"`
0000000000000000000000000000000000000000;;		Thumbprint                     string   `xml:"thumbprint,omitempty"`
0000000000000000000000000000000000000000;;		SmartCardAuthenticationEnabled *bool    `xml:"smartCardAuthenticationEnabled"`
0000000000000000000000000000000000000000;;		SmartCardTrustAnchors          []string `xml:"smartCardTrustAnchors,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostActiveDirectorySpec"] = reflect.TypeOf((*HostActiveDirectorySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAddFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `xml:"hostname"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAddFailedEvent"] = reflect.TypeOf((*HostAddFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAddedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAddedEvent"] = reflect.TypeOf((*HostAddedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAdminDisableEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAdminDisableEvent"] = reflect.TypeOf((*HostAdminDisableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAdminEnableEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAdminEnableEvent"] = reflect.TypeOf((*HostAdminEnableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostApplyProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Memory           *HostMemoryProfile     `xml:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Storage          *StorageProfile        `xml:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Network          *NetworkProfile        `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		Datetime         *DateTimeProfile       `xml:"datetime,omitempty"`
0000000000000000000000000000000000000000;;		Firewall         *FirewallProfile       `xml:"firewall,omitempty"`
0000000000000000000000000000000000000000;;		Security         *SecurityProfile       `xml:"security,omitempty"`
0000000000000000000000000000000000000000;;		Service          []ServiceProfile       `xml:"service,omitempty"`
0000000000000000000000000000000000000000;;		Option           []OptionProfile        `xml:"option,omitempty"`
0000000000000000000000000000000000000000;;		UserAccount      []UserProfile          `xml:"userAccount,omitempty"`
0000000000000000000000000000000000000000;;		UsergroupAccount []UserGroupProfile     `xml:"usergroupAccount,omitempty"`
0000000000000000000000000000000000000000;;		Authentication   *AuthenticationProfile `xml:"authentication,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostApplyProfile"] = reflect.TypeOf((*HostApplyProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAuthenticationManagerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthConfig []BaseHostAuthenticationStoreInfo `xml:"authConfig,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAuthenticationManagerInfo"] = reflect.TypeOf((*HostAuthenticationManagerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAuthenticationStoreInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled bool `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAuthenticationStoreInfo"] = reflect.TypeOf((*HostAuthenticationStoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAutoStartManagerConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Defaults  *AutoStartDefaults   `xml:"defaults,omitempty"`
0000000000000000000000000000000000000000;;		PowerInfo []AutoStartPowerInfo `xml:"powerInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAutoStartManagerConfig"] = reflect.TypeOf((*HostAutoStartManagerConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostBIOSInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BiosVersion          string     `xml:"biosVersion,omitempty"`
0000000000000000000000000000000000000000;;		ReleaseDate          *time.Time `xml:"releaseDate"`
0000000000000000000000000000000000000000;;		Vendor               string     `xml:"vendor,omitempty"`
0000000000000000000000000000000000000000;;		MajorRelease         int32      `xml:"majorRelease,omitempty"`
0000000000000000000000000000000000000000;;		MinorRelease         int32      `xml:"minorRelease,omitempty"`
0000000000000000000000000000000000000000;;		FirmwareMajorRelease int32      `xml:"firmwareMajorRelease,omitempty"`
0000000000000000000000000000000000000000;;		FirmwareMinorRelease int32      `xml:"firmwareMinorRelease,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostBIOSInfo"] = reflect.TypeOf((*HostBIOSInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostBlockAdapterTargetTransport struct {
0000000000000000000000000000000000000000;;		HostTargetTransport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostBlockAdapterTargetTransport"] = reflect.TypeOf((*HostBlockAdapterTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostBlockHba struct {
0000000000000000000000000000000000000000;;		HostHostBusAdapter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostBlockHba"] = reflect.TypeOf((*HostBlockHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostBootDevice struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string `xml:"key"`
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostBootDevice"] = reflect.TypeOf((*HostBootDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostBootDeviceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BootDevices          []HostBootDevice `xml:"bootDevices,omitempty"`
0000000000000000000000000000000000000000;;		CurrentBootDeviceKey string           `xml:"currentBootDeviceKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostBootDeviceInfo"] = reflect.TypeOf((*HostBootDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCacheConfigurationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		SwapSize int64                  `xml:"swapSize"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCacheConfigurationInfo"] = reflect.TypeOf((*HostCacheConfigurationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCacheConfigurationSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		SwapSize  int64                  `xml:"swapSize"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCacheConfigurationSpec"] = reflect.TypeOf((*HostCacheConfigurationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RecursiveResourcePoolsSupported           bool            `xml:"recursiveResourcePoolsSupported"`
0000000000000000000000000000000000000000;;		CpuMemoryResourceConfigurationSupported   bool            `xml:"cpuMemoryResourceConfigurationSupported"`
0000000000000000000000000000000000000000;;		RebootSupported                           bool            `xml:"rebootSupported"`
0000000000000000000000000000000000000000;;		ShutdownSupported                         bool            `xml:"shutdownSupported"`
0000000000000000000000000000000000000000;;		VmotionSupported                          bool            `xml:"vmotionSupported"`
0000000000000000000000000000000000000000;;		StandbySupported                          bool            `xml:"standbySupported"`
0000000000000000000000000000000000000000;;		IpmiSupported                             *bool           `xml:"ipmiSupported"`
0000000000000000000000000000000000000000;;		MaxSupportedVMs                           int32           `xml:"maxSupportedVMs,omitempty"`
0000000000000000000000000000000000000000;;		MaxRunningVMs                             int32           `xml:"maxRunningVMs,omitempty"`
0000000000000000000000000000000000000000;;		MaxSupportedVcpus                         int32           `xml:"maxSupportedVcpus,omitempty"`
0000000000000000000000000000000000000000;;		MaxRegisteredVMs                          int32           `xml:"maxRegisteredVMs,omitempty"`
0000000000000000000000000000000000000000;;		DatastorePrincipalSupported               bool            `xml:"datastorePrincipalSupported"`
0000000000000000000000000000000000000000;;		SanSupported                              bool            `xml:"sanSupported"`
0000000000000000000000000000000000000000;;		NfsSupported                              bool            `xml:"nfsSupported"`
0000000000000000000000000000000000000000;;		IscsiSupported                            bool            `xml:"iscsiSupported"`
0000000000000000000000000000000000000000;;		VlanTaggingSupported                      bool            `xml:"vlanTaggingSupported"`
0000000000000000000000000000000000000000;;		NicTeamingSupported                       bool            `xml:"nicTeamingSupported"`
0000000000000000000000000000000000000000;;		HighGuestMemSupported                     bool            `xml:"highGuestMemSupported"`
0000000000000000000000000000000000000000;;		MaintenanceModeSupported                  bool            `xml:"maintenanceModeSupported"`
0000000000000000000000000000000000000000;;		SuspendedRelocateSupported                bool            `xml:"suspendedRelocateSupported"`
0000000000000000000000000000000000000000;;		RestrictedSnapshotRelocateSupported       bool            `xml:"restrictedSnapshotRelocateSupported"`
0000000000000000000000000000000000000000;;		PerVmSwapFiles                            bool            `xml:"perVmSwapFiles"`
0000000000000000000000000000000000000000;;		LocalSwapDatastoreSupported               bool            `xml:"localSwapDatastoreSupported"`
0000000000000000000000000000000000000000;;		UnsharedSwapVMotionSupported              bool            `xml:"unsharedSwapVMotionSupported"`
0000000000000000000000000000000000000000;;		BackgroundSnapshotsSupported              bool            `xml:"backgroundSnapshotsSupported"`
0000000000000000000000000000000000000000;;		PreAssignedPCIUnitNumbersSupported        bool            `xml:"preAssignedPCIUnitNumbersSupported"`
0000000000000000000000000000000000000000;;		ScreenshotSupported                       bool            `xml:"screenshotSupported"`
0000000000000000000000000000000000000000;;		ScaledScreenshotSupported                 bool            `xml:"scaledScreenshotSupported"`
0000000000000000000000000000000000000000;;		StorageVMotionSupported                   *bool           `xml:"storageVMotionSupported"`
0000000000000000000000000000000000000000;;		VmotionWithStorageVMotionSupported        *bool           `xml:"vmotionWithStorageVMotionSupported"`
0000000000000000000000000000000000000000;;		VmotionAcrossNetworkSupported             *bool           `xml:"vmotionAcrossNetworkSupported"`
0000000000000000000000000000000000000000;;		MaxNumDisksSVMotion                       int32           `xml:"maxNumDisksSVMotion,omitempty"`
0000000000000000000000000000000000000000;;		HbrNicSelectionSupported                  *bool           `xml:"hbrNicSelectionSupported"`
0000000000000000000000000000000000000000;;		VrNfcNicSelectionSupported                *bool           `xml:"vrNfcNicSelectionSupported"`
0000000000000000000000000000000000000000;;		RecordReplaySupported                     *bool           `xml:"recordReplaySupported"`
0000000000000000000000000000000000000000;;		FtSupported                               *bool           `xml:"ftSupported"`
0000000000000000000000000000000000000000;;		ReplayUnsupportedReason                   string          `xml:"replayUnsupportedReason,omitempty"`
0000000000000000000000000000000000000000;;		ReplayCompatibilityIssues                 []string        `xml:"replayCompatibilityIssues,omitempty"`
0000000000000000000000000000000000000000;;		SmpFtSupported                            *bool           `xml:"smpFtSupported"`
0000000000000000000000000000000000000000;;		FtCompatibilityIssues                     []string        `xml:"ftCompatibilityIssues,omitempty"`
0000000000000000000000000000000000000000;;		SmpFtCompatibilityIssues                  []string        `xml:"smpFtCompatibilityIssues,omitempty"`
0000000000000000000000000000000000000000;;		MaxVcpusPerFtVm                           int32           `xml:"maxVcpusPerFtVm,omitempty"`
0000000000000000000000000000000000000000;;		LoginBySSLThumbprintSupported             *bool           `xml:"loginBySSLThumbprintSupported"`
0000000000000000000000000000000000000000;;		CloneFromSnapshotSupported                *bool           `xml:"cloneFromSnapshotSupported"`
0000000000000000000000000000000000000000;;		DeltaDiskBackingsSupported                *bool           `xml:"deltaDiskBackingsSupported"`
0000000000000000000000000000000000000000;;		PerVMNetworkTrafficShapingSupported       *bool           `xml:"perVMNetworkTrafficShapingSupported"`
0000000000000000000000000000000000000000;;		TpmSupported                              *bool           `xml:"tpmSupported"`
0000000000000000000000000000000000000000;;		SupportedCpuFeature                       []HostCpuIdInfo `xml:"supportedCpuFeature,omitempty"`
0000000000000000000000000000000000000000;;		VirtualExecUsageSupported                 *bool           `xml:"virtualExecUsageSupported"`
0000000000000000000000000000000000000000;;		StorageIORMSupported                      *bool           `xml:"storageIORMSupported"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2Supported                 *bool           `xml:"vmDirectPathGen2Supported"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2UnsupportedReason         []string        `xml:"vmDirectPathGen2UnsupportedReason,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2UnsupportedReasonExtended string          `xml:"vmDirectPathGen2UnsupportedReasonExtended,omitempty"`
0000000000000000000000000000000000000000;;		SupportedVmfsMajorVersion                 []int32         `xml:"supportedVmfsMajorVersion,omitempty"`
0000000000000000000000000000000000000000;;		VStorageCapable                           *bool           `xml:"vStorageCapable"`
0000000000000000000000000000000000000000;;		SnapshotRelayoutSupported                 *bool           `xml:"snapshotRelayoutSupported"`
0000000000000000000000000000000000000000;;		FirewallIpRulesSupported                  *bool           `xml:"firewallIpRulesSupported"`
0000000000000000000000000000000000000000;;		ServicePackageInfoSupported               *bool           `xml:"servicePackageInfoSupported"`
0000000000000000000000000000000000000000;;		MaxHostRunningVms                         int32           `xml:"maxHostRunningVms,omitempty"`
0000000000000000000000000000000000000000;;		MaxHostSupportedVcpus                     int32           `xml:"maxHostSupportedVcpus,omitempty"`
0000000000000000000000000000000000000000;;		VmfsDatastoreMountCapable                 *bool           `xml:"vmfsDatastoreMountCapable"`
0000000000000000000000000000000000000000;;		EightPlusHostVmfsSharedAccessSupported    *bool           `xml:"eightPlusHostVmfsSharedAccessSupported"`
0000000000000000000000000000000000000000;;		NestedHVSupported                         *bool           `xml:"nestedHVSupported"`
0000000000000000000000000000000000000000;;		VPMCSupported                             *bool           `xml:"vPMCSupported"`
0000000000000000000000000000000000000000;;		InterVMCommunicationThroughVMCISupported  *bool           `xml:"interVMCommunicationThroughVMCISupported"`
0000000000000000000000000000000000000000;;		ScheduledHardwareUpgradeSupported         *bool           `xml:"scheduledHardwareUpgradeSupported"`
0000000000000000000000000000000000000000;;		FeatureCapabilitiesSupported              *bool           `xml:"featureCapabilitiesSupported"`
0000000000000000000000000000000000000000;;		LatencySensitivitySupported               *bool           `xml:"latencySensitivitySupported"`
0000000000000000000000000000000000000000;;		StoragePolicySupported                    *bool           `xml:"storagePolicySupported"`
0000000000000000000000000000000000000000;;		Accel3dSupported                          *bool           `xml:"accel3dSupported"`
0000000000000000000000000000000000000000;;		ReliableMemoryAware                       *bool           `xml:"reliableMemoryAware"`
0000000000000000000000000000000000000000;;		MultipleNetworkStackInstanceSupported     *bool           `xml:"multipleNetworkStackInstanceSupported"`
0000000000000000000000000000000000000000;;		MessageBusProxySupported                  *bool           `xml:"messageBusProxySupported"`
0000000000000000000000000000000000000000;;		VsanSupported                             *bool           `xml:"vsanSupported"`
0000000000000000000000000000000000000000;;		VFlashSupported                           *bool           `xml:"vFlashSupported"`
0000000000000000000000000000000000000000;;		HostAccessManagerSupported                *bool           `xml:"hostAccessManagerSupported"`
0000000000000000000000000000000000000000;;		ProvisioningNicSelectionSupported         *bool           `xml:"provisioningNicSelectionSupported"`
0000000000000000000000000000000000000000;;		Nfs41Supported                            *bool           `xml:"nfs41Supported"`
0000000000000000000000000000000000000000;;		Nfs41Krb5iSupported                       *bool           `xml:"nfs41Krb5iSupported"`
0000000000000000000000000000000000000000;;		TurnDiskLocatorLedSupported               *bool           `xml:"turnDiskLocatorLedSupported"`
0000000000000000000000000000000000000000;;		VirtualVolumeDatastoreSupported           *bool           `xml:"virtualVolumeDatastoreSupported"`
0000000000000000000000000000000000000000;;		MarkAsSsdSupported                        *bool           `xml:"markAsSsdSupported"`
0000000000000000000000000000000000000000;;		MarkAsLocalSupported                      *bool           `xml:"markAsLocalSupported"`
0000000000000000000000000000000000000000;;		SmartCardAuthenticationSupported          *bool           `xml:"smartCardAuthenticationSupported"`
0000000000000000000000000000000000000000;;		CryptoSupported                           *bool           `xml:"cryptoSupported"`
0000000000000000000000000000000000000000;;		OneKVolumeAPIsSupported                   *bool           `xml:"oneKVolumeAPIsSupported"`
0000000000000000000000000000000000000000;;		GatewayOnNicSupported                     *bool           `xml:"gatewayOnNicSupported"`
0000000000000000000000000000000000000000;;		UpitSupported                             *bool           `xml:"upitSupported"`
0000000000000000000000000000000000000000;;		CpuHwMmuSupported                         *bool           `xml:"cpuHwMmuSupported"`
0000000000000000000000000000000000000000;;		EncryptedVMotionSupported                 *bool           `xml:"encryptedVMotionSupported"`
0000000000000000000000000000000000000000;;		EncryptionChangeOnAddRemoveSupported      *bool           `xml:"encryptionChangeOnAddRemoveSupported"`
0000000000000000000000000000000000000000;;		EncryptionHotOperationSupported           *bool           `xml:"encryptionHotOperationSupported"`
0000000000000000000000000000000000000000;;		EncryptionWithSnapshotsSupported          *bool           `xml:"encryptionWithSnapshotsSupported"`
0000000000000000000000000000000000000000;;		EncryptionFaultToleranceSupported         *bool           `xml:"encryptionFaultToleranceSupported"`
0000000000000000000000000000000000000000;;		EncryptionMemorySaveSupported             *bool           `xml:"encryptionMemorySaveSupported"`
0000000000000000000000000000000000000000;;		EncryptionRDMSupported                    *bool           `xml:"encryptionRDMSupported"`
0000000000000000000000000000000000000000;;		EncryptionVFlashSupported                 *bool           `xml:"encryptionVFlashSupported"`
0000000000000000000000000000000000000000;;		EncryptionCBRCSupported                   *bool           `xml:"encryptionCBRCSupported"`
0000000000000000000000000000000000000000;;		EncryptionHBRSupported                    *bool           `xml:"encryptionHBRSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCapability"] = reflect.TypeOf((*HostCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCertificateManagerCertificateInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Issuer    string     `xml:"issuer,omitempty"`
0000000000000000000000000000000000000000;;		NotBefore *time.Time `xml:"notBefore"`
0000000000000000000000000000000000000000;;		NotAfter  *time.Time `xml:"notAfter"`
0000000000000000000000000000000000000000;;		Subject   string     `xml:"subject,omitempty"`
0000000000000000000000000000000000000000;;		Status    string     `xml:"status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCertificateManagerCertificateInfo"] = reflect.TypeOf((*HostCertificateManagerCertificateInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCloneVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      VslmCloneSpec          `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCloneVStorageObjectRequestType"] = reflect.TypeOf((*HostCloneVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCloneVStorageObject_Task HostCloneVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCloneVStorageObject_Task"] = reflect.TypeOf((*HostCloneVStorageObject_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCloneVStorageObject_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedAccountFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedAccountFailedEvent"] = reflect.TypeOf((*HostCnxFailedAccountFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedAlreadyManagedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServerName string `xml:"serverName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedAlreadyManagedEvent"] = reflect.TypeOf((*HostCnxFailedAlreadyManagedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedBadCcagentEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedBadCcagentEvent"] = reflect.TypeOf((*HostCnxFailedBadCcagentEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedBadUsernameEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedBadUsernameEvent"] = reflect.TypeOf((*HostCnxFailedBadUsernameEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedBadVersionEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedBadVersionEvent"] = reflect.TypeOf((*HostCnxFailedBadVersionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedCcagentUpgradeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedCcagentUpgradeEvent"] = reflect.TypeOf((*HostCnxFailedCcagentUpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedEvent"] = reflect.TypeOf((*HostCnxFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedNetworkErrorEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedNetworkErrorEvent"] = reflect.TypeOf((*HostCnxFailedNetworkErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedNoAccessEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedNoAccessEvent"] = reflect.TypeOf((*HostCnxFailedNoAccessEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedNoConnectionEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedNoConnectionEvent"] = reflect.TypeOf((*HostCnxFailedNoConnectionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedNoLicenseEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedNoLicenseEvent"] = reflect.TypeOf((*HostCnxFailedNoLicenseEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedNotFoundEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedNotFoundEvent"] = reflect.TypeOf((*HostCnxFailedNotFoundEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCnxFailedTimeoutEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCnxFailedTimeoutEvent"] = reflect.TypeOf((*HostCnxFailedTimeoutEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCommunication struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCommunication"] = reflect.TypeOf((*HostCommunication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCommunicationFault BaseHostCommunication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCommunicationFault"] = reflect.TypeOf((*HostCommunicationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostComplianceCheckedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile ProfileEventArgument `xml:"profile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostComplianceCheckedEvent"] = reflect.TypeOf((*HostComplianceCheckedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCompliantEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCompliantEvent"] = reflect.TypeOf((*HostCompliantEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigAppliedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigAppliedEvent"] = reflect.TypeOf((*HostConfigAppliedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigChange struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigChange"] = reflect.TypeOf((*HostConfigChange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigFailed struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Failure []LocalizedMethodFault `xml:"failure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigFailed"] = reflect.TypeOf((*HostConfigFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigFailedFault HostConfigFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigFailedFault"] = reflect.TypeOf((*HostConfigFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigFault"] = reflect.TypeOf((*HostConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigFaultFault BaseHostConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigFaultFault"] = reflect.TypeOf((*HostConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host                      ManagedObjectReference               `xml:"host"`
0000000000000000000000000000000000000000;;		Product                   AboutInfo                            `xml:"product"`
0000000000000000000000000000000000000000;;		DeploymentInfo            *HostDeploymentInfo                  `xml:"deploymentInfo,omitempty"`
0000000000000000000000000000000000000000;;		HyperThread               *HostHyperThreadScheduleInfo         `xml:"hyperThread,omitempty"`
0000000000000000000000000000000000000000;;		ConsoleReservation        *ServiceConsoleReservationInfo       `xml:"consoleReservation,omitempty"`
0000000000000000000000000000000000000000;;		VirtualMachineReservation *VirtualMachineMemoryReservationInfo `xml:"virtualMachineReservation,omitempty"`
0000000000000000000000000000000000000000;;		StorageDevice             *HostStorageDeviceInfo               `xml:"storageDevice,omitempty"`
0000000000000000000000000000000000000000;;		MultipathState            *HostMultipathStateInfo              `xml:"multipathState,omitempty"`
0000000000000000000000000000000000000000;;		FileSystemVolume          *HostFileSystemVolumeInfo            `xml:"fileSystemVolume,omitempty"`
0000000000000000000000000000000000000000;;		SystemFile                []string                             `xml:"systemFile,omitempty"`
0000000000000000000000000000000000000000;;		Network                   *HostNetworkInfo                     `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		Vmotion                   *HostVMotionInfo                     `xml:"vmotion,omitempty"`
0000000000000000000000000000000000000000;;		VirtualNicManagerInfo     *HostVirtualNicManagerInfo           `xml:"virtualNicManagerInfo,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities              *HostNetCapabilities                 `xml:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		DatastoreCapabilities     *HostDatastoreSystemCapabilities     `xml:"datastoreCapabilities,omitempty"`
0000000000000000000000000000000000000000;;		OffloadCapabilities       *HostNetOffloadCapabilities          `xml:"offloadCapabilities,omitempty"`
0000000000000000000000000000000000000000;;		Service                   *HostServiceInfo                     `xml:"service,omitempty"`
0000000000000000000000000000000000000000;;		Firewall                  *HostFirewallInfo                    `xml:"firewall,omitempty"`
0000000000000000000000000000000000000000;;		AutoStart                 *HostAutoStartManagerConfig          `xml:"autoStart,omitempty"`
0000000000000000000000000000000000000000;;		ActiveDiagnosticPartition *HostDiagnosticPartition             `xml:"activeDiagnosticPartition,omitempty"`
0000000000000000000000000000000000000000;;		Option                    []BaseOptionValue                    `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		OptionDef                 []OptionDef                          `xml:"optionDef,omitempty"`
0000000000000000000000000000000000000000;;		DatastorePrincipal        string                               `xml:"datastorePrincipal,omitempty"`
0000000000000000000000000000000000000000;;		LocalSwapDatastore        *ManagedObjectReference              `xml:"localSwapDatastore,omitempty"`
0000000000000000000000000000000000000000;;		SystemSwapConfiguration   *HostSystemSwapConfiguration         `xml:"systemSwapConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		SystemResources           *HostSystemResourceInfo              `xml:"systemResources,omitempty"`
0000000000000000000000000000000000000000;;		DateTimeInfo              *HostDateTimeInfo                    `xml:"dateTimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		Flags                     *HostFlagInfo                        `xml:"flags,omitempty"`
0000000000000000000000000000000000000000;;		AdminDisabled             *bool                                `xml:"adminDisabled"`
0000000000000000000000000000000000000000;;		LockdownMode              HostLockdownMode                     `xml:"lockdownMode,omitempty"`
0000000000000000000000000000000000000000;;		Ipmi                      *HostIpmiInfo                        `xml:"ipmi,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprintInfo         *HostSslThumbprintInfo               `xml:"sslThumbprintInfo,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprintData         []HostSslThumbprintInfo              `xml:"sslThumbprintData,omitempty"`
0000000000000000000000000000000000000000;;		Certificate               []byte                               `xml:"certificate,omitempty"`
0000000000000000000000000000000000000000;;		PciPassthruInfo           []BaseHostPciPassthruInfo            `xml:"pciPassthruInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		AuthenticationManagerInfo *HostAuthenticationManagerInfo       `xml:"authenticationManagerInfo,omitempty"`
0000000000000000000000000000000000000000;;		FeatureVersion            []HostFeatureVersionInfo             `xml:"featureVersion,omitempty"`
0000000000000000000000000000000000000000;;		PowerSystemCapability     *PowerSystemCapability               `xml:"powerSystemCapability,omitempty"`
0000000000000000000000000000000000000000;;		PowerSystemInfo           *PowerSystemInfo                     `xml:"powerSystemInfo,omitempty"`
0000000000000000000000000000000000000000;;		CacheConfigurationInfo    []HostCacheConfigurationInfo         `xml:"cacheConfigurationInfo,omitempty"`
0000000000000000000000000000000000000000;;		WakeOnLanCapable          *bool                                `xml:"wakeOnLanCapable"`
0000000000000000000000000000000000000000;;		FeatureCapability         []HostFeatureCapability              `xml:"featureCapability,omitempty"`
0000000000000000000000000000000000000000;;		MaskedFeatureCapability   []HostFeatureCapability              `xml:"maskedFeatureCapability,omitempty"`
0000000000000000000000000000000000000000;;		VFlashConfigInfo          *HostVFlashManagerVFlashConfigInfo   `xml:"vFlashConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;		VsanHostConfig            *VsanHostConfigInfo                  `xml:"vsanHostConfig,omitempty"`
0000000000000000000000000000000000000000;;		DomainList                []string                             `xml:"domainList,omitempty"`
0000000000000000000000000000000000000000;;		ScriptCheckSum            []byte                               `xml:"scriptCheckSum,omitempty"`
0000000000000000000000000000000000000000;;		HostConfigCheckSum        []byte                               `xml:"hostConfigCheckSum,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsInfo              []HostGraphicsInfo                   `xml:"graphicsInfo,omitempty"`
0000000000000000000000000000000000000000;;		SharedPassthruGpuTypes    []string                             `xml:"sharedPassthruGpuTypes,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsConfig            *HostGraphicsConfig                  `xml:"graphicsConfig,omitempty"`
0000000000000000000000000000000000000000;;		IoFilterInfo              []HostIoFilterInfo                   `xml:"ioFilterInfo,omitempty"`
0000000000000000000000000000000000000000;;		SriovDevicePool           []BaseHostSriovDevicePoolInfo        `xml:"sriovDevicePool,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigInfo"] = reflect.TypeOf((*HostConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigManager struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuScheduler              *ManagedObjectReference `xml:"cpuScheduler,omitempty"`
0000000000000000000000000000000000000000;;		DatastoreSystem           *ManagedObjectReference `xml:"datastoreSystem,omitempty"`
0000000000000000000000000000000000000000;;		MemoryManager             *ManagedObjectReference `xml:"memoryManager,omitempty"`
0000000000000000000000000000000000000000;;		StorageSystem             *ManagedObjectReference `xml:"storageSystem,omitempty"`
0000000000000000000000000000000000000000;;		NetworkSystem             *ManagedObjectReference `xml:"networkSystem,omitempty"`
0000000000000000000000000000000000000000;;		VmotionSystem             *ManagedObjectReference `xml:"vmotionSystem,omitempty"`
0000000000000000000000000000000000000000;;		VirtualNicManager         *ManagedObjectReference `xml:"virtualNicManager,omitempty"`
0000000000000000000000000000000000000000;;		ServiceSystem             *ManagedObjectReference `xml:"serviceSystem,omitempty"`
0000000000000000000000000000000000000000;;		FirewallSystem            *ManagedObjectReference `xml:"firewallSystem,omitempty"`
0000000000000000000000000000000000000000;;		AdvancedOption            *ManagedObjectReference `xml:"advancedOption,omitempty"`
0000000000000000000000000000000000000000;;		DiagnosticSystem          *ManagedObjectReference `xml:"diagnosticSystem,omitempty"`
0000000000000000000000000000000000000000;;		AutoStartManager          *ManagedObjectReference `xml:"autoStartManager,omitempty"`
0000000000000000000000000000000000000000;;		SnmpSystem                *ManagedObjectReference `xml:"snmpSystem,omitempty"`
0000000000000000000000000000000000000000;;		DateTimeSystem            *ManagedObjectReference `xml:"dateTimeSystem,omitempty"`
0000000000000000000000000000000000000000;;		PatchManager              *ManagedObjectReference `xml:"patchManager,omitempty"`
0000000000000000000000000000000000000000;;		ImageConfigManager        *ManagedObjectReference `xml:"imageConfigManager,omitempty"`
0000000000000000000000000000000000000000;;		BootDeviceSystem          *ManagedObjectReference `xml:"bootDeviceSystem,omitempty"`
0000000000000000000000000000000000000000;;		FirmwareSystem            *ManagedObjectReference `xml:"firmwareSystem,omitempty"`
0000000000000000000000000000000000000000;;		HealthStatusSystem        *ManagedObjectReference `xml:"healthStatusSystem,omitempty"`
0000000000000000000000000000000000000000;;		PciPassthruSystem         *ManagedObjectReference `xml:"pciPassthruSystem,omitempty"`
0000000000000000000000000000000000000000;;		LicenseManager            *ManagedObjectReference `xml:"licenseManager,omitempty"`
0000000000000000000000000000000000000000;;		KernelModuleSystem        *ManagedObjectReference `xml:"kernelModuleSystem,omitempty"`
0000000000000000000000000000000000000000;;		AuthenticationManager     *ManagedObjectReference `xml:"authenticationManager,omitempty"`
0000000000000000000000000000000000000000;;		PowerSystem               *ManagedObjectReference `xml:"powerSystem,omitempty"`
0000000000000000000000000000000000000000;;		CacheConfigurationManager *ManagedObjectReference `xml:"cacheConfigurationManager,omitempty"`
0000000000000000000000000000000000000000;;		EsxAgentHostManager       *ManagedObjectReference `xml:"esxAgentHostManager,omitempty"`
0000000000000000000000000000000000000000;;		IscsiManager              *ManagedObjectReference `xml:"iscsiManager,omitempty"`
0000000000000000000000000000000000000000;;		VFlashManager             *ManagedObjectReference `xml:"vFlashManager,omitempty"`
0000000000000000000000000000000000000000;;		VsanSystem                *ManagedObjectReference `xml:"vsanSystem,omitempty"`
0000000000000000000000000000000000000000;;		MessageBusProxy           *ManagedObjectReference `xml:"messageBusProxy,omitempty"`
0000000000000000000000000000000000000000;;		UserDirectory             *ManagedObjectReference `xml:"userDirectory,omitempty"`
0000000000000000000000000000000000000000;;		AccountManager            *ManagedObjectReference `xml:"accountManager,omitempty"`
0000000000000000000000000000000000000000;;		HostAccessManager         *ManagedObjectReference `xml:"hostAccessManager,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsManager           *ManagedObjectReference `xml:"graphicsManager,omitempty"`
0000000000000000000000000000000000000000;;		VsanInternalSystem        *ManagedObjectReference `xml:"vsanInternalSystem,omitempty"`
0000000000000000000000000000000000000000;;		CertificateManager        *ManagedObjectReference `xml:"certificateManager,omitempty"`
0000000000000000000000000000000000000000;;		CryptoManager             *ManagedObjectReference `xml:"cryptoManager,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigManager"] = reflect.TypeOf((*HostConfigManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NasDatastore             []HostNasVolumeConfig                   `xml:"nasDatastore,omitempty"`
0000000000000000000000000000000000000000;;		Network                  *HostNetworkConfig                      `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		NicTypeSelection         []HostVirtualNicManagerNicTypeSelection `xml:"nicTypeSelection,omitempty"`
0000000000000000000000000000000000000000;;		Service                  []HostServiceConfig                     `xml:"service,omitempty"`
0000000000000000000000000000000000000000;;		Firewall                 *HostFirewallConfig                     `xml:"firewall,omitempty"`
0000000000000000000000000000000000000000;;		Option                   []BaseOptionValue                       `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DatastorePrincipal       string                                  `xml:"datastorePrincipal,omitempty"`
0000000000000000000000000000000000000000;;		DatastorePrincipalPasswd string                                  `xml:"datastorePrincipalPasswd,omitempty"`
0000000000000000000000000000000000000000;;		Datetime                 *HostDateTimeConfig                     `xml:"datetime,omitempty"`
0000000000000000000000000000000000000000;;		StorageDevice            *HostStorageDeviceInfo                  `xml:"storageDevice,omitempty"`
0000000000000000000000000000000000000000;;		License                  *HostLicenseSpec                        `xml:"license,omitempty"`
0000000000000000000000000000000000000000;;		Security                 *HostSecuritySpec                       `xml:"security,omitempty"`
0000000000000000000000000000000000000000;;		UserAccount              []BaseHostAccountSpec                   `xml:"userAccount,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		UsergroupAccount         []BaseHostAccountSpec                   `xml:"usergroupAccount,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Memory                   *HostMemorySpec                         `xml:"memory,omitempty"`
0000000000000000000000000000000000000000;;		ActiveDirectory          []HostActiveDirectory                   `xml:"activeDirectory,omitempty"`
0000000000000000000000000000000000000000;;		GenericConfig            []KeyAnyValue                           `xml:"genericConfig,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsConfig           *HostGraphicsConfig                     `xml:"graphicsConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigSpec"] = reflect.TypeOf((*HostConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name                  string                   `xml:"name"`
0000000000000000000000000000000000000000;;		Port                  int32                    `xml:"port"`
0000000000000000000000000000000000000000;;		SslThumbprint         string                   `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;		Product               *AboutInfo               `xml:"product,omitempty"`
0000000000000000000000000000000000000000;;		VmotionEnabled        bool                     `xml:"vmotionEnabled"`
0000000000000000000000000000000000000000;;		FaultToleranceEnabled *bool                    `xml:"faultToleranceEnabled"`
0000000000000000000000000000000000000000;;		FeatureVersion        []HostFeatureVersionInfo `xml:"featureVersion,omitempty"`
0000000000000000000000000000000000000000;;		AgentVmDatastore      *ManagedObjectReference  `xml:"agentVmDatastore,omitempty"`
0000000000000000000000000000000000000000;;		AgentVmNetwork        *ManagedObjectReference  `xml:"agentVmNetwork,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigSummary"] = reflect.TypeOf((*HostConfigSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigVFlashCache HostConfigVFlashCacheRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigVFlashCache"] = reflect.TypeOf((*HostConfigVFlashCache)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigVFlashCacheRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference                 `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostVFlashManagerVFlashCacheConfigSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigVFlashCacheRequestType"] = reflect.TypeOf((*HostConfigVFlashCacheRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigVFlashCacheResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigureVFlashResource HostConfigureVFlashResourceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigureVFlashResource"] = reflect.TypeOf((*HostConfigureVFlashResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigureVFlashResourceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference                    `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostVFlashManagerVFlashResourceConfigSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConfigureVFlashResourceRequestType"] = reflect.TypeOf((*HostConfigureVFlashResourceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigureVFlashResourceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectFault"] = reflect.TypeOf((*HostConnectFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectFaultFault BaseHostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectFaultFault"] = reflect.TypeOf((*HostConnectFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServerIp               string                           `xml:"serverIp,omitempty"`
0000000000000000000000000000000000000000;;		InDasCluster           *bool                            `xml:"inDasCluster"`
0000000000000000000000000000000000000000;;		Host                   HostListSummary                  `xml:"host"`
0000000000000000000000000000000000000000;;		Vm                     []VirtualMachineSummary          `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		VimAccountNameRequired *bool                            `xml:"vimAccountNameRequired"`
0000000000000000000000000000000000000000;;		ClusterSupported       *bool                            `xml:"clusterSupported"`
0000000000000000000000000000000000000000;;		Network                []BaseHostConnectInfoNetworkInfo `xml:"network,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Datastore              []BaseHostDatastoreConnectInfo   `xml:"datastore,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		License                *HostLicenseConnectInfo          `xml:"license,omitempty"`
0000000000000000000000000000000000000000;;		Capability             *HostCapability                  `xml:"capability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectInfo"] = reflect.TypeOf((*HostConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectInfoNetworkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Summary BaseNetworkSummary `xml:"summary,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectInfoNetworkInfo"] = reflect.TypeOf((*HostConnectInfoNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName           string                  `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		Port               int32                   `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprint      string                  `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;		UserName           string                  `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		Password           string                  `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;		VmFolder           *ManagedObjectReference `xml:"vmFolder,omitempty"`
0000000000000000000000000000000000000000;;		Force              bool                    `xml:"force"`
0000000000000000000000000000000000000000;;		VimAccountName     string                  `xml:"vimAccountName,omitempty"`
0000000000000000000000000000000000000000;;		VimAccountPassword string                  `xml:"vimAccountPassword,omitempty"`
0000000000000000000000000000000000000000;;		ManagementIp       string                  `xml:"managementIp,omitempty"`
0000000000000000000000000000000000000000;;		LockdownMode       HostLockdownMode        `xml:"lockdownMode,omitempty"`
0000000000000000000000000000000000000000;;		HostGateway        *HostGatewaySpec        `xml:"hostGateway,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectSpec"] = reflect.TypeOf((*HostConnectSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectedEvent"] = reflect.TypeOf((*HostConnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConnectionLostEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostConnectionLostEvent"] = reflect.TypeOf((*HostConnectionLostEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCpuIdInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Level  int32  `xml:"level"`
0000000000000000000000000000000000000000;;		Vendor string `xml:"vendor,omitempty"`
0000000000000000000000000000000000000000;;		Eax    string `xml:"eax,omitempty"`
0000000000000000000000000000000000000000;;		Ebx    string `xml:"ebx,omitempty"`
0000000000000000000000000000000000000000;;		Ecx    string `xml:"ecx,omitempty"`
0000000000000000000000000000000000000000;;		Edx    string `xml:"edx,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCpuIdInfo"] = reflect.TypeOf((*HostCpuIdInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCpuInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumCpuPackages int16 `xml:"numCpuPackages"`
0000000000000000000000000000000000000000;;		NumCpuCores    int16 `xml:"numCpuCores"`
0000000000000000000000000000000000000000;;		NumCpuThreads  int16 `xml:"numCpuThreads"`
0000000000000000000000000000000000000000;;		Hz             int64 `xml:"hz"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCpuInfo"] = reflect.TypeOf((*HostCpuInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCpuPackage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Index       int16           `xml:"index"`
0000000000000000000000000000000000000000;;		Vendor      string          `xml:"vendor"`
0000000000000000000000000000000000000000;;		Hz          int64           `xml:"hz"`
0000000000000000000000000000000000000000;;		BusHz       int64           `xml:"busHz"`
0000000000000000000000000000000000000000;;		Description string          `xml:"description"`
0000000000000000000000000000000000000000;;		ThreadId    []int16         `xml:"threadId"`
0000000000000000000000000000000000000000;;		CpuFeature  []HostCpuIdInfo `xml:"cpuFeature,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCpuPackage"] = reflect.TypeOf((*HostCpuPackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCpuPowerManagementInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentPolicy   string `xml:"currentPolicy,omitempty"`
0000000000000000000000000000000000000000;;		HardwareSupport string `xml:"hardwareSupport,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCpuPowerManagementInfo"] = reflect.TypeOf((*HostCpuPowerManagementInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCreateDiskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec VslmCreateSpec         `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCreateDiskRequestType"] = reflect.TypeOf((*HostCreateDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCreateDisk_Task HostCreateDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCreateDisk_Task"] = reflect.TypeOf((*HostCreateDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCreateDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasDisabledEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasDisabledEvent"] = reflect.TypeOf((*HostDasDisabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasDisablingEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasDisablingEvent"] = reflect.TypeOf((*HostDasDisablingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasEnabledEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasEnabledEvent"] = reflect.TypeOf((*HostDasEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasEnablingEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasEnablingEvent"] = reflect.TypeOf((*HostDasEnablingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasErrorEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message string `xml:"message,omitempty"`
0000000000000000000000000000000000000000;;		Reason  string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasErrorEvent"] = reflect.TypeOf((*HostDasErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasEvent"] = reflect.TypeOf((*HostDasEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDasOkEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDasOkEvent"] = reflect.TypeOf((*HostDasOkEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreBrowserSearchResults struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore  *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		FolderPath string                  `xml:"folderPath,omitempty"`
0000000000000000000000000000000000000000;;		File       []BaseFileInfo          `xml:"file,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreBrowserSearchResults"] = reflect.TypeOf((*HostDatastoreBrowserSearchResults)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreBrowserSearchSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Query                 []BaseFileQuery `xml:"query,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Details               *FileQueryFlags `xml:"details,omitempty"`
0000000000000000000000000000000000000000;;		SearchCaseInsensitive *bool           `xml:"searchCaseInsensitive"`
0000000000000000000000000000000000000000;;		MatchPattern          []string        `xml:"matchPattern,omitempty"`
0000000000000000000000000000000000000000;;		SortFoldersFirst      *bool           `xml:"sortFoldersFirst"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreBrowserSearchSpec"] = reflect.TypeOf((*HostDatastoreBrowserSearchSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreConnectInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Summary DatastoreSummary `xml:"summary"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreConnectInfo"] = reflect.TypeOf((*HostDatastoreConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreExistsConnectInfo struct {
0000000000000000000000000000000000000000;;		HostDatastoreConnectInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewDatastoreName string `xml:"newDatastoreName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreExistsConnectInfo"] = reflect.TypeOf((*HostDatastoreExistsConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreNameConflictConnectInfo struct {
0000000000000000000000000000000000000000;;		HostDatastoreConnectInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewDatastoreName string `xml:"newDatastoreName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreNameConflictConnectInfo"] = reflect.TypeOf((*HostDatastoreNameConflictConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreSystemCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NfsMountCreationRequired     bool  `xml:"nfsMountCreationRequired"`
0000000000000000000000000000000000000000;;		NfsMountCreationSupported    bool  `xml:"nfsMountCreationSupported"`
0000000000000000000000000000000000000000;;		LocalDatastoreSupported      bool  `xml:"localDatastoreSupported"`
0000000000000000000000000000000000000000;;		VmfsExtentExpansionSupported *bool `xml:"vmfsExtentExpansionSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreSystemCapabilities"] = reflect.TypeOf((*HostDatastoreSystemCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreSystemDatastoreResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault  `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreSystemDatastoreResult"] = reflect.TypeOf((*HostDatastoreSystemDatastoreResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreSystemVvolDatastoreSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;		ScId string `xml:"scId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreSystemVvolDatastoreSpec"] = reflect.TypeOf((*HostDatastoreSystemVvolDatastoreSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDateTimeConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TimeZone  string         `xml:"timeZone,omitempty"`
0000000000000000000000000000000000000000;;		NtpConfig *HostNtpConfig `xml:"ntpConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDateTimeConfig"] = reflect.TypeOf((*HostDateTimeConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDateTimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TimeZone  HostDateTimeSystemTimeZone `xml:"timeZone"`
0000000000000000000000000000000000000000;;		NtpConfig *HostNtpConfig             `xml:"ntpConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDateTimeInfo"] = reflect.TypeOf((*HostDateTimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDateTimeSystemTimeZone struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string `xml:"key"`
0000000000000000000000000000000000000000;;		Name        string `xml:"name"`
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;		GmtOffset   int32  `xml:"gmtOffset"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDateTimeSystemTimeZone"] = reflect.TypeOf((*HostDateTimeSystemTimeZone)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDeleteVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDeleteVStorageObjectRequestType"] = reflect.TypeOf((*HostDeleteVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDeleteVStorageObject_Task HostDeleteVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDeleteVStorageObject_Task"] = reflect.TypeOf((*HostDeleteVStorageObject_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDeleteVStorageObject_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDeploymentInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BootedFromStatelessCache *bool `xml:"bootedFromStatelessCache"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDeploymentInfo"] = reflect.TypeOf((*HostDeploymentInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDevice struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceName string `xml:"deviceName"`
0000000000000000000000000000000000000000;;		DeviceType string `xml:"deviceType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDevice"] = reflect.TypeOf((*HostDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDhcpService struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key  string              `xml:"key"`
0000000000000000000000000000000000000000;;		Spec HostDhcpServiceSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDhcpService"] = reflect.TypeOf((*HostDhcpService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDhcpServiceConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string              `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Key             string              `xml:"key"`
0000000000000000000000000000000000000000;;		Spec            HostDhcpServiceSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDhcpServiceConfig"] = reflect.TypeOf((*HostDhcpServiceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDhcpServiceSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VirtualSwitch        string `xml:"virtualSwitch"`
0000000000000000000000000000000000000000;;		DefaultLeaseDuration int32  `xml:"defaultLeaseDuration"`
0000000000000000000000000000000000000000;;		LeaseBeginIp         string `xml:"leaseBeginIp"`
0000000000000000000000000000000000000000;;		LeaseEndIp           string `xml:"leaseEndIp"`
0000000000000000000000000000000000000000;;		MaxLeaseDuration     int32  `xml:"maxLeaseDuration"`
0000000000000000000000000000000000000000;;		UnlimitedLease       bool   `xml:"unlimitedLease"`
0000000000000000000000000000000000000000;;		IpSubnetAddr         string `xml:"ipSubnetAddr"`
0000000000000000000000000000000000000000;;		IpSubnetMask         string `xml:"ipSubnetMask"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDhcpServiceSpec"] = reflect.TypeOf((*HostDhcpServiceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiagnosticPartition struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageType    string                `xml:"storageType"`
0000000000000000000000000000000000000000;;		DiagnosticType string                `xml:"diagnosticType"`
0000000000000000000000000000000000000000;;		Slots          int32                 `xml:"slots"`
0000000000000000000000000000000000000000;;		Id             HostScsiDiskPartition `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiagnosticPartition"] = reflect.TypeOf((*HostDiagnosticPartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiagnosticPartitionCreateDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Layout   HostDiskPartitionLayout           `xml:"layout"`
0000000000000000000000000000000000000000;;		DiskUuid string                            `xml:"diskUuid"`
0000000000000000000000000000000000000000;;		Spec     HostDiagnosticPartitionCreateSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiagnosticPartitionCreateDescription"] = reflect.TypeOf((*HostDiagnosticPartitionCreateDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiagnosticPartitionCreateOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageType    string       `xml:"storageType"`
0000000000000000000000000000000000000000;;		DiagnosticType string       `xml:"diagnosticType"`
0000000000000000000000000000000000000000;;		Disk           HostScsiDisk `xml:"disk"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiagnosticPartitionCreateOption"] = reflect.TypeOf((*HostDiagnosticPartitionCreateOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiagnosticPartitionCreateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageType    string                `xml:"storageType"`
0000000000000000000000000000000000000000;;		DiagnosticType string                `xml:"diagnosticType"`
0000000000000000000000000000000000000000;;		Id             HostScsiDiskPartition `xml:"id"`
0000000000000000000000000000000000000000;;		Partition      HostDiskPartitionSpec `xml:"partition"`
0000000000000000000000000000000000000000;;		Active         *bool                 `xml:"active"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiagnosticPartitionCreateSpec"] = reflect.TypeOf((*HostDiagnosticPartitionCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDigestInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DigestMethod string `xml:"digestMethod"`
0000000000000000000000000000000000000000;;		DigestValue  []byte `xml:"digestValue"`
0000000000000000000000000000000000000000;;		ObjectName   string `xml:"objectName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDigestInfo"] = reflect.TypeOf((*HostDigestInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDirectoryStoreInfo struct {
0000000000000000000000000000000000000000;;		HostAuthenticationStoreInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDirectoryStoreInfo"] = reflect.TypeOf((*HostDirectoryStoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDisconnectedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDisconnectedEvent"] = reflect.TypeOf((*HostDisconnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskConfigurationResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DevicePath string                `xml:"devicePath,omitempty"`
0000000000000000000000000000000000000000;;		Success    *bool                 `xml:"success"`
0000000000000000000000000000000000000000;;		Fault      *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskConfigurationResult"] = reflect.TypeOf((*HostDiskConfigurationResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskDimensions struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskDimensions"] = reflect.TypeOf((*HostDiskDimensions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskDimensionsChs struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cylinder int64 `xml:"cylinder"`
0000000000000000000000000000000000000000;;		Head     int32 `xml:"head"`
0000000000000000000000000000000000000000;;		Sector   int32 `xml:"sector"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskDimensionsChs"] = reflect.TypeOf((*HostDiskDimensionsChs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskDimensionsLba struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BlockSize int32 `xml:"blockSize"`
0000000000000000000000000000000000000000;;		Block     int64 `xml:"block"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskDimensionsLba"] = reflect.TypeOf((*HostDiskDimensionsLba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskMappingInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PhysicalPartition *HostDiskMappingPartitionInfo `xml:"physicalPartition,omitempty"`
0000000000000000000000000000000000000000;;		Name              string                        `xml:"name"`
0000000000000000000000000000000000000000;;		Exclusive         *bool                         `xml:"exclusive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskMappingInfo"] = reflect.TypeOf((*HostDiskMappingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskMappingOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PhysicalPartition []HostDiskMappingPartitionOption `xml:"physicalPartition,omitempty"`
0000000000000000000000000000000000000000;;		Name              string                           `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskMappingOption"] = reflect.TypeOf((*HostDiskMappingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskMappingPartitionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name         string `xml:"name"`
0000000000000000000000000000000000000000;;		FileSystem   string `xml:"fileSystem"`
0000000000000000000000000000000000000000;;		CapacityInKb int64  `xml:"capacityInKb"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskMappingPartitionInfo"] = reflect.TypeOf((*HostDiskMappingPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskMappingPartitionOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name         string `xml:"name"`
0000000000000000000000000000000000000000;;		FileSystem   string `xml:"fileSystem"`
0000000000000000000000000000000000000000;;		CapacityInKb int64  `xml:"capacityInKb"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskMappingPartitionOption"] = reflect.TypeOf((*HostDiskMappingPartitionOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskPartitionAttributes struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partition          int32  `xml:"partition"`
0000000000000000000000000000000000000000;;		StartSector        int64  `xml:"startSector"`
0000000000000000000000000000000000000000;;		EndSector          int64  `xml:"endSector"`
0000000000000000000000000000000000000000;;		Type               string `xml:"type"`
0000000000000000000000000000000000000000;;		Guid               string `xml:"guid,omitempty"`
0000000000000000000000000000000000000000;;		Logical            bool   `xml:"logical"`
0000000000000000000000000000000000000000;;		Attributes         byte   `xml:"attributes"`
0000000000000000000000000000000000000000;;		PartitionAlignment int64  `xml:"partitionAlignment,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskPartitionAttributes"] = reflect.TypeOf((*HostDiskPartitionAttributes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskPartitionBlockRange struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partition int32                 `xml:"partition,omitempty"`
0000000000000000000000000000000000000000;;		Type      string                `xml:"type"`
0000000000000000000000000000000000000000;;		Start     HostDiskDimensionsLba `xml:"start"`
0000000000000000000000000000000000000000;;		End       HostDiskDimensionsLba `xml:"end"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskPartitionBlockRange"] = reflect.TypeOf((*HostDiskPartitionBlockRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskPartitionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceName string                  `xml:"deviceName"`
0000000000000000000000000000000000000000;;		Spec       HostDiskPartitionSpec   `xml:"spec"`
0000000000000000000000000000000000000000;;		Layout     HostDiskPartitionLayout `xml:"layout"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskPartitionInfo"] = reflect.TypeOf((*HostDiskPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskPartitionLayout struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Total     *HostDiskDimensionsLba        `xml:"total,omitempty"`
0000000000000000000000000000000000000000;;		Partition []HostDiskPartitionBlockRange `xml:"partition"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskPartitionLayout"] = reflect.TypeOf((*HostDiskPartitionLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiskPartitionSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PartitionFormat string                        `xml:"partitionFormat,omitempty"`
0000000000000000000000000000000000000000;;		Chs             *HostDiskDimensionsChs        `xml:"chs,omitempty"`
0000000000000000000000000000000000000000;;		TotalSectors    int64                         `xml:"totalSectors,omitempty"`
0000000000000000000000000000000000000000;;		Partition       []HostDiskPartitionAttributes `xml:"partition,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiskPartitionSpec"] = reflect.TypeOf((*HostDiskPartitionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDnsConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dhcp             bool     `xml:"dhcp"`
0000000000000000000000000000000000000000;;		VirtualNicDevice string   `xml:"virtualNicDevice,omitempty"`
0000000000000000000000000000000000000000;;		HostName         string   `xml:"hostName"`
0000000000000000000000000000000000000000;;		DomainName       string   `xml:"domainName"`
0000000000000000000000000000000000000000;;		Address          []string `xml:"address,omitempty"`
0000000000000000000000000000000000000000;;		SearchDomain     []string `xml:"searchDomain,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDnsConfig"] = reflect.TypeOf((*HostDnsConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDnsConfigSpec struct {
0000000000000000000000000000000000000000;;		HostDnsConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VirtualNicConnection *HostVirtualNicConnection `xml:"virtualNicConnection,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDnsConfigSpec"] = reflect.TypeOf((*HostDnsConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostEnableAdminFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Permissions []Permission `xml:"permissions"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostEnableAdminFailedEvent"] = reflect.TypeOf((*HostEnableAdminFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostEsxAgentHostManagerConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AgentVmDatastore *ManagedObjectReference `xml:"agentVmDatastore,omitempty"`
0000000000000000000000000000000000000000;;		AgentVmNetwork   *ManagedObjectReference `xml:"agentVmNetwork,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostEsxAgentHostManagerConfigInfo"] = reflect.TypeOf((*HostEsxAgentHostManagerConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostEvent"] = reflect.TypeOf((*HostEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostEventArgument"] = reflect.TypeOf((*HostEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostExtendDiskRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id              ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore       ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		NewCapacityInMB int64                  `xml:"newCapacityInMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostExtendDiskRequestType"] = reflect.TypeOf((*HostExtendDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostExtendDisk_Task HostExtendDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostExtendDisk_Task"] = reflect.TypeOf((*HostExtendDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostExtendDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostExtraNetworksEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ips string `xml:"ips,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostExtraNetworksEvent"] = reflect.TypeOf((*HostExtraNetworksEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFaultToleranceManagerComponentHealthInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsStorageHealthy bool `xml:"isStorageHealthy"`
0000000000000000000000000000000000000000;;		IsNetworkHealthy bool `xml:"isNetworkHealthy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFaultToleranceManagerComponentHealthInfo"] = reflect.TypeOf((*HostFaultToleranceManagerComponentHealthInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFeatureCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string `xml:"key"`
0000000000000000000000000000000000000000;;		FeatureName string `xml:"featureName"`
0000000000000000000000000000000000000000;;		Value       string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFeatureCapability"] = reflect.TypeOf((*HostFeatureCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFeatureMask struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string `xml:"key"`
0000000000000000000000000000000000000000;;		FeatureName string `xml:"featureName"`
0000000000000000000000000000000000000000;;		Value       string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFeatureMask"] = reflect.TypeOf((*HostFeatureMask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFeatureVersionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string `xml:"key"`
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFeatureVersionInfo"] = reflect.TypeOf((*HostFeatureVersionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFibreChannelHba struct {
0000000000000000000000000000000000000000;;		HostHostBusAdapter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortWorldWideName int64                `xml:"portWorldWideName"`
0000000000000000000000000000000000000000;;		NodeWorldWideName int64                `xml:"nodeWorldWideName"`
0000000000000000000000000000000000000000;;		PortType          FibreChannelPortType `xml:"portType"`
0000000000000000000000000000000000000000;;		Speed             int64                `xml:"speed"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFibreChannelHba"] = reflect.TypeOf((*HostFibreChannelHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFibreChannelOverEthernetHba struct {
0000000000000000000000000000000000000000;;		HostFibreChannelHba
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UnderlyingNic    string                                  `xml:"underlyingNic"`
0000000000000000000000000000000000000000;;		LinkInfo         HostFibreChannelOverEthernetHbaLinkInfo `xml:"linkInfo"`
0000000000000000000000000000000000000000;;		IsSoftwareFcoe   bool                                    `xml:"isSoftwareFcoe"`
0000000000000000000000000000000000000000;;		MarkedForRemoval bool                                    `xml:"markedForRemoval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFibreChannelOverEthernetHba"] = reflect.TypeOf((*HostFibreChannelOverEthernetHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFibreChannelOverEthernetHbaLinkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnportMac string `xml:"vnportMac"`
0000000000000000000000000000000000000000;;		FcfMac    string `xml:"fcfMac"`
0000000000000000000000000000000000000000;;		VlanId    int32  `xml:"vlanId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFibreChannelOverEthernetHbaLinkInfo"] = reflect.TypeOf((*HostFibreChannelOverEthernetHbaLinkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFibreChannelOverEthernetTargetTransport struct {
0000000000000000000000000000000000000000;;		HostFibreChannelTargetTransport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnportMac string `xml:"vnportMac"`
0000000000000000000000000000000000000000;;		FcfMac    string `xml:"fcfMac"`
0000000000000000000000000000000000000000;;		VlanId    int32  `xml:"vlanId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFibreChannelOverEthernetTargetTransport"] = reflect.TypeOf((*HostFibreChannelOverEthernetTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFibreChannelTargetTransport struct {
0000000000000000000000000000000000000000;;		HostTargetTransport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortWorldWideName int64 `xml:"portWorldWideName"`
0000000000000000000000000000000000000000;;		NodeWorldWideName int64 `xml:"nodeWorldWideName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFibreChannelTargetTransport"] = reflect.TypeOf((*HostFibreChannelTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFileAccess struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Who  string `xml:"who"`
0000000000000000000000000000000000000000;;		What string `xml:"what"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFileAccess"] = reflect.TypeOf((*HostFileAccess)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFileSystemMountInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MountInfo       HostMountInfo            `xml:"mountInfo"`
0000000000000000000000000000000000000000;;		Volume          BaseHostFileSystemVolume `xml:"volume,typeattr"`
0000000000000000000000000000000000000000;;		VStorageSupport string                   `xml:"vStorageSupport,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFileSystemMountInfo"] = reflect.TypeOf((*HostFileSystemMountInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFileSystemVolume struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type     string `xml:"type"`
0000000000000000000000000000000000000000;;		Name     string `xml:"name"`
0000000000000000000000000000000000000000;;		Capacity int64  `xml:"capacity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFileSystemVolume"] = reflect.TypeOf((*HostFileSystemVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFileSystemVolumeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VolumeTypeList []string                  `xml:"volumeTypeList,omitempty"`
0000000000000000000000000000000000000000;;		MountInfo      []HostFileSystemMountInfo `xml:"mountInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFileSystemVolumeInfo"] = reflect.TypeOf((*HostFileSystemVolumeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Rule                  []HostFirewallConfigRuleSetConfig `xml:"rule,omitempty"`
0000000000000000000000000000000000000000;;		DefaultBlockingPolicy HostFirewallDefaultPolicy         `xml:"defaultBlockingPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallConfig"] = reflect.TypeOf((*HostFirewallConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallConfigRuleSetConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RulesetId    string                     `xml:"rulesetId"`
0000000000000000000000000000000000000000;;		Enabled      bool                       `xml:"enabled"`
0000000000000000000000000000000000000000;;		AllowedHosts *HostFirewallRulesetIpList `xml:"allowedHosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallConfigRuleSetConfig"] = reflect.TypeOf((*HostFirewallConfigRuleSetConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallDefaultPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IncomingBlocked *bool `xml:"incomingBlocked"`
0000000000000000000000000000000000000000;;		OutgoingBlocked *bool `xml:"outgoingBlocked"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallDefaultPolicy"] = reflect.TypeOf((*HostFirewallDefaultPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultPolicy HostFirewallDefaultPolicy `xml:"defaultPolicy"`
0000000000000000000000000000000000000000;;		Ruleset       []HostFirewallRuleset     `xml:"ruleset,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallInfo"] = reflect.TypeOf((*HostFirewallInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallRule struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port      int32                     `xml:"port"`
0000000000000000000000000000000000000000;;		EndPort   int32                     `xml:"endPort,omitempty"`
0000000000000000000000000000000000000000;;		Direction HostFirewallRuleDirection `xml:"direction"`
0000000000000000000000000000000000000000;;		PortType  HostFirewallRulePortType  `xml:"portType,omitempty"`
0000000000000000000000000000000000000000;;		Protocol  string                    `xml:"protocol"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallRule"] = reflect.TypeOf((*HostFirewallRule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallRuleset struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key          string                     `xml:"key"`
0000000000000000000000000000000000000000;;		Label        string                     `xml:"label"`
0000000000000000000000000000000000000000;;		Required     bool                       `xml:"required"`
0000000000000000000000000000000000000000;;		Rule         []HostFirewallRule         `xml:"rule"`
0000000000000000000000000000000000000000;;		Service      string                     `xml:"service,omitempty"`
0000000000000000000000000000000000000000;;		Enabled      bool                       `xml:"enabled"`
0000000000000000000000000000000000000000;;		AllowedHosts *HostFirewallRulesetIpList `xml:"allowedHosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallRuleset"] = reflect.TypeOf((*HostFirewallRuleset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallRulesetIpList struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress []string                       `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		IpNetwork []HostFirewallRulesetIpNetwork `xml:"ipNetwork,omitempty"`
0000000000000000000000000000000000000000;;		AllIp     bool                           `xml:"allIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallRulesetIpList"] = reflect.TypeOf((*HostFirewallRulesetIpList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallRulesetIpNetwork struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network      string `xml:"network"`
0000000000000000000000000000000000000000;;		PrefixLength int32  `xml:"prefixLength"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallRulesetIpNetwork"] = reflect.TypeOf((*HostFirewallRulesetIpNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallRulesetRulesetSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowedHosts HostFirewallRulesetIpList `xml:"allowedHosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallRulesetRulesetSpec"] = reflect.TypeOf((*HostFirewallRulesetRulesetSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFlagInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BackgroundSnapshotsEnabled *bool `xml:"backgroundSnapshotsEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFlagInfo"] = reflect.TypeOf((*HostFlagInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostForceMountedInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Persist bool `xml:"persist"`
0000000000000000000000000000000000000000;;		Mounted bool `xml:"mounted"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostForceMountedInfo"] = reflect.TypeOf((*HostForceMountedInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGatewaySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GatewayType            string     `xml:"gatewayType"`
0000000000000000000000000000000000000000;;		GatewayId              string     `xml:"gatewayId,omitempty"`
0000000000000000000000000000000000000000;;		TrustVerificationToken string     `xml:"trustVerificationToken,omitempty"`
0000000000000000000000000000000000000000;;		HostAuthParams         []KeyValue `xml:"hostAuthParams,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGatewaySpec"] = reflect.TypeOf((*HostGatewaySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGetShortNameFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGetShortNameFailedEvent"] = reflect.TypeOf((*HostGetShortNameFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGetVFlashModuleDefaultConfig HostGetVFlashModuleDefaultConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGetVFlashModuleDefaultConfig"] = reflect.TypeOf((*HostGetVFlashModuleDefaultConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGetVFlashModuleDefaultConfigRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VFlashModule string                 `xml:"vFlashModule"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGetVFlashModuleDefaultConfigRequestType"] = reflect.TypeOf((*HostGetVFlashModuleDefaultConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGetVFlashModuleDefaultConfigResponse struct {
0000000000000000000000000000000000000000;;		Returnval VirtualDiskVFlashCacheConfigInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGraphicsConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostDefaultGraphicsType        string                         `xml:"hostDefaultGraphicsType"`
0000000000000000000000000000000000000000;;		SharedPassthruAssignmentPolicy string                         `xml:"sharedPassthruAssignmentPolicy"`
0000000000000000000000000000000000000000;;		DeviceType                     []HostGraphicsConfigDeviceType `xml:"deviceType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGraphicsConfig"] = reflect.TypeOf((*HostGraphicsConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGraphicsConfigDeviceType struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceId     string `xml:"deviceId"`
0000000000000000000000000000000000000000;;		GraphicsType string `xml:"graphicsType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGraphicsConfigDeviceType"] = reflect.TypeOf((*HostGraphicsConfigDeviceType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGraphicsInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceName     string                   `xml:"deviceName"`
0000000000000000000000000000000000000000;;		VendorName     string                   `xml:"vendorName"`
0000000000000000000000000000000000000000;;		PciId          string                   `xml:"pciId"`
0000000000000000000000000000000000000000;;		GraphicsType   string                   `xml:"graphicsType"`
0000000000000000000000000000000000000000;;		MemorySizeInKB int64                    `xml:"memorySizeInKB"`
0000000000000000000000000000000000000000;;		Vm             []ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGraphicsInfo"] = reflect.TypeOf((*HostGraphicsInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHardwareElementInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name   string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Status BaseElementDescription `xml:"status,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHardwareElementInfo"] = reflect.TypeOf((*HostHardwareElementInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHardwareInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemInfo             HostSystemInfo              `xml:"systemInfo"`
0000000000000000000000000000000000000000;;		CpuPowerManagementInfo *HostCpuPowerManagementInfo `xml:"cpuPowerManagementInfo,omitempty"`
0000000000000000000000000000000000000000;;		CpuInfo                HostCpuInfo                 `xml:"cpuInfo"`
0000000000000000000000000000000000000000;;		CpuPkg                 []HostCpuPackage            `xml:"cpuPkg"`
0000000000000000000000000000000000000000;;		MemorySize             int64                       `xml:"memorySize"`
0000000000000000000000000000000000000000;;		NumaInfo               *HostNumaInfo               `xml:"numaInfo,omitempty"`
0000000000000000000000000000000000000000;;		SmcPresent             *bool                       `xml:"smcPresent"`
0000000000000000000000000000000000000000;;		PciDevice              []HostPciDevice             `xml:"pciDevice,omitempty"`
0000000000000000000000000000000000000000;;		CpuFeature             []HostCpuIdInfo             `xml:"cpuFeature,omitempty"`
0000000000000000000000000000000000000000;;		BiosInfo               *HostBIOSInfo               `xml:"biosInfo,omitempty"`
0000000000000000000000000000000000000000;;		ReliableMemoryInfo     *HostReliableMemoryInfo     `xml:"reliableMemoryInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHardwareInfo"] = reflect.TypeOf((*HostHardwareInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHardwareStatusInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemoryStatusInfo  []BaseHostHardwareElementInfo `xml:"memoryStatusInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		CpuStatusInfo     []BaseHostHardwareElementInfo `xml:"cpuStatusInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		StorageStatusInfo []HostStorageElementInfo      `xml:"storageStatusInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHardwareStatusInfo"] = reflect.TypeOf((*HostHardwareStatusInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHardwareSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vendor               string                         `xml:"vendor"`
0000000000000000000000000000000000000000;;		Model                string                         `xml:"model"`
0000000000000000000000000000000000000000;;		Uuid                 string                         `xml:"uuid"`
0000000000000000000000000000000000000000;;		OtherIdentifyingInfo []HostSystemIdentificationInfo `xml:"otherIdentifyingInfo,omitempty"`
0000000000000000000000000000000000000000;;		MemorySize           int64                          `xml:"memorySize"`
0000000000000000000000000000000000000000;;		CpuModel             string                         `xml:"cpuModel"`
0000000000000000000000000000000000000000;;		CpuMhz               int32                          `xml:"cpuMhz"`
0000000000000000000000000000000000000000;;		NumCpuPkgs           int16                          `xml:"numCpuPkgs"`
0000000000000000000000000000000000000000;;		NumCpuCores          int16                          `xml:"numCpuCores"`
0000000000000000000000000000000000000000;;		NumCpuThreads        int16                          `xml:"numCpuThreads"`
0000000000000000000000000000000000000000;;		NumNics              int32                          `xml:"numNics"`
0000000000000000000000000000000000000000;;		NumHBAs              int32                          `xml:"numHBAs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHardwareSummary"] = reflect.TypeOf((*HostHardwareSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHasComponentFailure struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName      string `xml:"hostName"`
0000000000000000000000000000000000000000;;		ComponentType string `xml:"componentType"`
0000000000000000000000000000000000000000;;		ComponentName string `xml:"componentName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHasComponentFailure"] = reflect.TypeOf((*HostHasComponentFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHasComponentFailureFault HostHasComponentFailure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHasComponentFailureFault"] = reflect.TypeOf((*HostHasComponentFailureFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHostBusAdapter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key    string `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;		Bus    int32  `xml:"bus"`
0000000000000000000000000000000000000000;;		Status string `xml:"status"`
0000000000000000000000000000000000000000;;		Model  string `xml:"model"`
0000000000000000000000000000000000000000;;		Driver string `xml:"driver,omitempty"`
0000000000000000000000000000000000000000;;		Pci    string `xml:"pci,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHostBusAdapter"] = reflect.TypeOf((*HostHostBusAdapter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHyperThreadScheduleInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Available bool `xml:"available"`
0000000000000000000000000000000000000000;;		Active    bool `xml:"active"`
0000000000000000000000000000000000000000;;		Config    bool `xml:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHyperThreadScheduleInfo"] = reflect.TypeOf((*HostHyperThreadScheduleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigGetAcceptance HostImageConfigGetAcceptanceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostImageConfigGetAcceptance"] = reflect.TypeOf((*HostImageConfigGetAcceptance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigGetAcceptanceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostImageConfigGetAcceptanceRequestType"] = reflect.TypeOf((*HostImageConfigGetAcceptanceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigGetAcceptanceResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigGetProfile HostImageConfigGetProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostImageConfigGetProfile"] = reflect.TypeOf((*HostImageConfigGetProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigGetProfileRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostImageConfigGetProfileRequestType"] = reflect.TypeOf((*HostImageConfigGetProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigGetProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostImageProfileSummary `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageProfileSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name   string `xml:"name"`
0000000000000000000000000000000000000000;;		Vendor string `xml:"vendor"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostImageProfileSummary"] = reflect.TypeOf((*HostImageProfileSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInAuditModeEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInAuditModeEvent"] = reflect.TypeOf((*HostInAuditModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInDomain struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInDomain"] = reflect.TypeOf((*HostInDomain)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInDomainFault HostInDomain
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInDomainFault"] = reflect.TypeOf((*HostInDomainFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIncompatibleForFaultTolerance struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		Reason   string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIncompatibleForFaultTolerance"] = reflect.TypeOf((*HostIncompatibleForFaultTolerance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIncompatibleForFaultToleranceFault HostIncompatibleForFaultTolerance
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIncompatibleForFaultToleranceFault"] = reflect.TypeOf((*HostIncompatibleForFaultToleranceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIncompatibleForRecordReplay struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		Reason   string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIncompatibleForRecordReplay"] = reflect.TypeOf((*HostIncompatibleForRecordReplay)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIncompatibleForRecordReplayFault HostIncompatibleForRecordReplay
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIncompatibleForRecordReplayFault"] = reflect.TypeOf((*HostIncompatibleForRecordReplayFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInflateDiskRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInflateDiskRequestType"] = reflect.TypeOf((*HostInflateDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInflateDisk_Task HostInflateDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInflateDisk_Task"] = reflect.TypeOf((*HostInflateDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInflateDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHba struct {
0000000000000000000000000000000000000000;;		HostHostBusAdapter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsSoftwareBased            bool                                          `xml:"isSoftwareBased"`
0000000000000000000000000000000000000000;;		CanBeDisabled              *bool                                         `xml:"canBeDisabled"`
0000000000000000000000000000000000000000;;		NetworkBindingSupport      HostInternetScsiHbaNetworkBindingSupportType  `xml:"networkBindingSupport,omitempty"`
0000000000000000000000000000000000000000;;		DiscoveryCapabilities      HostInternetScsiHbaDiscoveryCapabilities      `xml:"discoveryCapabilities"`
0000000000000000000000000000000000000000;;		DiscoveryProperties        HostInternetScsiHbaDiscoveryProperties        `xml:"discoveryProperties"`
0000000000000000000000000000000000000000;;		AuthenticationCapabilities HostInternetScsiHbaAuthenticationCapabilities `xml:"authenticationCapabilities"`
0000000000000000000000000000000000000000;;		AuthenticationProperties   HostInternetScsiHbaAuthenticationProperties   `xml:"authenticationProperties"`
0000000000000000000000000000000000000000;;		DigestCapabilities         *HostInternetScsiHbaDigestCapabilities        `xml:"digestCapabilities,omitempty"`
0000000000000000000000000000000000000000;;		DigestProperties           *HostInternetScsiHbaDigestProperties          `xml:"digestProperties,omitempty"`
0000000000000000000000000000000000000000;;		IpCapabilities             HostInternetScsiHbaIPCapabilities             `xml:"ipCapabilities"`
0000000000000000000000000000000000000000;;		IpProperties               HostInternetScsiHbaIPProperties               `xml:"ipProperties"`
0000000000000000000000000000000000000000;;		SupportedAdvancedOptions   []OptionDef                                   `xml:"supportedAdvancedOptions,omitempty"`
0000000000000000000000000000000000000000;;		AdvancedOptions            []HostInternetScsiHbaParamValue               `xml:"advancedOptions,omitempty"`
0000000000000000000000000000000000000000;;		IScsiName                  string                                        `xml:"iScsiName"`
0000000000000000000000000000000000000000;;		IScsiAlias                 string                                        `xml:"iScsiAlias,omitempty"`
0000000000000000000000000000000000000000;;		ConfiguredSendTarget       []HostInternetScsiHbaSendTarget               `xml:"configuredSendTarget,omitempty"`
0000000000000000000000000000000000000000;;		ConfiguredStaticTarget     []HostInternetScsiHbaStaticTarget             `xml:"configuredStaticTarget,omitempty"`
0000000000000000000000000000000000000000;;		MaxSpeedMb                 int32                                         `xml:"maxSpeedMb,omitempty"`
0000000000000000000000000000000000000000;;		CurrentSpeedMb             int32                                         `xml:"currentSpeedMb,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHba"] = reflect.TypeOf((*HostInternetScsiHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaAuthenticationCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChapAuthSettable         bool  `xml:"chapAuthSettable"`
0000000000000000000000000000000000000000;;		Krb5AuthSettable         bool  `xml:"krb5AuthSettable"`
0000000000000000000000000000000000000000;;		SrpAuthSettable          bool  `xml:"srpAuthSettable"`
0000000000000000000000000000000000000000;;		SpkmAuthSettable         bool  `xml:"spkmAuthSettable"`
0000000000000000000000000000000000000000;;		MutualChapSettable       *bool `xml:"mutualChapSettable"`
0000000000000000000000000000000000000000;;		TargetChapSettable       *bool `xml:"targetChapSettable"`
0000000000000000000000000000000000000000;;		TargetMutualChapSettable *bool `xml:"targetMutualChapSettable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaAuthenticationCapabilities"] = reflect.TypeOf((*HostInternetScsiHbaAuthenticationCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaAuthenticationProperties struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChapAuthEnabled              bool   `xml:"chapAuthEnabled"`
0000000000000000000000000000000000000000;;		ChapName                     string `xml:"chapName,omitempty"`
0000000000000000000000000000000000000000;;		ChapSecret                   string `xml:"chapSecret,omitempty"`
0000000000000000000000000000000000000000;;		ChapAuthenticationType       string `xml:"chapAuthenticationType,omitempty"`
0000000000000000000000000000000000000000;;		ChapInherited                *bool  `xml:"chapInherited"`
0000000000000000000000000000000000000000;;		MutualChapName               string `xml:"mutualChapName,omitempty"`
0000000000000000000000000000000000000000;;		MutualChapSecret             string `xml:"mutualChapSecret,omitempty"`
0000000000000000000000000000000000000000;;		MutualChapAuthenticationType string `xml:"mutualChapAuthenticationType,omitempty"`
0000000000000000000000000000000000000000;;		MutualChapInherited          *bool  `xml:"mutualChapInherited"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaAuthenticationProperties"] = reflect.TypeOf((*HostInternetScsiHbaAuthenticationProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaDigestCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HeaderDigestSettable       *bool `xml:"headerDigestSettable"`
0000000000000000000000000000000000000000;;		DataDigestSettable         *bool `xml:"dataDigestSettable"`
0000000000000000000000000000000000000000;;		TargetHeaderDigestSettable *bool `xml:"targetHeaderDigestSettable"`
0000000000000000000000000000000000000000;;		TargetDataDigestSettable   *bool `xml:"targetDataDigestSettable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaDigestCapabilities"] = reflect.TypeOf((*HostInternetScsiHbaDigestCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaDigestProperties struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HeaderDigestType      string `xml:"headerDigestType,omitempty"`
0000000000000000000000000000000000000000;;		HeaderDigestInherited *bool  `xml:"headerDigestInherited"`
0000000000000000000000000000000000000000;;		DataDigestType        string `xml:"dataDigestType,omitempty"`
0000000000000000000000000000000000000000;;		DataDigestInherited   *bool  `xml:"dataDigestInherited"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaDigestProperties"] = reflect.TypeOf((*HostInternetScsiHbaDigestProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaDiscoveryCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ISnsDiscoverySettable         bool `xml:"iSnsDiscoverySettable"`
0000000000000000000000000000000000000000;;		SlpDiscoverySettable          bool `xml:"slpDiscoverySettable"`
0000000000000000000000000000000000000000;;		StaticTargetDiscoverySettable bool `xml:"staticTargetDiscoverySettable"`
0000000000000000000000000000000000000000;;		SendTargetsDiscoverySettable  bool `xml:"sendTargetsDiscoverySettable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaDiscoveryCapabilities"] = reflect.TypeOf((*HostInternetScsiHbaDiscoveryCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaDiscoveryProperties struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ISnsDiscoveryEnabled         bool   `xml:"iSnsDiscoveryEnabled"`
0000000000000000000000000000000000000000;;		ISnsDiscoveryMethod          string `xml:"iSnsDiscoveryMethod,omitempty"`
0000000000000000000000000000000000000000;;		ISnsHost                     string `xml:"iSnsHost,omitempty"`
0000000000000000000000000000000000000000;;		SlpDiscoveryEnabled          bool   `xml:"slpDiscoveryEnabled"`
0000000000000000000000000000000000000000;;		SlpDiscoveryMethod           string `xml:"slpDiscoveryMethod,omitempty"`
0000000000000000000000000000000000000000;;		SlpHost                      string `xml:"slpHost,omitempty"`
0000000000000000000000000000000000000000;;		StaticTargetDiscoveryEnabled bool   `xml:"staticTargetDiscoveryEnabled"`
0000000000000000000000000000000000000000;;		SendTargetsDiscoveryEnabled  bool   `xml:"sendTargetsDiscoveryEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaDiscoveryProperties"] = reflect.TypeOf((*HostInternetScsiHbaDiscoveryProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaIPCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AddressSettable                              bool  `xml:"addressSettable"`
0000000000000000000000000000000000000000;;		IpConfigurationMethodSettable                bool  `xml:"ipConfigurationMethodSettable"`
0000000000000000000000000000000000000000;;		SubnetMaskSettable                           bool  `xml:"subnetMaskSettable"`
0000000000000000000000000000000000000000;;		DefaultGatewaySettable                       bool  `xml:"defaultGatewaySettable"`
0000000000000000000000000000000000000000;;		PrimaryDnsServerAddressSettable              bool  `xml:"primaryDnsServerAddressSettable"`
0000000000000000000000000000000000000000;;		AlternateDnsServerAddressSettable            bool  `xml:"alternateDnsServerAddressSettable"`
0000000000000000000000000000000000000000;;		Ipv6Supported                                *bool `xml:"ipv6Supported"`
0000000000000000000000000000000000000000;;		ArpRedirectSettable                          *bool `xml:"arpRedirectSettable"`
0000000000000000000000000000000000000000;;		MtuSettable                                  *bool `xml:"mtuSettable"`
0000000000000000000000000000000000000000;;		HostNameAsTargetAddress                      *bool `xml:"hostNameAsTargetAddress"`
0000000000000000000000000000000000000000;;		NameAliasSettable                            *bool `xml:"nameAliasSettable"`
0000000000000000000000000000000000000000;;		Ipv4EnableSettable                           *bool `xml:"ipv4EnableSettable"`
0000000000000000000000000000000000000000;;		Ipv6EnableSettable                           *bool `xml:"ipv6EnableSettable"`
0000000000000000000000000000000000000000;;		Ipv6PrefixLengthSettable                     *bool `xml:"ipv6PrefixLengthSettable"`
0000000000000000000000000000000000000000;;		Ipv6PrefixLength                             int32 `xml:"ipv6PrefixLength,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6DhcpConfigurationSettable                *bool `xml:"ipv6DhcpConfigurationSettable"`
0000000000000000000000000000000000000000;;		Ipv6LinkLocalAutoConfigurationSettable       *bool `xml:"ipv6LinkLocalAutoConfigurationSettable"`
0000000000000000000000000000000000000000;;		Ipv6RouterAdvertisementConfigurationSettable *bool `xml:"ipv6RouterAdvertisementConfigurationSettable"`
0000000000000000000000000000000000000000;;		Ipv6DefaultGatewaySettable                   *bool `xml:"ipv6DefaultGatewaySettable"`
0000000000000000000000000000000000000000;;		Ipv6MaxStaticAddressesSupported              int32 `xml:"ipv6MaxStaticAddressesSupported,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaIPCapabilities"] = reflect.TypeOf((*HostInternetScsiHbaIPCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaIPProperties struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mac                       string                             `xml:"mac,omitempty"`
0000000000000000000000000000000000000000;;		Address                   string                             `xml:"address,omitempty"`
0000000000000000000000000000000000000000;;		DhcpConfigurationEnabled  bool                               `xml:"dhcpConfigurationEnabled"`
0000000000000000000000000000000000000000;;		SubnetMask                string                             `xml:"subnetMask,omitempty"`
0000000000000000000000000000000000000000;;		DefaultGateway            string                             `xml:"defaultGateway,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryDnsServerAddress   string                             `xml:"primaryDnsServerAddress,omitempty"`
0000000000000000000000000000000000000000;;		AlternateDnsServerAddress string                             `xml:"alternateDnsServerAddress,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6Address               string                             `xml:"ipv6Address,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6SubnetMask            string                             `xml:"ipv6SubnetMask,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6DefaultGateway        string                             `xml:"ipv6DefaultGateway,omitempty"`
0000000000000000000000000000000000000000;;		ArpRedirectEnabled        *bool                              `xml:"arpRedirectEnabled"`
0000000000000000000000000000000000000000;;		Mtu                       int32                              `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;		JumboFramesEnabled        *bool                              `xml:"jumboFramesEnabled"`
0000000000000000000000000000000000000000;;		Ipv4Enabled               *bool                              `xml:"ipv4Enabled"`
0000000000000000000000000000000000000000;;		Ipv6Enabled               *bool                              `xml:"ipv6Enabled"`
0000000000000000000000000000000000000000;;		Ipv6properties            *HostInternetScsiHbaIPv6Properties `xml:"ipv6properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaIPProperties"] = reflect.TypeOf((*HostInternetScsiHbaIPProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaIPv6Properties struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IscsiIpv6Address                            []HostInternetScsiHbaIscsiIpv6Address `xml:"iscsiIpv6Address,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6DhcpConfigurationEnabled                *bool                                 `xml:"ipv6DhcpConfigurationEnabled"`
0000000000000000000000000000000000000000;;		Ipv6LinkLocalAutoConfigurationEnabled       *bool                                 `xml:"ipv6LinkLocalAutoConfigurationEnabled"`
0000000000000000000000000000000000000000;;		Ipv6RouterAdvertisementConfigurationEnabled *bool                                 `xml:"ipv6RouterAdvertisementConfigurationEnabled"`
0000000000000000000000000000000000000000;;		Ipv6DefaultGateway                          string                                `xml:"ipv6DefaultGateway,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaIPv6Properties"] = reflect.TypeOf((*HostInternetScsiHbaIPv6Properties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaIscsiIpv6Address struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address      string `xml:"address"`
0000000000000000000000000000000000000000;;		PrefixLength int32  `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Origin       string `xml:"origin"`
0000000000000000000000000000000000000000;;		Operation    string `xml:"operation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaIscsiIpv6Address"] = reflect.TypeOf((*HostInternetScsiHbaIscsiIpv6Address)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaParamValue struct {
0000000000000000000000000000000000000000;;		OptionValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsInherited *bool `xml:"isInherited"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaParamValue"] = reflect.TypeOf((*HostInternetScsiHbaParamValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaSendTarget struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address                  string                                       `xml:"address"`
0000000000000000000000000000000000000000;;		Port                     int32                                        `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		AuthenticationProperties *HostInternetScsiHbaAuthenticationProperties `xml:"authenticationProperties,omitempty"`
0000000000000000000000000000000000000000;;		DigestProperties         *HostInternetScsiHbaDigestProperties         `xml:"digestProperties,omitempty"`
0000000000000000000000000000000000000000;;		SupportedAdvancedOptions []OptionDef                                  `xml:"supportedAdvancedOptions,omitempty"`
0000000000000000000000000000000000000000;;		AdvancedOptions          []HostInternetScsiHbaParamValue              `xml:"advancedOptions,omitempty"`
0000000000000000000000000000000000000000;;		Parent                   string                                       `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaSendTarget"] = reflect.TypeOf((*HostInternetScsiHbaSendTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaStaticTarget struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address                  string                                       `xml:"address"`
0000000000000000000000000000000000000000;;		Port                     int32                                        `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		IScsiName                string                                       `xml:"iScsiName"`
0000000000000000000000000000000000000000;;		DiscoveryMethod          string                                       `xml:"discoveryMethod,omitempty"`
0000000000000000000000000000000000000000;;		AuthenticationProperties *HostInternetScsiHbaAuthenticationProperties `xml:"authenticationProperties,omitempty"`
0000000000000000000000000000000000000000;;		DigestProperties         *HostInternetScsiHbaDigestProperties         `xml:"digestProperties,omitempty"`
0000000000000000000000000000000000000000;;		SupportedAdvancedOptions []OptionDef                                  `xml:"supportedAdvancedOptions,omitempty"`
0000000000000000000000000000000000000000;;		AdvancedOptions          []HostInternetScsiHbaParamValue              `xml:"advancedOptions,omitempty"`
0000000000000000000000000000000000000000;;		Parent                   string                                       `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaStaticTarget"] = reflect.TypeOf((*HostInternetScsiHbaStaticTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiHbaTargetSet struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StaticTargets []HostInternetScsiHbaStaticTarget `xml:"staticTargets,omitempty"`
0000000000000000000000000000000000000000;;		SendTargets   []HostInternetScsiHbaSendTarget   `xml:"sendTargets,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiHbaTargetSet"] = reflect.TypeOf((*HostInternetScsiHbaTargetSet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInternetScsiTargetTransport struct {
0000000000000000000000000000000000000000;;		HostTargetTransport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IScsiName  string   `xml:"iScsiName"`
0000000000000000000000000000000000000000;;		IScsiAlias string   `xml:"iScsiAlias"`
0000000000000000000000000000000000000000;;		Address    []string `xml:"address,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInternetScsiTargetTransport"] = reflect.TypeOf((*HostInternetScsiTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInventoryFull struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capacity int32 `xml:"capacity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInventoryFull"] = reflect.TypeOf((*HostInventoryFull)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInventoryFullEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capacity int32 `xml:"capacity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInventoryFullEvent"] = reflect.TypeOf((*HostInventoryFullEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInventoryFullFault HostInventoryFull
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInventoryFullFault"] = reflect.TypeOf((*HostInventoryFullFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostInventoryUnreadableEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostInventoryUnreadableEvent"] = reflect.TypeOf((*HostInventoryUnreadableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIoFilterInfo struct {
0000000000000000000000000000000000000000;;		IoFilterInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Available bool `xml:"available"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIoFilterInfo"] = reflect.TypeOf((*HostIoFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpChangedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldIP string `xml:"oldIP"`
0000000000000000000000000000000000000000;;		NewIP string `xml:"newIP"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpChangedEvent"] = reflect.TypeOf((*HostIpChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dhcp       bool                                  `xml:"dhcp"`
0000000000000000000000000000000000000000;;		IpAddress  string                                `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		SubnetMask string                                `xml:"subnetMask,omitempty"`
0000000000000000000000000000000000000000;;		IpV6Config *HostIpConfigIpV6AddressConfiguration `xml:"ipV6Config,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpConfig"] = reflect.TypeOf((*HostIpConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpConfigIpV6Address struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress    string     `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		PrefixLength int32      `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Origin       string     `xml:"origin,omitempty"`
0000000000000000000000000000000000000000;;		DadState     string     `xml:"dadState,omitempty"`
0000000000000000000000000000000000000000;;		Lifetime     *time.Time `xml:"lifetime"`
0000000000000000000000000000000000000000;;		Operation    string     `xml:"operation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpConfigIpV6Address"] = reflect.TypeOf((*HostIpConfigIpV6Address)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpConfigIpV6AddressConfiguration struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpV6Address              []HostIpConfigIpV6Address `xml:"ipV6Address,omitempty"`
0000000000000000000000000000000000000000;;		AutoConfigurationEnabled *bool                     `xml:"autoConfigurationEnabled"`
0000000000000000000000000000000000000000;;		DhcpV6Enabled            *bool                     `xml:"dhcpV6Enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpConfigIpV6AddressConfiguration"] = reflect.TypeOf((*HostIpConfigIpV6AddressConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpInconsistentEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress  string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		IpAddress2 string `xml:"ipAddress2"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpInconsistentEvent"] = reflect.TypeOf((*HostIpInconsistentEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpRouteConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultGateway     string `xml:"defaultGateway,omitempty"`
0000000000000000000000000000000000000000;;		GatewayDevice      string `xml:"gatewayDevice,omitempty"`
0000000000000000000000000000000000000000;;		IpV6DefaultGateway string `xml:"ipV6DefaultGateway,omitempty"`
0000000000000000000000000000000000000000;;		IpV6GatewayDevice  string `xml:"ipV6GatewayDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpRouteConfig"] = reflect.TypeOf((*HostIpRouteConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpRouteConfigSpec struct {
0000000000000000000000000000000000000000;;		HostIpRouteConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GatewayDeviceConnection     *HostVirtualNicConnection `xml:"gatewayDeviceConnection,omitempty"`
0000000000000000000000000000000000000000;;		IpV6GatewayDeviceConnection *HostVirtualNicConnection `xml:"ipV6GatewayDeviceConnection,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpRouteConfigSpec"] = reflect.TypeOf((*HostIpRouteConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpRouteEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network      string `xml:"network"`
0000000000000000000000000000000000000000;;		PrefixLength int32  `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Gateway      string `xml:"gateway"`
0000000000000000000000000000000000000000;;		DeviceName   string `xml:"deviceName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpRouteEntry"] = reflect.TypeOf((*HostIpRouteEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpRouteOp struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string           `xml:"changeOperation"`
0000000000000000000000000000000000000000;;		Route           HostIpRouteEntry `xml:"route"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpRouteOp"] = reflect.TypeOf((*HostIpRouteOp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpRouteTableConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpRoute   []HostIpRouteOp `xml:"ipRoute,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6Route []HostIpRouteOp `xml:"ipv6Route,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpRouteTableConfig"] = reflect.TypeOf((*HostIpRouteTableConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpRouteTableInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpRoute   []HostIpRouteEntry `xml:"ipRoute,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6Route []HostIpRouteEntry `xml:"ipv6Route,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpRouteTableInfo"] = reflect.TypeOf((*HostIpRouteTableInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpToShortNameFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpToShortNameFailedEvent"] = reflect.TypeOf((*HostIpToShortNameFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIpmiInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BmcIpAddress  string `xml:"bmcIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		BmcMacAddress string `xml:"bmcMacAddress,omitempty"`
0000000000000000000000000000000000000000;;		Login         string `xml:"login,omitempty"`
0000000000000000000000000000000000000000;;		Password      string `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIpmiInfo"] = reflect.TypeOf((*HostIpmiInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostIsolationIpPingFailedEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsolationIp string `xml:"isolationIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostIsolationIpPingFailedEvent"] = reflect.TypeOf((*HostIsolationIpPingFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLicensableResourceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Resource []KeyAnyValue `xml:"resource"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLicensableResourceInfo"] = reflect.TypeOf((*HostLicensableResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLicenseConnectInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		License    LicenseManagerLicenseInfo    `xml:"license"`
0000000000000000000000000000000000000000;;		Evaluation LicenseManagerEvaluationInfo `xml:"evaluation"`
0000000000000000000000000000000000000000;;		Resource   *HostLicensableResourceInfo  `xml:"resource,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLicenseConnectInfo"] = reflect.TypeOf((*HostLicenseConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLicenseExpiredEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLicenseExpiredEvent"] = reflect.TypeOf((*HostLicenseExpiredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLicenseSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source             BaseLicenseSource `xml:"source,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		EditionKey         string            `xml:"editionKey,omitempty"`
0000000000000000000000000000000000000000;;		DisabledFeatureKey []string          `xml:"disabledFeatureKey,omitempty"`
0000000000000000000000000000000000000000;;		EnabledFeatureKey  []string          `xml:"enabledFeatureKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLicenseSpec"] = reflect.TypeOf((*HostLicenseSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostListSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host               *ManagedObjectReference        `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Hardware           *HostHardwareSummary           `xml:"hardware,omitempty"`
0000000000000000000000000000000000000000;;		Runtime            *HostRuntimeInfo               `xml:"runtime,omitempty"`
0000000000000000000000000000000000000000;;		Config             HostConfigSummary              `xml:"config"`
0000000000000000000000000000000000000000;;		QuickStats         HostListSummaryQuickStats      `xml:"quickStats"`
0000000000000000000000000000000000000000;;		OverallStatus      ManagedEntityStatus            `xml:"overallStatus"`
0000000000000000000000000000000000000000;;		RebootRequired     bool                           `xml:"rebootRequired"`
0000000000000000000000000000000000000000;;		CustomValue        []BaseCustomFieldValue         `xml:"customValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ManagementServerIp string                         `xml:"managementServerIp,omitempty"`
0000000000000000000000000000000000000000;;		MaxEVCModeKey      string                         `xml:"maxEVCModeKey,omitempty"`
0000000000000000000000000000000000000000;;		CurrentEVCModeKey  string                         `xml:"currentEVCModeKey,omitempty"`
0000000000000000000000000000000000000000;;		Gateway            *HostListSummaryGatewaySummary `xml:"gateway,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostListSummary"] = reflect.TypeOf((*HostListSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostListSummaryGatewaySummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GatewayType string `xml:"gatewayType"`
0000000000000000000000000000000000000000;;		GatewayId   string `xml:"gatewayId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostListSummaryGatewaySummary"] = reflect.TypeOf((*HostListSummaryGatewaySummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostListSummaryQuickStats struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OverallCpuUsage           int32 `xml:"overallCpuUsage,omitempty"`
0000000000000000000000000000000000000000;;		OverallMemoryUsage        int32 `xml:"overallMemoryUsage,omitempty"`
0000000000000000000000000000000000000000;;		DistributedCpuFairness    int32 `xml:"distributedCpuFairness,omitempty"`
0000000000000000000000000000000000000000;;		DistributedMemoryFairness int32 `xml:"distributedMemoryFairness,omitempty"`
0000000000000000000000000000000000000000;;		Uptime                    int32 `xml:"uptime,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostListSummaryQuickStats"] = reflect.TypeOf((*HostListSummaryQuickStats)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostListVStorageObject HostListVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostListVStorageObject"] = reflect.TypeOf((*HostListVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostListVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostListVStorageObjectRequestType"] = reflect.TypeOf((*HostListVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostListVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ID `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLocalAuthenticationInfo struct {
0000000000000000000000000000000000000000;;		HostAuthenticationStoreInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLocalAuthenticationInfo"] = reflect.TypeOf((*HostLocalAuthenticationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLocalFileSystemVolume struct {
0000000000000000000000000000000000000000;;		HostFileSystemVolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLocalFileSystemVolume"] = reflect.TypeOf((*HostLocalFileSystemVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLocalFileSystemVolumeSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device    string `xml:"device"`
0000000000000000000000000000000000000000;;		LocalPath string `xml:"localPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLocalFileSystemVolumeSpec"] = reflect.TypeOf((*HostLocalFileSystemVolumeSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLocalPortCreatedEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostLocalPort DVSHostLocalPortInfo `xml:"hostLocalPort"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLocalPortCreatedEvent"] = reflect.TypeOf((*HostLocalPortCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerDiskLayoutSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ControllerType string `xml:"controllerType"`
0000000000000000000000000000000000000000;;		BusNumber      int32  `xml:"busNumber"`
0000000000000000000000000000000000000000;;		UnitNumber     *int32 `xml:"unitNumber"`
0000000000000000000000000000000000000000;;		SrcFilename    string `xml:"srcFilename"`
0000000000000000000000000000000000000000;;		DstFilename    string `xml:"dstFilename"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerDiskLayoutSpec"] = reflect.TypeOf((*HostLowLevelProvisioningManagerDiskLayoutSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerFileDeleteResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileName string               `xml:"fileName"`
0000000000000000000000000000000000000000;;		Fault    LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerFileDeleteResult"] = reflect.TypeOf((*HostLowLevelProvisioningManagerFileDeleteResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerFileDeleteSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileName string `xml:"fileName"`
0000000000000000000000000000000000000000;;		FileType string `xml:"fileType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerFileDeleteSpec"] = reflect.TypeOf((*HostLowLevelProvisioningManagerFileDeleteSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerFileReserveResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BaseName     string `xml:"baseName"`
0000000000000000000000000000000000000000;;		ParentDir    string `xml:"parentDir"`
0000000000000000000000000000000000000000;;		ReservedName string `xml:"reservedName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerFileReserveResult"] = reflect.TypeOf((*HostLowLevelProvisioningManagerFileReserveResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerFileReserveSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BaseName       string `xml:"baseName"`
0000000000000000000000000000000000000000;;		ParentDir      string `xml:"parentDir"`
0000000000000000000000000000000000000000;;		FileType       string `xml:"fileType"`
0000000000000000000000000000000000000000;;		StorageProfile string `xml:"storageProfile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerFileReserveSpec"] = reflect.TypeOf((*HostLowLevelProvisioningManagerFileReserveSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerSnapshotLayoutSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id          int32                                           `xml:"id"`
0000000000000000000000000000000000000000;;		SrcFilename string                                          `xml:"srcFilename"`
0000000000000000000000000000000000000000;;		DstFilename string                                          `xml:"dstFilename"`
0000000000000000000000000000000000000000;;		Disk        []HostLowLevelProvisioningManagerDiskLayoutSpec `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerSnapshotLayoutSpec"] = reflect.TypeOf((*HostLowLevelProvisioningManagerSnapshotLayoutSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerVmMigrationStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MigrationId          int64  `xml:"migrationId"`
0000000000000000000000000000000000000000;;		Type                 string `xml:"type"`
0000000000000000000000000000000000000000;;		Source               bool   `xml:"source"`
0000000000000000000000000000000000000000;;		ConsideredSuccessful bool   `xml:"consideredSuccessful"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerVmMigrationStatus"] = reflect.TypeOf((*HostLowLevelProvisioningManagerVmMigrationStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLowLevelProvisioningManagerVmRecoveryInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version      string                       `xml:"version"`
0000000000000000000000000000000000000000;;		BiosUUID     string                       `xml:"biosUUID"`
0000000000000000000000000000000000000000;;		InstanceUUID string                       `xml:"instanceUUID"`
0000000000000000000000000000000000000000;;		FtInfo       BaseFaultToleranceConfigInfo `xml:"ftInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLowLevelProvisioningManagerVmRecoveryInfo"] = reflect.TypeOf((*HostLowLevelProvisioningManagerVmRecoveryInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMaintenanceSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VsanMode *VsanHostDecommissionMode `xml:"vsanMode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMaintenanceSpec"] = reflect.TypeOf((*HostMaintenanceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMemberHealthCheckResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Summary string `xml:"summary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMemberHealthCheckResult"] = reflect.TypeOf((*HostMemberHealthCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMemberRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host              ManagedObjectReference            `xml:"host"`
0000000000000000000000000000000000000000;;		Status            string                            `xml:"status,omitempty"`
0000000000000000000000000000000000000000;;		StatusDetail      string                            `xml:"statusDetail,omitempty"`
0000000000000000000000000000000000000000;;		HealthCheckResult []BaseHostMemberHealthCheckResult `xml:"healthCheckResult,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMemberRuntimeInfo"] = reflect.TypeOf((*HostMemberRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMemberUplinkHealthCheckResult struct {
0000000000000000000000000000000000000000;;		HostMemberHealthCheckResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UplinkPortKey string `xml:"uplinkPortKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMemberUplinkHealthCheckResult"] = reflect.TypeOf((*HostMemberUplinkHealthCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMemoryProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMemoryProfile"] = reflect.TypeOf((*HostMemoryProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMemorySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceConsoleReservation int64 `xml:"serviceConsoleReservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMemorySpec"] = reflect.TypeOf((*HostMemorySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMissingNetworksEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ips string `xml:"ips,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMissingNetworksEvent"] = reflect.TypeOf((*HostMissingNetworksEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMonitoringStateChangedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State     string `xml:"state"`
0000000000000000000000000000000000000000;;		PrevState string `xml:"prevState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMonitoringStateChangedEvent"] = reflect.TypeOf((*HostMonitoringStateChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMountInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path               string `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;		AccessMode         string `xml:"accessMode"`
0000000000000000000000000000000000000000;;		Mounted            *bool  `xml:"mounted"`
0000000000000000000000000000000000000000;;		Accessible         *bool  `xml:"accessible"`
0000000000000000000000000000000000000000;;		InaccessibleReason string `xml:"inaccessibleReason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMountInfo"] = reflect.TypeOf((*HostMountInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Lun []HostMultipathInfoLogicalUnit `xml:"lun,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathInfo"] = reflect.TypeOf((*HostMultipathInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathInfoFixedLogicalUnitPolicy struct {
0000000000000000000000000000000000000000;;		HostMultipathInfoLogicalUnitPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Prefer string `xml:"prefer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathInfoFixedLogicalUnitPolicy"] = reflect.TypeOf((*HostMultipathInfoFixedLogicalUnitPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathInfoLogicalUnit struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                    string                                              `xml:"key"`
0000000000000000000000000000000000000000;;		Id                     string                                              `xml:"id"`
0000000000000000000000000000000000000000;;		Lun                    string                                              `xml:"lun"`
0000000000000000000000000000000000000000;;		Path                   []HostMultipathInfoPath                             `xml:"path"`
0000000000000000000000000000000000000000;;		Policy                 BaseHostMultipathInfoLogicalUnitPolicy              `xml:"policy,typeattr"`
0000000000000000000000000000000000000000;;		StorageArrayTypePolicy *HostMultipathInfoLogicalUnitStorageArrayTypePolicy `xml:"storageArrayTypePolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathInfoLogicalUnit"] = reflect.TypeOf((*HostMultipathInfoLogicalUnit)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathInfoLogicalUnitPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Policy string `xml:"policy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathInfoLogicalUnitPolicy"] = reflect.TypeOf((*HostMultipathInfoLogicalUnitPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathInfoLogicalUnitStorageArrayTypePolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Policy string `xml:"policy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathInfoLogicalUnitStorageArrayTypePolicy"] = reflect.TypeOf((*HostMultipathInfoLogicalUnitStorageArrayTypePolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathInfoPath struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string                  `xml:"key"`
0000000000000000000000000000000000000000;;		Name          string                  `xml:"name"`
0000000000000000000000000000000000000000;;		PathState     string                  `xml:"pathState"`
0000000000000000000000000000000000000000;;		State         string                  `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		IsWorkingPath *bool                   `xml:"isWorkingPath"`
0000000000000000000000000000000000000000;;		Adapter       string                  `xml:"adapter"`
0000000000000000000000000000000000000000;;		Lun           string                  `xml:"lun"`
0000000000000000000000000000000000000000;;		Transport     BaseHostTargetTransport `xml:"transport,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathInfoPath"] = reflect.TypeOf((*HostMultipathInfoPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathStateInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path []HostMultipathStateInfoPath `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathStateInfo"] = reflect.TypeOf((*HostMultipathStateInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMultipathStateInfoPath struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string `xml:"name"`
0000000000000000000000000000000000000000;;		PathState string `xml:"pathState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMultipathStateInfoPath"] = reflect.TypeOf((*HostMultipathStateInfoPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNasVolume struct {
0000000000000000000000000000000000000000;;		HostFileSystemVolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoteHost       string   `xml:"remoteHost"`
0000000000000000000000000000000000000000;;		RemotePath       string   `xml:"remotePath"`
0000000000000000000000000000000000000000;;		UserName         string   `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		RemoteHostNames  []string `xml:"remoteHostNames,omitempty"`
0000000000000000000000000000000000000000;;		SecurityType     string   `xml:"securityType,omitempty"`
0000000000000000000000000000000000000000;;		ProtocolEndpoint *bool    `xml:"protocolEndpoint"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNasVolume"] = reflect.TypeOf((*HostNasVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNasVolumeConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string             `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Spec            *HostNasVolumeSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNasVolumeConfig"] = reflect.TypeOf((*HostNasVolumeConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNasVolumeSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoteHost      string   `xml:"remoteHost"`
0000000000000000000000000000000000000000;;		RemotePath      string   `xml:"remotePath"`
0000000000000000000000000000000000000000;;		LocalPath       string   `xml:"localPath"`
0000000000000000000000000000000000000000;;		AccessMode      string   `xml:"accessMode"`
0000000000000000000000000000000000000000;;		Type            string   `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		UserName        string   `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		Password        string   `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;		RemoteHostNames []string `xml:"remoteHostNames,omitempty"`
0000000000000000000000000000000000000000;;		SecurityType    string   `xml:"securityType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNasVolumeSpec"] = reflect.TypeOf((*HostNasVolumeSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNasVolumeUserInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		User string `xml:"user"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNasVolumeUserInfo"] = reflect.TypeOf((*HostNasVolumeUserInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNatService struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key  string             `xml:"key"`
0000000000000000000000000000000000000000;;		Spec HostNatServiceSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNatService"] = reflect.TypeOf((*HostNatService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNatServiceConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string             `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Key             string             `xml:"key"`
0000000000000000000000000000000000000000;;		Spec            HostNatServiceSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNatServiceConfig"] = reflect.TypeOf((*HostNatServiceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNatServiceNameServiceSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DnsAutoDetect bool     `xml:"dnsAutoDetect"`
0000000000000000000000000000000000000000;;		DnsPolicy     string   `xml:"dnsPolicy"`
0000000000000000000000000000000000000000;;		DnsRetries    int32    `xml:"dnsRetries"`
0000000000000000000000000000000000000000;;		DnsTimeout    int32    `xml:"dnsTimeout"`
0000000000000000000000000000000000000000;;		DnsNameServer []string `xml:"dnsNameServer,omitempty"`
0000000000000000000000000000000000000000;;		NbdsTimeout   int32    `xml:"nbdsTimeout"`
0000000000000000000000000000000000000000;;		NbnsRetries   int32    `xml:"nbnsRetries"`
0000000000000000000000000000000000000000;;		NbnsTimeout   int32    `xml:"nbnsTimeout"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNatServiceNameServiceSpec"] = reflect.TypeOf((*HostNatServiceNameServiceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNatServicePortForwardSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type           string `xml:"type"`
0000000000000000000000000000000000000000;;		Name           string `xml:"name"`
0000000000000000000000000000000000000000;;		HostPort       int32  `xml:"hostPort"`
0000000000000000000000000000000000000000;;		GuestPort      int32  `xml:"guestPort"`
0000000000000000000000000000000000000000;;		GuestIpAddress string `xml:"guestIpAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNatServicePortForwardSpec"] = reflect.TypeOf((*HostNatServicePortForwardSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNatServiceSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VirtualSwitch    string                          `xml:"virtualSwitch"`
0000000000000000000000000000000000000000;;		ActiveFtp        bool                            `xml:"activeFtp"`
0000000000000000000000000000000000000000;;		AllowAnyOui      bool                            `xml:"allowAnyOui"`
0000000000000000000000000000000000000000;;		ConfigPort       bool                            `xml:"configPort"`
0000000000000000000000000000000000000000;;		IpGatewayAddress string                          `xml:"ipGatewayAddress"`
0000000000000000000000000000000000000000;;		UdpTimeout       int32                           `xml:"udpTimeout"`
0000000000000000000000000000000000000000;;		PortForward      []HostNatServicePortForwardSpec `xml:"portForward,omitempty"`
0000000000000000000000000000000000000000;;		NameService      *HostNatServiceNameServiceSpec  `xml:"nameService,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNatServiceSpec"] = reflect.TypeOf((*HostNatServiceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CanSetPhysicalNicLinkSpeed bool     `xml:"canSetPhysicalNicLinkSpeed"`
0000000000000000000000000000000000000000;;		SupportsNicTeaming         bool     `xml:"supportsNicTeaming"`
0000000000000000000000000000000000000000;;		NicTeamingPolicy           []string `xml:"nicTeamingPolicy,omitempty"`
0000000000000000000000000000000000000000;;		SupportsVlan               bool     `xml:"supportsVlan"`
0000000000000000000000000000000000000000;;		UsesServiceConsoleNic      bool     `xml:"usesServiceConsoleNic"`
0000000000000000000000000000000000000000;;		SupportsNetworkHints       bool     `xml:"supportsNetworkHints"`
0000000000000000000000000000000000000000;;		MaxPortGroupsPerVswitch    int32    `xml:"maxPortGroupsPerVswitch,omitempty"`
0000000000000000000000000000000000000000;;		VswitchConfigSupported     bool     `xml:"vswitchConfigSupported"`
0000000000000000000000000000000000000000;;		VnicConfigSupported        bool     `xml:"vnicConfigSupported"`
0000000000000000000000000000000000000000;;		IpRouteConfigSupported     bool     `xml:"ipRouteConfigSupported"`
0000000000000000000000000000000000000000;;		DnsConfigSupported         bool     `xml:"dnsConfigSupported"`
0000000000000000000000000000000000000000;;		DhcpOnVnicSupported        bool     `xml:"dhcpOnVnicSupported"`
0000000000000000000000000000000000000000;;		IpV6Supported              *bool    `xml:"ipV6Supported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetCapabilities"] = reflect.TypeOf((*HostNetCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetOffloadCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CsumOffload     *bool `xml:"csumOffload"`
0000000000000000000000000000000000000000;;		TcpSegmentation *bool `xml:"tcpSegmentation"`
0000000000000000000000000000000000000000;;		ZeroCopyXmit    *bool `xml:"zeroCopyXmit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetOffloadCapabilities"] = reflect.TypeOf((*HostNetOffloadCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetStackInstance struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                             string                  `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Name                            string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		DnsConfig                       BaseHostDnsConfig       `xml:"dnsConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		IpRouteConfig                   BaseHostIpRouteConfig   `xml:"ipRouteConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		RequestedMaxNumberOfConnections int32                   `xml:"requestedMaxNumberOfConnections,omitempty"`
0000000000000000000000000000000000000000;;		CongestionControlAlgorithm      string                  `xml:"congestionControlAlgorithm,omitempty"`
0000000000000000000000000000000000000000;;		IpV6Enabled                     *bool                   `xml:"ipV6Enabled"`
0000000000000000000000000000000000000000;;		RouteTableConfig                *HostIpRouteTableConfig `xml:"routeTableConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetStackInstance"] = reflect.TypeOf((*HostNetStackInstance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vswitch              []HostVirtualSwitchConfig       `xml:"vswitch,omitempty"`
0000000000000000000000000000000000000000;;		ProxySwitch          []HostProxySwitchConfig         `xml:"proxySwitch,omitempty"`
0000000000000000000000000000000000000000;;		Portgroup            []HostPortGroupConfig           `xml:"portgroup,omitempty"`
0000000000000000000000000000000000000000;;		Pnic                 []PhysicalNicConfig             `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		Vnic                 []HostVirtualNicConfig          `xml:"vnic,omitempty"`
0000000000000000000000000000000000000000;;		ConsoleVnic          []HostVirtualNicConfig          `xml:"consoleVnic,omitempty"`
0000000000000000000000000000000000000000;;		DnsConfig            BaseHostDnsConfig               `xml:"dnsConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		IpRouteConfig        BaseHostIpRouteConfig           `xml:"ipRouteConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ConsoleIpRouteConfig BaseHostIpRouteConfig           `xml:"consoleIpRouteConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		RouteTableConfig     *HostIpRouteTableConfig         `xml:"routeTableConfig,omitempty"`
0000000000000000000000000000000000000000;;		Dhcp                 []HostDhcpServiceConfig         `xml:"dhcp,omitempty"`
0000000000000000000000000000000000000000;;		Nat                  []HostNatServiceConfig          `xml:"nat,omitempty"`
0000000000000000000000000000000000000000;;		IpV6Enabled          *bool                           `xml:"ipV6Enabled"`
0000000000000000000000000000000000000000;;		NetStackSpec         []HostNetworkConfigNetStackSpec `xml:"netStackSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkConfig"] = reflect.TypeOf((*HostNetworkConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkConfigNetStackSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetStackInstance HostNetStackInstance `xml:"netStackInstance"`
0000000000000000000000000000000000000000;;		Operation        string               `xml:"operation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkConfigNetStackSpec"] = reflect.TypeOf((*HostNetworkConfigNetStackSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkConfigResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice        []string `xml:"vnicDevice,omitempty"`
0000000000000000000000000000000000000000;;		ConsoleVnicDevice []string `xml:"consoleVnicDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkConfigResult"] = reflect.TypeOf((*HostNetworkConfigResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vswitch              []HostVirtualSwitch     `xml:"vswitch,omitempty"`
0000000000000000000000000000000000000000;;		ProxySwitch          []HostProxySwitch       `xml:"proxySwitch,omitempty"`
0000000000000000000000000000000000000000;;		Portgroup            []HostPortGroup         `xml:"portgroup,omitempty"`
0000000000000000000000000000000000000000;;		Pnic                 []PhysicalNic           `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		Vnic                 []HostVirtualNic        `xml:"vnic,omitempty"`
0000000000000000000000000000000000000000;;		ConsoleVnic          []HostVirtualNic        `xml:"consoleVnic,omitempty"`
0000000000000000000000000000000000000000;;		DnsConfig            BaseHostDnsConfig       `xml:"dnsConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		IpRouteConfig        BaseHostIpRouteConfig   `xml:"ipRouteConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ConsoleIpRouteConfig BaseHostIpRouteConfig   `xml:"consoleIpRouteConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		RouteTableInfo       *HostIpRouteTableInfo   `xml:"routeTableInfo,omitempty"`
0000000000000000000000000000000000000000;;		Dhcp                 []HostDhcpService       `xml:"dhcp,omitempty"`
0000000000000000000000000000000000000000;;		Nat                  []HostNatService        `xml:"nat,omitempty"`
0000000000000000000000000000000000000000;;		IpV6Enabled          *bool                   `xml:"ipV6Enabled"`
0000000000000000000000000000000000000000;;		AtBootIpV6Enabled    *bool                   `xml:"atBootIpV6Enabled"`
0000000000000000000000000000000000000000;;		NetStackInstance     []HostNetStackInstance  `xml:"netStackInstance,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueSwitch         []HostOpaqueSwitch      `xml:"opaqueSwitch,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueNetwork        []HostOpaqueNetworkInfo `xml:"opaqueNetwork,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkInfo"] = reflect.TypeOf((*HostNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Security      *HostNetworkSecurityPolicy       `xml:"security,omitempty"`
0000000000000000000000000000000000000000;;		NicTeaming    *HostNicTeamingPolicy            `xml:"nicTeaming,omitempty"`
0000000000000000000000000000000000000000;;		OffloadPolicy *HostNetOffloadCapabilities      `xml:"offloadPolicy,omitempty"`
0000000000000000000000000000000000000000;;		ShapingPolicy *HostNetworkTrafficShapingPolicy `xml:"shapingPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkPolicy"] = reflect.TypeOf((*HostNetworkPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkResourceRuntime struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PnicResourceInfo []HostPnicNetworkResourceInfo `xml:"pnicResourceInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkResourceRuntime"] = reflect.TypeOf((*HostNetworkResourceRuntime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkSecurityPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowPromiscuous *bool `xml:"allowPromiscuous"`
0000000000000000000000000000000000000000;;		MacChanges       *bool `xml:"macChanges"`
0000000000000000000000000000000000000000;;		ForgedTransmits  *bool `xml:"forgedTransmits"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkSecurityPolicy"] = reflect.TypeOf((*HostNetworkSecurityPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkTrafficShapingPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled          *bool `xml:"enabled"`
0000000000000000000000000000000000000000;;		AverageBandwidth int64 `xml:"averageBandwidth,omitempty"`
0000000000000000000000000000000000000000;;		PeakBandwidth    int64 `xml:"peakBandwidth,omitempty"`
0000000000000000000000000000000000000000;;		BurstSize        int64 `xml:"burstSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkTrafficShapingPolicy"] = reflect.TypeOf((*HostNetworkTrafficShapingPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNewNetworkConnectInfo struct {
0000000000000000000000000000000000000000;;		HostConnectInfoNetworkInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNewNetworkConnectInfo"] = reflect.TypeOf((*HostNewNetworkConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNicFailureCriteria struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CheckSpeed        string `xml:"checkSpeed,omitempty"`
0000000000000000000000000000000000000000;;		Speed             int32  `xml:"speed,omitempty"`
0000000000000000000000000000000000000000;;		CheckDuplex       *bool  `xml:"checkDuplex"`
0000000000000000000000000000000000000000;;		FullDuplex        *bool  `xml:"fullDuplex"`
0000000000000000000000000000000000000000;;		CheckErrorPercent *bool  `xml:"checkErrorPercent"`
0000000000000000000000000000000000000000;;		Percentage        int32  `xml:"percentage,omitempty"`
0000000000000000000000000000000000000000;;		CheckBeacon       *bool  `xml:"checkBeacon"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNicFailureCriteria"] = reflect.TypeOf((*HostNicFailureCriteria)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNicOrderPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActiveNic  []string `xml:"activeNic,omitempty"`
0000000000000000000000000000000000000000;;		StandbyNic []string `xml:"standbyNic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNicOrderPolicy"] = reflect.TypeOf((*HostNicOrderPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNicTeamingPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Policy          string                  `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;		ReversePolicy   *bool                   `xml:"reversePolicy"`
0000000000000000000000000000000000000000;;		NotifySwitches  *bool                   `xml:"notifySwitches"`
0000000000000000000000000000000000000000;;		RollingOrder    *bool                   `xml:"rollingOrder"`
0000000000000000000000000000000000000000;;		FailureCriteria *HostNicFailureCriteria `xml:"failureCriteria,omitempty"`
0000000000000000000000000000000000000000;;		NicOrder        *HostNicOrderPolicy     `xml:"nicOrder,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNicTeamingPolicy"] = reflect.TypeOf((*HostNicTeamingPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNoAvailableNetworksEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ips string `xml:"ips,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNoAvailableNetworksEvent"] = reflect.TypeOf((*HostNoAvailableNetworksEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNoHAEnabledPortGroupsEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNoHAEnabledPortGroupsEvent"] = reflect.TypeOf((*HostNoHAEnabledPortGroupsEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNoRedundantManagementNetworkEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNoRedundantManagementNetworkEvent"] = reflect.TypeOf((*HostNoRedundantManagementNetworkEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNonCompliantEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNonCompliantEvent"] = reflect.TypeOf((*HostNonCompliantEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNotConnected struct {
0000000000000000000000000000000000000000;;		HostCommunication
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNotConnected"] = reflect.TypeOf((*HostNotConnected)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNotConnectedFault HostNotConnected
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNotConnectedFault"] = reflect.TypeOf((*HostNotConnectedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNotInClusterEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNotInClusterEvent"] = reflect.TypeOf((*HostNotInClusterEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNotReachable struct {
0000000000000000000000000000000000000000;;		HostCommunication
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNotReachable"] = reflect.TypeOf((*HostNotReachable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNotReachableFault HostNotReachable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNotReachableFault"] = reflect.TypeOf((*HostNotReachableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNtpConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Server     []string `xml:"server,omitempty"`
0000000000000000000000000000000000000000;;		ConfigFile []string `xml:"configFile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNtpConfig"] = reflect.TypeOf((*HostNtpConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNumaInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type     string         `xml:"type"`
0000000000000000000000000000000000000000;;		NumNodes int32          `xml:"numNodes"`
0000000000000000000000000000000000000000;;		NumaNode []HostNumaNode `xml:"numaNode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNumaInfo"] = reflect.TypeOf((*HostNumaInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNumaNode struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TypeId            byte    `xml:"typeId"`
0000000000000000000000000000000000000000;;		CpuID             []int16 `xml:"cpuID"`
0000000000000000000000000000000000000000;;		MemoryRangeBegin  int64   `xml:"memoryRangeBegin"`
0000000000000000000000000000000000000000;;		MemoryRangeLength int64   `xml:"memoryRangeLength"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNumaNode"] = reflect.TypeOf((*HostNumaNode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNumericSensorInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name           string                 `xml:"name"`
0000000000000000000000000000000000000000;;		HealthState    BaseElementDescription `xml:"healthState,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		CurrentReading int64                  `xml:"currentReading"`
0000000000000000000000000000000000000000;;		UnitModifier   int32                  `xml:"unitModifier"`
0000000000000000000000000000000000000000;;		BaseUnits      string                 `xml:"baseUnits"`
0000000000000000000000000000000000000000;;		RateUnits      string                 `xml:"rateUnits,omitempty"`
0000000000000000000000000000000000000000;;		SensorType     string                 `xml:"sensorType"`
0000000000000000000000000000000000000000;;		Id             string                 `xml:"id,omitempty"`
0000000000000000000000000000000000000000;;		TimeStamp      string                 `xml:"timeStamp,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNumericSensorInfo"] = reflect.TypeOf((*HostNumericSensorInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostOpaqueNetworkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpaqueNetworkId   string                   `xml:"opaqueNetworkId"`
0000000000000000000000000000000000000000;;		OpaqueNetworkName string                   `xml:"opaqueNetworkName"`
0000000000000000000000000000000000000000;;		OpaqueNetworkType string                   `xml:"opaqueNetworkType"`
0000000000000000000000000000000000000000;;		PnicZone          []string                 `xml:"pnicZone,omitempty"`
0000000000000000000000000000000000000000;;		Capability        *OpaqueNetworkCapability `xml:"capability,omitempty"`
0000000000000000000000000000000000000000;;		ExtraConfig       []BaseOptionValue        `xml:"extraConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostOpaqueNetworkInfo"] = reflect.TypeOf((*HostOpaqueNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostOpaqueSwitch struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string                            `xml:"key"`
0000000000000000000000000000000000000000;;		Name        string                            `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Pnic        []string                          `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		PnicZone    []HostOpaqueSwitchPhysicalNicZone `xml:"pnicZone,omitempty"`
0000000000000000000000000000000000000000;;		Status      string                            `xml:"status,omitempty"`
0000000000000000000000000000000000000000;;		Vtep        []HostVirtualNic                  `xml:"vtep,omitempty"`
0000000000000000000000000000000000000000;;		ExtraConfig []BaseOptionValue                 `xml:"extraConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostOpaqueSwitch"] = reflect.TypeOf((*HostOpaqueSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostOpaqueSwitchPhysicalNicZone struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key        string   `xml:"key"`
0000000000000000000000000000000000000000;;		PnicDevice []string `xml:"pnicDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostOpaqueSwitchPhysicalNicZone"] = reflect.TypeOf((*HostOpaqueSwitchPhysicalNicZone)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostOvercommittedEvent struct {
0000000000000000000000000000000000000000;;		ClusterOvercommittedEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostOvercommittedEvent"] = reflect.TypeOf((*HostOvercommittedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostParallelScsiHba struct {
0000000000000000000000000000000000000000;;		HostHostBusAdapter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostParallelScsiHba"] = reflect.TypeOf((*HostParallelScsiHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostParallelScsiTargetTransport struct {
0000000000000000000000000000000000000000;;		HostTargetTransport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostParallelScsiTargetTransport"] = reflect.TypeOf((*HostParallelScsiTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPatchManagerLocator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url   string `xml:"url"`
0000000000000000000000000000000000000000;;		Proxy string `xml:"proxy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPatchManagerLocator"] = reflect.TypeOf((*HostPatchManagerLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPatchManagerPatchManagerOperationSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Proxy     string `xml:"proxy,omitempty"`
0000000000000000000000000000000000000000;;		Port      int32  `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		UserName  string `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		Password  string `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;		CmdOption string `xml:"cmdOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPatchManagerPatchManagerOperationSpec"] = reflect.TypeOf((*HostPatchManagerPatchManagerOperationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPatchManagerResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version   string                   `xml:"version"`
0000000000000000000000000000000000000000;;		Status    []HostPatchManagerStatus `xml:"status,omitempty"`
0000000000000000000000000000000000000000;;		XmlResult string                   `xml:"xmlResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPatchManagerResult"] = reflect.TypeOf((*HostPatchManagerResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPatchManagerStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id                 string                                    `xml:"id"`
0000000000000000000000000000000000000000;;		Applicable         bool                                      `xml:"applicable"`
0000000000000000000000000000000000000000;;		Reason             []string                                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		Integrity          string                                    `xml:"integrity,omitempty"`
0000000000000000000000000000000000000000;;		Installed          bool                                      `xml:"installed"`
0000000000000000000000000000000000000000;;		InstallState       []string                                  `xml:"installState,omitempty"`
0000000000000000000000000000000000000000;;		PrerequisitePatch  []HostPatchManagerStatusPrerequisitePatch `xml:"prerequisitePatch,omitempty"`
0000000000000000000000000000000000000000;;		RestartRequired    bool                                      `xml:"restartRequired"`
0000000000000000000000000000000000000000;;		ReconnectRequired  bool                                      `xml:"reconnectRequired"`
0000000000000000000000000000000000000000;;		VmOffRequired      bool                                      `xml:"vmOffRequired"`
0000000000000000000000000000000000000000;;		SupersededPatchIds []string                                  `xml:"supersededPatchIds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPatchManagerStatus"] = reflect.TypeOf((*HostPatchManagerStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPatchManagerStatusPrerequisitePatch struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id           string   `xml:"id"`
0000000000000000000000000000000000000000;;		InstallState []string `xml:"installState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPatchManagerStatusPrerequisitePatch"] = reflect.TypeOf((*HostPatchManagerStatusPrerequisitePatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPathSelectionPolicyOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Policy BaseElementDescription `xml:"policy,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPathSelectionPolicyOption"] = reflect.TypeOf((*HostPathSelectionPolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPciDevice struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id           string `xml:"id"`
0000000000000000000000000000000000000000;;		ClassId      int16  `xml:"classId"`
0000000000000000000000000000000000000000;;		Bus          byte   `xml:"bus"`
0000000000000000000000000000000000000000;;		Slot         byte   `xml:"slot"`
0000000000000000000000000000000000000000;;		Function     byte   `xml:"function"`
0000000000000000000000000000000000000000;;		VendorId     int16  `xml:"vendorId"`
0000000000000000000000000000000000000000;;		SubVendorId  int16  `xml:"subVendorId"`
0000000000000000000000000000000000000000;;		VendorName   string `xml:"vendorName"`
0000000000000000000000000000000000000000;;		DeviceId     int16  `xml:"deviceId"`
0000000000000000000000000000000000000000;;		SubDeviceId  int16  `xml:"subDeviceId"`
0000000000000000000000000000000000000000;;		ParentBridge string `xml:"parentBridge,omitempty"`
0000000000000000000000000000000000000000;;		DeviceName   string `xml:"deviceName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPciDevice"] = reflect.TypeOf((*HostPciDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPciPassthruConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id              string `xml:"id"`
0000000000000000000000000000000000000000;;		PassthruEnabled bool   `xml:"passthruEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPciPassthruConfig"] = reflect.TypeOf((*HostPciPassthruConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPciPassthruInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id              string `xml:"id"`
0000000000000000000000000000000000000000;;		DependentDevice string `xml:"dependentDevice"`
0000000000000000000000000000000000000000;;		PassthruEnabled bool   `xml:"passthruEnabled"`
0000000000000000000000000000000000000000;;		PassthruCapable bool   `xml:"passthruCapable"`
0000000000000000000000000000000000000000;;		PassthruActive  bool   `xml:"passthruActive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPciPassthruInfo"] = reflect.TypeOf((*HostPciPassthruInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlacedVirtualNicIdentifier struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm          ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VnicKey     string                 `xml:"vnicKey"`
0000000000000000000000000000000000000000;;		Reservation int32                  `xml:"reservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlacedVirtualNicIdentifier"] = reflect.TypeOf((*HostPlacedVirtualNicIdentifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlugStoreTopology struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Adapter []HostPlugStoreTopologyAdapter `xml:"adapter,omitempty"`
0000000000000000000000000000000000000000;;		Path    []HostPlugStoreTopologyPath    `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;		Target  []HostPlugStoreTopologyTarget  `xml:"target,omitempty"`
0000000000000000000000000000000000000000;;		Device  []HostPlugStoreTopologyDevice  `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;		Plugin  []HostPlugStoreTopologyPlugin  `xml:"plugin,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlugStoreTopology"] = reflect.TypeOf((*HostPlugStoreTopology)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlugStoreTopologyAdapter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key     string   `xml:"key"`
0000000000000000000000000000000000000000;;		Adapter string   `xml:"adapter"`
0000000000000000000000000000000000000000;;		Path    []string `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlugStoreTopologyAdapter"] = reflect.TypeOf((*HostPlugStoreTopologyAdapter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlugStoreTopologyDevice struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key  string   `xml:"key"`
0000000000000000000000000000000000000000;;		Lun  string   `xml:"lun"`
0000000000000000000000000000000000000000;;		Path []string `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlugStoreTopologyDevice"] = reflect.TypeOf((*HostPlugStoreTopologyDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlugStoreTopologyPath struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string `xml:"key"`
0000000000000000000000000000000000000000;;		Name          string `xml:"name"`
0000000000000000000000000000000000000000;;		ChannelNumber int32  `xml:"channelNumber,omitempty"`
0000000000000000000000000000000000000000;;		TargetNumber  int32  `xml:"targetNumber,omitempty"`
0000000000000000000000000000000000000000;;		LunNumber     int32  `xml:"lunNumber,omitempty"`
0000000000000000000000000000000000000000;;		Adapter       string `xml:"adapter,omitempty"`
0000000000000000000000000000000000000000;;		Target        string `xml:"target,omitempty"`
0000000000000000000000000000000000000000;;		Device        string `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlugStoreTopologyPath"] = reflect.TypeOf((*HostPlugStoreTopologyPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlugStoreTopologyPlugin struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string   `xml:"key"`
0000000000000000000000000000000000000000;;		Name        string   `xml:"name"`
0000000000000000000000000000000000000000;;		Device      []string `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;		ClaimedPath []string `xml:"claimedPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlugStoreTopologyPlugin"] = reflect.TypeOf((*HostPlugStoreTopologyPlugin)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPlugStoreTopologyTarget struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key       string                  `xml:"key"`
0000000000000000000000000000000000000000;;		Transport BaseHostTargetTransport `xml:"transport,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPlugStoreTopologyTarget"] = reflect.TypeOf((*HostPlugStoreTopologyTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPnicNetworkResourceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PnicDevice                     string                           `xml:"pnicDevice"`
0000000000000000000000000000000000000000;;		AvailableBandwidthForVMTraffic int64                            `xml:"availableBandwidthForVMTraffic,omitempty"`
0000000000000000000000000000000000000000;;		UnusedBandwidthForVMTraffic    int64                            `xml:"unusedBandwidthForVMTraffic,omitempty"`
0000000000000000000000000000000000000000;;		PlacedVirtualNics              []HostPlacedVirtualNicIdentifier `xml:"placedVirtualNics,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPnicNetworkResourceInfo"] = reflect.TypeOf((*HostPnicNetworkResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPortGroup struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            string              `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Port           []HostPortGroupPort `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		Vswitch        string              `xml:"vswitch,omitempty"`
0000000000000000000000000000000000000000;;		ComputedPolicy HostNetworkPolicy   `xml:"computedPolicy"`
0000000000000000000000000000000000000000;;		Spec           HostPortGroupSpec   `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPortGroup"] = reflect.TypeOf((*HostPortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPortGroupConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string             `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Spec            *HostPortGroupSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPortGroupConfig"] = reflect.TypeOf((*HostPortGroupConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPortGroupPort struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key  string   `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Mac  []string `xml:"mac,omitempty"`
0000000000000000000000000000000000000000;;		Type string   `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPortGroupPort"] = reflect.TypeOf((*HostPortGroupPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPortGroupProfile struct {
0000000000000000000000000000000000000000;;		PortGroupProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpConfig IpAddressProfile `xml:"ipConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPortGroupProfile"] = reflect.TypeOf((*HostPortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPortGroupSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name        string            `xml:"name"`
0000000000000000000000000000000000000000;;		VlanId      int32             `xml:"vlanId"`
0000000000000000000000000000000000000000;;		VswitchName string            `xml:"vswitchName"`
0000000000000000000000000000000000000000;;		Policy      HostNetworkPolicy `xml:"policy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPortGroupSpec"] = reflect.TypeOf((*HostPortGroupSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPosixAccountSpec struct {
0000000000000000000000000000000000000000;;		HostAccountSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PosixId     int32 `xml:"posixId,omitempty"`
0000000000000000000000000000000000000000;;		ShellAccess *bool `xml:"shellAccess"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPosixAccountSpec"] = reflect.TypeOf((*HostPosixAccountSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPowerOpFailed struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPowerOpFailed"] = reflect.TypeOf((*HostPowerOpFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPowerOpFailedFault BaseHostPowerOpFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPowerOpFailedFault"] = reflect.TypeOf((*HostPowerOpFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPowerPolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         int32  `xml:"key"`
0000000000000000000000000000000000000000;;		Name        string `xml:"name"`
0000000000000000000000000000000000000000;;		ShortName   string `xml:"shortName"`
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPowerPolicy"] = reflect.TypeOf((*HostPowerPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPrimaryAgentNotShortNameEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrimaryAgent string `xml:"primaryAgent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPrimaryAgentNotShortNameEvent"] = reflect.TypeOf((*HostPrimaryAgentNotShortNameEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileAppliedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile ProfileEventArgument `xml:"profile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileAppliedEvent"] = reflect.TypeOf((*HostProfileAppliedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileCompleteConfigSpec struct {
0000000000000000000000000000000000000000;;		HostProfileConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ApplyProfile                  *HostApplyProfile       `xml:"applyProfile,omitempty"`
0000000000000000000000000000000000000000;;		CustomComplyProfile           *ComplianceProfile      `xml:"customComplyProfile,omitempty"`
0000000000000000000000000000000000000000;;		DisabledExpressionListChanged bool                    `xml:"disabledExpressionListChanged"`
0000000000000000000000000000000000000000;;		DisabledExpressionList        []string                `xml:"disabledExpressionList,omitempty"`
0000000000000000000000000000000000000000;;		ValidatorHost                 *ManagedObjectReference `xml:"validatorHost,omitempty"`
0000000000000000000000000000000000000000;;		Validating                    *bool                   `xml:"validating"`
0000000000000000000000000000000000000000;;		HostConfig                    *HostProfileConfigInfo  `xml:"hostConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileCompleteConfigSpec"] = reflect.TypeOf((*HostProfileCompleteConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileConfigInfo struct {
0000000000000000000000000000000000000000;;		ProfileConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ApplyProfile           *HostApplyProfile   `xml:"applyProfile,omitempty"`
0000000000000000000000000000000000000000;;		DefaultComplyProfile   *ComplianceProfile  `xml:"defaultComplyProfile,omitempty"`
0000000000000000000000000000000000000000;;		DefaultComplyLocator   []ComplianceLocator `xml:"defaultComplyLocator,omitempty"`
0000000000000000000000000000000000000000;;		CustomComplyProfile    *ComplianceProfile  `xml:"customComplyProfile,omitempty"`
0000000000000000000000000000000000000000;;		DisabledExpressionList []string            `xml:"disabledExpressionList,omitempty"`
0000000000000000000000000000000000000000;;		Description            *ProfileDescription `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileConfigInfo"] = reflect.TypeOf((*HostProfileConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileConfigSpec struct {
0000000000000000000000000000000000000000;;		ProfileCreateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileConfigSpec"] = reflect.TypeOf((*HostProfileConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileHostBasedConfigSpec struct {
0000000000000000000000000000000000000000;;		HostProfileConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host                 ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		UseHostProfileEngine *bool                  `xml:"useHostProfileEngine"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileHostBasedConfigSpec"] = reflect.TypeOf((*HostProfileHostBasedConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileManagerCompositionValidationResultResultElement struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Target                  ManagedObjectReference `xml:"target"`
0000000000000000000000000000000000000000;;		Status                  string                 `xml:"status"`
0000000000000000000000000000000000000000;;		Errors                  []LocalizableMessage   `xml:"errors,omitempty"`
0000000000000000000000000000000000000000;;		SourceDiffForToBeMerged *HostApplyProfile      `xml:"sourceDiffForToBeMerged,omitempty"`
0000000000000000000000000000000000000000;;		TargetDiffForToBeMerged *HostApplyProfile      `xml:"targetDiffForToBeMerged,omitempty"`
0000000000000000000000000000000000000000;;		ToBeAdded               *HostApplyProfile      `xml:"toBeAdded,omitempty"`
0000000000000000000000000000000000000000;;		ToBeDeleted             *HostApplyProfile      `xml:"toBeDeleted,omitempty"`
0000000000000000000000000000000000000000;;		ToBeDisabled            *HostApplyProfile      `xml:"toBeDisabled,omitempty"`
0000000000000000000000000000000000000000;;		ToBeEnabled             *HostApplyProfile      `xml:"toBeEnabled,omitempty"`
0000000000000000000000000000000000000000;;		ToBeReenableCC          *HostApplyProfile      `xml:"toBeReenableCC,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileManagerCompositionValidationResultResultElement"] = reflect.TypeOf((*HostProfileManagerCompositionValidationResultResultElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileManagerConfigTaskList struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec          *HostConfigSpec      `xml:"configSpec,omitempty"`
0000000000000000000000000000000000000000;;		TaskDescription     []LocalizableMessage `xml:"taskDescription,omitempty"`
0000000000000000000000000000000000000000;;		TaskListRequirement []string             `xml:"taskListRequirement,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileManagerConfigTaskList"] = reflect.TypeOf((*HostProfileManagerConfigTaskList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileManagerHostToConfigSpecMap struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host       ManagedObjectReference   `xml:"host"`
0000000000000000000000000000000000000000;;		ConfigSpec BaseAnswerFileCreateSpec `xml:"configSpec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileManagerHostToConfigSpecMap"] = reflect.TypeOf((*HostProfileManagerHostToConfigSpecMap)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileSerializedHostProfileSpec struct {
0000000000000000000000000000000000000000;;		ProfileSerializedCreateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ValidatorHost *ManagedObjectReference `xml:"validatorHost,omitempty"`
0000000000000000000000000000000000000000;;		Validating    *bool                   `xml:"validating"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileSerializedHostProfileSpec"] = reflect.TypeOf((*HostProfileSerializedHostProfileSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfilesEntityCustomizations struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfilesEntityCustomizations"] = reflect.TypeOf((*HostProfilesEntityCustomizations)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProtocolEndpoint struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PeType            string                   `xml:"peType"`
0000000000000000000000000000000000000000;;		Type              string                   `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Uuid              string                   `xml:"uuid"`
0000000000000000000000000000000000000000;;		HostKey           []ManagedObjectReference `xml:"hostKey,omitempty"`
0000000000000000000000000000000000000000;;		StorageArray      string                   `xml:"storageArray,omitempty"`
0000000000000000000000000000000000000000;;		NfsServer         string                   `xml:"nfsServer,omitempty"`
0000000000000000000000000000000000000000;;		NfsDir            string                   `xml:"nfsDir,omitempty"`
0000000000000000000000000000000000000000;;		NfsServerScope    string                   `xml:"nfsServerScope,omitempty"`
0000000000000000000000000000000000000000;;		NfsServerMajor    string                   `xml:"nfsServerMajor,omitempty"`
0000000000000000000000000000000000000000;;		NfsServerAuthType string                   `xml:"nfsServerAuthType,omitempty"`
0000000000000000000000000000000000000000;;		NfsServerUser     string                   `xml:"nfsServerUser,omitempty"`
0000000000000000000000000000000000000000;;		DeviceId          string                   `xml:"deviceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProtocolEndpoint"] = reflect.TypeOf((*HostProtocolEndpoint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProxySwitch struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DvsUuid                     string                         `xml:"dvsUuid"`
0000000000000000000000000000000000000000;;		DvsName                     string                         `xml:"dvsName"`
0000000000000000000000000000000000000000;;		Key                         string                         `xml:"key"`
0000000000000000000000000000000000000000;;		NumPorts                    int32                          `xml:"numPorts"`
0000000000000000000000000000000000000000;;		ConfigNumPorts              int32                          `xml:"configNumPorts,omitempty"`
0000000000000000000000000000000000000000;;		NumPortsAvailable           int32                          `xml:"numPortsAvailable"`
0000000000000000000000000000000000000000;;		UplinkPort                  []KeyValue                     `xml:"uplinkPort,omitempty"`
0000000000000000000000000000000000000000;;		Mtu                         int32                          `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;		Pnic                        []string                       `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		Spec                        HostProxySwitchSpec            `xml:"spec"`
0000000000000000000000000000000000000000;;		HostLag                     []HostProxySwitchHostLagConfig `xml:"hostLag,omitempty"`
0000000000000000000000000000000000000000;;		NetworkReservationSupported *bool                          `xml:"networkReservationSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProxySwitch"] = reflect.TypeOf((*HostProxySwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProxySwitchConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string               `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Uuid            string               `xml:"uuid"`
0000000000000000000000000000000000000000;;		Spec            *HostProxySwitchSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProxySwitchConfig"] = reflect.TypeOf((*HostProxySwitchConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProxySwitchHostLagConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LagKey     string     `xml:"lagKey"`
0000000000000000000000000000000000000000;;		LagName    string     `xml:"lagName,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPort []KeyValue `xml:"uplinkPort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProxySwitchHostLagConfig"] = reflect.TypeOf((*HostProxySwitchHostLagConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProxySwitchSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Backing BaseDistributedVirtualSwitchHostMemberBacking `xml:"backing,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProxySwitchSpec"] = reflect.TypeOf((*HostProxySwitchSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostReconcileDatastoreInventoryRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostReconcileDatastoreInventoryRequestType"] = reflect.TypeOf((*HostReconcileDatastoreInventoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostReconcileDatastoreInventory_Task HostReconcileDatastoreInventoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostReconcileDatastoreInventory_Task"] = reflect.TypeOf((*HostReconcileDatastoreInventory_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostReconcileDatastoreInventory_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostReconnectionFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostReconnectionFailedEvent"] = reflect.TypeOf((*HostReconnectionFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRegisterDisk HostRegisterDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRegisterDisk"] = reflect.TypeOf((*HostRegisterDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRegisterDiskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Path string                 `xml:"path"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRegisterDiskRequestType"] = reflect.TypeOf((*HostRegisterDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRegisterDiskResponse struct {
0000000000000000000000000000000000000000;;		Returnval VStorageObject `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostReliableMemoryInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemorySize int64 `xml:"memorySize"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostReliableMemoryInfo"] = reflect.TypeOf((*HostReliableMemoryInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRelocateVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      VslmRelocateSpec       `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRelocateVStorageObjectRequestType"] = reflect.TypeOf((*HostRelocateVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRelocateVStorageObject_Task HostRelocateVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRelocateVStorageObject_Task"] = reflect.TypeOf((*HostRelocateVStorageObject_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRelocateVStorageObject_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRemoveVFlashResource HostRemoveVFlashResourceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRemoveVFlashResource"] = reflect.TypeOf((*HostRemoveVFlashResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRemoveVFlashResourceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRemoveVFlashResourceRequestType"] = reflect.TypeOf((*HostRemoveVFlashResourceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRemoveVFlashResourceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRemovedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRemovedEvent"] = reflect.TypeOf((*HostRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRenameVStorageObject HostRenameVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRenameVStorageObject"] = reflect.TypeOf((*HostRenameVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRenameVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Name      string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRenameVStorageObjectRequestType"] = reflect.TypeOf((*HostRenameVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRenameVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostResignatureRescanResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Rescan []HostVmfsRescanResult `xml:"rescan,omitempty"`
0000000000000000000000000000000000000000;;		Result ManagedObjectReference `xml:"result"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostResignatureRescanResult"] = reflect.TypeOf((*HostResignatureRescanResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRetrieveVStorageObject HostRetrieveVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRetrieveVStorageObject"] = reflect.TypeOf((*HostRetrieveVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRetrieveVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRetrieveVStorageObjectRequestType"] = reflect.TypeOf((*HostRetrieveVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRetrieveVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;		Returnval VStorageObject `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRetrieveVStorageObjectState HostRetrieveVStorageObjectStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRetrieveVStorageObjectState"] = reflect.TypeOf((*HostRetrieveVStorageObjectState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRetrieveVStorageObjectStateRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRetrieveVStorageObjectStateRequestType"] = reflect.TypeOf((*HostRetrieveVStorageObjectStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRetrieveVStorageObjectStateResponse struct {
0000000000000000000000000000000000000000;;		Returnval VStorageObjectStateInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConnectionState            HostSystemConnectionState                   `xml:"connectionState"`
0000000000000000000000000000000000000000;;		PowerState                 HostSystemPowerState                        `xml:"powerState"`
0000000000000000000000000000000000000000;;		StandbyMode                string                                      `xml:"standbyMode,omitempty"`
0000000000000000000000000000000000000000;;		InMaintenanceMode          bool                                        `xml:"inMaintenanceMode"`
0000000000000000000000000000000000000000;;		InQuarantineMode           *bool                                       `xml:"inQuarantineMode"`
0000000000000000000000000000000000000000;;		BootTime                   *time.Time                                  `xml:"bootTime"`
0000000000000000000000000000000000000000;;		HealthSystemRuntime        *HealthSystemRuntime                        `xml:"healthSystemRuntime,omitempty"`
0000000000000000000000000000000000000000;;		DasHostState               *ClusterDasFdmHostState                     `xml:"dasHostState,omitempty"`
0000000000000000000000000000000000000000;;		TpmPcrValues               []HostTpmDigestInfo                         `xml:"tpmPcrValues,omitempty"`
0000000000000000000000000000000000000000;;		VsanRuntimeInfo            *VsanHostRuntimeInfo                        `xml:"vsanRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		NetworkRuntimeInfo         *HostRuntimeInfoNetworkRuntimeInfo          `xml:"networkRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		VFlashResourceRuntimeInfo  *HostVFlashManagerVFlashResourceRunTimeInfo `xml:"vFlashResourceRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		HostMaxVirtualDiskCapacity int64                                       `xml:"hostMaxVirtualDiskCapacity,omitempty"`
0000000000000000000000000000000000000000;;		CryptoState                string                                      `xml:"cryptoState,omitempty"`
0000000000000000000000000000000000000000;;		CryptoKeyId                *CryptoKeyId                                `xml:"cryptoKeyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRuntimeInfo"] = reflect.TypeOf((*HostRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRuntimeInfoNetStackInstanceRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetStackInstanceKey    string   `xml:"netStackInstanceKey"`
0000000000000000000000000000000000000000;;		State                  string   `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		VmknicKeys             []string `xml:"vmknicKeys,omitempty"`
0000000000000000000000000000000000000000;;		MaxNumberOfConnections int32    `xml:"maxNumberOfConnections,omitempty"`
0000000000000000000000000000000000000000;;		CurrentIpV6Enabled     *bool    `xml:"currentIpV6Enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRuntimeInfoNetStackInstanceRuntimeInfo"] = reflect.TypeOf((*HostRuntimeInfoNetStackInstanceRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostRuntimeInfoNetworkRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetStackInstanceRuntimeInfo []HostRuntimeInfoNetStackInstanceRuntimeInfo `xml:"netStackInstanceRuntimeInfo,omitempty"`
0000000000000000000000000000000000000000;;		NetworkResourceRuntime      *HostNetworkResourceRuntime                  `xml:"networkResourceRuntime,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostRuntimeInfoNetworkRuntimeInfo"] = reflect.TypeOf((*HostRuntimeInfoNetworkRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScheduleReconcileDatastoreInventory HostScheduleReconcileDatastoreInventoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScheduleReconcileDatastoreInventory"] = reflect.TypeOf((*HostScheduleReconcileDatastoreInventory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScheduleReconcileDatastoreInventoryRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScheduleReconcileDatastoreInventoryRequestType"] = reflect.TypeOf((*HostScheduleReconcileDatastoreInventoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScheduleReconcileDatastoreInventoryResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScsiDisk struct {
0000000000000000000000000000000000000000;;		ScsiLun
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capacity              HostDiskDimensionsLba `xml:"capacity"`
0000000000000000000000000000000000000000;;		DevicePath            string                `xml:"devicePath"`
0000000000000000000000000000000000000000;;		Ssd                   *bool                 `xml:"ssd"`
0000000000000000000000000000000000000000;;		LocalDisk             *bool                 `xml:"localDisk"`
0000000000000000000000000000000000000000;;		PhysicalLocation      []string              `xml:"physicalLocation,omitempty"`
0000000000000000000000000000000000000000;;		EmulatedDIXDIFEnabled *bool                 `xml:"emulatedDIXDIFEnabled"`
0000000000000000000000000000000000000000;;		VsanDiskInfo          *VsanHostVsanDiskInfo `xml:"vsanDiskInfo,omitempty"`
0000000000000000000000000000000000000000;;		ScsiDiskType          string                `xml:"scsiDiskType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScsiDisk"] = reflect.TypeOf((*HostScsiDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScsiDiskPartition struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskName  string `xml:"diskName"`
0000000000000000000000000000000000000000;;		Partition int32  `xml:"partition"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScsiDiskPartition"] = reflect.TypeOf((*HostScsiDiskPartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScsiTopology struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Adapter []HostScsiTopologyInterface `xml:"adapter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScsiTopology"] = reflect.TypeOf((*HostScsiTopology)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScsiTopologyInterface struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key     string                   `xml:"key"`
0000000000000000000000000000000000000000;;		Adapter string                   `xml:"adapter"`
0000000000000000000000000000000000000000;;		Target  []HostScsiTopologyTarget `xml:"target,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScsiTopologyInterface"] = reflect.TypeOf((*HostScsiTopologyInterface)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScsiTopologyLun struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key     string `xml:"key"`
0000000000000000000000000000000000000000;;		Lun     int32  `xml:"lun"`
0000000000000000000000000000000000000000;;		ScsiLun string `xml:"scsiLun"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScsiTopologyLun"] = reflect.TypeOf((*HostScsiTopologyLun)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostScsiTopologyTarget struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key       string                  `xml:"key"`
0000000000000000000000000000000000000000;;		Target    int32                   `xml:"target"`
0000000000000000000000000000000000000000;;		Lun       []HostScsiTopologyLun   `xml:"lun,omitempty"`
0000000000000000000000000000000000000000;;		Transport BaseHostTargetTransport `xml:"transport,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostScsiTopologyTarget"] = reflect.TypeOf((*HostScsiTopologyTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSecuritySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AdminPassword    string       `xml:"adminPassword,omitempty"`
0000000000000000000000000000000000000000;;		RemovePermission []Permission `xml:"removePermission,omitempty"`
0000000000000000000000000000000000000000;;		AddPermission    []Permission `xml:"addPermission,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSecuritySpec"] = reflect.TypeOf((*HostSecuritySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSerialAttachedHba struct {
0000000000000000000000000000000000000000;;		HostHostBusAdapter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NodeWorldWideName string `xml:"nodeWorldWideName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSerialAttachedHba"] = reflect.TypeOf((*HostSerialAttachedHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSerialAttachedTargetTransport struct {
0000000000000000000000000000000000000000;;		HostTargetTransport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSerialAttachedTargetTransport"] = reflect.TypeOf((*HostSerialAttachedTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostService struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string                    `xml:"key"`
0000000000000000000000000000000000000000;;		Label         string                    `xml:"label"`
0000000000000000000000000000000000000000;;		Required      bool                      `xml:"required"`
0000000000000000000000000000000000000000;;		Uninstallable bool                      `xml:"uninstallable"`
0000000000000000000000000000000000000000;;		Running       bool                      `xml:"running"`
0000000000000000000000000000000000000000;;		Ruleset       []string                  `xml:"ruleset,omitempty"`
0000000000000000000000000000000000000000;;		Policy        string                    `xml:"policy"`
0000000000000000000000000000000000000000;;		SourcePackage *HostServiceSourcePackage `xml:"sourcePackage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostService"] = reflect.TypeOf((*HostService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostServiceConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceId     string `xml:"serviceId"`
0000000000000000000000000000000000000000;;		StartupPolicy string `xml:"startupPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostServiceConfig"] = reflect.TypeOf((*HostServiceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostServiceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Service []HostService `xml:"service,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostServiceInfo"] = reflect.TypeOf((*HostServiceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostServiceSourcePackage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourcePackageName string `xml:"sourcePackageName"`
0000000000000000000000000000000000000000;;		Description       string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostServiceSourcePackage"] = reflect.TypeOf((*HostServiceSourcePackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostServiceTicket struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host           string `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Port           int32  `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprint  string `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;		Service        string `xml:"service"`
0000000000000000000000000000000000000000;;		ServiceVersion string `xml:"serviceVersion"`
0000000000000000000000000000000000000000;;		SessionId      string `xml:"sessionId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostServiceTicket"] = reflect.TypeOf((*HostServiceTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostShortNameInconsistentEvent struct {
0000000000000000000000000000000000000000;;		HostDasEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ShortName  string `xml:"shortName"`
0000000000000000000000000000000000000000;;		ShortName2 string `xml:"shortName2"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostShortNameInconsistentEvent"] = reflect.TypeOf((*HostShortNameInconsistentEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostShortNameToIpFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ShortName string `xml:"shortName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostShortNameToIpFailedEvent"] = reflect.TypeOf((*HostShortNameToIpFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostShutdownEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostShutdownEvent"] = reflect.TypeOf((*HostShutdownEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSnmpConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled             *bool                 `xml:"enabled"`
0000000000000000000000000000000000000000;;		Port                int32                 `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		ReadOnlyCommunities []string              `xml:"readOnlyCommunities,omitempty"`
0000000000000000000000000000000000000000;;		TrapTargets         []HostSnmpDestination `xml:"trapTargets,omitempty"`
0000000000000000000000000000000000000000;;		Option              []KeyValue            `xml:"option,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSnmpConfigSpec"] = reflect.TypeOf((*HostSnmpConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSnmpDestination struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName  string `xml:"hostName"`
0000000000000000000000000000000000000000;;		Port      int32  `xml:"port"`
0000000000000000000000000000000000000000;;		Community string `xml:"community"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSnmpDestination"] = reflect.TypeOf((*HostSnmpDestination)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSnmpSystemAgentLimits struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxReadOnlyCommunities int32                   `xml:"maxReadOnlyCommunities"`
0000000000000000000000000000000000000000;;		MaxTrapDestinations    int32                   `xml:"maxTrapDestinations"`
0000000000000000000000000000000000000000;;		MaxCommunityLength     int32                   `xml:"maxCommunityLength"`
0000000000000000000000000000000000000000;;		MaxBufferSize          int32                   `xml:"maxBufferSize"`
0000000000000000000000000000000000000000;;		Capability             HostSnmpAgentCapability `xml:"capability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSnmpSystemAgentLimits"] = reflect.TypeOf((*HostSnmpSystemAgentLimits)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecGetUpdatedHosts HostSpecGetUpdatedHostsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSpecGetUpdatedHosts"] = reflect.TypeOf((*HostSpecGetUpdatedHosts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecGetUpdatedHostsRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		StartChangeID string                 `xml:"startChangeID,omitempty"`
0000000000000000000000000000000000000000;;		EndChangeID   string                 `xml:"endChangeID,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSpecGetUpdatedHostsRequestType"] = reflect.TypeOf((*HostSpecGetUpdatedHostsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecGetUpdatedHostsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecification struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CreatedTime  time.Time              `xml:"createdTime"`
0000000000000000000000000000000000000000;;		LastModified *time.Time             `xml:"lastModified"`
0000000000000000000000000000000000000000;;		Host         ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		SubSpecs     []HostSubSpecification `xml:"subSpecs,omitempty"`
0000000000000000000000000000000000000000;;		ChangeID     string                 `xml:"changeID,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSpecification"] = reflect.TypeOf((*HostSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecificationOperationFailed struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSpecificationOperationFailed"] = reflect.TypeOf((*HostSpecificationOperationFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecificationOperationFailedFault HostSpecificationOperationFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSpecificationOperationFailedFault"] = reflect.TypeOf((*HostSpecificationOperationFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSriovConfig struct {
0000000000000000000000000000000000000000;;		HostPciPassthruConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SriovEnabled       bool  `xml:"sriovEnabled"`
0000000000000000000000000000000000000000;;		NumVirtualFunction int32 `xml:"numVirtualFunction"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSriovConfig"] = reflect.TypeOf((*HostSriovConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSriovDevicePoolInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSriovDevicePoolInfo"] = reflect.TypeOf((*HostSriovDevicePoolInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSriovInfo struct {
0000000000000000000000000000000000000000;;		HostPciPassthruInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SriovEnabled                bool  `xml:"sriovEnabled"`
0000000000000000000000000000000000000000;;		SriovCapable                bool  `xml:"sriovCapable"`
0000000000000000000000000000000000000000;;		SriovActive                 bool  `xml:"sriovActive"`
0000000000000000000000000000000000000000;;		NumVirtualFunctionRequested int32 `xml:"numVirtualFunctionRequested"`
0000000000000000000000000000000000000000;;		NumVirtualFunction          int32 `xml:"numVirtualFunction"`
0000000000000000000000000000000000000000;;		MaxVirtualFunctionSupported int32 `xml:"maxVirtualFunctionSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSriovInfo"] = reflect.TypeOf((*HostSriovInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSriovNetworkDevicePoolInfo struct {
0000000000000000000000000000000000000000;;		HostSriovDevicePoolInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchKey  string        `xml:"switchKey,omitempty"`
0000000000000000000000000000000000000000;;		SwitchUuid string        `xml:"switchUuid,omitempty"`
0000000000000000000000000000000000000000;;		Pnic       []PhysicalNic `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSriovNetworkDevicePoolInfo"] = reflect.TypeOf((*HostSriovNetworkDevicePoolInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSslThumbprintInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Principal      string   `xml:"principal"`
0000000000000000000000000000000000000000;;		OwnerTag       string   `xml:"ownerTag,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprints []string `xml:"sslThumbprints,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSslThumbprintInfo"] = reflect.TypeOf((*HostSslThumbprintInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStatusChangedEvent struct {
0000000000000000000000000000000000000000;;		ClusterStatusChangedEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStatusChangedEvent"] = reflect.TypeOf((*HostStatusChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageArrayTypePolicyOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Policy BaseElementDescription `xml:"policy,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageArrayTypePolicyOption"] = reflect.TypeOf((*HostStorageArrayTypePolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageDeviceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostBusAdapter              []BaseHostHostBusAdapter `xml:"hostBusAdapter,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ScsiLun                     []BaseScsiLun            `xml:"scsiLun,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ScsiTopology                *HostScsiTopology        `xml:"scsiTopology,omitempty"`
0000000000000000000000000000000000000000;;		MultipathInfo               *HostMultipathInfo       `xml:"multipathInfo,omitempty"`
0000000000000000000000000000000000000000;;		PlugStoreTopology           *HostPlugStoreTopology   `xml:"plugStoreTopology,omitempty"`
0000000000000000000000000000000000000000;;		SoftwareInternetScsiEnabled bool                     `xml:"softwareInternetScsiEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageDeviceInfo"] = reflect.TypeOf((*HostStorageDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageElementInfo struct {
0000000000000000000000000000000000000000;;		HostHardwareElementInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OperationalInfo []HostStorageOperationalInfo `xml:"operationalInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageElementInfo"] = reflect.TypeOf((*HostStorageElementInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageOperationalInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Property string `xml:"property"`
0000000000000000000000000000000000000000;;		Value    string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageOperationalInfo"] = reflect.TypeOf((*HostStorageOperationalInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageSystemDiskLocatorLedResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string               `xml:"key"`
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageSystemDiskLocatorLedResult"] = reflect.TypeOf((*HostStorageSystemDiskLocatorLedResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageSystemScsiLunResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string                `xml:"key"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageSystemScsiLunResult"] = reflect.TypeOf((*HostStorageSystemScsiLunResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageSystemVmfsVolumeResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string                `xml:"key"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageSystemVmfsVolumeResult"] = reflect.TypeOf((*HostStorageSystemVmfsVolumeResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSubSpecification struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name        string    `xml:"name"`
0000000000000000000000000000000000000000;;		CreatedTime time.Time `xml:"createdTime"`
0000000000000000000000000000000000000000;;		Data        []byte    `xml:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSubSpecification"] = reflect.TypeOf((*HostSubSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSyncFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSyncFailedEvent"] = reflect.TypeOf((*HostSyncFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemHealthInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumericSensorInfo []HostNumericSensorInfo `xml:"numericSensorInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemHealthInfo"] = reflect.TypeOf((*HostSystemHealthInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemIdentificationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IdentifierValue string                 `xml:"identifierValue"`
0000000000000000000000000000000000000000;;		IdentifierType  BaseElementDescription `xml:"identifierType,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemIdentificationInfo"] = reflect.TypeOf((*HostSystemIdentificationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vendor               string                         `xml:"vendor"`
0000000000000000000000000000000000000000;;		Model                string                         `xml:"model"`
0000000000000000000000000000000000000000;;		Uuid                 string                         `xml:"uuid"`
0000000000000000000000000000000000000000;;		OtherIdentifyingInfo []HostSystemIdentificationInfo `xml:"otherIdentifyingInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemInfo"] = reflect.TypeOf((*HostSystemInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemReconnectSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SyncState *bool `xml:"syncState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemReconnectSpec"] = reflect.TypeOf((*HostSystemReconnectSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemResourceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key    string                   `xml:"key"`
0000000000000000000000000000000000000000;;		Config *ResourceConfigSpec      `xml:"config,omitempty"`
0000000000000000000000000000000000000000;;		Child  []HostSystemResourceInfo `xml:"child,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemResourceInfo"] = reflect.TypeOf((*HostSystemResourceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemSwapConfiguration struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Option []BaseHostSystemSwapConfigurationSystemSwapOption `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemSwapConfiguration"] = reflect.TypeOf((*HostSystemSwapConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemSwapConfigurationDatastoreOption struct {
0000000000000000000000000000000000000000;;		HostSystemSwapConfigurationSystemSwapOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore string `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemSwapConfigurationDatastoreOption"] = reflect.TypeOf((*HostSystemSwapConfigurationDatastoreOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemSwapConfigurationDisabledOption struct {
0000000000000000000000000000000000000000;;		HostSystemSwapConfigurationSystemSwapOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemSwapConfigurationDisabledOption"] = reflect.TypeOf((*HostSystemSwapConfigurationDisabledOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemSwapConfigurationHostCacheOption struct {
0000000000000000000000000000000000000000;;		HostSystemSwapConfigurationSystemSwapOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemSwapConfigurationHostCacheOption"] = reflect.TypeOf((*HostSystemSwapConfigurationHostCacheOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemSwapConfigurationHostLocalSwapOption struct {
0000000000000000000000000000000000000000;;		HostSystemSwapConfigurationSystemSwapOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemSwapConfigurationHostLocalSwapOption"] = reflect.TypeOf((*HostSystemSwapConfigurationHostLocalSwapOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystemSwapConfigurationSystemSwapOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key int32 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystemSwapConfigurationSystemSwapOption"] = reflect.TypeOf((*HostSystemSwapConfigurationSystemSwapOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTargetTransport struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTargetTransport"] = reflect.TypeOf((*HostTargetTransport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmAttestationReport struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TpmPcrValues   []HostTpmDigestInfo    `xml:"tpmPcrValues"`
0000000000000000000000000000000000000000;;		TpmEvents      []HostTpmEventLogEntry `xml:"tpmEvents"`
0000000000000000000000000000000000000000;;		TpmLogReliable bool                   `xml:"tpmLogReliable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmAttestationReport"] = reflect.TypeOf((*HostTpmAttestationReport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmBootSecurityOptionEventDetails struct {
0000000000000000000000000000000000000000;;		HostTpmEventDetails
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BootSecurityOption string `xml:"bootSecurityOption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmBootSecurityOptionEventDetails"] = reflect.TypeOf((*HostTpmBootSecurityOptionEventDetails)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmCommandEventDetails struct {
0000000000000000000000000000000000000000;;		HostTpmEventDetails
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CommandLine string `xml:"commandLine"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmCommandEventDetails"] = reflect.TypeOf((*HostTpmCommandEventDetails)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmDigestInfo struct {
0000000000000000000000000000000000000000;;		HostDigestInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PcrNumber int32 `xml:"pcrNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmDigestInfo"] = reflect.TypeOf((*HostTpmDigestInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmEventDetails struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DataHash []byte `xml:"dataHash"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmEventDetails"] = reflect.TypeOf((*HostTpmEventDetails)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmEventLogEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PcrIndex     int32                   `xml:"pcrIndex"`
0000000000000000000000000000000000000000;;		EventDetails BaseHostTpmEventDetails `xml:"eventDetails,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmEventLogEntry"] = reflect.TypeOf((*HostTpmEventLogEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmOptionEventDetails struct {
0000000000000000000000000000000000000000;;		HostTpmEventDetails
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OptionsFileName string `xml:"optionsFileName"`
0000000000000000000000000000000000000000;;		BootOptions     []byte `xml:"bootOptions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmOptionEventDetails"] = reflect.TypeOf((*HostTpmOptionEventDetails)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTpmSoftwareComponentEventDetails struct {
0000000000000000000000000000000000000000;;		HostTpmEventDetails
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComponentName string `xml:"componentName"`
0000000000000000000000000000000000000000;;		VibName       string `xml:"vibName"`
0000000000000000000000000000000000000000;;		VibVersion    string `xml:"vibVersion"`
0000000000000000000000000000000000000000;;		VibVendor     string `xml:"vibVendor"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostTpmSoftwareComponentEventDetails"] = reflect.TypeOf((*HostTpmSoftwareComponentEventDetails)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUnresolvedVmfsExtent struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device       HostScsiDiskPartition `xml:"device"`
0000000000000000000000000000000000000000;;		DevicePath   string                `xml:"devicePath"`
0000000000000000000000000000000000000000;;		VmfsUuid     string                `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;		IsHeadExtent bool                  `xml:"isHeadExtent"`
0000000000000000000000000000000000000000;;		Ordinal      int32                 `xml:"ordinal"`
0000000000000000000000000000000000000000;;		StartBlock   int32                 `xml:"startBlock"`
0000000000000000000000000000000000000000;;		EndBlock     int32                 `xml:"endBlock"`
0000000000000000000000000000000000000000;;		Reason       string                `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUnresolvedVmfsExtent"] = reflect.TypeOf((*HostUnresolvedVmfsExtent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUnresolvedVmfsResignatureSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtentDevicePath []string `xml:"extentDevicePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUnresolvedVmfsResignatureSpec"] = reflect.TypeOf((*HostUnresolvedVmfsResignatureSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUnresolvedVmfsResolutionResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Spec  HostUnresolvedVmfsResolutionSpec `xml:"spec"`
0000000000000000000000000000000000000000;;		Vmfs  *HostVmfsVolume                  `xml:"vmfs,omitempty"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault            `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUnresolvedVmfsResolutionResult"] = reflect.TypeOf((*HostUnresolvedVmfsResolutionResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUnresolvedVmfsResolutionSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtentDevicePath []string `xml:"extentDevicePath"`
0000000000000000000000000000000000000000;;		UuidResolution   string   `xml:"uuidResolution"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUnresolvedVmfsResolutionSpec"] = reflect.TypeOf((*HostUnresolvedVmfsResolutionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUnresolvedVmfsVolume struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Extent        []HostUnresolvedVmfsExtent            `xml:"extent"`
0000000000000000000000000000000000000000;;		VmfsLabel     string                                `xml:"vmfsLabel"`
0000000000000000000000000000000000000000;;		VmfsUuid      string                                `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;		TotalBlocks   int32                                 `xml:"totalBlocks"`
0000000000000000000000000000000000000000;;		ResolveStatus HostUnresolvedVmfsVolumeResolveStatus `xml:"resolveStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUnresolvedVmfsVolume"] = reflect.TypeOf((*HostUnresolvedVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUnresolvedVmfsVolumeResolveStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Resolvable        bool  `xml:"resolvable"`
0000000000000000000000000000000000000000;;		IncompleteExtents *bool `xml:"incompleteExtents"`
0000000000000000000000000000000000000000;;		MultipleCopies    *bool `xml:"multipleCopies"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUnresolvedVmfsVolumeResolveStatus"] = reflect.TypeOf((*HostUnresolvedVmfsVolumeResolveStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUpgradeFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUpgradeFailedEvent"] = reflect.TypeOf((*HostUpgradeFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostUserWorldSwapNotEnabledEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostUserWorldSwapNotEnabledEvent"] = reflect.TypeOf((*HostUserWorldSwapNotEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashCacheConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VFlashModuleConfigOption []HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption `xml:"vFlashModuleConfigOption,omitempty"`
0000000000000000000000000000000000000000;;		DefaultVFlashModule      string                                                           `xml:"defaultVFlashModule,omitempty"`
0000000000000000000000000000000000000000;;		SwapCacheReservationInGB int64                                                            `xml:"swapCacheReservationInGB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashCacheConfigInfo"] = reflect.TypeOf((*HostVFlashManagerVFlashCacheConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VFlashModule              string       `xml:"vFlashModule"`
0000000000000000000000000000000000000000;;		VFlashModuleVersion       string       `xml:"vFlashModuleVersion"`
0000000000000000000000000000000000000000;;		MinSupportedModuleVersion string       `xml:"minSupportedModuleVersion"`
0000000000000000000000000000000000000000;;		CacheConsistencyType      ChoiceOption `xml:"cacheConsistencyType"`
0000000000000000000000000000000000000000;;		CacheMode                 ChoiceOption `xml:"cacheMode"`
0000000000000000000000000000000000000000;;		BlockSizeInKBOption       LongOption   `xml:"blockSizeInKBOption"`
0000000000000000000000000000000000000000;;		ReservationInMBOption     LongOption   `xml:"reservationInMBOption"`
0000000000000000000000000000000000000000;;		MaxDiskSizeInKB           int64        `xml:"maxDiskSizeInKB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption"] = reflect.TypeOf((*HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashCacheConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultVFlashModule      string `xml:"defaultVFlashModule"`
0000000000000000000000000000000000000000;;		SwapCacheReservationInGB int64  `xml:"swapCacheReservationInGB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashCacheConfigSpec"] = reflect.TypeOf((*HostVFlashManagerVFlashCacheConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VFlashResourceConfigInfo *HostVFlashManagerVFlashResourceConfigInfo `xml:"vFlashResourceConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;		VFlashCacheConfigInfo    *HostVFlashManagerVFlashCacheConfigInfo    `xml:"vFlashCacheConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashConfigInfo"] = reflect.TypeOf((*HostVFlashManagerVFlashConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashResourceConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vffs     *HostVffsVolume `xml:"vffs,omitempty"`
0000000000000000000000000000000000000000;;		Capacity int64           `xml:"capacity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashResourceConfigInfo"] = reflect.TypeOf((*HostVFlashManagerVFlashResourceConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashResourceConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VffsUuid string `xml:"vffsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashResourceConfigSpec"] = reflect.TypeOf((*HostVFlashManagerVFlashResourceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManagerVFlashResourceRunTimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Usage              int64 `xml:"usage"`
0000000000000000000000000000000000000000;;		Capacity           int64 `xml:"capacity"`
0000000000000000000000000000000000000000;;		Accessible         bool  `xml:"accessible"`
0000000000000000000000000000000000000000;;		CapacityForVmCache int64 `xml:"capacityForVmCache"`
0000000000000000000000000000000000000000;;		FreeForVmCache     int64 `xml:"freeForVmCache"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManagerVFlashResourceRunTimeInfo"] = reflect.TypeOf((*HostVFlashManagerVFlashResourceRunTimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashResourceConfigurationResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DevicePath              []string                      `xml:"devicePath,omitempty"`
0000000000000000000000000000000000000000;;		Vffs                    *HostVffsVolume               `xml:"vffs,omitempty"`
0000000000000000000000000000000000000000;;		DiskConfigurationResult []HostDiskConfigurationResult `xml:"diskConfigurationResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashResourceConfigurationResult"] = reflect.TypeOf((*HostVFlashResourceConfigurationResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVMotionCompatibility struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host          ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Compatibility []string               `xml:"compatibility,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVMotionCompatibility"] = reflect.TypeOf((*HostVMotionCompatibility)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVMotionConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmotionNicKey string `xml:"vmotionNicKey,omitempty"`
0000000000000000000000000000000000000000;;		Enabled       bool   `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVMotionConfig"] = reflect.TypeOf((*HostVMotionConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVMotionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetConfig *HostVMotionNetConfig `xml:"netConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpConfig  *HostIpConfig         `xml:"ipConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVMotionInfo"] = reflect.TypeOf((*HostVMotionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVMotionNetConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CandidateVnic []HostVirtualNic `xml:"candidateVnic,omitempty"`
0000000000000000000000000000000000000000;;		SelectedVnic  string           `xml:"selectedVnic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVMotionNetConfig"] = reflect.TypeOf((*HostVMotionNetConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVfatVolume struct {
0000000000000000000000000000000000000000;;		HostFileSystemVolume
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVfatVolume"] = reflect.TypeOf((*HostVfatVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVffsSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DevicePath   string                 `xml:"devicePath"`
0000000000000000000000000000000000000000;;		Partition    *HostDiskPartitionSpec `xml:"partition,omitempty"`
0000000000000000000000000000000000000000;;		MajorVersion int32                  `xml:"majorVersion"`
0000000000000000000000000000000000000000;;		VolumeName   string                 `xml:"volumeName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVffsSpec"] = reflect.TypeOf((*HostVffsSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVffsVolume struct {
0000000000000000000000000000000000000000;;		HostFileSystemVolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MajorVersion int32                   `xml:"majorVersion"`
0000000000000000000000000000000000000000;;		Version      string                  `xml:"version"`
0000000000000000000000000000000000000000;;		Uuid         string                  `xml:"uuid"`
0000000000000000000000000000000000000000;;		Extent       []HostScsiDiskPartition `xml:"extent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVffsVolume"] = reflect.TypeOf((*HostVffsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNic struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device    string             `xml:"device"`
0000000000000000000000000000000000000000;;		Key       string             `xml:"key"`
0000000000000000000000000000000000000000;;		Portgroup string             `xml:"portgroup"`
0000000000000000000000000000000000000000;;		Spec      HostVirtualNicSpec `xml:"spec"`
0000000000000000000000000000000000000000;;		Port      string             `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNic"] = reflect.TypeOf((*HostVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string              `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Device          string              `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;		Portgroup       string              `xml:"portgroup"`
0000000000000000000000000000000000000000;;		Spec            *HostVirtualNicSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicConfig"] = reflect.TypeOf((*HostVirtualNicConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicConnection struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Portgroup string                                  `xml:"portgroup,omitempty"`
0000000000000000000000000000000000000000;;		DvPort    *DistributedVirtualSwitchPortConnection `xml:"dvPort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicConnection"] = reflect.TypeOf((*HostVirtualNicConnection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicIpRouteSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpRouteConfig BaseHostIpRouteConfig `xml:"ipRouteConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicIpRouteSpec"] = reflect.TypeOf((*HostVirtualNicIpRouteSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicManagerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetConfig []VirtualNicManagerNetConfig `xml:"netConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicManagerInfo"] = reflect.TypeOf((*HostVirtualNicManagerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicManagerNicTypeSelection struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vnic    HostVirtualNicConnection `xml:"vnic"`
0000000000000000000000000000000000000000;;		NicType []string                 `xml:"nicType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicManagerNicTypeSelection"] = reflect.TypeOf((*HostVirtualNicManagerNicTypeSelection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicOpaqueNetworkSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpaqueNetworkId   string `xml:"opaqueNetworkId"`
0000000000000000000000000000000000000000;;		OpaqueNetworkType string `xml:"opaqueNetworkType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicOpaqueNetworkSpec"] = reflect.TypeOf((*HostVirtualNicOpaqueNetworkSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ip                     *HostIpConfig                           `xml:"ip,omitempty"`
0000000000000000000000000000000000000000;;		Mac                    string                                  `xml:"mac,omitempty"`
0000000000000000000000000000000000000000;;		DistributedVirtualPort *DistributedVirtualSwitchPortConnection `xml:"distributedVirtualPort,omitempty"`
0000000000000000000000000000000000000000;;		Portgroup              string                                  `xml:"portgroup,omitempty"`
0000000000000000000000000000000000000000;;		Mtu                    int32                                   `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;		TsoEnabled             *bool                                   `xml:"tsoEnabled"`
0000000000000000000000000000000000000000;;		NetStackInstanceKey    string                                  `xml:"netStackInstanceKey,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueNetwork          *HostVirtualNicOpaqueNetworkSpec        `xml:"opaqueNetwork,omitempty"`
0000000000000000000000000000000000000000;;		ExternalId             string                                  `xml:"externalId,omitempty"`
0000000000000000000000000000000000000000;;		PinnedPnic             string                                  `xml:"pinnedPnic,omitempty"`
0000000000000000000000000000000000000000;;		IpRouteSpec            *HostVirtualNicIpRouteSpec              `xml:"ipRouteSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicSpec"] = reflect.TypeOf((*HostVirtualNicSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitch struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name              string                `xml:"name"`
0000000000000000000000000000000000000000;;		Key               string                `xml:"key"`
0000000000000000000000000000000000000000;;		NumPorts          int32                 `xml:"numPorts"`
0000000000000000000000000000000000000000;;		NumPortsAvailable int32                 `xml:"numPortsAvailable"`
0000000000000000000000000000000000000000;;		Mtu               int32                 `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;		Portgroup         []string              `xml:"portgroup,omitempty"`
0000000000000000000000000000000000000000;;		Pnic              []string              `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		Spec              HostVirtualSwitchSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitch"] = reflect.TypeOf((*HostVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchAutoBridge struct {
0000000000000000000000000000000000000000;;		HostVirtualSwitchBridge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExcludedNicDevice []string `xml:"excludedNicDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchAutoBridge"] = reflect.TypeOf((*HostVirtualSwitchAutoBridge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchBeaconConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Interval int32 `xml:"interval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchBeaconConfig"] = reflect.TypeOf((*HostVirtualSwitchBeaconConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchBondBridge struct {
0000000000000000000000000000000000000000;;		HostVirtualSwitchBridge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NicDevice                   []string                       `xml:"nicDevice"`
0000000000000000000000000000000000000000;;		Beacon                      *HostVirtualSwitchBeaconConfig `xml:"beacon,omitempty"`
0000000000000000000000000000000000000000;;		LinkDiscoveryProtocolConfig *LinkDiscoveryProtocolConfig   `xml:"linkDiscoveryProtocolConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchBondBridge"] = reflect.TypeOf((*HostVirtualSwitchBondBridge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchBridge struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchBridge"] = reflect.TypeOf((*HostVirtualSwitchBridge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeOperation string                 `xml:"changeOperation,omitempty"`
0000000000000000000000000000000000000000;;		Name            string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Spec            *HostVirtualSwitchSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchConfig"] = reflect.TypeOf((*HostVirtualSwitchConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchSimpleBridge struct {
0000000000000000000000000000000000000000;;		HostVirtualSwitchBridge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NicDevice string `xml:"nicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchSimpleBridge"] = reflect.TypeOf((*HostVirtualSwitchSimpleBridge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualSwitchSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumPorts int32                       `xml:"numPorts"`
0000000000000000000000000000000000000000;;		Bridge   BaseHostVirtualSwitchBridge `xml:"bridge,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Policy   *HostNetworkPolicy          `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;		Mtu      int32                       `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualSwitchSpec"] = reflect.TypeOf((*HostVirtualSwitchSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVmciAccessManagerAccessSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm       ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		Services []string               `xml:"services,omitempty"`
0000000000000000000000000000000000000000;;		Mode     string                 `xml:"mode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVmciAccessManagerAccessSpec"] = reflect.TypeOf((*HostVmciAccessManagerAccessSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVmfsRescanResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault  `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVmfsRescanResult"] = reflect.TypeOf((*HostVmfsRescanResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVmfsSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Extent           HostScsiDiskPartition `xml:"extent"`
0000000000000000000000000000000000000000;;		BlockSizeMb      int32                 `xml:"blockSizeMb,omitempty"`
0000000000000000000000000000000000000000;;		MajorVersion     int32                 `xml:"majorVersion"`
0000000000000000000000000000000000000000;;		VolumeName       string                `xml:"volumeName"`
0000000000000000000000000000000000000000;;		BlockSize        int32                 `xml:"blockSize,omitempty"`
0000000000000000000000000000000000000000;;		UnmapGranularity int32                 `xml:"unmapGranularity,omitempty"`
0000000000000000000000000000000000000000;;		UnmapPriority    string                `xml:"unmapPriority,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVmfsSpec"] = reflect.TypeOf((*HostVmfsSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVmfsVolume struct {
0000000000000000000000000000000000000000;;		HostFileSystemVolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BlockSizeMb      int32                   `xml:"blockSizeMb"`
0000000000000000000000000000000000000000;;		BlockSize        int32                   `xml:"blockSize,omitempty"`
0000000000000000000000000000000000000000;;		UnmapGranularity int32                   `xml:"unmapGranularity,omitempty"`
0000000000000000000000000000000000000000;;		UnmapPriority    string                  `xml:"unmapPriority,omitempty"`
0000000000000000000000000000000000000000;;		MaxBlocks        int32                   `xml:"maxBlocks"`
0000000000000000000000000000000000000000;;		MajorVersion     int32                   `xml:"majorVersion"`
0000000000000000000000000000000000000000;;		Version          string                  `xml:"version"`
0000000000000000000000000000000000000000;;		Uuid             string                  `xml:"uuid"`
0000000000000000000000000000000000000000;;		Extent           []HostScsiDiskPartition `xml:"extent"`
0000000000000000000000000000000000000000;;		VmfsUpgradable   bool                    `xml:"vmfsUpgradable"`
0000000000000000000000000000000000000000;;		ForceMountedInfo *HostForceMountedInfo   `xml:"forceMountedInfo,omitempty"`
0000000000000000000000000000000000000000;;		Ssd              *bool                   `xml:"ssd"`
0000000000000000000000000000000000000000;;		Local            *bool                   `xml:"local"`
0000000000000000000000000000000000000000;;		ScsiDiskType     string                  `xml:"scsiDiskType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVmfsVolume"] = reflect.TypeOf((*HostVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVnicConnectedToCustomizedDVPortEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vnic        VnicPortArgument `xml:"vnic"`
0000000000000000000000000000000000000000;;		PrevPortKey string           `xml:"prevPortKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVnicConnectedToCustomizedDVPortEvent"] = reflect.TypeOf((*HostVnicConnectedToCustomizedDVPortEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanInternalSystemCmmdsQuery struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type  string `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Uuid  string `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		Owner string `xml:"owner,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVsanInternalSystemCmmdsQuery"] = reflect.TypeOf((*HostVsanInternalSystemCmmdsQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanInternalSystemDeleteVsanObjectsResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid          string               `xml:"uuid"`
0000000000000000000000000000000000000000;;		Success       bool                 `xml:"success"`
0000000000000000000000000000000000000000;;		FailureReason []LocalizableMessage `xml:"failureReason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVsanInternalSystemDeleteVsanObjectsResult"] = reflect.TypeOf((*HostVsanInternalSystemDeleteVsanObjectsResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanInternalSystemVsanObjectOperationResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid          string               `xml:"uuid"`
0000000000000000000000000000000000000000;;		FailureReason []LocalizableMessage `xml:"failureReason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVsanInternalSystemVsanObjectOperationResult"] = reflect.TypeOf((*HostVsanInternalSystemVsanObjectOperationResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskUuid      string `xml:"diskUuid"`
0000000000000000000000000000000000000000;;		Success       bool   `xml:"success"`
0000000000000000000000000000000000000000;;		FailureReason string `xml:"failureReason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult"] = reflect.TypeOf((*HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVvolVolume struct {
0000000000000000000000000000000000000000;;		HostFileSystemVolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScId             string                `xml:"scId"`
0000000000000000000000000000000000000000;;		HostPE           []VVolHostPE          `xml:"hostPE,omitempty"`
0000000000000000000000000000000000000000;;		VasaProviderInfo []VimVasaProviderInfo `xml:"vasaProviderInfo,omitempty"`
0000000000000000000000000000000000000000;;		StorageArray     []VASAStorageArray    `xml:"storageArray,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVvolVolume"] = reflect.TypeOf((*HostVvolVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVvolVolumeSpecification struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxSizeInMB      int64                 `xml:"maxSizeInMB"`
0000000000000000000000000000000000000000;;		VolumeName       string                `xml:"volumeName"`
0000000000000000000000000000000000000000;;		VasaProviderInfo []VimVasaProviderInfo `xml:"vasaProviderInfo,omitempty"`
0000000000000000000000000000000000000000;;		StorageArray     []VASAStorageArray    `xml:"storageArray,omitempty"`
0000000000000000000000000000000000000000;;		Uuid             string                `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVvolVolumeSpecification"] = reflect.TypeOf((*HostVvolVolumeSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostWwnChangedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldNodeWwns []int64 `xml:"oldNodeWwns,omitempty"`
0000000000000000000000000000000000000000;;		OldPortWwns []int64 `xml:"oldPortWwns,omitempty"`
0000000000000000000000000000000000000000;;		NewNodeWwns []int64 `xml:"newNodeWwns,omitempty"`
0000000000000000000000000000000000000000;;		NewPortWwns []int64 `xml:"newPortWwns,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostWwnChangedEvent"] = reflect.TypeOf((*HostWwnChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostWwnConflictEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictedVms   []VmEventArgument   `xml:"conflictedVms,omitempty"`
0000000000000000000000000000000000000000;;		ConflictedHosts []HostEventArgument `xml:"conflictedHosts,omitempty"`
0000000000000000000000000000000000000000;;		Wwn             int64               `xml:"wwn"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostWwnConflictEvent"] = reflect.TypeOf((*HostWwnConflictEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HotSnapshotMoveNotSupported struct {
0000000000000000000000000000000000000000;;		SnapshotCopyNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HotSnapshotMoveNotSupported"] = reflect.TypeOf((*HotSnapshotMoveNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HotSnapshotMoveNotSupportedFault HotSnapshotMoveNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HotSnapshotMoveNotSupportedFault"] = reflect.TypeOf((*HotSnapshotMoveNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HourlyTaskScheduler struct {
0000000000000000000000000000000000000000;;		RecurrentTaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Minute int32 `xml:"minute"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HourlyTaskScheduler"] = reflect.TypeOf((*HourlyTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseAbort HttpNfcLeaseAbortRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseAbort"] = reflect.TypeOf((*HttpNfcLeaseAbort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseAbortRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault  `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseAbortRequestType"] = reflect.TypeOf((*HttpNfcLeaseAbortRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseAbortResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseComplete HttpNfcLeaseCompleteRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseComplete"] = reflect.TypeOf((*HttpNfcLeaseComplete)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseCompleteRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseCompleteRequestType"] = reflect.TypeOf((*HttpNfcLeaseCompleteRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseCompleteResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseDatastoreLeaseInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastoreKey string                 `xml:"datastoreKey"`
0000000000000000000000000000000000000000;;		Hosts        []HttpNfcLeaseHostInfo `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseDatastoreLeaseInfo"] = reflect.TypeOf((*HttpNfcLeaseDatastoreLeaseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseDeviceUrl struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string `xml:"key"`
0000000000000000000000000000000000000000;;		ImportKey     string `xml:"importKey"`
0000000000000000000000000000000000000000;;		Url           string `xml:"url"`
0000000000000000000000000000000000000000;;		SslThumbprint string `xml:"sslThumbprint"`
0000000000000000000000000000000000000000;;		Disk          *bool  `xml:"disk"`
0000000000000000000000000000000000000000;;		TargetId      string `xml:"targetId,omitempty"`
0000000000000000000000000000000000000000;;		DatastoreKey  string `xml:"datastoreKey,omitempty"`
0000000000000000000000000000000000000000;;		FileSize      int64  `xml:"fileSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseDeviceUrl"] = reflect.TypeOf((*HttpNfcLeaseDeviceUrl)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseGetManifest HttpNfcLeaseGetManifestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseGetManifest"] = reflect.TypeOf((*HttpNfcLeaseGetManifest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseGetManifestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseGetManifestRequestType"] = reflect.TypeOf((*HttpNfcLeaseGetManifestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseGetManifestResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HttpNfcLeaseManifestEntry `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseHostInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url           string `xml:"url"`
0000000000000000000000000000000000000000;;		SslThumbprint string `xml:"sslThumbprint"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseHostInfo"] = reflect.TypeOf((*HttpNfcLeaseHostInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Lease                 ManagedObjectReference           `xml:"lease"`
0000000000000000000000000000000000000000;;		Entity                ManagedObjectReference           `xml:"entity"`
0000000000000000000000000000000000000000;;		DeviceUrl             []HttpNfcLeaseDeviceUrl          `xml:"deviceUrl,omitempty"`
0000000000000000000000000000000000000000;;		TotalDiskCapacityInKB int64                            `xml:"totalDiskCapacityInKB"`
0000000000000000000000000000000000000000;;		LeaseTimeout          int32                            `xml:"leaseTimeout"`
0000000000000000000000000000000000000000;;		HostMap               []HttpNfcLeaseDatastoreLeaseInfo `xml:"hostMap,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseInfo"] = reflect.TypeOf((*HttpNfcLeaseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseManifestEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string `xml:"key"`
0000000000000000000000000000000000000000;;		Sha1          string `xml:"sha1"`
0000000000000000000000000000000000000000;;		Size          int64  `xml:"size"`
0000000000000000000000000000000000000000;;		Disk          bool   `xml:"disk"`
0000000000000000000000000000000000000000;;		Capacity      int64  `xml:"capacity,omitempty"`
0000000000000000000000000000000000000000;;		PopulatedSize int64  `xml:"populatedSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseManifestEntry"] = reflect.TypeOf((*HttpNfcLeaseManifestEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseProgress HttpNfcLeaseProgressRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseProgress"] = reflect.TypeOf((*HttpNfcLeaseProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseProgressRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Percent int32                  `xml:"percent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLeaseProgressRequestType"] = reflect.TypeOf((*HttpNfcLeaseProgressRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLeaseProgressResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ID struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id string `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ID"] = reflect.TypeOf((*ID)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IDEDiskNotSupported struct {
0000000000000000000000000000000000000000;;		DiskNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IDEDiskNotSupported"] = reflect.TypeOf((*IDEDiskNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IDEDiskNotSupportedFault IDEDiskNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IDEDiskNotSupportedFault"] = reflect.TypeOf((*IDEDiskNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IORMNotSupportedHostOnDatastore struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore     ManagedObjectReference   `xml:"datastore"`
0000000000000000000000000000000000000000;;		DatastoreName string                   `xml:"datastoreName"`
0000000000000000000000000000000000000000;;		Host          []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IORMNotSupportedHostOnDatastore"] = reflect.TypeOf((*IORMNotSupportedHostOnDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IORMNotSupportedHostOnDatastoreFault IORMNotSupportedHostOnDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IORMNotSupportedHostOnDatastoreFault"] = reflect.TypeOf((*IORMNotSupportedHostOnDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IScsiBootFailureEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IScsiBootFailureEvent"] = reflect.TypeOf((*IScsiBootFailureEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImpersonateUser ImpersonateUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImpersonateUser"] = reflect.TypeOf((*ImpersonateUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImpersonateUserRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		UserName string                 `xml:"userName"`
0000000000000000000000000000000000000000;;		Locale   string                 `xml:"locale,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImpersonateUserRequestType"] = reflect.TypeOf((*ImpersonateUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImpersonateUserResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportCertificateForCAMRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CertPath  string                 `xml:"certPath"`
0000000000000000000000000000000000000000;;		CamServer string                 `xml:"camServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportCertificateForCAMRequestType"] = reflect.TypeOf((*ImportCertificateForCAMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportCertificateForCAM_Task ImportCertificateForCAMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportCertificateForCAM_Task"] = reflect.TypeOf((*ImportCertificateForCAM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportCertificateForCAM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportHostAddFailure struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostIp []string `xml:"hostIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportHostAddFailure"] = reflect.TypeOf((*ImportHostAddFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportHostAddFailureFault ImportHostAddFailure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportHostAddFailureFault"] = reflect.TypeOf((*ImportHostAddFailureFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportOperationBulkFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ImportFaults []ImportOperationBulkFaultFaultOnImport `xml:"importFaults"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportOperationBulkFault"] = reflect.TypeOf((*ImportOperationBulkFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportOperationBulkFaultFault ImportOperationBulkFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportOperationBulkFaultFault"] = reflect.TypeOf((*ImportOperationBulkFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportOperationBulkFaultFaultOnImport struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityType string               `xml:"entityType,omitempty"`
0000000000000000000000000000000000000000;;		Key        string               `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Fault      LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportOperationBulkFaultFaultOnImport"] = reflect.TypeOf((*ImportOperationBulkFaultFaultOnImport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityConfig     *VAppEntityConfigInfo `xml:"entityConfig,omitempty"`
0000000000000000000000000000000000000000;;		InstantiationOst *OvfConsumerOstNode   `xml:"instantiationOst,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportSpec"] = reflect.TypeOf((*ImportSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportUnmanagedSnapshot ImportUnmanagedSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportUnmanagedSnapshot"] = reflect.TypeOf((*ImportUnmanagedSnapshot)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportUnmanagedSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vdisk      string                  `xml:"vdisk"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		VvolId     string                  `xml:"vvolId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportUnmanagedSnapshotRequestType"] = reflect.TypeOf((*ImportUnmanagedSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportUnmanagedSnapshotResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportVApp ImportVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportVApp"] = reflect.TypeOf((*ImportVApp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportVAppRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec   BaseImportSpec          `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;		Folder *ManagedObjectReference `xml:"folder,omitempty"`
0000000000000000000000000000000000000000;;		Host   *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ImportVAppRequestType"] = reflect.TypeOf((*ImportVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImportVAppResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InUseFeatureManipulationDisallowed struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InUseFeatureManipulationDisallowed"] = reflect.TypeOf((*InUseFeatureManipulationDisallowed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InUseFeatureManipulationDisallowedFault InUseFeatureManipulationDisallowed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InUseFeatureManipulationDisallowedFault"] = reflect.TypeOf((*InUseFeatureManipulationDisallowedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InaccessibleDatastore struct {
0000000000000000000000000000000000000000;;		InvalidDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Detail string `xml:"detail,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InaccessibleDatastore"] = reflect.TypeOf((*InaccessibleDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InaccessibleDatastoreFault BaseInaccessibleDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InaccessibleDatastoreFault"] = reflect.TypeOf((*InaccessibleDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InaccessibleFTMetadataDatastore struct {
0000000000000000000000000000000000000000;;		InaccessibleDatastore
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InaccessibleFTMetadataDatastore"] = reflect.TypeOf((*InaccessibleFTMetadataDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InaccessibleFTMetadataDatastoreFault InaccessibleFTMetadataDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InaccessibleFTMetadataDatastoreFault"] = reflect.TypeOf((*InaccessibleFTMetadataDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InaccessibleVFlashSource struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InaccessibleVFlashSource"] = reflect.TypeOf((*InaccessibleVFlashSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InaccessibleVFlashSourceFault InaccessibleVFlashSource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InaccessibleVFlashSourceFault"] = reflect.TypeOf((*InaccessibleVFlashSourceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleDefaultDevice struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleDefaultDevice"] = reflect.TypeOf((*IncompatibleDefaultDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleDefaultDeviceFault IncompatibleDefaultDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleDefaultDeviceFault"] = reflect.TypeOf((*IncompatibleDefaultDeviceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleHostForFtSecondary struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Error []LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleHostForFtSecondary"] = reflect.TypeOf((*IncompatibleHostForFtSecondary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleHostForFtSecondaryFault IncompatibleHostForFtSecondary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleHostForFtSecondaryFault"] = reflect.TypeOf((*IncompatibleHostForFtSecondaryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleHostForVmReplication struct {
0000000000000000000000000000000000000000;;		ReplicationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName   string `xml:"vmName"`
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;		Reason   string `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleHostForVmReplication"] = reflect.TypeOf((*IncompatibleHostForVmReplication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleHostForVmReplicationFault IncompatibleHostForVmReplication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleHostForVmReplicationFault"] = reflect.TypeOf((*IncompatibleHostForVmReplicationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleSetting struct {
0000000000000000000000000000000000000000;;		InvalidArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictingProperty string `xml:"conflictingProperty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleSetting"] = reflect.TypeOf((*IncompatibleSetting)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncompatibleSettingFault IncompatibleSetting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncompatibleSettingFault"] = reflect.TypeOf((*IncompatibleSettingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncorrectFileType struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncorrectFileType"] = reflect.TypeOf((*IncorrectFileType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncorrectFileTypeFault IncorrectFileType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncorrectFileTypeFault"] = reflect.TypeOf((*IncorrectFileTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncorrectHostInformation struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncorrectHostInformation"] = reflect.TypeOf((*IncorrectHostInformation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncorrectHostInformationEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncorrectHostInformationEvent"] = reflect.TypeOf((*IncorrectHostInformationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IncorrectHostInformationFault IncorrectHostInformation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IncorrectHostInformationFault"] = reflect.TypeOf((*IncorrectHostInformationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IndependentDiskVMotionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IndependentDiskVMotionNotSupported"] = reflect.TypeOf((*IndependentDiskVMotionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IndependentDiskVMotionNotSupportedFault IndependentDiskVMotionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IndependentDiskVMotionNotSupportedFault"] = reflect.TypeOf((*IndependentDiskVMotionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InflateDiskRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InflateDiskRequestType"] = reflect.TypeOf((*InflateDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InflateDisk_Task InflateDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InflateDisk_Task"] = reflect.TypeOf((*InflateDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InflateDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InflateVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InflateVirtualDiskRequestType"] = reflect.TypeOf((*InflateVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InflateVirtualDisk_Task InflateVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InflateVirtualDisk_Task"] = reflect.TypeOf((*InflateVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InflateVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InfoUpgradeEvent struct {
0000000000000000000000000000000000000000;;		UpgradeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InfoUpgradeEvent"] = reflect.TypeOf((*InfoUpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InheritablePolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Inherited bool `xml:"inherited"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InheritablePolicy"] = reflect.TypeOf((*InheritablePolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitializeDisksRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Mapping []VsanHostDiskMapping  `xml:"mapping"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InitializeDisksRequestType"] = reflect.TypeOf((*InitializeDisksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitializeDisks_Task InitializeDisksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InitializeDisks_Task"] = reflect.TypeOf((*InitializeDisks_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitializeDisks_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitiateFileTransferFromGuest InitiateFileTransferFromGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InitiateFileTransferFromGuest"] = reflect.TypeOf((*InitiateFileTransferFromGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitiateFileTransferFromGuestRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth          BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		GuestFilePath string                  `xml:"guestFilePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InitiateFileTransferFromGuestRequestType"] = reflect.TypeOf((*InitiateFileTransferFromGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitiateFileTransferFromGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval FileTransferInformation `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitiateFileTransferToGuest InitiateFileTransferToGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InitiateFileTransferToGuest"] = reflect.TypeOf((*InitiateFileTransferToGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitiateFileTransferToGuestRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm             ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth           BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		GuestFilePath  string                  `xml:"guestFilePath"`
0000000000000000000000000000000000000000;;		FileAttributes BaseGuestFileAttributes `xml:"fileAttributes,typeattr"`
0000000000000000000000000000000000000000;;		FileSize       int64                   `xml:"fileSize"`
0000000000000000000000000000000000000000;;		Overwrite      bool                    `xml:"overwrite"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InitiateFileTransferToGuestRequestType"] = reflect.TypeOf((*InitiateFileTransferToGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InitiateFileTransferToGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallHostPatchRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Repository HostPatchManagerLocator `xml:"repository"`
0000000000000000000000000000000000000000;;		UpdateID   string                  `xml:"updateID"`
0000000000000000000000000000000000000000;;		Force      *bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallHostPatchRequestType"] = reflect.TypeOf((*InstallHostPatchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallHostPatchV2RequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference                     `xml:"_this"`
0000000000000000000000000000000000000000;;		MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
0000000000000000000000000000000000000000;;		BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
0000000000000000000000000000000000000000;;		VibUrls    []string                                   `xml:"vibUrls,omitempty"`
0000000000000000000000000000000000000000;;		Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallHostPatchV2RequestType"] = reflect.TypeOf((*InstallHostPatchV2RequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallHostPatchV2_Task InstallHostPatchV2RequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallHostPatchV2_Task"] = reflect.TypeOf((*InstallHostPatchV2_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallHostPatchV2_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallHostPatch_Task InstallHostPatchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallHostPatch_Task"] = reflect.TypeOf((*InstallHostPatch_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallHostPatch_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallIoFilterRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VibUrl  string                 `xml:"vibUrl"`
0000000000000000000000000000000000000000;;		CompRes ManagedObjectReference `xml:"compRes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallIoFilterRequestType"] = reflect.TypeOf((*InstallIoFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallIoFilter_Task InstallIoFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallIoFilter_Task"] = reflect.TypeOf((*InstallIoFilter_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallIoFilter_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallServerCertificate InstallServerCertificateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallServerCertificate"] = reflect.TypeOf((*InstallServerCertificate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallServerCertificateRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cert string                 `xml:"cert"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallServerCertificateRequestType"] = reflect.TypeOf((*InstallServerCertificateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallServerCertificateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallSmartCardTrustAnchor InstallSmartCardTrustAnchorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallSmartCardTrustAnchor"] = reflect.TypeOf((*InstallSmartCardTrustAnchor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallSmartCardTrustAnchorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cert string                 `xml:"cert"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InstallSmartCardTrustAnchorRequestType"] = reflect.TypeOf((*InstallSmartCardTrustAnchorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstallSmartCardTrustAnchorResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientAgentVmsDeployed struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName            string `xml:"hostName"`
0000000000000000000000000000000000000000;;		RequiredNumAgentVms int32  `xml:"requiredNumAgentVms"`
0000000000000000000000000000000000000000;;		CurrentNumAgentVms  int32  `xml:"currentNumAgentVms"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientAgentVmsDeployed"] = reflect.TypeOf((*InsufficientAgentVmsDeployed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientAgentVmsDeployedFault InsufficientAgentVmsDeployed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientAgentVmsDeployedFault"] = reflect.TypeOf((*InsufficientAgentVmsDeployedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientCpuResourcesFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Unreserved int64 `xml:"unreserved"`
0000000000000000000000000000000000000000;;		Requested  int64 `xml:"requested"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientCpuResourcesFault"] = reflect.TypeOf((*InsufficientCpuResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientCpuResourcesFaultFault InsufficientCpuResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientCpuResourcesFaultFault"] = reflect.TypeOf((*InsufficientCpuResourcesFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientDisks struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientDisks"] = reflect.TypeOf((*InsufficientDisks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientDisksFault InsufficientDisks
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientDisksFault"] = reflect.TypeOf((*InsufficientDisksFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientFailoverResourcesEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientFailoverResourcesEvent"] = reflect.TypeOf((*InsufficientFailoverResourcesEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientFailoverResourcesFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientFailoverResourcesFault"] = reflect.TypeOf((*InsufficientFailoverResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientFailoverResourcesFaultFault InsufficientFailoverResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientFailoverResourcesFaultFault"] = reflect.TypeOf((*InsufficientFailoverResourcesFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientGraphicsResourcesFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientGraphicsResourcesFault"] = reflect.TypeOf((*InsufficientGraphicsResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientGraphicsResourcesFaultFault InsufficientGraphicsResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientGraphicsResourcesFaultFault"] = reflect.TypeOf((*InsufficientGraphicsResourcesFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientHostCapacityFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientHostCapacityFault"] = reflect.TypeOf((*InsufficientHostCapacityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientHostCapacityFaultFault BaseInsufficientHostCapacityFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientHostCapacityFaultFault"] = reflect.TypeOf((*InsufficientHostCapacityFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientHostCpuCapacityFault struct {
0000000000000000000000000000000000000000;;		InsufficientHostCapacityFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Unreserved int64 `xml:"unreserved"`
0000000000000000000000000000000000000000;;		Requested  int64 `xml:"requested"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientHostCpuCapacityFault"] = reflect.TypeOf((*InsufficientHostCpuCapacityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientHostCpuCapacityFaultFault InsufficientHostCpuCapacityFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientHostCpuCapacityFaultFault"] = reflect.TypeOf((*InsufficientHostCpuCapacityFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientHostMemoryCapacityFault struct {
0000000000000000000000000000000000000000;;		InsufficientHostCapacityFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Unreserved int64 `xml:"unreserved"`
0000000000000000000000000000000000000000;;		Requested  int64 `xml:"requested"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientHostMemoryCapacityFault"] = reflect.TypeOf((*InsufficientHostMemoryCapacityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientHostMemoryCapacityFaultFault InsufficientHostMemoryCapacityFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientHostMemoryCapacityFaultFault"] = reflect.TypeOf((*InsufficientHostMemoryCapacityFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientMemoryResourcesFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Unreserved int64 `xml:"unreserved"`
0000000000000000000000000000000000000000;;		Requested  int64 `xml:"requested"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientMemoryResourcesFault"] = reflect.TypeOf((*InsufficientMemoryResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientMemoryResourcesFaultFault InsufficientMemoryResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientMemoryResourcesFaultFault"] = reflect.TypeOf((*InsufficientMemoryResourcesFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientNetworkCapacity struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientNetworkCapacity"] = reflect.TypeOf((*InsufficientNetworkCapacity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientNetworkCapacityFault InsufficientNetworkCapacity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientNetworkCapacityFault"] = reflect.TypeOf((*InsufficientNetworkCapacityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientNetworkResourcePoolCapacity struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DvsName         string   `xml:"dvsName"`
0000000000000000000000000000000000000000;;		DvsUuid         string   `xml:"dvsUuid"`
0000000000000000000000000000000000000000;;		ResourcePoolKey string   `xml:"resourcePoolKey"`
0000000000000000000000000000000000000000;;		Available       int64    `xml:"available"`
0000000000000000000000000000000000000000;;		Requested       int64    `xml:"requested"`
0000000000000000000000000000000000000000;;		Device          []string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientNetworkResourcePoolCapacity"] = reflect.TypeOf((*InsufficientNetworkResourcePoolCapacity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientNetworkResourcePoolCapacityFault InsufficientNetworkResourcePoolCapacity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientNetworkResourcePoolCapacityFault"] = reflect.TypeOf((*InsufficientNetworkResourcePoolCapacityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientPerCpuCapacity struct {
0000000000000000000000000000000000000000;;		InsufficientHostCapacityFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientPerCpuCapacity"] = reflect.TypeOf((*InsufficientPerCpuCapacity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientPerCpuCapacityFault InsufficientPerCpuCapacity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientPerCpuCapacityFault"] = reflect.TypeOf((*InsufficientPerCpuCapacityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientResourcesFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientResourcesFault"] = reflect.TypeOf((*InsufficientResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientResourcesFaultFault BaseInsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientResourcesFaultFault"] = reflect.TypeOf((*InsufficientResourcesFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStandbyCpuResource struct {
0000000000000000000000000000000000000000;;		InsufficientStandbyResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Available int64 `xml:"available"`
0000000000000000000000000000000000000000;;		Requested int64 `xml:"requested"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStandbyCpuResource"] = reflect.TypeOf((*InsufficientStandbyCpuResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStandbyCpuResourceFault InsufficientStandbyCpuResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStandbyCpuResourceFault"] = reflect.TypeOf((*InsufficientStandbyCpuResourceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStandbyMemoryResource struct {
0000000000000000000000000000000000000000;;		InsufficientStandbyResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Available int64 `xml:"available"`
0000000000000000000000000000000000000000;;		Requested int64 `xml:"requested"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStandbyMemoryResource"] = reflect.TypeOf((*InsufficientStandbyMemoryResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStandbyMemoryResourceFault InsufficientStandbyMemoryResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStandbyMemoryResourceFault"] = reflect.TypeOf((*InsufficientStandbyMemoryResourceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStandbyResource struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStandbyResource"] = reflect.TypeOf((*InsufficientStandbyResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStandbyResourceFault BaseInsufficientStandbyResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStandbyResourceFault"] = reflect.TypeOf((*InsufficientStandbyResourceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStorageIops struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UnreservedIops int64  `xml:"unreservedIops"`
0000000000000000000000000000000000000000;;		RequestedIops  int64  `xml:"requestedIops"`
0000000000000000000000000000000000000000;;		DatastoreName  string `xml:"datastoreName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStorageIops"] = reflect.TypeOf((*InsufficientStorageIops)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStorageIopsFault InsufficientStorageIops
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStorageIopsFault"] = reflect.TypeOf((*InsufficientStorageIopsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStorageSpace struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStorageSpace"] = reflect.TypeOf((*InsufficientStorageSpace)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientStorageSpaceFault InsufficientStorageSpace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientStorageSpaceFault"] = reflect.TypeOf((*InsufficientStorageSpaceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientVFlashResourcesFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FreeSpaceInMB      int64 `xml:"freeSpaceInMB,omitempty"`
0000000000000000000000000000000000000000;;		FreeSpace          int64 `xml:"freeSpace"`
0000000000000000000000000000000000000000;;		RequestedSpaceInMB int64 `xml:"requestedSpaceInMB,omitempty"`
0000000000000000000000000000000000000000;;		RequestedSpace     int64 `xml:"requestedSpace"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientVFlashResourcesFault"] = reflect.TypeOf((*InsufficientVFlashResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InsufficientVFlashResourcesFaultFault InsufficientVFlashResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InsufficientVFlashResourcesFaultFault"] = reflect.TypeOf((*InsufficientVFlashResourcesFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IntExpression struct {
0000000000000000000000000000000000000000;;		NegatableExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value int32 `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IntExpression"] = reflect.TypeOf((*IntExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IntOption struct {
0000000000000000000000000000000000000000;;		OptionType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Min          int32 `xml:"min"`
0000000000000000000000000000000000000000;;		Max          int32 `xml:"max"`
0000000000000000000000000000000000000000;;		DefaultValue int32 `xml:"defaultValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IntOption"] = reflect.TypeOf((*IntOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IntPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value int32 `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IntPolicy"] = reflect.TypeOf((*IntPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidAffinitySettingFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidAffinitySettingFault"] = reflect.TypeOf((*InvalidAffinitySettingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidAffinitySettingFaultFault InvalidAffinitySettingFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidAffinitySettingFaultFault"] = reflect.TypeOf((*InvalidAffinitySettingFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidArgument struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InvalidProperty string `xml:"invalidProperty,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidArgument"] = reflect.TypeOf((*InvalidArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidArgumentFault BaseInvalidArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidArgumentFault"] = reflect.TypeOf((*InvalidArgumentFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidBmcRole struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidBmcRole"] = reflect.TypeOf((*InvalidBmcRole)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidBmcRoleFault InvalidBmcRole
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidBmcRoleFault"] = reflect.TypeOf((*InvalidBmcRoleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidBundle struct {
0000000000000000000000000000000000000000;;		PlatformConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidBundle"] = reflect.TypeOf((*InvalidBundle)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidBundleFault InvalidBundle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidBundleFault"] = reflect.TypeOf((*InvalidBundleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidCAMCertificate struct {
0000000000000000000000000000000000000000;;		InvalidCAMServer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidCAMCertificate"] = reflect.TypeOf((*InvalidCAMCertificate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidCAMCertificateFault InvalidCAMCertificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidCAMCertificateFault"] = reflect.TypeOf((*InvalidCAMCertificateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidCAMServer struct {
0000000000000000000000000000000000000000;;		ActiveDirectoryFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CamServer string `xml:"camServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidCAMServer"] = reflect.TypeOf((*InvalidCAMServer)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidCAMServerFault BaseInvalidCAMServer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidCAMServerFault"] = reflect.TypeOf((*InvalidCAMServerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidClientCertificate struct {
0000000000000000000000000000000000000000;;		InvalidLogin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidClientCertificate"] = reflect.TypeOf((*InvalidClientCertificate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidClientCertificateFault InvalidClientCertificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidClientCertificateFault"] = reflect.TypeOf((*InvalidClientCertificateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidCollectorVersion struct {
0000000000000000000000000000000000000000;;		MethodFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidCollectorVersion"] = reflect.TypeOf((*InvalidCollectorVersion)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidCollectorVersionFault InvalidCollectorVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidCollectorVersionFault"] = reflect.TypeOf((*InvalidCollectorVersionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidController struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ControllerKey int32 `xml:"controllerKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidController"] = reflect.TypeOf((*InvalidController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidControllerFault InvalidController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidControllerFault"] = reflect.TypeOf((*InvalidControllerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDasConfigArgument struct {
0000000000000000000000000000000000000000;;		InvalidArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entry       string `xml:"entry,omitempty"`
0000000000000000000000000000000000000000;;		ClusterName string `xml:"clusterName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDasConfigArgument"] = reflect.TypeOf((*InvalidDasConfigArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDasConfigArgumentFault InvalidDasConfigArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDasConfigArgumentFault"] = reflect.TypeOf((*InvalidDasConfigArgumentFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDasRestartPriorityForFtVm struct {
0000000000000000000000000000000000000000;;		InvalidArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDasRestartPriorityForFtVm"] = reflect.TypeOf((*InvalidDasRestartPriorityForFtVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDasRestartPriorityForFtVmFault InvalidDasRestartPriorityForFtVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDasRestartPriorityForFtVmFault"] = reflect.TypeOf((*InvalidDasRestartPriorityForFtVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDatastore struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		Name      string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDatastore"] = reflect.TypeOf((*InvalidDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDatastoreFault BaseInvalidDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDatastoreFault"] = reflect.TypeOf((*InvalidDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDatastorePath struct {
0000000000000000000000000000000000000000;;		InvalidDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastorePath string `xml:"datastorePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDatastorePath"] = reflect.TypeOf((*InvalidDatastorePath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDatastorePathFault InvalidDatastorePath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDatastorePathFault"] = reflect.TypeOf((*InvalidDatastorePathFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDatastoreState struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastoreName string `xml:"datastoreName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDatastoreState"] = reflect.TypeOf((*InvalidDatastoreState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDatastoreStateFault InvalidDatastoreState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDatastoreStateFault"] = reflect.TypeOf((*InvalidDatastoreStateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDeviceBacking struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDeviceBacking"] = reflect.TypeOf((*InvalidDeviceBacking)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDeviceBackingFault InvalidDeviceBacking
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDeviceBackingFault"] = reflect.TypeOf((*InvalidDeviceBackingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDeviceOperation struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BadOp     VirtualDeviceConfigSpecOperation     `xml:"badOp,omitempty"`
0000000000000000000000000000000000000000;;		BadFileOp VirtualDeviceConfigSpecFileOperation `xml:"badFileOp,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDeviceOperation"] = reflect.TypeOf((*InvalidDeviceOperation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDeviceOperationFault InvalidDeviceOperation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDeviceOperationFault"] = reflect.TypeOf((*InvalidDeviceOperationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDeviceSpec struct {
0000000000000000000000000000000000000000;;		InvalidVmConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceIndex int32 `xml:"deviceIndex"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDeviceSpec"] = reflect.TypeOf((*InvalidDeviceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDeviceSpecFault BaseInvalidDeviceSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDeviceSpecFault"] = reflect.TypeOf((*InvalidDeviceSpecFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDiskFormat struct {
0000000000000000000000000000000000000000;;		InvalidFormat
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDiskFormat"] = reflect.TypeOf((*InvalidDiskFormat)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDiskFormatFault InvalidDiskFormat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDiskFormatFault"] = reflect.TypeOf((*InvalidDiskFormatFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDrsBehaviorForFtVm struct {
0000000000000000000000000000000000000000;;		InvalidArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDrsBehaviorForFtVm"] = reflect.TypeOf((*InvalidDrsBehaviorForFtVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidDrsBehaviorForFtVmFault InvalidDrsBehaviorForFtVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidDrsBehaviorForFtVmFault"] = reflect.TypeOf((*InvalidDrsBehaviorForFtVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidEditionEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Feature string `xml:"feature"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidEditionEvent"] = reflect.TypeOf((*InvalidEditionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidEditionLicense struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Feature string `xml:"feature"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidEditionLicense"] = reflect.TypeOf((*InvalidEditionLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidEditionLicenseFault InvalidEditionLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidEditionLicenseFault"] = reflect.TypeOf((*InvalidEditionLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidEvent struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidEvent"] = reflect.TypeOf((*InvalidEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidEventFault InvalidEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidEventFault"] = reflect.TypeOf((*InvalidEventFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidFolder struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Target ManagedObjectReference `xml:"target"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidFolder"] = reflect.TypeOf((*InvalidFolder)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidFolderFault BaseInvalidFolder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidFolderFault"] = reflect.TypeOf((*InvalidFolderFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidFormat struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidFormat"] = reflect.TypeOf((*InvalidFormat)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidFormatFault BaseInvalidFormat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidFormatFault"] = reflect.TypeOf((*InvalidFormatFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidGuestLogin struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidGuestLogin"] = reflect.TypeOf((*InvalidGuestLogin)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidGuestLoginFault InvalidGuestLogin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidGuestLoginFault"] = reflect.TypeOf((*InvalidGuestLoginFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidHostConnectionState struct {
0000000000000000000000000000000000000000;;		InvalidHostState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidHostConnectionState"] = reflect.TypeOf((*InvalidHostConnectionState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidHostConnectionStateFault InvalidHostConnectionState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidHostConnectionStateFault"] = reflect.TypeOf((*InvalidHostConnectionStateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidHostName struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidHostName"] = reflect.TypeOf((*InvalidHostName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidHostNameFault InvalidHostName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidHostNameFault"] = reflect.TypeOf((*InvalidHostNameFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidHostState struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidHostState"] = reflect.TypeOf((*InvalidHostState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidHostStateFault BaseInvalidHostState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidHostStateFault"] = reflect.TypeOf((*InvalidHostStateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIndexArgument struct {
0000000000000000000000000000000000000000;;		InvalidArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIndexArgument"] = reflect.TypeOf((*InvalidIndexArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIndexArgumentFault InvalidIndexArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIndexArgumentFault"] = reflect.TypeOf((*InvalidIndexArgumentFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIpfixConfig struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Property string `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIpfixConfig"] = reflect.TypeOf((*InvalidIpfixConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIpfixConfigFault InvalidIpfixConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIpfixConfigFault"] = reflect.TypeOf((*InvalidIpfixConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIpmiLoginInfo struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIpmiLoginInfo"] = reflect.TypeOf((*InvalidIpmiLoginInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIpmiLoginInfoFault InvalidIpmiLoginInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIpmiLoginInfoFault"] = reflect.TypeOf((*InvalidIpmiLoginInfoFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIpmiMacAddress struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserProvidedMacAddress string `xml:"userProvidedMacAddress"`
0000000000000000000000000000000000000000;;		ObservedMacAddress     string `xml:"observedMacAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIpmiMacAddress"] = reflect.TypeOf((*InvalidIpmiMacAddress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidIpmiMacAddressFault InvalidIpmiMacAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidIpmiMacAddressFault"] = reflect.TypeOf((*InvalidIpmiMacAddressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidLicense struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseContent string `xml:"licenseContent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidLicense"] = reflect.TypeOf((*InvalidLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidLicenseFault InvalidLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidLicenseFault"] = reflect.TypeOf((*InvalidLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidLocale struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidLocale"] = reflect.TypeOf((*InvalidLocale)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidLocaleFault InvalidLocale
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidLocaleFault"] = reflect.TypeOf((*InvalidLocaleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidLogin struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidLogin"] = reflect.TypeOf((*InvalidLogin)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidLoginFault BaseInvalidLogin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidLoginFault"] = reflect.TypeOf((*InvalidLoginFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidName struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name   string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Entity *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidName"] = reflect.TypeOf((*InvalidName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNameFault InvalidName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNameFault"] = reflect.TypeOf((*InvalidNameFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNasCredentials struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserName string `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNasCredentials"] = reflect.TypeOf((*InvalidNasCredentials)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNasCredentialsFault InvalidNasCredentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNasCredentialsFault"] = reflect.TypeOf((*InvalidNasCredentialsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNetworkInType struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNetworkInType"] = reflect.TypeOf((*InvalidNetworkInType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNetworkInTypeFault InvalidNetworkInType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNetworkInTypeFault"] = reflect.TypeOf((*InvalidNetworkInTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNetworkResource struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoteHost string `xml:"remoteHost"`
0000000000000000000000000000000000000000;;		RemotePath string `xml:"remotePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNetworkResource"] = reflect.TypeOf((*InvalidNetworkResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidNetworkResourceFault InvalidNetworkResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidNetworkResourceFault"] = reflect.TypeOf((*InvalidNetworkResourceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidOperationOnSecondaryVm struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid string `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidOperationOnSecondaryVm"] = reflect.TypeOf((*InvalidOperationOnSecondaryVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidOperationOnSecondaryVmFault InvalidOperationOnSecondaryVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidOperationOnSecondaryVmFault"] = reflect.TypeOf((*InvalidOperationOnSecondaryVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPowerState struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedState VirtualMachinePowerState `xml:"requestedState,omitempty"`
0000000000000000000000000000000000000000;;		ExistingState  VirtualMachinePowerState `xml:"existingState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPowerState"] = reflect.TypeOf((*InvalidPowerState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPowerStateFault InvalidPowerState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPowerStateFault"] = reflect.TypeOf((*InvalidPowerStateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPrivilege struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Privilege string `xml:"privilege"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPrivilege"] = reflect.TypeOf((*InvalidPrivilege)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPrivilegeFault InvalidPrivilege
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPrivilegeFault"] = reflect.TypeOf((*InvalidPrivilegeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidProfileReferenceHost struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason      string                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		Host        *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Profile     *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;		ProfileName string                  `xml:"profileName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidProfileReferenceHost"] = reflect.TypeOf((*InvalidProfileReferenceHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidProfileReferenceHostFault InvalidProfileReferenceHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidProfileReferenceHostFault"] = reflect.TypeOf((*InvalidProfileReferenceHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidProperty struct {
0000000000000000000000000000000000000000;;		MethodFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidProperty"] = reflect.TypeOf((*InvalidProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPropertyFault InvalidProperty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPropertyFault"] = reflect.TypeOf((*InvalidPropertyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPropertyType struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPropertyType"] = reflect.TypeOf((*InvalidPropertyType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPropertyTypeFault InvalidPropertyType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPropertyTypeFault"] = reflect.TypeOf((*InvalidPropertyTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPropertyValue struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPropertyValue"] = reflect.TypeOf((*InvalidPropertyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidPropertyValueFault BaseInvalidPropertyValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidPropertyValueFault"] = reflect.TypeOf((*InvalidPropertyValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidRequest struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidRequest"] = reflect.TypeOf((*InvalidRequest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidRequestFault BaseInvalidRequest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidRequestFault"] = reflect.TypeOf((*InvalidRequestFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidResourcePoolStructureFault struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidResourcePoolStructureFault"] = reflect.TypeOf((*InvalidResourcePoolStructureFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidResourcePoolStructureFaultFault InvalidResourcePoolStructureFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidResourcePoolStructureFaultFault"] = reflect.TypeOf((*InvalidResourcePoolStructureFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidSnapshotFormat struct {
0000000000000000000000000000000000000000;;		InvalidFormat
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidSnapshotFormat"] = reflect.TypeOf((*InvalidSnapshotFormat)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidSnapshotFormatFault InvalidSnapshotFormat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidSnapshotFormatFault"] = reflect.TypeOf((*InvalidSnapshotFormatFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidState struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidState"] = reflect.TypeOf((*InvalidState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidStateFault BaseInvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidStateFault"] = reflect.TypeOf((*InvalidStateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidType struct {
0000000000000000000000000000000000000000;;		InvalidRequest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Argument string `xml:"argument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidType"] = reflect.TypeOf((*InvalidType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidTypeFault InvalidType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidTypeFault"] = reflect.TypeOf((*InvalidTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidVmConfig struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Property string `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidVmConfig"] = reflect.TypeOf((*InvalidVmConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidVmConfigFault BaseInvalidVmConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidVmConfigFault"] = reflect.TypeOf((*InvalidVmConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidVmState struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidVmState"] = reflect.TypeOf((*InvalidVmState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InvalidVmStateFault InvalidVmState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InvalidVmStateFault"] = reflect.TypeOf((*InvalidVmStateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InventoryDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumHosts           int32 `xml:"numHosts"`
0000000000000000000000000000000000000000;;		NumVirtualMachines int32 `xml:"numVirtualMachines"`
0000000000000000000000000000000000000000;;		NumResourcePools   int32 `xml:"numResourcePools,omitempty"`
0000000000000000000000000000000000000000;;		NumClusters        int32 `xml:"numClusters,omitempty"`
0000000000000000000000000000000000000000;;		NumCpuDev          int32 `xml:"numCpuDev,omitempty"`
0000000000000000000000000000000000000000;;		NumNetDev          int32 `xml:"numNetDev,omitempty"`
0000000000000000000000000000000000000000;;		NumDiskDev         int32 `xml:"numDiskDev,omitempty"`
0000000000000000000000000000000000000000;;		NumvCpuDev         int32 `xml:"numvCpuDev,omitempty"`
0000000000000000000000000000000000000000;;		NumvNetDev         int32 `xml:"numvNetDev,omitempty"`
0000000000000000000000000000000000000000;;		NumvDiskDev        int32 `xml:"numvDiskDev,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InventoryDescription"] = reflect.TypeOf((*InventoryDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InventoryHasStandardAloneHosts struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []string `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InventoryHasStandardAloneHosts"] = reflect.TypeOf((*InventoryHasStandardAloneHosts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InventoryHasStandardAloneHostsFault InventoryHasStandardAloneHosts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InventoryHasStandardAloneHostsFault"] = reflect.TypeOf((*InventoryHasStandardAloneHostsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IoFilterHostIssue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Issue []LocalizedMethodFault `xml:"issue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IoFilterHostIssue"] = reflect.TypeOf((*IoFilterHostIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IoFilterInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id          string `xml:"id"`
0000000000000000000000000000000000000000;;		Name        string `xml:"name"`
0000000000000000000000000000000000000000;;		Vendor      string `xml:"vendor"`
0000000000000000000000000000000000000000;;		Version     string `xml:"version"`
0000000000000000000000000000000000000000;;		Type        string `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Summary     string `xml:"summary,omitempty"`
0000000000000000000000000000000000000000;;		ReleaseDate string `xml:"releaseDate,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IoFilterInfo"] = reflect.TypeOf((*IoFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IoFilterQueryIssueResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpType    string              `xml:"opType"`
0000000000000000000000000000000000000000;;		HostIssue []IoFilterHostIssue `xml:"hostIssue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IoFilterQueryIssueResult"] = reflect.TypeOf((*IoFilterQueryIssueResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddress struct {
0000000000000000000000000000000000000000;;		NegatableExpression
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpAddress"] = reflect.TypeOf((*IpAddress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpAddressProfile"] = reflect.TypeOf((*IpAddressProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpHostnameGeneratorError struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpHostnameGeneratorError"] = reflect.TypeOf((*IpHostnameGeneratorError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpHostnameGeneratorErrorFault IpHostnameGeneratorError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpHostnameGeneratorErrorFault"] = reflect.TypeOf((*IpHostnameGeneratorErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpPool struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id                     int32                   `xml:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                   string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Ipv4Config             *IpPoolIpPoolConfigInfo `xml:"ipv4Config,omitempty"`
0000000000000000000000000000000000000000;;		Ipv6Config             *IpPoolIpPoolConfigInfo `xml:"ipv6Config,omitempty"`
0000000000000000000000000000000000000000;;		DnsDomain              string                  `xml:"dnsDomain,omitempty"`
0000000000000000000000000000000000000000;;		DnsSearchPath          string                  `xml:"dnsSearchPath,omitempty"`
0000000000000000000000000000000000000000;;		HostPrefix             string                  `xml:"hostPrefix,omitempty"`
0000000000000000000000000000000000000000;;		HttpProxy              string                  `xml:"httpProxy,omitempty"`
0000000000000000000000000000000000000000;;		NetworkAssociation     []IpPoolAssociation     `xml:"networkAssociation,omitempty"`
0000000000000000000000000000000000000000;;		AvailableIpv4Addresses int32                   `xml:"availableIpv4Addresses,omitempty"`
0000000000000000000000000000000000000000;;		AvailableIpv6Addresses int32                   `xml:"availableIpv6Addresses,omitempty"`
0000000000000000000000000000000000000000;;		AllocatedIpv4Addresses int32                   `xml:"allocatedIpv4Addresses,omitempty"`
0000000000000000000000000000000000000000;;		AllocatedIpv6Addresses int32                   `xml:"allocatedIpv6Addresses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpPool"] = reflect.TypeOf((*IpPool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpPoolAssociation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network     *ManagedObjectReference `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		NetworkName string                  `xml:"networkName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpPoolAssociation"] = reflect.TypeOf((*IpPoolAssociation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpPoolIpPoolConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SubnetAddress       string   `xml:"subnetAddress,omitempty"`
0000000000000000000000000000000000000000;;		Netmask             string   `xml:"netmask,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string   `xml:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Range               string   `xml:"range,omitempty"`
0000000000000000000000000000000000000000;;		Dns                 []string `xml:"dns,omitempty"`
0000000000000000000000000000000000000000;;		DhcpServerAvailable *bool    `xml:"dhcpServerAvailable"`
0000000000000000000000000000000000000000;;		IpPoolEnabled       *bool    `xml:"ipPoolEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpPoolIpPoolConfigInfo"] = reflect.TypeOf((*IpPoolIpPoolConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpPoolManagerIpAllocation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress    string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		AllocationId string `xml:"allocationId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpPoolManagerIpAllocation"] = reflect.TypeOf((*IpPoolManagerIpAllocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpRange struct {
0000000000000000000000000000000000000000;;		IpAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AddressPrefix string `xml:"addressPrefix"`
0000000000000000000000000000000000000000;;		PrefixLength  int32  `xml:"prefixLength,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpRange"] = reflect.TypeOf((*IpRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpRouteProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StaticRoute []StaticRouteProfile `xml:"staticRoute,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpRouteProfile"] = reflect.TypeOf((*IpRouteProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IsSharedGraphicsActive IsSharedGraphicsActiveRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IsSharedGraphicsActive"] = reflect.TypeOf((*IsSharedGraphicsActive)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IsSharedGraphicsActiveRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IsSharedGraphicsActiveRequestType"] = reflect.TypeOf((*IsSharedGraphicsActiveRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IsSharedGraphicsActiveResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiDependencyEntity struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PnicDevice string `xml:"pnicDevice"`
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;		VmhbaName  string `xml:"vmhbaName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiDependencyEntity"] = reflect.TypeOf((*IscsiDependencyEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFault"] = reflect.TypeOf((*IscsiFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultFault BaseIscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultFault"] = reflect.TypeOf((*IscsiFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultInvalidVnic struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultInvalidVnic"] = reflect.TypeOf((*IscsiFaultInvalidVnic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultInvalidVnicFault IscsiFaultInvalidVnic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultInvalidVnicFault"] = reflect.TypeOf((*IscsiFaultInvalidVnicFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultPnicInUse struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PnicDevice string `xml:"pnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultPnicInUse"] = reflect.TypeOf((*IscsiFaultPnicInUse)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultPnicInUseFault IscsiFaultPnicInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultPnicInUseFault"] = reflect.TypeOf((*IscsiFaultPnicInUseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicAlreadyBound struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicAlreadyBound"] = reflect.TypeOf((*IscsiFaultVnicAlreadyBound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicAlreadyBoundFault IscsiFaultVnicAlreadyBound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicAlreadyBoundFault"] = reflect.TypeOf((*IscsiFaultVnicAlreadyBoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasActivePaths struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasActivePaths"] = reflect.TypeOf((*IscsiFaultVnicHasActivePaths)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasActivePathsFault IscsiFaultVnicHasActivePaths
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasActivePathsFault"] = reflect.TypeOf((*IscsiFaultVnicHasActivePathsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasMultipleUplinks struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasMultipleUplinks"] = reflect.TypeOf((*IscsiFaultVnicHasMultipleUplinks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasMultipleUplinksFault IscsiFaultVnicHasMultipleUplinks
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasMultipleUplinksFault"] = reflect.TypeOf((*IscsiFaultVnicHasMultipleUplinksFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasNoUplinks struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasNoUplinks"] = reflect.TypeOf((*IscsiFaultVnicHasNoUplinks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasNoUplinksFault IscsiFaultVnicHasNoUplinks
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasNoUplinksFault"] = reflect.TypeOf((*IscsiFaultVnicHasNoUplinksFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasWrongUplink struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasWrongUplink"] = reflect.TypeOf((*IscsiFaultVnicHasWrongUplink)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicHasWrongUplinkFault IscsiFaultVnicHasWrongUplink
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicHasWrongUplinkFault"] = reflect.TypeOf((*IscsiFaultVnicHasWrongUplinkFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicInUse struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicInUse"] = reflect.TypeOf((*IscsiFaultVnicInUse)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicInUseFault IscsiFaultVnicInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicInUseFault"] = reflect.TypeOf((*IscsiFaultVnicInUseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicIsLastPath struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicIsLastPath"] = reflect.TypeOf((*IscsiFaultVnicIsLastPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicIsLastPathFault IscsiFaultVnicIsLastPath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicIsLastPathFault"] = reflect.TypeOf((*IscsiFaultVnicIsLastPathFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicNotBound struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicNotBound"] = reflect.TypeOf((*IscsiFaultVnicNotBound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicNotBoundFault IscsiFaultVnicNotBound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicNotBoundFault"] = reflect.TypeOf((*IscsiFaultVnicNotBoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicNotFound struct {
0000000000000000000000000000000000000000;;		IscsiFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice string `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicNotFound"] = reflect.TypeOf((*IscsiFaultVnicNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiFaultVnicNotFoundFault IscsiFaultVnicNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiFaultVnicNotFoundFault"] = reflect.TypeOf((*IscsiFaultVnicNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiMigrationDependency struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MigrationAllowed bool                    `xml:"migrationAllowed"`
0000000000000000000000000000000000000000;;		DisallowReason   *IscsiStatus            `xml:"disallowReason,omitempty"`
0000000000000000000000000000000000000000;;		Dependency       []IscsiDependencyEntity `xml:"dependency,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiMigrationDependency"] = reflect.TypeOf((*IscsiMigrationDependency)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiPortInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VnicDevice        string          `xml:"vnicDevice,omitempty"`
0000000000000000000000000000000000000000;;		Vnic              *HostVirtualNic `xml:"vnic,omitempty"`
0000000000000000000000000000000000000000;;		PnicDevice        string          `xml:"pnicDevice,omitempty"`
0000000000000000000000000000000000000000;;		Pnic              *PhysicalNic    `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		SwitchName        string          `xml:"switchName,omitempty"`
0000000000000000000000000000000000000000;;		SwitchUuid        string          `xml:"switchUuid,omitempty"`
0000000000000000000000000000000000000000;;		PortgroupName     string          `xml:"portgroupName,omitempty"`
0000000000000000000000000000000000000000;;		PortgroupKey      string          `xml:"portgroupKey,omitempty"`
0000000000000000000000000000000000000000;;		PortKey           string          `xml:"portKey,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueNetworkId   string          `xml:"opaqueNetworkId,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueNetworkType string          `xml:"opaqueNetworkType,omitempty"`
0000000000000000000000000000000000000000;;		OpaqueNetworkName string          `xml:"opaqueNetworkName,omitempty"`
0000000000000000000000000000000000000000;;		ExternalId        string          `xml:"externalId,omitempty"`
0000000000000000000000000000000000000000;;		ComplianceStatus  *IscsiStatus    `xml:"complianceStatus,omitempty"`
0000000000000000000000000000000000000000;;		PathStatus        string          `xml:"pathStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiPortInfo"] = reflect.TypeOf((*IscsiPortInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason []LocalizedMethodFault `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiStatus"] = reflect.TypeOf((*IscsiStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IsoImageFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IsoImageFileInfo"] = reflect.TypeOf((*IsoImageFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IsoImageFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IsoImageFileQuery"] = reflect.TypeOf((*IsoImageFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JoinDomainRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DomainName string                 `xml:"domainName"`
0000000000000000000000000000000000000000;;		UserName   string                 `xml:"userName"`
0000000000000000000000000000000000000000;;		Password   string                 `xml:"password"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["JoinDomainRequestType"] = reflect.TypeOf((*JoinDomainRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JoinDomainWithCAMRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DomainName string                 `xml:"domainName"`
0000000000000000000000000000000000000000;;		CamServer  string                 `xml:"camServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["JoinDomainWithCAMRequestType"] = reflect.TypeOf((*JoinDomainWithCAMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JoinDomainWithCAM_Task JoinDomainWithCAMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["JoinDomainWithCAM_Task"] = reflect.TypeOf((*JoinDomainWithCAM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JoinDomainWithCAM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JoinDomain_Task JoinDomainRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["JoinDomain_Task"] = reflect.TypeOf((*JoinDomain_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JoinDomain_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KernelModuleInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id              int32                   `xml:"id"`
0000000000000000000000000000000000000000;;		Name            string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Version         string                  `xml:"version"`
0000000000000000000000000000000000000000;;		Filename        string                  `xml:"filename"`
0000000000000000000000000000000000000000;;		OptionString    string                  `xml:"optionString"`
0000000000000000000000000000000000000000;;		Loaded          bool                    `xml:"loaded"`
0000000000000000000000000000000000000000;;		Enabled         bool                    `xml:"enabled"`
0000000000000000000000000000000000000000;;		UseCount        int32                   `xml:"useCount"`
0000000000000000000000000000000000000000;;		ReadOnlySection KernelModuleSectionInfo `xml:"readOnlySection"`
0000000000000000000000000000000000000000;;		WritableSection KernelModuleSectionInfo `xml:"writableSection"`
0000000000000000000000000000000000000000;;		TextSection     KernelModuleSectionInfo `xml:"textSection"`
0000000000000000000000000000000000000000;;		DataSection     KernelModuleSectionInfo `xml:"dataSection"`
0000000000000000000000000000000000000000;;		BssSection      KernelModuleSectionInfo `xml:"bssSection"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KernelModuleInfo"] = reflect.TypeOf((*KernelModuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KernelModuleSectionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address int64 `xml:"address"`
0000000000000000000000000000000000000000;;		Length  int32 `xml:"length,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KernelModuleSectionInfo"] = reflect.TypeOf((*KernelModuleSectionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KeyAnyValue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string  `xml:"key"`
0000000000000000000000000000000000000000;;		Value AnyType `xml:"value,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KeyAnyValue"] = reflect.TypeOf((*KeyAnyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KeyProviderId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id string `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KeyProviderId"] = reflect.TypeOf((*KeyProviderId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KeyValue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string `xml:"key"`
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KeyValue"] = reflect.TypeOf((*KeyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KmipClusterInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterId    KeyProviderId    `xml:"clusterId"`
0000000000000000000000000000000000000000;;		Servers      []KmipServerInfo `xml:"servers,omitempty"`
0000000000000000000000000000000000000000;;		UseAsDefault bool             `xml:"useAsDefault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KmipClusterInfo"] = reflect.TypeOf((*KmipClusterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KmipServerInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name         string `xml:"name"`
0000000000000000000000000000000000000000;;		Address      string `xml:"address"`
0000000000000000000000000000000000000000;;		Port         int32  `xml:"port"`
0000000000000000000000000000000000000000;;		ProxyAddress string `xml:"proxyAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProxyPort    int32  `xml:"proxyPort,omitempty"`
0000000000000000000000000000000000000000;;		Reconnect    int32  `xml:"reconnect,omitempty"`
0000000000000000000000000000000000000000;;		Protocol     string `xml:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		Nbio         int32  `xml:"nbio,omitempty"`
0000000000000000000000000000000000000000;;		Timeout      int32  `xml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;		UserName     string `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KmipServerInfo"] = reflect.TypeOf((*KmipServerInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KmipServerSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterId KeyProviderId  `xml:"clusterId"`
0000000000000000000000000000000000000000;;		Info      KmipServerInfo `xml:"info"`
0000000000000000000000000000000000000000;;		Password  string         `xml:"password,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KmipServerSpec"] = reflect.TypeOf((*KmipServerSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KmipServerStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterId   KeyProviderId       `xml:"clusterId"`
0000000000000000000000000000000000000000;;		Name        string              `xml:"name"`
0000000000000000000000000000000000000000;;		Status      ManagedEntityStatus `xml:"status"`
0000000000000000000000000000000000000000;;		Description string              `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["KmipServerStatus"] = reflect.TypeOf((*KmipServerStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LargeRDMConversionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LargeRDMConversionNotSupported"] = reflect.TypeOf((*LargeRDMConversionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LargeRDMConversionNotSupportedFault LargeRDMConversionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LargeRDMConversionNotSupportedFault"] = reflect.TypeOf((*LargeRDMConversionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LargeRDMNotSupportedOnDatastore struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device        string                 `xml:"device"`
0000000000000000000000000000000000000000;;		Datastore     ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		DatastoreName string                 `xml:"datastoreName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LargeRDMNotSupportedOnDatastore"] = reflect.TypeOf((*LargeRDMNotSupportedOnDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LargeRDMNotSupportedOnDatastoreFault LargeRDMNotSupportedOnDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LargeRDMNotSupportedOnDatastoreFault"] = reflect.TypeOf((*LargeRDMNotSupportedOnDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LatencySensitivity struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Level       LatencySensitivitySensitivityLevel `xml:"level"`
0000000000000000000000000000000000000000;;		Sensitivity int32                              `xml:"sensitivity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LatencySensitivity"] = reflect.TypeOf((*LatencySensitivity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LeaveCurrentDomainRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LeaveCurrentDomainRequestType"] = reflect.TypeOf((*LeaveCurrentDomainRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LeaveCurrentDomain_Task LeaveCurrentDomainRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LeaveCurrentDomain_Task"] = reflect.TypeOf((*LeaveCurrentDomain_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LeaveCurrentDomain_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LegacyNetworkInterfaceInUse struct {
0000000000000000000000000000000000000000;;		CannotAccessNetwork
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LegacyNetworkInterfaceInUse"] = reflect.TypeOf((*LegacyNetworkInterfaceInUse)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LegacyNetworkInterfaceInUseFault LegacyNetworkInterfaceInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LegacyNetworkInterfaceInUseFault"] = reflect.TypeOf((*LegacyNetworkInterfaceInUseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseAssignmentFailed struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseAssignmentFailed"] = reflect.TypeOf((*LicenseAssignmentFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseAssignmentFailedFault LicenseAssignmentFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseAssignmentFailedFault"] = reflect.TypeOf((*LicenseAssignmentFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseAssignmentManagerLicenseAssignment struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityId          string                    `xml:"entityId"`
0000000000000000000000000000000000000000;;		Scope             string                    `xml:"scope,omitempty"`
0000000000000000000000000000000000000000;;		EntityDisplayName string                    `xml:"entityDisplayName,omitempty"`
0000000000000000000000000000000000000000;;		AssignedLicense   LicenseManagerLicenseInfo `xml:"assignedLicense"`
0000000000000000000000000000000000000000;;		Properties        []KeyAnyValue             `xml:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseAssignmentManagerLicenseAssignment"] = reflect.TypeOf((*LicenseAssignmentManagerLicenseAssignment)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseAvailabilityInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Feature   LicenseFeatureInfo `xml:"feature"`
0000000000000000000000000000000000000000;;		Total     int32              `xml:"total"`
0000000000000000000000000000000000000000;;		Available int32              `xml:"available"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseAvailabilityInfo"] = reflect.TypeOf((*LicenseAvailabilityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseDiagnostics struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceLastChanged      time.Time           `xml:"sourceLastChanged"`
0000000000000000000000000000000000000000;;		SourceLost             string              `xml:"sourceLost"`
0000000000000000000000000000000000000000;;		SourceLatency          float32             `xml:"sourceLatency"`
0000000000000000000000000000000000000000;;		LicenseRequests        string              `xml:"licenseRequests"`
0000000000000000000000000000000000000000;;		LicenseRequestFailures string              `xml:"licenseRequestFailures"`
0000000000000000000000000000000000000000;;		LicenseFeatureUnknowns string              `xml:"licenseFeatureUnknowns"`
0000000000000000000000000000000000000000;;		OpState                LicenseManagerState `xml:"opState"`
0000000000000000000000000000000000000000;;		LastStatusUpdate       time.Time           `xml:"lastStatusUpdate"`
0000000000000000000000000000000000000000;;		OpFailureMessage       string              `xml:"opFailureMessage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseDiagnostics"] = reflect.TypeOf((*LicenseDiagnostics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseDowngradeDisallowed struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Edition  string        `xml:"edition"`
0000000000000000000000000000000000000000;;		EntityId string        `xml:"entityId"`
0000000000000000000000000000000000000000;;		Features []KeyAnyValue `xml:"features"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseDowngradeDisallowed"] = reflect.TypeOf((*LicenseDowngradeDisallowed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseDowngradeDisallowedFault LicenseDowngradeDisallowed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseDowngradeDisallowedFault"] = reflect.TypeOf((*LicenseDowngradeDisallowedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseEntityNotFound struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityId string `xml:"entityId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseEntityNotFound"] = reflect.TypeOf((*LicenseEntityNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseEntityNotFoundFault LicenseEntityNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseEntityNotFoundFault"] = reflect.TypeOf((*LicenseEntityNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseEvent"] = reflect.TypeOf((*LicenseEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseExpired struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseKey string `xml:"licenseKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseExpired"] = reflect.TypeOf((*LicenseExpired)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseExpiredEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Feature LicenseFeatureInfo `xml:"feature"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseExpiredEvent"] = reflect.TypeOf((*LicenseExpiredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseExpiredFault LicenseExpired
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseExpiredFault"] = reflect.TypeOf((*LicenseExpiredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseFeatureInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                string                  `xml:"key"`
0000000000000000000000000000000000000000;;		FeatureName        string                  `xml:"featureName"`
0000000000000000000000000000000000000000;;		FeatureDescription string                  `xml:"featureDescription,omitempty"`
0000000000000000000000000000000000000000;;		State              LicenseFeatureInfoState `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		CostUnit           string                  `xml:"costUnit"`
0000000000000000000000000000000000000000;;		SourceRestriction  string                  `xml:"sourceRestriction,omitempty"`
0000000000000000000000000000000000000000;;		DependentKey       []string                `xml:"dependentKey,omitempty"`
0000000000000000000000000000000000000000;;		Edition            *bool                   `xml:"edition"`
0000000000000000000000000000000000000000;;		ExpiresOn          *time.Time              `xml:"expiresOn"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseFeatureInfo"] = reflect.TypeOf((*LicenseFeatureInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseKeyEntityMismatch struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseKeyEntityMismatch"] = reflect.TypeOf((*LicenseKeyEntityMismatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseKeyEntityMismatchFault LicenseKeyEntityMismatch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseKeyEntityMismatchFault"] = reflect.TypeOf((*LicenseKeyEntityMismatchFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseManagerEvaluationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Properties []KeyAnyValue `xml:"properties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseManagerEvaluationInfo"] = reflect.TypeOf((*LicenseManagerEvaluationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseManagerLicenseInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseKey string        `xml:"licenseKey"`
0000000000000000000000000000000000000000;;		EditionKey string        `xml:"editionKey"`
0000000000000000000000000000000000000000;;		Name       string        `xml:"name"`
0000000000000000000000000000000000000000;;		Total      int32         `xml:"total"`
0000000000000000000000000000000000000000;;		Used       int32         `xml:"used,omitempty"`
0000000000000000000000000000000000000000;;		CostUnit   string        `xml:"costUnit"`
0000000000000000000000000000000000000000;;		Properties []KeyAnyValue `xml:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Labels     []KeyValue    `xml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseManagerLicenseInfo"] = reflect.TypeOf((*LicenseManagerLicenseInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseNonComplianceEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url string `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseNonComplianceEvent"] = reflect.TypeOf((*LicenseNonComplianceEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseReservationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      string                      `xml:"key"`
0000000000000000000000000000000000000000;;		State    LicenseReservationInfoState `xml:"state"`
0000000000000000000000000000000000000000;;		Required int32                       `xml:"required"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseReservationInfo"] = reflect.TypeOf((*LicenseReservationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseRestricted struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseRestricted"] = reflect.TypeOf((*LicenseRestricted)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseRestrictedEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseRestrictedEvent"] = reflect.TypeOf((*LicenseRestrictedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseRestrictedFault LicenseRestricted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseRestrictedFault"] = reflect.TypeOf((*LicenseRestrictedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseServerAvailableEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseServer string `xml:"licenseServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseServerAvailableEvent"] = reflect.TypeOf((*LicenseServerAvailableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseServerSource struct {
0000000000000000000000000000000000000000;;		LicenseSource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseServer string `xml:"licenseServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseServerSource"] = reflect.TypeOf((*LicenseServerSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseServerUnavailable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseServer string `xml:"licenseServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseServerUnavailable"] = reflect.TypeOf((*LicenseServerUnavailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseServerUnavailableEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseServer string `xml:"licenseServer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseServerUnavailableEvent"] = reflect.TypeOf((*LicenseServerUnavailableEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseServerUnavailableFault LicenseServerUnavailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseServerUnavailableFault"] = reflect.TypeOf((*LicenseServerUnavailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseSource struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseSource"] = reflect.TypeOf((*LicenseSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseSourceUnavailable struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseSource BaseLicenseSource `xml:"licenseSource,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseSourceUnavailable"] = reflect.TypeOf((*LicenseSourceUnavailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseSourceUnavailableFault LicenseSourceUnavailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseSourceUnavailableFault"] = reflect.TypeOf((*LicenseSourceUnavailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseUsageInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source          BaseLicenseSource        `xml:"source,typeattr"`
0000000000000000000000000000000000000000;;		SourceAvailable bool                     `xml:"sourceAvailable"`
0000000000000000000000000000000000000000;;		ReservationInfo []LicenseReservationInfo `xml:"reservationInfo,omitempty"`
0000000000000000000000000000000000000000;;		FeatureInfo     []LicenseFeatureInfo     `xml:"featureInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseUsageInfo"] = reflect.TypeOf((*LicenseUsageInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LimitExceeded struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Property string `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;		Limit    int32  `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LimitExceeded"] = reflect.TypeOf((*LimitExceeded)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LimitExceededFault LimitExceeded
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LimitExceededFault"] = reflect.TypeOf((*LimitExceededFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinkDiscoveryProtocolConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Protocol  string `xml:"protocol"`
0000000000000000000000000000000000000000;;		Operation string `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LinkDiscoveryProtocolConfig"] = reflect.TypeOf((*LinkDiscoveryProtocolConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinkLayerDiscoveryProtocolInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChassisId  string        `xml:"chassisId"`
0000000000000000000000000000000000000000;;		PortId     string        `xml:"portId"`
0000000000000000000000000000000000000000;;		TimeToLive int32         `xml:"timeToLive"`
0000000000000000000000000000000000000000;;		Parameter  []KeyAnyValue `xml:"parameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LinkLayerDiscoveryProtocolInfo"] = reflect.TypeOf((*LinkLayerDiscoveryProtocolInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinkProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LinkProfile"] = reflect.TypeOf((*LinkProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxVolumeNotClean struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LinuxVolumeNotClean"] = reflect.TypeOf((*LinuxVolumeNotClean)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxVolumeNotCleanFault LinuxVolumeNotClean
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LinuxVolumeNotCleanFault"] = reflect.TypeOf((*LinuxVolumeNotCleanFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListCACertificateRevocationLists ListCACertificateRevocationListsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListCACertificateRevocationLists"] = reflect.TypeOf((*ListCACertificateRevocationLists)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListCACertificateRevocationListsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListCACertificateRevocationListsRequestType"] = reflect.TypeOf((*ListCACertificateRevocationListsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListCACertificateRevocationListsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListCACertificates ListCACertificatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListCACertificates"] = reflect.TypeOf((*ListCACertificates)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListCACertificatesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListCACertificatesRequestType"] = reflect.TypeOf((*ListCACertificatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListCACertificatesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListFilesInGuest ListFilesInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListFilesInGuest"] = reflect.TypeOf((*ListFilesInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListFilesInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm           ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth         BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		FilePath     string                  `xml:"filePath"`
0000000000000000000000000000000000000000;;		Index        int32                   `xml:"index,omitempty"`
0000000000000000000000000000000000000000;;		MaxResults   int32                   `xml:"maxResults,omitempty"`
0000000000000000000000000000000000000000;;		MatchPattern string                  `xml:"matchPattern,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListFilesInGuestRequestType"] = reflect.TypeOf((*ListFilesInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListFilesInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval GuestListFileInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListGuestAliases ListGuestAliasesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListGuestAliases"] = reflect.TypeOf((*ListGuestAliases)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListGuestAliasesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm       ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth     BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Username string                  `xml:"username"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListGuestAliasesRequestType"] = reflect.TypeOf((*ListGuestAliasesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListGuestAliasesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []GuestAliases `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListGuestMappedAliases ListGuestMappedAliasesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListGuestMappedAliases"] = reflect.TypeOf((*ListGuestMappedAliases)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListGuestMappedAliasesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListGuestMappedAliasesRequestType"] = reflect.TypeOf((*ListGuestMappedAliasesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListGuestMappedAliasesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []GuestMappedAliases `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListKeys ListKeysRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListKeys"] = reflect.TypeOf((*ListKeys)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListKeysRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Limit int32                  `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListKeysRequestType"] = reflect.TypeOf((*ListKeysRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListKeysResponse struct {
0000000000000000000000000000000000000000;;		Returnval []CryptoKeyId `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListKmipServers ListKmipServersRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListKmipServers"] = reflect.TypeOf((*ListKmipServers)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListKmipServersRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Limit int32                  `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListKmipServersRequestType"] = reflect.TypeOf((*ListKmipServersRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListKmipServersResponse struct {
0000000000000000000000000000000000000000;;		Returnval []KmipClusterInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListProcessesInGuest ListProcessesInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListProcessesInGuest"] = reflect.TypeOf((*ListProcessesInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListProcessesInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Pids []int64                 `xml:"pids,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListProcessesInGuestRequestType"] = reflect.TypeOf((*ListProcessesInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListProcessesInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval []GuestProcessInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRegistryKeysInGuest ListRegistryKeysInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListRegistryKeysInGuest"] = reflect.TypeOf((*ListRegistryKeysInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRegistryKeysInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm           ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth         BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		KeyName      GuestRegKeyNameSpec     `xml:"keyName"`
0000000000000000000000000000000000000000;;		Recursive    bool                    `xml:"recursive"`
0000000000000000000000000000000000000000;;		MatchPattern string                  `xml:"matchPattern,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListRegistryKeysInGuestRequestType"] = reflect.TypeOf((*ListRegistryKeysInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRegistryKeysInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval []GuestRegKeyRecordSpec `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRegistryValuesInGuest ListRegistryValuesInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListRegistryValuesInGuest"] = reflect.TypeOf((*ListRegistryValuesInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRegistryValuesInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth          BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		KeyName       GuestRegKeyNameSpec     `xml:"keyName"`
0000000000000000000000000000000000000000;;		ExpandStrings bool                    `xml:"expandStrings"`
0000000000000000000000000000000000000000;;		MatchPattern  string                  `xml:"matchPattern,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListRegistryValuesInGuestRequestType"] = reflect.TypeOf((*ListRegistryValuesInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRegistryValuesInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval []GuestRegValueSpec `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListSmartCardTrustAnchors ListSmartCardTrustAnchorsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListSmartCardTrustAnchors"] = reflect.TypeOf((*ListSmartCardTrustAnchors)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListSmartCardTrustAnchorsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListSmartCardTrustAnchorsRequestType"] = reflect.TypeOf((*ListSmartCardTrustAnchorsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListSmartCardTrustAnchorsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListTagsAttachedToVStorageObject ListTagsAttachedToVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListTagsAttachedToVStorageObject"] = reflect.TypeOf((*ListTagsAttachedToVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListTagsAttachedToVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   ID                     `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListTagsAttachedToVStorageObjectRequestType"] = reflect.TypeOf((*ListTagsAttachedToVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListTagsAttachedToVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VslmTagEntry `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVStorageObject ListVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListVStorageObject"] = reflect.TypeOf((*ListVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListVStorageObjectRequestType"] = reflect.TypeOf((*ListVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ID `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVStorageObjectsAttachedToTag ListVStorageObjectsAttachedToTagRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListVStorageObjectsAttachedToTag"] = reflect.TypeOf((*ListVStorageObjectsAttachedToTag)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVStorageObjectsAttachedToTagRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Category string                 `xml:"category"`
0000000000000000000000000000000000000000;;		Tag      string                 `xml:"tag"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListVStorageObjectsAttachedToTagRequestType"] = reflect.TypeOf((*ListVStorageObjectsAttachedToTagRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVStorageObjectsAttachedToTagResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ID `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalDatastoreCreatedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore    DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;		DatastoreUrl string                 `xml:"datastoreUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalDatastoreCreatedEvent"] = reflect.TypeOf((*LocalDatastoreCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalDatastoreInfo struct {
0000000000000000000000000000000000000000;;		DatastoreInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path string `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalDatastoreInfo"] = reflect.TypeOf((*LocalDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalLicenseSource struct {
0000000000000000000000000000000000000000;;		LicenseSource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LicenseKeys string `xml:"licenseKeys"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalLicenseSource"] = reflect.TypeOf((*LocalLicenseSource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalTSMEnabledEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalTSMEnabledEvent"] = reflect.TypeOf((*LocalTSMEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalizableMessage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key     string        `xml:"key"`
0000000000000000000000000000000000000000;;		Arg     []KeyAnyValue `xml:"arg,omitempty"`
0000000000000000000000000000000000000000;;		Message string        `xml:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalizableMessage"] = reflect.TypeOf((*LocalizableMessage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalizationManagerMessageCatalog struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ModuleName   string     `xml:"moduleName"`
0000000000000000000000000000000000000000;;		CatalogName  string     `xml:"catalogName"`
0000000000000000000000000000000000000000;;		Locale       string     `xml:"locale"`
0000000000000000000000000000000000000000;;		CatalogUri   string     `xml:"catalogUri"`
0000000000000000000000000000000000000000;;		LastModified *time.Time `xml:"lastModified"`
0000000000000000000000000000000000000000;;		Md5sum       string     `xml:"md5sum,omitempty"`
0000000000000000000000000000000000000000;;		Version      string     `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalizationManagerMessageCatalog"] = reflect.TypeOf((*LocalizationManagerMessageCatalog)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalizedMethodFault struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault            BaseMethodFault `xml:"fault,typeattr"`
0000000000000000000000000000000000000000;;		LocalizedMessage string          `xml:"localizedMessage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalizedMethodFault"] = reflect.TypeOf((*LocalizedMethodFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LockerMisconfiguredEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LockerMisconfiguredEvent"] = reflect.TypeOf((*LockerMisconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LockerReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldDatastore *DatastoreEventArgument `xml:"oldDatastore,omitempty"`
0000000000000000000000000000000000000000;;		NewDatastore *DatastoreEventArgument `xml:"newDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LockerReconfiguredEvent"] = reflect.TypeOf((*LockerReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogBundlingFailed struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LogBundlingFailed"] = reflect.TypeOf((*LogBundlingFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogBundlingFailedFault LogBundlingFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LogBundlingFailedFault"] = reflect.TypeOf((*LogBundlingFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogUserEvent LogUserEventRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LogUserEvent"] = reflect.TypeOf((*LogUserEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogUserEventRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Msg    string                 `xml:"msg"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LogUserEventRequestType"] = reflect.TypeOf((*LogUserEventRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogUserEventResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Login LoginRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Login"] = reflect.TypeOf((*Login)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginBySSPI LoginBySSPIRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginBySSPI"] = reflect.TypeOf((*LoginBySSPI)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginBySSPIRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Base64Token string                 `xml:"base64Token"`
0000000000000000000000000000000000000000;;		Locale      string                 `xml:"locale,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginBySSPIRequestType"] = reflect.TypeOf((*LoginBySSPIRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginBySSPIResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginByToken LoginByTokenRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginByToken"] = reflect.TypeOf((*LoginByToken)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginByTokenRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Locale string                 `xml:"locale,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginByTokenRequestType"] = reflect.TypeOf((*LoginByTokenRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginByTokenResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginExtensionByCertificate LoginExtensionByCertificateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginExtensionByCertificate"] = reflect.TypeOf((*LoginExtensionByCertificate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginExtensionByCertificateRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		Locale       string                 `xml:"locale,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginExtensionByCertificateRequestType"] = reflect.TypeOf((*LoginExtensionByCertificateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginExtensionByCertificateResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginExtensionBySubjectName LoginExtensionBySubjectNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginExtensionBySubjectName"] = reflect.TypeOf((*LoginExtensionBySubjectName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginExtensionBySubjectNameRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		Locale       string                 `xml:"locale,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginExtensionBySubjectNameRequestType"] = reflect.TypeOf((*LoginExtensionBySubjectNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginExtensionBySubjectNameResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		UserName string                 `xml:"userName"`
0000000000000000000000000000000000000000;;		Password string                 `xml:"password"`
0000000000000000000000000000000000000000;;		Locale   string                 `xml:"locale,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LoginRequestType"] = reflect.TypeOf((*LoginRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoginResponse struct {
0000000000000000000000000000000000000000;;		Returnval UserSession `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Logout LogoutRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Logout"] = reflect.TypeOf((*Logout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogoutRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LogoutRequestType"] = reflect.TypeOf((*LogoutRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogoutResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LongOption struct {
0000000000000000000000000000000000000000;;		OptionType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Min          int64 `xml:"min"`
0000000000000000000000000000000000000000;;		Max          int64 `xml:"max"`
0000000000000000000000000000000000000000;;		DefaultValue int64 `xml:"defaultValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LongOption"] = reflect.TypeOf((*LongOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LongPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value int64 `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LongPolicy"] = reflect.TypeOf((*LongPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LookupDvPortGroup LookupDvPortGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LookupDvPortGroup"] = reflect.TypeOf((*LookupDvPortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LookupDvPortGroupRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PortgroupKey string                 `xml:"portgroupKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LookupDvPortGroupRequestType"] = reflect.TypeOf((*LookupDvPortGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LookupDvPortGroupResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LookupVmOverheadMemory LookupVmOverheadMemoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LookupVmOverheadMemory"] = reflect.TypeOf((*LookupVmOverheadMemory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LookupVmOverheadMemoryRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LookupVmOverheadMemoryRequestType"] = reflect.TypeOf((*LookupVmOverheadMemoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LookupVmOverheadMemoryResponse struct {
0000000000000000000000000000000000000000;;		Returnval int64 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MacAddress struct {
0000000000000000000000000000000000000000;;		NegatableExpression
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MacAddress"] = reflect.TypeOf((*MacAddress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MacRange struct {
0000000000000000000000000000000000000000;;		MacAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address string `xml:"address"`
0000000000000000000000000000000000000000;;		Mask    string `xml:"mask"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MacRange"] = reflect.TypeOf((*MacRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MaintenanceModeFileMove struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MaintenanceModeFileMove"] = reflect.TypeOf((*MaintenanceModeFileMove)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MaintenanceModeFileMoveFault MaintenanceModeFileMove
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MaintenanceModeFileMoveFault"] = reflect.TypeOf((*MaintenanceModeFileMoveFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakeDirectory MakeDirectoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MakeDirectory"] = reflect.TypeOf((*MakeDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakeDirectoryInGuest MakeDirectoryInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MakeDirectoryInGuest"] = reflect.TypeOf((*MakeDirectoryInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakeDirectoryInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This                    ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm                      ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth                    BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		DirectoryPath           string                  `xml:"directoryPath"`
0000000000000000000000000000000000000000;;		CreateParentDirectories bool                    `xml:"createParentDirectories"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MakeDirectoryInGuestRequestType"] = reflect.TypeOf((*MakeDirectoryInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakeDirectoryInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakeDirectoryRequestType struct {
0000000000000000000000000000000000000000;;		This                    ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name                    string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter              *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		CreateParentDirectories *bool                   `xml:"createParentDirectories"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MakeDirectoryRequestType"] = reflect.TypeOf((*MakeDirectoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakeDirectoryResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakePrimaryVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MakePrimaryVMRequestType"] = reflect.TypeOf((*MakePrimaryVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakePrimaryVM_Task MakePrimaryVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MakePrimaryVM_Task"] = reflect.TypeOf((*MakePrimaryVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MakePrimaryVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedByInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionKey string `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		Type         string `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedByInfo"] = reflect.TypeOf((*ManagedByInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedEntityEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedEntityEventArgument"] = reflect.TypeOf((*ManagedEntityEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedObjectNotFound struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Obj ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedObjectNotFound"] = reflect.TypeOf((*ManagedObjectNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedObjectNotFoundFault ManagedObjectNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedObjectNotFoundFault"] = reflect.TypeOf((*ManagedObjectNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedObjectReference struct {
0000000000000000000000000000000000000000;;		Type  string `xml:"type,attr"`
0000000000000000000000000000000000000000;;		Value string `xml:",chardata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedObjectReference"] = reflect.TypeOf((*ManagedObjectReference)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsLocalRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ScsiDiskUuid string                 `xml:"scsiDiskUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsLocalRequestType"] = reflect.TypeOf((*MarkAsLocalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsLocal_Task MarkAsLocalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsLocal_Task"] = reflect.TypeOf((*MarkAsLocal_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsLocal_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsNonLocalRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ScsiDiskUuid string                 `xml:"scsiDiskUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsNonLocalRequestType"] = reflect.TypeOf((*MarkAsNonLocalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsNonLocal_Task MarkAsNonLocalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsNonLocal_Task"] = reflect.TypeOf((*MarkAsNonLocal_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsNonLocal_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsNonSsdRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ScsiDiskUuid string                 `xml:"scsiDiskUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsNonSsdRequestType"] = reflect.TypeOf((*MarkAsNonSsdRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsNonSsd_Task MarkAsNonSsdRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsNonSsd_Task"] = reflect.TypeOf((*MarkAsNonSsd_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsNonSsd_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsSsdRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ScsiDiskUuid string                 `xml:"scsiDiskUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsSsdRequestType"] = reflect.TypeOf((*MarkAsSsdRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsSsd_Task MarkAsSsdRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsSsd_Task"] = reflect.TypeOf((*MarkAsSsd_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsSsd_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsTemplate MarkAsTemplateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsTemplate"] = reflect.TypeOf((*MarkAsTemplate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsTemplateRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsTemplateRequestType"] = reflect.TypeOf((*MarkAsTemplateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsTemplateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsVirtualMachine MarkAsVirtualMachineRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsVirtualMachine"] = reflect.TypeOf((*MarkAsVirtualMachine)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsVirtualMachineRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Pool ManagedObjectReference  `xml:"pool"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkAsVirtualMachineRequestType"] = reflect.TypeOf((*MarkAsVirtualMachineRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkAsVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkDefault MarkDefaultRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkDefault"] = reflect.TypeOf((*MarkDefault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkDefaultRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ClusterId KeyProviderId          `xml:"clusterId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkDefaultRequestType"] = reflect.TypeOf((*MarkDefaultRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkDefaultResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkForRemoval MarkForRemovalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkForRemoval"] = reflect.TypeOf((*MarkForRemoval)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkForRemovalRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		HbaName string                 `xml:"hbaName"`
0000000000000000000000000000000000000000;;		Remove  bool                   `xml:"remove"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MarkForRemovalRequestType"] = reflect.TypeOf((*MarkForRemovalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkForRemovalResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemoryFileFormatNotSupportedByDatastore struct {
0000000000000000000000000000000000000000;;		UnsupportedDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastoreName string `xml:"datastoreName"`
0000000000000000000000000000000000000000;;		Type          string `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemoryFileFormatNotSupportedByDatastore"] = reflect.TypeOf((*MemoryFileFormatNotSupportedByDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemoryFileFormatNotSupportedByDatastoreFault MemoryFileFormatNotSupportedByDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemoryFileFormatNotSupportedByDatastoreFault"] = reflect.TypeOf((*MemoryFileFormatNotSupportedByDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemoryHotPlugNotSupported struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemoryHotPlugNotSupported"] = reflect.TypeOf((*MemoryHotPlugNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemoryHotPlugNotSupportedFault MemoryHotPlugNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemoryHotPlugNotSupportedFault"] = reflect.TypeOf((*MemoryHotPlugNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySizeNotRecommended struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemorySizeMB    int32 `xml:"memorySizeMB"`
0000000000000000000000000000000000000000;;		MinMemorySizeMB int32 `xml:"minMemorySizeMB"`
0000000000000000000000000000000000000000;;		MaxMemorySizeMB int32 `xml:"maxMemorySizeMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySizeNotRecommended"] = reflect.TypeOf((*MemorySizeNotRecommended)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySizeNotRecommendedFault MemorySizeNotRecommended
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySizeNotRecommendedFault"] = reflect.TypeOf((*MemorySizeNotRecommendedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySizeNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemorySizeMB    int32 `xml:"memorySizeMB"`
0000000000000000000000000000000000000000;;		MinMemorySizeMB int32 `xml:"minMemorySizeMB"`
0000000000000000000000000000000000000000;;		MaxMemorySizeMB int32 `xml:"maxMemorySizeMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySizeNotSupported"] = reflect.TypeOf((*MemorySizeNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySizeNotSupportedByDatastore struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore       ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		MemorySizeMB    int32                  `xml:"memorySizeMB"`
0000000000000000000000000000000000000000;;		MaxMemorySizeMB int32                  `xml:"maxMemorySizeMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySizeNotSupportedByDatastore"] = reflect.TypeOf((*MemorySizeNotSupportedByDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySizeNotSupportedByDatastoreFault MemorySizeNotSupportedByDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySizeNotSupportedByDatastoreFault"] = reflect.TypeOf((*MemorySizeNotSupportedByDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySizeNotSupportedFault MemorySizeNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySizeNotSupportedFault"] = reflect.TypeOf((*MemorySizeNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySnapshotOnIndependentDisk struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySnapshotOnIndependentDisk"] = reflect.TypeOf((*MemorySnapshotOnIndependentDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySnapshotOnIndependentDiskFault MemorySnapshotOnIndependentDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MemorySnapshotOnIndependentDiskFault"] = reflect.TypeOf((*MemorySnapshotOnIndependentDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergeDvsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dvs  ManagedObjectReference `xml:"dvs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MergeDvsRequestType"] = reflect.TypeOf((*MergeDvsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergeDvs_Task MergeDvsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MergeDvs_Task"] = reflect.TypeOf((*MergeDvs_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergeDvs_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergePermissions MergePermissionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MergePermissions"] = reflect.TypeOf((*MergePermissions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergePermissionsRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SrcRoleId int32                  `xml:"srcRoleId"`
0000000000000000000000000000000000000000;;		DstRoleId int32                  `xml:"dstRoleId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MergePermissionsRequestType"] = reflect.TypeOf((*MergePermissionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergePermissionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodAction struct {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name     string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Argument []MethodActionArgument `xml:"argument,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodAction"] = reflect.TypeOf((*MethodAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodActionArgument struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value AnyType `xml:"value,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodActionArgument"] = reflect.TypeOf((*MethodActionArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodAlreadyDisabledFault struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceId string `xml:"sourceId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodAlreadyDisabledFault"] = reflect.TypeOf((*MethodAlreadyDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodAlreadyDisabledFaultFault MethodAlreadyDisabledFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodAlreadyDisabledFaultFault"] = reflect.TypeOf((*MethodAlreadyDisabledFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodDescription struct {
0000000000000000000000000000000000000000;;		Description
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodDescription"] = reflect.TypeOf((*MethodDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodDisabled struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source string `xml:"source,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodDisabled"] = reflect.TypeOf((*MethodDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodDisabledFault MethodDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodDisabledFault"] = reflect.TypeOf((*MethodDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodFault struct {
0000000000000000000000000000000000000000;;		FaultCause   *LocalizedMethodFault `xml:"faultCause,omitempty"`
0000000000000000000000000000000000000000;;		FaultMessage []LocalizableMessage  `xml:"faultMessage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodFault"] = reflect.TypeOf((*MethodFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodFaultFault BaseMethodFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodFaultFault"] = reflect.TypeOf((*MethodFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodNotFound struct {
0000000000000000000000000000000000000000;;		InvalidRequest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Receiver ManagedObjectReference `xml:"receiver"`
0000000000000000000000000000000000000000;;		Method   string                 `xml:"method"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodNotFound"] = reflect.TypeOf((*MethodNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MethodNotFoundFault MethodNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MethodNotFoundFault"] = reflect.TypeOf((*MethodNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricAlarmExpression struct {
0000000000000000000000000000000000000000;;		AlarmExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operator       MetricAlarmOperator `xml:"operator"`
0000000000000000000000000000000000000000;;		Type           string              `xml:"type"`
0000000000000000000000000000000000000000;;		Metric         PerfMetricId        `xml:"metric"`
0000000000000000000000000000000000000000;;		Yellow         int32               `xml:"yellow,omitempty"`
0000000000000000000000000000000000000000;;		YellowInterval int32               `xml:"yellowInterval,omitempty"`
0000000000000000000000000000000000000000;;		Red            int32               `xml:"red,omitempty"`
0000000000000000000000000000000000000000;;		RedInterval    int32               `xml:"redInterval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MetricAlarmExpression"] = reflect.TypeOf((*MetricAlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVMRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		Pool     *ManagedObjectReference    `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;		Host     *ManagedObjectReference    `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Priority VirtualMachineMovePriority `xml:"priority"`
0000000000000000000000000000000000000000;;		State    VirtualMachinePowerState   `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrateVMRequestType"] = reflect.TypeOf((*MigrateVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVM_Task MigrateVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrateVM_Task"] = reflect.TypeOf((*MigrateVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationDisabled struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationDisabled"] = reflect.TypeOf((*MigrationDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationDisabledFault MigrationDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationDisabledFault"] = reflect.TypeOf((*MigrationDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationErrorEvent struct {
0000000000000000000000000000000000000000;;		MigrationEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationErrorEvent"] = reflect.TypeOf((*MigrationErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationEvent"] = reflect.TypeOf((*MigrationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationFault"] = reflect.TypeOf((*MigrationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationFaultFault BaseMigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationFaultFault"] = reflect.TypeOf((*MigrationFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationFeatureNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AtSourceHost   bool                   `xml:"atSourceHost"`
0000000000000000000000000000000000000000;;		FailedHostName string                 `xml:"failedHostName"`
0000000000000000000000000000000000000000;;		FailedHost     ManagedObjectReference `xml:"failedHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationFeatureNotSupported"] = reflect.TypeOf((*MigrationFeatureNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationFeatureNotSupportedFault BaseMigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationFeatureNotSupportedFault"] = reflect.TypeOf((*MigrationFeatureNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationHostErrorEvent struct {
0000000000000000000000000000000000000000;;		MigrationEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DstHost HostEventArgument `xml:"dstHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationHostErrorEvent"] = reflect.TypeOf((*MigrationHostErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationHostWarningEvent struct {
0000000000000000000000000000000000000000;;		MigrationEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DstHost HostEventArgument `xml:"dstHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationHostWarningEvent"] = reflect.TypeOf((*MigrationHostWarningEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationNotReady struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationNotReady"] = reflect.TypeOf((*MigrationNotReady)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationNotReadyFault MigrationNotReady
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationNotReadyFault"] = reflect.TypeOf((*MigrationNotReadyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationResourceErrorEvent struct {
0000000000000000000000000000000000000000;;		MigrationEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DstPool ResourcePoolEventArgument `xml:"dstPool"`
0000000000000000000000000000000000000000;;		DstHost HostEventArgument         `xml:"dstHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationResourceErrorEvent"] = reflect.TypeOf((*MigrationResourceErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationResourceWarningEvent struct {
0000000000000000000000000000000000000000;;		MigrationEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DstPool ResourcePoolEventArgument `xml:"dstPool"`
0000000000000000000000000000000000000000;;		DstHost HostEventArgument         `xml:"dstHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationResourceWarningEvent"] = reflect.TypeOf((*MigrationResourceWarningEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationWarningEvent struct {
0000000000000000000000000000000000000000;;		MigrationEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MigrationWarningEvent"] = reflect.TypeOf((*MigrationWarningEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MismatchedBundle struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BundleUuid        string `xml:"bundleUuid"`
0000000000000000000000000000000000000000;;		HostUuid          string `xml:"hostUuid"`
0000000000000000000000000000000000000000;;		BundleBuildNumber int32  `xml:"bundleBuildNumber"`
0000000000000000000000000000000000000000;;		HostBuildNumber   int32  `xml:"hostBuildNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MismatchedBundle"] = reflect.TypeOf((*MismatchedBundle)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MismatchedBundleFault MismatchedBundle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MismatchedBundleFault"] = reflect.TypeOf((*MismatchedBundleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MismatchedNetworkPolicies struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device    string `xml:"device"`
0000000000000000000000000000000000000000;;		Backing   string `xml:"backing"`
0000000000000000000000000000000000000000;;		Connected bool   `xml:"connected"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MismatchedNetworkPolicies"] = reflect.TypeOf((*MismatchedNetworkPolicies)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MismatchedNetworkPoliciesFault MismatchedNetworkPolicies
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MismatchedNetworkPoliciesFault"] = reflect.TypeOf((*MismatchedNetworkPoliciesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MismatchedVMotionNetworkNames struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceNetwork string `xml:"sourceNetwork"`
0000000000000000000000000000000000000000;;		DestNetwork   string `xml:"destNetwork"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MismatchedVMotionNetworkNames"] = reflect.TypeOf((*MismatchedVMotionNetworkNames)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MismatchedVMotionNetworkNamesFault MismatchedVMotionNetworkNames
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MismatchedVMotionNetworkNamesFault"] = reflect.TypeOf((*MismatchedVMotionNetworkNamesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingBmcSupport struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingBmcSupport"] = reflect.TypeOf((*MissingBmcSupport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingBmcSupportFault MissingBmcSupport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingBmcSupportFault"] = reflect.TypeOf((*MissingBmcSupportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingController struct {
0000000000000000000000000000000000000000;;		InvalidDeviceSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingController"] = reflect.TypeOf((*MissingController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingControllerFault MissingController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingControllerFault"] = reflect.TypeOf((*MissingControllerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingIpPool struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingIpPool"] = reflect.TypeOf((*MissingIpPool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingIpPoolFault MissingIpPool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingIpPoolFault"] = reflect.TypeOf((*MissingIpPoolFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingLinuxCustResources struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingLinuxCustResources"] = reflect.TypeOf((*MissingLinuxCustResources)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingLinuxCustResourcesFault MissingLinuxCustResources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingLinuxCustResourcesFault"] = reflect.TypeOf((*MissingLinuxCustResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingNetworkIpConfig struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingNetworkIpConfig"] = reflect.TypeOf((*MissingNetworkIpConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingNetworkIpConfigFault MissingNetworkIpConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingNetworkIpConfigFault"] = reflect.TypeOf((*MissingNetworkIpConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingObject struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Obj   ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault   `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingObject"] = reflect.TypeOf((*MissingObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingPowerOffConfiguration struct {
0000000000000000000000000000000000000000;;		VAppConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingPowerOffConfiguration"] = reflect.TypeOf((*MissingPowerOffConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingPowerOffConfigurationFault MissingPowerOffConfiguration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingPowerOffConfigurationFault"] = reflect.TypeOf((*MissingPowerOffConfigurationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingPowerOnConfiguration struct {
0000000000000000000000000000000000000000;;		VAppConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingPowerOnConfiguration"] = reflect.TypeOf((*MissingPowerOnConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingPowerOnConfigurationFault MissingPowerOnConfiguration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingPowerOnConfigurationFault"] = reflect.TypeOf((*MissingPowerOnConfigurationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingProperty struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path  string               `xml:"path"`
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingProperty"] = reflect.TypeOf((*MissingProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingWindowsCustResources struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingWindowsCustResources"] = reflect.TypeOf((*MissingWindowsCustResources)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MissingWindowsCustResourcesFault MissingWindowsCustResources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MissingWindowsCustResourcesFault"] = reflect.TypeOf((*MissingWindowsCustResourcesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MksConnectionLimitReached struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConnectionLimit int32 `xml:"connectionLimit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MksConnectionLimitReached"] = reflect.TypeOf((*MksConnectionLimitReached)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MksConnectionLimitReachedFault MksConnectionLimitReached
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MksConnectionLimitReachedFault"] = reflect.TypeOf((*MksConnectionLimitReachedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ModeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Browse string `xml:"browse,omitempty"`
0000000000000000000000000000000000000000;;		Read   string `xml:"read"`
0000000000000000000000000000000000000000;;		Modify string `xml:"modify"`
0000000000000000000000000000000000000000;;		Use    string `xml:"use"`
0000000000000000000000000000000000000000;;		Admin  string `xml:"admin,omitempty"`
0000000000000000000000000000000000000000;;		Full   string `xml:"full"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ModeInfo"] = reflect.TypeOf((*ModeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ModifyListView ModifyListViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ModifyListView"] = reflect.TypeOf((*ModifyListView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ModifyListViewRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Add    []ManagedObjectReference `xml:"add,omitempty"`
0000000000000000000000000000000000000000;;		Remove []ManagedObjectReference `xml:"remove,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ModifyListViewRequestType"] = reflect.TypeOf((*ModifyListViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ModifyListViewResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MonthlyByDayTaskScheduler struct {
0000000000000000000000000000000000000000;;		MonthlyTaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Day int32 `xml:"day"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MonthlyByDayTaskScheduler"] = reflect.TypeOf((*MonthlyByDayTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MonthlyByWeekdayTaskScheduler struct {
0000000000000000000000000000000000000000;;		MonthlyTaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Offset  WeekOfMonth `xml:"offset"`
0000000000000000000000000000000000000000;;		Weekday DayOfWeek   `xml:"weekday"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MonthlyByWeekdayTaskScheduler"] = reflect.TypeOf((*MonthlyByWeekdayTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MonthlyTaskScheduler struct {
0000000000000000000000000000000000000000;;		DailyTaskScheduler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MonthlyTaskScheduler"] = reflect.TypeOf((*MonthlyTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountError struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm        ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		DiskIndex int32                  `xml:"diskIndex"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountError"] = reflect.TypeOf((*MountError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountErrorFault MountError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountErrorFault"] = reflect.TypeOf((*MountErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountToolsInstaller MountToolsInstallerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountToolsInstaller"] = reflect.TypeOf((*MountToolsInstaller)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountToolsInstallerRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountToolsInstallerRequestType"] = reflect.TypeOf((*MountToolsInstallerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountToolsInstallerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVffsVolume MountVffsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountVffsVolume"] = reflect.TypeOf((*MountVffsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVffsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VffsUuid string                 `xml:"vffsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountVffsVolumeRequestType"] = reflect.TypeOf((*MountVffsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVffsVolumeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVmfsVolume MountVmfsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountVmfsVolume"] = reflect.TypeOf((*MountVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVmfsVolumeExRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid []string               `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountVmfsVolumeExRequestType"] = reflect.TypeOf((*MountVmfsVolumeExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVmfsVolumeEx_Task MountVmfsVolumeExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountVmfsVolumeEx_Task"] = reflect.TypeOf((*MountVmfsVolumeEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVmfsVolumeEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVmfsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid string                 `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MountVmfsVolumeRequestType"] = reflect.TypeOf((*MountVmfsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MountVmfsVolumeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDVPortRequestType struct {
0000000000000000000000000000000000000000;;		This                    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PortKey                 []string               `xml:"portKey"`
0000000000000000000000000000000000000000;;		DestinationPortgroupKey string                 `xml:"destinationPortgroupKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveDVPortRequestType"] = reflect.TypeOf((*MoveDVPortRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDVPort_Task MoveDVPortRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveDVPort_Task"] = reflect.TypeOf((*MoveDVPort_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDVPort_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDatastoreFileRequestType struct {
0000000000000000000000000000000000000000;;		This                  ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		SourceName            string                  `xml:"sourceName"`
0000000000000000000000000000000000000000;;		SourceDatacenter      *ManagedObjectReference `xml:"sourceDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestinationName       string                  `xml:"destinationName"`
0000000000000000000000000000000000000000;;		DestinationDatacenter *ManagedObjectReference `xml:"destinationDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		Force                 *bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveDatastoreFileRequestType"] = reflect.TypeOf((*MoveDatastoreFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDatastoreFile_Task MoveDatastoreFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveDatastoreFile_Task"] = reflect.TypeOf((*MoveDatastoreFile_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDatastoreFile_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDirectoryInGuest MoveDirectoryInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveDirectoryInGuest"] = reflect.TypeOf((*MoveDirectoryInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDirectoryInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm               ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth             BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		SrcDirectoryPath string                  `xml:"srcDirectoryPath"`
0000000000000000000000000000000000000000;;		DstDirectoryPath string                  `xml:"dstDirectoryPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveDirectoryInGuestRequestType"] = reflect.TypeOf((*MoveDirectoryInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveDirectoryInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveFileInGuest MoveFileInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveFileInGuest"] = reflect.TypeOf((*MoveFileInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveFileInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm          ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth        BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		SrcFilePath string                  `xml:"srcFilePath"`
0000000000000000000000000000000000000000;;		DstFilePath string                  `xml:"dstFilePath"`
0000000000000000000000000000000000000000;;		Overwrite   bool                    `xml:"overwrite"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveFileInGuestRequestType"] = reflect.TypeOf((*MoveFileInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveFileInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveHostIntoRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host         ManagedObjectReference  `xml:"host"`
0000000000000000000000000000000000000000;;		ResourcePool *ManagedObjectReference `xml:"resourcePool,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveHostIntoRequestType"] = reflect.TypeOf((*MoveHostIntoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveHostInto_Task MoveHostIntoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveHostInto_Task"] = reflect.TypeOf((*MoveHostInto_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveHostInto_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoFolderRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		List []ManagedObjectReference `xml:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveIntoFolderRequestType"] = reflect.TypeOf((*MoveIntoFolderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoFolder_Task MoveIntoFolderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveIntoFolder_Task"] = reflect.TypeOf((*MoveIntoFolder_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoFolder_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveIntoRequestType"] = reflect.TypeOf((*MoveIntoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoResourcePool MoveIntoResourcePoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveIntoResourcePool"] = reflect.TypeOf((*MoveIntoResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoResourcePoolRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		List []ManagedObjectReference `xml:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveIntoResourcePoolRequestType"] = reflect.TypeOf((*MoveIntoResourcePoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveIntoResourcePoolResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveInto_Task MoveIntoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveInto_Task"] = reflect.TypeOf((*MoveInto_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveInto_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		SourceName       string                          `xml:"sourceName"`
0000000000000000000000000000000000000000;;		SourceDatacenter *ManagedObjectReference         `xml:"sourceDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestName         string                          `xml:"destName"`
0000000000000000000000000000000000000000;;		DestDatacenter   *ManagedObjectReference         `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		Force            *bool                           `xml:"force"`
0000000000000000000000000000000000000000;;		Profile          []BaseVirtualMachineProfileSpec `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveVirtualDiskRequestType"] = reflect.TypeOf((*MoveVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveVirtualDisk_Task MoveVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MoveVirtualDisk_Task"] = reflect.TypeOf((*MoveVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MoveVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MtuMatchEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MtuMatchEvent"] = reflect.TypeOf((*MtuMatchEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MtuMismatchEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MtuMismatchEvent"] = reflect.TypeOf((*MtuMismatchEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultiWriterNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultiWriterNotSupported"] = reflect.TypeOf((*MultiWriterNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultiWriterNotSupportedFault MultiWriterNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultiWriterNotSupportedFault"] = reflect.TypeOf((*MultiWriterNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultipleCertificatesVerifyFault struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ThumbprintData []MultipleCertificatesVerifyFaultThumbprintData `xml:"thumbprintData"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultipleCertificatesVerifyFault"] = reflect.TypeOf((*MultipleCertificatesVerifyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultipleCertificatesVerifyFaultFault MultipleCertificatesVerifyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultipleCertificatesVerifyFaultFault"] = reflect.TypeOf((*MultipleCertificatesVerifyFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultipleCertificatesVerifyFaultThumbprintData struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port       int32  `xml:"port"`
0000000000000000000000000000000000000000;;		Thumbprint string `xml:"thumbprint"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultipleCertificatesVerifyFaultThumbprintData"] = reflect.TypeOf((*MultipleCertificatesVerifyFaultThumbprintData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultipleSnapshotsNotSupported struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultipleSnapshotsNotSupported"] = reflect.TypeOf((*MultipleSnapshotsNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultipleSnapshotsNotSupportedFault MultipleSnapshotsNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MultipleSnapshotsNotSupportedFault"] = reflect.TypeOf((*MultipleSnapshotsNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NASDatastoreCreatedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore    DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;		DatastoreUrl string                 `xml:"datastoreUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NASDatastoreCreatedEvent"] = reflect.TypeOf((*NASDatastoreCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamePasswordAuthentication struct {
0000000000000000000000000000000000000000;;		GuestAuthentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Username string `xml:"username"`
0000000000000000000000000000000000000000;;		Password string `xml:"password"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamePasswordAuthentication"] = reflect.TypeOf((*NamePasswordAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamespaceFull struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name           string `xml:"name"`
0000000000000000000000000000000000000000;;		CurrentMaxSize int64  `xml:"currentMaxSize"`
0000000000000000000000000000000000000000;;		RequiredSize   int64  `xml:"requiredSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamespaceFull"] = reflect.TypeOf((*NamespaceFull)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamespaceFullFault NamespaceFull
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamespaceFullFault"] = reflect.TypeOf((*NamespaceFullFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamespaceLimitReached struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Limit int32 `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamespaceLimitReached"] = reflect.TypeOf((*NamespaceLimitReached)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamespaceLimitReachedFault NamespaceLimitReached
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamespaceLimitReachedFault"] = reflect.TypeOf((*NamespaceLimitReachedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamespaceWriteProtected struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamespaceWriteProtected"] = reflect.TypeOf((*NamespaceWriteProtected)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NamespaceWriteProtectedFault NamespaceWriteProtected
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NamespaceWriteProtectedFault"] = reflect.TypeOf((*NamespaceWriteProtectedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasConfigFault struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasConfigFault"] = reflect.TypeOf((*NasConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasConfigFaultFault BaseNasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasConfigFaultFault"] = reflect.TypeOf((*NasConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasConnectionLimitReached struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoteHost string `xml:"remoteHost"`
0000000000000000000000000000000000000000;;		RemotePath string `xml:"remotePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasConnectionLimitReached"] = reflect.TypeOf((*NasConnectionLimitReached)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasConnectionLimitReachedFault NasConnectionLimitReached
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasConnectionLimitReachedFault"] = reflect.TypeOf((*NasConnectionLimitReachedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasDatastoreInfo struct {
0000000000000000000000000000000000000000;;		DatastoreInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Nas *HostNasVolume `xml:"nas,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasDatastoreInfo"] = reflect.TypeOf((*NasDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasSessionCredentialConflict struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoteHost string `xml:"remoteHost"`
0000000000000000000000000000000000000000;;		RemotePath string `xml:"remotePath"`
0000000000000000000000000000000000000000;;		UserName   string `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasSessionCredentialConflict"] = reflect.TypeOf((*NasSessionCredentialConflict)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasSessionCredentialConflictFault NasSessionCredentialConflict
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasSessionCredentialConflictFault"] = reflect.TypeOf((*NasSessionCredentialConflictFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasStorageProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasStorageProfile"] = reflect.TypeOf((*NasStorageProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasVolumeNotMounted struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoteHost string `xml:"remoteHost"`
0000000000000000000000000000000000000000;;		RemotePath string `xml:"remotePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasVolumeNotMounted"] = reflect.TypeOf((*NasVolumeNotMounted)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NasVolumeNotMountedFault NasVolumeNotMounted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NasVolumeNotMountedFault"] = reflect.TypeOf((*NasVolumeNotMountedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NegatableExpression struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Negate *bool `xml:"negate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NegatableExpression"] = reflect.TypeOf((*NegatableExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetBIOSConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mode string `xml:"mode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetBIOSConfigInfo"] = reflect.TypeOf((*NetBIOSConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetDhcpConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ipv6 *NetDhcpConfigInfoDhcpOptions `xml:"ipv6,omitempty"`
0000000000000000000000000000000000000000;;		Ipv4 *NetDhcpConfigInfoDhcpOptions `xml:"ipv4,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetDhcpConfigInfo"] = reflect.TypeOf((*NetDhcpConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetDhcpConfigInfoDhcpOptions struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enable bool       `xml:"enable"`
0000000000000000000000000000000000000000;;		Config []KeyValue `xml:"config,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetDhcpConfigInfoDhcpOptions"] = reflect.TypeOf((*NetDhcpConfigInfoDhcpOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetDhcpConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ipv6 *NetDhcpConfigSpecDhcpOptionsSpec `xml:"ipv6,omitempty"`
0000000000000000000000000000000000000000;;		Ipv4 *NetDhcpConfigSpecDhcpOptionsSpec `xml:"ipv4,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetDhcpConfigSpec"] = reflect.TypeOf((*NetDhcpConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetDhcpConfigSpecDhcpOptionsSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enable    *bool      `xml:"enable"`
0000000000000000000000000000000000000000;;		Config    []KeyValue `xml:"config"`
0000000000000000000000000000000000000000;;		Operation string     `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetDhcpConfigSpecDhcpOptionsSpec"] = reflect.TypeOf((*NetDhcpConfigSpecDhcpOptionsSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetDnsConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dhcp         bool     `xml:"dhcp"`
0000000000000000000000000000000000000000;;		HostName     string   `xml:"hostName"`
0000000000000000000000000000000000000000;;		DomainName   string   `xml:"domainName"`
0000000000000000000000000000000000000000;;		IpAddress    []string `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		SearchDomain []string `xml:"searchDomain,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetDnsConfigInfo"] = reflect.TypeOf((*NetDnsConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetDnsConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dhcp         *bool    `xml:"dhcp"`
0000000000000000000000000000000000000000;;		HostName     string   `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		DomainName   string   `xml:"domainName,omitempty"`
0000000000000000000000000000000000000000;;		IpAddress    []string `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		SearchDomain []string `xml:"searchDomain,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetDnsConfigSpec"] = reflect.TypeOf((*NetDnsConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress                []NetIpConfigInfoIpAddress `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		Dhcp                     *NetDhcpConfigInfo         `xml:"dhcp,omitempty"`
0000000000000000000000000000000000000000;;		AutoConfigurationEnabled *bool                      `xml:"autoConfigurationEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpConfigInfo"] = reflect.TypeOf((*NetIpConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpConfigInfoIpAddress struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress    string     `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		PrefixLength int32      `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Origin       string     `xml:"origin,omitempty"`
0000000000000000000000000000000000000000;;		State        string     `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		Lifetime     *time.Time `xml:"lifetime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpConfigInfoIpAddress"] = reflect.TypeOf((*NetIpConfigInfoIpAddress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress                []NetIpConfigSpecIpAddressSpec `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		Dhcp                     *NetDhcpConfigSpec             `xml:"dhcp,omitempty"`
0000000000000000000000000000000000000000;;		AutoConfigurationEnabled *bool                          `xml:"autoConfigurationEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpConfigSpec"] = reflect.TypeOf((*NetIpConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpConfigSpecIpAddressSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress    string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		PrefixLength int32  `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Operation    string `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpConfigSpecIpAddressSpec"] = reflect.TypeOf((*NetIpConfigSpecIpAddressSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpRouteConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpRoute []NetIpRouteConfigInfoIpRoute `xml:"ipRoute,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpRouteConfigInfo"] = reflect.TypeOf((*NetIpRouteConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpRouteConfigInfoGateway struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		Device    string `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpRouteConfigInfoGateway"] = reflect.TypeOf((*NetIpRouteConfigInfoGateway)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpRouteConfigInfoIpRoute struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network      string                      `xml:"network"`
0000000000000000000000000000000000000000;;		PrefixLength int32                       `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Gateway      NetIpRouteConfigInfoGateway `xml:"gateway"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpRouteConfigInfoIpRoute"] = reflect.TypeOf((*NetIpRouteConfigInfoIpRoute)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpRouteConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpRoute []NetIpRouteConfigSpecIpRouteSpec `xml:"ipRoute,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpRouteConfigSpec"] = reflect.TypeOf((*NetIpRouteConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpRouteConfigSpecGatewaySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		Device    string `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpRouteConfigSpecGatewaySpec"] = reflect.TypeOf((*NetIpRouteConfigSpecGatewaySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpRouteConfigSpecIpRouteSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network      string                          `xml:"network"`
0000000000000000000000000000000000000000;;		PrefixLength int32                           `xml:"prefixLength"`
0000000000000000000000000000000000000000;;		Gateway      NetIpRouteConfigSpecGatewaySpec `xml:"gateway"`
0000000000000000000000000000000000000000;;		Operation    string                          `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpRouteConfigSpecIpRouteSpec"] = reflect.TypeOf((*NetIpRouteConfigSpecIpRouteSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpStackInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Neighbor      []NetIpStackInfoNetToMedia    `xml:"neighbor,omitempty"`
0000000000000000000000000000000000000000;;		DefaultRouter []NetIpStackInfoDefaultRouter `xml:"defaultRouter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpStackInfo"] = reflect.TypeOf((*NetIpStackInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpStackInfoDefaultRouter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress  string    `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		Device     string    `xml:"device"`
0000000000000000000000000000000000000000;;		Lifetime   time.Time `xml:"lifetime"`
0000000000000000000000000000000000000000;;		Preference string    `xml:"preference"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpStackInfoDefaultRouter"] = reflect.TypeOf((*NetIpStackInfoDefaultRouter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetIpStackInfoNetToMedia struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress       string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		PhysicalAddress string `xml:"physicalAddress"`
0000000000000000000000000000000000000000;;		Device          string `xml:"device"`
0000000000000000000000000000000000000000;;		Type            string `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetIpStackInfoNetToMedia"] = reflect.TypeOf((*NetIpStackInfoNetToMedia)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetStackInstanceProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string                         `xml:"key"`
0000000000000000000000000000000000000000;;		DnsConfig     NetworkProfileDnsConfigProfile `xml:"dnsConfig"`
0000000000000000000000000000000000000000;;		IpRouteConfig IpRouteProfile                 `xml:"ipRouteConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetStackInstanceProfile"] = reflect.TypeOf((*NetStackInstanceProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkCopyFault struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkCopyFault"] = reflect.TypeOf((*NetworkCopyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkCopyFaultFault NetworkCopyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkCopyFaultFault"] = reflect.TypeOf((*NetworkCopyFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkDisruptedAndConfigRolledBack struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host string `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkDisruptedAndConfigRolledBack"] = reflect.TypeOf((*NetworkDisruptedAndConfigRolledBack)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkDisruptedAndConfigRolledBackFault NetworkDisruptedAndConfigRolledBack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkDisruptedAndConfigRolledBackFault"] = reflect.TypeOf((*NetworkDisruptedAndConfigRolledBackFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network ManagedObjectReference `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkEventArgument"] = reflect.TypeOf((*NetworkEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkInaccessible struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkInaccessible"] = reflect.TypeOf((*NetworkInaccessible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkInaccessibleFault NetworkInaccessible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkInaccessibleFault"] = reflect.TypeOf((*NetworkInaccessibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkPolicyProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkPolicyProfile"] = reflect.TypeOf((*NetworkPolicyProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vswitch                 []VirtualSwitchProfile           `xml:"vswitch,omitempty"`
0000000000000000000000000000000000000000;;		VmPortGroup             []VmPortGroupProfile             `xml:"vmPortGroup,omitempty"`
0000000000000000000000000000000000000000;;		HostPortGroup           []HostPortGroupProfile           `xml:"hostPortGroup,omitempty"`
0000000000000000000000000000000000000000;;		ServiceConsolePortGroup []ServiceConsolePortGroupProfile `xml:"serviceConsolePortGroup,omitempty"`
0000000000000000000000000000000000000000;;		DnsConfig               *NetworkProfileDnsConfigProfile  `xml:"dnsConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpRouteConfig           *IpRouteProfile                  `xml:"ipRouteConfig,omitempty"`
0000000000000000000000000000000000000000;;		ConsoleIpRouteConfig    *IpRouteProfile                  `xml:"consoleIpRouteConfig,omitempty"`
0000000000000000000000000000000000000000;;		Pnic                    []PhysicalNicProfile             `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		Dvswitch                []DvsProfile                     `xml:"dvswitch,omitempty"`
0000000000000000000000000000000000000000;;		DvsServiceConsoleNic    []DvsServiceConsoleVNicProfile   `xml:"dvsServiceConsoleNic,omitempty"`
0000000000000000000000000000000000000000;;		DvsHostNic              []DvsHostVNicProfile             `xml:"dvsHostNic,omitempty"`
0000000000000000000000000000000000000000;;		NetStackInstance        []NetStackInstanceProfile        `xml:"netStackInstance,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkProfile"] = reflect.TypeOf((*NetworkProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkProfileDnsConfigProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkProfileDnsConfigProfile"] = reflect.TypeOf((*NetworkProfileDnsConfigProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkRollbackEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MethodName    string `xml:"methodName"`
0000000000000000000000000000000000000000;;		TransactionId string `xml:"transactionId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkRollbackEvent"] = reflect.TypeOf((*NetworkRollbackEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network    *ManagedObjectReference `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Accessible bool                    `xml:"accessible"`
0000000000000000000000000000000000000000;;		IpPoolName string                  `xml:"ipPoolName,omitempty"`
0000000000000000000000000000000000000000;;		IpPoolId   int32                   `xml:"ipPoolId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworkSummary"] = reflect.TypeOf((*NetworkSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworksMayNotBeTheSame struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworksMayNotBeTheSame"] = reflect.TypeOf((*NetworksMayNotBeTheSame)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworksMayNotBeTheSameFault NetworksMayNotBeTheSame
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NetworksMayNotBeTheSameFault"] = reflect.TypeOf((*NetworksMayNotBeTheSameFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NicSettingMismatch struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumberOfNicsInSpec int32 `xml:"numberOfNicsInSpec"`
0000000000000000000000000000000000000000;;		NumberOfNicsInVM   int32 `xml:"numberOfNicsInVM"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NicSettingMismatch"] = reflect.TypeOf((*NicSettingMismatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NicSettingMismatchFault NicSettingMismatch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NicSettingMismatchFault"] = reflect.TypeOf((*NicSettingMismatchFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoAccessUserEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoAccessUserEvent"] = reflect.TypeOf((*NoAccessUserEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoActiveHostInCluster struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ComputeResource ManagedObjectReference `xml:"computeResource"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoActiveHostInCluster"] = reflect.TypeOf((*NoActiveHostInCluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoActiveHostInClusterFault NoActiveHostInCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoActiveHostInClusterFault"] = reflect.TypeOf((*NoActiveHostInClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoAvailableIp struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network ManagedObjectReference `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoAvailableIp"] = reflect.TypeOf((*NoAvailableIp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoAvailableIpFault NoAvailableIp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoAvailableIpFault"] = reflect.TypeOf((*NoAvailableIpFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoClientCertificate struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoClientCertificate"] = reflect.TypeOf((*NoClientCertificate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoClientCertificateFault NoClientCertificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoClientCertificateFault"] = reflect.TypeOf((*NoClientCertificateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleDatastore struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleDatastore"] = reflect.TypeOf((*NoCompatibleDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleDatastoreFault NoCompatibleDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleDatastoreFault"] = reflect.TypeOf((*NoCompatibleDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleHardAffinityHost struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleHardAffinityHost"] = reflect.TypeOf((*NoCompatibleHardAffinityHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleHardAffinityHostFault NoCompatibleHardAffinityHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleHardAffinityHostFault"] = reflect.TypeOf((*NoCompatibleHardAffinityHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleHost struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host  []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Error []LocalizedMethodFault   `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleHost"] = reflect.TypeOf((*NoCompatibleHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleHostFault BaseNoCompatibleHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleHostFault"] = reflect.TypeOf((*NoCompatibleHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleHostWithAccessToDevice struct {
0000000000000000000000000000000000000000;;		NoCompatibleHost
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleHostWithAccessToDevice"] = reflect.TypeOf((*NoCompatibleHostWithAccessToDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleHostWithAccessToDeviceFault NoCompatibleHostWithAccessToDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleHostWithAccessToDeviceFault"] = reflect.TypeOf((*NoCompatibleHostWithAccessToDeviceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleSoftAffinityHost struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleSoftAffinityHost"] = reflect.TypeOf((*NoCompatibleSoftAffinityHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoCompatibleSoftAffinityHostFault NoCompatibleSoftAffinityHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoCompatibleSoftAffinityHostFault"] = reflect.TypeOf((*NoCompatibleSoftAffinityHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoConnectedDatastore struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoConnectedDatastore"] = reflect.TypeOf((*NoConnectedDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoConnectedDatastoreFault NoConnectedDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoConnectedDatastoreFault"] = reflect.TypeOf((*NoConnectedDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDatastoresConfiguredEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDatastoresConfiguredEvent"] = reflect.TypeOf((*NoDatastoresConfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDiskFound struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDiskFound"] = reflect.TypeOf((*NoDiskFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDiskFoundFault NoDiskFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDiskFoundFault"] = reflect.TypeOf((*NoDiskFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDiskSpace struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore string `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDiskSpace"] = reflect.TypeOf((*NoDiskSpace)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDiskSpaceFault NoDiskSpace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDiskSpaceFault"] = reflect.TypeOf((*NoDiskSpaceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDisksToCustomize struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDisksToCustomize"] = reflect.TypeOf((*NoDisksToCustomize)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoDisksToCustomizeFault NoDisksToCustomize
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoDisksToCustomizeFault"] = reflect.TypeOf((*NoDisksToCustomizeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoGateway struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoGateway"] = reflect.TypeOf((*NoGateway)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoGatewayFault NoGateway
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoGatewayFault"] = reflect.TypeOf((*NoGatewayFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoGuestHeartbeat struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoGuestHeartbeat"] = reflect.TypeOf((*NoGuestHeartbeat)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoGuestHeartbeatFault NoGuestHeartbeat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoGuestHeartbeatFault"] = reflect.TypeOf((*NoGuestHeartbeatFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoHost struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoHost"] = reflect.TypeOf((*NoHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoHostFault NoHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoHostFault"] = reflect.TypeOf((*NoHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoHostSuitableForFtSecondary struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoHostSuitableForFtSecondary"] = reflect.TypeOf((*NoHostSuitableForFtSecondary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoHostSuitableForFtSecondaryFault NoHostSuitableForFtSecondary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoHostSuitableForFtSecondaryFault"] = reflect.TypeOf((*NoHostSuitableForFtSecondaryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoLicenseEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Feature LicenseFeatureInfo `xml:"feature"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoLicenseEvent"] = reflect.TypeOf((*NoLicenseEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoLicenseServerConfigured struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoLicenseServerConfigured"] = reflect.TypeOf((*NoLicenseServerConfigured)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoLicenseServerConfiguredFault NoLicenseServerConfigured
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoLicenseServerConfiguredFault"] = reflect.TypeOf((*NoLicenseServerConfiguredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoMaintenanceModeDrsRecommendationForVM struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoMaintenanceModeDrsRecommendationForVM"] = reflect.TypeOf((*NoMaintenanceModeDrsRecommendationForVM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPeerHostFound struct {
0000000000000000000000000000000000000000;;		HostPowerOpFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPeerHostFound"] = reflect.TypeOf((*NoPeerHostFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPeerHostFoundFault NoPeerHostFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPeerHostFoundFault"] = reflect.TypeOf((*NoPeerHostFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermission struct {
0000000000000000000000000000000000000000;;		SecurityError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Object      ManagedObjectReference `xml:"object"`
0000000000000000000000000000000000000000;;		PrivilegeId string                 `xml:"privilegeId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermission"] = reflect.TypeOf((*NoPermission)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionFault BaseNoPermission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionFault"] = reflect.TypeOf((*NoPermissionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionOnAD struct {
0000000000000000000000000000000000000000;;		ActiveDirectoryFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionOnAD"] = reflect.TypeOf((*NoPermissionOnAD)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionOnADFault NoPermissionOnAD
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionOnADFault"] = reflect.TypeOf((*NoPermissionOnADFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionOnHost struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionOnHost"] = reflect.TypeOf((*NoPermissionOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionOnHostFault NoPermissionOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionOnHostFault"] = reflect.TypeOf((*NoPermissionOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionOnNasVolume struct {
0000000000000000000000000000000000000000;;		NasConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserName string `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionOnNasVolume"] = reflect.TypeOf((*NoPermissionOnNasVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoPermissionOnNasVolumeFault NoPermissionOnNasVolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoPermissionOnNasVolumeFault"] = reflect.TypeOf((*NoPermissionOnNasVolumeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoSubjectName struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoSubjectName"] = reflect.TypeOf((*NoSubjectName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoSubjectNameFault NoSubjectName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoSubjectNameFault"] = reflect.TypeOf((*NoSubjectNameFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoVcManagedIpConfigured struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoVcManagedIpConfigured"] = reflect.TypeOf((*NoVcManagedIpConfigured)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoVcManagedIpConfiguredFault NoVcManagedIpConfigured
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoVcManagedIpConfiguredFault"] = reflect.TypeOf((*NoVcManagedIpConfiguredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoVirtualNic struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoVirtualNic"] = reflect.TypeOf((*NoVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoVirtualNicFault NoVirtualNic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoVirtualNicFault"] = reflect.TypeOf((*NoVirtualNicFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoVmInVApp struct {
0000000000000000000000000000000000000000;;		VAppConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoVmInVApp"] = reflect.TypeOf((*NoVmInVApp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NoVmInVAppFault NoVmInVApp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NoVmInVAppFault"] = reflect.TypeOf((*NoVmInVAppFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeDeploymentSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EsxHost                 *ManagedObjectReference `xml:"esxHost,omitempty"`
0000000000000000000000000000000000000000;;		Datastore               *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		PublicNetworkPortGroup  *ManagedObjectReference `xml:"publicNetworkPortGroup,omitempty"`
0000000000000000000000000000000000000000;;		ClusterNetworkPortGroup *ManagedObjectReference `xml:"clusterNetworkPortGroup,omitempty"`
0000000000000000000000000000000000000000;;		Folder                  ManagedObjectReference  `xml:"folder"`
0000000000000000000000000000000000000000;;		ResourcePool            *ManagedObjectReference `xml:"resourcePool,omitempty"`
0000000000000000000000000000000000000000;;		ManagementVc            *ServiceLocator         `xml:"managementVc,omitempty"`
0000000000000000000000000000000000000000;;		NodeName                string                  `xml:"nodeName"`
0000000000000000000000000000000000000000;;		IpSettings              CustomizationIPSettings `xml:"ipSettings"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NodeDeploymentSpec"] = reflect.TypeOf((*NodeDeploymentSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeNetworkSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpSettings CustomizationIPSettings `xml:"ipSettings"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NodeNetworkSpec"] = reflect.TypeOf((*NodeNetworkSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonADUserRequired struct {
0000000000000000000000000000000000000000;;		ActiveDirectoryFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonADUserRequired"] = reflect.TypeOf((*NonADUserRequired)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonADUserRequiredFault NonADUserRequired
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonADUserRequiredFault"] = reflect.TypeOf((*NonADUserRequiredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonHomeRDMVMotionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonHomeRDMVMotionNotSupported"] = reflect.TypeOf((*NonHomeRDMVMotionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonHomeRDMVMotionNotSupportedFault NonHomeRDMVMotionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonHomeRDMVMotionNotSupportedFault"] = reflect.TypeOf((*NonHomeRDMVMotionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonPersistentDisksNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonPersistentDisksNotSupported"] = reflect.TypeOf((*NonPersistentDisksNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonPersistentDisksNotSupportedFault NonPersistentDisksNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonPersistentDisksNotSupportedFault"] = reflect.TypeOf((*NonPersistentDisksNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonVIWorkloadDetectedOnDatastoreEvent struct {
0000000000000000000000000000000000000000;;		DatastoreEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonVIWorkloadDetectedOnDatastoreEvent"] = reflect.TypeOf((*NonVIWorkloadDetectedOnDatastoreEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonVmwareOuiMacNotSupportedHost struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonVmwareOuiMacNotSupportedHost"] = reflect.TypeOf((*NonVmwareOuiMacNotSupportedHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonVmwareOuiMacNotSupportedHostFault NonVmwareOuiMacNotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NonVmwareOuiMacNotSupportedHostFault"] = reflect.TypeOf((*NonVmwareOuiMacNotSupportedHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotADirectory struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotADirectory"] = reflect.TypeOf((*NotADirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotADirectoryFault NotADirectory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotADirectoryFault"] = reflect.TypeOf((*NotADirectoryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotAFile struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotAFile"] = reflect.TypeOf((*NotAFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotAFileFault NotAFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotAFileFault"] = reflect.TypeOf((*NotAFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotAuthenticated struct {
0000000000000000000000000000000000000000;;		NoPermission
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotAuthenticated"] = reflect.TypeOf((*NotAuthenticated)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotAuthenticatedFault NotAuthenticated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotAuthenticatedFault"] = reflect.TypeOf((*NotAuthenticatedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughCpus struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumCpuDest int32 `xml:"numCpuDest"`
0000000000000000000000000000000000000000;;		NumCpuVm   int32 `xml:"numCpuVm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughCpus"] = reflect.TypeOf((*NotEnoughCpus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughCpusFault BaseNotEnoughCpus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughCpusFault"] = reflect.TypeOf((*NotEnoughCpusFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughLicenses struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughLicenses"] = reflect.TypeOf((*NotEnoughLicenses)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughLicensesFault BaseNotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughLicensesFault"] = reflect.TypeOf((*NotEnoughLicensesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughLogicalCpus struct {
0000000000000000000000000000000000000000;;		NotEnoughCpus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughLogicalCpus"] = reflect.TypeOf((*NotEnoughLogicalCpus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughLogicalCpusFault NotEnoughLogicalCpus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughLogicalCpusFault"] = reflect.TypeOf((*NotEnoughLogicalCpusFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotEnoughResourcesToStartVmEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotEnoughResourcesToStartVmEvent"] = reflect.TypeOf((*NotEnoughResourcesToStartVmEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotFound struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotFound"] = reflect.TypeOf((*NotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotFoundFault NotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotFoundFault"] = reflect.TypeOf((*NotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotImplemented struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotImplemented"] = reflect.TypeOf((*NotImplemented)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotImplementedFault NotImplemented
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotImplementedFault"] = reflect.TypeOf((*NotImplementedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupported struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupported"] = reflect.TypeOf((*NotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedDeviceForFT struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host        ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostName    string                 `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		Vm          ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName      string                 `xml:"vmName,omitempty"`
0000000000000000000000000000000000000000;;		DeviceType  string                 `xml:"deviceType"`
0000000000000000000000000000000000000000;;		DeviceLabel string                 `xml:"deviceLabel,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedDeviceForFT"] = reflect.TypeOf((*NotSupportedDeviceForFT)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedDeviceForFTFault NotSupportedDeviceForFT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedDeviceForFTFault"] = reflect.TypeOf((*NotSupportedDeviceForFTFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedFault BaseNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedFault"] = reflect.TypeOf((*NotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHost struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProductName    string `xml:"productName,omitempty"`
0000000000000000000000000000000000000000;;		ProductVersion string `xml:"productVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHost"] = reflect.TypeOf((*NotSupportedHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostFault BaseNotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostFault"] = reflect.TypeOf((*NotSupportedHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForChecksum struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForChecksum"] = reflect.TypeOf((*NotSupportedHostForChecksum)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForChecksumFault NotSupportedHostForChecksum
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForChecksumFault"] = reflect.TypeOf((*NotSupportedHostForChecksumFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVFlash struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVFlash"] = reflect.TypeOf((*NotSupportedHostForVFlash)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVFlashFault NotSupportedHostForVFlash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVFlashFault"] = reflect.TypeOf((*NotSupportedHostForVFlashFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVmcp struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVmcp"] = reflect.TypeOf((*NotSupportedHostForVmcp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVmcpFault NotSupportedHostForVmcp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVmcpFault"] = reflect.TypeOf((*NotSupportedHostForVmcpFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVmemFile struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVmemFile"] = reflect.TypeOf((*NotSupportedHostForVmemFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVmemFileFault NotSupportedHostForVmemFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVmemFileFault"] = reflect.TypeOf((*NotSupportedHostForVmemFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVsan struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVsan"] = reflect.TypeOf((*NotSupportedHostForVsan)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostForVsanFault NotSupportedHostForVsan
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostForVsanFault"] = reflect.TypeOf((*NotSupportedHostForVsanFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostInCluster struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostInCluster"] = reflect.TypeOf((*NotSupportedHostInCluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostInClusterFault BaseNotSupportedHostInCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostInClusterFault"] = reflect.TypeOf((*NotSupportedHostInClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostInDvs struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchProductSpec DistributedVirtualSwitchProductSpec `xml:"switchProductSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostInDvs"] = reflect.TypeOf((*NotSupportedHostInDvs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostInDvsFault NotSupportedHostInDvs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostInDvsFault"] = reflect.TypeOf((*NotSupportedHostInDvsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostInHACluster struct {
0000000000000000000000000000000000000000;;		NotSupportedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;		Build    string `xml:"build"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostInHACluster"] = reflect.TypeOf((*NotSupportedHostInHACluster)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotSupportedHostInHAClusterFault NotSupportedHostInHACluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotSupportedHostInHAClusterFault"] = reflect.TypeOf((*NotSupportedHostInHAClusterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotUserConfigurableProperty struct {
0000000000000000000000000000000000000000;;		VAppPropertyFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotUserConfigurableProperty"] = reflect.TypeOf((*NotUserConfigurableProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotUserConfigurablePropertyFault NotUserConfigurableProperty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NotUserConfigurablePropertyFault"] = reflect.TypeOf((*NotUserConfigurablePropertyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumPortsProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumPortsProfile"] = reflect.TypeOf((*NumPortsProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCoresPerSocketNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxSupportedCoresPerSocketDest int32 `xml:"maxSupportedCoresPerSocketDest"`
0000000000000000000000000000000000000000;;		NumCoresPerSocketVm            int32 `xml:"numCoresPerSocketVm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCoresPerSocketNotSupported"] = reflect.TypeOf((*NumVirtualCoresPerSocketNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCoresPerSocketNotSupportedFault NumVirtualCoresPerSocketNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCoresPerSocketNotSupportedFault"] = reflect.TypeOf((*NumVirtualCoresPerSocketNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCpusExceedsLimit struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxSupportedVcpus int32 `xml:"maxSupportedVcpus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCpusExceedsLimit"] = reflect.TypeOf((*NumVirtualCpusExceedsLimit)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCpusExceedsLimitFault NumVirtualCpusExceedsLimit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCpusExceedsLimitFault"] = reflect.TypeOf((*NumVirtualCpusExceedsLimitFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCpusIncompatible struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason"`
0000000000000000000000000000000000000000;;		NumCpu int32  `xml:"numCpu"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCpusIncompatible"] = reflect.TypeOf((*NumVirtualCpusIncompatible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCpusIncompatibleFault NumVirtualCpusIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCpusIncompatibleFault"] = reflect.TypeOf((*NumVirtualCpusIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCpusNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxSupportedVcpusDest int32 `xml:"maxSupportedVcpusDest"`
0000000000000000000000000000000000000000;;		NumCpuVm              int32 `xml:"numCpuVm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCpusNotSupported"] = reflect.TypeOf((*NumVirtualCpusNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumVirtualCpusNotSupportedFault NumVirtualCpusNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumVirtualCpusNotSupportedFault"] = reflect.TypeOf((*NumVirtualCpusNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumericRange struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Start int32 `xml:"start"`
0000000000000000000000000000000000000000;;		End   int32 `xml:"end"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["NumericRange"] = reflect.TypeOf((*NumericRange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ObjectContent struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Obj        ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;		PropSet    []DynamicProperty      `xml:"propSet,omitempty"`
0000000000000000000000000000000000000000;;		MissingSet []MissingProperty      `xml:"missingSet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ObjectContent"] = reflect.TypeOf((*ObjectContent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ObjectSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Obj       ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;		Skip      *bool                  `xml:"skip"`
0000000000000000000000000000000000000000;;		SelectSet []BaseSelectionSpec    `xml:"selectSet,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ObjectSpec"] = reflect.TypeOf((*ObjectSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ObjectUpdate struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind       ObjectUpdateKind       `xml:"kind"`
0000000000000000000000000000000000000000;;		Obj        ManagedObjectReference `xml:"obj"`
0000000000000000000000000000000000000000;;		ChangeSet  []PropertyChange       `xml:"changeSet,omitempty"`
0000000000000000000000000000000000000000;;		MissingSet []MissingProperty      `xml:"missingSet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ObjectUpdate"] = reflect.TypeOf((*ObjectUpdate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OnceTaskScheduler struct {
0000000000000000000000000000000000000000;;		TaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RunAt *time.Time `xml:"runAt"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OnceTaskScheduler"] = reflect.TypeOf((*OnceTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpaqueNetworkCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkReservationSupported bool `xml:"networkReservationSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OpaqueNetworkCapability"] = reflect.TypeOf((*OpaqueNetworkCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpaqueNetworkSummary struct {
0000000000000000000000000000000000000000;;		NetworkSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpaqueNetworkId   string `xml:"opaqueNetworkId"`
0000000000000000000000000000000000000000;;		OpaqueNetworkType string `xml:"opaqueNetworkType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OpaqueNetworkSummary"] = reflect.TypeOf((*OpaqueNetworkSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpaqueNetworkTargetInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network                     OpaqueNetworkSummary `xml:"network"`
0000000000000000000000000000000000000000;;		NetworkReservationSupported *bool                `xml:"networkReservationSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OpaqueNetworkTargetInfo"] = reflect.TypeOf((*OpaqueNetworkTargetInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpenInventoryViewFolder OpenInventoryViewFolderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OpenInventoryViewFolder"] = reflect.TypeOf((*OpenInventoryViewFolder)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpenInventoryViewFolderRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OpenInventoryViewFolderRequestType"] = reflect.TypeOf((*OpenInventoryViewFolderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpenInventoryViewFolderResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationDisabledByGuest struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OperationDisabledByGuest"] = reflect.TypeOf((*OperationDisabledByGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationDisabledByGuestFault OperationDisabledByGuest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OperationDisabledByGuestFault"] = reflect.TypeOf((*OperationDisabledByGuestFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationDisallowedOnHost struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OperationDisallowedOnHost"] = reflect.TypeOf((*OperationDisallowedOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationDisallowedOnHostFault OperationDisallowedOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OperationDisallowedOnHostFault"] = reflect.TypeOf((*OperationDisallowedOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationNotSupportedByGuest struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OperationNotSupportedByGuest"] = reflect.TypeOf((*OperationNotSupportedByGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationNotSupportedByGuestFault OperationNotSupportedByGuest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OperationNotSupportedByGuestFault"] = reflect.TypeOf((*OperationNotSupportedByGuestFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OptionDef struct {
0000000000000000000000000000000000000000;;		ElementDescription
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OptionType BaseOptionType `xml:"optionType,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OptionDef"] = reflect.TypeOf((*OptionDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OptionProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OptionProfile"] = reflect.TypeOf((*OptionProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OptionType struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ValueIsReadonly *bool `xml:"valueIsReadonly"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OptionType"] = reflect.TypeOf((*OptionType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OptionValue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   string  `xml:"key"`
0000000000000000000000000000000000000000;;		Value AnyType `xml:"value,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OptionValue"] = reflect.TypeOf((*OptionValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OrAlarmExpression struct {
0000000000000000000000000000000000000000;;		AlarmExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expression []BaseAlarmExpression `xml:"expression,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OrAlarmExpression"] = reflect.TypeOf((*OrAlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OutOfBounds struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ArgumentName string `xml:"argumentName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OutOfBounds"] = reflect.TypeOf((*OutOfBounds)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OutOfBoundsFault OutOfBounds
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OutOfBoundsFault"] = reflect.TypeOf((*OutOfBoundsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OutOfSyncDvsHost struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostOutOfSync []DvsOutOfSyncHostArgument `xml:"hostOutOfSync"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OutOfSyncDvsHost"] = reflect.TypeOf((*OutOfSyncDvsHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OverwriteCustomizationSpec OverwriteCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OverwriteCustomizationSpec"] = reflect.TypeOf((*OverwriteCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OverwriteCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Item CustomizationSpecItem  `xml:"item"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OverwriteCustomizationSpecRequestType"] = reflect.TypeOf((*OverwriteCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OverwriteCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfAttribute struct {
0000000000000000000000000000000000000000;;		OvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ElementName   string `xml:"elementName"`
0000000000000000000000000000000000000000;;		AttributeName string `xml:"attributeName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfAttribute"] = reflect.TypeOf((*OvfAttribute)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfAttributeFault BaseOvfAttribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfAttributeFault"] = reflect.TypeOf((*OvfAttributeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConnectedDevice struct {
0000000000000000000000000000000000000000;;		OvfHardwareExport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConnectedDevice"] = reflect.TypeOf((*OvfConnectedDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConnectedDeviceFault BaseOvfConnectedDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConnectedDeviceFault"] = reflect.TypeOf((*OvfConnectedDeviceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConnectedDeviceFloppy struct {
0000000000000000000000000000000000000000;;		OvfConnectedDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filename string `xml:"filename"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConnectedDeviceFloppy"] = reflect.TypeOf((*OvfConnectedDeviceFloppy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConnectedDeviceFloppyFault OvfConnectedDeviceFloppy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConnectedDeviceFloppyFault"] = reflect.TypeOf((*OvfConnectedDeviceFloppyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConnectedDeviceIso struct {
0000000000000000000000000000000000000000;;		OvfConnectedDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filename string `xml:"filename"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConnectedDeviceIso"] = reflect.TypeOf((*OvfConnectedDeviceIso)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConnectedDeviceIsoFault OvfConnectedDeviceIso
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConnectedDeviceIsoFault"] = reflect.TypeOf((*OvfConnectedDeviceIsoFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConstraint struct {
0000000000000000000000000000000000000000;;		OvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConstraint"] = reflect.TypeOf((*OvfConstraint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConstraintFault BaseOvfConstraint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConstraintFault"] = reflect.TypeOf((*OvfConstraintFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerCallbackFault struct {
0000000000000000000000000000000000000000;;		OvfFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionKey  string `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		ExtensionName string `xml:"extensionName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerCallbackFault"] = reflect.TypeOf((*OvfConsumerCallbackFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerCallbackFaultFault BaseOvfConsumerCallbackFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerCallbackFaultFault"] = reflect.TypeOf((*OvfConsumerCallbackFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerCommunicationError struct {
0000000000000000000000000000000000000000;;		OvfConsumerCallbackFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerCommunicationError"] = reflect.TypeOf((*OvfConsumerCommunicationError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerCommunicationErrorFault OvfConsumerCommunicationError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerCommunicationErrorFault"] = reflect.TypeOf((*OvfConsumerCommunicationErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerFault struct {
0000000000000000000000000000000000000000;;		OvfConsumerCallbackFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ErrorKey string     `xml:"errorKey"`
0000000000000000000000000000000000000000;;		Message  string     `xml:"message"`
0000000000000000000000000000000000000000;;		Params   []KeyValue `xml:"params,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerFault"] = reflect.TypeOf((*OvfConsumerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerFaultFault OvfConsumerFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerFaultFault"] = reflect.TypeOf((*OvfConsumerFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerInvalidSection struct {
0000000000000000000000000000000000000000;;		OvfConsumerCallbackFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LineNumber  int32  `xml:"lineNumber"`
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerInvalidSection"] = reflect.TypeOf((*OvfConsumerInvalidSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerInvalidSectionFault OvfConsumerInvalidSection
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerInvalidSectionFault"] = reflect.TypeOf((*OvfConsumerInvalidSectionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerOstNode struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id      string                  `xml:"id"`
0000000000000000000000000000000000000000;;		Type    string                  `xml:"type"`
0000000000000000000000000000000000000000;;		Section []OvfConsumerOvfSection `xml:"section,omitempty"`
0000000000000000000000000000000000000000;;		Child   []OvfConsumerOstNode    `xml:"child,omitempty"`
0000000000000000000000000000000000000000;;		Entity  *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerOstNode"] = reflect.TypeOf((*OvfConsumerOstNode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerOvfSection struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LineNumber int32  `xml:"lineNumber"`
0000000000000000000000000000000000000000;;		Xml        string `xml:"xml"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerOvfSection"] = reflect.TypeOf((*OvfConsumerOvfSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerPowerOnFault struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionKey  string `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		ExtensionName string `xml:"extensionName"`
0000000000000000000000000000000000000000;;		Description   string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerPowerOnFault"] = reflect.TypeOf((*OvfConsumerPowerOnFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerPowerOnFaultFault OvfConsumerPowerOnFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerPowerOnFaultFault"] = reflect.TypeOf((*OvfConsumerPowerOnFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerUndeclaredSection struct {
0000000000000000000000000000000000000000;;		OvfConsumerCallbackFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		QualifiedSectionType string `xml:"qualifiedSectionType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerUndeclaredSection"] = reflect.TypeOf((*OvfConsumerUndeclaredSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerUndeclaredSectionFault OvfConsumerUndeclaredSection
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerUndeclaredSectionFault"] = reflect.TypeOf((*OvfConsumerUndeclaredSectionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerUndefinedPrefix struct {
0000000000000000000000000000000000000000;;		OvfConsumerCallbackFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Prefix string `xml:"prefix"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerUndefinedPrefix"] = reflect.TypeOf((*OvfConsumerUndefinedPrefix)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerUndefinedPrefixFault OvfConsumerUndefinedPrefix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerUndefinedPrefixFault"] = reflect.TypeOf((*OvfConsumerUndefinedPrefixFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerValidationFault struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionKey  string `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		ExtensionName string `xml:"extensionName"`
0000000000000000000000000000000000000000;;		Message       string `xml:"message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerValidationFault"] = reflect.TypeOf((*OvfConsumerValidationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfConsumerValidationFaultFault OvfConsumerValidationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfConsumerValidationFaultFault"] = reflect.TypeOf((*OvfConsumerValidationFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCpuCompatibility struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RegisterName         string `xml:"registerName"`
0000000000000000000000000000000000000000;;		Level                int32  `xml:"level"`
0000000000000000000000000000000000000000;;		RegisterValue        string `xml:"registerValue"`
0000000000000000000000000000000000000000;;		DesiredRegisterValue string `xml:"desiredRegisterValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCpuCompatibility"] = reflect.TypeOf((*OvfCpuCompatibility)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCpuCompatibilityCheckNotSupported struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCpuCompatibilityCheckNotSupported"] = reflect.TypeOf((*OvfCpuCompatibilityCheckNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCpuCompatibilityCheckNotSupportedFault OvfCpuCompatibilityCheckNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCpuCompatibilityCheckNotSupportedFault"] = reflect.TypeOf((*OvfCpuCompatibilityCheckNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCpuCompatibilityFault OvfCpuCompatibility
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCpuCompatibilityFault"] = reflect.TypeOf((*OvfCpuCompatibilityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCreateDescriptorParams struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OvfFiles          []OvfFile               `xml:"ovfFiles,omitempty"`
0000000000000000000000000000000000000000;;		Name              string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description       string                  `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		IncludeImageFiles *bool                   `xml:"includeImageFiles"`
0000000000000000000000000000000000000000;;		ExportOption      []string                `xml:"exportOption,omitempty"`
0000000000000000000000000000000000000000;;		Snapshot          *ManagedObjectReference `xml:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCreateDescriptorParams"] = reflect.TypeOf((*OvfCreateDescriptorParams)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCreateDescriptorResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OvfDescriptor     string                 `xml:"ovfDescriptor"`
0000000000000000000000000000000000000000;;		Error             []LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Warning           []LocalizedMethodFault `xml:"warning,omitempty"`
0000000000000000000000000000000000000000;;		IncludeImageFiles *bool                  `xml:"includeImageFiles"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCreateDescriptorResult"] = reflect.TypeOf((*OvfCreateDescriptorResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCreateImportSpecParams struct {
0000000000000000000000000000000000000000;;		OvfManagerCommonParams
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityName         string                  `xml:"entityName"`
0000000000000000000000000000000000000000;;		HostSystem         *ManagedObjectReference `xml:"hostSystem,omitempty"`
0000000000000000000000000000000000000000;;		NetworkMapping     []OvfNetworkMapping     `xml:"networkMapping,omitempty"`
0000000000000000000000000000000000000000;;		IpAllocationPolicy string                  `xml:"ipAllocationPolicy,omitempty"`
0000000000000000000000000000000000000000;;		IpProtocol         string                  `xml:"ipProtocol,omitempty"`
0000000000000000000000000000000000000000;;		PropertyMapping    []KeyValue              `xml:"propertyMapping,omitempty"`
0000000000000000000000000000000000000000;;		ResourceMapping    []OvfResourceMap        `xml:"resourceMapping,omitempty"`
0000000000000000000000000000000000000000;;		DiskProvisioning   string                  `xml:"diskProvisioning,omitempty"`
0000000000000000000000000000000000000000;;		InstantiationOst   *OvfConsumerOstNode     `xml:"instantiationOst,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCreateImportSpecParams"] = reflect.TypeOf((*OvfCreateImportSpecParams)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfCreateImportSpecResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ImportSpec BaseImportSpec         `xml:"importSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		FileItem   []OvfFileItem          `xml:"fileItem,omitempty"`
0000000000000000000000000000000000000000;;		Warning    []LocalizedMethodFault `xml:"warning,omitempty"`
0000000000000000000000000000000000000000;;		Error      []LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfCreateImportSpecResult"] = reflect.TypeOf((*OvfCreateImportSpecResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDeploymentOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string `xml:"key"`
0000000000000000000000000000000000000000;;		Label       string `xml:"label"`
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDeploymentOption"] = reflect.TypeOf((*OvfDeploymentOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDiskMappingNotFound struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskName string `xml:"diskName"`
0000000000000000000000000000000000000000;;		VmName   string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDiskMappingNotFound"] = reflect.TypeOf((*OvfDiskMappingNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDiskMappingNotFoundFault OvfDiskMappingNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDiskMappingNotFoundFault"] = reflect.TypeOf((*OvfDiskMappingNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDiskOrderConstraint struct {
0000000000000000000000000000000000000000;;		OvfConstraint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDiskOrderConstraint"] = reflect.TypeOf((*OvfDiskOrderConstraint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDiskOrderConstraintFault OvfDiskOrderConstraint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDiskOrderConstraintFault"] = reflect.TypeOf((*OvfDiskOrderConstraintFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicateElement struct {
0000000000000000000000000000000000000000;;		OvfElement
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicateElement"] = reflect.TypeOf((*OvfDuplicateElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicateElementFault OvfDuplicateElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicateElementFault"] = reflect.TypeOf((*OvfDuplicateElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicatedElementBoundary struct {
0000000000000000000000000000000000000000;;		OvfElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Boundary string `xml:"boundary"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicatedElementBoundary"] = reflect.TypeOf((*OvfDuplicatedElementBoundary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicatedElementBoundaryFault OvfDuplicatedElementBoundary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicatedElementBoundaryFault"] = reflect.TypeOf((*OvfDuplicatedElementBoundaryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicatedPropertyIdExport struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fqid string `xml:"fqid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicatedPropertyIdExport"] = reflect.TypeOf((*OvfDuplicatedPropertyIdExport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicatedPropertyIdExportFault OvfDuplicatedPropertyIdExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicatedPropertyIdExportFault"] = reflect.TypeOf((*OvfDuplicatedPropertyIdExportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicatedPropertyIdImport struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicatedPropertyIdImport"] = reflect.TypeOf((*OvfDuplicatedPropertyIdImport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfDuplicatedPropertyIdImportFault OvfDuplicatedPropertyIdImport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfDuplicatedPropertyIdImportFault"] = reflect.TypeOf((*OvfDuplicatedPropertyIdImportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfElement struct {
0000000000000000000000000000000000000000;;		OvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfElement"] = reflect.TypeOf((*OvfElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfElementFault BaseOvfElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfElementFault"] = reflect.TypeOf((*OvfElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfElementInvalidValue struct {
0000000000000000000000000000000000000000;;		OvfElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfElementInvalidValue"] = reflect.TypeOf((*OvfElementInvalidValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfElementInvalidValueFault OvfElementInvalidValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfElementInvalidValueFault"] = reflect.TypeOf((*OvfElementInvalidValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfExport struct {
0000000000000000000000000000000000000000;;		OvfFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfExport"] = reflect.TypeOf((*OvfExport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfExportFailed struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfExportFailed"] = reflect.TypeOf((*OvfExportFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfExportFailedFault OvfExportFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfExportFailedFault"] = reflect.TypeOf((*OvfExportFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfExportFault BaseOvfExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfExportFault"] = reflect.TypeOf((*OvfExportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfFault"] = reflect.TypeOf((*OvfFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfFaultFault BaseOvfFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfFaultFault"] = reflect.TypeOf((*OvfFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfFile struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceId          string `xml:"deviceId"`
0000000000000000000000000000000000000000;;		Path              string `xml:"path"`
0000000000000000000000000000000000000000;;		CompressionMethod string `xml:"compressionMethod,omitempty"`
0000000000000000000000000000000000000000;;		ChunkSize         int64  `xml:"chunkSize,omitempty"`
0000000000000000000000000000000000000000;;		Size              int64  `xml:"size"`
0000000000000000000000000000000000000000;;		Capacity          int64  `xml:"capacity,omitempty"`
0000000000000000000000000000000000000000;;		PopulatedSize     int64  `xml:"populatedSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfFile"] = reflect.TypeOf((*OvfFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfFileItem struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceId          string `xml:"deviceId"`
0000000000000000000000000000000000000000;;		Path              string `xml:"path"`
0000000000000000000000000000000000000000;;		CompressionMethod string `xml:"compressionMethod,omitempty"`
0000000000000000000000000000000000000000;;		ChunkSize         int64  `xml:"chunkSize,omitempty"`
0000000000000000000000000000000000000000;;		Size              int64  `xml:"size,omitempty"`
0000000000000000000000000000000000000000;;		CimType           int32  `xml:"cimType"`
0000000000000000000000000000000000000000;;		Create            bool   `xml:"create"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfFileItem"] = reflect.TypeOf((*OvfFileItem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHardwareCheck struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHardwareCheck"] = reflect.TypeOf((*OvfHardwareCheck)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHardwareCheckFault OvfHardwareCheck
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHardwareCheckFault"] = reflect.TypeOf((*OvfHardwareCheckFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHardwareExport struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device BaseVirtualDevice `xml:"device,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		VmPath string            `xml:"vmPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHardwareExport"] = reflect.TypeOf((*OvfHardwareExport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHardwareExportFault BaseOvfHardwareExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHardwareExportFault"] = reflect.TypeOf((*OvfHardwareExportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHostResourceConstraint struct {
0000000000000000000000000000000000000000;;		OvfConstraint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHostResourceConstraint"] = reflect.TypeOf((*OvfHostResourceConstraint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHostResourceConstraintFault OvfHostResourceConstraint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHostResourceConstraintFault"] = reflect.TypeOf((*OvfHostResourceConstraintFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHostValueNotParsed struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Property string `xml:"property"`
0000000000000000000000000000000000000000;;		Value    string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHostValueNotParsed"] = reflect.TypeOf((*OvfHostValueNotParsed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfHostValueNotParsedFault OvfHostValueNotParsed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfHostValueNotParsedFault"] = reflect.TypeOf((*OvfHostValueNotParsedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfImport struct {
0000000000000000000000000000000000000000;;		OvfFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfImport"] = reflect.TypeOf((*OvfImport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfImportFailed struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfImportFailed"] = reflect.TypeOf((*OvfImportFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfImportFailedFault OvfImportFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfImportFailedFault"] = reflect.TypeOf((*OvfImportFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfImportFault BaseOvfImport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfImportFault"] = reflect.TypeOf((*OvfImportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInternalError struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInternalError"] = reflect.TypeOf((*OvfInternalError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInternalErrorFault OvfInternalError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInternalErrorFault"] = reflect.TypeOf((*OvfInternalErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidPackage struct {
0000000000000000000000000000000000000000;;		OvfFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LineNumber int32 `xml:"lineNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidPackage"] = reflect.TypeOf((*OvfInvalidPackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidPackageFault BaseOvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidPackageFault"] = reflect.TypeOf((*OvfInvalidPackageFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValue struct {
0000000000000000000000000000000000000000;;		OvfAttribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValue"] = reflect.TypeOf((*OvfInvalidValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueConfiguration struct {
0000000000000000000000000000000000000000;;		OvfInvalidValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueConfiguration"] = reflect.TypeOf((*OvfInvalidValueConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueConfigurationFault OvfInvalidValueConfiguration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueConfigurationFault"] = reflect.TypeOf((*OvfInvalidValueConfigurationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueEmpty struct {
0000000000000000000000000000000000000000;;		OvfInvalidValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueEmpty"] = reflect.TypeOf((*OvfInvalidValueEmpty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueEmptyFault OvfInvalidValueEmpty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueEmptyFault"] = reflect.TypeOf((*OvfInvalidValueEmptyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueFault BaseOvfInvalidValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueFault"] = reflect.TypeOf((*OvfInvalidValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueFormatMalformed struct {
0000000000000000000000000000000000000000;;		OvfInvalidValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueFormatMalformed"] = reflect.TypeOf((*OvfInvalidValueFormatMalformed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueFormatMalformedFault OvfInvalidValueFormatMalformed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueFormatMalformedFault"] = reflect.TypeOf((*OvfInvalidValueFormatMalformedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueReference struct {
0000000000000000000000000000000000000000;;		OvfInvalidValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueReference"] = reflect.TypeOf((*OvfInvalidValueReference)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidValueReferenceFault OvfInvalidValueReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidValueReferenceFault"] = reflect.TypeOf((*OvfInvalidValueReferenceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidVmName struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidVmName"] = reflect.TypeOf((*OvfInvalidVmName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfInvalidVmNameFault OvfInvalidVmName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfInvalidVmNameFault"] = reflect.TypeOf((*OvfInvalidVmNameFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfManagerCommonParams struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Locale           string     `xml:"locale"`
0000000000000000000000000000000000000000;;		DeploymentOption string     `xml:"deploymentOption"`
0000000000000000000000000000000000000000;;		MsgBundle        []KeyValue `xml:"msgBundle,omitempty"`
0000000000000000000000000000000000000000;;		ImportOption     []string   `xml:"importOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfManagerCommonParams"] = reflect.TypeOf((*OvfManagerCommonParams)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMappedOsId struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OvfId             int32  `xml:"ovfId"`
0000000000000000000000000000000000000000;;		OvfDescription    string `xml:"ovfDescription"`
0000000000000000000000000000000000000000;;		TargetDescription string `xml:"targetDescription"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMappedOsId"] = reflect.TypeOf((*OvfMappedOsId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMappedOsIdFault OvfMappedOsId
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMappedOsIdFault"] = reflect.TypeOf((*OvfMappedOsIdFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingAttribute struct {
0000000000000000000000000000000000000000;;		OvfAttribute
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingAttribute"] = reflect.TypeOf((*OvfMissingAttribute)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingAttributeFault OvfMissingAttribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingAttributeFault"] = reflect.TypeOf((*OvfMissingAttributeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingElement struct {
0000000000000000000000000000000000000000;;		OvfElement
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingElement"] = reflect.TypeOf((*OvfMissingElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingElementFault BaseOvfMissingElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingElementFault"] = reflect.TypeOf((*OvfMissingElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingElementNormalBoundary struct {
0000000000000000000000000000000000000000;;		OvfMissingElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Boundary string `xml:"boundary"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingElementNormalBoundary"] = reflect.TypeOf((*OvfMissingElementNormalBoundary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingElementNormalBoundaryFault OvfMissingElementNormalBoundary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingElementNormalBoundaryFault"] = reflect.TypeOf((*OvfMissingElementNormalBoundaryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingHardware struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name         string `xml:"name"`
0000000000000000000000000000000000000000;;		ResourceType int32  `xml:"resourceType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingHardware"] = reflect.TypeOf((*OvfMissingHardware)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfMissingHardwareFault OvfMissingHardware
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfMissingHardwareFault"] = reflect.TypeOf((*OvfMissingHardwareFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNetworkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name        string `xml:"name"`
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNetworkInfo"] = reflect.TypeOf((*OvfNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNetworkMapping struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name    string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Network ManagedObjectReference `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNetworkMapping"] = reflect.TypeOf((*OvfNetworkMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNetworkMappingNotSupported struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNetworkMappingNotSupported"] = reflect.TypeOf((*OvfNetworkMappingNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNetworkMappingNotSupportedFault OvfNetworkMappingNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNetworkMappingNotSupportedFault"] = reflect.TypeOf((*OvfNetworkMappingNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNoHostNic struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNoHostNic"] = reflect.TypeOf((*OvfNoHostNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNoHostNicFault OvfNoHostNic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNoHostNicFault"] = reflect.TypeOf((*OvfNoHostNicFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNoSpaceOnController struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent string `xml:"parent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNoSpaceOnController"] = reflect.TypeOf((*OvfNoSpaceOnController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNoSpaceOnControllerFault OvfNoSpaceOnController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNoSpaceOnControllerFault"] = reflect.TypeOf((*OvfNoSpaceOnControllerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNoSupportedHardwareFamily struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `xml:"version"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNoSupportedHardwareFamily"] = reflect.TypeOf((*OvfNoSupportedHardwareFamily)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfNoSupportedHardwareFamilyFault OvfNoSupportedHardwareFamily
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfNoSupportedHardwareFamilyFault"] = reflect.TypeOf((*OvfNoSupportedHardwareFamilyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfOptionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Option      string             `xml:"option"`
0000000000000000000000000000000000000000;;		Description LocalizableMessage `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfOptionInfo"] = reflect.TypeOf((*OvfOptionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfParseDescriptorParams struct {
0000000000000000000000000000000000000000;;		OvfManagerCommonParams
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfParseDescriptorParams"] = reflect.TypeOf((*OvfParseDescriptorParams)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfParseDescriptorResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Eula                            []string               `xml:"eula,omitempty"`
0000000000000000000000000000000000000000;;		Network                         []OvfNetworkInfo       `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		IpAllocationScheme              []string               `xml:"ipAllocationScheme,omitempty"`
0000000000000000000000000000000000000000;;		IpProtocols                     []string               `xml:"ipProtocols,omitempty"`
0000000000000000000000000000000000000000;;		Property                        []VAppPropertyInfo     `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;		ProductInfo                     *VAppProductInfo       `xml:"productInfo,omitempty"`
0000000000000000000000000000000000000000;;		Annotation                      string                 `xml:"annotation"`
0000000000000000000000000000000000000000;;		ApproximateDownloadSize         int64                  `xml:"approximateDownloadSize,omitempty"`
0000000000000000000000000000000000000000;;		ApproximateFlatDeploymentSize   int64                  `xml:"approximateFlatDeploymentSize,omitempty"`
0000000000000000000000000000000000000000;;		ApproximateSparseDeploymentSize int64                  `xml:"approximateSparseDeploymentSize,omitempty"`
0000000000000000000000000000000000000000;;		DefaultEntityName               string                 `xml:"defaultEntityName"`
0000000000000000000000000000000000000000;;		VirtualApp                      bool                   `xml:"virtualApp"`
0000000000000000000000000000000000000000;;		DeploymentOption                []OvfDeploymentOption  `xml:"deploymentOption,omitempty"`
0000000000000000000000000000000000000000;;		DefaultDeploymentOption         string                 `xml:"defaultDeploymentOption"`
0000000000000000000000000000000000000000;;		EntityName                      []KeyValue             `xml:"entityName,omitempty"`
0000000000000000000000000000000000000000;;		AnnotatedOst                    *OvfConsumerOstNode    `xml:"annotatedOst,omitempty"`
0000000000000000000000000000000000000000;;		Error                           []LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Warning                         []LocalizedMethodFault `xml:"warning,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfParseDescriptorResult"] = reflect.TypeOf((*OvfParseDescriptorResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfProperty struct {
0000000000000000000000000000000000000000;;		OvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type  string `xml:"type"`
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfProperty"] = reflect.TypeOf((*OvfProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyExport struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type  string `xml:"type"`
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyExport"] = reflect.TypeOf((*OvfPropertyExport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyExportFault OvfPropertyExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyExportFault"] = reflect.TypeOf((*OvfPropertyExportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyFault BaseOvfProperty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyFault"] = reflect.TypeOf((*OvfPropertyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyNetwork struct {
0000000000000000000000000000000000000000;;		OvfProperty
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyNetwork"] = reflect.TypeOf((*OvfPropertyNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyNetworkExport struct {
0000000000000000000000000000000000000000;;		OvfExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network string `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyNetworkExport"] = reflect.TypeOf((*OvfPropertyNetworkExport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyNetworkExportFault OvfPropertyNetworkExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyNetworkExportFault"] = reflect.TypeOf((*OvfPropertyNetworkExportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyNetworkFault OvfPropertyNetwork
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyNetworkFault"] = reflect.TypeOf((*OvfPropertyNetworkFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyQualifier struct {
0000000000000000000000000000000000000000;;		OvfProperty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Qualifier string `xml:"qualifier"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyQualifier"] = reflect.TypeOf((*OvfPropertyQualifier)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyQualifierDuplicate struct {
0000000000000000000000000000000000000000;;		OvfProperty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Qualifier string `xml:"qualifier"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyQualifierDuplicate"] = reflect.TypeOf((*OvfPropertyQualifierDuplicate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyQualifierDuplicateFault OvfPropertyQualifierDuplicate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyQualifierDuplicateFault"] = reflect.TypeOf((*OvfPropertyQualifierDuplicateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyQualifierFault OvfPropertyQualifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyQualifierFault"] = reflect.TypeOf((*OvfPropertyQualifierFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyQualifierIgnored struct {
0000000000000000000000000000000000000000;;		OvfProperty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Qualifier string `xml:"qualifier"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyQualifierIgnored"] = reflect.TypeOf((*OvfPropertyQualifierIgnored)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyQualifierIgnoredFault OvfPropertyQualifierIgnored
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyQualifierIgnoredFault"] = reflect.TypeOf((*OvfPropertyQualifierIgnoredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyType struct {
0000000000000000000000000000000000000000;;		OvfProperty
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyType"] = reflect.TypeOf((*OvfPropertyType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyTypeFault OvfPropertyType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyTypeFault"] = reflect.TypeOf((*OvfPropertyTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyValue struct {
0000000000000000000000000000000000000000;;		OvfProperty
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyValue"] = reflect.TypeOf((*OvfPropertyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfPropertyValueFault OvfPropertyValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfPropertyValueFault"] = reflect.TypeOf((*OvfPropertyValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfResourceMap struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source       string                  `xml:"source"`
0000000000000000000000000000000000000000;;		Parent       *ManagedObjectReference `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		ResourceSpec *ResourceConfigSpec     `xml:"resourceSpec,omitempty"`
0000000000000000000000000000000000000000;;		Datastore    *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfResourceMap"] = reflect.TypeOf((*OvfResourceMap)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfSystemFault struct {
0000000000000000000000000000000000000000;;		OvfFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfSystemFault"] = reflect.TypeOf((*OvfSystemFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfSystemFaultFault BaseOvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfSystemFaultFault"] = reflect.TypeOf((*OvfSystemFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfToXmlUnsupportedElement struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfToXmlUnsupportedElement"] = reflect.TypeOf((*OvfToXmlUnsupportedElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfToXmlUnsupportedElementFault OvfToXmlUnsupportedElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfToXmlUnsupportedElementFault"] = reflect.TypeOf((*OvfToXmlUnsupportedElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnableToExportDisk struct {
0000000000000000000000000000000000000000;;		OvfHardwareExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskName string `xml:"diskName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnableToExportDisk"] = reflect.TypeOf((*OvfUnableToExportDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnableToExportDiskFault OvfUnableToExportDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnableToExportDiskFault"] = reflect.TypeOf((*OvfUnableToExportDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnexpectedElement struct {
0000000000000000000000000000000000000000;;		OvfElement
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnexpectedElement"] = reflect.TypeOf((*OvfUnexpectedElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnexpectedElementFault OvfUnexpectedElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnexpectedElementFault"] = reflect.TypeOf((*OvfUnexpectedElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnknownDevice struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device BaseVirtualDevice `xml:"device,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		VmName string            `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnknownDevice"] = reflect.TypeOf((*OvfUnknownDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnknownDeviceBacking struct {
0000000000000000000000000000000000000000;;		OvfHardwareExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Backing BaseVirtualDeviceBackingInfo `xml:"backing,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnknownDeviceBacking"] = reflect.TypeOf((*OvfUnknownDeviceBacking)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnknownDeviceBackingFault OvfUnknownDeviceBacking
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnknownDeviceBackingFault"] = reflect.TypeOf((*OvfUnknownDeviceBackingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnknownDeviceFault OvfUnknownDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnknownDeviceFault"] = reflect.TypeOf((*OvfUnknownDeviceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnknownEntity struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LineNumber int32 `xml:"lineNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnknownEntity"] = reflect.TypeOf((*OvfUnknownEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnknownEntityFault OvfUnknownEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnknownEntityFault"] = reflect.TypeOf((*OvfUnknownEntityFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedAttribute struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ElementName   string `xml:"elementName"`
0000000000000000000000000000000000000000;;		AttributeName string `xml:"attributeName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedAttribute"] = reflect.TypeOf((*OvfUnsupportedAttribute)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedAttributeFault BaseOvfUnsupportedAttribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedAttributeFault"] = reflect.TypeOf((*OvfUnsupportedAttributeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedAttributeValue struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedAttribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedAttributeValue"] = reflect.TypeOf((*OvfUnsupportedAttributeValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedAttributeValueFault OvfUnsupportedAttributeValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedAttributeValueFault"] = reflect.TypeOf((*OvfUnsupportedAttributeValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ElementName string `xml:"elementName,omitempty"`
0000000000000000000000000000000000000000;;		InstanceId  string `xml:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;		DeviceName  string `xml:"deviceName"`
0000000000000000000000000000000000000000;;		BackingName string `xml:"backingName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDeviceBackingInfo"] = reflect.TypeOf((*OvfUnsupportedDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDeviceBackingInfoFault OvfUnsupportedDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDeviceBackingInfoFault"] = reflect.TypeOf((*OvfUnsupportedDeviceBackingInfoFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		OvfSystemFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ElementName string `xml:"elementName,omitempty"`
0000000000000000000000000000000000000000;;		InstanceId  string `xml:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;		DeviceName  string `xml:"deviceName"`
0000000000000000000000000000000000000000;;		BackingName string `xml:"backingName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDeviceBackingOption"] = reflect.TypeOf((*OvfUnsupportedDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDeviceBackingOptionFault OvfUnsupportedDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDeviceBackingOptionFault"] = reflect.TypeOf((*OvfUnsupportedDeviceBackingOptionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDeviceExport struct {
0000000000000000000000000000000000000000;;		OvfHardwareExport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDeviceExport"] = reflect.TypeOf((*OvfUnsupportedDeviceExport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDeviceExportFault OvfUnsupportedDeviceExport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDeviceExportFault"] = reflect.TypeOf((*OvfUnsupportedDeviceExportFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDiskProvisioning struct {
0000000000000000000000000000000000000000;;		OvfImport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskProvisioning          string `xml:"diskProvisioning"`
0000000000000000000000000000000000000000;;		SupportedDiskProvisioning string `xml:"supportedDiskProvisioning"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDiskProvisioning"] = reflect.TypeOf((*OvfUnsupportedDiskProvisioning)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedDiskProvisioningFault OvfUnsupportedDiskProvisioning
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedDiskProvisioningFault"] = reflect.TypeOf((*OvfUnsupportedDiskProvisioningFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedElement struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedElement"] = reflect.TypeOf((*OvfUnsupportedElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedElementFault BaseOvfUnsupportedElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedElementFault"] = reflect.TypeOf((*OvfUnsupportedElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedElementValue struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedElementValue"] = reflect.TypeOf((*OvfUnsupportedElementValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedElementValueFault OvfUnsupportedElementValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedElementValueFault"] = reflect.TypeOf((*OvfUnsupportedElementValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedPackage struct {
0000000000000000000000000000000000000000;;		OvfFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LineNumber int32 `xml:"lineNumber,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedPackage"] = reflect.TypeOf((*OvfUnsupportedPackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedPackageFault BaseOvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedPackageFault"] = reflect.TypeOf((*OvfUnsupportedPackageFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedSection struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info string `xml:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedSection"] = reflect.TypeOf((*OvfUnsupportedSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedSectionFault OvfUnsupportedSection
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedSectionFault"] = reflect.TypeOf((*OvfUnsupportedSectionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedSubType struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ElementName   string `xml:"elementName"`
0000000000000000000000000000000000000000;;		InstanceId    string `xml:"instanceId"`
0000000000000000000000000000000000000000;;		DeviceType    int32  `xml:"deviceType"`
0000000000000000000000000000000000000000;;		DeviceSubType string `xml:"deviceSubType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedSubType"] = reflect.TypeOf((*OvfUnsupportedSubType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedSubTypeFault OvfUnsupportedSubType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedSubTypeFault"] = reflect.TypeOf((*OvfUnsupportedSubTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedType struct {
0000000000000000000000000000000000000000;;		OvfUnsupportedPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name       string `xml:"name"`
0000000000000000000000000000000000000000;;		InstanceId string `xml:"instanceId"`
0000000000000000000000000000000000000000;;		DeviceType int32  `xml:"deviceType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedType"] = reflect.TypeOf((*OvfUnsupportedType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfUnsupportedTypeFault OvfUnsupportedType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfUnsupportedTypeFault"] = reflect.TypeOf((*OvfUnsupportedTypeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfValidateHostParams struct {
0000000000000000000000000000000000000000;;		OvfManagerCommonParams
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfValidateHostParams"] = reflect.TypeOf((*OvfValidateHostParams)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfValidateHostResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DownloadSize              int64                  `xml:"downloadSize,omitempty"`
0000000000000000000000000000000000000000;;		FlatDeploymentSize        int64                  `xml:"flatDeploymentSize,omitempty"`
0000000000000000000000000000000000000000;;		SparseDeploymentSize      int64                  `xml:"sparseDeploymentSize,omitempty"`
0000000000000000000000000000000000000000;;		Error                     []LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Warning                   []LocalizedMethodFault `xml:"warning,omitempty"`
0000000000000000000000000000000000000000;;		SupportedDiskProvisioning []string               `xml:"supportedDiskProvisioning,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfValidateHostResult"] = reflect.TypeOf((*OvfValidateHostResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfWrongElement struct {
0000000000000000000000000000000000000000;;		OvfElement
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfWrongElement"] = reflect.TypeOf((*OvfWrongElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfWrongElementFault OvfWrongElement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfWrongElementFault"] = reflect.TypeOf((*OvfWrongElementFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfWrongNamespace struct {
0000000000000000000000000000000000000000;;		OvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NamespaceName string `xml:"namespaceName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfWrongNamespace"] = reflect.TypeOf((*OvfWrongNamespace)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfWrongNamespaceFault OvfWrongNamespace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfWrongNamespaceFault"] = reflect.TypeOf((*OvfWrongNamespaceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfXmlFormat struct {
0000000000000000000000000000000000000000;;		OvfInvalidPackage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfXmlFormat"] = reflect.TypeOf((*OvfXmlFormat)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfXmlFormatFault OvfXmlFormat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfXmlFormatFault"] = reflect.TypeOf((*OvfXmlFormatFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParaVirtualSCSIController struct {
0000000000000000000000000000000000000000;;		VirtualSCSIController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ParaVirtualSCSIController"] = reflect.TypeOf((*ParaVirtualSCSIController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParaVirtualSCSIControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualSCSIControllerOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ParaVirtualSCSIControllerOption"] = reflect.TypeOf((*ParaVirtualSCSIControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParseDescriptor ParseDescriptorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ParseDescriptor"] = reflect.TypeOf((*ParseDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParseDescriptorRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		OvfDescriptor string                   `xml:"ovfDescriptor"`
0000000000000000000000000000000000000000;;		Pdp           OvfParseDescriptorParams `xml:"pdp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ParseDescriptorRequestType"] = reflect.TypeOf((*ParseDescriptorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParseDescriptorResponse struct {
0000000000000000000000000000000000000000;;		Returnval OvfParseDescriptorResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PassiveNodeDeploymentSpec struct {
0000000000000000000000000000000000000000;;		NodeDeploymentSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailoverIpSettings *CustomizationIPSettings `xml:"failoverIpSettings,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PassiveNodeDeploymentSpec"] = reflect.TypeOf((*PassiveNodeDeploymentSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PassiveNodeNetworkSpec struct {
0000000000000000000000000000000000000000;;		NodeNetworkSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailoverIpSettings *CustomizationIPSettings `xml:"failoverIpSettings,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PassiveNodeNetworkSpec"] = reflect.TypeOf((*PassiveNodeNetworkSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PasswordField struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PasswordField"] = reflect.TypeOf((*PasswordField)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchAlreadyInstalled struct {
0000000000000000000000000000000000000000;;		PatchNotApplicable
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchAlreadyInstalled"] = reflect.TypeOf((*PatchAlreadyInstalled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchAlreadyInstalledFault PatchAlreadyInstalled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchAlreadyInstalledFault"] = reflect.TypeOf((*PatchAlreadyInstalledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchBinariesNotFound struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PatchID string   `xml:"patchID"`
0000000000000000000000000000000000000000;;		Binary  []string `xml:"binary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchBinariesNotFound"] = reflect.TypeOf((*PatchBinariesNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchBinariesNotFoundFault PatchBinariesNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchBinariesNotFoundFault"] = reflect.TypeOf((*PatchBinariesNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchInstallFailed struct {
0000000000000000000000000000000000000000;;		PlatformConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RolledBack bool `xml:"rolledBack"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchInstallFailed"] = reflect.TypeOf((*PatchInstallFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchInstallFailedFault PatchInstallFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchInstallFailedFault"] = reflect.TypeOf((*PatchInstallFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchIntegrityError struct {
0000000000000000000000000000000000000000;;		PlatformConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchIntegrityError"] = reflect.TypeOf((*PatchIntegrityError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchIntegrityErrorFault PatchIntegrityError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchIntegrityErrorFault"] = reflect.TypeOf((*PatchIntegrityErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMetadataCorrupted struct {
0000000000000000000000000000000000000000;;		PatchMetadataInvalid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMetadataCorrupted"] = reflect.TypeOf((*PatchMetadataCorrupted)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMetadataCorruptedFault PatchMetadataCorrupted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMetadataCorruptedFault"] = reflect.TypeOf((*PatchMetadataCorruptedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMetadataInvalid struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PatchID  string   `xml:"patchID"`
0000000000000000000000000000000000000000;;		MetaData []string `xml:"metaData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMetadataInvalid"] = reflect.TypeOf((*PatchMetadataInvalid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMetadataInvalidFault BasePatchMetadataInvalid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMetadataInvalidFault"] = reflect.TypeOf((*PatchMetadataInvalidFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMetadataNotFound struct {
0000000000000000000000000000000000000000;;		PatchMetadataInvalid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMetadataNotFound"] = reflect.TypeOf((*PatchMetadataNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMetadataNotFoundFault PatchMetadataNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMetadataNotFoundFault"] = reflect.TypeOf((*PatchMetadataNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMissingDependencies struct {
0000000000000000000000000000000000000000;;		PatchNotApplicable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrerequisitePatch []string `xml:"prerequisitePatch,omitempty"`
0000000000000000000000000000000000000000;;		PrerequisiteLib   []string `xml:"prerequisiteLib,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMissingDependencies"] = reflect.TypeOf((*PatchMissingDependencies)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchMissingDependenciesFault PatchMissingDependencies
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchMissingDependenciesFault"] = reflect.TypeOf((*PatchMissingDependenciesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchNotApplicable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PatchID string `xml:"patchID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchNotApplicable"] = reflect.TypeOf((*PatchNotApplicable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchNotApplicableFault BasePatchNotApplicable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchNotApplicableFault"] = reflect.TypeOf((*PatchNotApplicableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchSuperseded struct {
0000000000000000000000000000000000000000;;		PatchNotApplicable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Supersede []string `xml:"supersede,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchSuperseded"] = reflect.TypeOf((*PatchSuperseded)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchSupersededFault PatchSuperseded
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PatchSupersededFault"] = reflect.TypeOf((*PatchSupersededFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfCompositeMetric struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity      BasePerfEntityMetricBase   `xml:"entity,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ChildEntity []BasePerfEntityMetricBase `xml:"childEntity,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfCompositeMetric"] = reflect.TypeOf((*PerfCompositeMetric)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfCounterInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                 int32                  `xml:"key"`
0000000000000000000000000000000000000000;;		NameInfo            BaseElementDescription `xml:"nameInfo,typeattr"`
0000000000000000000000000000000000000000;;		GroupInfo           BaseElementDescription `xml:"groupInfo,typeattr"`
0000000000000000000000000000000000000000;;		UnitInfo            BaseElementDescription `xml:"unitInfo,typeattr"`
0000000000000000000000000000000000000000;;		RollupType          PerfSummaryType        `xml:"rollupType"`
0000000000000000000000000000000000000000;;		StatsType           PerfStatsType          `xml:"statsType"`
0000000000000000000000000000000000000000;;		Level               int32                  `xml:"level,omitempty"`
0000000000000000000000000000000000000000;;		PerDeviceLevel      int32                  `xml:"perDeviceLevel,omitempty"`
0000000000000000000000000000000000000000;;		AssociatedCounterId []int32                `xml:"associatedCounterId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfCounterInfo"] = reflect.TypeOf((*PerfCounterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfEntityMetric struct {
0000000000000000000000000000000000000000;;		PerfEntityMetricBase
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SampleInfo []PerfSampleInfo       `xml:"sampleInfo,omitempty"`
0000000000000000000000000000000000000000;;		Value      []BasePerfMetricSeries `xml:"value,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfEntityMetric"] = reflect.TypeOf((*PerfEntityMetric)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfEntityMetricBase struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfEntityMetricBase"] = reflect.TypeOf((*PerfEntityMetricBase)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfEntityMetricCSV struct {
0000000000000000000000000000000000000000;;		PerfEntityMetricBase
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SampleInfoCSV string                `xml:"sampleInfoCSV"`
0000000000000000000000000000000000000000;;		Value         []PerfMetricSeriesCSV `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfEntityMetricCSV"] = reflect.TypeOf((*PerfEntityMetricCSV)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfInterval struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key            int32  `xml:"key"`
0000000000000000000000000000000000000000;;		SamplingPeriod int32  `xml:"samplingPeriod"`
0000000000000000000000000000000000000000;;		Name           string `xml:"name"`
0000000000000000000000000000000000000000;;		Length         int32  `xml:"length"`
0000000000000000000000000000000000000000;;		Level          int32  `xml:"level,omitempty"`
0000000000000000000000000000000000000000;;		Enabled        bool   `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfInterval"] = reflect.TypeOf((*PerfInterval)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfMetricId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CounterId int32  `xml:"counterId"`
0000000000000000000000000000000000000000;;		Instance  string `xml:"instance"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfMetricId"] = reflect.TypeOf((*PerfMetricId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfMetricIntSeries struct {
0000000000000000000000000000000000000000;;		PerfMetricSeries
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value []int64 `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfMetricIntSeries"] = reflect.TypeOf((*PerfMetricIntSeries)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfMetricSeries struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id PerfMetricId `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfMetricSeries"] = reflect.TypeOf((*PerfMetricSeries)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfMetricSeriesCSV struct {
0000000000000000000000000000000000000000;;		PerfMetricSeries
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfMetricSeriesCSV"] = reflect.TypeOf((*PerfMetricSeriesCSV)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfProviderSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity           ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		CurrentSupported bool                   `xml:"currentSupported"`
0000000000000000000000000000000000000000;;		SummarySupported bool                   `xml:"summarySupported"`
0000000000000000000000000000000000000000;;		RefreshRate      int32                  `xml:"refreshRate,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfProviderSummary"] = reflect.TypeOf((*PerfProviderSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfQuerySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		StartTime  *time.Time             `xml:"startTime"`
0000000000000000000000000000000000000000;;		EndTime    *time.Time             `xml:"endTime"`
0000000000000000000000000000000000000000;;		MaxSample  int32                  `xml:"maxSample,omitempty"`
0000000000000000000000000000000000000000;;		MetricId   []PerfMetricId         `xml:"metricId,omitempty"`
0000000000000000000000000000000000000000;;		IntervalId int32                  `xml:"intervalId,omitempty"`
0000000000000000000000000000000000000000;;		Format     string                 `xml:"format,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfQuerySpec"] = reflect.TypeOf((*PerfQuerySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerfSampleInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timestamp time.Time `xml:"timestamp"`
0000000000000000000000000000000000000000;;		Interval  int32     `xml:"interval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerfSampleInfo"] = reflect.TypeOf((*PerfSampleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformDvsProductSpecOperationRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		Operation   string                               `xml:"operation"`
0000000000000000000000000000000000000000;;		ProductSpec *DistributedVirtualSwitchProductSpec `xml:"productSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformDvsProductSpecOperationRequestType"] = reflect.TypeOf((*PerformDvsProductSpecOperationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformDvsProductSpecOperation_Task PerformDvsProductSpecOperationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformDvsProductSpecOperation_Task"] = reflect.TypeOf((*PerformDvsProductSpecOperation_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformDvsProductSpecOperation_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformVsanUpgradePreflightCheck PerformVsanUpgradePreflightCheckRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformVsanUpgradePreflightCheck"] = reflect.TypeOf((*PerformVsanUpgradePreflightCheck)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformVsanUpgradePreflightCheckRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster         ManagedObjectReference `xml:"cluster"`
0000000000000000000000000000000000000000;;		DowngradeFormat *bool                  `xml:"downgradeFormat"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformVsanUpgradePreflightCheckRequestType"] = reflect.TypeOf((*PerformVsanUpgradePreflightCheckRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformVsanUpgradePreflightCheckResponse struct {
0000000000000000000000000000000000000000;;		Returnval VsanUpgradeSystemPreflightCheckResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformVsanUpgradeRequestType struct {
0000000000000000000000000000000000000000;;		This                   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster                ManagedObjectReference   `xml:"cluster"`
0000000000000000000000000000000000000000;;		PerformObjectUpgrade   *bool                    `xml:"performObjectUpgrade"`
0000000000000000000000000000000000000000;;		DowngradeFormat        *bool                    `xml:"downgradeFormat"`
0000000000000000000000000000000000000000;;		AllowReducedRedundancy *bool                    `xml:"allowReducedRedundancy"`
0000000000000000000000000000000000000000;;		ExcludeHosts           []ManagedObjectReference `xml:"excludeHosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformVsanUpgradeRequestType"] = reflect.TypeOf((*PerformVsanUpgradeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformVsanUpgrade_Task PerformVsanUpgradeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformVsanUpgrade_Task"] = reflect.TypeOf((*PerformVsanUpgrade_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformVsanUpgrade_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformanceDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CounterType []BaseElementDescription `xml:"counterType,typeattr"`
0000000000000000000000000000000000000000;;		StatsType   []BaseElementDescription `xml:"statsType,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformanceDescription"] = reflect.TypeOf((*PerformanceDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformanceManagerCounterLevelMapping struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CounterId      int32 `xml:"counterId"`
0000000000000000000000000000000000000000;;		AggregateLevel int32 `xml:"aggregateLevel,omitempty"`
0000000000000000000000000000000000000000;;		PerDeviceLevel int32 `xml:"perDeviceLevel,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformanceManagerCounterLevelMapping"] = reflect.TypeOf((*PerformanceManagerCounterLevelMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformanceStatisticsDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Intervals []PerfInterval `xml:"intervals,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformanceStatisticsDescription"] = reflect.TypeOf((*PerformanceStatisticsDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Permission struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity    *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		Principal string                  `xml:"principal"`
0000000000000000000000000000000000000000;;		Group     bool                    `xml:"group"`
0000000000000000000000000000000000000000;;		RoleId    int32                   `xml:"roleId"`
0000000000000000000000000000000000000000;;		Propagate bool                    `xml:"propagate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Permission"] = reflect.TypeOf((*Permission)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PermissionAddedEvent struct {
0000000000000000000000000000000000000000;;		PermissionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Role      RoleEventArgument `xml:"role"`
0000000000000000000000000000000000000000;;		Propagate bool              `xml:"propagate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PermissionAddedEvent"] = reflect.TypeOf((*PermissionAddedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PermissionEvent struct {
0000000000000000000000000000000000000000;;		AuthorizationEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity    ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;		Principal string                     `xml:"principal"`
0000000000000000000000000000000000000000;;		Group     bool                       `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PermissionEvent"] = reflect.TypeOf((*PermissionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PermissionProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PermissionProfile"] = reflect.TypeOf((*PermissionProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PermissionRemovedEvent struct {
0000000000000000000000000000000000000000;;		PermissionEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PermissionRemovedEvent"] = reflect.TypeOf((*PermissionRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PermissionUpdatedEvent struct {
0000000000000000000000000000000000000000;;		PermissionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Role          RoleEventArgument  `xml:"role"`
0000000000000000000000000000000000000000;;		Propagate     bool               `xml:"propagate"`
0000000000000000000000000000000000000000;;		PrevRole      *RoleEventArgument `xml:"prevRole,omitempty"`
0000000000000000000000000000000000000000;;		PrevPropagate *bool              `xml:"prevPropagate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PermissionUpdatedEvent"] = reflect.TypeOf((*PermissionUpdatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysCompatRDMNotSupported struct {
0000000000000000000000000000000000000000;;		RDMNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysCompatRDMNotSupported"] = reflect.TypeOf((*PhysCompatRDMNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysCompatRDMNotSupportedFault PhysCompatRDMNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysCompatRDMNotSupportedFault"] = reflect.TypeOf((*PhysCompatRDMNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNic struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                                   string                `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Device                                string                `xml:"device"`
0000000000000000000000000000000000000000;;		Pci                                   string                `xml:"pci"`
0000000000000000000000000000000000000000;;		Driver                                string                `xml:"driver,omitempty"`
0000000000000000000000000000000000000000;;		LinkSpeed                             *PhysicalNicLinkInfo  `xml:"linkSpeed,omitempty"`
0000000000000000000000000000000000000000;;		ValidLinkSpecification                []PhysicalNicLinkInfo `xml:"validLinkSpecification,omitempty"`
0000000000000000000000000000000000000000;;		Spec                                  PhysicalNicSpec       `xml:"spec"`
0000000000000000000000000000000000000000;;		WakeOnLanSupported                    bool                  `xml:"wakeOnLanSupported"`
0000000000000000000000000000000000000000;;		Mac                                   string                `xml:"mac"`
0000000000000000000000000000000000000000;;		FcoeConfiguration                     *FcoeConfig           `xml:"fcoeConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2Supported             *bool                 `xml:"vmDirectPathGen2Supported"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2SupportedMode         string                `xml:"vmDirectPathGen2SupportedMode,omitempty"`
0000000000000000000000000000000000000000;;		ResourcePoolSchedulerAllowed          *bool                 `xml:"resourcePoolSchedulerAllowed"`
0000000000000000000000000000000000000000;;		ResourcePoolSchedulerDisallowedReason []string              `xml:"resourcePoolSchedulerDisallowedReason,omitempty"`
0000000000000000000000000000000000000000;;		AutoNegotiateSupported                *bool                 `xml:"autoNegotiateSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNic"] = reflect.TypeOf((*PhysicalNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicCdpDeviceCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Router            bool `xml:"router"`
0000000000000000000000000000000000000000;;		TransparentBridge bool `xml:"transparentBridge"`
0000000000000000000000000000000000000000;;		SourceRouteBridge bool `xml:"sourceRouteBridge"`
0000000000000000000000000000000000000000;;		NetworkSwitch     bool `xml:"networkSwitch"`
0000000000000000000000000000000000000000;;		Host              bool `xml:"host"`
0000000000000000000000000000000000000000;;		IgmpEnabled       bool `xml:"igmpEnabled"`
0000000000000000000000000000000000000000;;		Repeater          bool `xml:"repeater"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicCdpDeviceCapability"] = reflect.TypeOf((*PhysicalNicCdpDeviceCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicCdpInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CdpVersion       int32                           `xml:"cdpVersion,omitempty"`
0000000000000000000000000000000000000000;;		Timeout          int32                           `xml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;		Ttl              int32                           `xml:"ttl,omitempty"`
0000000000000000000000000000000000000000;;		Samples          int32                           `xml:"samples,omitempty"`
0000000000000000000000000000000000000000;;		DevId            string                          `xml:"devId,omitempty"`
0000000000000000000000000000000000000000;;		Address          string                          `xml:"address,omitempty"`
0000000000000000000000000000000000000000;;		PortId           string                          `xml:"portId,omitempty"`
0000000000000000000000000000000000000000;;		DeviceCapability *PhysicalNicCdpDeviceCapability `xml:"deviceCapability,omitempty"`
0000000000000000000000000000000000000000;;		SoftwareVersion  string                          `xml:"softwareVersion,omitempty"`
0000000000000000000000000000000000000000;;		HardwarePlatform string                          `xml:"hardwarePlatform,omitempty"`
0000000000000000000000000000000000000000;;		IpPrefix         string                          `xml:"ipPrefix,omitempty"`
0000000000000000000000000000000000000000;;		IpPrefixLen      int32                           `xml:"ipPrefixLen,omitempty"`
0000000000000000000000000000000000000000;;		Vlan             int32                           `xml:"vlan,omitempty"`
0000000000000000000000000000000000000000;;		FullDuplex       *bool                           `xml:"fullDuplex"`
0000000000000000000000000000000000000000;;		Mtu              int32                           `xml:"mtu,omitempty"`
0000000000000000000000000000000000000000;;		SystemName       string                          `xml:"systemName,omitempty"`
0000000000000000000000000000000000000000;;		SystemOID        string                          `xml:"systemOID,omitempty"`
0000000000000000000000000000000000000000;;		MgmtAddr         string                          `xml:"mgmtAddr,omitempty"`
0000000000000000000000000000000000000000;;		Location         string                          `xml:"location,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicCdpInfo"] = reflect.TypeOf((*PhysicalNicCdpInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string          `xml:"device"`
0000000000000000000000000000000000000000;;		Spec   PhysicalNicSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicConfig"] = reflect.TypeOf((*PhysicalNicConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicHint struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanId int32 `xml:"vlanId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicHint"] = reflect.TypeOf((*PhysicalNicHint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicHintInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device              string                          `xml:"device"`
0000000000000000000000000000000000000000;;		Subnet              []PhysicalNicIpHint             `xml:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		Network             []PhysicalNicNameHint           `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		ConnectedSwitchPort *PhysicalNicCdpInfo             `xml:"connectedSwitchPort,omitempty"`
0000000000000000000000000000000000000000;;		LldpInfo            *LinkLayerDiscoveryProtocolInfo `xml:"lldpInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicHintInfo"] = reflect.TypeOf((*PhysicalNicHintInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicIpHint struct {
0000000000000000000000000000000000000000;;		PhysicalNicHint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpSubnet string `xml:"ipSubnet"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicIpHint"] = reflect.TypeOf((*PhysicalNicIpHint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicLinkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SpeedMb int32 `xml:"speedMb"`
0000000000000000000000000000000000000000;;		Duplex  bool  `xml:"duplex"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicLinkInfo"] = reflect.TypeOf((*PhysicalNicLinkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicNameHint struct {
0000000000000000000000000000000000000000;;		PhysicalNicHint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network string `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicNameHint"] = reflect.TypeOf((*PhysicalNicNameHint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicProfile"] = reflect.TypeOf((*PhysicalNicProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhysicalNicSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ip        *HostIpConfig        `xml:"ip,omitempty"`
0000000000000000000000000000000000000000;;		LinkSpeed *PhysicalNicLinkInfo `xml:"linkSpeed,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PhysicalNicSpec"] = reflect.TypeOf((*PhysicalNicSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlaceVm PlaceVmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlaceVm"] = reflect.TypeOf((*PlaceVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlaceVmRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PlacementSpec PlacementSpec          `xml:"placementSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlaceVmRequestType"] = reflect.TypeOf((*PlaceVmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlaceVmResponse struct {
0000000000000000000000000000000000000000;;		Returnval PlacementResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm           *ManagedObjectReference     `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		TargetHost   *ManagedObjectReference     `xml:"targetHost,omitempty"`
0000000000000000000000000000000000000000;;		RelocateSpec *VirtualMachineRelocateSpec `xml:"relocateSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlacementAction"] = reflect.TypeOf((*PlacementAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementAffinityRule struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RuleType  string                   `xml:"ruleType"`
0000000000000000000000000000000000000000;;		RuleScope string                   `xml:"ruleScope"`
0000000000000000000000000000000000000000;;		Vms       []ManagedObjectReference `xml:"vms,omitempty"`
0000000000000000000000000000000000000000;;		Keys      []string                 `xml:"keys,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlacementAffinityRule"] = reflect.TypeOf((*PlacementAffinityRule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementRankResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key             string                 `xml:"key"`
0000000000000000000000000000000000000000;;		Candidate       ManagedObjectReference `xml:"candidate"`
0000000000000000000000000000000000000000;;		ReservedSpaceMB int64                  `xml:"reservedSpaceMB"`
0000000000000000000000000000000000000000;;		UsedSpaceMB     int64                  `xml:"usedSpaceMB"`
0000000000000000000000000000000000000000;;		TotalSpaceMB    int64                  `xml:"totalSpaceMB"`
0000000000000000000000000000000000000000;;		Utilization     float64                `xml:"utilization"`
0000000000000000000000000000000000000000;;		Faults          []LocalizedMethodFault `xml:"faults,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlacementRankResult"] = reflect.TypeOf((*PlacementRankResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementRankSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Specs             []PlacementSpec                 `xml:"specs"`
0000000000000000000000000000000000000000;;		Clusters          []ManagedObjectReference        `xml:"clusters"`
0000000000000000000000000000000000000000;;		Rules             []PlacementAffinityRule         `xml:"rules,omitempty"`
0000000000000000000000000000000000000000;;		PlacementRankByVm []StorageDrsPlacementRankVmSpec `xml:"placementRankByVm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlacementRankSpec"] = reflect.TypeOf((*PlacementRankSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Recommendations []ClusterRecommendation `xml:"recommendations,omitempty"`
0000000000000000000000000000000000000000;;		DrsFault        *ClusterDrsFaults       `xml:"drsFault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlacementResult"] = reflect.TypeOf((*PlacementResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Priority                  VirtualMachineMovePriority  `xml:"priority,omitempty"`
0000000000000000000000000000000000000000;;		Vm                        *ManagedObjectReference     `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		ConfigSpec                *VirtualMachineConfigSpec   `xml:"configSpec,omitempty"`
0000000000000000000000000000000000000000;;		RelocateSpec              *VirtualMachineRelocateSpec `xml:"relocateSpec,omitempty"`
0000000000000000000000000000000000000000;;		Hosts                     []ManagedObjectReference    `xml:"hosts,omitempty"`
0000000000000000000000000000000000000000;;		Datastores                []ManagedObjectReference    `xml:"datastores,omitempty"`
0000000000000000000000000000000000000000;;		StoragePods               []ManagedObjectReference    `xml:"storagePods,omitempty"`
0000000000000000000000000000000000000000;;		DisallowPrerequisiteMoves *bool                       `xml:"disallowPrerequisiteMoves"`
0000000000000000000000000000000000000000;;		Rules                     []BaseClusterRuleInfo       `xml:"rules,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Key                       string                      `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		PlacementType             string                      `xml:"placementType,omitempty"`
0000000000000000000000000000000000000000;;		CloneSpec                 *VirtualMachineCloneSpec    `xml:"cloneSpec,omitempty"`
0000000000000000000000000000000000000000;;		CloneName                 string                      `xml:"cloneName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlacementSpec"] = reflect.TypeOf((*PlacementSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlatformConfigFault struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Text string `xml:"text"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlatformConfigFault"] = reflect.TypeOf((*PlatformConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlatformConfigFaultFault BasePlatformConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PlatformConfigFaultFault"] = reflect.TypeOf((*PlatformConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PnicUplinkProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PnicUplinkProfile"] = reflect.TypeOf((*PnicUplinkProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PodDiskLocator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskId          int32                           `xml:"diskId"`
0000000000000000000000000000000000000000;;		DiskMoveType    string                          `xml:"diskMoveType,omitempty"`
0000000000000000000000000000000000000000;;		DiskBackingInfo BaseVirtualDeviceBackingInfo    `xml:"diskBackingInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Profile         []BaseVirtualMachineProfileSpec `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PodDiskLocator"] = reflect.TypeOf((*PodDiskLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PodStorageDrsEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageDrsConfig StorageDrsConfigInfo    `xml:"storageDrsConfig"`
0000000000000000000000000000000000000000;;		Recommendation   []ClusterRecommendation `xml:"recommendation,omitempty"`
0000000000000000000000000000000000000000;;		DrsFault         []ClusterDrsFaults      `xml:"drsFault,omitempty"`
0000000000000000000000000000000000000000;;		ActionHistory    []ClusterActionHistory  `xml:"actionHistory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PodStorageDrsEntry"] = reflect.TypeOf((*PodStorageDrsEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PolicyOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id        string        `xml:"id"`
0000000000000000000000000000000000000000;;		Parameter []KeyAnyValue `xml:"parameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PolicyOption"] = reflect.TypeOf((*PolicyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PortGroupProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string                        `xml:"key"`
0000000000000000000000000000000000000000;;		Name          string                        `xml:"name"`
0000000000000000000000000000000000000000;;		Vlan          VlanProfile                   `xml:"vlan"`
0000000000000000000000000000000000000000;;		Vswitch       VirtualSwitchSelectionProfile `xml:"vswitch"`
0000000000000000000000000000000000000000;;		NetworkPolicy NetworkPolicyProfile          `xml:"networkPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PortGroupProfile"] = reflect.TypeOf((*PortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PosixUserSearchResult struct {
0000000000000000000000000000000000000000;;		UserSearchResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id          int32 `xml:"id"`
0000000000000000000000000000000000000000;;		ShellAccess *bool `xml:"shellAccess"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PosixUserSearchResult"] = reflect.TypeOf((*PosixUserSearchResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PostEvent PostEventRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PostEvent"] = reflect.TypeOf((*PostEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PostEventRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EventToPost BaseEvent              `xml:"eventToPost,typeattr"`
0000000000000000000000000000000000000000;;		TaskInfo    *TaskInfo              `xml:"taskInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PostEventRequestType"] = reflect.TypeOf((*PostEventRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PostEventResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PostHealthUpdates PostHealthUpdatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PostHealthUpdates"] = reflect.TypeOf((*PostHealthUpdates)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PostHealthUpdatesRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;		Updates    []HealthUpdate         `xml:"updates,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PostHealthUpdatesRequestType"] = reflect.TypeOf((*PostHealthUpdatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PostHealthUpdatesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerDownHostToStandByRequestType struct {
0000000000000000000000000000000000000000;;		This                  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		TimeoutSec            int32                  `xml:"timeoutSec"`
0000000000000000000000000000000000000000;;		EvacuatePoweredOffVms *bool                  `xml:"evacuatePoweredOffVms"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerDownHostToStandByRequestType"] = reflect.TypeOf((*PowerDownHostToStandByRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerDownHostToStandBy_Task PowerDownHostToStandByRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerDownHostToStandBy_Task"] = reflect.TypeOf((*PowerDownHostToStandBy_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerDownHostToStandBy_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOffVAppRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOffVAppRequestType"] = reflect.TypeOf((*PowerOffVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOffVApp_Task PowerOffVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOffVApp_Task"] = reflect.TypeOf((*PowerOffVApp_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOffVApp_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOffVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOffVMRequestType"] = reflect.TypeOf((*PowerOffVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOffVM_Task PowerOffVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOffVM_Task"] = reflect.TypeOf((*PowerOffVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOffVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnFtSecondaryFailed struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm              ManagedObjectReference          `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName          string                          `xml:"vmName"`
0000000000000000000000000000000000000000;;		HostSelectionBy FtIssuesOnHostHostSelectionType `xml:"hostSelectionBy"`
0000000000000000000000000000000000000000;;		HostErrors      []LocalizedMethodFault          `xml:"hostErrors,omitempty"`
0000000000000000000000000000000000000000;;		RootCause       LocalizedMethodFault            `xml:"rootCause"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnFtSecondaryFailed"] = reflect.TypeOf((*PowerOnFtSecondaryFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnFtSecondaryFailedFault PowerOnFtSecondaryFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnFtSecondaryFailedFault"] = reflect.TypeOf((*PowerOnFtSecondaryFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnFtSecondaryTimedout struct {
0000000000000000000000000000000000000000;;		Timedout
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm      ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		VmName  string                 `xml:"vmName"`
0000000000000000000000000000000000000000;;		Timeout int32                  `xml:"timeout"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnFtSecondaryTimedout"] = reflect.TypeOf((*PowerOnFtSecondaryTimedout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnFtSecondaryTimedoutFault PowerOnFtSecondaryTimedout
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnFtSecondaryTimedoutFault"] = reflect.TypeOf((*PowerOnFtSecondaryTimedoutFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnMultiVMRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm     []ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		Option []BaseOptionValue        `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnMultiVMRequestType"] = reflect.TypeOf((*PowerOnMultiVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnMultiVM_Task PowerOnMultiVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnMultiVM_Task"] = reflect.TypeOf((*PowerOnMultiVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnMultiVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnVAppRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnVAppRequestType"] = reflect.TypeOf((*PowerOnVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnVApp_Task PowerOnVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnVApp_Task"] = reflect.TypeOf((*PowerOnVApp_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnVApp_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnVMRequestType"] = reflect.TypeOf((*PowerOnVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnVM_Task PowerOnVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerOnVM_Task"] = reflect.TypeOf((*PowerOnVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerOnVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerSystemCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AvailablePolicy []HostPowerPolicy `xml:"availablePolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerSystemCapability"] = reflect.TypeOf((*PowerSystemCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerSystemInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentPolicy HostPowerPolicy `xml:"currentPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerSystemInfo"] = reflect.TypeOf((*PowerSystemInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerUpHostFromStandByRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		TimeoutSec int32                  `xml:"timeoutSec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerUpHostFromStandByRequestType"] = reflect.TypeOf((*PowerUpHostFromStandByRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerUpHostFromStandBy_Task PowerUpHostFromStandByRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PowerUpHostFromStandBy_Task"] = reflect.TypeOf((*PowerUpHostFromStandBy_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PowerUpHostFromStandBy_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrepareCrypto PrepareCryptoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PrepareCrypto"] = reflect.TypeOf((*PrepareCrypto)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrepareCryptoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PrepareCryptoRequestType"] = reflect.TypeOf((*PrepareCryptoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrepareCryptoResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivilegeAvailability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivId    string `xml:"privId"`
0000000000000000000000000000000000000000;;		IsGranted bool   `xml:"isGranted"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PrivilegeAvailability"] = reflect.TypeOf((*PrivilegeAvailability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivilegePolicyDef struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CreatePrivilege string `xml:"createPrivilege"`
0000000000000000000000000000000000000000;;		ReadPrivilege   string `xml:"readPrivilege"`
0000000000000000000000000000000000000000;;		UpdatePrivilege string `xml:"updatePrivilege"`
0000000000000000000000000000000000000000;;		DeletePrivilege string `xml:"deletePrivilege"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PrivilegePolicyDef"] = reflect.TypeOf((*PrivilegePolicyDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProductComponentInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id      string `xml:"id"`
0000000000000000000000000000000000000000;;		Name    string `xml:"name"`
0000000000000000000000000000000000000000;;		Version string `xml:"version"`
0000000000000000000000000000000000000000;;		Release int32  `xml:"release"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProductComponentInfo"] = reflect.TypeOf((*ProductComponentInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileApplyProfileElement struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileApplyProfileElement"] = reflect.TypeOf((*ProfileApplyProfileElement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileApplyProfileProperty struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PropertyName string             `xml:"propertyName"`
0000000000000000000000000000000000000000;;		Array        bool               `xml:"array"`
0000000000000000000000000000000000000000;;		Profile      []BaseApplyProfile `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileApplyProfileProperty"] = reflect.TypeOf((*ProfileApplyProfileProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileAssociatedEvent struct {
0000000000000000000000000000000000000000;;		ProfileEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileAssociatedEvent"] = reflect.TypeOf((*ProfileAssociatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileChangedEvent struct {
0000000000000000000000000000000000000000;;		ProfileEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileChangedEvent"] = reflect.TypeOf((*ProfileChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileCompositeExpression struct {
0000000000000000000000000000000000000000;;		ProfileExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operator       string   `xml:"operator"`
0000000000000000000000000000000000000000;;		ExpressionName []string `xml:"expressionName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileCompositeExpression"] = reflect.TypeOf((*ProfileCompositeExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileCompositePolicyOptionMetadata struct {
0000000000000000000000000000000000000000;;		ProfilePolicyOptionMetadata
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Option []string `xml:"option"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileCompositePolicyOptionMetadata"] = reflect.TypeOf((*ProfileCompositePolicyOptionMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name       string `xml:"name"`
0000000000000000000000000000000000000000;;		Annotation string `xml:"annotation,omitempty"`
0000000000000000000000000000000000000000;;		Enabled    bool   `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileConfigInfo"] = reflect.TypeOf((*ProfileConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileCreateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name       string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Annotation string `xml:"annotation,omitempty"`
0000000000000000000000000000000000000000;;		Enabled    *bool  `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileCreateSpec"] = reflect.TypeOf((*ProfileCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileCreatedEvent struct {
0000000000000000000000000000000000000000;;		ProfileEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileCreatedEvent"] = reflect.TypeOf((*ProfileCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileDeferredPolicyOptionParameter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InputPath ProfilePropertyPath `xml:"inputPath"`
0000000000000000000000000000000000000000;;		Parameter []KeyAnyValue       `xml:"parameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileDeferredPolicyOptionParameter"] = reflect.TypeOf((*ProfileDeferredPolicyOptionParameter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Section []ProfileDescriptionSection `xml:"section"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileDescription"] = reflect.TypeOf((*ProfileDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileDescriptionSection struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description ExtendedElementDescription `xml:"description"`
0000000000000000000000000000000000000000;;		Message     []LocalizableMessage       `xml:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileDescriptionSection"] = reflect.TypeOf((*ProfileDescriptionSection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileDissociatedEvent struct {
0000000000000000000000000000000000000000;;		ProfileEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileDissociatedEvent"] = reflect.TypeOf((*ProfileDissociatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile ProfileEventArgument `xml:"profile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileEvent"] = reflect.TypeOf((*ProfileEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileEventArgument struct {
0000000000000000000000000000000000000000;;		EventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile ManagedObjectReference `xml:"profile"`
0000000000000000000000000000000000000000;;		Name    string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileEventArgument"] = reflect.TypeOf((*ProfileEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileExecuteError struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Path    *ProfilePropertyPath `xml:"path,omitempty"`
0000000000000000000000000000000000000000;;		Message LocalizableMessage   `xml:"message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileExecuteError"] = reflect.TypeOf((*ProfileExecuteError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileExecuteResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Status           string                                 `xml:"status"`
0000000000000000000000000000000000000000;;		ConfigSpec       *HostConfigSpec                        `xml:"configSpec,omitempty"`
0000000000000000000000000000000000000000;;		InapplicablePath []string                               `xml:"inapplicablePath,omitempty"`
0000000000000000000000000000000000000000;;		RequireInput     []ProfileDeferredPolicyOptionParameter `xml:"requireInput,omitempty"`
0000000000000000000000000000000000000000;;		Error            []ProfileExecuteError                  `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileExecuteResult"] = reflect.TypeOf((*ProfileExecuteResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileExpression struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id          string `xml:"id"`
0000000000000000000000000000000000000000;;		DisplayName string `xml:"displayName"`
0000000000000000000000000000000000000000;;		Negated     bool   `xml:"negated"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileExpression"] = reflect.TypeOf((*ProfileExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileExpressionMetadata struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExpressionId ExtendedElementDescription `xml:"expressionId"`
0000000000000000000000000000000000000000;;		Parameter    []ProfileParameterMetadata `xml:"parameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileExpressionMetadata"] = reflect.TypeOf((*ProfileExpressionMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileMetadata struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              string                           `xml:"key"`
0000000000000000000000000000000000000000;;		ProfileTypeName  string                           `xml:"profileTypeName,omitempty"`
0000000000000000000000000000000000000000;;		Description      *ExtendedDescription             `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		SortSpec         []ProfileMetadataProfileSortSpec `xml:"sortSpec,omitempty"`
0000000000000000000000000000000000000000;;		ProfileCategory  string                           `xml:"profileCategory,omitempty"`
0000000000000000000000000000000000000000;;		ProfileComponent string                           `xml:"profileComponent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileMetadata"] = reflect.TypeOf((*ProfileMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileMetadataProfileSortSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PolicyId  string `xml:"policyId"`
0000000000000000000000000000000000000000;;		Parameter string `xml:"parameter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileMetadataProfileSortSpec"] = reflect.TypeOf((*ProfileMetadataProfileSortSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileParameterMetadata struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id                ExtendedElementDescription `xml:"id"`
0000000000000000000000000000000000000000;;		Type              string                     `xml:"type"`
0000000000000000000000000000000000000000;;		Optional          bool                       `xml:"optional"`
0000000000000000000000000000000000000000;;		DefaultValue      AnyType                    `xml:"defaultValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Hidden            *bool                      `xml:"hidden"`
0000000000000000000000000000000000000000;;		SecuritySensitive *bool                      `xml:"securitySensitive"`
0000000000000000000000000000000000000000;;		ReadOnly          *bool                      `xml:"readOnly"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileParameterMetadata"] = reflect.TypeOf((*ProfileParameterMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfilePolicy struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id           string           `xml:"id"`
0000000000000000000000000000000000000000;;		PolicyOption BasePolicyOption `xml:"policyOption,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfilePolicy"] = reflect.TypeOf((*ProfilePolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfilePolicyMetadata struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id             ExtendedElementDescription        `xml:"id"`
0000000000000000000000000000000000000000;;		PossibleOption []BaseProfilePolicyOptionMetadata `xml:"possibleOption,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfilePolicyMetadata"] = reflect.TypeOf((*ProfilePolicyMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfilePolicyOptionMetadata struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id        ExtendedElementDescription `xml:"id"`
0000000000000000000000000000000000000000;;		Parameter []ProfileParameterMetadata `xml:"parameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfilePolicyOptionMetadata"] = reflect.TypeOf((*ProfilePolicyOptionMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileProfileStructure struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfileTypeName string                            `xml:"profileTypeName"`
0000000000000000000000000000000000000000;;		Child           []ProfileProfileStructureProperty `xml:"child,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileProfileStructure"] = reflect.TypeOf((*ProfileProfileStructure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileProfileStructureProperty struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PropertyName string                  `xml:"propertyName"`
0000000000000000000000000000000000000000;;		Array        bool                    `xml:"array"`
0000000000000000000000000000000000000000;;		Element      ProfileProfileStructure `xml:"element"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileProfileStructureProperty"] = reflect.TypeOf((*ProfileProfileStructureProperty)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfilePropertyPath struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfilePath string `xml:"profilePath"`
0000000000000000000000000000000000000000;;		PolicyId    string `xml:"policyId,omitempty"`
0000000000000000000000000000000000000000;;		ParameterId string `xml:"parameterId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfilePropertyPath"] = reflect.TypeOf((*ProfilePropertyPath)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileReferenceHostChangedEvent struct {
0000000000000000000000000000000000000000;;		ProfileEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReferenceHost         *ManagedObjectReference `xml:"referenceHost,omitempty"`
0000000000000000000000000000000000000000;;		ReferenceHostName     string                  `xml:"referenceHostName,omitempty"`
0000000000000000000000000000000000000000;;		PrevReferenceHostName string                  `xml:"prevReferenceHostName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileReferenceHostChangedEvent"] = reflect.TypeOf((*ProfileReferenceHostChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileRemovedEvent struct {
0000000000000000000000000000000000000000;;		ProfileEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileRemovedEvent"] = reflect.TypeOf((*ProfileRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileSerializedCreateSpec struct {
0000000000000000000000000000000000000000;;		ProfileCreateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfileConfigString string `xml:"profileConfigString"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileSerializedCreateSpec"] = reflect.TypeOf((*ProfileSerializedCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileSimpleExpression struct {
0000000000000000000000000000000000000000;;		ProfileExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExpressionType string        `xml:"expressionType"`
0000000000000000000000000000000000000000;;		Parameter      []KeyAnyValue `xml:"parameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileSimpleExpression"] = reflect.TypeOf((*ProfileSimpleExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileUpdateFailed struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Failure []ProfileUpdateFailedUpdateFailure `xml:"failure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileUpdateFailed"] = reflect.TypeOf((*ProfileUpdateFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileUpdateFailedFault ProfileUpdateFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileUpdateFailedFault"] = reflect.TypeOf((*ProfileUpdateFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileUpdateFailedUpdateFailure struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfilePath ProfilePropertyPath `xml:"profilePath"`
0000000000000000000000000000000000000000;;		ErrMsg      LocalizableMessage  `xml:"errMsg"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileUpdateFailedUpdateFailure"] = reflect.TypeOf((*ProfileUpdateFailedUpdateFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PromoteDisksRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Unlink bool                   `xml:"unlink"`
0000000000000000000000000000000000000000;;		Disks  []VirtualDisk          `xml:"disks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PromoteDisksRequestType"] = reflect.TypeOf((*PromoteDisksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PromoteDisks_Task PromoteDisksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PromoteDisks_Task"] = reflect.TypeOf((*PromoteDisks_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PromoteDisks_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertyChange struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string           `xml:"name"`
0000000000000000000000000000000000000000;;		Op   PropertyChangeOp `xml:"op"`
0000000000000000000000000000000000000000;;		Val  AnyType          `xml:"val,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PropertyChange"] = reflect.TypeOf((*PropertyChange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertyFilterSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PropSet                       []PropertySpec `xml:"propSet"`
0000000000000000000000000000000000000000;;		ObjectSet                     []ObjectSpec   `xml:"objectSet"`
0000000000000000000000000000000000000000;;		ReportMissingObjectsInResults *bool          `xml:"reportMissingObjectsInResults"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PropertyFilterSpec"] = reflect.TypeOf((*PropertyFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertyFilterUpdate struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filter     ManagedObjectReference `xml:"filter"`
0000000000000000000000000000000000000000;;		ObjectSet  []ObjectUpdate         `xml:"objectSet,omitempty"`
0000000000000000000000000000000000000000;;		MissingSet []MissingObject        `xml:"missingSet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PropertyFilterUpdate"] = reflect.TypeOf((*PropertyFilterUpdate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertySpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type    string   `xml:"type"`
0000000000000000000000000000000000000000;;		All     *bool    `xml:"all"`
0000000000000000000000000000000000000000;;		PathSet []string `xml:"pathSet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PropertySpec"] = reflect.TypeOf((*PropertySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PutUsbScanCodes PutUsbScanCodesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PutUsbScanCodes"] = reflect.TypeOf((*PutUsbScanCodes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PutUsbScanCodesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec UsbScanCodeSpec        `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PutUsbScanCodesRequestType"] = reflect.TypeOf((*PutUsbScanCodesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PutUsbScanCodesResponse struct {
0000000000000000000000000000000000000000;;		Returnval int32 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuarantineModeFault struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName    string `xml:"vmName"`
0000000000000000000000000000000000000000;;		FaultType string `xml:"faultType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuarantineModeFault"] = reflect.TypeOf((*QuarantineModeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuarantineModeFaultFault QuarantineModeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuarantineModeFaultFault"] = reflect.TypeOf((*QuarantineModeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAnswerFileStatus QueryAnswerFileStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAnswerFileStatus"] = reflect.TypeOf((*QueryAnswerFileStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAnswerFileStatusRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAnswerFileStatusRequestType"] = reflect.TypeOf((*QueryAnswerFileStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAnswerFileStatusResponse struct {
0000000000000000000000000000000000000000;;		Returnval []AnswerFileStatusResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAssignedLicenses QueryAssignedLicensesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAssignedLicenses"] = reflect.TypeOf((*QueryAssignedLicenses)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAssignedLicensesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EntityId string                 `xml:"entityId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAssignedLicensesRequestType"] = reflect.TypeOf((*QueryAssignedLicensesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAssignedLicensesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []LicenseAssignmentManagerLicenseAssignment `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableDisksForVmfs QueryAvailableDisksForVmfsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableDisksForVmfs"] = reflect.TypeOf((*QueryAvailableDisksForVmfs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableDisksForVmfsRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableDisksForVmfsRequestType"] = reflect.TypeOf((*QueryAvailableDisksForVmfsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableDisksForVmfsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostScsiDisk `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableDvsSpec QueryAvailableDvsSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableDvsSpec"] = reflect.TypeOf((*QueryAvailableDvsSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableDvsSpecRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Recommended *bool                  `xml:"recommended"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableDvsSpecRequestType"] = reflect.TypeOf((*QueryAvailableDvsSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableDvsSpecResponse struct {
0000000000000000000000000000000000000000;;		Returnval []DistributedVirtualSwitchProductSpec `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailablePartition QueryAvailablePartitionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailablePartition"] = reflect.TypeOf((*QueryAvailablePartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailablePartitionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailablePartitionRequestType"] = reflect.TypeOf((*QueryAvailablePartitionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailablePartitionResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostDiagnosticPartition `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailablePerfMetric QueryAvailablePerfMetricRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailablePerfMetric"] = reflect.TypeOf((*QueryAvailablePerfMetric)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailablePerfMetricRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		BeginTime  *time.Time             `xml:"beginTime"`
0000000000000000000000000000000000000000;;		EndTime    *time.Time             `xml:"endTime"`
0000000000000000000000000000000000000000;;		IntervalId int32                  `xml:"intervalId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailablePerfMetricRequestType"] = reflect.TypeOf((*QueryAvailablePerfMetricRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailablePerfMetricResponse struct {
0000000000000000000000000000000000000000;;		Returnval []PerfMetricId `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableSsds QueryAvailableSsdsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableSsds"] = reflect.TypeOf((*QueryAvailableSsds)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableSsdsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VffsPath string                 `xml:"vffsPath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableSsdsRequestType"] = reflect.TypeOf((*QueryAvailableSsdsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableSsdsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostScsiDisk `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableTimeZones QueryAvailableTimeZonesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableTimeZones"] = reflect.TypeOf((*QueryAvailableTimeZones)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableTimeZonesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryAvailableTimeZonesRequestType"] = reflect.TypeOf((*QueryAvailableTimeZonesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryAvailableTimeZonesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostDateTimeSystemTimeZone `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryBootDevices QueryBootDevicesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryBootDevices"] = reflect.TypeOf((*QueryBootDevices)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryBootDevicesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryBootDevicesRequestType"] = reflect.TypeOf((*QueryBootDevicesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryBootDevicesResponse struct {
0000000000000000000000000000000000000000;;		Returnval *HostBootDeviceInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryBoundVnics QueryBoundVnicsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryBoundVnics"] = reflect.TypeOf((*QueryBoundVnics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryBoundVnicsRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaName string                 `xml:"iScsiHbaName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryBoundVnicsRequestType"] = reflect.TypeOf((*QueryBoundVnicsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryBoundVnicsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []IscsiPortInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCandidateNics QueryCandidateNicsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCandidateNics"] = reflect.TypeOf((*QueryCandidateNics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCandidateNicsRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaName string                 `xml:"iScsiHbaName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCandidateNicsRequestType"] = reflect.TypeOf((*QueryCandidateNicsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCandidateNicsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []IscsiPortInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryChangedDiskAreas QueryChangedDiskAreasRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryChangedDiskAreas"] = reflect.TypeOf((*QueryChangedDiskAreas)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryChangedDiskAreasRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Snapshot    *ManagedObjectReference `xml:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;		DeviceKey   int32                   `xml:"deviceKey"`
0000000000000000000000000000000000000000;;		StartOffset int64                   `xml:"startOffset"`
0000000000000000000000000000000000000000;;		ChangeId    string                  `xml:"changeId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryChangedDiskAreasRequestType"] = reflect.TypeOf((*QueryChangedDiskAreasRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryChangedDiskAreasResponse struct {
0000000000000000000000000000000000000000;;		Returnval DiskChangeInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCmmds QueryCmmdsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCmmds"] = reflect.TypeOf((*QueryCmmds)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCmmdsRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference             `xml:"_this"`
0000000000000000000000000000000000000000;;		Queries []HostVsanInternalSystemCmmdsQuery `xml:"queries"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCmmdsRequestType"] = reflect.TypeOf((*QueryCmmdsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCmmdsResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCompatibleHostForExistingDvs QueryCompatibleHostForExistingDvsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCompatibleHostForExistingDvs"] = reflect.TypeOf((*QueryCompatibleHostForExistingDvs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCompatibleHostForExistingDvsRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Container ManagedObjectReference `xml:"container"`
0000000000000000000000000000000000000000;;		Recursive bool                   `xml:"recursive"`
0000000000000000000000000000000000000000;;		Dvs       ManagedObjectReference `xml:"dvs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCompatibleHostForExistingDvsRequestType"] = reflect.TypeOf((*QueryCompatibleHostForExistingDvsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCompatibleHostForExistingDvsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCompatibleHostForNewDvs QueryCompatibleHostForNewDvsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCompatibleHostForNewDvs"] = reflect.TypeOf((*QueryCompatibleHostForNewDvs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCompatibleHostForNewDvsRequestType struct {
0000000000000000000000000000000000000000;;		This              ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		Container         ManagedObjectReference               `xml:"container"`
0000000000000000000000000000000000000000;;		Recursive         bool                                 `xml:"recursive"`
0000000000000000000000000000000000000000;;		SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryCompatibleHostForNewDvsRequestType"] = reflect.TypeOf((*QueryCompatibleHostForNewDvsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryCompatibleHostForNewDvsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryComplianceStatus QueryComplianceStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryComplianceStatus"] = reflect.TypeOf((*QueryComplianceStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryComplianceStatusRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Profile []ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;		Entity  []ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryComplianceStatusRequestType"] = reflect.TypeOf((*QueryComplianceStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryComplianceStatusResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ComplianceResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOption QueryConfigOptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigOption"] = reflect.TypeOf((*QueryConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionDescriptor QueryConfigOptionDescriptorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigOptionDescriptor"] = reflect.TypeOf((*QueryConfigOptionDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionDescriptorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigOptionDescriptorRequestType"] = reflect.TypeOf((*QueryConfigOptionDescriptorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionDescriptorResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VirtualMachineConfigOptionDescriptor `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionEx QueryConfigOptionExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigOptionEx"] = reflect.TypeOf((*QueryConfigOptionEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionExRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference                   `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec *EnvironmentBrowserConfigOptionQuerySpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigOptionExRequestType"] = reflect.TypeOf((*QueryConfigOptionExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionExResponse struct {
0000000000000000000000000000000000000000;;		Returnval *VirtualMachineConfigOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  string                  `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigOptionRequestType"] = reflect.TypeOf((*QueryConfigOptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigOptionResponse struct {
0000000000000000000000000000000000000000;;		Returnval *VirtualMachineConfigOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigTarget QueryConfigTargetRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigTarget"] = reflect.TypeOf((*QueryConfigTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigTargetRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfigTargetRequestType"] = reflect.TypeOf((*QueryConfigTargetRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfigTargetResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ConfigTarget `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfiguredModuleOptionString QueryConfiguredModuleOptionStringRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfiguredModuleOptionString"] = reflect.TypeOf((*QueryConfiguredModuleOptionString)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfiguredModuleOptionStringRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConfiguredModuleOptionStringRequestType"] = reflect.TypeOf((*QueryConfiguredModuleOptionStringRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConfiguredModuleOptionStringResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConnectionInfo QueryConnectionInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConnectionInfo"] = reflect.TypeOf((*QueryConnectionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConnectionInfoRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Hostname      string                 `xml:"hostname"`
0000000000000000000000000000000000000000;;		Port          int32                  `xml:"port"`
0000000000000000000000000000000000000000;;		Username      string                 `xml:"username"`
0000000000000000000000000000000000000000;;		Password      string                 `xml:"password"`
0000000000000000000000000000000000000000;;		SslThumbprint string                 `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConnectionInfoRequestType"] = reflect.TypeOf((*QueryConnectionInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConnectionInfoResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostConnectInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConnectionInfoViaSpec QueryConnectionInfoViaSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConnectionInfoViaSpec"] = reflect.TypeOf((*QueryConnectionInfoViaSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConnectionInfoViaSpecRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostConnectSpec        `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryConnectionInfoViaSpecRequestType"] = reflect.TypeOf((*QueryConnectionInfoViaSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryConnectionInfoViaSpecResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostConnectInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDatastorePerformanceSummary QueryDatastorePerformanceSummaryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDatastorePerformanceSummary"] = reflect.TypeOf((*QueryDatastorePerformanceSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDatastorePerformanceSummaryRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDatastorePerformanceSummaryRequestType"] = reflect.TypeOf((*QueryDatastorePerformanceSummaryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDatastorePerformanceSummaryResponse struct {
0000000000000000000000000000000000000000;;		Returnval []StoragePerformanceSummary `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDateTime QueryDateTimeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDateTime"] = reflect.TypeOf((*QueryDateTime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDateTimeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDateTimeRequestType"] = reflect.TypeOf((*QueryDateTimeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDateTimeResponse struct {
0000000000000000000000000000000000000000;;		Returnval time.Time `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDescriptions QueryDescriptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDescriptions"] = reflect.TypeOf((*QueryDescriptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDescriptionsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDescriptionsRequestType"] = reflect.TypeOf((*QueryDescriptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDescriptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []DiagnosticManagerLogDescriptor `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDisksForVsan QueryDisksForVsanRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDisksForVsan"] = reflect.TypeOf((*QueryDisksForVsan)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDisksForVsanRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CanonicalName []string               `xml:"canonicalName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDisksForVsanRequestType"] = reflect.TypeOf((*QueryDisksForVsanRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDisksForVsanResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VsanHostDiskResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDisksUsingFilter QueryDisksUsingFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDisksUsingFilter"] = reflect.TypeOf((*QueryDisksUsingFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDisksUsingFilterRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;		CompRes  ManagedObjectReference `xml:"compRes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDisksUsingFilterRequestType"] = reflect.TypeOf((*QueryDisksUsingFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDisksUsingFilterResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VirtualDiskId `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsByUuid QueryDvsByUuidRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsByUuid"] = reflect.TypeOf((*QueryDvsByUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsByUuidRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuid string                 `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsByUuidRequestType"] = reflect.TypeOf((*QueryDvsByUuidRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsByUuidResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsCheckCompatibility QueryDvsCheckCompatibilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsCheckCompatibility"] = reflect.TypeOf((*QueryDvsCheckCompatibility)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsCheckCompatibilityRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference                                 `xml:"_this"`
0000000000000000000000000000000000000000;;		HostContainer  DistributedVirtualSwitchManagerHostContainer           `xml:"hostContainer"`
0000000000000000000000000000000000000000;;		DvsProductSpec *DistributedVirtualSwitchManagerDvsProductSpec         `xml:"dvsProductSpec,omitempty"`
0000000000000000000000000000000000000000;;		HostFilterSpec []BaseDistributedVirtualSwitchManagerHostDvsFilterSpec `xml:"hostFilterSpec,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsCheckCompatibilityRequestType"] = reflect.TypeOf((*QueryDvsCheckCompatibilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsCheckCompatibilityResponse struct {
0000000000000000000000000000000000000000;;		Returnval []DistributedVirtualSwitchManagerCompatibilityResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsCompatibleHostSpec QueryDvsCompatibleHostSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsCompatibleHostSpec"] = reflect.TypeOf((*QueryDvsCompatibleHostSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsCompatibleHostSpecRequestType struct {
0000000000000000000000000000000000000000;;		This              ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsCompatibleHostSpecRequestType"] = reflect.TypeOf((*QueryDvsCompatibleHostSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsCompatibleHostSpecResponse struct {
0000000000000000000000000000000000000000;;		Returnval []DistributedVirtualSwitchHostProductSpec `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsConfigTarget QueryDvsConfigTargetRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsConfigTarget"] = reflect.TypeOf((*QueryDvsConfigTarget)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsConfigTargetRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Dvs  *ManagedObjectReference `xml:"dvs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsConfigTargetRequestType"] = reflect.TypeOf((*QueryDvsConfigTargetRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsConfigTargetResponse struct {
0000000000000000000000000000000000000000;;		Returnval DVSManagerDvsConfigTarget `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsFeatureCapability QueryDvsFeatureCapabilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsFeatureCapability"] = reflect.TypeOf((*QueryDvsFeatureCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsFeatureCapabilityRequestType struct {
0000000000000000000000000000000000000000;;		This              ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryDvsFeatureCapabilityRequestType"] = reflect.TypeOf((*QueryDvsFeatureCapabilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryDvsFeatureCapabilityResponse struct {
0000000000000000000000000000000000000000;;		Returnval BaseDVSFeatureCapability `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryEvents QueryEventsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryEvents"] = reflect.TypeOf((*QueryEvents)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryEventsRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Filter EventFilterSpec        `xml:"filter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryEventsRequestType"] = reflect.TypeOf((*QueryEventsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryEventsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseEvent `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryExpressionMetadata QueryExpressionMetadataRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryExpressionMetadata"] = reflect.TypeOf((*QueryExpressionMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryExpressionMetadataRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		ExpressionName []string                `xml:"expressionName,omitempty"`
0000000000000000000000000000000000000000;;		Profile        *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryExpressionMetadataRequestType"] = reflect.TypeOf((*QueryExpressionMetadataRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryExpressionMetadataResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ProfileExpressionMetadata `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryExtensionIpAllocationUsage QueryExtensionIpAllocationUsageRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryExtensionIpAllocationUsage"] = reflect.TypeOf((*QueryExtensionIpAllocationUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryExtensionIpAllocationUsageRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKeys []string               `xml:"extensionKeys,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryExtensionIpAllocationUsageRequestType"] = reflect.TypeOf((*QueryExtensionIpAllocationUsageRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryExtensionIpAllocationUsageResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ExtensionManagerIpAllocationUsage `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFaultToleranceCompatibility QueryFaultToleranceCompatibilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFaultToleranceCompatibility"] = reflect.TypeOf((*QueryFaultToleranceCompatibility)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFaultToleranceCompatibilityEx QueryFaultToleranceCompatibilityExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFaultToleranceCompatibilityEx"] = reflect.TypeOf((*QueryFaultToleranceCompatibilityEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFaultToleranceCompatibilityExRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ForLegacyFt *bool                  `xml:"forLegacyFt"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFaultToleranceCompatibilityExRequestType"] = reflect.TypeOf((*QueryFaultToleranceCompatibilityExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFaultToleranceCompatibilityExResponse struct {
0000000000000000000000000000000000000000;;		Returnval []LocalizedMethodFault `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFaultToleranceCompatibilityRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFaultToleranceCompatibilityRequestType"] = reflect.TypeOf((*QueryFaultToleranceCompatibilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFaultToleranceCompatibilityResponse struct {
0000000000000000000000000000000000000000;;		Returnval []LocalizedMethodFault `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterEntities QueryFilterEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterEntities"] = reflect.TypeOf((*QueryFilterEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterEntitiesRequestType"] = reflect.TypeOf((*QueryFilterEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterEntitiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterInfoIds QueryFilterInfoIdsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterInfoIds"] = reflect.TypeOf((*QueryFilterInfoIds)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterInfoIdsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterInfoIdsRequestType"] = reflect.TypeOf((*QueryFilterInfoIdsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterInfoIdsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterList QueryFilterListRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterList"] = reflect.TypeOf((*QueryFilterList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterListRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterListRequestType"] = reflect.TypeOf((*QueryFilterListRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterListResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterName QueryFilterNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterName"] = reflect.TypeOf((*QueryFilterName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterNameRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFilterNameRequestType"] = reflect.TypeOf((*QueryFilterNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFilterNameResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFirmwareConfigUploadURL QueryFirmwareConfigUploadURLRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFirmwareConfigUploadURL"] = reflect.TypeOf((*QueryFirmwareConfigUploadURL)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFirmwareConfigUploadURLRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryFirmwareConfigUploadURLRequestType"] = reflect.TypeOf((*QueryFirmwareConfigUploadURLRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryFirmwareConfigUploadURLResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHealthUpdateInfos QueryHealthUpdateInfosRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHealthUpdateInfos"] = reflect.TypeOf((*QueryHealthUpdateInfos)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHealthUpdateInfosRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHealthUpdateInfosRequestType"] = reflect.TypeOf((*QueryHealthUpdateInfosRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHealthUpdateInfosResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HealthUpdateInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHealthUpdates QueryHealthUpdatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHealthUpdates"] = reflect.TypeOf((*QueryHealthUpdates)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHealthUpdatesRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHealthUpdatesRequestType"] = reflect.TypeOf((*QueryHealthUpdatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHealthUpdatesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HealthUpdate `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostConnectionInfo QueryHostConnectionInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostConnectionInfo"] = reflect.TypeOf((*QueryHostConnectionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostConnectionInfoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostConnectionInfoRequestType"] = reflect.TypeOf((*QueryHostConnectionInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostConnectionInfoResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostConnectInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostPatchRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference                     `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostPatchRequestType"] = reflect.TypeOf((*QueryHostPatchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostPatch_Task QueryHostPatchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostPatch_Task"] = reflect.TypeOf((*QueryHostPatch_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostPatch_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostProfileMetadata QueryHostProfileMetadataRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostProfileMetadata"] = reflect.TypeOf((*QueryHostProfileMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostProfileMetadataRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		ProfileName []string                `xml:"profileName,omitempty"`
0000000000000000000000000000000000000000;;		Profile     *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostProfileMetadataRequestType"] = reflect.TypeOf((*QueryHostProfileMetadataRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostProfileMetadataResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ProfileMetadata `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostStatus QueryHostStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostStatus"] = reflect.TypeOf((*QueryHostStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostStatusRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryHostStatusRequestType"] = reflect.TypeOf((*QueryHostStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryHostStatusResponse struct {
0000000000000000000000000000000000000000;;		Returnval VsanHostClusterStatus `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIORMConfigOption QueryIORMConfigOptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIORMConfigOption"] = reflect.TypeOf((*QueryIORMConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIORMConfigOptionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIORMConfigOptionRequestType"] = reflect.TypeOf((*QueryIORMConfigOptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIORMConfigOptionResponse struct {
0000000000000000000000000000000000000000;;		Returnval StorageIORMConfigOption `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIPAllocations QueryIPAllocationsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIPAllocations"] = reflect.TypeOf((*QueryIPAllocations)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIPAllocationsRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc           ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		PoolId       int32                  `xml:"poolId"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIPAllocationsRequestType"] = reflect.TypeOf((*QueryIPAllocationsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIPAllocationsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []IpPoolManagerIpAllocation `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIoFilterInfo QueryIoFilterInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIoFilterInfo"] = reflect.TypeOf((*QueryIoFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIoFilterInfoRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CompRes ManagedObjectReference `xml:"compRes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIoFilterInfoRequestType"] = reflect.TypeOf((*QueryIoFilterInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIoFilterInfoResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ClusterIoFilterInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIoFilterIssues QueryIoFilterIssuesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIoFilterIssues"] = reflect.TypeOf((*QueryIoFilterIssues)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIoFilterIssuesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;		CompRes  ManagedObjectReference `xml:"compRes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIoFilterIssuesRequestType"] = reflect.TypeOf((*QueryIoFilterIssuesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIoFilterIssuesResponse struct {
0000000000000000000000000000000000000000;;		Returnval IoFilterQueryIssueResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIpPools QueryIpPoolsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIpPools"] = reflect.TypeOf((*QueryIpPools)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIpPoolsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc   ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryIpPoolsRequestType"] = reflect.TypeOf((*QueryIpPoolsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryIpPoolsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []IpPool `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLicenseSourceAvailability QueryLicenseSourceAvailabilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryLicenseSourceAvailability"] = reflect.TypeOf((*QueryLicenseSourceAvailability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLicenseSourceAvailabilityRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryLicenseSourceAvailabilityRequestType"] = reflect.TypeOf((*QueryLicenseSourceAvailabilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLicenseSourceAvailabilityResponse struct {
0000000000000000000000000000000000000000;;		Returnval []LicenseAvailabilityInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLicenseUsage QueryLicenseUsageRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryLicenseUsage"] = reflect.TypeOf((*QueryLicenseUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLicenseUsageRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryLicenseUsageRequestType"] = reflect.TypeOf((*QueryLicenseUsageRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLicenseUsageResponse struct {
0000000000000000000000000000000000000000;;		Returnval LicenseUsageInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLockdownExceptions QueryLockdownExceptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryLockdownExceptions"] = reflect.TypeOf((*QueryLockdownExceptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLockdownExceptionsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryLockdownExceptionsRequestType"] = reflect.TypeOf((*QueryLockdownExceptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryLockdownExceptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryManagedBy QueryManagedByRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryManagedBy"] = reflect.TypeOf((*QueryManagedBy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryManagedByRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryManagedByRequestType"] = reflect.TypeOf((*QueryManagedByRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryManagedByResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMemoryOverhead QueryMemoryOverheadRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMemoryOverhead"] = reflect.TypeOf((*QueryMemoryOverhead)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMemoryOverheadEx QueryMemoryOverheadExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMemoryOverheadEx"] = reflect.TypeOf((*QueryMemoryOverheadEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMemoryOverheadExRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		VmConfigInfo VirtualMachineConfigInfo `xml:"vmConfigInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMemoryOverheadExRequestType"] = reflect.TypeOf((*QueryMemoryOverheadExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMemoryOverheadExResponse struct {
0000000000000000000000000000000000000000;;		Returnval int64 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMemoryOverheadRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MemorySize   int64                  `xml:"memorySize"`
0000000000000000000000000000000000000000;;		VideoRamSize int32                  `xml:"videoRamSize,omitempty"`
0000000000000000000000000000000000000000;;		NumVcpus     int32                  `xml:"numVcpus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMemoryOverheadRequestType"] = reflect.TypeOf((*QueryMemoryOverheadRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMemoryOverheadResponse struct {
0000000000000000000000000000000000000000;;		Returnval int64 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMigrationDependencies QueryMigrationDependenciesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMigrationDependencies"] = reflect.TypeOf((*QueryMigrationDependencies)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMigrationDependenciesRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PnicDevice []string               `xml:"pnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMigrationDependenciesRequestType"] = reflect.TypeOf((*QueryMigrationDependenciesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMigrationDependenciesResponse struct {
0000000000000000000000000000000000000000;;		Returnval IscsiMigrationDependency `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryModules QueryModulesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryModules"] = reflect.TypeOf((*QueryModules)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryModulesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryModulesRequestType"] = reflect.TypeOf((*QueryModulesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryModulesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []KernelModuleInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMonitoredEntities QueryMonitoredEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMonitoredEntities"] = reflect.TypeOf((*QueryMonitoredEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMonitoredEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryMonitoredEntitiesRequestType"] = reflect.TypeOf((*QueryMonitoredEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryMonitoredEntitiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNFSUser QueryNFSUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryNFSUser"] = reflect.TypeOf((*QueryNFSUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNFSUserRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryNFSUserRequestType"] = reflect.TypeOf((*QueryNFSUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNFSUserResponse struct {
0000000000000000000000000000000000000000;;		Returnval *HostNasVolumeUserInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNetConfig QueryNetConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryNetConfig"] = reflect.TypeOf((*QueryNetConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNetConfigRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		NicType string                 `xml:"nicType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryNetConfigRequestType"] = reflect.TypeOf((*QueryNetConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNetConfigResponse struct {
0000000000000000000000000000000000000000;;		Returnval *VirtualNicManagerNetConfig `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNetworkHint QueryNetworkHintRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryNetworkHint"] = reflect.TypeOf((*QueryNetworkHint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNetworkHintRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device []string               `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryNetworkHintRequestType"] = reflect.TypeOf((*QueryNetworkHintRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryNetworkHintResponse struct {
0000000000000000000000000000000000000000;;		Returnval []PhysicalNicHintInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryObjectsOnPhysicalVsanDisk QueryObjectsOnPhysicalVsanDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryObjectsOnPhysicalVsanDisk"] = reflect.TypeOf((*QueryObjectsOnPhysicalVsanDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryObjectsOnPhysicalVsanDiskRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Disks []string               `xml:"disks"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryObjectsOnPhysicalVsanDiskRequestType"] = reflect.TypeOf((*QueryObjectsOnPhysicalVsanDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryObjectsOnPhysicalVsanDiskResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryOptions QueryOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryOptions"] = reflect.TypeOf((*QueryOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryOptionsRequestType"] = reflect.TypeOf((*QueryOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseOptionValue `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPartitionCreateDesc QueryPartitionCreateDescRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPartitionCreateDesc"] = reflect.TypeOf((*QueryPartitionCreateDesc)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPartitionCreateDescRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DiskUuid       string                 `xml:"diskUuid"`
0000000000000000000000000000000000000000;;		DiagnosticType string                 `xml:"diagnosticType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPartitionCreateDescRequestType"] = reflect.TypeOf((*QueryPartitionCreateDescRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPartitionCreateDescResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostDiagnosticPartitionCreateDescription `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPartitionCreateOptions QueryPartitionCreateOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPartitionCreateOptions"] = reflect.TypeOf((*QueryPartitionCreateOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPartitionCreateOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		StorageType    string                 `xml:"storageType"`
0000000000000000000000000000000000000000;;		DiagnosticType string                 `xml:"diagnosticType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPartitionCreateOptionsRequestType"] = reflect.TypeOf((*QueryPartitionCreateOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPartitionCreateOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostDiagnosticPartitionCreateOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPathSelectionPolicyOptions QueryPathSelectionPolicyOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPathSelectionPolicyOptions"] = reflect.TypeOf((*QueryPathSelectionPolicyOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPathSelectionPolicyOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPathSelectionPolicyOptionsRequestType"] = reflect.TypeOf((*QueryPathSelectionPolicyOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPathSelectionPolicyOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostPathSelectionPolicyOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerf QueryPerfRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerf"] = reflect.TypeOf((*QueryPerf)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfComposite QueryPerfCompositeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfComposite"] = reflect.TypeOf((*QueryPerfComposite)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCompositeRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		QuerySpec PerfQuerySpec          `xml:"querySpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfCompositeRequestType"] = reflect.TypeOf((*QueryPerfCompositeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCompositeResponse struct {
0000000000000000000000000000000000000000;;		Returnval PerfCompositeMetric `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCounter QueryPerfCounterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfCounter"] = reflect.TypeOf((*QueryPerfCounter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCounterByLevel QueryPerfCounterByLevelRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfCounterByLevel"] = reflect.TypeOf((*QueryPerfCounterByLevel)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCounterByLevelRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Level int32                  `xml:"level"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfCounterByLevelRequestType"] = reflect.TypeOf((*QueryPerfCounterByLevelRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCounterByLevelResponse struct {
0000000000000000000000000000000000000000;;		Returnval []PerfCounterInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCounterRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CounterId []int32                `xml:"counterId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfCounterRequestType"] = reflect.TypeOf((*QueryPerfCounterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfCounterResponse struct {
0000000000000000000000000000000000000000;;		Returnval []PerfCounterInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfProviderSummary QueryPerfProviderSummaryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfProviderSummary"] = reflect.TypeOf((*QueryPerfProviderSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfProviderSummaryRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfProviderSummaryRequestType"] = reflect.TypeOf((*QueryPerfProviderSummaryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfProviderSummaryResponse struct {
0000000000000000000000000000000000000000;;		Returnval PerfProviderSummary `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		QuerySpec []PerfQuerySpec        `xml:"querySpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPerfRequestType"] = reflect.TypeOf((*QueryPerfRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPerfResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BasePerfEntityMetricBase `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPhysicalVsanDisks QueryPhysicalVsanDisksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPhysicalVsanDisks"] = reflect.TypeOf((*QueryPhysicalVsanDisks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPhysicalVsanDisksRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Props []string               `xml:"props,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPhysicalVsanDisksRequestType"] = reflect.TypeOf((*QueryPhysicalVsanDisksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPhysicalVsanDisksResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPnicStatus QueryPnicStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPnicStatus"] = reflect.TypeOf((*QueryPnicStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPnicStatusRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PnicDevice string                 `xml:"pnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPnicStatusRequestType"] = reflect.TypeOf((*QueryPnicStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPnicStatusResponse struct {
0000000000000000000000000000000000000000;;		Returnval IscsiStatus `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPolicyMetadata QueryPolicyMetadataRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPolicyMetadata"] = reflect.TypeOf((*QueryPolicyMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPolicyMetadataRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		PolicyName []string                `xml:"policyName,omitempty"`
0000000000000000000000000000000000000000;;		Profile    *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryPolicyMetadataRequestType"] = reflect.TypeOf((*QueryPolicyMetadataRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryPolicyMetadataResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ProfilePolicyMetadata `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProfileStructure QueryProfileStructureRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryProfileStructure"] = reflect.TypeOf((*QueryProfileStructure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProfileStructureRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Profile *ManagedObjectReference `xml:"profile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryProfileStructureRequestType"] = reflect.TypeOf((*QueryProfileStructureRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProfileStructureResponse struct {
0000000000000000000000000000000000000000;;		Returnval ProfileProfileStructure `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProviderList QueryProviderListRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryProviderList"] = reflect.TypeOf((*QueryProviderList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProviderListRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryProviderListRequestType"] = reflect.TypeOf((*QueryProviderListRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProviderListResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProviderName QueryProviderNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryProviderName"] = reflect.TypeOf((*QueryProviderName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProviderNameRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryProviderNameRequestType"] = reflect.TypeOf((*QueryProviderNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryProviderNameResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryResourceConfigOption QueryResourceConfigOptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryResourceConfigOption"] = reflect.TypeOf((*QueryResourceConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryResourceConfigOptionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryResourceConfigOptionRequestType"] = reflect.TypeOf((*QueryResourceConfigOptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryResourceConfigOptionResponse struct {
0000000000000000000000000000000000000000;;		Returnval ResourceConfigOption `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryServiceList QueryServiceListRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryServiceList"] = reflect.TypeOf((*QueryServiceList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryServiceListRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ServiceName string                 `xml:"serviceName,omitempty"`
0000000000000000000000000000000000000000;;		Location    []string               `xml:"location,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryServiceListRequestType"] = reflect.TypeOf((*QueryServiceListRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryServiceListResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ServiceManagerServiceInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryStorageArrayTypePolicyOptions QueryStorageArrayTypePolicyOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryStorageArrayTypePolicyOptions"] = reflect.TypeOf((*QueryStorageArrayTypePolicyOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryStorageArrayTypePolicyOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryStorageArrayTypePolicyOptionsRequestType"] = reflect.TypeOf((*QueryStorageArrayTypePolicyOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryStorageArrayTypePolicyOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostStorageArrayTypePolicyOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySupportedFeatures QuerySupportedFeaturesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuerySupportedFeatures"] = reflect.TypeOf((*QuerySupportedFeatures)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySupportedFeaturesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuerySupportedFeaturesRequestType"] = reflect.TypeOf((*QuerySupportedFeaturesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySupportedFeaturesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []LicenseFeatureInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySyncingVsanObjects QuerySyncingVsanObjectsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuerySyncingVsanObjects"] = reflect.TypeOf((*QuerySyncingVsanObjects)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySyncingVsanObjectsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids []string               `xml:"uuids,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuerySyncingVsanObjectsRequestType"] = reflect.TypeOf((*QuerySyncingVsanObjectsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySyncingVsanObjectsResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySystemUsers QuerySystemUsersRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuerySystemUsers"] = reflect.TypeOf((*QuerySystemUsers)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySystemUsersRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuerySystemUsersRequestType"] = reflect.TypeOf((*QuerySystemUsersRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuerySystemUsersResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryTargetCapabilities QueryTargetCapabilitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryTargetCapabilities"] = reflect.TypeOf((*QueryTargetCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryTargetCapabilitiesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryTargetCapabilitiesRequestType"] = reflect.TypeOf((*QueryTargetCapabilitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryTargetCapabilitiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval *HostCapability `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryTpmAttestationReport QueryTpmAttestationReportRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryTpmAttestationReport"] = reflect.TypeOf((*QueryTpmAttestationReport)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryTpmAttestationReportRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryTpmAttestationReportRequestType"] = reflect.TypeOf((*QueryTpmAttestationReportRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryTpmAttestationReportResponse struct {
0000000000000000000000000000000000000000;;		Returnval *HostTpmAttestationReport `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnmonitoredHosts QueryUnmonitoredHostsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnmonitoredHosts"] = reflect.TypeOf((*QueryUnmonitoredHosts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnmonitoredHostsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;		Cluster    ManagedObjectReference `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnmonitoredHostsRequestType"] = reflect.TypeOf((*QueryUnmonitoredHostsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnmonitoredHostsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnownedFiles QueryUnownedFilesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnownedFiles"] = reflect.TypeOf((*QueryUnownedFiles)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnownedFilesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnownedFilesRequestType"] = reflect.TypeOf((*QueryUnownedFilesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnownedFilesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnresolvedVmfsVolume QueryUnresolvedVmfsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnresolvedVmfsVolume"] = reflect.TypeOf((*QueryUnresolvedVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnresolvedVmfsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnresolvedVmfsVolumeRequestType"] = reflect.TypeOf((*QueryUnresolvedVmfsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnresolvedVmfsVolumeResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostUnresolvedVmfsVolume `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnresolvedVmfsVolumes QueryUnresolvedVmfsVolumesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnresolvedVmfsVolumes"] = reflect.TypeOf((*QueryUnresolvedVmfsVolumes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnresolvedVmfsVolumesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUnresolvedVmfsVolumesRequestType"] = reflect.TypeOf((*QueryUnresolvedVmfsVolumesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUnresolvedVmfsVolumesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostUnresolvedVmfsVolume `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUsedVlanIdInDvs QueryUsedVlanIdInDvsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUsedVlanIdInDvs"] = reflect.TypeOf((*QueryUsedVlanIdInDvs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUsedVlanIdInDvsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryUsedVlanIdInDvsRequestType"] = reflect.TypeOf((*QueryUsedVlanIdInDvsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryUsedVlanIdInDvsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []int32 `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVMotionCompatibility QueryVMotionCompatibilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVMotionCompatibility"] = reflect.TypeOf((*QueryVMotionCompatibility)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVMotionCompatibilityExRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   []ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		Host []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVMotionCompatibilityExRequestType"] = reflect.TypeOf((*QueryVMotionCompatibilityExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVMotionCompatibilityEx_Task QueryVMotionCompatibilityExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVMotionCompatibilityEx_Task"] = reflect.TypeOf((*QueryVMotionCompatibilityEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVMotionCompatibilityEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVMotionCompatibilityRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm            ManagedObjectReference   `xml:"vm"`
0000000000000000000000000000000000000000;;		Host          []ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Compatibility []string                 `xml:"compatibility,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVMotionCompatibilityRequestType"] = reflect.TypeOf((*QueryVMotionCompatibilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVMotionCompatibilityResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostVMotionCompatibility `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskFragmentation QueryVirtualDiskFragmentationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVirtualDiskFragmentation"] = reflect.TypeOf((*QueryVirtualDiskFragmentation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskFragmentationRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVirtualDiskFragmentationRequestType"] = reflect.TypeOf((*QueryVirtualDiskFragmentationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskFragmentationResponse struct {
0000000000000000000000000000000000000000;;		Returnval int32 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskGeometry QueryVirtualDiskGeometryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVirtualDiskGeometry"] = reflect.TypeOf((*QueryVirtualDiskGeometry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskGeometryRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVirtualDiskGeometryRequestType"] = reflect.TypeOf((*QueryVirtualDiskGeometryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskGeometryResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostDiskDimensionsChs `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskUuid QueryVirtualDiskUuidRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVirtualDiskUuid"] = reflect.TypeOf((*QueryVirtualDiskUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskUuidRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVirtualDiskUuidRequestType"] = reflect.TypeOf((*QueryVirtualDiskUuidRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVirtualDiskUuidResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsConfigOption QueryVmfsConfigOptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsConfigOption"] = reflect.TypeOf((*QueryVmfsConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsConfigOptionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsConfigOptionRequestType"] = reflect.TypeOf((*QueryVmfsConfigOptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsConfigOptionResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VmfsConfigOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreCreateOptions QueryVmfsDatastoreCreateOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsDatastoreCreateOptions"] = reflect.TypeOf((*QueryVmfsDatastoreCreateOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreCreateOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DevicePath       string                 `xml:"devicePath"`
0000000000000000000000000000000000000000;;		VmfsMajorVersion int32                  `xml:"vmfsMajorVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsDatastoreCreateOptionsRequestType"] = reflect.TypeOf((*QueryVmfsDatastoreCreateOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreCreateOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VmfsDatastoreOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreExpandOptions QueryVmfsDatastoreExpandOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsDatastoreExpandOptions"] = reflect.TypeOf((*QueryVmfsDatastoreExpandOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreExpandOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsDatastoreExpandOptionsRequestType"] = reflect.TypeOf((*QueryVmfsDatastoreExpandOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreExpandOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VmfsDatastoreOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreExtendOptions QueryVmfsDatastoreExtendOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsDatastoreExtendOptions"] = reflect.TypeOf((*QueryVmfsDatastoreExtendOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreExtendOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This                     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore                ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		DevicePath               string                 `xml:"devicePath"`
0000000000000000000000000000000000000000;;		SuppressExpandCandidates *bool                  `xml:"suppressExpandCandidates"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVmfsDatastoreExtendOptionsRequestType"] = reflect.TypeOf((*QueryVmfsDatastoreExtendOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVmfsDatastoreExtendOptionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VmfsDatastoreOption `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVnicStatus QueryVnicStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVnicStatus"] = reflect.TypeOf((*QueryVnicStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVnicStatusRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VnicDevice string                 `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVnicStatusRequestType"] = reflect.TypeOf((*QueryVnicStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVnicStatusResponse struct {
0000000000000000000000000000000000000000;;		Returnval IscsiStatus `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanObjectUuidsByFilter QueryVsanObjectUuidsByFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanObjectUuidsByFilter"] = reflect.TypeOf((*QueryVsanObjectUuidsByFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanObjectUuidsByFilterRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids   []string               `xml:"uuids,omitempty"`
0000000000000000000000000000000000000000;;		Limit   int32                  `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Version int32                  `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanObjectUuidsByFilterRequestType"] = reflect.TypeOf((*QueryVsanObjectUuidsByFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanObjectUuidsByFilterResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanObjects QueryVsanObjectsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanObjects"] = reflect.TypeOf((*QueryVsanObjects)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanObjectsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids []string               `xml:"uuids,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanObjectsRequestType"] = reflect.TypeOf((*QueryVsanObjectsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanObjectsResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanStatistics QueryVsanStatisticsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanStatistics"] = reflect.TypeOf((*QueryVsanStatistics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanStatisticsRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Labels []string               `xml:"labels"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanStatisticsRequestType"] = reflect.TypeOf((*QueryVsanStatisticsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanStatisticsResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanUpgradeStatus QueryVsanUpgradeStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanUpgradeStatus"] = reflect.TypeOf((*QueryVsanUpgradeStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanUpgradeStatusRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster ManagedObjectReference `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QueryVsanUpgradeStatusRequestType"] = reflect.TypeOf((*QueryVsanUpgradeStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QueryVsanUpgradeStatusResponse struct {
0000000000000000000000000000000000000000;;		Returnval VsanUpgradeSystemUpgradeStatus `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuestionPending struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Text string `xml:"text"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuestionPending"] = reflect.TypeOf((*QuestionPending)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuestionPendingFault QuestionPending
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuestionPendingFault"] = reflect.TypeOf((*QuestionPendingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuiesceDatastoreIOForHAFailed struct {
0000000000000000000000000000000000000000;;		ResourceInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostName string                 `xml:"hostName"`
0000000000000000000000000000000000000000;;		Ds       ManagedObjectReference `xml:"ds"`
0000000000000000000000000000000000000000;;		DsName   string                 `xml:"dsName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuiesceDatastoreIOForHAFailed"] = reflect.TypeOf((*QuiesceDatastoreIOForHAFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuiesceDatastoreIOForHAFailedFault QuiesceDatastoreIOForHAFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["QuiesceDatastoreIOForHAFailedFault"] = reflect.TypeOf((*QuiesceDatastoreIOForHAFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMConversionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMConversionNotSupported"] = reflect.TypeOf((*RDMConversionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMConversionNotSupportedFault RDMConversionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMConversionNotSupportedFault"] = reflect.TypeOf((*RDMConversionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMNotPreserved struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMNotPreserved"] = reflect.TypeOf((*RDMNotPreserved)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMNotPreservedFault RDMNotPreserved
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMNotPreservedFault"] = reflect.TypeOf((*RDMNotPreservedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMNotSupported"] = reflect.TypeOf((*RDMNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMNotSupportedFault BaseRDMNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMNotSupportedFault"] = reflect.TypeOf((*RDMNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMNotSupportedOnDatastore struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device        string                 `xml:"device"`
0000000000000000000000000000000000000000;;		Datastore     ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		DatastoreName string                 `xml:"datastoreName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMNotSupportedOnDatastore"] = reflect.TypeOf((*RDMNotSupportedOnDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMNotSupportedOnDatastoreFault RDMNotSupportedOnDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMNotSupportedOnDatastoreFault"] = reflect.TypeOf((*RDMNotSupportedOnDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMPointsToInaccessibleDisk struct {
0000000000000000000000000000000000000000;;		CannotAccessVmDisk
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMPointsToInaccessibleDisk"] = reflect.TypeOf((*RDMPointsToInaccessibleDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RDMPointsToInaccessibleDiskFault RDMPointsToInaccessibleDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RDMPointsToInaccessibleDiskFault"] = reflect.TypeOf((*RDMPointsToInaccessibleDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawDiskNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RawDiskNotSupported"] = reflect.TypeOf((*RawDiskNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawDiskNotSupportedFault RawDiskNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RawDiskNotSupportedFault"] = reflect.TypeOf((*RawDiskNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadEnvironmentVariableInGuest ReadEnvironmentVariableInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadEnvironmentVariableInGuest"] = reflect.TypeOf((*ReadEnvironmentVariableInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadEnvironmentVariableInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm    ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth  BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Names []string                `xml:"names,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadEnvironmentVariableInGuestRequestType"] = reflect.TypeOf((*ReadEnvironmentVariableInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadEnvironmentVariableInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval []string `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadHostResourcePoolTreeFailed struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadHostResourcePoolTreeFailed"] = reflect.TypeOf((*ReadHostResourcePoolTreeFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadHostResourcePoolTreeFailedFault ReadHostResourcePoolTreeFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadHostResourcePoolTreeFailedFault"] = reflect.TypeOf((*ReadHostResourcePoolTreeFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadNextEvents ReadNextEventsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadNextEvents"] = reflect.TypeOf((*ReadNextEvents)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadNextEventsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MaxCount int32                  `xml:"maxCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadNextEventsRequestType"] = reflect.TypeOf((*ReadNextEventsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadNextEventsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseEvent `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadNextTasks ReadNextTasksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadNextTasks"] = reflect.TypeOf((*ReadNextTasks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadNextTasksRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MaxCount int32                  `xml:"maxCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadNextTasksRequestType"] = reflect.TypeOf((*ReadNextTasksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadNextTasksResponse struct {
0000000000000000000000000000000000000000;;		Returnval []TaskInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadOnlyDisksWithLegacyDestination struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RoDiskCount   int32 `xml:"roDiskCount"`
0000000000000000000000000000000000000000;;		TimeoutDanger bool  `xml:"timeoutDanger"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadOnlyDisksWithLegacyDestination"] = reflect.TypeOf((*ReadOnlyDisksWithLegacyDestination)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadOnlyDisksWithLegacyDestinationFault ReadOnlyDisksWithLegacyDestination
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadOnlyDisksWithLegacyDestinationFault"] = reflect.TypeOf((*ReadOnlyDisksWithLegacyDestinationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadPreviousEvents ReadPreviousEventsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadPreviousEvents"] = reflect.TypeOf((*ReadPreviousEvents)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadPreviousEventsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MaxCount int32                  `xml:"maxCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadPreviousEventsRequestType"] = reflect.TypeOf((*ReadPreviousEventsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadPreviousEventsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseEvent `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadPreviousTasks ReadPreviousTasksRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadPreviousTasks"] = reflect.TypeOf((*ReadPreviousTasks)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadPreviousTasksRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MaxCount int32                  `xml:"maxCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReadPreviousTasksRequestType"] = reflect.TypeOf((*ReadPreviousTasksRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadPreviousTasksResponse struct {
0000000000000000000000000000000000000000;;		Returnval []TaskInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootGuest RebootGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RebootGuest"] = reflect.TypeOf((*RebootGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RebootGuestRequestType"] = reflect.TypeOf((*RebootGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootHostRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RebootHostRequestType"] = reflect.TypeOf((*RebootHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootHost_Task RebootHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RebootHost_Task"] = reflect.TypeOf((*RebootHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootRequired struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Patch string `xml:"patch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RebootRequired"] = reflect.TypeOf((*RebootRequired)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootRequiredFault RebootRequired
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RebootRequiredFault"] = reflect.TypeOf((*RebootRequiredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommendDatastores RecommendDatastoresRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecommendDatastores"] = reflect.TypeOf((*RecommendDatastores)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommendDatastoresRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		StorageSpec StoragePlacementSpec   `xml:"storageSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecommendDatastoresRequestType"] = reflect.TypeOf((*RecommendDatastoresRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommendDatastoresResponse struct {
0000000000000000000000000000000000000000;;		Returnval StoragePlacementResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommendHostsForVm RecommendHostsForVmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecommendHostsForVm"] = reflect.TypeOf((*RecommendHostsForVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommendHostsForVmRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Pool *ManagedObjectReference `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecommendHostsForVmRequestType"] = reflect.TypeOf((*RecommendHostsForVmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommendHostsForVmResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ClusterHostRecommendation `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommissionVsanNodeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecommissionVsanNodeRequestType"] = reflect.TypeOf((*RecommissionVsanNodeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommissionVsanNode_Task RecommissionVsanNodeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecommissionVsanNode_Task"] = reflect.TypeOf((*RecommissionVsanNode_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecommissionVsanNode_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconcileDatastoreInventoryRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconcileDatastoreInventoryRequestType"] = reflect.TypeOf((*ReconcileDatastoreInventoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconcileDatastoreInventory_Task ReconcileDatastoreInventoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconcileDatastoreInventory_Task"] = reflect.TypeOf((*ReconcileDatastoreInventory_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconcileDatastoreInventory_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec VirtualMachineConfigSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigVMRequestType"] = reflect.TypeOf((*ReconfigVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigVM_Task ReconfigVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigVM_Task"] = reflect.TypeOf((*ReconfigVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigurationSatisfiable ReconfigurationSatisfiableRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigurationSatisfiable"] = reflect.TypeOf((*ReconfigurationSatisfiable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigurationSatisfiableRequestType struct {
0000000000000000000000000000000000000000;;		This                 ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Pcbs                 []VsanPolicyChangeBatch `xml:"pcbs"`
0000000000000000000000000000000000000000;;		IgnoreSatisfiability *bool                   `xml:"ignoreSatisfiability"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigurationSatisfiableRequestType"] = reflect.TypeOf((*ReconfigurationSatisfiableRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigurationSatisfiableResponse struct {
0000000000000000000000000000000000000000;;		Returnval []VsanPolicySatisfiability `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureAlarm ReconfigureAlarmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureAlarm"] = reflect.TypeOf((*ReconfigureAlarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureAlarmRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec BaseAlarmSpec          `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureAlarmRequestType"] = reflect.TypeOf((*ReconfigureAlarmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureAlarmResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureAutostart ReconfigureAutostartRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureAutostart"] = reflect.TypeOf((*ReconfigureAutostart)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureAutostartRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostAutoStartManagerConfig `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureAutostartRequestType"] = reflect.TypeOf((*ReconfigureAutostartRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureAutostartResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureClusterRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec   ClusterConfigSpec      `xml:"spec"`
0000000000000000000000000000000000000000;;		Modify bool                   `xml:"modify"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureClusterRequestType"] = reflect.TypeOf((*ReconfigureClusterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureCluster_Task ReconfigureClusterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureCluster_Task"] = reflect.TypeOf((*ReconfigureCluster_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureCluster_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureComputeResourceRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference        `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec   BaseComputeResourceConfigSpec `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;		Modify bool                          `xml:"modify"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureComputeResourceRequestType"] = reflect.TypeOf((*ReconfigureComputeResourceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureComputeResource_Task ReconfigureComputeResourceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureComputeResource_Task"] = reflect.TypeOf((*ReconfigureComputeResource_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureComputeResource_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDVPortRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Port []DVPortConfigSpec     `xml:"port"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDVPortRequestType"] = reflect.TypeOf((*ReconfigureDVPortRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDVPort_Task ReconfigureDVPortRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDVPort_Task"] = reflect.TypeOf((*ReconfigureDVPort_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDVPort_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDVPortgroupRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec DVPortgroupConfigSpec  `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDVPortgroupRequestType"] = reflect.TypeOf((*ReconfigureDVPortgroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDVPortgroup_Task ReconfigureDVPortgroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDVPortgroup_Task"] = reflect.TypeOf((*ReconfigureDVPortgroup_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDVPortgroup_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDatacenterRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec   DatacenterConfigSpec   `xml:"spec"`
0000000000000000000000000000000000000000;;		Modify bool                   `xml:"modify"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDatacenterRequestType"] = reflect.TypeOf((*ReconfigureDatacenterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDatacenter_Task ReconfigureDatacenterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDatacenter_Task"] = reflect.TypeOf((*ReconfigureDatacenter_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDatacenter_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDomObject ReconfigureDomObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDomObject"] = reflect.TypeOf((*ReconfigureDomObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDomObjectRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuid   string                 `xml:"uuid"`
0000000000000000000000000000000000000000;;		Policy string                 `xml:"policy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDomObjectRequestType"] = reflect.TypeOf((*ReconfigureDomObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDomObjectResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDvsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec BaseDVSConfigSpec      `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDvsRequestType"] = reflect.TypeOf((*ReconfigureDvsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDvs_Task ReconfigureDvsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureDvs_Task"] = reflect.TypeOf((*ReconfigureDvs_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureDvs_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureHostForDASRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureHostForDASRequestType"] = reflect.TypeOf((*ReconfigureHostForDASRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureHostForDAS_Task ReconfigureHostForDASRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureHostForDAS_Task"] = reflect.TypeOf((*ReconfigureHostForDAS_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureHostForDAS_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureScheduledTask ReconfigureScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureScheduledTask"] = reflect.TypeOf((*ReconfigureScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec BaseScheduledTaskSpec  `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureScheduledTaskRequestType"] = reflect.TypeOf((*ReconfigureScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureServiceConsoleReservation ReconfigureServiceConsoleReservationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureServiceConsoleReservation"] = reflect.TypeOf((*ReconfigureServiceConsoleReservation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureServiceConsoleReservationRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CfgBytes int64                  `xml:"cfgBytes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureServiceConsoleReservationRequestType"] = reflect.TypeOf((*ReconfigureServiceConsoleReservationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureServiceConsoleReservationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureSnmpAgent ReconfigureSnmpAgentRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureSnmpAgent"] = reflect.TypeOf((*ReconfigureSnmpAgent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureSnmpAgentRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec HostSnmpConfigSpec     `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureSnmpAgentRequestType"] = reflect.TypeOf((*ReconfigureSnmpAgentRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureSnmpAgentResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureVirtualMachineReservation ReconfigureVirtualMachineReservationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureVirtualMachineReservation"] = reflect.TypeOf((*ReconfigureVirtualMachineReservation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureVirtualMachineReservationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference              `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec VirtualMachineMemoryReservationSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconfigureVirtualMachineReservationRequestType"] = reflect.TypeOf((*ReconfigureVirtualMachineReservationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconfigureVirtualMachineReservationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconnectHostRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		CnxSpec       *HostConnectSpec         `xml:"cnxSpec,omitempty"`
0000000000000000000000000000000000000000;;		ReconnectSpec *HostSystemReconnectSpec `xml:"reconnectSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconnectHostRequestType"] = reflect.TypeOf((*ReconnectHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconnectHost_Task ReconnectHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReconnectHost_Task"] = reflect.TypeOf((*ReconnectHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconnectHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecordReplayDisabled struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecordReplayDisabled"] = reflect.TypeOf((*RecordReplayDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecordReplayDisabledFault RecordReplayDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecordReplayDisabledFault"] = reflect.TypeOf((*RecordReplayDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecoveryEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;		PortKey  string `xml:"portKey"`
0000000000000000000000000000000000000000;;		DvsUuid  string `xml:"dvsUuid,omitempty"`
0000000000000000000000000000000000000000;;		Vnic     string `xml:"vnic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecoveryEvent"] = reflect.TypeOf((*RecoveryEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RectifyDvsHostRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RectifyDvsHostRequestType"] = reflect.TypeOf((*RectifyDvsHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RectifyDvsHost_Task RectifyDvsHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RectifyDvsHost_Task"] = reflect.TypeOf((*RectifyDvsHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RectifyDvsHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RectifyDvsOnHostRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RectifyDvsOnHostRequestType"] = reflect.TypeOf((*RectifyDvsOnHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RectifyDvsOnHost_Task RectifyDvsOnHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RectifyDvsOnHost_Task"] = reflect.TypeOf((*RectifyDvsOnHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RectifyDvsOnHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecurrentTaskScheduler struct {
0000000000000000000000000000000000000000;;		TaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Interval int32 `xml:"interval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RecurrentTaskScheduler"] = reflect.TypeOf((*RecurrentTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Refresh RefreshRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Refresh"] = reflect.TypeOf((*Refresh)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDVPortState RefreshDVPortStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDVPortState"] = reflect.TypeOf((*RefreshDVPortState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDVPortStateRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PortKeys []string               `xml:"portKeys,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDVPortStateRequestType"] = reflect.TypeOf((*RefreshDVPortStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDVPortStateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDatastore RefreshDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDatastore"] = reflect.TypeOf((*RefreshDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDatastoreRequestType"] = reflect.TypeOf((*RefreshDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDatastoreResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDatastoreStorageInfo RefreshDatastoreStorageInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDatastoreStorageInfo"] = reflect.TypeOf((*RefreshDatastoreStorageInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDatastoreStorageInfoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDatastoreStorageInfoRequestType"] = reflect.TypeOf((*RefreshDatastoreStorageInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDatastoreStorageInfoResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDateTimeSystem RefreshDateTimeSystemRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDateTimeSystem"] = reflect.TypeOf((*RefreshDateTimeSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDateTimeSystemRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshDateTimeSystemRequestType"] = reflect.TypeOf((*RefreshDateTimeSystemRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshDateTimeSystemResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshFirewall RefreshFirewallRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshFirewall"] = reflect.TypeOf((*RefreshFirewall)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshFirewallRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshFirewallRequestType"] = reflect.TypeOf((*RefreshFirewallRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshFirewallResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshGraphicsManager RefreshGraphicsManagerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshGraphicsManager"] = reflect.TypeOf((*RefreshGraphicsManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshGraphicsManagerRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshGraphicsManagerRequestType"] = reflect.TypeOf((*RefreshGraphicsManagerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshGraphicsManagerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshHealthStatusSystem RefreshHealthStatusSystemRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshHealthStatusSystem"] = reflect.TypeOf((*RefreshHealthStatusSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshHealthStatusSystemRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshHealthStatusSystemRequestType"] = reflect.TypeOf((*RefreshHealthStatusSystemRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshHealthStatusSystemResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshNetworkSystem RefreshNetworkSystemRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshNetworkSystem"] = reflect.TypeOf((*RefreshNetworkSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshNetworkSystemRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshNetworkSystemRequestType"] = reflect.TypeOf((*RefreshNetworkSystemRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshNetworkSystemResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRecommendation RefreshRecommendationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshRecommendation"] = reflect.TypeOf((*RefreshRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRecommendationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshRecommendationRequestType"] = reflect.TypeOf((*RefreshRecommendationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRecommendationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshRequestType"] = reflect.TypeOf((*RefreshRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRuntime RefreshRuntimeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshRuntime"] = reflect.TypeOf((*RefreshRuntime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRuntimeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshRuntimeRequestType"] = reflect.TypeOf((*RefreshRuntimeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshRuntimeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshServices RefreshServicesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshServices"] = reflect.TypeOf((*RefreshServices)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshServicesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshServicesRequestType"] = reflect.TypeOf((*RefreshServicesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshServicesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageDrsRecommendation RefreshStorageDrsRecommendationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshStorageDrsRecommendation"] = reflect.TypeOf((*RefreshStorageDrsRecommendation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageDrsRecommendationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Pod  ManagedObjectReference `xml:"pod"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshStorageDrsRecommendationRequestType"] = reflect.TypeOf((*RefreshStorageDrsRecommendationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageDrsRecommendationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageInfo RefreshStorageInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshStorageInfo"] = reflect.TypeOf((*RefreshStorageInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageInfoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshStorageInfoRequestType"] = reflect.TypeOf((*RefreshStorageInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageInfoResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageSystem RefreshStorageSystemRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshStorageSystem"] = reflect.TypeOf((*RefreshStorageSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageSystemRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RefreshStorageSystemRequestType"] = reflect.TypeOf((*RefreshStorageSystemRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RefreshStorageSystemResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterChildVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Path string                  `xml:"path"`
0000000000000000000000000000000000000000;;		Name string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterChildVMRequestType"] = reflect.TypeOf((*RegisterChildVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterChildVM_Task RegisterChildVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterChildVM_Task"] = reflect.TypeOf((*RegisterChildVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterChildVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterDisk RegisterDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterDisk"] = reflect.TypeOf((*RegisterDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterDiskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Path string                 `xml:"path"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterDiskRequestType"] = reflect.TypeOf((*RegisterDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterDiskResponse struct {
0000000000000000000000000000000000000000;;		Returnval VStorageObject `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterExtension RegisterExtensionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterExtension"] = reflect.TypeOf((*RegisterExtension)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterExtensionRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Extension Extension              `xml:"extension"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterExtensionRequestType"] = reflect.TypeOf((*RegisterExtensionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterExtensionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterHealthUpdateProvider RegisterHealthUpdateProviderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterHealthUpdateProvider"] = reflect.TypeOf((*RegisterHealthUpdateProvider)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterHealthUpdateProviderRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name             string                 `xml:"name"`
0000000000000000000000000000000000000000;;		HealthUpdateInfo []HealthUpdateInfo     `xml:"healthUpdateInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterHealthUpdateProviderRequestType"] = reflect.TypeOf((*RegisterHealthUpdateProviderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterHealthUpdateProviderResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterKmipServer RegisterKmipServerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterKmipServer"] = reflect.TypeOf((*RegisterKmipServer)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterKmipServerRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Server KmipServerSpec         `xml:"server"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterKmipServerRequestType"] = reflect.TypeOf((*RegisterKmipServerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterKmipServerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterVMRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Path       string                  `xml:"path"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		AsTemplate bool                    `xml:"asTemplate"`
0000000000000000000000000000000000000000;;		Pool       *ManagedObjectReference `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;		Host       *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterVMRequestType"] = reflect.TypeOf((*RegisterVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterVM_Task RegisterVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RegisterVM_Task"] = reflect.TypeOf((*RegisterVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Relation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Constraint string `xml:"constraint,omitempty"`
0000000000000000000000000000000000000000;;		Name       string `xml:"name"`
0000000000000000000000000000000000000000;;		Version    string `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Relation"] = reflect.TypeOf((*Relation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseCredentialsInGuest ReleaseCredentialsInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReleaseCredentialsInGuest"] = reflect.TypeOf((*ReleaseCredentialsInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseCredentialsInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReleaseCredentialsInGuestRequestType"] = reflect.TypeOf((*ReleaseCredentialsInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseCredentialsInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseIpAllocation ReleaseIpAllocationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReleaseIpAllocation"] = reflect.TypeOf((*ReleaseIpAllocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseIpAllocationRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc           ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		PoolId       int32                  `xml:"poolId"`
0000000000000000000000000000000000000000;;		AllocationId string                 `xml:"allocationId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReleaseIpAllocationRequestType"] = reflect.TypeOf((*ReleaseIpAllocationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseIpAllocationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseManagedSnapshot ReleaseManagedSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReleaseManagedSnapshot"] = reflect.TypeOf((*ReleaseManagedSnapshot)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseManagedSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vdisk      string                  `xml:"vdisk"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReleaseManagedSnapshotRequestType"] = reflect.TypeOf((*ReleaseManagedSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseManagedSnapshotResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Reload ReloadRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Reload"] = reflect.TypeOf((*Reload)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReloadRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReloadRequestType"] = reflect.TypeOf((*ReloadRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReloadResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RelocateVMRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec     VirtualMachineRelocateSpec `xml:"spec"`
0000000000000000000000000000000000000000;;		Priority VirtualMachineMovePriority `xml:"priority,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RelocateVMRequestType"] = reflect.TypeOf((*RelocateVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RelocateVM_Task RelocateVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RelocateVM_Task"] = reflect.TypeOf((*RelocateVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RelocateVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RelocateVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Spec      VslmRelocateSpec       `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RelocateVStorageObjectRequestType"] = reflect.TypeOf((*RelocateVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RelocateVStorageObject_Task RelocateVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RelocateVStorageObject_Task"] = reflect.TypeOf((*RelocateVStorageObject_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RelocateVStorageObject_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoteDeviceNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoteDeviceNotSupported"] = reflect.TypeOf((*RemoteDeviceNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoteDeviceNotSupportedFault RemoteDeviceNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoteDeviceNotSupportedFault"] = reflect.TypeOf((*RemoteDeviceNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoteTSMEnabledEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoteTSMEnabledEvent"] = reflect.TypeOf((*RemoteTSMEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAlarm RemoveAlarmRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAlarm"] = reflect.TypeOf((*RemoveAlarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAlarmRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAlarmRequestType"] = reflect.TypeOf((*RemoveAlarmRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAlarmResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAllSnapshotsRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Consolidate *bool                  `xml:"consolidate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAllSnapshotsRequestType"] = reflect.TypeOf((*RemoveAllSnapshotsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAllSnapshots_Task RemoveAllSnapshotsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAllSnapshots_Task"] = reflect.TypeOf((*RemoveAllSnapshots_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAllSnapshots_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAssignedLicense RemoveAssignedLicenseRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAssignedLicense"] = reflect.TypeOf((*RemoveAssignedLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAssignedLicenseRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EntityId string                 `xml:"entityId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAssignedLicenseRequestType"] = reflect.TypeOf((*RemoveAssignedLicenseRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAssignedLicenseResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAuthorizationRole RemoveAuthorizationRoleRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAuthorizationRole"] = reflect.TypeOf((*RemoveAuthorizationRole)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAuthorizationRoleRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		RoleId     int32                  `xml:"roleId"`
0000000000000000000000000000000000000000;;		FailIfUsed bool                   `xml:"failIfUsed"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveAuthorizationRoleRequestType"] = reflect.TypeOf((*RemoveAuthorizationRoleRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveAuthorizationRoleResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveCustomFieldDef RemoveCustomFieldDefRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveCustomFieldDef"] = reflect.TypeOf((*RemoveCustomFieldDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveCustomFieldDefRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  int32                  `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveCustomFieldDefRequestType"] = reflect.TypeOf((*RemoveCustomFieldDefRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveCustomFieldDefResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDatastore RemoveDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDatastore"] = reflect.TypeOf((*RemoveDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDatastoreExRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore []ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDatastoreExRequestType"] = reflect.TypeOf((*RemoveDatastoreExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDatastoreEx_Task RemoveDatastoreExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDatastoreEx_Task"] = reflect.TypeOf((*RemoveDatastoreEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDatastoreEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDatastoreRequestType"] = reflect.TypeOf((*RemoveDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDatastoreResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDiskMappingRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Mapping         []VsanHostDiskMapping  `xml:"mapping"`
0000000000000000000000000000000000000000;;		MaintenanceSpec *HostMaintenanceSpec   `xml:"maintenanceSpec,omitempty"`
0000000000000000000000000000000000000000;;		Timeout         int32                  `xml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDiskMappingRequestType"] = reflect.TypeOf((*RemoveDiskMappingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDiskMapping_Task RemoveDiskMappingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDiskMapping_Task"] = reflect.TypeOf((*RemoveDiskMapping_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDiskMapping_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDiskRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Disk            []HostScsiDisk         `xml:"disk"`
0000000000000000000000000000000000000000;;		MaintenanceSpec *HostMaintenanceSpec   `xml:"maintenanceSpec,omitempty"`
0000000000000000000000000000000000000000;;		Timeout         int32                  `xml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDiskRequestType"] = reflect.TypeOf((*RemoveDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDisk_Task RemoveDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveDisk_Task"] = reflect.TypeOf((*RemoveDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveEntityPermission RemoveEntityPermissionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveEntityPermission"] = reflect.TypeOf((*RemoveEntityPermission)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveEntityPermissionRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity  ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		User    string                 `xml:"user"`
0000000000000000000000000000000000000000;;		IsGroup bool                   `xml:"isGroup"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveEntityPermissionRequestType"] = reflect.TypeOf((*RemoveEntityPermissionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveEntityPermissionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFailed struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveFailed"] = reflect.TypeOf((*RemoveFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFailedFault RemoveFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveFailedFault"] = reflect.TypeOf((*RemoveFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFilter RemoveFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveFilter"] = reflect.TypeOf((*RemoveFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFilterEntities RemoveFilterEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveFilterEntities"] = reflect.TypeOf((*RemoveFilterEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFilterEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                   `xml:"filterId"`
0000000000000000000000000000000000000000;;		Entities []ManagedObjectReference `xml:"entities,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveFilterEntitiesRequestType"] = reflect.TypeOf((*RemoveFilterEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFilterEntitiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFilterRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveFilterRequestType"] = reflect.TypeOf((*RemoveFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveFilterResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGroup RemoveGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveGroup"] = reflect.TypeOf((*RemoveGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGroupRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		GroupName string                 `xml:"groupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveGroupRequestType"] = reflect.TypeOf((*RemoveGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGuestAlias RemoveGuestAliasRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveGuestAlias"] = reflect.TypeOf((*RemoveGuestAlias)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGuestAliasByCert RemoveGuestAliasByCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveGuestAliasByCert"] = reflect.TypeOf((*RemoveGuestAliasByCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGuestAliasByCertRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm         ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth       BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Username   string                  `xml:"username"`
0000000000000000000000000000000000000000;;		Base64Cert string                  `xml:"base64Cert"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveGuestAliasByCertRequestType"] = reflect.TypeOf((*RemoveGuestAliasByCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGuestAliasByCertResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGuestAliasRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm         ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth       BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Username   string                  `xml:"username"`
0000000000000000000000000000000000000000;;		Base64Cert string                  `xml:"base64Cert"`
0000000000000000000000000000000000000000;;		Subject    BaseGuestAuthSubject    `xml:"subject,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveGuestAliasRequestType"] = reflect.TypeOf((*RemoveGuestAliasRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveGuestAliasResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveInternetScsiSendTargets RemoveInternetScsiSendTargetsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveInternetScsiSendTargets"] = reflect.TypeOf((*RemoveInternetScsiSendTargets)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveInternetScsiSendTargetsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                          `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		Targets        []HostInternetScsiHbaSendTarget `xml:"targets"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveInternetScsiSendTargetsRequestType"] = reflect.TypeOf((*RemoveInternetScsiSendTargetsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveInternetScsiSendTargetsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveInternetScsiStaticTargets RemoveInternetScsiStaticTargetsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveInternetScsiStaticTargets"] = reflect.TypeOf((*RemoveInternetScsiStaticTargets)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveInternetScsiStaticTargetsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                            `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		Targets        []HostInternetScsiHbaStaticTarget `xml:"targets"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveInternetScsiStaticTargetsRequestType"] = reflect.TypeOf((*RemoveInternetScsiStaticTargetsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveInternetScsiStaticTargetsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKey RemoveKeyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveKey"] = reflect.TypeOf((*RemoveKey)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKeyRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key   CryptoKeyId            `xml:"key"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveKeyRequestType"] = reflect.TypeOf((*RemoveKeyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKeyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKeys RemoveKeysRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveKeys"] = reflect.TypeOf((*RemoveKeys)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKeysRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Keys  []CryptoKeyId          `xml:"keys,omitempty"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveKeysRequestType"] = reflect.TypeOf((*RemoveKeysRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKeysResponse struct {
0000000000000000000000000000000000000000;;		Returnval []CryptoKeyResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKmipServer RemoveKmipServerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveKmipServer"] = reflect.TypeOf((*RemoveKmipServer)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKmipServerRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ClusterId  KeyProviderId          `xml:"clusterId"`
0000000000000000000000000000000000000000;;		ServerName string                 `xml:"serverName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveKmipServerRequestType"] = reflect.TypeOf((*RemoveKmipServerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveKmipServerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveLicense RemoveLicenseRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveLicense"] = reflect.TypeOf((*RemoveLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveLicenseLabel RemoveLicenseLabelRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveLicenseLabel"] = reflect.TypeOf((*RemoveLicenseLabel)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveLicenseLabelRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LicenseKey string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;		LabelKey   string                 `xml:"labelKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveLicenseLabelRequestType"] = reflect.TypeOf((*RemoveLicenseLabelRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveLicenseLabelResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveLicenseRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LicenseKey string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveLicenseRequestType"] = reflect.TypeOf((*RemoveLicenseRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveLicenseResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveMonitoredEntities RemoveMonitoredEntitiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveMonitoredEntities"] = reflect.TypeOf((*RemoveMonitoredEntities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveMonitoredEntitiesRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                   `xml:"providerId"`
0000000000000000000000000000000000000000;;		Entities   []ManagedObjectReference `xml:"entities,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveMonitoredEntitiesRequestType"] = reflect.TypeOf((*RemoveMonitoredEntitiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveMonitoredEntitiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveNetworkResourcePool RemoveNetworkResourcePoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveNetworkResourcePool"] = reflect.TypeOf((*RemoveNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveNetworkResourcePoolRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  []string               `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveNetworkResourcePoolRequestType"] = reflect.TypeOf((*RemoveNetworkResourcePoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveNetworkResourcePoolResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemovePerfInterval RemovePerfIntervalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemovePerfInterval"] = reflect.TypeOf((*RemovePerfInterval)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemovePerfIntervalRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SamplePeriod int32                  `xml:"samplePeriod"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemovePerfIntervalRequestType"] = reflect.TypeOf((*RemovePerfIntervalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemovePerfIntervalResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemovePortGroup RemovePortGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemovePortGroup"] = reflect.TypeOf((*RemovePortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemovePortGroupRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PgName string                 `xml:"pgName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemovePortGroupRequestType"] = reflect.TypeOf((*RemovePortGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemovePortGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveScheduledTask RemoveScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveScheduledTask"] = reflect.TypeOf((*RemoveScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveScheduledTaskRequestType"] = reflect.TypeOf((*RemoveScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveServiceConsoleVirtualNic RemoveServiceConsoleVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveServiceConsoleVirtualNic"] = reflect.TypeOf((*RemoveServiceConsoleVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveServiceConsoleVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device string                 `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveServiceConsoleVirtualNicRequestType"] = reflect.TypeOf((*RemoveServiceConsoleVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveServiceConsoleVirtualNicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSmartCardTrustAnchor RemoveSmartCardTrustAnchorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveSmartCardTrustAnchor"] = reflect.TypeOf((*RemoveSmartCardTrustAnchor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSmartCardTrustAnchorByFingerprint RemoveSmartCardTrustAnchorByFingerprintRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveSmartCardTrustAnchorByFingerprint"] = reflect.TypeOf((*RemoveSmartCardTrustAnchorByFingerprint)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSmartCardTrustAnchorByFingerprintRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Fingerprint string                 `xml:"fingerprint"`
0000000000000000000000000000000000000000;;		Digest      string                 `xml:"digest"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveSmartCardTrustAnchorByFingerprintRequestType"] = reflect.TypeOf((*RemoveSmartCardTrustAnchorByFingerprintRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSmartCardTrustAnchorByFingerprintResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSmartCardTrustAnchorRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Issuer string                 `xml:"issuer"`
0000000000000000000000000000000000000000;;		Serial string                 `xml:"serial"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveSmartCardTrustAnchorRequestType"] = reflect.TypeOf((*RemoveSmartCardTrustAnchorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSmartCardTrustAnchorResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		RemoveChildren bool                   `xml:"removeChildren"`
0000000000000000000000000000000000000000;;		Consolidate    *bool                  `xml:"consolidate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveSnapshotRequestType"] = reflect.TypeOf((*RemoveSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSnapshot_Task RemoveSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveSnapshot_Task"] = reflect.TypeOf((*RemoveSnapshot_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveSnapshot_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveUser RemoveUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveUser"] = reflect.TypeOf((*RemoveUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveUserRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		UserName string                 `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveUserRequestType"] = reflect.TypeOf((*RemoveUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveUserResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveVirtualNic RemoveVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveVirtualNic"] = reflect.TypeOf((*RemoveVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device string                 `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveVirtualNicRequestType"] = reflect.TypeOf((*RemoveVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveVirtualNicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveVirtualSwitch RemoveVirtualSwitchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveVirtualSwitch"] = reflect.TypeOf((*RemoveVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveVirtualSwitchRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VswitchName string                 `xml:"vswitchName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RemoveVirtualSwitchRequestType"] = reflect.TypeOf((*RemoveVirtualSwitchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveVirtualSwitchResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameCustomFieldDef RenameCustomFieldDefRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameCustomFieldDef"] = reflect.TypeOf((*RenameCustomFieldDef)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameCustomFieldDefRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  int32                  `xml:"key"`
0000000000000000000000000000000000000000;;		Name string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameCustomFieldDefRequestType"] = reflect.TypeOf((*RenameCustomFieldDefRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameCustomFieldDefResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameCustomizationSpec RenameCustomizationSpecRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameCustomizationSpec"] = reflect.TypeOf((*RenameCustomizationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameCustomizationSpecRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name    string                 `xml:"name"`
0000000000000000000000000000000000000000;;		NewName string                 `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameCustomizationSpecRequestType"] = reflect.TypeOf((*RenameCustomizationSpecRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameCustomizationSpecResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameDatastore RenameDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameDatastore"] = reflect.TypeOf((*RenameDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		NewName string                 `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameDatastoreRequestType"] = reflect.TypeOf((*RenameDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameDatastoreResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		NewName string                 `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameRequestType"] = reflect.TypeOf((*RenameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameSnapshot RenameSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameSnapshot"] = reflect.TypeOf((*RenameSnapshot)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name        string                 `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description string                 `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameSnapshotRequestType"] = reflect.TypeOf((*RenameSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameSnapshotResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameVStorageObject RenameVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameVStorageObject"] = reflect.TypeOf((*RenameVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Name      string                 `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RenameVStorageObjectRequestType"] = reflect.TypeOf((*RenameVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RenameVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rename_Task RenameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Rename_Task"] = reflect.TypeOf((*Rename_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rename_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplaceCACertificatesAndCRLs ReplaceCACertificatesAndCRLsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplaceCACertificatesAndCRLs"] = reflect.TypeOf((*ReplaceCACertificatesAndCRLs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplaceCACertificatesAndCRLsRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		CaCert []string               `xml:"caCert"`
0000000000000000000000000000000000000000;;		CaCrl  []string               `xml:"caCrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplaceCACertificatesAndCRLsRequestType"] = reflect.TypeOf((*ReplaceCACertificatesAndCRLsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplaceCACertificatesAndCRLsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplaceSmartCardTrustAnchors ReplaceSmartCardTrustAnchorsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplaceSmartCardTrustAnchors"] = reflect.TypeOf((*ReplaceSmartCardTrustAnchors)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplaceSmartCardTrustAnchorsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Certs []string               `xml:"certs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplaceSmartCardTrustAnchorsRequestType"] = reflect.TypeOf((*ReplaceSmartCardTrustAnchorsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplaceSmartCardTrustAnchorsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationConfigFault struct {
0000000000000000000000000000000000000000;;		ReplicationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationConfigFault"] = reflect.TypeOf((*ReplicationConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationConfigFaultFault BaseReplicationConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationConfigFaultFault"] = reflect.TypeOf((*ReplicationConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Generation            int64                         `xml:"generation"`
0000000000000000000000000000000000000000;;		VmReplicationId       string                        `xml:"vmReplicationId"`
0000000000000000000000000000000000000000;;		Destination           string                        `xml:"destination"`
0000000000000000000000000000000000000000;;		Port                  int32                         `xml:"port"`
0000000000000000000000000000000000000000;;		Rpo                   int64                         `xml:"rpo"`
0000000000000000000000000000000000000000;;		QuiesceGuestEnabled   bool                          `xml:"quiesceGuestEnabled"`
0000000000000000000000000000000000000000;;		Paused                bool                          `xml:"paused"`
0000000000000000000000000000000000000000;;		OppUpdatesEnabled     bool                          `xml:"oppUpdatesEnabled"`
0000000000000000000000000000000000000000;;		NetCompressionEnabled *bool                         `xml:"netCompressionEnabled"`
0000000000000000000000000000000000000000;;		Disk                  []ReplicationInfoDiskSettings `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationConfigSpec"] = reflect.TypeOf((*ReplicationConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationDiskConfigFault struct {
0000000000000000000000000000000000000000;;		ReplicationConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		VmRef  *ManagedObjectReference `xml:"vmRef,omitempty"`
0000000000000000000000000000000000000000;;		Key    int32                   `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationDiskConfigFault"] = reflect.TypeOf((*ReplicationDiskConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationDiskConfigFaultFault ReplicationDiskConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationDiskConfigFaultFault"] = reflect.TypeOf((*ReplicationDiskConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationFault"] = reflect.TypeOf((*ReplicationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationFaultFault BaseReplicationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationFaultFault"] = reflect.TypeOf((*ReplicationFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationGroupId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FaultDomainId FaultDomainId `xml:"faultDomainId"`
0000000000000000000000000000000000000000;;		DeviceGroupId DeviceGroupId `xml:"deviceGroupId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationGroupId"] = reflect.TypeOf((*ReplicationGroupId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationIncompatibleWithFT struct {
0000000000000000000000000000000000000000;;		ReplicationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationIncompatibleWithFT"] = reflect.TypeOf((*ReplicationIncompatibleWithFT)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationIncompatibleWithFTFault ReplicationIncompatibleWithFT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationIncompatibleWithFTFault"] = reflect.TypeOf((*ReplicationIncompatibleWithFTFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationInfoDiskSettings struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key               int32  `xml:"key"`
0000000000000000000000000000000000000000;;		DiskReplicationId string `xml:"diskReplicationId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationInfoDiskSettings"] = reflect.TypeOf((*ReplicationInfoDiskSettings)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationInvalidOptions struct {
0000000000000000000000000000000000000000;;		ReplicationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Options string                  `xml:"options"`
0000000000000000000000000000000000000000;;		Entity  *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationInvalidOptions"] = reflect.TypeOf((*ReplicationInvalidOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationInvalidOptionsFault ReplicationInvalidOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationInvalidOptionsFault"] = reflect.TypeOf((*ReplicationInvalidOptionsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationNotSupportedOnHost struct {
0000000000000000000000000000000000000000;;		ReplicationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationNotSupportedOnHost"] = reflect.TypeOf((*ReplicationNotSupportedOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationNotSupportedOnHostFault ReplicationNotSupportedOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationNotSupportedOnHostFault"] = reflect.TypeOf((*ReplicationNotSupportedOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReplicationGroupId ReplicationGroupId `xml:"replicationGroupId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationSpec"] = reflect.TypeOf((*ReplicationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmConfigFault struct {
0000000000000000000000000000000000000000;;		ReplicationConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		VmRef  *ManagedObjectReference `xml:"vmRef,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmConfigFault"] = reflect.TypeOf((*ReplicationVmConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmConfigFaultFault ReplicationVmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmConfigFaultFault"] = reflect.TypeOf((*ReplicationVmConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmFault struct {
0000000000000000000000000000000000000000;;		ReplicationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason     string                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		State      string                  `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		InstanceId string                  `xml:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;		Vm         *ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmFault"] = reflect.TypeOf((*ReplicationVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmFaultFault BaseReplicationVmFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmFaultFault"] = reflect.TypeOf((*ReplicationVmFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmInProgressFault struct {
0000000000000000000000000000000000000000;;		ReplicationVmFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedActivity  string `xml:"requestedActivity"`
0000000000000000000000000000000000000000;;		InProgressActivity string `xml:"inProgressActivity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmInProgressFault"] = reflect.TypeOf((*ReplicationVmInProgressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmInProgressFaultFault ReplicationVmInProgressFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmInProgressFaultFault"] = reflect.TypeOf((*ReplicationVmInProgressFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReplicationVmProgressInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Progress              int32 `xml:"progress"`
0000000000000000000000000000000000000000;;		BytesTransferred      int64 `xml:"bytesTransferred"`
0000000000000000000000000000000000000000;;		BytesToTransfer       int64 `xml:"bytesToTransfer"`
0000000000000000000000000000000000000000;;		ChecksumTotalBytes    int64 `xml:"checksumTotalBytes,omitempty"`
0000000000000000000000000000000000000000;;		ChecksumComparedBytes int64 `xml:"checksumComparedBytes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ReplicationVmProgressInfo"] = reflect.TypeOf((*ReplicationVmProgressInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RequestCanceled struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RequestCanceled"] = reflect.TypeOf((*RequestCanceled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RequestCanceledFault RequestCanceled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RequestCanceledFault"] = reflect.TypeOf((*RequestCanceledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanAllHba RescanAllHbaRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanAllHba"] = reflect.TypeOf((*RescanAllHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanAllHbaRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanAllHbaRequestType"] = reflect.TypeOf((*RescanAllHbaRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanAllHbaResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanHba RescanHbaRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanHba"] = reflect.TypeOf((*RescanHba)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanHbaRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		HbaDevice string                 `xml:"hbaDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanHbaRequestType"] = reflect.TypeOf((*RescanHbaRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanHbaResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanVffs RescanVffsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanVffs"] = reflect.TypeOf((*RescanVffs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanVffsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanVffsRequestType"] = reflect.TypeOf((*RescanVffsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanVffsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanVmfs RescanVmfsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanVmfs"] = reflect.TypeOf((*RescanVmfs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanVmfsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RescanVmfsRequestType"] = reflect.TypeOf((*RescanVmfsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RescanVmfsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetCollector ResetCollectorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetCollector"] = reflect.TypeOf((*ResetCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetCollectorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetCollectorRequestType"] = reflect.TypeOf((*ResetCollectorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetCollectorResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetCounterLevelMapping ResetCounterLevelMappingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetCounterLevelMapping"] = reflect.TypeOf((*ResetCounterLevelMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetCounterLevelMappingRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Counters []int32                `xml:"counters"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetCounterLevelMappingRequestType"] = reflect.TypeOf((*ResetCounterLevelMappingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetCounterLevelMappingResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetEntityPermissions ResetEntityPermissionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetEntityPermissions"] = reflect.TypeOf((*ResetEntityPermissions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetEntityPermissionsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Permission []Permission           `xml:"permission,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetEntityPermissionsRequestType"] = reflect.TypeOf((*ResetEntityPermissionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetEntityPermissionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetFirmwareToFactoryDefaults ResetFirmwareToFactoryDefaultsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetFirmwareToFactoryDefaults"] = reflect.TypeOf((*ResetFirmwareToFactoryDefaults)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetFirmwareToFactoryDefaultsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetFirmwareToFactoryDefaultsRequestType"] = reflect.TypeOf((*ResetFirmwareToFactoryDefaultsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetFirmwareToFactoryDefaultsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetGuestInformation ResetGuestInformationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetGuestInformation"] = reflect.TypeOf((*ResetGuestInformation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetGuestInformationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetGuestInformationRequestType"] = reflect.TypeOf((*ResetGuestInformationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetGuestInformationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetListView ResetListViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetListView"] = reflect.TypeOf((*ResetListView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetListViewFromView ResetListViewFromViewRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetListViewFromView"] = reflect.TypeOf((*ResetListViewFromView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetListViewFromViewRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		View ManagedObjectReference `xml:"view"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetListViewFromViewRequestType"] = reflect.TypeOf((*ResetListViewFromViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetListViewFromViewResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetListViewRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Obj  []ManagedObjectReference `xml:"obj,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetListViewRequestType"] = reflect.TypeOf((*ResetListViewRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetListViewResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetSystemHealthInfo ResetSystemHealthInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetSystemHealthInfo"] = reflect.TypeOf((*ResetSystemHealthInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetSystemHealthInfoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetSystemHealthInfoRequestType"] = reflect.TypeOf((*ResetSystemHealthInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetSystemHealthInfoResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetVMRequestType"] = reflect.TypeOf((*ResetVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetVM_Task ResetVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResetVM_Task"] = reflect.TypeOf((*ResetVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResignatureUnresolvedVmfsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		ResolutionSpec HostUnresolvedVmfsResignatureSpec `xml:"resolutionSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResignatureUnresolvedVmfsVolumeRequestType"] = reflect.TypeOf((*ResignatureUnresolvedVmfsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResignatureUnresolvedVmfsVolume_Task ResignatureUnresolvedVmfsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResignatureUnresolvedVmfsVolume_Task"] = reflect.TypeOf((*ResignatureUnresolvedVmfsVolume_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResignatureUnresolvedVmfsVolume_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveInstallationErrorsOnClusterRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;		Cluster  ManagedObjectReference `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveInstallationErrorsOnClusterRequestType"] = reflect.TypeOf((*ResolveInstallationErrorsOnClusterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveInstallationErrorsOnCluster_Task ResolveInstallationErrorsOnClusterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveInstallationErrorsOnCluster_Task"] = reflect.TypeOf((*ResolveInstallationErrorsOnCluster_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveInstallationErrorsOnCluster_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveInstallationErrorsOnHostRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveInstallationErrorsOnHostRequestType"] = reflect.TypeOf((*ResolveInstallationErrorsOnHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveInstallationErrorsOnHost_Task ResolveInstallationErrorsOnHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveInstallationErrorsOnHost_Task"] = reflect.TypeOf((*ResolveInstallationErrorsOnHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveInstallationErrorsOnHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveMultipleUnresolvedVmfsVolumes ResolveMultipleUnresolvedVmfsVolumesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveMultipleUnresolvedVmfsVolumes"] = reflect.TypeOf((*ResolveMultipleUnresolvedVmfsVolumes)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveMultipleUnresolvedVmfsVolumesExRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference             `xml:"_this"`
0000000000000000000000000000000000000000;;		ResolutionSpec []HostUnresolvedVmfsResolutionSpec `xml:"resolutionSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveMultipleUnresolvedVmfsVolumesExRequestType"] = reflect.TypeOf((*ResolveMultipleUnresolvedVmfsVolumesExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveMultipleUnresolvedVmfsVolumesEx_Task ResolveMultipleUnresolvedVmfsVolumesExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveMultipleUnresolvedVmfsVolumesEx_Task"] = reflect.TypeOf((*ResolveMultipleUnresolvedVmfsVolumesEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveMultipleUnresolvedVmfsVolumesEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveMultipleUnresolvedVmfsVolumesRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference             `xml:"_this"`
0000000000000000000000000000000000000000;;		ResolutionSpec []HostUnresolvedVmfsResolutionSpec `xml:"resolutionSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResolveMultipleUnresolvedVmfsVolumesRequestType"] = reflect.TypeOf((*ResolveMultipleUnresolvedVmfsVolumesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResolveMultipleUnresolvedVmfsVolumesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostUnresolvedVmfsResolutionResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceAllocationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reservation           int64       `xml:"reservation,omitempty"`
0000000000000000000000000000000000000000;;		ExpandableReservation *bool       `xml:"expandableReservation"`
0000000000000000000000000000000000000000;;		Limit                 int64       `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Shares                *SharesInfo `xml:"shares,omitempty"`
0000000000000000000000000000000000000000;;		OverheadLimit         int64       `xml:"overheadLimit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceAllocationInfo"] = reflect.TypeOf((*ResourceAllocationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceAllocationOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SharesOption SharesOption `xml:"sharesOption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceAllocationOption"] = reflect.TypeOf((*ResourceAllocationOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceConfigOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuAllocationOption    ResourceAllocationOption `xml:"cpuAllocationOption"`
0000000000000000000000000000000000000000;;		MemoryAllocationOption ResourceAllocationOption `xml:"memoryAllocationOption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceConfigOption"] = reflect.TypeOf((*ResourceConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity           *ManagedObjectReference    `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		ChangeVersion    string                     `xml:"changeVersion,omitempty"`
0000000000000000000000000000000000000000;;		LastModified     *time.Time                 `xml:"lastModified"`
0000000000000000000000000000000000000000;;		CpuAllocation    BaseResourceAllocationInfo `xml:"cpuAllocation,typeattr"`
0000000000000000000000000000000000000000;;		MemoryAllocation BaseResourceAllocationInfo `xml:"memoryAllocation,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceConfigSpec"] = reflect.TypeOf((*ResourceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceInUse struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type string `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		Name string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceInUse"] = reflect.TypeOf((*ResourceInUse)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceInUseFault BaseResourceInUse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceInUseFault"] = reflect.TypeOf((*ResourceInUseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceNotAvailable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ContainerType string `xml:"containerType,omitempty"`
0000000000000000000000000000000000000000;;		ContainerName string `xml:"containerName,omitempty"`
0000000000000000000000000000000000000000;;		Type          string `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceNotAvailable"] = reflect.TypeOf((*ResourceNotAvailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceNotAvailableFault ResourceNotAvailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceNotAvailableFault"] = reflect.TypeOf((*ResourceNotAvailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolCreatedEvent struct {
0000000000000000000000000000000000000000;;		ResourcePoolEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent ResourcePoolEventArgument `xml:"parent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolCreatedEvent"] = reflect.TypeOf((*ResourcePoolCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolDestroyedEvent struct {
0000000000000000000000000000000000000000;;		ResourcePoolEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolDestroyedEvent"] = reflect.TypeOf((*ResourcePoolDestroyedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourcePool ResourcePoolEventArgument `xml:"resourcePool"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolEvent"] = reflect.TypeOf((*ResourcePoolEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourcePool ManagedObjectReference `xml:"resourcePool"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolEventArgument"] = reflect.TypeOf((*ResourcePoolEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolMovedEvent struct {
0000000000000000000000000000000000000000;;		ResourcePoolEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldParent ResourcePoolEventArgument `xml:"oldParent"`
0000000000000000000000000000000000000000;;		NewParent ResourcePoolEventArgument `xml:"newParent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolMovedEvent"] = reflect.TypeOf((*ResourcePoolMovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolQuickStats struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OverallCpuUsage              int64 `xml:"overallCpuUsage,omitempty"`
0000000000000000000000000000000000000000;;		OverallCpuDemand             int64 `xml:"overallCpuDemand,omitempty"`
0000000000000000000000000000000000000000;;		GuestMemoryUsage             int64 `xml:"guestMemoryUsage,omitempty"`
0000000000000000000000000000000000000000;;		HostMemoryUsage              int64 `xml:"hostMemoryUsage,omitempty"`
0000000000000000000000000000000000000000;;		DistributedCpuEntitlement    int64 `xml:"distributedCpuEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		DistributedMemoryEntitlement int64 `xml:"distributedMemoryEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		StaticCpuEntitlement         int32 `xml:"staticCpuEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		StaticMemoryEntitlement      int32 `xml:"staticMemoryEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		PrivateMemory                int64 `xml:"privateMemory,omitempty"`
0000000000000000000000000000000000000000;;		SharedMemory                 int64 `xml:"sharedMemory,omitempty"`
0000000000000000000000000000000000000000;;		SwappedMemory                int64 `xml:"swappedMemory,omitempty"`
0000000000000000000000000000000000000000;;		BalloonedMemory              int64 `xml:"balloonedMemory,omitempty"`
0000000000000000000000000000000000000000;;		OverheadMemory               int64 `xml:"overheadMemory,omitempty"`
0000000000000000000000000000000000000000;;		ConsumedOverheadMemory       int64 `xml:"consumedOverheadMemory,omitempty"`
0000000000000000000000000000000000000000;;		CompressedMemory             int64 `xml:"compressedMemory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolQuickStats"] = reflect.TypeOf((*ResourcePoolQuickStats)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		ResourcePoolEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolReconfiguredEvent"] = reflect.TypeOf((*ResourcePoolReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolResourceUsage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReservationUsed      int64 `xml:"reservationUsed"`
0000000000000000000000000000000000000000;;		ReservationUsedForVm int64 `xml:"reservationUsedForVm"`
0000000000000000000000000000000000000000;;		UnreservedForPool    int64 `xml:"unreservedForPool"`
0000000000000000000000000000000000000000;;		UnreservedForVm      int64 `xml:"unreservedForVm"`
0000000000000000000000000000000000000000;;		OverallUsage         int64 `xml:"overallUsage"`
0000000000000000000000000000000000000000;;		MaxUsage             int64 `xml:"maxUsage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolResourceUsage"] = reflect.TypeOf((*ResourcePoolResourceUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Memory        ResourcePoolResourceUsage `xml:"memory"`
0000000000000000000000000000000000000000;;		Cpu           ResourcePoolResourceUsage `xml:"cpu"`
0000000000000000000000000000000000000000;;		OverallStatus ManagedEntityStatus       `xml:"overallStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolRuntimeInfo"] = reflect.TypeOf((*ResourcePoolRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePoolSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name               string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Config             ResourceConfigSpec      `xml:"config"`
0000000000000000000000000000000000000000;;		Runtime            ResourcePoolRuntimeInfo `xml:"runtime"`
0000000000000000000000000000000000000000;;		QuickStats         *ResourcePoolQuickStats `xml:"quickStats,omitempty"`
0000000000000000000000000000000000000000;;		ConfiguredMemoryMB int32                   `xml:"configuredMemoryMB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePoolSummary"] = reflect.TypeOf((*ResourcePoolSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceViolatedEvent struct {
0000000000000000000000000000000000000000;;		ResourcePoolEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourceViolatedEvent"] = reflect.TypeOf((*ResourceViolatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartService RestartServiceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestartService"] = reflect.TypeOf((*RestartService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartServiceConsoleVirtualNic RestartServiceConsoleVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestartServiceConsoleVirtualNic"] = reflect.TypeOf((*RestartServiceConsoleVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartServiceConsoleVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device string                 `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestartServiceConsoleVirtualNicRequestType"] = reflect.TypeOf((*RestartServiceConsoleVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartServiceConsoleVirtualNicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartServiceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestartServiceRequestType"] = reflect.TypeOf((*RestartServiceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartServiceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFirmwareConfiguration RestoreFirmwareConfigurationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestoreFirmwareConfiguration"] = reflect.TypeOf((*RestoreFirmwareConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFirmwareConfigurationRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestoreFirmwareConfigurationRequestType"] = reflect.TypeOf((*RestoreFirmwareConfigurationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFirmwareConfigurationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestrictedByAdministrator struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Details string `xml:"details"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestrictedByAdministrator"] = reflect.TypeOf((*RestrictedByAdministrator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestrictedByAdministratorFault RestrictedByAdministrator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestrictedByAdministratorFault"] = reflect.TypeOf((*RestrictedByAdministratorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestrictedVersion struct {
0000000000000000000000000000000000000000;;		SecurityError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestrictedVersion"] = reflect.TypeOf((*RestrictedVersion)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestrictedVersionFault RestrictedVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RestrictedVersionFault"] = reflect.TypeOf((*RestrictedVersionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAllPermissions RetrieveAllPermissionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveAllPermissions"] = reflect.TypeOf((*RetrieveAllPermissions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAllPermissionsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveAllPermissionsRequestType"] = reflect.TypeOf((*RetrieveAllPermissionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAllPermissionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []Permission `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAnswerFile RetrieveAnswerFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveAnswerFile"] = reflect.TypeOf((*RetrieveAnswerFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAnswerFileForProfile RetrieveAnswerFileForProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveAnswerFileForProfile"] = reflect.TypeOf((*RetrieveAnswerFileForProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAnswerFileForProfileRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host         ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		ApplyProfile HostApplyProfile       `xml:"applyProfile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveAnswerFileForProfileRequestType"] = reflect.TypeOf((*RetrieveAnswerFileForProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAnswerFileForProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval *AnswerFile `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAnswerFileRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveAnswerFileRequestType"] = reflect.TypeOf((*RetrieveAnswerFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveAnswerFileResponse struct {
0000000000000000000000000000000000000000;;		Returnval *AnswerFile `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveArgumentDescription RetrieveArgumentDescriptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveArgumentDescription"] = reflect.TypeOf((*RetrieveArgumentDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveArgumentDescriptionRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		EventTypeId string                 `xml:"eventTypeId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveArgumentDescriptionRequestType"] = reflect.TypeOf((*RetrieveArgumentDescriptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveArgumentDescriptionResponse struct {
0000000000000000000000000000000000000000;;		Returnval []EventArgDesc `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveClientCert RetrieveClientCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveClientCert"] = reflect.TypeOf((*RetrieveClientCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveClientCertRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveClientCertRequestType"] = reflect.TypeOf((*RetrieveClientCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveClientCertResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveClientCsr RetrieveClientCsrRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveClientCsr"] = reflect.TypeOf((*RetrieveClientCsr)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveClientCsrRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveClientCsrRequestType"] = reflect.TypeOf((*RetrieveClientCsrRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveClientCsrResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDasAdvancedRuntimeInfo RetrieveDasAdvancedRuntimeInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveDasAdvancedRuntimeInfo"] = reflect.TypeOf((*RetrieveDasAdvancedRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDasAdvancedRuntimeInfoRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveDasAdvancedRuntimeInfoRequestType"] = reflect.TypeOf((*RetrieveDasAdvancedRuntimeInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDasAdvancedRuntimeInfoResponse struct {
0000000000000000000000000000000000000000;;		Returnval BaseClusterDasAdvancedRuntimeInfo `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDescription RetrieveDescriptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveDescription"] = reflect.TypeOf((*RetrieveDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDescriptionRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveDescriptionRequestType"] = reflect.TypeOf((*RetrieveDescriptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDescriptionResponse struct {
0000000000000000000000000000000000000000;;		Returnval *ProfileDescription `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDiskPartitionInfo RetrieveDiskPartitionInfoRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveDiskPartitionInfo"] = reflect.TypeOf((*RetrieveDiskPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDiskPartitionInfoRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DevicePath []string               `xml:"devicePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveDiskPartitionInfoRequestType"] = reflect.TypeOf((*RetrieveDiskPartitionInfoRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveDiskPartitionInfoResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostDiskPartitionInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveEntityPermissions RetrieveEntityPermissionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveEntityPermissions"] = reflect.TypeOf((*RetrieveEntityPermissions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveEntityPermissionsRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity    ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Inherited bool                   `xml:"inherited"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveEntityPermissionsRequestType"] = reflect.TypeOf((*RetrieveEntityPermissionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveEntityPermissionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []Permission `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveEntityScheduledTask RetrieveEntityScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveEntityScheduledTask"] = reflect.TypeOf((*RetrieveEntityScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveEntityScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveEntityScheduledTaskRequestType"] = reflect.TypeOf((*RetrieveEntityScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveEntityScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHardwareUptime RetrieveHardwareUptimeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHardwareUptime"] = reflect.TypeOf((*RetrieveHardwareUptime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHardwareUptimeRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHardwareUptimeRequestType"] = reflect.TypeOf((*RetrieveHardwareUptimeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHardwareUptimeResponse struct {
0000000000000000000000000000000000000000;;		Returnval int64 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostAccessControlEntries RetrieveHostAccessControlEntriesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostAccessControlEntries"] = reflect.TypeOf((*RetrieveHostAccessControlEntries)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostAccessControlEntriesRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostAccessControlEntriesRequestType"] = reflect.TypeOf((*RetrieveHostAccessControlEntriesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostAccessControlEntriesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostAccessControlEntry `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostCustomizations RetrieveHostCustomizationsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostCustomizations"] = reflect.TypeOf((*RetrieveHostCustomizations)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostCustomizationsForProfile RetrieveHostCustomizationsForProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostCustomizationsForProfile"] = reflect.TypeOf((*RetrieveHostCustomizationsForProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostCustomizationsForProfileRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Hosts        []ManagedObjectReference `xml:"hosts,omitempty"`
0000000000000000000000000000000000000000;;		ApplyProfile HostApplyProfile         `xml:"applyProfile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostCustomizationsForProfileRequestType"] = reflect.TypeOf((*RetrieveHostCustomizationsForProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostCustomizationsForProfileResponse struct {
0000000000000000000000000000000000000000;;		Returnval []StructuredCustomizations `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostCustomizationsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostCustomizationsRequestType"] = reflect.TypeOf((*RetrieveHostCustomizationsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostCustomizationsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []StructuredCustomizations `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostSpecification RetrieveHostSpecificationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostSpecification"] = reflect.TypeOf((*RetrieveHostSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostSpecificationRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		FromHost bool                   `xml:"fromHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveHostSpecificationRequestType"] = reflect.TypeOf((*RetrieveHostSpecificationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveHostSpecificationResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostSpecification `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveKmipServerCert RetrieveKmipServerCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveKmipServerCert"] = reflect.TypeOf((*RetrieveKmipServerCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveKmipServerCertRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		KeyProvider KeyProviderId          `xml:"keyProvider"`
0000000000000000000000000000000000000000;;		Server      KmipServerInfo         `xml:"server"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveKmipServerCertRequestType"] = reflect.TypeOf((*RetrieveKmipServerCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveKmipServerCertResponse struct {
0000000000000000000000000000000000000000;;		Returnval CryptoManagerKmipServerCertInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveKmipServersStatusRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Clusters []KmipClusterInfo      `xml:"clusters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveKmipServersStatusRequestType"] = reflect.TypeOf((*RetrieveKmipServersStatusRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveKmipServersStatus_Task RetrieveKmipServersStatusRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveKmipServersStatus_Task"] = reflect.TypeOf((*RetrieveKmipServersStatus_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveKmipServersStatus_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveObjectScheduledTask RetrieveObjectScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveObjectScheduledTask"] = reflect.TypeOf((*RetrieveObjectScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveObjectScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Obj  *ManagedObjectReference `xml:"obj,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveObjectScheduledTaskRequestType"] = reflect.TypeOf((*RetrieveObjectScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveObjectScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ManagedObjectReference `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveOptions struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxObjects int32 `xml:"maxObjects,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveOptions"] = reflect.TypeOf((*RetrieveOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveProductComponents RetrieveProductComponentsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveProductComponents"] = reflect.TypeOf((*RetrieveProductComponents)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveProductComponentsRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveProductComponentsRequestType"] = reflect.TypeOf((*RetrieveProductComponentsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveProductComponentsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ProductComponentInfo `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveProperties RetrievePropertiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveProperties"] = reflect.TypeOf((*RetrieveProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrievePropertiesEx RetrievePropertiesExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrievePropertiesEx"] = reflect.TypeOf((*RetrievePropertiesEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrievePropertiesExRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SpecSet []PropertyFilterSpec   `xml:"specSet"`
0000000000000000000000000000000000000000;;		Options RetrieveOptions        `xml:"options"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrievePropertiesExRequestType"] = reflect.TypeOf((*RetrievePropertiesExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrievePropertiesExResponse struct {
0000000000000000000000000000000000000000;;		Returnval *RetrieveResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrievePropertiesRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SpecSet []PropertyFilterSpec   `xml:"specSet"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrievePropertiesRequestType"] = reflect.TypeOf((*RetrievePropertiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrievePropertiesResponse struct {
0000000000000000000000000000000000000000;;		Returnval []ObjectContent `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token   string          `xml:"token,omitempty"`
0000000000000000000000000000000000000000;;		Objects []ObjectContent `xml:"objects"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveResult"] = reflect.TypeOf((*RetrieveResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveRolePermissions RetrieveRolePermissionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveRolePermissions"] = reflect.TypeOf((*RetrieveRolePermissions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveRolePermissionsRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		RoleId int32                  `xml:"roleId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveRolePermissionsRequestType"] = reflect.TypeOf((*RetrieveRolePermissionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveRolePermissionsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []Permission `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveSelfSignedClientCert RetrieveSelfSignedClientCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveSelfSignedClientCert"] = reflect.TypeOf((*RetrieveSelfSignedClientCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveSelfSignedClientCertRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveSelfSignedClientCertRequestType"] = reflect.TypeOf((*RetrieveSelfSignedClientCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveSelfSignedClientCertResponse struct {
0000000000000000000000000000000000000000;;		Returnval string `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveServiceContent RetrieveServiceContentRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveServiceContent"] = reflect.TypeOf((*RetrieveServiceContent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveServiceContentRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveServiceContentRequestType"] = reflect.TypeOf((*RetrieveServiceContentRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveServiceContentResponse struct {
0000000000000000000000000000000000000000;;		Returnval ServiceContent `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveUserGroups RetrieveUserGroupsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveUserGroups"] = reflect.TypeOf((*RetrieveUserGroups)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveUserGroupsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Domain         string                 `xml:"domain,omitempty"`
0000000000000000000000000000000000000000;;		SearchStr      string                 `xml:"searchStr"`
0000000000000000000000000000000000000000;;		BelongsToGroup string                 `xml:"belongsToGroup,omitempty"`
0000000000000000000000000000000000000000;;		BelongsToUser  string                 `xml:"belongsToUser,omitempty"`
0000000000000000000000000000000000000000;;		ExactMatch     bool                   `xml:"exactMatch"`
0000000000000000000000000000000000000000;;		FindUsers      bool                   `xml:"findUsers"`
0000000000000000000000000000000000000000;;		FindGroups     bool                   `xml:"findGroups"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveUserGroupsRequestType"] = reflect.TypeOf((*RetrieveUserGroupsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveUserGroupsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseUserSearchResult `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveVStorageObject RetrieveVStorageObjectRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveVStorageObject"] = reflect.TypeOf((*RetrieveVStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveVStorageObjectRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveVStorageObjectRequestType"] = reflect.TypeOf((*RetrieveVStorageObjectRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveVStorageObjectResponse struct {
0000000000000000000000000000000000000000;;		Returnval VStorageObject `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveVStorageObjectState RetrieveVStorageObjectStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveVStorageObjectState"] = reflect.TypeOf((*RetrieveVStorageObjectState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveVStorageObjectStateRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id        ID                     `xml:"id"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RetrieveVStorageObjectStateRequestType"] = reflect.TypeOf((*RetrieveVStorageObjectStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetrieveVStorageObjectStateResponse struct {
0000000000000000000000000000000000000000;;		Returnval VStorageObjectStateInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RevertToCurrentSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host            *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		SuppressPowerOn *bool                   `xml:"suppressPowerOn"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RevertToCurrentSnapshotRequestType"] = reflect.TypeOf((*RevertToCurrentSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RevertToCurrentSnapshot_Task RevertToCurrentSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RevertToCurrentSnapshot_Task"] = reflect.TypeOf((*RevertToCurrentSnapshot_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RevertToCurrentSnapshot_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RevertToSnapshotRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host            *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		SuppressPowerOn *bool                   `xml:"suppressPowerOn"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RevertToSnapshotRequestType"] = reflect.TypeOf((*RevertToSnapshotRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RevertToSnapshot_Task RevertToSnapshotRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RevertToSnapshot_Task"] = reflect.TypeOf((*RevertToSnapshot_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RevertToSnapshot_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RewindCollector RewindCollectorRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RewindCollector"] = reflect.TypeOf((*RewindCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RewindCollectorRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RewindCollectorRequestType"] = reflect.TypeOf((*RewindCollectorRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RewindCollectorResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RoleAddedEvent struct {
0000000000000000000000000000000000000000;;		RoleEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivilegeList []string `xml:"privilegeList,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RoleAddedEvent"] = reflect.TypeOf((*RoleAddedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RoleEvent struct {
0000000000000000000000000000000000000000;;		AuthorizationEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Role RoleEventArgument `xml:"role"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RoleEvent"] = reflect.TypeOf((*RoleEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RoleEventArgument struct {
0000000000000000000000000000000000000000;;		EventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RoleId int32  `xml:"roleId"`
0000000000000000000000000000000000000000;;		Name   string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RoleEventArgument"] = reflect.TypeOf((*RoleEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RoleRemovedEvent struct {
0000000000000000000000000000000000000000;;		RoleEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RoleRemovedEvent"] = reflect.TypeOf((*RoleRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RoleUpdatedEvent struct {
0000000000000000000000000000000000000000;;		RoleEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivilegeList     []string `xml:"privilegeList,omitempty"`
0000000000000000000000000000000000000000;;		PrevRoleName      string   `xml:"prevRoleName,omitempty"`
0000000000000000000000000000000000000000;;		PrivilegesAdded   []string `xml:"privilegesAdded,omitempty"`
0000000000000000000000000000000000000000;;		PrivilegesRemoved []string `xml:"privilegesRemoved,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RoleUpdatedEvent"] = reflect.TypeOf((*RoleUpdatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollbackEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName   string `xml:"hostName"`
0000000000000000000000000000000000000000;;		MethodName string `xml:"methodName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RollbackEvent"] = reflect.TypeOf((*RollbackEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollbackFailure struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityName string `xml:"entityName"`
0000000000000000000000000000000000000000;;		EntityType string `xml:"entityType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RollbackFailure"] = reflect.TypeOf((*RollbackFailure)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollbackFailureFault RollbackFailure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RollbackFailureFault"] = reflect.TypeOf((*RollbackFailureFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RuleViolation struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Rule BaseClusterRuleInfo     `xml:"rule,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RuleViolation"] = reflect.TypeOf((*RuleViolation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RuleViolationFault RuleViolation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RuleViolationFault"] = reflect.TypeOf((*RuleViolationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunScheduledTask RunScheduledTaskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RunScheduledTask"] = reflect.TypeOf((*RunScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunScheduledTaskRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RunScheduledTaskRequestType"] = reflect.TypeOf((*RunScheduledTaskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunScheduledTaskResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunScriptAction struct {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Script string `xml:"script"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RunScriptAction"] = reflect.TypeOf((*RunScriptAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunVsanPhysicalDiskDiagnostics RunVsanPhysicalDiskDiagnosticsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RunVsanPhysicalDiskDiagnostics"] = reflect.TypeOf((*RunVsanPhysicalDiskDiagnostics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunVsanPhysicalDiskDiagnosticsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Disks []string               `xml:"disks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RunVsanPhysicalDiskDiagnosticsRequestType"] = reflect.TypeOf((*RunVsanPhysicalDiskDiagnosticsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RunVsanPhysicalDiskDiagnosticsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RuntimeFault struct {
0000000000000000000000000000000000000000;;		MethodFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RuntimeFault"] = reflect.TypeOf((*RuntimeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RuntimeFaultFault BaseRuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["RuntimeFaultFault"] = reflect.TypeOf((*RuntimeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SAMLTokenAuthentication struct {
0000000000000000000000000000000000000000;;		GuestAuthentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token    string `xml:"token"`
0000000000000000000000000000000000000000;;		Username string `xml:"username,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SAMLTokenAuthentication"] = reflect.TypeOf((*SAMLTokenAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSLDisabledFault struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSLDisabledFault"] = reflect.TypeOf((*SSLDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSLDisabledFaultFault SSLDisabledFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSLDisabledFaultFault"] = reflect.TypeOf((*SSLDisabledFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSLVerifyFault struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SelfSigned bool   `xml:"selfSigned"`
0000000000000000000000000000000000000000;;		Thumbprint string `xml:"thumbprint"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSLVerifyFault"] = reflect.TypeOf((*SSLVerifyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSLVerifyFaultFault SSLVerifyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSLVerifyFaultFault"] = reflect.TypeOf((*SSLVerifyFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSPIAuthentication struct {
0000000000000000000000000000000000000000;;		GuestAuthentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SspiToken string `xml:"sspiToken"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSPIAuthentication"] = reflect.TypeOf((*SSPIAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSPIChallenge struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Base64Token string `xml:"base64Token"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSPIChallenge"] = reflect.TypeOf((*SSPIChallenge)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSPIChallengeFault SSPIChallenge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SSPIChallengeFault"] = reflect.TypeOf((*SSPIChallengeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScanHostPatchRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Repository HostPatchManagerLocator `xml:"repository"`
0000000000000000000000000000000000000000;;		UpdateID   []string                `xml:"updateID,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScanHostPatchRequestType"] = reflect.TypeOf((*ScanHostPatchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScanHostPatchV2RequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference                     `xml:"_this"`
0000000000000000000000000000000000000000;;		MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
0000000000000000000000000000000000000000;;		BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
0000000000000000000000000000000000000000;;		Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScanHostPatchV2RequestType"] = reflect.TypeOf((*ScanHostPatchV2RequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScanHostPatchV2_Task ScanHostPatchV2RequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScanHostPatchV2_Task"] = reflect.TypeOf((*ScanHostPatchV2_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScanHostPatchV2_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScanHostPatch_Task ScanHostPatchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScanHostPatch_Task"] = reflect.TypeOf((*ScanHostPatch_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScanHostPatch_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduleReconcileDatastoreInventory ScheduleReconcileDatastoreInventoryRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduleReconcileDatastoreInventory"] = reflect.TypeOf((*ScheduleReconcileDatastoreInventory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduleReconcileDatastoreInventoryRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduleReconcileDatastoreInventoryRequestType"] = reflect.TypeOf((*ScheduleReconcileDatastoreInventoryRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduleReconcileDatastoreInventoryResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledHardwareUpgradeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UpgradePolicy                  string                `xml:"upgradePolicy,omitempty"`
0000000000000000000000000000000000000000;;		VersionKey                     string                `xml:"versionKey,omitempty"`
0000000000000000000000000000000000000000;;		ScheduledHardwareUpgradeStatus string                `xml:"scheduledHardwareUpgradeStatus,omitempty"`
0000000000000000000000000000000000000000;;		Fault                          *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledHardwareUpgradeInfo"] = reflect.TypeOf((*ScheduledHardwareUpgradeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskCompletedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskCompletedEvent"] = reflect.TypeOf((*ScheduledTaskCompletedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskCreatedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskCreatedEvent"] = reflect.TypeOf((*ScheduledTaskCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Action        []BaseTypeDescription    `xml:"action,typeattr"`
0000000000000000000000000000000000000000;;		SchedulerInfo []ScheduledTaskDetail    `xml:"schedulerInfo"`
0000000000000000000000000000000000000000;;		State         []BaseElementDescription `xml:"state,typeattr"`
0000000000000000000000000000000000000000;;		DayOfWeek     []BaseElementDescription `xml:"dayOfWeek,typeattr"`
0000000000000000000000000000000000000000;;		WeekOfMonth   []BaseElementDescription `xml:"weekOfMonth,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskDescription"] = reflect.TypeOf((*ScheduledTaskDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskDetail struct {
0000000000000000000000000000000000000000;;		TypeDescription
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Frequency string `xml:"frequency"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskDetail"] = reflect.TypeOf((*ScheduledTaskDetail)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskEmailCompletedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		To string `xml:"to"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskEmailCompletedEvent"] = reflect.TypeOf((*ScheduledTaskEmailCompletedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskEmailFailedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		To     string               `xml:"to"`
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskEmailFailedEvent"] = reflect.TypeOf((*ScheduledTaskEmailFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScheduledTask ScheduledTaskEventArgument `xml:"scheduledTask"`
0000000000000000000000000000000000000000;;		Entity        ManagedEntityEventArgument `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskEvent"] = reflect.TypeOf((*ScheduledTaskEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScheduledTask ManagedObjectReference `xml:"scheduledTask"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskEventArgument"] = reflect.TypeOf((*ScheduledTaskEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskFailedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskFailedEvent"] = reflect.TypeOf((*ScheduledTaskFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskInfo struct {
0000000000000000000000000000000000000000;;		ScheduledTaskSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScheduledTask    ManagedObjectReference  `xml:"scheduledTask"`
0000000000000000000000000000000000000000;;		Entity           ManagedObjectReference  `xml:"entity"`
0000000000000000000000000000000000000000;;		LastModifiedTime time.Time               `xml:"lastModifiedTime"`
0000000000000000000000000000000000000000;;		LastModifiedUser string                  `xml:"lastModifiedUser"`
0000000000000000000000000000000000000000;;		NextRunTime      *time.Time              `xml:"nextRunTime"`
0000000000000000000000000000000000000000;;		PrevRunTime      *time.Time              `xml:"prevRunTime"`
0000000000000000000000000000000000000000;;		State            TaskInfoState           `xml:"state"`
0000000000000000000000000000000000000000;;		Error            *LocalizedMethodFault   `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Result           AnyType                 `xml:"result,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Progress         int32                   `xml:"progress,omitempty"`
0000000000000000000000000000000000000000;;		ActiveTask       *ManagedObjectReference `xml:"activeTask,omitempty"`
0000000000000000000000000000000000000000;;		TaskObject       *ManagedObjectReference `xml:"taskObject,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskInfo"] = reflect.TypeOf((*ScheduledTaskInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskReconfiguredEvent"] = reflect.TypeOf((*ScheduledTaskReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskRemovedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskRemovedEvent"] = reflect.TypeOf((*ScheduledTaskRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name         string            `xml:"name"`
0000000000000000000000000000000000000000;;		Description  string            `xml:"description"`
0000000000000000000000000000000000000000;;		Enabled      bool              `xml:"enabled"`
0000000000000000000000000000000000000000;;		Scheduler    BaseTaskScheduler `xml:"scheduler,typeattr"`
0000000000000000000000000000000000000000;;		Action       BaseAction        `xml:"action,typeattr"`
0000000000000000000000000000000000000000;;		Notification string            `xml:"notification,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskSpec"] = reflect.TypeOf((*ScheduledTaskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskStartedEvent struct {
0000000000000000000000000000000000000000;;		ScheduledTaskEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskStartedEvent"] = reflect.TypeOf((*ScheduledTaskStartedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScsiLun struct {
0000000000000000000000000000000000000000;;		HostDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              string               `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Uuid             string               `xml:"uuid"`
0000000000000000000000000000000000000000;;		Descriptor       []ScsiLunDescriptor  `xml:"descriptor,omitempty"`
0000000000000000000000000000000000000000;;		CanonicalName    string               `xml:"canonicalName,omitempty"`
0000000000000000000000000000000000000000;;		DisplayName      string               `xml:"displayName,omitempty"`
0000000000000000000000000000000000000000;;		LunType          string               `xml:"lunType"`
0000000000000000000000000000000000000000;;		Vendor           string               `xml:"vendor,omitempty"`
0000000000000000000000000000000000000000;;		Model            string               `xml:"model,omitempty"`
0000000000000000000000000000000000000000;;		Revision         string               `xml:"revision,omitempty"`
0000000000000000000000000000000000000000;;		ScsiLevel        int32                `xml:"scsiLevel,omitempty"`
0000000000000000000000000000000000000000;;		SerialNumber     string               `xml:"serialNumber,omitempty"`
0000000000000000000000000000000000000000;;		DurableName      *ScsiLunDurableName  `xml:"durableName,omitempty"`
0000000000000000000000000000000000000000;;		AlternateName    []ScsiLunDurableName `xml:"alternateName,omitempty"`
0000000000000000000000000000000000000000;;		StandardInquiry  []byte               `xml:"standardInquiry,omitempty"`
0000000000000000000000000000000000000000;;		QueueDepth       int32                `xml:"queueDepth,omitempty"`
0000000000000000000000000000000000000000;;		OperationalState []string             `xml:"operationalState"`
0000000000000000000000000000000000000000;;		Capabilities     *ScsiLunCapabilities `xml:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		VStorageSupport  string               `xml:"vStorageSupport,omitempty"`
0000000000000000000000000000000000000000;;		ProtocolEndpoint *bool                `xml:"protocolEndpoint"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScsiLun"] = reflect.TypeOf((*ScsiLun)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScsiLunCapabilities struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UpdateDisplayNameSupported bool `xml:"updateDisplayNameSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScsiLunCapabilities"] = reflect.TypeOf((*ScsiLunCapabilities)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScsiLunDescriptor struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Quality string `xml:"quality"`
0000000000000000000000000000000000000000;;		Id      string `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScsiLunDescriptor"] = reflect.TypeOf((*ScsiLunDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScsiLunDurableName struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Namespace   string `xml:"namespace"`
0000000000000000000000000000000000000000;;		NamespaceId byte   `xml:"namespaceId"`
0000000000000000000000000000000000000000;;		Data        []byte `xml:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScsiLunDurableName"] = reflect.TypeOf((*ScsiLunDurableName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SeSparseVirtualDiskSpec struct {
0000000000000000000000000000000000000000;;		FileBackedVirtualDiskSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GrainSizeKb int32 `xml:"grainSizeKb,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SeSparseVirtualDiskSpec"] = reflect.TypeOf((*SeSparseVirtualDiskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		DatastorePath string                          `xml:"datastorePath"`
0000000000000000000000000000000000000000;;		SearchSpec    *HostDatastoreBrowserSearchSpec `xml:"searchSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SearchDatastoreRequestType"] = reflect.TypeOf((*SearchDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchDatastoreSubFoldersRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		DatastorePath string                          `xml:"datastorePath"`
0000000000000000000000000000000000000000;;		SearchSpec    *HostDatastoreBrowserSearchSpec `xml:"searchSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SearchDatastoreSubFoldersRequestType"] = reflect.TypeOf((*SearchDatastoreSubFoldersRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchDatastoreSubFolders_Task SearchDatastoreSubFoldersRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SearchDatastoreSubFolders_Task"] = reflect.TypeOf((*SearchDatastoreSubFolders_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchDatastoreSubFolders_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchDatastore_Task SearchDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SearchDatastore_Task"] = reflect.TypeOf((*SearchDatastore_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchDatastore_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmAlreadyDisabled struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid string `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmAlreadyDisabled"] = reflect.TypeOf((*SecondaryVmAlreadyDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmAlreadyDisabledFault SecondaryVmAlreadyDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmAlreadyDisabledFault"] = reflect.TypeOf((*SecondaryVmAlreadyDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmAlreadyEnabled struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid string `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmAlreadyEnabled"] = reflect.TypeOf((*SecondaryVmAlreadyEnabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmAlreadyEnabledFault SecondaryVmAlreadyEnabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmAlreadyEnabledFault"] = reflect.TypeOf((*SecondaryVmAlreadyEnabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmAlreadyRegistered struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid string `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmAlreadyRegistered"] = reflect.TypeOf((*SecondaryVmAlreadyRegistered)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmAlreadyRegisteredFault SecondaryVmAlreadyRegistered
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmAlreadyRegisteredFault"] = reflect.TypeOf((*SecondaryVmAlreadyRegisteredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmNotRegistered struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid string `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmNotRegistered"] = reflect.TypeOf((*SecondaryVmNotRegistered)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryVmNotRegisteredFault SecondaryVmNotRegistered
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecondaryVmNotRegisteredFault"] = reflect.TypeOf((*SecondaryVmNotRegisteredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecurityError struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecurityError"] = reflect.TypeOf((*SecurityError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecurityErrorFault BaseSecurityError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecurityErrorFault"] = reflect.TypeOf((*SecurityErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecurityProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Permission []PermissionProfile `xml:"permission,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SecurityProfile"] = reflect.TypeOf((*SecurityProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectActivePartition SelectActivePartitionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectActivePartition"] = reflect.TypeOf((*SelectActivePartition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectActivePartitionRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Partition *HostScsiDiskPartition `xml:"partition,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectActivePartitionRequestType"] = reflect.TypeOf((*SelectActivePartitionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectActivePartitionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectVnic SelectVnicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectVnic"] = reflect.TypeOf((*SelectVnic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectVnicForNicType SelectVnicForNicTypeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectVnicForNicType"] = reflect.TypeOf((*SelectVnicForNicType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectVnicForNicTypeRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		NicType string                 `xml:"nicType"`
0000000000000000000000000000000000000000;;		Device  string                 `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectVnicForNicTypeRequestType"] = reflect.TypeOf((*SelectVnicForNicTypeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectVnicForNicTypeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectVnicRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device string                 `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectVnicRequestType"] = reflect.TypeOf((*SelectVnicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectVnicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectionSet struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectionSet"] = reflect.TypeOf((*SelectionSet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SelectionSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SelectionSpec"] = reflect.TypeOf((*SelectionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendEmailAction struct {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ToList  string `xml:"toList"`
0000000000000000000000000000000000000000;;		CcList  string `xml:"ccList"`
0000000000000000000000000000000000000000;;		Subject string `xml:"subject"`
0000000000000000000000000000000000000000;;		Body    string `xml:"body"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SendEmailAction"] = reflect.TypeOf((*SendEmailAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendNMI SendNMIRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SendNMI"] = reflect.TypeOf((*SendNMI)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendNMIRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SendNMIRequestType"] = reflect.TypeOf((*SendNMIRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendNMIResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendSNMPAction struct {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SendSNMPAction"] = reflect.TypeOf((*SendSNMPAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendTestNotification SendTestNotificationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SendTestNotification"] = reflect.TypeOf((*SendTestNotification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendTestNotificationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SendTestNotificationRequestType"] = reflect.TypeOf((*SendTestNotificationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SendTestNotificationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServerLicenseExpiredEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Product string `xml:"product"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServerLicenseExpiredEvent"] = reflect.TypeOf((*ServerLicenseExpiredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServerStartedSessionEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServerStartedSessionEvent"] = reflect.TypeOf((*ServerStartedSessionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceConsolePortGroupProfile struct {
0000000000000000000000000000000000000000;;		PortGroupProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpConfig IpAddressProfile `xml:"ipConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceConsolePortGroupProfile"] = reflect.TypeOf((*ServiceConsolePortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceConsoleReservationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceConsoleReservedCfg int64 `xml:"serviceConsoleReservedCfg"`
0000000000000000000000000000000000000000;;		ServiceConsoleReserved    int64 `xml:"serviceConsoleReserved"`
0000000000000000000000000000000000000000;;		Unreserved                int64 `xml:"unreserved"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceConsoleReservationInfo"] = reflect.TypeOf((*ServiceConsoleReservationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceContent struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RootFolder                  ManagedObjectReference  `xml:"rootFolder"`
0000000000000000000000000000000000000000;;		PropertyCollector           ManagedObjectReference  `xml:"propertyCollector"`
0000000000000000000000000000000000000000;;		ViewManager                 *ManagedObjectReference `xml:"viewManager,omitempty"`
0000000000000000000000000000000000000000;;		About                       AboutInfo               `xml:"about"`
0000000000000000000000000000000000000000;;		Setting                     *ManagedObjectReference `xml:"setting,omitempty"`
0000000000000000000000000000000000000000;;		UserDirectory               *ManagedObjectReference `xml:"userDirectory,omitempty"`
0000000000000000000000000000000000000000;;		SessionManager              *ManagedObjectReference `xml:"sessionManager,omitempty"`
0000000000000000000000000000000000000000;;		AuthorizationManager        *ManagedObjectReference `xml:"authorizationManager,omitempty"`
0000000000000000000000000000000000000000;;		ServiceManager              *ManagedObjectReference `xml:"serviceManager,omitempty"`
0000000000000000000000000000000000000000;;		PerfManager                 *ManagedObjectReference `xml:"perfManager,omitempty"`
0000000000000000000000000000000000000000;;		ScheduledTaskManager        *ManagedObjectReference `xml:"scheduledTaskManager,omitempty"`
0000000000000000000000000000000000000000;;		AlarmManager                *ManagedObjectReference `xml:"alarmManager,omitempty"`
0000000000000000000000000000000000000000;;		EventManager                *ManagedObjectReference `xml:"eventManager,omitempty"`
0000000000000000000000000000000000000000;;		TaskManager                 *ManagedObjectReference `xml:"taskManager,omitempty"`
0000000000000000000000000000000000000000;;		ExtensionManager            *ManagedObjectReference `xml:"extensionManager,omitempty"`
0000000000000000000000000000000000000000;;		CustomizationSpecManager    *ManagedObjectReference `xml:"customizationSpecManager,omitempty"`
0000000000000000000000000000000000000000;;		CustomFieldsManager         *ManagedObjectReference `xml:"customFieldsManager,omitempty"`
0000000000000000000000000000000000000000;;		AccountManager              *ManagedObjectReference `xml:"accountManager,omitempty"`
0000000000000000000000000000000000000000;;		DiagnosticManager           *ManagedObjectReference `xml:"diagnosticManager,omitempty"`
0000000000000000000000000000000000000000;;		LicenseManager              *ManagedObjectReference `xml:"licenseManager,omitempty"`
0000000000000000000000000000000000000000;;		SearchIndex                 *ManagedObjectReference `xml:"searchIndex,omitempty"`
0000000000000000000000000000000000000000;;		FileManager                 *ManagedObjectReference `xml:"fileManager,omitempty"`
0000000000000000000000000000000000000000;;		DatastoreNamespaceManager   *ManagedObjectReference `xml:"datastoreNamespaceManager,omitempty"`
0000000000000000000000000000000000000000;;		VirtualDiskManager          *ManagedObjectReference `xml:"virtualDiskManager,omitempty"`
0000000000000000000000000000000000000000;;		VirtualizationManager       *ManagedObjectReference `xml:"virtualizationManager,omitempty"`
0000000000000000000000000000000000000000;;		SnmpSystem                  *ManagedObjectReference `xml:"snmpSystem,omitempty"`
0000000000000000000000000000000000000000;;		VmProvisioningChecker       *ManagedObjectReference `xml:"vmProvisioningChecker,omitempty"`
0000000000000000000000000000000000000000;;		VmCompatibilityChecker      *ManagedObjectReference `xml:"vmCompatibilityChecker,omitempty"`
0000000000000000000000000000000000000000;;		OvfManager                  *ManagedObjectReference `xml:"ovfManager,omitempty"`
0000000000000000000000000000000000000000;;		IpPoolManager               *ManagedObjectReference `xml:"ipPoolManager,omitempty"`
0000000000000000000000000000000000000000;;		DvSwitchManager             *ManagedObjectReference `xml:"dvSwitchManager,omitempty"`
0000000000000000000000000000000000000000;;		HostProfileManager          *ManagedObjectReference `xml:"hostProfileManager,omitempty"`
0000000000000000000000000000000000000000;;		ClusterProfileManager       *ManagedObjectReference `xml:"clusterProfileManager,omitempty"`
0000000000000000000000000000000000000000;;		ComplianceManager           *ManagedObjectReference `xml:"complianceManager,omitempty"`
0000000000000000000000000000000000000000;;		LocalizationManager         *ManagedObjectReference `xml:"localizationManager,omitempty"`
0000000000000000000000000000000000000000;;		StorageResourceManager      *ManagedObjectReference `xml:"storageResourceManager,omitempty"`
0000000000000000000000000000000000000000;;		GuestOperationsManager      *ManagedObjectReference `xml:"guestOperationsManager,omitempty"`
0000000000000000000000000000000000000000;;		OverheadMemoryManager       *ManagedObjectReference `xml:"overheadMemoryManager,omitempty"`
0000000000000000000000000000000000000000;;		CertificateManager          *ManagedObjectReference `xml:"certificateManager,omitempty"`
0000000000000000000000000000000000000000;;		IoFilterManager             *ManagedObjectReference `xml:"ioFilterManager,omitempty"`
0000000000000000000000000000000000000000;;		VStorageObjectManager       *ManagedObjectReference `xml:"vStorageObjectManager,omitempty"`
0000000000000000000000000000000000000000;;		HostSpecManager             *ManagedObjectReference `xml:"hostSpecManager,omitempty"`
0000000000000000000000000000000000000000;;		CryptoManager               *ManagedObjectReference `xml:"cryptoManager,omitempty"`
0000000000000000000000000000000000000000;;		HealthUpdateManager         *ManagedObjectReference `xml:"healthUpdateManager,omitempty"`
0000000000000000000000000000000000000000;;		FailoverClusterConfigurator *ManagedObjectReference `xml:"failoverClusterConfigurator,omitempty"`
0000000000000000000000000000000000000000;;		FailoverClusterManager      *ManagedObjectReference `xml:"failoverClusterManager,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceContent"] = reflect.TypeOf((*ServiceContent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLocator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid  string                       `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;		Url           string                       `xml:"url"`
0000000000000000000000000000000000000000;;		Credential    BaseServiceLocatorCredential `xml:"credential,typeattr"`
0000000000000000000000000000000000000000;;		SslThumbprint string                       `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceLocator"] = reflect.TypeOf((*ServiceLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLocatorCredential struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceLocatorCredential"] = reflect.TypeOf((*ServiceLocatorCredential)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLocatorNamePassword struct {
0000000000000000000000000000000000000000;;		ServiceLocatorCredential
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Username string `xml:"username"`
0000000000000000000000000000000000000000;;		Password string `xml:"password"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceLocatorNamePassword"] = reflect.TypeOf((*ServiceLocatorNamePassword)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLocatorSAMLCredential struct {
0000000000000000000000000000000000000000;;		ServiceLocatorCredential
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token string `xml:"token,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceLocatorSAMLCredential"] = reflect.TypeOf((*ServiceLocatorSAMLCredential)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceManagerServiceInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceName string                 `xml:"serviceName"`
0000000000000000000000000000000000000000;;		Location    []string               `xml:"location,omitempty"`
0000000000000000000000000000000000000000;;		Service     ManagedObjectReference `xml:"service"`
0000000000000000000000000000000000000000;;		Description string                 `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceManagerServiceInfo"] = reflect.TypeOf((*ServiceManagerServiceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceProfile"] = reflect.TypeOf((*ServiceProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionEvent"] = reflect.TypeOf((*SessionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionIsActive SessionIsActiveRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionIsActive"] = reflect.TypeOf((*SessionIsActive)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionIsActiveRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SessionID string                 `xml:"sessionID"`
0000000000000000000000000000000000000000;;		UserName  string                 `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionIsActiveRequestType"] = reflect.TypeOf((*SessionIsActiveRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionIsActiveResponse struct {
0000000000000000000000000000000000000000;;		Returnval bool `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionManagerGenericServiceTicket struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id            string `xml:"id"`
0000000000000000000000000000000000000000;;		HostName      string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprint string `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionManagerGenericServiceTicket"] = reflect.TypeOf((*SessionManagerGenericServiceTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionManagerHttpServiceRequestSpec struct {
0000000000000000000000000000000000000000;;		SessionManagerServiceRequestSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Method string `xml:"method,omitempty"`
0000000000000000000000000000000000000000;;		Url    string `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionManagerHttpServiceRequestSpec"] = reflect.TypeOf((*SessionManagerHttpServiceRequestSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionManagerLocalTicket struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserName         string `xml:"userName"`
0000000000000000000000000000000000000000;;		PasswordFilePath string `xml:"passwordFilePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionManagerLocalTicket"] = reflect.TypeOf((*SessionManagerLocalTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionManagerServiceRequestSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionManagerServiceRequestSpec"] = reflect.TypeOf((*SessionManagerServiceRequestSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionManagerVmomiServiceRequestSpec struct {
0000000000000000000000000000000000000000;;		SessionManagerServiceRequestSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Method string `xml:"method"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionManagerVmomiServiceRequestSpec"] = reflect.TypeOf((*SessionManagerVmomiServiceRequestSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionTerminatedEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SessionId          string `xml:"sessionId"`
0000000000000000000000000000000000000000;;		TerminatedUsername string `xml:"terminatedUsername"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionTerminatedEvent"] = reflect.TypeOf((*SessionTerminatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetCollectorPageSize SetCollectorPageSizeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetCollectorPageSize"] = reflect.TypeOf((*SetCollectorPageSize)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetCollectorPageSizeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		MaxCount int32                  `xml:"maxCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetCollectorPageSizeRequestType"] = reflect.TypeOf((*SetCollectorPageSizeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetCollectorPageSizeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetDisplayTopology SetDisplayTopologyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetDisplayTopology"] = reflect.TypeOf((*SetDisplayTopology)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetDisplayTopologyRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		Displays []VirtualMachineDisplayTopology `xml:"displays"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetDisplayTopologyRequestType"] = reflect.TypeOf((*SetDisplayTopologyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetDisplayTopologyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetEntityPermissions SetEntityPermissionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetEntityPermissions"] = reflect.TypeOf((*SetEntityPermissions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetEntityPermissionsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Permission []Permission           `xml:"permission,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetEntityPermissionsRequestType"] = reflect.TypeOf((*SetEntityPermissionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetEntityPermissionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetExtensionCertificate SetExtensionCertificateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetExtensionCertificate"] = reflect.TypeOf((*SetExtensionCertificate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetExtensionCertificateRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey   string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		CertificatePem string                 `xml:"certificatePem,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetExtensionCertificateRequestType"] = reflect.TypeOf((*SetExtensionCertificateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetExtensionCertificateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetField SetFieldRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetField"] = reflect.TypeOf((*SetField)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetFieldRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Key    int32                  `xml:"key"`
0000000000000000000000000000000000000000;;		Value  string                 `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetFieldRequestType"] = reflect.TypeOf((*SetFieldRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetFieldResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLicenseEdition SetLicenseEditionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetLicenseEdition"] = reflect.TypeOf((*SetLicenseEdition)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLicenseEditionRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host       *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		FeatureKey string                  `xml:"featureKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetLicenseEditionRequestType"] = reflect.TypeOf((*SetLicenseEditionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLicenseEditionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLocale SetLocaleRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetLocale"] = reflect.TypeOf((*SetLocale)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLocaleRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Locale string                 `xml:"locale"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetLocaleRequestType"] = reflect.TypeOf((*SetLocaleRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLocaleResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetMultipathLunPolicy SetMultipathLunPolicyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetMultipathLunPolicy"] = reflect.TypeOf((*SetMultipathLunPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetMultipathLunPolicyRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference                 `xml:"_this"`
0000000000000000000000000000000000000000;;		LunId  string                                 `xml:"lunId"`
0000000000000000000000000000000000000000;;		Policy BaseHostMultipathInfoLogicalUnitPolicy `xml:"policy,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetMultipathLunPolicyRequestType"] = reflect.TypeOf((*SetMultipathLunPolicyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetMultipathLunPolicyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetNFSUser SetNFSUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetNFSUser"] = reflect.TypeOf((*SetNFSUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetNFSUserRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		User     string                 `xml:"user"`
0000000000000000000000000000000000000000;;		Password string                 `xml:"password"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetNFSUserRequestType"] = reflect.TypeOf((*SetNFSUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetNFSUserResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetPublicKey SetPublicKeyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetPublicKey"] = reflect.TypeOf((*SetPublicKey)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetPublicKeyRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		PublicKey    string                 `xml:"publicKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetPublicKeyRequestType"] = reflect.TypeOf((*SetPublicKeyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetPublicKeyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetRegistryValueInGuest SetRegistryValueInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetRegistryValueInGuest"] = reflect.TypeOf((*SetRegistryValueInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetRegistryValueInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm    ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth  BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Value GuestRegValueSpec       `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetRegistryValueInGuestRequestType"] = reflect.TypeOf((*SetRegistryValueInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetRegistryValueInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetScreenResolution SetScreenResolutionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetScreenResolution"] = reflect.TypeOf((*SetScreenResolution)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetScreenResolutionRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Width  int32                  `xml:"width"`
0000000000000000000000000000000000000000;;		Height int32                  `xml:"height"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetScreenResolutionRequestType"] = reflect.TypeOf((*SetScreenResolutionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetScreenResolutionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetTaskDescription SetTaskDescriptionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetTaskDescription"] = reflect.TypeOf((*SetTaskDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetTaskDescriptionRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Description LocalizableMessage     `xml:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetTaskDescriptionRequestType"] = reflect.TypeOf((*SetTaskDescriptionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetTaskDescriptionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetTaskState SetTaskStateRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetTaskState"] = reflect.TypeOf((*SetTaskState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetTaskStateRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		State  TaskInfoState          `xml:"state"`
0000000000000000000000000000000000000000;;		Result AnyType                `xml:"result,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Fault  *LocalizedMethodFault  `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetTaskStateRequestType"] = reflect.TypeOf((*SetTaskStateRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetTaskStateResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetVirtualDiskUuid SetVirtualDiskUuidRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetVirtualDiskUuid"] = reflect.TypeOf((*SetVirtualDiskUuid)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetVirtualDiskUuidRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Uuid       string                  `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SetVirtualDiskUuidRequestType"] = reflect.TypeOf((*SetVirtualDiskUuidRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetVirtualDiskUuidResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SharedBusControllerNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SharedBusControllerNotSupported"] = reflect.TypeOf((*SharedBusControllerNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SharedBusControllerNotSupportedFault SharedBusControllerNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SharedBusControllerNotSupportedFault"] = reflect.TypeOf((*SharedBusControllerNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SharesInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Shares int32       `xml:"shares"`
0000000000000000000000000000000000000000;;		Level  SharesLevel `xml:"level"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SharesInfo"] = reflect.TypeOf((*SharesInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SharesOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SharesOption IntOption   `xml:"sharesOption"`
0000000000000000000000000000000000000000;;		DefaultLevel SharesLevel `xml:"defaultLevel"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SharesOption"] = reflect.TypeOf((*SharesOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShrinkDiskFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskId int32 `xml:"diskId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShrinkDiskFault"] = reflect.TypeOf((*ShrinkDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShrinkDiskFaultFault ShrinkDiskFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShrinkDiskFaultFault"] = reflect.TypeOf((*ShrinkDiskFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShrinkVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		Copy       *bool                   `xml:"copy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShrinkVirtualDiskRequestType"] = reflect.TypeOf((*ShrinkVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShrinkVirtualDisk_Task ShrinkVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShrinkVirtualDisk_Task"] = reflect.TypeOf((*ShrinkVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShrinkVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShutdownGuest ShutdownGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShutdownGuest"] = reflect.TypeOf((*ShutdownGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShutdownGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShutdownGuestRequestType"] = reflect.TypeOf((*ShutdownGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShutdownGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShutdownHostRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Force bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShutdownHostRequestType"] = reflect.TypeOf((*ShutdownHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShutdownHost_Task ShutdownHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ShutdownHost_Task"] = reflect.TypeOf((*ShutdownHost_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShutdownHost_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SingleIp struct {
0000000000000000000000000000000000000000;;		IpAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address string `xml:"address"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SingleIp"] = reflect.TypeOf((*SingleIp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SingleMac struct {
0000000000000000000000000000000000000000;;		MacAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address string `xml:"address"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SingleMac"] = reflect.TypeOf((*SingleMac)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotCloneNotSupported struct {
0000000000000000000000000000000000000000;;		SnapshotCopyNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotCloneNotSupported"] = reflect.TypeOf((*SnapshotCloneNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotCloneNotSupportedFault SnapshotCloneNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotCloneNotSupportedFault"] = reflect.TypeOf((*SnapshotCloneNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotCopyNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotCopyNotSupported"] = reflect.TypeOf((*SnapshotCopyNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotCopyNotSupportedFault BaseSnapshotCopyNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotCopyNotSupportedFault"] = reflect.TypeOf((*SnapshotCopyNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotDisabled struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotDisabled"] = reflect.TypeOf((*SnapshotDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotDisabledFault SnapshotDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotDisabledFault"] = reflect.TypeOf((*SnapshotDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotFault"] = reflect.TypeOf((*SnapshotFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotFaultFault BaseSnapshotFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotFaultFault"] = reflect.TypeOf((*SnapshotFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotIncompatibleDeviceInVm struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotIncompatibleDeviceInVm"] = reflect.TypeOf((*SnapshotIncompatibleDeviceInVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotIncompatibleDeviceInVmFault SnapshotIncompatibleDeviceInVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotIncompatibleDeviceInVmFault"] = reflect.TypeOf((*SnapshotIncompatibleDeviceInVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotLocked struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotLocked"] = reflect.TypeOf((*SnapshotLocked)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotLockedFault SnapshotLocked
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotLockedFault"] = reflect.TypeOf((*SnapshotLockedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotMoveFromNonHomeNotSupported struct {
0000000000000000000000000000000000000000;;		SnapshotCopyNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotMoveFromNonHomeNotSupported"] = reflect.TypeOf((*SnapshotMoveFromNonHomeNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotMoveFromNonHomeNotSupportedFault SnapshotMoveFromNonHomeNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotMoveFromNonHomeNotSupportedFault"] = reflect.TypeOf((*SnapshotMoveFromNonHomeNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotMoveNotSupported struct {
0000000000000000000000000000000000000000;;		SnapshotCopyNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotMoveNotSupported"] = reflect.TypeOf((*SnapshotMoveNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotMoveNotSupportedFault SnapshotMoveNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotMoveNotSupportedFault"] = reflect.TypeOf((*SnapshotMoveNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotMoveToNonHomeNotSupported struct {
0000000000000000000000000000000000000000;;		SnapshotCopyNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotMoveToNonHomeNotSupported"] = reflect.TypeOf((*SnapshotMoveToNonHomeNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotMoveToNonHomeNotSupportedFault SnapshotMoveToNonHomeNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotMoveToNonHomeNotSupportedFault"] = reflect.TypeOf((*SnapshotMoveToNonHomeNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotNoChange struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotNoChange"] = reflect.TypeOf((*SnapshotNoChange)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotNoChangeFault SnapshotNoChange
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotNoChangeFault"] = reflect.TypeOf((*SnapshotNoChangeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotRevertIssue struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SnapshotName string      `xml:"snapshotName,omitempty"`
0000000000000000000000000000000000000000;;		Event        []BaseEvent `xml:"event,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Errors       bool        `xml:"errors"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotRevertIssue"] = reflect.TypeOf((*SnapshotRevertIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotRevertIssueFault SnapshotRevertIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SnapshotRevertIssueFault"] = reflect.TypeOf((*SnapshotRevertIssueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SoftRuleVioCorrectionDisallowed struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SoftRuleVioCorrectionDisallowed"] = reflect.TypeOf((*SoftRuleVioCorrectionDisallowed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SoftRuleVioCorrectionDisallowedFault SoftRuleVioCorrectionDisallowed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SoftRuleVioCorrectionDisallowedFault"] = reflect.TypeOf((*SoftRuleVioCorrectionDisallowedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SoftRuleVioCorrectionImpact struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName string `xml:"vmName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SoftRuleVioCorrectionImpact"] = reflect.TypeOf((*SoftRuleVioCorrectionImpact)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SoftRuleVioCorrectionImpactFault SoftRuleVioCorrectionImpact
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SoftRuleVioCorrectionImpactFault"] = reflect.TypeOf((*SoftRuleVioCorrectionImpactFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SoftwarePackage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name                      string                    `xml:"name"`
0000000000000000000000000000000000000000;;		Version                   string                    `xml:"version"`
0000000000000000000000000000000000000000;;		Type                      string                    `xml:"type"`
0000000000000000000000000000000000000000;;		Vendor                    string                    `xml:"vendor"`
0000000000000000000000000000000000000000;;		AcceptanceLevel           string                    `xml:"acceptanceLevel"`
0000000000000000000000000000000000000000;;		Summary                   string                    `xml:"summary"`
0000000000000000000000000000000000000000;;		Description               string                    `xml:"description"`
0000000000000000000000000000000000000000;;		ReferenceURL              []string                  `xml:"referenceURL,omitempty"`
0000000000000000000000000000000000000000;;		CreationDate              *time.Time                `xml:"creationDate"`
0000000000000000000000000000000000000000;;		Depends                   []Relation                `xml:"depends,omitempty"`
0000000000000000000000000000000000000000;;		Conflicts                 []Relation                `xml:"conflicts,omitempty"`
0000000000000000000000000000000000000000;;		Replaces                  []Relation                `xml:"replaces,omitempty"`
0000000000000000000000000000000000000000;;		Provides                  []string                  `xml:"provides,omitempty"`
0000000000000000000000000000000000000000;;		MaintenanceModeRequired   *bool                     `xml:"maintenanceModeRequired"`
0000000000000000000000000000000000000000;;		HardwarePlatformsRequired []string                  `xml:"hardwarePlatformsRequired,omitempty"`
0000000000000000000000000000000000000000;;		Capability                SoftwarePackageCapability `xml:"capability"`
0000000000000000000000000000000000000000;;		Tag                       []string                  `xml:"tag,omitempty"`
0000000000000000000000000000000000000000;;		Payload                   []string                  `xml:"payload,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SoftwarePackage"] = reflect.TypeOf((*SoftwarePackage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SoftwarePackageCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LiveInstallAllowed *bool `xml:"liveInstallAllowed"`
0000000000000000000000000000000000000000;;		LiveRemoveAllowed  *bool `xml:"liveRemoveAllowed"`
0000000000000000000000000000000000000000;;		StatelessReady     *bool `xml:"statelessReady"`
0000000000000000000000000000000000000000;;		Overlay            *bool `xml:"overlay"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SoftwarePackageCapability"] = reflect.TypeOf((*SoftwarePackageCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SourceNodeSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagementVc ServiceLocator         `xml:"managementVc"`
0000000000000000000000000000000000000000;;		ActiveVc     ManagedObjectReference `xml:"activeVc"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SourceNodeSpec"] = reflect.TypeOf((*SourceNodeSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SsdDiskNotAvailable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DevicePath string `xml:"devicePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SsdDiskNotAvailable"] = reflect.TypeOf((*SsdDiskNotAvailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SsdDiskNotAvailableFault SsdDiskNotAvailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SsdDiskNotAvailableFault"] = reflect.TypeOf((*SsdDiskNotAvailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StageHostPatchRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference                     `xml:"_this"`
0000000000000000000000000000000000000000;;		MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
0000000000000000000000000000000000000000;;		BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
0000000000000000000000000000000000000000;;		VibUrls    []string                                   `xml:"vibUrls,omitempty"`
0000000000000000000000000000000000000000;;		Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StageHostPatchRequestType"] = reflect.TypeOf((*StageHostPatchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StageHostPatch_Task StageHostPatchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StageHostPatch_Task"] = reflect.TypeOf((*StageHostPatch_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StageHostPatch_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StampAllRulesWithUuidRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StampAllRulesWithUuidRequestType"] = reflect.TypeOf((*StampAllRulesWithUuidRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StampAllRulesWithUuid_Task StampAllRulesWithUuidRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StampAllRulesWithUuid_Task"] = reflect.TypeOf((*StampAllRulesWithUuid_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StampAllRulesWithUuid_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StandbyGuest StandbyGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StandbyGuest"] = reflect.TypeOf((*StandbyGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StandbyGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StandbyGuestRequestType"] = reflect.TypeOf((*StandbyGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StandbyGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartProgramInGuest StartProgramInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartProgramInGuest"] = reflect.TypeOf((*StartProgramInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartProgramInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Spec BaseGuestProgramSpec    `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartProgramInGuestRequestType"] = reflect.TypeOf((*StartProgramInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartProgramInGuestResponse struct {
0000000000000000000000000000000000000000;;		Returnval int64 `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartRecordingRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name        string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Description string                 `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartRecordingRequestType"] = reflect.TypeOf((*StartRecordingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartRecording_Task StartRecordingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartRecording_Task"] = reflect.TypeOf((*StartRecording_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartRecording_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartReplayingRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ReplaySnapshot ManagedObjectReference `xml:"replaySnapshot"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartReplayingRequestType"] = reflect.TypeOf((*StartReplayingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartReplaying_Task StartReplayingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartReplaying_Task"] = reflect.TypeOf((*StartReplaying_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartReplaying_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartService StartServiceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartService"] = reflect.TypeOf((*StartService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartServiceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StartServiceRequestType"] = reflect.TypeOf((*StartServiceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartServiceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StateAlarmExpression struct {
0000000000000000000000000000000000000000;;		AlarmExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operator  StateAlarmOperator `xml:"operator"`
0000000000000000000000000000000000000000;;		Type      string             `xml:"type"`
0000000000000000000000000000000000000000;;		StatePath string             `xml:"statePath"`
0000000000000000000000000000000000000000;;		Yellow    string             `xml:"yellow,omitempty"`
0000000000000000000000000000000000000000;;		Red       string             `xml:"red,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StateAlarmExpression"] = reflect.TypeOf((*StateAlarmExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StaticRouteProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StaticRouteProfile"] = reflect.TypeOf((*StaticRouteProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopRecordingRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StopRecordingRequestType"] = reflect.TypeOf((*StopRecordingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopRecording_Task StopRecordingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StopRecording_Task"] = reflect.TypeOf((*StopRecording_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopRecording_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopReplayingRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StopReplayingRequestType"] = reflect.TypeOf((*StopReplayingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopReplaying_Task StopReplayingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StopReplaying_Task"] = reflect.TypeOf((*StopReplaying_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopReplaying_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopService StopServiceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StopService"] = reflect.TypeOf((*StopService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopServiceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StopServiceRequestType"] = reflect.TypeOf((*StopServiceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopServiceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsAutomationConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SpaceLoadBalanceAutomationMode  string `xml:"spaceLoadBalanceAutomationMode,omitempty"`
0000000000000000000000000000000000000000;;		IoLoadBalanceAutomationMode     string `xml:"ioLoadBalanceAutomationMode,omitempty"`
0000000000000000000000000000000000000000;;		RuleEnforcementAutomationMode   string `xml:"ruleEnforcementAutomationMode,omitempty"`
0000000000000000000000000000000000000000;;		PolicyEnforcementAutomationMode string `xml:"policyEnforcementAutomationMode,omitempty"`
0000000000000000000000000000000000000000;;		VmEvacuationAutomationMode      string `xml:"vmEvacuationAutomationMode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsAutomationConfig"] = reflect.TypeOf((*StorageDrsAutomationConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveDiskInMultiWriterMode struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveDiskInMultiWriterMode"] = reflect.TypeOf((*StorageDrsCannotMoveDiskInMultiWriterMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveDiskInMultiWriterModeFault StorageDrsCannotMoveDiskInMultiWriterMode
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveDiskInMultiWriterModeFault"] = reflect.TypeOf((*StorageDrsCannotMoveDiskInMultiWriterModeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveFTVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveFTVm"] = reflect.TypeOf((*StorageDrsCannotMoveFTVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveFTVmFault StorageDrsCannotMoveFTVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveFTVmFault"] = reflect.TypeOf((*StorageDrsCannotMoveFTVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveIndependentDisk struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveIndependentDisk"] = reflect.TypeOf((*StorageDrsCannotMoveIndependentDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveIndependentDiskFault StorageDrsCannotMoveIndependentDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveIndependentDiskFault"] = reflect.TypeOf((*StorageDrsCannotMoveIndependentDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveManuallyPlacedSwapFile struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveManuallyPlacedSwapFile"] = reflect.TypeOf((*StorageDrsCannotMoveManuallyPlacedSwapFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveManuallyPlacedSwapFileFault StorageDrsCannotMoveManuallyPlacedSwapFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveManuallyPlacedSwapFileFault"] = reflect.TypeOf((*StorageDrsCannotMoveManuallyPlacedSwapFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveManuallyPlacedVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveManuallyPlacedVm"] = reflect.TypeOf((*StorageDrsCannotMoveManuallyPlacedVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveManuallyPlacedVmFault StorageDrsCannotMoveManuallyPlacedVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveManuallyPlacedVmFault"] = reflect.TypeOf((*StorageDrsCannotMoveManuallyPlacedVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveSharedDisk struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveSharedDisk"] = reflect.TypeOf((*StorageDrsCannotMoveSharedDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveSharedDiskFault StorageDrsCannotMoveSharedDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveSharedDiskFault"] = reflect.TypeOf((*StorageDrsCannotMoveSharedDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveTemplate struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveTemplate"] = reflect.TypeOf((*StorageDrsCannotMoveTemplate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveTemplateFault StorageDrsCannotMoveTemplate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveTemplateFault"] = reflect.TypeOf((*StorageDrsCannotMoveTemplateFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveVmInUserFolder struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveVmInUserFolder"] = reflect.TypeOf((*StorageDrsCannotMoveVmInUserFolder)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveVmInUserFolderFault StorageDrsCannotMoveVmInUserFolder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveVmInUserFolderFault"] = reflect.TypeOf((*StorageDrsCannotMoveVmInUserFolderFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveVmWithMountedCDROM struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveVmWithMountedCDROM"] = reflect.TypeOf((*StorageDrsCannotMoveVmWithMountedCDROM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveVmWithMountedCDROMFault StorageDrsCannotMoveVmWithMountedCDROM
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveVmWithMountedCDROMFault"] = reflect.TypeOf((*StorageDrsCannotMoveVmWithMountedCDROMFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveVmWithNoFilesInLayout struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveVmWithNoFilesInLayout"] = reflect.TypeOf((*StorageDrsCannotMoveVmWithNoFilesInLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsCannotMoveVmWithNoFilesInLayoutFault StorageDrsCannotMoveVmWithNoFilesInLayout
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsCannotMoveVmWithNoFilesInLayoutFault"] = reflect.TypeOf((*StorageDrsCannotMoveVmWithNoFilesInLayoutFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PodConfig StorageDrsPodConfigInfo  `xml:"podConfig"`
0000000000000000000000000000000000000000;;		VmConfig  []StorageDrsVmConfigInfo `xml:"vmConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsConfigInfo"] = reflect.TypeOf((*StorageDrsConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PodConfigSpec *StorageDrsPodConfigSpec `xml:"podConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		VmConfigSpec  []StorageDrsVmConfigSpec `xml:"vmConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsConfigSpec"] = reflect.TypeOf((*StorageDrsConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsDatacentersCannotShareDatastore struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsDatacentersCannotShareDatastore"] = reflect.TypeOf((*StorageDrsDatacentersCannotShareDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsDatacentersCannotShareDatastoreFault StorageDrsDatacentersCannotShareDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsDatacentersCannotShareDatastoreFault"] = reflect.TypeOf((*StorageDrsDatacentersCannotShareDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsDisabledOnVm struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsDisabledOnVm"] = reflect.TypeOf((*StorageDrsDisabledOnVm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsDisabledOnVmFault StorageDrsDisabledOnVm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsDisabledOnVmFault"] = reflect.TypeOf((*StorageDrsDisabledOnVmFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsHbrDiskNotMovable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NonMovableDiskIds string `xml:"nonMovableDiskIds"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsHbrDiskNotMovable"] = reflect.TypeOf((*StorageDrsHbrDiskNotMovable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsHbrDiskNotMovableFault StorageDrsHbrDiskNotMovable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsHbrDiskNotMovableFault"] = reflect.TypeOf((*StorageDrsHbrDiskNotMovableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsHmsMoveInProgress struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsHmsMoveInProgress"] = reflect.TypeOf((*StorageDrsHmsMoveInProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsHmsMoveInProgressFault StorageDrsHmsMoveInProgress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsHmsMoveInProgressFault"] = reflect.TypeOf((*StorageDrsHmsMoveInProgressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsHmsUnreachable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsHmsUnreachable"] = reflect.TypeOf((*StorageDrsHmsUnreachable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsHmsUnreachableFault StorageDrsHmsUnreachable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsHmsUnreachableFault"] = reflect.TypeOf((*StorageDrsHmsUnreachableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsIoLoadBalanceConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReservablePercentThreshold int32  `xml:"reservablePercentThreshold,omitempty"`
0000000000000000000000000000000000000000;;		ReservableIopsThreshold    int32  `xml:"reservableIopsThreshold,omitempty"`
0000000000000000000000000000000000000000;;		ReservableThresholdMode    string `xml:"reservableThresholdMode,omitempty"`
0000000000000000000000000000000000000000;;		IoLatencyThreshold         int32  `xml:"ioLatencyThreshold,omitempty"`
0000000000000000000000000000000000000000;;		IoLoadImbalanceThreshold   int32  `xml:"ioLoadImbalanceThreshold,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsIoLoadBalanceConfig"] = reflect.TypeOf((*StorageDrsIoLoadBalanceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsIolbDisabledInternally struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsIolbDisabledInternally"] = reflect.TypeOf((*StorageDrsIolbDisabledInternally)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsIolbDisabledInternallyFault StorageDrsIolbDisabledInternally
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsIolbDisabledInternallyFault"] = reflect.TypeOf((*StorageDrsIolbDisabledInternallyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsOptionSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Option BaseOptionValue `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsOptionSpec"] = reflect.TypeOf((*StorageDrsOptionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsPlacementRankVmSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmPlacementSpec PlacementSpec            `xml:"vmPlacementSpec"`
0000000000000000000000000000000000000000;;		VmClusters      []ManagedObjectReference `xml:"vmClusters"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsPlacementRankVmSpec"] = reflect.TypeOf((*StorageDrsPlacementRankVmSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsPodConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled                bool                              `xml:"enabled"`
0000000000000000000000000000000000000000;;		IoLoadBalanceEnabled   bool                              `xml:"ioLoadBalanceEnabled"`
0000000000000000000000000000000000000000;;		DefaultVmBehavior      string                            `xml:"defaultVmBehavior"`
0000000000000000000000000000000000000000;;		LoadBalanceInterval    int32                             `xml:"loadBalanceInterval,omitempty"`
0000000000000000000000000000000000000000;;		DefaultIntraVmAffinity *bool                             `xml:"defaultIntraVmAffinity"`
0000000000000000000000000000000000000000;;		SpaceLoadBalanceConfig *StorageDrsSpaceLoadBalanceConfig `xml:"spaceLoadBalanceConfig,omitempty"`
0000000000000000000000000000000000000000;;		IoLoadBalanceConfig    *StorageDrsIoLoadBalanceConfig    `xml:"ioLoadBalanceConfig,omitempty"`
0000000000000000000000000000000000000000;;		AutomationOverrides    *StorageDrsAutomationConfig       `xml:"automationOverrides,omitempty"`
0000000000000000000000000000000000000000;;		Rule                   []BaseClusterRuleInfo             `xml:"rule,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Option                 []BaseOptionValue                 `xml:"option,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsPodConfigInfo"] = reflect.TypeOf((*StorageDrsPodConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsPodConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled                *bool                             `xml:"enabled"`
0000000000000000000000000000000000000000;;		IoLoadBalanceEnabled   *bool                             `xml:"ioLoadBalanceEnabled"`
0000000000000000000000000000000000000000;;		DefaultVmBehavior      string                            `xml:"defaultVmBehavior,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalanceInterval    int32                             `xml:"loadBalanceInterval,omitempty"`
0000000000000000000000000000000000000000;;		DefaultIntraVmAffinity *bool                             `xml:"defaultIntraVmAffinity"`
0000000000000000000000000000000000000000;;		SpaceLoadBalanceConfig *StorageDrsSpaceLoadBalanceConfig `xml:"spaceLoadBalanceConfig,omitempty"`
0000000000000000000000000000000000000000;;		IoLoadBalanceConfig    *StorageDrsIoLoadBalanceConfig    `xml:"ioLoadBalanceConfig,omitempty"`
0000000000000000000000000000000000000000;;		AutomationOverrides    *StorageDrsAutomationConfig       `xml:"automationOverrides,omitempty"`
0000000000000000000000000000000000000000;;		Rule                   []ClusterRuleSpec                 `xml:"rule,omitempty"`
0000000000000000000000000000000000000000;;		Option                 []StorageDrsOptionSpec            `xml:"option,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsPodConfigSpec"] = reflect.TypeOf((*StorageDrsPodConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsPodSelectionSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InitialVmConfig []VmPodConfigForPlacement `xml:"initialVmConfig,omitempty"`
0000000000000000000000000000000000000000;;		StoragePod      *ManagedObjectReference   `xml:"storagePod,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsPodSelectionSpec"] = reflect.TypeOf((*StorageDrsPodSelectionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsRelocateDisabled struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsRelocateDisabled"] = reflect.TypeOf((*StorageDrsRelocateDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsRelocateDisabledFault StorageDrsRelocateDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsRelocateDisabledFault"] = reflect.TypeOf((*StorageDrsRelocateDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsSpaceLoadBalanceConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SpaceThresholdMode            string `xml:"spaceThresholdMode,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilizationThreshold     int32  `xml:"spaceUtilizationThreshold,omitempty"`
0000000000000000000000000000000000000000;;		FreeSpaceThresholdGB          int32  `xml:"freeSpaceThresholdGB,omitempty"`
0000000000000000000000000000000000000000;;		MinSpaceUtilizationDifference int32  `xml:"minSpaceUtilizationDifference,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsSpaceLoadBalanceConfig"] = reflect.TypeOf((*StorageDrsSpaceLoadBalanceConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsStaleHmsCollection struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsStaleHmsCollection"] = reflect.TypeOf((*StorageDrsStaleHmsCollection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsStaleHmsCollectionFault StorageDrsStaleHmsCollection
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsStaleHmsCollectionFault"] = reflect.TypeOf((*StorageDrsStaleHmsCollectionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsUnableToMoveFiles struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsUnableToMoveFiles"] = reflect.TypeOf((*StorageDrsUnableToMoveFiles)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsUnableToMoveFilesFault StorageDrsUnableToMoveFiles
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsUnableToMoveFilesFault"] = reflect.TypeOf((*StorageDrsUnableToMoveFilesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsVmConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm                  *ManagedObjectReference          `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Enabled             *bool                            `xml:"enabled"`
0000000000000000000000000000000000000000;;		Behavior            string                           `xml:"behavior,omitempty"`
0000000000000000000000000000000000000000;;		IntraVmAffinity     *bool                            `xml:"intraVmAffinity"`
0000000000000000000000000000000000000000;;		IntraVmAntiAffinity *VirtualDiskAntiAffinityRuleSpec `xml:"intraVmAntiAffinity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsVmConfigInfo"] = reflect.TypeOf((*StorageDrsVmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDrsVmConfigSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *StorageDrsVmConfigInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageDrsVmConfigSpec"] = reflect.TypeOf((*StorageDrsVmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageIOAllocationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Limit       int64       `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Shares      *SharesInfo `xml:"shares,omitempty"`
0000000000000000000000000000000000000000;;		Reservation int32       `xml:"reservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageIOAllocationInfo"] = reflect.TypeOf((*StorageIOAllocationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageIOAllocationOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LimitOption  LongOption   `xml:"limitOption"`
0000000000000000000000000000000000000000;;		SharesOption SharesOption `xml:"sharesOption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageIOAllocationOption"] = reflect.TypeOf((*StorageIOAllocationOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageIORMConfigOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EnabledOption                BoolOption  `xml:"enabledOption"`
0000000000000000000000000000000000000000;;		CongestionThresholdOption    IntOption   `xml:"congestionThresholdOption"`
0000000000000000000000000000000000000000;;		StatsCollectionEnabledOption *BoolOption `xml:"statsCollectionEnabledOption,omitempty"`
0000000000000000000000000000000000000000;;		ReservationEnabledOption     *BoolOption `xml:"reservationEnabledOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageIORMConfigOption"] = reflect.TypeOf((*StorageIORMConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageIORMConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled                  *bool  `xml:"enabled"`
0000000000000000000000000000000000000000;;		CongestionThresholdMode  string `xml:"congestionThresholdMode,omitempty"`
0000000000000000000000000000000000000000;;		CongestionThreshold      int32  `xml:"congestionThreshold,omitempty"`
0000000000000000000000000000000000000000;;		PercentOfPeakThroughput  int32  `xml:"percentOfPeakThroughput,omitempty"`
0000000000000000000000000000000000000000;;		StatsCollectionEnabled   *bool  `xml:"statsCollectionEnabled"`
0000000000000000000000000000000000000000;;		ReservationEnabled       *bool  `xml:"reservationEnabled"`
0000000000000000000000000000000000000000;;		StatsAggregationDisabled *bool  `xml:"statsAggregationDisabled"`
0000000000000000000000000000000000000000;;		ReservableIopsThreshold  int32  `xml:"reservableIopsThreshold,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageIORMConfigSpec"] = reflect.TypeOf((*StorageIORMConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageIORMInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled                  bool   `xml:"enabled"`
0000000000000000000000000000000000000000;;		CongestionThresholdMode  string `xml:"congestionThresholdMode,omitempty"`
0000000000000000000000000000000000000000;;		CongestionThreshold      int32  `xml:"congestionThreshold"`
0000000000000000000000000000000000000000;;		PercentOfPeakThroughput  int32  `xml:"percentOfPeakThroughput,omitempty"`
0000000000000000000000000000000000000000;;		StatsCollectionEnabled   *bool  `xml:"statsCollectionEnabled"`
0000000000000000000000000000000000000000;;		ReservationEnabled       *bool  `xml:"reservationEnabled"`
0000000000000000000000000000000000000000;;		StatsAggregationDisabled *bool  `xml:"statsAggregationDisabled"`
0000000000000000000000000000000000000000;;		ReservableIopsThreshold  int32  `xml:"reservableIopsThreshold,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageIORMInfo"] = reflect.TypeOf((*StorageIORMInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageMigrationAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm                 ManagedObjectReference     `xml:"vm"`
0000000000000000000000000000000000000000;;		RelocateSpec       VirtualMachineRelocateSpec `xml:"relocateSpec"`
0000000000000000000000000000000000000000;;		Source             ManagedObjectReference     `xml:"source"`
0000000000000000000000000000000000000000;;		Destination        ManagedObjectReference     `xml:"destination"`
0000000000000000000000000000000000000000;;		SizeTransferred    int64                      `xml:"sizeTransferred"`
0000000000000000000000000000000000000000;;		SpaceUtilSrcBefore float32                    `xml:"spaceUtilSrcBefore,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilDstBefore float32                    `xml:"spaceUtilDstBefore,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilSrcAfter  float32                    `xml:"spaceUtilSrcAfter,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilDstAfter  float32                    `xml:"spaceUtilDstAfter,omitempty"`
0000000000000000000000000000000000000000;;		IoLatencySrcBefore float32                    `xml:"ioLatencySrcBefore,omitempty"`
0000000000000000000000000000000000000000;;		IoLatencyDstBefore float32                    `xml:"ioLatencyDstBefore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageMigrationAction"] = reflect.TypeOf((*StorageMigrationAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePerformanceSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Interval              int32     `xml:"interval"`
0000000000000000000000000000000000000000;;		Percentile            []int32   `xml:"percentile"`
0000000000000000000000000000000000000000;;		DatastoreReadLatency  []float64 `xml:"datastoreReadLatency"`
0000000000000000000000000000000000000000;;		DatastoreWriteLatency []float64 `xml:"datastoreWriteLatency"`
0000000000000000000000000000000000000000;;		DatastoreVmLatency    []float64 `xml:"datastoreVmLatency"`
0000000000000000000000000000000000000000;;		DatastoreReadIops     []float64 `xml:"datastoreReadIops"`
0000000000000000000000000000000000000000;;		DatastoreWriteIops    []float64 `xml:"datastoreWriteIops"`
0000000000000000000000000000000000000000;;		SiocActivityDuration  int32     `xml:"siocActivityDuration"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StoragePerformanceSummary"] = reflect.TypeOf((*StoragePerformanceSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePlacementAction struct {
0000000000000000000000000000000000000000;;		ClusterAction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm                *ManagedObjectReference    `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		RelocateSpec      VirtualMachineRelocateSpec `xml:"relocateSpec"`
0000000000000000000000000000000000000000;;		Destination       ManagedObjectReference     `xml:"destination"`
0000000000000000000000000000000000000000;;		SpaceUtilBefore   float32                    `xml:"spaceUtilBefore,omitempty"`
0000000000000000000000000000000000000000;;		SpaceDemandBefore float32                    `xml:"spaceDemandBefore,omitempty"`
0000000000000000000000000000000000000000;;		SpaceUtilAfter    float32                    `xml:"spaceUtilAfter,omitempty"`
0000000000000000000000000000000000000000;;		SpaceDemandAfter  float32                    `xml:"spaceDemandAfter,omitempty"`
0000000000000000000000000000000000000000;;		IoLatencyBefore   float32                    `xml:"ioLatencyBefore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StoragePlacementAction"] = reflect.TypeOf((*StoragePlacementAction)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePlacementResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Recommendations []ClusterRecommendation `xml:"recommendations,omitempty"`
0000000000000000000000000000000000000000;;		DrsFault        *ClusterDrsFaults       `xml:"drsFault,omitempty"`
0000000000000000000000000000000000000000;;		Task            *ManagedObjectReference `xml:"task,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StoragePlacementResult"] = reflect.TypeOf((*StoragePlacementResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePlacementSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type                      string                      `xml:"type"`
0000000000000000000000000000000000000000;;		Priority                  VirtualMachineMovePriority  `xml:"priority,omitempty"`
0000000000000000000000000000000000000000;;		Vm                        *ManagedObjectReference     `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		PodSelectionSpec          StorageDrsPodSelectionSpec  `xml:"podSelectionSpec"`
0000000000000000000000000000000000000000;;		CloneSpec                 *VirtualMachineCloneSpec    `xml:"cloneSpec,omitempty"`
0000000000000000000000000000000000000000;;		CloneName                 string                      `xml:"cloneName,omitempty"`
0000000000000000000000000000000000000000;;		ConfigSpec                *VirtualMachineConfigSpec   `xml:"configSpec,omitempty"`
0000000000000000000000000000000000000000;;		RelocateSpec              *VirtualMachineRelocateSpec `xml:"relocateSpec,omitempty"`
0000000000000000000000000000000000000000;;		ResourcePool              *ManagedObjectReference     `xml:"resourcePool,omitempty"`
0000000000000000000000000000000000000000;;		Host                      *ManagedObjectReference     `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Folder                    *ManagedObjectReference     `xml:"folder,omitempty"`
0000000000000000000000000000000000000000;;		DisallowPrerequisiteMoves *bool                       `xml:"disallowPrerequisiteMoves"`
0000000000000000000000000000000000000000;;		ResourceLeaseDurationSec  int32                       `xml:"resourceLeaseDurationSec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StoragePlacementSpec"] = reflect.TypeOf((*StoragePlacementSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePodSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string `xml:"name"`
0000000000000000000000000000000000000000;;		Capacity  int64  `xml:"capacity"`
0000000000000000000000000000000000000000;;		FreeSpace int64  `xml:"freeSpace"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StoragePodSummary"] = reflect.TypeOf((*StoragePodSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NasStorage []NasStorageProfile `xml:"nasStorage,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageProfile"] = reflect.TypeOf((*StorageProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageRequirement struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore             ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		FreeSpaceRequiredInKb int64                  `xml:"freeSpaceRequiredInKb"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageRequirement"] = reflect.TypeOf((*StorageRequirement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageResourceManagerStorageProfileStatistics struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfileId    string `xml:"profileId"`
0000000000000000000000000000000000000000;;		TotalSpaceMB int64  `xml:"totalSpaceMB"`
0000000000000000000000000000000000000000;;		UsedSpaceMB  int64  `xml:"usedSpaceMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageResourceManagerStorageProfileStatistics"] = reflect.TypeOf((*StorageResourceManagerStorageProfileStatistics)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageVMotionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageVMotionNotSupported"] = reflect.TypeOf((*StorageVMotionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageVMotionNotSupportedFault StorageVMotionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageVMotionNotSupportedFault"] = reflect.TypeOf((*StorageVMotionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageVmotionIncompatible struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageVmotionIncompatible"] = reflect.TypeOf((*StorageVmotionIncompatible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageVmotionIncompatibleFault StorageVmotionIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageVmotionIncompatibleFault"] = reflect.TypeOf((*StorageVmotionIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StringExpression struct {
0000000000000000000000000000000000000000;;		NegatableExpression
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StringExpression"] = reflect.TypeOf((*StringExpression)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StringOption struct {
0000000000000000000000000000000000000000;;		OptionType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultValue    string `xml:"defaultValue"`
0000000000000000000000000000000000000000;;		ValidCharacters string `xml:"validCharacters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StringOption"] = reflect.TypeOf((*StringOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StringPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StringPolicy"] = reflect.TypeOf((*StringPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StructuredCustomizations struct {
0000000000000000000000000000000000000000;;		HostProfilesEntityCustomizations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity         ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Customizations *AnswerFile            `xml:"customizations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StructuredCustomizations"] = reflect.TypeOf((*StructuredCustomizations)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendVAppRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SuspendVAppRequestType"] = reflect.TypeOf((*SuspendVAppRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendVApp_Task SuspendVAppRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SuspendVApp_Task"] = reflect.TypeOf((*SuspendVApp_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendVApp_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SuspendVMRequestType"] = reflect.TypeOf((*SuspendVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendVM_Task SuspendVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SuspendVM_Task"] = reflect.TypeOf((*SuspendVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendedRelocateNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SuspendedRelocateNotSupported"] = reflect.TypeOf((*SuspendedRelocateNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuspendedRelocateNotSupportedFault SuspendedRelocateNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SuspendedRelocateNotSupportedFault"] = reflect.TypeOf((*SuspendedRelocateNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwapDatastoreNotWritableOnHost struct {
0000000000000000000000000000000000000000;;		DatastoreNotWritableOnHost
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwapDatastoreNotWritableOnHost"] = reflect.TypeOf((*SwapDatastoreNotWritableOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwapDatastoreNotWritableOnHostFault SwapDatastoreNotWritableOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwapDatastoreNotWritableOnHostFault"] = reflect.TypeOf((*SwapDatastoreNotWritableOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwapDatastoreUnset struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwapDatastoreUnset"] = reflect.TypeOf((*SwapDatastoreUnset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwapDatastoreUnsetFault SwapDatastoreUnset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwapDatastoreUnsetFault"] = reflect.TypeOf((*SwapDatastoreUnsetFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwapPlacementOverrideNotSupported struct {
0000000000000000000000000000000000000000;;		InvalidVmConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwapPlacementOverrideNotSupported"] = reflect.TypeOf((*SwapPlacementOverrideNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwapPlacementOverrideNotSupportedFault SwapPlacementOverrideNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwapPlacementOverrideNotSupportedFault"] = reflect.TypeOf((*SwapPlacementOverrideNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwitchIpUnset struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwitchIpUnset"] = reflect.TypeOf((*SwitchIpUnset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwitchIpUnsetFault SwitchIpUnset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwitchIpUnsetFault"] = reflect.TypeOf((*SwitchIpUnsetFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwitchNotInUpgradeMode struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwitchNotInUpgradeMode"] = reflect.TypeOf((*SwitchNotInUpgradeMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwitchNotInUpgradeModeFault SwitchNotInUpgradeMode
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SwitchNotInUpgradeModeFault"] = reflect.TypeOf((*SwitchNotInUpgradeModeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SystemError struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SystemError"] = reflect.TypeOf((*SystemError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SystemErrorFault SystemError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SystemErrorFault"] = reflect.TypeOf((*SystemErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SystemEventInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RecordId     int64  `xml:"recordId"`
0000000000000000000000000000000000000000;;		When         string `xml:"when"`
0000000000000000000000000000000000000000;;		SelType      int64  `xml:"selType"`
0000000000000000000000000000000000000000;;		Message      string `xml:"message"`
0000000000000000000000000000000000000000;;		SensorNumber int64  `xml:"sensorNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SystemEventInfo"] = reflect.TypeOf((*SystemEventInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Tag struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Tag"] = reflect.TypeOf((*Tag)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskDescription struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MethodInfo []BaseElementDescription `xml:"methodInfo,typeattr"`
0000000000000000000000000000000000000000;;		State      []BaseElementDescription `xml:"state,typeattr"`
0000000000000000000000000000000000000000;;		Reason     []BaseTypeDescription    `xml:"reason,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskDescription"] = reflect.TypeOf((*TaskDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info TaskInfo `xml:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskEvent"] = reflect.TypeOf((*TaskEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskFilterSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity        *TaskFilterSpecByEntity   `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		Time          *TaskFilterSpecByTime     `xml:"time,omitempty"`
0000000000000000000000000000000000000000;;		UserName      *TaskFilterSpecByUsername `xml:"userName,omitempty"`
0000000000000000000000000000000000000000;;		ActivationId  []string                  `xml:"activationId,omitempty"`
0000000000000000000000000000000000000000;;		State         []TaskInfoState           `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		Alarm         *ManagedObjectReference   `xml:"alarm,omitempty"`
0000000000000000000000000000000000000000;;		ScheduledTask *ManagedObjectReference   `xml:"scheduledTask,omitempty"`
0000000000000000000000000000000000000000;;		EventChainId  []int32                   `xml:"eventChainId,omitempty"`
0000000000000000000000000000000000000000;;		Tag           []string                  `xml:"tag,omitempty"`
0000000000000000000000000000000000000000;;		ParentTaskKey []string                  `xml:"parentTaskKey,omitempty"`
0000000000000000000000000000000000000000;;		RootTaskKey   []string                  `xml:"rootTaskKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskFilterSpec"] = reflect.TypeOf((*TaskFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskFilterSpecByEntity struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity    ManagedObjectReference        `xml:"entity"`
0000000000000000000000000000000000000000;;		Recursion TaskFilterSpecRecursionOption `xml:"recursion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskFilterSpecByEntity"] = reflect.TypeOf((*TaskFilterSpecByEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskFilterSpecByTime struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TimeType  TaskFilterSpecTimeOption `xml:"timeType"`
0000000000000000000000000000000000000000;;		BeginTime *time.Time               `xml:"beginTime"`
0000000000000000000000000000000000000000;;		EndTime   *time.Time               `xml:"endTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskFilterSpecByTime"] = reflect.TypeOf((*TaskFilterSpecByTime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskFilterSpecByUsername struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemUser bool     `xml:"systemUser"`
0000000000000000000000000000000000000000;;		UserList   []string `xml:"userList,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskFilterSpecByUsername"] = reflect.TypeOf((*TaskFilterSpecByUsername)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInProgress struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Task ManagedObjectReference `xml:"task"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskInProgress"] = reflect.TypeOf((*TaskInProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInProgressFault BaseTaskInProgress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskInProgressFault"] = reflect.TypeOf((*TaskInProgressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string                   `xml:"key"`
0000000000000000000000000000000000000000;;		Task          ManagedObjectReference   `xml:"task"`
0000000000000000000000000000000000000000;;		Description   *LocalizableMessage      `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Name          string                   `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		DescriptionId string                   `xml:"descriptionId"`
0000000000000000000000000000000000000000;;		Entity        *ManagedObjectReference  `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		EntityName    string                   `xml:"entityName,omitempty"`
0000000000000000000000000000000000000000;;		Locked        []ManagedObjectReference `xml:"locked,omitempty"`
0000000000000000000000000000000000000000;;		State         TaskInfoState            `xml:"state"`
0000000000000000000000000000000000000000;;		Cancelled     bool                     `xml:"cancelled"`
0000000000000000000000000000000000000000;;		Cancelable    bool                     `xml:"cancelable"`
0000000000000000000000000000000000000000;;		Error         *LocalizedMethodFault    `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Result        AnyType                  `xml:"result,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Progress      int32                    `xml:"progress,omitempty"`
0000000000000000000000000000000000000000;;		Reason        BaseTaskReason           `xml:"reason,typeattr"`
0000000000000000000000000000000000000000;;		QueueTime     time.Time                `xml:"queueTime"`
0000000000000000000000000000000000000000;;		StartTime     *time.Time               `xml:"startTime"`
0000000000000000000000000000000000000000;;		CompleteTime  *time.Time               `xml:"completeTime"`
0000000000000000000000000000000000000000;;		EventChainId  int32                    `xml:"eventChainId"`
0000000000000000000000000000000000000000;;		ChangeTag     string                   `xml:"changeTag,omitempty"`
0000000000000000000000000000000000000000;;		ParentTaskKey string                   `xml:"parentTaskKey,omitempty"`
0000000000000000000000000000000000000000;;		RootTaskKey   string                   `xml:"rootTaskKey,omitempty"`
0000000000000000000000000000000000000000;;		ActivationId  string                   `xml:"activationId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskInfo"] = reflect.TypeOf((*TaskInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskReason struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskReason"] = reflect.TypeOf((*TaskReason)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskReasonAlarm struct {
0000000000000000000000000000000000000000;;		TaskReason
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AlarmName  string                 `xml:"alarmName"`
0000000000000000000000000000000000000000;;		Alarm      ManagedObjectReference `xml:"alarm"`
0000000000000000000000000000000000000000;;		EntityName string                 `xml:"entityName"`
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskReasonAlarm"] = reflect.TypeOf((*TaskReasonAlarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskReasonSchedule struct {
0000000000000000000000000000000000000000;;		TaskReason
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name          string                 `xml:"name"`
0000000000000000000000000000000000000000;;		ScheduledTask ManagedObjectReference `xml:"scheduledTask"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskReasonSchedule"] = reflect.TypeOf((*TaskReasonSchedule)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskReasonSystem struct {
0000000000000000000000000000000000000000;;		TaskReason
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskReasonSystem"] = reflect.TypeOf((*TaskReasonSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskReasonUser struct {
0000000000000000000000000000000000000000;;		TaskReason
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserName string `xml:"userName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskReasonUser"] = reflect.TypeOf((*TaskReasonUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskScheduler struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActiveTime *time.Time `xml:"activeTime"`
0000000000000000000000000000000000000000;;		ExpireTime *time.Time `xml:"expireTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskScheduler"] = reflect.TypeOf((*TaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskTimeoutEvent struct {
0000000000000000000000000000000000000000;;		TaskEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskTimeoutEvent"] = reflect.TypeOf((*TaskTimeoutEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TeamingMatchEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TeamingMatchEvent"] = reflect.TypeOf((*TeamingMatchEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TeamingMisMatchEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TeamingMisMatchEvent"] = reflect.TypeOf((*TeamingMisMatchEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateBeingUpgradedEvent struct {
0000000000000000000000000000000000000000;;		TemplateUpgradeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TemplateBeingUpgradedEvent"] = reflect.TypeOf((*TemplateBeingUpgradedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateConfigFileInfo struct {
0000000000000000000000000000000000000000;;		VmConfigFileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TemplateConfigFileInfo"] = reflect.TypeOf((*TemplateConfigFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateConfigFileQuery struct {
0000000000000000000000000000000000000000;;		VmConfigFileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TemplateConfigFileQuery"] = reflect.TypeOf((*TemplateConfigFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateUpgradeEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LegacyTemplate string `xml:"legacyTemplate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TemplateUpgradeEvent"] = reflect.TypeOf((*TemplateUpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateUpgradeFailedEvent struct {
0000000000000000000000000000000000000000;;		TemplateUpgradeEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TemplateUpgradeFailedEvent"] = reflect.TypeOf((*TemplateUpgradeFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateUpgradedEvent struct {
0000000000000000000000000000000000000000;;		TemplateUpgradeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TemplateUpgradedEvent"] = reflect.TypeOf((*TemplateUpgradedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateFaultTolerantVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   *ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateFaultTolerantVMRequestType"] = reflect.TypeOf((*TerminateFaultTolerantVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateFaultTolerantVM_Task TerminateFaultTolerantVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateFaultTolerantVM_Task"] = reflect.TypeOf((*TerminateFaultTolerantVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateFaultTolerantVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateProcessInGuest TerminateProcessInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateProcessInGuest"] = reflect.TypeOf((*TerminateProcessInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateProcessInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;		Pid  int64                   `xml:"pid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateProcessInGuestRequestType"] = reflect.TypeOf((*TerminateProcessInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateProcessInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateSession TerminateSessionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateSession"] = reflect.TypeOf((*TerminateSession)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateSessionRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SessionId []string               `xml:"sessionId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateSessionRequestType"] = reflect.TypeOf((*TerminateSessionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateSessionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateVM TerminateVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateVM"] = reflect.TypeOf((*TerminateVM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TerminateVMRequestType"] = reflect.TypeOf((*TerminateVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TerminateVMResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ThirdPartyLicenseAssignmentFailed struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host   ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Module string                 `xml:"module"`
0000000000000000000000000000000000000000;;		Reason string                 `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ThirdPartyLicenseAssignmentFailed"] = reflect.TypeOf((*ThirdPartyLicenseAssignmentFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ThirdPartyLicenseAssignmentFailedFault ThirdPartyLicenseAssignmentFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ThirdPartyLicenseAssignmentFailedFault"] = reflect.TypeOf((*ThirdPartyLicenseAssignmentFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TicketedSessionAuthentication struct {
0000000000000000000000000000000000000000;;		GuestAuthentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ticket string `xml:"ticket"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TicketedSessionAuthentication"] = reflect.TypeOf((*TicketedSessionAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimedOutHostOperationEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TimedOutHostOperationEvent"] = reflect.TypeOf((*TimedOutHostOperationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timedout struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Timedout"] = reflect.TypeOf((*Timedout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimedoutFault BaseTimedout
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TimedoutFault"] = reflect.TypeOf((*TimedoutFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyConcurrentNativeClones struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyConcurrentNativeClones"] = reflect.TypeOf((*TooManyConcurrentNativeClones)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyConcurrentNativeClonesFault TooManyConcurrentNativeClones
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyConcurrentNativeClonesFault"] = reflect.TypeOf((*TooManyConcurrentNativeClonesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyConsecutiveOverrides struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyConsecutiveOverrides"] = reflect.TypeOf((*TooManyConsecutiveOverrides)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyConsecutiveOverridesFault TooManyConsecutiveOverrides
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyConsecutiveOverridesFault"] = reflect.TypeOf((*TooManyConsecutiveOverridesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyDevices struct {
0000000000000000000000000000000000000000;;		InvalidVmConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyDevices"] = reflect.TypeOf((*TooManyDevices)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyDevicesFault TooManyDevices
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyDevicesFault"] = reflect.TypeOf((*TooManyDevicesFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyDisksOnLegacyHost struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskCount     int32 `xml:"diskCount"`
0000000000000000000000000000000000000000;;		TimeoutDanger bool  `xml:"timeoutDanger"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyDisksOnLegacyHost"] = reflect.TypeOf((*TooManyDisksOnLegacyHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyDisksOnLegacyHostFault TooManyDisksOnLegacyHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyDisksOnLegacyHostFault"] = reflect.TypeOf((*TooManyDisksOnLegacyHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyGuestLogons struct {
0000000000000000000000000000000000000000;;		GuestOperationsFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyGuestLogons"] = reflect.TypeOf((*TooManyGuestLogons)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyGuestLogonsFault TooManyGuestLogons
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyGuestLogonsFault"] = reflect.TypeOf((*TooManyGuestLogonsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyHosts struct {
0000000000000000000000000000000000000000;;		HostConnectFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyHosts"] = reflect.TypeOf((*TooManyHosts)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyHostsFault TooManyHosts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyHostsFault"] = reflect.TypeOf((*TooManyHostsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyNativeCloneLevels struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyNativeCloneLevels"] = reflect.TypeOf((*TooManyNativeCloneLevels)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyNativeCloneLevelsFault TooManyNativeCloneLevels
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyNativeCloneLevelsFault"] = reflect.TypeOf((*TooManyNativeCloneLevelsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyNativeClonesOnFile struct {
0000000000000000000000000000000000000000;;		FileFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyNativeClonesOnFile"] = reflect.TypeOf((*TooManyNativeClonesOnFile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManyNativeClonesOnFileFault TooManyNativeClonesOnFile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManyNativeClonesOnFileFault"] = reflect.TypeOf((*TooManyNativeClonesOnFileFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManySnapshotLevels struct {
0000000000000000000000000000000000000000;;		SnapshotFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManySnapshotLevels"] = reflect.TypeOf((*TooManySnapshotLevels)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TooManySnapshotLevelsFault TooManySnapshotLevels
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TooManySnapshotLevelsFault"] = reflect.TypeOf((*TooManySnapshotLevelsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsAlreadyUpgraded struct {
0000000000000000000000000000000000000000;;		VmToolsUpgradeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsAlreadyUpgraded"] = reflect.TypeOf((*ToolsAlreadyUpgraded)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsAlreadyUpgradedFault ToolsAlreadyUpgraded
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsAlreadyUpgradedFault"] = reflect.TypeOf((*ToolsAlreadyUpgradedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsAutoUpgradeNotSupported struct {
0000000000000000000000000000000000000000;;		VmToolsUpgradeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsAutoUpgradeNotSupported"] = reflect.TypeOf((*ToolsAutoUpgradeNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsAutoUpgradeNotSupportedFault ToolsAutoUpgradeNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsAutoUpgradeNotSupportedFault"] = reflect.TypeOf((*ToolsAutoUpgradeNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ToolsVersion         int32                                `xml:"toolsVersion,omitempty"`
0000000000000000000000000000000000000000;;		ToolsInstallType     string                               `xml:"toolsInstallType,omitempty"`
0000000000000000000000000000000000000000;;		AfterPowerOn         *bool                                `xml:"afterPowerOn"`
0000000000000000000000000000000000000000;;		AfterResume          *bool                                `xml:"afterResume"`
0000000000000000000000000000000000000000;;		BeforeGuestStandby   *bool                                `xml:"beforeGuestStandby"`
0000000000000000000000000000000000000000;;		BeforeGuestShutdown  *bool                                `xml:"beforeGuestShutdown"`
0000000000000000000000000000000000000000;;		BeforeGuestReboot    *bool                                `xml:"beforeGuestReboot"`
0000000000000000000000000000000000000000;;		ToolsUpgradePolicy   string                               `xml:"toolsUpgradePolicy,omitempty"`
0000000000000000000000000000000000000000;;		PendingCustomization string                               `xml:"pendingCustomization,omitempty"`
0000000000000000000000000000000000000000;;		CustomizationKeyId   *CryptoKeyId                         `xml:"customizationKeyId,omitempty"`
0000000000000000000000000000000000000000;;		SyncTimeWithHost     *bool                                `xml:"syncTimeWithHost"`
0000000000000000000000000000000000000000;;		LastInstallInfo      *ToolsConfigInfoToolsLastInstallInfo `xml:"lastInstallInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsConfigInfo"] = reflect.TypeOf((*ToolsConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsConfigInfoToolsLastInstallInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Counter int32                 `xml:"counter"`
0000000000000000000000000000000000000000;;		Fault   *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsConfigInfoToolsLastInstallInfo"] = reflect.TypeOf((*ToolsConfigInfoToolsLastInstallInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsImageCopyFailed struct {
0000000000000000000000000000000000000000;;		VmToolsUpgradeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsImageCopyFailed"] = reflect.TypeOf((*ToolsImageCopyFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsImageCopyFailedFault ToolsImageCopyFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsImageCopyFailedFault"] = reflect.TypeOf((*ToolsImageCopyFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsImageNotAvailable struct {
0000000000000000000000000000000000000000;;		VmToolsUpgradeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsImageNotAvailable"] = reflect.TypeOf((*ToolsImageNotAvailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsImageNotAvailableFault ToolsImageNotAvailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsImageNotAvailableFault"] = reflect.TypeOf((*ToolsImageNotAvailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsImageSignatureCheckFailed struct {
0000000000000000000000000000000000000000;;		VmToolsUpgradeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsImageSignatureCheckFailed"] = reflect.TypeOf((*ToolsImageSignatureCheckFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsImageSignatureCheckFailedFault ToolsImageSignatureCheckFailed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsImageSignatureCheckFailedFault"] = reflect.TypeOf((*ToolsImageSignatureCheckFailedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsInstallationInProgress struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsInstallationInProgress"] = reflect.TypeOf((*ToolsInstallationInProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsInstallationInProgressFault ToolsInstallationInProgress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsInstallationInProgressFault"] = reflect.TypeOf((*ToolsInstallationInProgressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsUnavailable struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsUnavailable"] = reflect.TypeOf((*ToolsUnavailable)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsUnavailableFault ToolsUnavailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsUnavailableFault"] = reflect.TypeOf((*ToolsUnavailableFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsUpgradeCancelled struct {
0000000000000000000000000000000000000000;;		VmToolsUpgradeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsUpgradeCancelled"] = reflect.TypeOf((*ToolsUpgradeCancelled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToolsUpgradeCancelledFault ToolsUpgradeCancelled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ToolsUpgradeCancelledFault"] = reflect.TypeOf((*ToolsUpgradeCancelledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TraversalSpec struct {
0000000000000000000000000000000000000000;;		SelectionSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type      string              `xml:"type"`
0000000000000000000000000000000000000000;;		Path      string              `xml:"path"`
0000000000000000000000000000000000000000;;		Skip      *bool               `xml:"skip"`
0000000000000000000000000000000000000000;;		SelectSet []BaseSelectionSpec `xml:"selectSet,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TraversalSpec"] = reflect.TypeOf((*TraversalSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnDiskLocatorLedOffRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ScsiDiskUuids []string               `xml:"scsiDiskUuids"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TurnDiskLocatorLedOffRequestType"] = reflect.TypeOf((*TurnDiskLocatorLedOffRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnDiskLocatorLedOff_Task TurnDiskLocatorLedOffRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TurnDiskLocatorLedOff_Task"] = reflect.TypeOf((*TurnDiskLocatorLedOff_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnDiskLocatorLedOff_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnDiskLocatorLedOnRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ScsiDiskUuids []string               `xml:"scsiDiskUuids"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TurnDiskLocatorLedOnRequestType"] = reflect.TypeOf((*TurnDiskLocatorLedOnRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnDiskLocatorLedOn_Task TurnDiskLocatorLedOnRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TurnDiskLocatorLedOn_Task"] = reflect.TypeOf((*TurnDiskLocatorLedOn_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnDiskLocatorLedOn_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnOffFaultToleranceForVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TurnOffFaultToleranceForVMRequestType"] = reflect.TypeOf((*TurnOffFaultToleranceForVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnOffFaultToleranceForVM_Task TurnOffFaultToleranceForVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TurnOffFaultToleranceForVM_Task"] = reflect.TypeOf((*TurnOffFaultToleranceForVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TurnOffFaultToleranceForVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TypeDescription struct {
0000000000000000000000000000000000000000;;		Description
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TypeDescription"] = reflect.TypeOf((*TypeDescription)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnSupportedDatastoreForVFlash struct {
0000000000000000000000000000000000000000;;		UnsupportedDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastoreName string `xml:"datastoreName"`
0000000000000000000000000000000000000000;;		Type          string `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnSupportedDatastoreForVFlash"] = reflect.TypeOf((*UnSupportedDatastoreForVFlash)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnSupportedDatastoreForVFlashFault UnSupportedDatastoreForVFlash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnSupportedDatastoreForVFlashFault"] = reflect.TypeOf((*UnSupportedDatastoreForVFlashFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnassignUserFromGroup UnassignUserFromGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnassignUserFromGroup"] = reflect.TypeOf((*UnassignUserFromGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnassignUserFromGroupRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		User  string                 `xml:"user"`
0000000000000000000000000000000000000000;;		Group string                 `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnassignUserFromGroupRequestType"] = reflect.TypeOf((*UnassignUserFromGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnassignUserFromGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnbindVnic UnbindVnicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnbindVnic"] = reflect.TypeOf((*UnbindVnic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnbindVnicRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaName string                 `xml:"iScsiHbaName"`
0000000000000000000000000000000000000000;;		VnicDevice   string                 `xml:"vnicDevice"`
0000000000000000000000000000000000000000;;		Force        bool                   `xml:"force"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnbindVnicRequestType"] = reflect.TypeOf((*UnbindVnicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnbindVnicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UncommittedUndoableDisk struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UncommittedUndoableDisk"] = reflect.TypeOf((*UncommittedUndoableDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UncommittedUndoableDiskFault UncommittedUndoableDisk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UncommittedUndoableDiskFault"] = reflect.TypeOf((*UncommittedUndoableDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnconfiguredPropertyValue struct {
0000000000000000000000000000000000000000;;		InvalidPropertyValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnconfiguredPropertyValue"] = reflect.TypeOf((*UnconfiguredPropertyValue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnconfiguredPropertyValueFault UnconfiguredPropertyValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnconfiguredPropertyValueFault"] = reflect.TypeOf((*UnconfiguredPropertyValueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UncustomizableGuest struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UncustomizableGuestOS string `xml:"uncustomizableGuestOS"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UncustomizableGuest"] = reflect.TypeOf((*UncustomizableGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UncustomizableGuestFault UncustomizableGuest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UncustomizableGuestFault"] = reflect.TypeOf((*UncustomizableGuestFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnexpectedCustomizationFault struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnexpectedCustomizationFault"] = reflect.TypeOf((*UnexpectedCustomizationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnexpectedCustomizationFaultFault UnexpectedCustomizationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnexpectedCustomizationFaultFault"] = reflect.TypeOf((*UnexpectedCustomizationFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnexpectedFault struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FaultName string                `xml:"faultName"`
0000000000000000000000000000000000000000;;		Fault     *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnexpectedFault"] = reflect.TypeOf((*UnexpectedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnexpectedFaultFault UnexpectedFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnexpectedFaultFault"] = reflect.TypeOf((*UnexpectedFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallHostPatchRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference                     `xml:"_this"`
0000000000000000000000000000000000000000;;		BulletinIds []string                                   `xml:"bulletinIds,omitempty"`
0000000000000000000000000000000000000000;;		Spec        *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UninstallHostPatchRequestType"] = reflect.TypeOf((*UninstallHostPatchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallHostPatch_Task UninstallHostPatchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UninstallHostPatch_Task"] = reflect.TypeOf((*UninstallHostPatch_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallHostPatch_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallIoFilterRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;		CompRes  ManagedObjectReference `xml:"compRes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UninstallIoFilterRequestType"] = reflect.TypeOf((*UninstallIoFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallIoFilter_Task UninstallIoFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UninstallIoFilter_Task"] = reflect.TypeOf((*UninstallIoFilter_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallIoFilter_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallService UninstallServiceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UninstallService"] = reflect.TypeOf((*UninstallService)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallServiceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                 `xml:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UninstallServiceRequestType"] = reflect.TypeOf((*UninstallServiceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UninstallServiceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnlicensedVirtualMachinesEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Unlicensed int32 `xml:"unlicensed"`
0000000000000000000000000000000000000000;;		Available  int32 `xml:"available"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnlicensedVirtualMachinesEvent"] = reflect.TypeOf((*UnlicensedVirtualMachinesEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnlicensedVirtualMachinesFoundEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Available int32 `xml:"available"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnlicensedVirtualMachinesFoundEvent"] = reflect.TypeOf((*UnlicensedVirtualMachinesFoundEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmapVmfsVolumeExRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid []string               `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmapVmfsVolumeExRequestType"] = reflect.TypeOf((*UnmapVmfsVolumeExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmapVmfsVolumeEx_Task UnmapVmfsVolumeExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmapVmfsVolumeEx_Task"] = reflect.TypeOf((*UnmapVmfsVolumeEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmapVmfsVolumeEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountDiskMappingRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Mapping []VsanHostDiskMapping  `xml:"mapping"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountDiskMappingRequestType"] = reflect.TypeOf((*UnmountDiskMappingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountDiskMapping_Task UnmountDiskMappingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountDiskMapping_Task"] = reflect.TypeOf((*UnmountDiskMapping_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountDiskMapping_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountForceMountedVmfsVolume UnmountForceMountedVmfsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountForceMountedVmfsVolume"] = reflect.TypeOf((*UnmountForceMountedVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountForceMountedVmfsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid string                 `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountForceMountedVmfsVolumeRequestType"] = reflect.TypeOf((*UnmountForceMountedVmfsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountForceMountedVmfsVolumeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountToolsInstaller UnmountToolsInstallerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountToolsInstaller"] = reflect.TypeOf((*UnmountToolsInstaller)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountToolsInstallerRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountToolsInstallerRequestType"] = reflect.TypeOf((*UnmountToolsInstallerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountToolsInstallerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVffsVolume UnmountVffsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountVffsVolume"] = reflect.TypeOf((*UnmountVffsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVffsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VffsUuid string                 `xml:"vffsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountVffsVolumeRequestType"] = reflect.TypeOf((*UnmountVffsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVffsVolumeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVmfsVolume UnmountVmfsVolumeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountVmfsVolume"] = reflect.TypeOf((*UnmountVmfsVolume)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVmfsVolumeExRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid []string               `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountVmfsVolumeExRequestType"] = reflect.TypeOf((*UnmountVmfsVolumeExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVmfsVolumeEx_Task UnmountVmfsVolumeExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountVmfsVolumeEx_Task"] = reflect.TypeOf((*UnmountVmfsVolumeEx_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVmfsVolumeEx_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVmfsVolumeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid string                 `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnmountVmfsVolumeRequestType"] = reflect.TypeOf((*UnmountVmfsVolumeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnmountVmfsVolumeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnrecognizedHost struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnrecognizedHost"] = reflect.TypeOf((*UnrecognizedHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnrecognizedHostFault UnrecognizedHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnrecognizedHostFault"] = reflect.TypeOf((*UnrecognizedHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterAndDestroyRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterAndDestroyRequestType"] = reflect.TypeOf((*UnregisterAndDestroyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterAndDestroy_Task UnregisterAndDestroyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterAndDestroy_Task"] = reflect.TypeOf((*UnregisterAndDestroy_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterAndDestroy_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterExtension UnregisterExtensionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterExtension"] = reflect.TypeOf((*UnregisterExtension)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterExtensionRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ExtensionKey string                 `xml:"extensionKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterExtensionRequestType"] = reflect.TypeOf((*UnregisterExtensionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterExtensionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterHealthUpdateProvider UnregisterHealthUpdateProviderRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterHealthUpdateProvider"] = reflect.TypeOf((*UnregisterHealthUpdateProvider)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterHealthUpdateProviderRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ProviderId string                 `xml:"providerId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterHealthUpdateProviderRequestType"] = reflect.TypeOf((*UnregisterHealthUpdateProviderRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterHealthUpdateProviderResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterVM UnregisterVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterVM"] = reflect.TypeOf((*UnregisterVM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterVMRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnregisterVMRequestType"] = reflect.TypeOf((*UnregisterVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnregisterVMResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsharedSwapVMotionNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsharedSwapVMotionNotSupported"] = reflect.TypeOf((*UnsharedSwapVMotionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsharedSwapVMotionNotSupportedFault UnsharedSwapVMotionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsharedSwapVMotionNotSupportedFault"] = reflect.TypeOf((*UnsharedSwapVMotionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedDatastore struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedDatastore"] = reflect.TypeOf((*UnsupportedDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedDatastoreFault BaseUnsupportedDatastore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedDatastoreFault"] = reflect.TypeOf((*UnsupportedDatastoreFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedGuest struct {
0000000000000000000000000000000000000000;;		InvalidVmConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UnsupportedGuestOS string `xml:"unsupportedGuestOS"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedGuest"] = reflect.TypeOf((*UnsupportedGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedGuestFault UnsupportedGuest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedGuestFault"] = reflect.TypeOf((*UnsupportedGuestFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedVimApiVersion struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedVimApiVersion"] = reflect.TypeOf((*UnsupportedVimApiVersion)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedVimApiVersionFault UnsupportedVimApiVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedVimApiVersionFault"] = reflect.TypeOf((*UnsupportedVimApiVersionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedVmxLocation struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedVmxLocation"] = reflect.TypeOf((*UnsupportedVmxLocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedVmxLocationFault UnsupportedVmxLocation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnsupportedVmxLocationFault"] = reflect.TypeOf((*UnsupportedVmxLocationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnusedVirtualDiskBlocksNotScrubbed struct {
0000000000000000000000000000000000000000;;		DeviceBackingNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnusedVirtualDiskBlocksNotScrubbed"] = reflect.TypeOf((*UnusedVirtualDiskBlocksNotScrubbed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnusedVirtualDiskBlocksNotScrubbedFault UnusedVirtualDiskBlocksNotScrubbed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UnusedVirtualDiskBlocksNotScrubbedFault"] = reflect.TypeOf((*UnusedVirtualDiskBlocksNotScrubbedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAnswerFileRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Host       ManagedObjectReference   `xml:"host"`
0000000000000000000000000000000000000000;;		ConfigSpec BaseAnswerFileCreateSpec `xml:"configSpec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateAnswerFileRequestType"] = reflect.TypeOf((*UpdateAnswerFileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAnswerFile_Task UpdateAnswerFileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateAnswerFile_Task"] = reflect.TypeOf((*UpdateAnswerFile_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAnswerFile_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAssignedLicense UpdateAssignedLicenseRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateAssignedLicense"] = reflect.TypeOf((*UpdateAssignedLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAssignedLicenseRequestType struct {
0000000000000000000000000000000000000000;;		This              ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity            string                 `xml:"entity"`
0000000000000000000000000000000000000000;;		LicenseKey        string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;		EntityDisplayName string                 `xml:"entityDisplayName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateAssignedLicenseRequestType"] = reflect.TypeOf((*UpdateAssignedLicenseRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAssignedLicenseResponse struct {
0000000000000000000000000000000000000000;;		Returnval LicenseManagerLicenseInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAuthorizationRole UpdateAuthorizationRoleRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateAuthorizationRole"] = reflect.TypeOf((*UpdateAuthorizationRole)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAuthorizationRoleRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		RoleId  int32                  `xml:"roleId"`
0000000000000000000000000000000000000000;;		NewName string                 `xml:"newName"`
0000000000000000000000000000000000000000;;		PrivIds []string               `xml:"privIds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateAuthorizationRoleRequestType"] = reflect.TypeOf((*UpdateAuthorizationRoleRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAuthorizationRoleResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateBootDevice UpdateBootDeviceRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateBootDevice"] = reflect.TypeOf((*UpdateBootDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateBootDeviceRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Key  string                 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateBootDeviceRequestType"] = reflect.TypeOf((*UpdateBootDeviceRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateBootDeviceResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateChildResourceConfiguration UpdateChildResourceConfigurationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateChildResourceConfiguration"] = reflect.TypeOf((*UpdateChildResourceConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateChildResourceConfigurationRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec []ResourceConfigSpec   `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateChildResourceConfigurationRequestType"] = reflect.TypeOf((*UpdateChildResourceConfigurationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateChildResourceConfigurationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateClusterProfile UpdateClusterProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateClusterProfile"] = reflect.TypeOf((*UpdateClusterProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateClusterProfileRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference       `xml:"_this"`
0000000000000000000000000000000000000000;;		Config BaseClusterProfileConfigSpec `xml:"config,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateClusterProfileRequestType"] = reflect.TypeOf((*UpdateClusterProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateClusterProfileResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateConfig UpdateConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateConfig"] = reflect.TypeOf((*UpdateConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name   string                 `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Config *ResourceConfigSpec    `xml:"config,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateConfigRequestType"] = reflect.TypeOf((*UpdateConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateConsoleIpRouteConfig UpdateConsoleIpRouteConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateConsoleIpRouteConfig"] = reflect.TypeOf((*UpdateConsoleIpRouteConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateConsoleIpRouteConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config BaseHostIpRouteConfig  `xml:"config,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateConsoleIpRouteConfigRequestType"] = reflect.TypeOf((*UpdateConsoleIpRouteConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateConsoleIpRouteConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateCounterLevelMapping UpdateCounterLevelMappingRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateCounterLevelMapping"] = reflect.TypeOf((*UpdateCounterLevelMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateCounterLevelMappingRequestType struct {
0000000000000000000000000000000000000000;;		This            ManagedObjectReference                  `xml:"_this"`
0000000000000000000000000000000000000000;;		CounterLevelMap []PerformanceManagerCounterLevelMapping `xml:"counterLevelMap"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateCounterLevelMappingRequestType"] = reflect.TypeOf((*UpdateCounterLevelMappingRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateCounterLevelMappingResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDVSHealthCheckConfigRequestType struct {
0000000000000000000000000000000000000000;;		This              ManagedObjectReference     `xml:"_this"`
0000000000000000000000000000000000000000;;		HealthCheckConfig []BaseDVSHealthCheckConfig `xml:"healthCheckConfig,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDVSHealthCheckConfigRequestType"] = reflect.TypeOf((*UpdateDVSHealthCheckConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDVSHealthCheckConfig_Task UpdateDVSHealthCheckConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDVSHealthCheckConfig_Task"] = reflect.TypeOf((*UpdateDVSHealthCheckConfig_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDVSHealthCheckConfig_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDVSLacpGroupConfigRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		LacpGroupSpec []VMwareDvsLacpGroupSpec `xml:"lacpGroupSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDVSLacpGroupConfigRequestType"] = reflect.TypeOf((*UpdateDVSLacpGroupConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDVSLacpGroupConfig_Task UpdateDVSLacpGroupConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDVSLacpGroupConfig_Task"] = reflect.TypeOf((*UpdateDVSLacpGroupConfig_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDVSLacpGroupConfig_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDateTime UpdateDateTimeRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDateTime"] = reflect.TypeOf((*UpdateDateTime)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDateTimeConfig UpdateDateTimeConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDateTimeConfig"] = reflect.TypeOf((*UpdateDateTimeConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDateTimeConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config HostDateTimeConfig     `xml:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDateTimeConfigRequestType"] = reflect.TypeOf((*UpdateDateTimeConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDateTimeConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDateTimeRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DateTime time.Time              `xml:"dateTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDateTimeRequestType"] = reflect.TypeOf((*UpdateDateTimeRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDateTimeResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDefaultPolicy UpdateDefaultPolicyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDefaultPolicy"] = reflect.TypeOf((*UpdateDefaultPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDefaultPolicyRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference    `xml:"_this"`
0000000000000000000000000000000000000000;;		DefaultPolicy HostFirewallDefaultPolicy `xml:"defaultPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDefaultPolicyRequestType"] = reflect.TypeOf((*UpdateDefaultPolicyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDefaultPolicyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDiskPartitions UpdateDiskPartitionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDiskPartitions"] = reflect.TypeOf((*UpdateDiskPartitions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDiskPartitionsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		DevicePath string                 `xml:"devicePath"`
0000000000000000000000000000000000000000;;		Spec       HostDiskPartitionSpec  `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDiskPartitionsRequestType"] = reflect.TypeOf((*UpdateDiskPartitionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDiskPartitionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDnsConfig UpdateDnsConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDnsConfig"] = reflect.TypeOf((*UpdateDnsConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDnsConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config BaseHostDnsConfig      `xml:"config,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDnsConfigRequestType"] = reflect.TypeOf((*UpdateDnsConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDnsConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDvsCapability UpdateDvsCapabilityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDvsCapability"] = reflect.TypeOf((*UpdateDvsCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDvsCapabilityRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Capability DVSCapability          `xml:"capability"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateDvsCapabilityRequestType"] = reflect.TypeOf((*UpdateDvsCapabilityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDvsCapabilityResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateExtension UpdateExtensionRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateExtension"] = reflect.TypeOf((*UpdateExtension)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateExtensionRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Extension Extension              `xml:"extension"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateExtensionRequestType"] = reflect.TypeOf((*UpdateExtensionRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateExtensionResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateFlags UpdateFlagsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateFlags"] = reflect.TypeOf((*UpdateFlags)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateFlagsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FlagInfo HostFlagInfo           `xml:"flagInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateFlagsRequestType"] = reflect.TypeOf((*UpdateFlagsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateFlagsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateGraphicsConfig UpdateGraphicsConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateGraphicsConfig"] = reflect.TypeOf((*UpdateGraphicsConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateGraphicsConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config HostGraphicsConfig     `xml:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateGraphicsConfigRequestType"] = reflect.TypeOf((*UpdateGraphicsConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateGraphicsConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostCustomizationsRequestType struct {
0000000000000000000000000000000000000000;;		This                ManagedObjectReference                  `xml:"_this"`
0000000000000000000000000000000000000000;;		HostToConfigSpecMap []HostProfileManagerHostToConfigSpecMap `xml:"hostToConfigSpecMap,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostCustomizationsRequestType"] = reflect.TypeOf((*UpdateHostCustomizationsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostCustomizations_Task UpdateHostCustomizationsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostCustomizations_Task"] = reflect.TypeOf((*UpdateHostCustomizations_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostCustomizations_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostImageAcceptanceLevel UpdateHostImageAcceptanceLevelRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostImageAcceptanceLevel"] = reflect.TypeOf((*UpdateHostImageAcceptanceLevel)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostImageAcceptanceLevelRequestType struct {
0000000000000000000000000000000000000000;;		This               ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		NewAcceptanceLevel string                 `xml:"newAcceptanceLevel"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostImageAcceptanceLevelRequestType"] = reflect.TypeOf((*UpdateHostImageAcceptanceLevelRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostImageAcceptanceLevelResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostProfile UpdateHostProfileRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostProfile"] = reflect.TypeOf((*UpdateHostProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostProfileRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference    `xml:"_this"`
0000000000000000000000000000000000000000;;		Config BaseHostProfileConfigSpec `xml:"config,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostProfileRequestType"] = reflect.TypeOf((*UpdateHostProfileRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostProfileResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostSpecification UpdateHostSpecificationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostSpecification"] = reflect.TypeOf((*UpdateHostSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostSpecificationRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostSpec HostSpecification      `xml:"hostSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostSpecificationRequestType"] = reflect.TypeOf((*UpdateHostSpecificationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostSpecificationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostSubSpecification UpdateHostSubSpecificationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostSubSpecification"] = reflect.TypeOf((*UpdateHostSubSpecification)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostSubSpecificationRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Host        ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		HostSubSpec HostSubSpecification   `xml:"hostSubSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateHostSubSpecificationRequestType"] = reflect.TypeOf((*UpdateHostSubSpecificationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostSubSpecificationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAdvancedOptions UpdateInternetScsiAdvancedOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiAdvancedOptions"] = reflect.TypeOf((*UpdateInternetScsiAdvancedOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAdvancedOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                          `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		TargetSet      *HostInternetScsiHbaTargetSet   `xml:"targetSet,omitempty"`
0000000000000000000000000000000000000000;;		Options        []HostInternetScsiHbaParamValue `xml:"options"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiAdvancedOptionsRequestType"] = reflect.TypeOf((*UpdateInternetScsiAdvancedOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAdvancedOptionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAlias UpdateInternetScsiAliasRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiAlias"] = reflect.TypeOf((*UpdateInternetScsiAlias)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAliasRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                 `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		IScsiAlias     string                 `xml:"iScsiAlias"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiAliasRequestType"] = reflect.TypeOf((*UpdateInternetScsiAliasRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAliasResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAuthenticationProperties UpdateInternetScsiAuthenticationPropertiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiAuthenticationProperties"] = reflect.TypeOf((*UpdateInternetScsiAuthenticationProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAuthenticationPropertiesRequestType struct {
0000000000000000000000000000000000000000;;		This                     ManagedObjectReference                      `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice           string                                      `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		AuthenticationProperties HostInternetScsiHbaAuthenticationProperties `xml:"authenticationProperties"`
0000000000000000000000000000000000000000;;		TargetSet                *HostInternetScsiHbaTargetSet               `xml:"targetSet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiAuthenticationPropertiesRequestType"] = reflect.TypeOf((*UpdateInternetScsiAuthenticationPropertiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiAuthenticationPropertiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiDigestProperties UpdateInternetScsiDigestPropertiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiDigestProperties"] = reflect.TypeOf((*UpdateInternetScsiDigestProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiDigestPropertiesRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference              `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice   string                              `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		TargetSet        *HostInternetScsiHbaTargetSet       `xml:"targetSet,omitempty"`
0000000000000000000000000000000000000000;;		DigestProperties HostInternetScsiHbaDigestProperties `xml:"digestProperties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiDigestPropertiesRequestType"] = reflect.TypeOf((*UpdateInternetScsiDigestPropertiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiDigestPropertiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiDiscoveryProperties UpdateInternetScsiDiscoveryPropertiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiDiscoveryProperties"] = reflect.TypeOf((*UpdateInternetScsiDiscoveryProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiDiscoveryPropertiesRequestType struct {
0000000000000000000000000000000000000000;;		This                ManagedObjectReference                 `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice      string                                 `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		DiscoveryProperties HostInternetScsiHbaDiscoveryProperties `xml:"discoveryProperties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiDiscoveryPropertiesRequestType"] = reflect.TypeOf((*UpdateInternetScsiDiscoveryPropertiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiDiscoveryPropertiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiIPProperties UpdateInternetScsiIPPropertiesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiIPProperties"] = reflect.TypeOf((*UpdateInternetScsiIPProperties)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiIPPropertiesRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference          `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                          `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		IpProperties   HostInternetScsiHbaIPProperties `xml:"ipProperties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiIPPropertiesRequestType"] = reflect.TypeOf((*UpdateInternetScsiIPPropertiesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiIPPropertiesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiName UpdateInternetScsiNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiName"] = reflect.TypeOf((*UpdateInternetScsiName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiNameRequestType struct {
0000000000000000000000000000000000000000;;		This           ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IScsiHbaDevice string                 `xml:"iScsiHbaDevice"`
0000000000000000000000000000000000000000;;		IScsiName      string                 `xml:"iScsiName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateInternetScsiNameRequestType"] = reflect.TypeOf((*UpdateInternetScsiNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateInternetScsiNameResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpConfig UpdateIpConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpConfig"] = reflect.TypeOf((*UpdateIpConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpConfigRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IpConfig HostIpConfig           `xml:"ipConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpConfigRequestType"] = reflect.TypeOf((*UpdateIpConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpPool UpdateIpPoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpPool"] = reflect.TypeOf((*UpdateIpPool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpPoolRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Dc   ManagedObjectReference `xml:"dc"`
0000000000000000000000000000000000000000;;		Pool IpPool                 `xml:"pool"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpPoolRequestType"] = reflect.TypeOf((*UpdateIpPoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpPoolResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpRouteConfig UpdateIpRouteConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpRouteConfig"] = reflect.TypeOf((*UpdateIpRouteConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpRouteConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config BaseHostIpRouteConfig  `xml:"config,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpRouteConfigRequestType"] = reflect.TypeOf((*UpdateIpRouteConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpRouteConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpRouteTableConfig UpdateIpRouteTableConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpRouteTableConfig"] = reflect.TypeOf((*UpdateIpRouteTableConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpRouteTableConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config HostIpRouteTableConfig `xml:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpRouteTableConfigRequestType"] = reflect.TypeOf((*UpdateIpRouteTableConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpRouteTableConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpmi UpdateIpmiRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpmi"] = reflect.TypeOf((*UpdateIpmi)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpmiRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		IpmiInfo HostIpmiInfo           `xml:"ipmiInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateIpmiRequestType"] = reflect.TypeOf((*UpdateIpmiRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIpmiResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateKmipServer UpdateKmipServerRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateKmipServer"] = reflect.TypeOf((*UpdateKmipServer)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateKmipServerRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Server KmipServerSpec         `xml:"server"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateKmipServerRequestType"] = reflect.TypeOf((*UpdateKmipServerRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateKmipServerResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateKmsSignedCsrClientCert UpdateKmsSignedCsrClientCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateKmsSignedCsrClientCert"] = reflect.TypeOf((*UpdateKmsSignedCsrClientCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateKmsSignedCsrClientCertRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster     KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;		Certificate string                 `xml:"certificate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateKmsSignedCsrClientCertRequestType"] = reflect.TypeOf((*UpdateKmsSignedCsrClientCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateKmsSignedCsrClientCertResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLicense UpdateLicenseRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLicense"] = reflect.TypeOf((*UpdateLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLicenseLabel UpdateLicenseLabelRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLicenseLabel"] = reflect.TypeOf((*UpdateLicenseLabel)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLicenseLabelRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LicenseKey string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;		LabelKey   string                 `xml:"labelKey"`
0000000000000000000000000000000000000000;;		LabelValue string                 `xml:"labelValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLicenseLabelRequestType"] = reflect.TypeOf((*UpdateLicenseLabelRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLicenseLabelResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLicenseRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LicenseKey string                 `xml:"licenseKey"`
0000000000000000000000000000000000000000;;		Labels     []KeyValue             `xml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLicenseRequestType"] = reflect.TypeOf((*UpdateLicenseRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLicenseResponse struct {
0000000000000000000000000000000000000000;;		Returnval LicenseManagerLicenseInfo `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLinkedChildren UpdateLinkedChildrenRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLinkedChildren"] = reflect.TypeOf((*UpdateLinkedChildren)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLinkedChildrenRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		AddChangeSet []VirtualAppLinkInfo     `xml:"addChangeSet,omitempty"`
0000000000000000000000000000000000000000;;		RemoveSet    []ManagedObjectReference `xml:"removeSet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLinkedChildrenRequestType"] = reflect.TypeOf((*UpdateLinkedChildrenRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLinkedChildrenResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLocalSwapDatastore UpdateLocalSwapDatastoreRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLocalSwapDatastore"] = reflect.TypeOf((*UpdateLocalSwapDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLocalSwapDatastoreRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLocalSwapDatastoreRequestType"] = reflect.TypeOf((*UpdateLocalSwapDatastoreRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLocalSwapDatastoreResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLockdownExceptions UpdateLockdownExceptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLockdownExceptions"] = reflect.TypeOf((*UpdateLockdownExceptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLockdownExceptionsRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Users []string               `xml:"users,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateLockdownExceptionsRequestType"] = reflect.TypeOf((*UpdateLockdownExceptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateLockdownExceptionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateModuleOptionString UpdateModuleOptionStringRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateModuleOptionString"] = reflect.TypeOf((*UpdateModuleOptionString)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateModuleOptionStringRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Name    string                 `xml:"name"`
0000000000000000000000000000000000000000;;		Options string                 `xml:"options"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateModuleOptionStringRequestType"] = reflect.TypeOf((*UpdateModuleOptionStringRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateModuleOptionStringResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateNetworkConfig UpdateNetworkConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateNetworkConfig"] = reflect.TypeOf((*UpdateNetworkConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateNetworkConfigRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config     HostNetworkConfig      `xml:"config"`
0000000000000000000000000000000000000000;;		ChangeMode string                 `xml:"changeMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateNetworkConfigRequestType"] = reflect.TypeOf((*UpdateNetworkConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateNetworkConfigResponse struct {
0000000000000000000000000000000000000000;;		Returnval HostNetworkConfigResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateNetworkResourcePool UpdateNetworkResourcePoolRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateNetworkResourcePool"] = reflect.TypeOf((*UpdateNetworkResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateNetworkResourcePoolRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference             `xml:"_this"`
0000000000000000000000000000000000000000;;		ConfigSpec []DVSNetworkResourcePoolConfigSpec `xml:"configSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateNetworkResourcePoolRequestType"] = reflect.TypeOf((*UpdateNetworkResourcePoolRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateNetworkResourcePoolResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateOptions UpdateOptionsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateOptions"] = reflect.TypeOf((*UpdateOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateOptionsRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ChangedValue []BaseOptionValue      `xml:"changedValue,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateOptionsRequestType"] = reflect.TypeOf((*UpdateOptionsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateOptionsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePassthruConfig UpdatePassthruConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePassthruConfig"] = reflect.TypeOf((*UpdatePassthruConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePassthruConfigRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference      `xml:"_this"`
0000000000000000000000000000000000000000;;		Config []BaseHostPciPassthruConfig `xml:"config,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePassthruConfigRequestType"] = reflect.TypeOf((*UpdatePassthruConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePassthruConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePerfInterval UpdatePerfIntervalRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePerfInterval"] = reflect.TypeOf((*UpdatePerfInterval)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePerfIntervalRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Interval PerfInterval           `xml:"interval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePerfIntervalRequestType"] = reflect.TypeOf((*UpdatePerfIntervalRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePerfIntervalResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePhysicalNicLinkSpeed UpdatePhysicalNicLinkSpeedRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePhysicalNicLinkSpeed"] = reflect.TypeOf((*UpdatePhysicalNicLinkSpeed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePhysicalNicLinkSpeedRequestType struct {
0000000000000000000000000000000000000000;;		This      ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device    string                 `xml:"device"`
0000000000000000000000000000000000000000;;		LinkSpeed *PhysicalNicLinkInfo   `xml:"linkSpeed,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePhysicalNicLinkSpeedRequestType"] = reflect.TypeOf((*UpdatePhysicalNicLinkSpeedRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePhysicalNicLinkSpeedResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePortGroup UpdatePortGroupRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePortGroup"] = reflect.TypeOf((*UpdatePortGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePortGroupRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PgName  string                 `xml:"pgName"`
0000000000000000000000000000000000000000;;		Portgrp HostPortGroupSpec      `xml:"portgrp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatePortGroupRequestType"] = reflect.TypeOf((*UpdatePortGroupRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatePortGroupResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateProgress UpdateProgressRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateProgress"] = reflect.TypeOf((*UpdateProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateProgressRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		PercentDone int32                  `xml:"percentDone"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateProgressRequestType"] = reflect.TypeOf((*UpdateProgressRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateProgressResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateReferenceHost UpdateReferenceHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateReferenceHost"] = reflect.TypeOf((*UpdateReferenceHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateReferenceHostRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateReferenceHostRequestType"] = reflect.TypeOf((*UpdateReferenceHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateReferenceHostResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateRuleset UpdateRulesetRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateRuleset"] = reflect.TypeOf((*UpdateRuleset)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateRulesetRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference         `xml:"_this"`
0000000000000000000000000000000000000000;;		Id   string                         `xml:"id"`
0000000000000000000000000000000000000000;;		Spec HostFirewallRulesetRulesetSpec `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateRulesetRequestType"] = reflect.TypeOf((*UpdateRulesetRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateRulesetResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateScsiLunDisplayName UpdateScsiLunDisplayNameRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateScsiLunDisplayName"] = reflect.TypeOf((*UpdateScsiLunDisplayName)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateScsiLunDisplayNameRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		LunUuid     string                 `xml:"lunUuid"`
0000000000000000000000000000000000000000;;		DisplayName string                 `xml:"displayName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateScsiLunDisplayNameRequestType"] = reflect.TypeOf((*UpdateScsiLunDisplayNameRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateScsiLunDisplayNameResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSelfSignedClientCert UpdateSelfSignedClientCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSelfSignedClientCert"] = reflect.TypeOf((*UpdateSelfSignedClientCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSelfSignedClientCertRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster     KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;		Certificate string                 `xml:"certificate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSelfSignedClientCertRequestType"] = reflect.TypeOf((*UpdateSelfSignedClientCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSelfSignedClientCertResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServiceConsoleVirtualNic UpdateServiceConsoleVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateServiceConsoleVirtualNic"] = reflect.TypeOf((*UpdateServiceConsoleVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServiceConsoleVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device string                 `xml:"device"`
0000000000000000000000000000000000000000;;		Nic    HostVirtualNicSpec     `xml:"nic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateServiceConsoleVirtualNicRequestType"] = reflect.TypeOf((*UpdateServiceConsoleVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServiceConsoleVirtualNicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServiceMessage UpdateServiceMessageRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateServiceMessage"] = reflect.TypeOf((*UpdateServiceMessage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServiceMessageRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Message string                 `xml:"message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateServiceMessageRequestType"] = reflect.TypeOf((*UpdateServiceMessageRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServiceMessageResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServicePolicy UpdateServicePolicyRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateServicePolicy"] = reflect.TypeOf((*UpdateServicePolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServicePolicyRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Id     string                 `xml:"id"`
0000000000000000000000000000000000000000;;		Policy string                 `xml:"policy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateServicePolicyRequestType"] = reflect.TypeOf((*UpdateServicePolicyRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateServicePolicyResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSet struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version   string                 `xml:"version"`
0000000000000000000000000000000000000000;;		FilterSet []PropertyFilterUpdate `xml:"filterSet,omitempty"`
0000000000000000000000000000000000000000;;		Truncated *bool                  `xml:"truncated"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSet"] = reflect.TypeOf((*UpdateSet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSoftwareInternetScsiEnabled UpdateSoftwareInternetScsiEnabledRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSoftwareInternetScsiEnabled"] = reflect.TypeOf((*UpdateSoftwareInternetScsiEnabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSoftwareInternetScsiEnabledRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Enabled bool                   `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSoftwareInternetScsiEnabledRequestType"] = reflect.TypeOf((*UpdateSoftwareInternetScsiEnabledRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSoftwareInternetScsiEnabledResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemResources UpdateSystemResourcesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSystemResources"] = reflect.TypeOf((*UpdateSystemResources)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemResourcesRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		ResourceInfo HostSystemResourceInfo `xml:"resourceInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSystemResourcesRequestType"] = reflect.TypeOf((*UpdateSystemResourcesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemResourcesResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemSwapConfiguration UpdateSystemSwapConfigurationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSystemSwapConfiguration"] = reflect.TypeOf((*UpdateSystemSwapConfiguration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemSwapConfigurationRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference      `xml:"_this"`
0000000000000000000000000000000000000000;;		SysSwapConfig HostSystemSwapConfiguration `xml:"sysSwapConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSystemSwapConfigurationRequestType"] = reflect.TypeOf((*UpdateSystemSwapConfigurationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemSwapConfigurationResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemUsers UpdateSystemUsersRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSystemUsers"] = reflect.TypeOf((*UpdateSystemUsers)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemUsersRequestType struct {
0000000000000000000000000000000000000000;;		This  ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Users []string               `xml:"users,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateSystemUsersRequestType"] = reflect.TypeOf((*UpdateSystemUsersRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateSystemUsersResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateUser UpdateUserRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateUser"] = reflect.TypeOf((*UpdateUser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateUserRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		User BaseHostAccountSpec    `xml:"user,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateUserRequestType"] = reflect.TypeOf((*UpdateUserRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateUserResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVAppConfig UpdateVAppConfigRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVAppConfig"] = reflect.TypeOf((*UpdateVAppConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVAppConfigRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Spec VAppConfigSpec         `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVAppConfigRequestType"] = reflect.TypeOf((*UpdateVAppConfigRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVAppConfigResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVVolVirtualMachineFilesRequestType struct {
0000000000000000000000000000000000000000;;		This         ManagedObjectReference               `xml:"_this"`
0000000000000000000000000000000000000000;;		FailoverPair []DatastoreVVolContainerFailoverPair `xml:"failoverPair,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVVolVirtualMachineFilesRequestType"] = reflect.TypeOf((*UpdateVVolVirtualMachineFilesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVVolVirtualMachineFiles_Task UpdateVVolVirtualMachineFilesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVVolVirtualMachineFiles_Task"] = reflect.TypeOf((*UpdateVVolVirtualMachineFiles_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVVolVirtualMachineFiles_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineFilesRequestType struct {
0000000000000000000000000000000000000000;;		This                      ManagedObjectReference            `xml:"_this"`
0000000000000000000000000000000000000000;;		MountPathDatastoreMapping []DatastoreMountPathDatastorePair `xml:"mountPathDatastoreMapping"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualMachineFilesRequestType"] = reflect.TypeOf((*UpdateVirtualMachineFilesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineFilesResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailedVmFile []UpdateVirtualMachineFilesResultFailedVmFileInfo `xml:"failedVmFile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualMachineFilesResult"] = reflect.TypeOf((*UpdateVirtualMachineFilesResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineFilesResultFailedVmFileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmFile string               `xml:"vmFile"`
0000000000000000000000000000000000000000;;		Fault  LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualMachineFilesResultFailedVmFileInfo"] = reflect.TypeOf((*UpdateVirtualMachineFilesResultFailedVmFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineFiles_Task UpdateVirtualMachineFilesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualMachineFiles_Task"] = reflect.TypeOf((*UpdateVirtualMachineFiles_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineFiles_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualNic UpdateVirtualNicRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualNic"] = reflect.TypeOf((*UpdateVirtualNic)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualNicRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Device string                 `xml:"device"`
0000000000000000000000000000000000000000;;		Nic    HostVirtualNicSpec     `xml:"nic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualNicRequestType"] = reflect.TypeOf((*UpdateVirtualNicRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualNicResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualSwitch UpdateVirtualSwitchRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualSwitch"] = reflect.TypeOf((*UpdateVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualSwitchRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VswitchName string                 `xml:"vswitchName"`
0000000000000000000000000000000000000000;;		Spec        HostVirtualSwitchSpec  `xml:"spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVirtualSwitchRequestType"] = reflect.TypeOf((*UpdateVirtualSwitchRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualSwitchResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVmfsUnmapPriority UpdateVmfsUnmapPriorityRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVmfsUnmapPriority"] = reflect.TypeOf((*UpdateVmfsUnmapPriority)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVmfsUnmapPriorityRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsUuid      string                 `xml:"vmfsUuid"`
0000000000000000000000000000000000000000;;		UnmapPriority string                 `xml:"unmapPriority"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVmfsUnmapPriorityRequestType"] = reflect.TypeOf((*UpdateVmfsUnmapPriorityRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVmfsUnmapPriorityResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVsanRequestType struct {
0000000000000000000000000000000000000000;;		This   ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Config VsanHostConfigInfo     `xml:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVsanRequestType"] = reflect.TypeOf((*UpdateVsanRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVsan_Task UpdateVsanRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdateVsan_Task"] = reflect.TypeOf((*UpdateVsan_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVsan_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdatedAgentBeingRestartedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpdatedAgentBeingRestartedEvent"] = reflect.TypeOf((*UpdatedAgentBeingRestartedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message string `xml:"message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeEvent"] = reflect.TypeOf((*UpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeIoFilterRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		FilterId string                 `xml:"filterId"`
0000000000000000000000000000000000000000;;		CompRes  ManagedObjectReference `xml:"compRes"`
0000000000000000000000000000000000000000;;		VibUrl   string                 `xml:"vibUrl"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeIoFilterRequestType"] = reflect.TypeOf((*UpgradeIoFilterRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeIoFilter_Task UpgradeIoFilterRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeIoFilter_Task"] = reflect.TypeOf((*UpgradeIoFilter_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeIoFilter_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeToolsRequestType struct {
0000000000000000000000000000000000000000;;		This             ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		InstallerOptions string                 `xml:"installerOptions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeToolsRequestType"] = reflect.TypeOf((*UpgradeToolsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeTools_Task UpgradeToolsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeTools_Task"] = reflect.TypeOf((*UpgradeTools_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeTools_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVMRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Version string                 `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVMRequestType"] = reflect.TypeOf((*UpgradeVMRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVM_Task UpgradeVMRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVM_Task"] = reflect.TypeOf((*UpgradeVM_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVM_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVmLayout UpgradeVmLayoutRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVmLayout"] = reflect.TypeOf((*UpgradeVmLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVmLayoutRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVmLayoutRequestType"] = reflect.TypeOf((*UpgradeVmLayoutRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVmLayoutResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVmfs UpgradeVmfsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVmfs"] = reflect.TypeOf((*UpgradeVmfs)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVmfsRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		VmfsPath string                 `xml:"vmfsPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVmfsRequestType"] = reflect.TypeOf((*UpgradeVmfsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVmfsResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVsanObjects UpgradeVsanObjectsRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVsanObjects"] = reflect.TypeOf((*UpgradeVsanObjects)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVsanObjectsRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Uuids      []string               `xml:"uuids"`
0000000000000000000000000000000000000000;;		NewVersion int32                  `xml:"newVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UpgradeVsanObjectsRequestType"] = reflect.TypeOf((*UpgradeVsanObjectsRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpgradeVsanObjectsResponse struct {
0000000000000000000000000000000000000000;;		Returnval []HostVsanInternalSystemVsanObjectOperationResult `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UplinkPortMtuNotSupportEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UplinkPortMtuNotSupportEvent"] = reflect.TypeOf((*UplinkPortMtuNotSupportEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UplinkPortMtuSupportEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UplinkPortMtuSupportEvent"] = reflect.TypeOf((*UplinkPortMtuSupportEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UplinkPortVlanTrunkedEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UplinkPortVlanTrunkedEvent"] = reflect.TypeOf((*UplinkPortVlanTrunkedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UplinkPortVlanUntrunkedEvent struct {
0000000000000000000000000000000000000000;;		DvsHealthStatusChangeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UplinkPortVlanUntrunkedEvent"] = reflect.TypeOf((*UplinkPortVlanUntrunkedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadClientCert UploadClientCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UploadClientCert"] = reflect.TypeOf((*UploadClientCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadClientCertRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster     KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;		Certificate string                 `xml:"certificate"`
0000000000000000000000000000000000000000;;		PrivateKey  string                 `xml:"privateKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UploadClientCertRequestType"] = reflect.TypeOf((*UploadClientCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadClientCertResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadKmipServerCert UploadKmipServerCertRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UploadKmipServerCert"] = reflect.TypeOf((*UploadKmipServerCert)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadKmipServerCertRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Cluster     KeyProviderId          `xml:"cluster"`
0000000000000000000000000000000000000000;;		Certificate string                 `xml:"certificate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UploadKmipServerCertRequestType"] = reflect.TypeOf((*UploadKmipServerCertRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadKmipServerCertResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UsbScanCodeSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyEvents []UsbScanCodeSpecKeyEvent `xml:"keyEvents"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UsbScanCodeSpec"] = reflect.TypeOf((*UsbScanCodeSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UsbScanCodeSpecKeyEvent struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UsbHidCode int32                        `xml:"usbHidCode"`
0000000000000000000000000000000000000000;;		Modifiers  *UsbScanCodeSpecModifierType `xml:"modifiers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UsbScanCodeSpecKeyEvent"] = reflect.TypeOf((*UsbScanCodeSpecKeyEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UsbScanCodeSpecModifierType struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LeftControl  *bool `xml:"leftControl"`
0000000000000000000000000000000000000000;;		LeftShift    *bool `xml:"leftShift"`
0000000000000000000000000000000000000000;;		LeftAlt      *bool `xml:"leftAlt"`
0000000000000000000000000000000000000000;;		LeftGui      *bool `xml:"leftGui"`
0000000000000000000000000000000000000000;;		RightControl *bool `xml:"rightControl"`
0000000000000000000000000000000000000000;;		RightShift   *bool `xml:"rightShift"`
0000000000000000000000000000000000000000;;		RightAlt     *bool `xml:"rightAlt"`
0000000000000000000000000000000000000000;;		RightGui     *bool `xml:"rightGui"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UsbScanCodeSpecModifierType"] = reflect.TypeOf((*UsbScanCodeSpecModifierType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserAssignedToGroup struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserLogin string `xml:"userLogin"`
0000000000000000000000000000000000000000;;		Group     string `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserAssignedToGroup"] = reflect.TypeOf((*UserAssignedToGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserGroupProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserGroupProfile"] = reflect.TypeOf((*UserGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserInputRequiredParameterMetadata struct {
0000000000000000000000000000000000000000;;		ProfilePolicyOptionMetadata
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserInputParameter []ProfileParameterMetadata `xml:"userInputParameter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserInputRequiredParameterMetadata"] = reflect.TypeOf((*UserInputRequiredParameterMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserLoginSessionEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `xml:"ipAddress"`
0000000000000000000000000000000000000000;;		UserAgent string `xml:"userAgent,omitempty"`
0000000000000000000000000000000000000000;;		Locale    string `xml:"locale"`
0000000000000000000000000000000000000000;;		SessionId string `xml:"sessionId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserLoginSessionEvent"] = reflect.TypeOf((*UserLoginSessionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserLogoutSessionEvent struct {
0000000000000000000000000000000000000000;;		SessionEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string     `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		UserAgent string     `xml:"userAgent,omitempty"`
0000000000000000000000000000000000000000;;		CallCount int64      `xml:"callCount,omitempty"`
0000000000000000000000000000000000000000;;		SessionId string     `xml:"sessionId,omitempty"`
0000000000000000000000000000000000000000;;		LoginTime *time.Time `xml:"loginTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserLogoutSessionEvent"] = reflect.TypeOf((*UserLogoutSessionEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserNotFound struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Principal  string `xml:"principal"`
0000000000000000000000000000000000000000;;		Unresolved bool   `xml:"unresolved"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserNotFound"] = reflect.TypeOf((*UserNotFound)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserNotFoundFault UserNotFound
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserNotFoundFault"] = reflect.TypeOf((*UserNotFoundFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserPasswordChanged struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserLogin string `xml:"userLogin"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserPasswordChanged"] = reflect.TypeOf((*UserPasswordChanged)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserPrivilegeResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entity     ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Privileges []string               `xml:"privileges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserPrivilegeResult"] = reflect.TypeOf((*UserPrivilegeResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserProfile"] = reflect.TypeOf((*UserProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserSearchResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Principal string `xml:"principal"`
0000000000000000000000000000000000000000;;		FullName  string `xml:"fullName,omitempty"`
0000000000000000000000000000000000000000;;		Group     bool   `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserSearchResult"] = reflect.TypeOf((*UserSearchResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserSession struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              string    `xml:"key"`
0000000000000000000000000000000000000000;;		UserName         string    `xml:"userName"`
0000000000000000000000000000000000000000;;		FullName         string    `xml:"fullName"`
0000000000000000000000000000000000000000;;		LoginTime        time.Time `xml:"loginTime"`
0000000000000000000000000000000000000000;;		LastActiveTime   time.Time `xml:"lastActiveTime"`
0000000000000000000000000000000000000000;;		Locale           string    `xml:"locale"`
0000000000000000000000000000000000000000;;		MessageLocale    string    `xml:"messageLocale"`
0000000000000000000000000000000000000000;;		ExtensionSession *bool     `xml:"extensionSession"`
0000000000000000000000000000000000000000;;		IpAddress        string    `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		UserAgent        string    `xml:"userAgent,omitempty"`
0000000000000000000000000000000000000000;;		CallCount        int64     `xml:"callCount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserSession"] = reflect.TypeOf((*UserSession)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserUnassignedFromGroup struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserLogin string `xml:"userLogin"`
0000000000000000000000000000000000000000;;		Group     string `xml:"group"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserUnassignedFromGroup"] = reflect.TypeOf((*UserUnassignedFromGroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserUpgradeEvent struct {
0000000000000000000000000000000000000000;;		UpgradeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserUpgradeEvent"] = reflect.TypeOf((*UserUpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VASAStorageArray struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name     string `xml:"name"`
0000000000000000000000000000000000000000;;		Uuid     string `xml:"uuid"`
0000000000000000000000000000000000000000;;		VendorId string `xml:"vendorId"`
0000000000000000000000000000000000000000;;		ModelId  string `xml:"modelId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VASAStorageArray"] = reflect.TypeOf((*VASAStorageArray)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppCloneSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Location        ManagedObjectReference            `xml:"location"`
0000000000000000000000000000000000000000;;		Host            *ManagedObjectReference           `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		ResourceSpec    *ResourceConfigSpec               `xml:"resourceSpec,omitempty"`
0000000000000000000000000000000000000000;;		VmFolder        *ManagedObjectReference           `xml:"vmFolder,omitempty"`
0000000000000000000000000000000000000000;;		NetworkMapping  []VAppCloneSpecNetworkMappingPair `xml:"networkMapping,omitempty"`
0000000000000000000000000000000000000000;;		Property        []KeyValue                        `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;		ResourceMapping []VAppCloneSpecResourceMap        `xml:"resourceMapping,omitempty"`
0000000000000000000000000000000000000000;;		Provisioning    string                            `xml:"provisioning,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppCloneSpec"] = reflect.TypeOf((*VAppCloneSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppCloneSpecNetworkMappingPair struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source      ManagedObjectReference `xml:"source"`
0000000000000000000000000000000000000000;;		Destination ManagedObjectReference `xml:"destination"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppCloneSpecNetworkMappingPair"] = reflect.TypeOf((*VAppCloneSpecNetworkMappingPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppCloneSpecResourceMap struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source       ManagedObjectReference  `xml:"source"`
0000000000000000000000000000000000000000;;		Parent       *ManagedObjectReference `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		ResourceSpec *ResourceConfigSpec     `xml:"resourceSpec,omitempty"`
0000000000000000000000000000000000000000;;		Location     *ManagedObjectReference `xml:"location,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppCloneSpecResourceMap"] = reflect.TypeOf((*VAppCloneSpecResourceMap)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppConfigFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppConfigFault"] = reflect.TypeOf((*VAppConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppConfigFaultFault BaseVAppConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppConfigFaultFault"] = reflect.TypeOf((*VAppConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppConfigInfo struct {
0000000000000000000000000000000000000000;;		VmConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityConfig []VAppEntityConfigInfo `xml:"entityConfig,omitempty"`
0000000000000000000000000000000000000000;;		Annotation   string                 `xml:"annotation"`
0000000000000000000000000000000000000000;;		InstanceUuid string                 `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;		ManagedBy    *ManagedByInfo         `xml:"managedBy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppConfigInfo"] = reflect.TypeOf((*VAppConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppConfigSpec struct {
0000000000000000000000000000000000000000;;		VmConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityConfig []VAppEntityConfigInfo `xml:"entityConfig,omitempty"`
0000000000000000000000000000000000000000;;		Annotation   string                 `xml:"annotation,omitempty"`
0000000000000000000000000000000000000000;;		InstanceUuid string                 `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;		ManagedBy    *ManagedByInfo         `xml:"managedBy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppConfigSpec"] = reflect.TypeOf((*VAppConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppEntityConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key               *ManagedObjectReference `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Tag               string                  `xml:"tag,omitempty"`
0000000000000000000000000000000000000000;;		StartOrder        int32                   `xml:"startOrder,omitempty"`
0000000000000000000000000000000000000000;;		StartDelay        int32                   `xml:"startDelay,omitempty"`
0000000000000000000000000000000000000000;;		WaitingForGuest   *bool                   `xml:"waitingForGuest"`
0000000000000000000000000000000000000000;;		StartAction       string                  `xml:"startAction,omitempty"`
0000000000000000000000000000000000000000;;		StopDelay         int32                   `xml:"stopDelay,omitempty"`
0000000000000000000000000000000000000000;;		StopAction        string                  `xml:"stopAction,omitempty"`
0000000000000000000000000000000000000000;;		DestroyWithParent *bool                   `xml:"destroyWithParent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppEntityConfigInfo"] = reflect.TypeOf((*VAppEntityConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppIPAssignmentInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SupportedAllocationScheme []string `xml:"supportedAllocationScheme,omitempty"`
0000000000000000000000000000000000000000;;		IpAllocationPolicy        string   `xml:"ipAllocationPolicy,omitempty"`
0000000000000000000000000000000000000000;;		SupportedIpProtocol       []string `xml:"supportedIpProtocol,omitempty"`
0000000000000000000000000000000000000000;;		IpProtocol                string   `xml:"ipProtocol,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppIPAssignmentInfo"] = reflect.TypeOf((*VAppIPAssignmentInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppNotRunning struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppNotRunning"] = reflect.TypeOf((*VAppNotRunning)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppNotRunningFault VAppNotRunning
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppNotRunningFault"] = reflect.TypeOf((*VAppNotRunningFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppOperationInProgress struct {
0000000000000000000000000000000000000000;;		RuntimeFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppOperationInProgress"] = reflect.TypeOf((*VAppOperationInProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppOperationInProgressFault VAppOperationInProgress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppOperationInProgressFault"] = reflect.TypeOf((*VAppOperationInProgressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppOvfSectionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key             int32  `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Namespace       string `xml:"namespace,omitempty"`
0000000000000000000000000000000000000000;;		Type            string `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		AtEnvelopeLevel *bool  `xml:"atEnvelopeLevel"`
0000000000000000000000000000000000000000;;		Contents        string `xml:"contents,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppOvfSectionInfo"] = reflect.TypeOf((*VAppOvfSectionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppOvfSectionSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *VAppOvfSectionInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppOvfSectionSpec"] = reflect.TypeOf((*VAppOvfSectionSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppProductInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         int32  `xml:"key"`
0000000000000000000000000000000000000000;;		ClassId     string `xml:"classId,omitempty"`
0000000000000000000000000000000000000000;;		InstanceId  string `xml:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;		Name        string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Vendor      string `xml:"vendor,omitempty"`
0000000000000000000000000000000000000000;;		Version     string `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;		FullVersion string `xml:"fullVersion,omitempty"`
0000000000000000000000000000000000000000;;		VendorUrl   string `xml:"vendorUrl,omitempty"`
0000000000000000000000000000000000000000;;		ProductUrl  string `xml:"productUrl,omitempty"`
0000000000000000000000000000000000000000;;		AppUrl      string `xml:"appUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppProductInfo"] = reflect.TypeOf((*VAppProductInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppProductSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *VAppProductInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppProductSpec"] = reflect.TypeOf((*VAppProductSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppPropertyFault struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id       string `xml:"id"`
0000000000000000000000000000000000000000;;		Category string `xml:"category"`
0000000000000000000000000000000000000000;;		Label    string `xml:"label"`
0000000000000000000000000000000000000000;;		Type     string `xml:"type"`
0000000000000000000000000000000000000000;;		Value    string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppPropertyFault"] = reflect.TypeOf((*VAppPropertyFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppPropertyFaultFault BaseVAppPropertyFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppPropertyFaultFault"] = reflect.TypeOf((*VAppPropertyFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppPropertyInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              int32  `xml:"key"`
0000000000000000000000000000000000000000;;		ClassId          string `xml:"classId,omitempty"`
0000000000000000000000000000000000000000;;		InstanceId       string `xml:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;		Id               string `xml:"id,omitempty"`
0000000000000000000000000000000000000000;;		Category         string `xml:"category,omitempty"`
0000000000000000000000000000000000000000;;		Label            string `xml:"label,omitempty"`
0000000000000000000000000000000000000000;;		Type             string `xml:"type,omitempty"`
0000000000000000000000000000000000000000;;		TypeReference    string `xml:"typeReference,omitempty"`
0000000000000000000000000000000000000000;;		UserConfigurable *bool  `xml:"userConfigurable"`
0000000000000000000000000000000000000000;;		DefaultValue     string `xml:"defaultValue,omitempty"`
0000000000000000000000000000000000000000;;		Value            string `xml:"value,omitempty"`
0000000000000000000000000000000000000000;;		Description      string `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppPropertyInfo"] = reflect.TypeOf((*VAppPropertyInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppPropertySpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *VAppPropertyInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppPropertySpec"] = reflect.TypeOf((*VAppPropertySpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppTaskInProgress struct {
0000000000000000000000000000000000000000;;		TaskInProgress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppTaskInProgress"] = reflect.TypeOf((*VAppTaskInProgress)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VAppTaskInProgressFault VAppTaskInProgress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VAppTaskInProgressFault"] = reflect.TypeOf((*VAppTaskInProgressFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VFlashCacheHotConfigNotSupported struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VFlashCacheHotConfigNotSupported"] = reflect.TypeOf((*VFlashCacheHotConfigNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VFlashCacheHotConfigNotSupportedFault VFlashCacheHotConfigNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VFlashCacheHotConfigNotSupportedFault"] = reflect.TypeOf((*VFlashCacheHotConfigNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VFlashModuleNotSupported struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName     string `xml:"vmName"`
0000000000000000000000000000000000000000;;		ModuleName string `xml:"moduleName"`
0000000000000000000000000000000000000000;;		Reason     string `xml:"reason"`
0000000000000000000000000000000000000000;;		HostName   string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VFlashModuleNotSupported"] = reflect.TypeOf((*VFlashModuleNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VFlashModuleNotSupportedFault VFlashModuleNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VFlashModuleNotSupportedFault"] = reflect.TypeOf((*VFlashModuleNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VFlashModuleVersionIncompatible struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ModuleName             string `xml:"moduleName"`
0000000000000000000000000000000000000000;;		VmRequestModuleVersion string `xml:"vmRequestModuleVersion"`
0000000000000000000000000000000000000000;;		HostMinSupportedVerson string `xml:"hostMinSupportedVerson"`
0000000000000000000000000000000000000000;;		HostModuleVersion      string `xml:"hostModuleVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VFlashModuleVersionIncompatible"] = reflect.TypeOf((*VFlashModuleVersionIncompatible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VFlashModuleVersionIncompatibleFault VFlashModuleVersionIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VFlashModuleVersionIncompatibleFault"] = reflect.TypeOf((*VFlashModuleVersionIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMFSDatastoreCreatedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore    DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;		DatastoreUrl string                 `xml:"datastoreUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMFSDatastoreCreatedEvent"] = reflect.TypeOf((*VMFSDatastoreCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMFSDatastoreExpandedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMFSDatastoreExpandedEvent"] = reflect.TypeOf((*VMFSDatastoreExpandedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMFSDatastoreExtendedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore DatastoreEventArgument `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMFSDatastoreExtendedEvent"] = reflect.TypeOf((*VMFSDatastoreExtendedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMINotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMINotSupported"] = reflect.TypeOf((*VMINotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMINotSupportedFault VMINotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMINotSupportedFault"] = reflect.TypeOf((*VMINotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMOnConflictDVPort struct {
0000000000000000000000000000000000000000;;		CannotAccessNetwork
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMOnConflictDVPort"] = reflect.TypeOf((*VMOnConflictDVPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMOnConflictDVPortFault VMOnConflictDVPort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMOnConflictDVPortFault"] = reflect.TypeOf((*VMOnConflictDVPortFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMOnVirtualIntranet struct {
0000000000000000000000000000000000000000;;		CannotAccessNetwork
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMOnVirtualIntranet"] = reflect.TypeOf((*VMOnVirtualIntranet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMOnVirtualIntranetFault VMOnVirtualIntranet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMOnVirtualIntranetFault"] = reflect.TypeOf((*VMOnVirtualIntranetFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionAcrossNetworkNotSupported struct {
0000000000000000000000000000000000000000;;		MigrationFeatureNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionAcrossNetworkNotSupported"] = reflect.TypeOf((*VMotionAcrossNetworkNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionAcrossNetworkNotSupportedFault VMotionAcrossNetworkNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionAcrossNetworkNotSupportedFault"] = reflect.TypeOf((*VMotionAcrossNetworkNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionInterfaceIssue struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AtSourceHost     bool                    `xml:"atSourceHost"`
0000000000000000000000000000000000000000;;		FailedHost       string                  `xml:"failedHost"`
0000000000000000000000000000000000000000;;		FailedHostEntity *ManagedObjectReference `xml:"failedHostEntity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionInterfaceIssue"] = reflect.TypeOf((*VMotionInterfaceIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionInterfaceIssueFault BaseVMotionInterfaceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionInterfaceIssueFault"] = reflect.TypeOf((*VMotionInterfaceIssueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionLicenseExpiredEvent struct {
0000000000000000000000000000000000000000;;		LicenseEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionLicenseExpiredEvent"] = reflect.TypeOf((*VMotionLicenseExpiredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionLinkCapacityLow struct {
0000000000000000000000000000000000000000;;		VMotionInterfaceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network string `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionLinkCapacityLow"] = reflect.TypeOf((*VMotionLinkCapacityLow)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionLinkCapacityLowFault VMotionLinkCapacityLow
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionLinkCapacityLowFault"] = reflect.TypeOf((*VMotionLinkCapacityLowFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionLinkDown struct {
0000000000000000000000000000000000000000;;		VMotionInterfaceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network string `xml:"network"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionLinkDown"] = reflect.TypeOf((*VMotionLinkDown)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionLinkDownFault VMotionLinkDown
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionLinkDownFault"] = reflect.TypeOf((*VMotionLinkDownFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionNotConfigured struct {
0000000000000000000000000000000000000000;;		VMotionInterfaceIssue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionNotConfigured"] = reflect.TypeOf((*VMotionNotConfigured)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionNotConfiguredFault VMotionNotConfigured
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionNotConfiguredFault"] = reflect.TypeOf((*VMotionNotConfiguredFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionNotLicensed struct {
0000000000000000000000000000000000000000;;		VMotionInterfaceIssue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionNotLicensed"] = reflect.TypeOf((*VMotionNotLicensed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionNotLicensedFault VMotionNotLicensed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionNotLicensedFault"] = reflect.TypeOf((*VMotionNotLicensedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionNotSupported struct {
0000000000000000000000000000000000000000;;		VMotionInterfaceIssue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionNotSupported"] = reflect.TypeOf((*VMotionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionNotSupportedFault VMotionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionNotSupportedFault"] = reflect.TypeOf((*VMotionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionProtocolIncompatible struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionProtocolIncompatible"] = reflect.TypeOf((*VMotionProtocolIncompatible)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMotionProtocolIncompatibleFault VMotionProtocolIncompatible
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMotionProtocolIncompatibleFault"] = reflect.TypeOf((*VMotionProtocolIncompatibleFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSConfigInfo struct {
0000000000000000000000000000000000000000;;		DVSConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSession                []VMwareVspanSession         `xml:"vspanSession,omitempty"`
0000000000000000000000000000000000000000;;		PvlanConfig                 []VMwareDVSPvlanMapEntry     `xml:"pvlanConfig,omitempty"`
0000000000000000000000000000000000000000;;		MaxMtu                      int32                        `xml:"maxMtu"`
0000000000000000000000000000000000000000;;		LinkDiscoveryProtocolConfig *LinkDiscoveryProtocolConfig `xml:"linkDiscoveryProtocolConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpfixConfig                 *VMwareIpfixConfig           `xml:"ipfixConfig,omitempty"`
0000000000000000000000000000000000000000;;		LacpGroupConfig             []VMwareDvsLacpGroupConfig   `xml:"lacpGroupConfig,omitempty"`
0000000000000000000000000000000000000000;;		LacpApiVersion              string                       `xml:"lacpApiVersion,omitempty"`
0000000000000000000000000000000000000000;;		MulticastFilteringMode      string                       `xml:"multicastFilteringMode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSConfigInfo"] = reflect.TypeOf((*VMwareDVSConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSConfigSpec struct {
0000000000000000000000000000000000000000;;		DVSConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PvlanConfigSpec             []VMwareDVSPvlanConfigSpec   `xml:"pvlanConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		VspanConfigSpec             []VMwareDVSVspanConfigSpec   `xml:"vspanConfigSpec,omitempty"`
0000000000000000000000000000000000000000;;		MaxMtu                      int32                        `xml:"maxMtu,omitempty"`
0000000000000000000000000000000000000000;;		LinkDiscoveryProtocolConfig *LinkDiscoveryProtocolConfig `xml:"linkDiscoveryProtocolConfig,omitempty"`
0000000000000000000000000000000000000000;;		IpfixConfig                 *VMwareIpfixConfig           `xml:"ipfixConfig,omitempty"`
0000000000000000000000000000000000000000;;		LacpApiVersion              string                       `xml:"lacpApiVersion,omitempty"`
0000000000000000000000000000000000000000;;		MulticastFilteringMode      string                       `xml:"multicastFilteringMode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSConfigSpec"] = reflect.TypeOf((*VMwareDVSConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSFeatureCapability struct {
0000000000000000000000000000000000000000;;		DVSFeatureCapability
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSupported             *bool                     `xml:"vspanSupported"`
0000000000000000000000000000000000000000;;		LldpSupported              *bool                     `xml:"lldpSupported"`
0000000000000000000000000000000000000000;;		IpfixSupported             *bool                     `xml:"ipfixSupported"`
0000000000000000000000000000000000000000;;		IpfixCapability            *VMwareDvsIpfixCapability `xml:"ipfixCapability,omitempty"`
0000000000000000000000000000000000000000;;		MulticastSnoopingSupported *bool                     `xml:"multicastSnoopingSupported"`
0000000000000000000000000000000000000000;;		VspanCapability            *VMwareDVSVspanCapability `xml:"vspanCapability,omitempty"`
0000000000000000000000000000000000000000;;		LacpCapability             *VMwareDvsLacpCapability  `xml:"lacpCapability,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSFeatureCapability"] = reflect.TypeOf((*VMwareDVSFeatureCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSHealthCheckCapability struct {
0000000000000000000000000000000000000000;;		DVSHealthCheckCapability
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanMtuSupported bool `xml:"vlanMtuSupported"`
0000000000000000000000000000000000000000;;		TeamingSupported bool `xml:"teamingSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSHealthCheckCapability"] = reflect.TypeOf((*VMwareDVSHealthCheckCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSHealthCheckConfig struct {
0000000000000000000000000000000000000000;;		DVSHealthCheckConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSHealthCheckConfig"] = reflect.TypeOf((*VMwareDVSHealthCheckConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSMtuHealthCheckResult struct {
0000000000000000000000000000000000000000;;		HostMemberUplinkHealthCheckResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MtuMismatch             bool           `xml:"mtuMismatch"`
0000000000000000000000000000000000000000;;		VlanSupportSwitchMtu    []NumericRange `xml:"vlanSupportSwitchMtu,omitempty"`
0000000000000000000000000000000000000000;;		VlanNotSupportSwitchMtu []NumericRange `xml:"vlanNotSupportSwitchMtu,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSMtuHealthCheckResult"] = reflect.TypeOf((*VMwareDVSMtuHealthCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSPortSetting struct {
0000000000000000000000000000000000000000;;		DVPortSetting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vlan                BaseVmwareDistributedVirtualSwitchVlanSpec `xml:"vlan,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		QosTag              *IntPolicy                                 `xml:"qosTag,omitempty"`
0000000000000000000000000000000000000000;;		UplinkTeamingPolicy *VmwareUplinkPortTeamingPolicy             `xml:"uplinkTeamingPolicy,omitempty"`
0000000000000000000000000000000000000000;;		SecurityPolicy      *DVSSecurityPolicy                         `xml:"securityPolicy,omitempty"`
0000000000000000000000000000000000000000;;		IpfixEnabled        *BoolPolicy                                `xml:"ipfixEnabled,omitempty"`
0000000000000000000000000000000000000000;;		TxUplink            *BoolPolicy                                `xml:"txUplink,omitempty"`
0000000000000000000000000000000000000000;;		LacpPolicy          *VMwareUplinkLacpPolicy                    `xml:"lacpPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSPortSetting"] = reflect.TypeOf((*VMwareDVSPortSetting)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSPortgroupPolicy struct {
0000000000000000000000000000000000000000;;		DVPortgroupPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanOverrideAllowed           bool  `xml:"vlanOverrideAllowed"`
0000000000000000000000000000000000000000;;		UplinkTeamingOverrideAllowed  bool  `xml:"uplinkTeamingOverrideAllowed"`
0000000000000000000000000000000000000000;;		SecurityPolicyOverrideAllowed bool  `xml:"securityPolicyOverrideAllowed"`
0000000000000000000000000000000000000000;;		IpfixOverrideAllowed          *bool `xml:"ipfixOverrideAllowed"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSPortgroupPolicy"] = reflect.TypeOf((*VMwareDVSPortgroupPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSPvlanConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PvlanEntry VMwareDVSPvlanMapEntry `xml:"pvlanEntry"`
0000000000000000000000000000000000000000;;		Operation  string                 `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSPvlanConfigSpec"] = reflect.TypeOf((*VMwareDVSPvlanConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSPvlanMapEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrimaryVlanId   int32  `xml:"primaryVlanId"`
0000000000000000000000000000000000000000;;		SecondaryVlanId int32  `xml:"secondaryVlanId"`
0000000000000000000000000000000000000000;;		PvlanType       string `xml:"pvlanType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSPvlanMapEntry"] = reflect.TypeOf((*VMwareDVSPvlanMapEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSTeamingHealthCheckConfig struct {
0000000000000000000000000000000000000000;;		VMwareDVSHealthCheckConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSTeamingHealthCheckConfig"] = reflect.TypeOf((*VMwareDVSTeamingHealthCheckConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSTeamingHealthCheckResult struct {
0000000000000000000000000000000000000000;;		HostMemberHealthCheckResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TeamingStatus string `xml:"teamingStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSTeamingHealthCheckResult"] = reflect.TypeOf((*VMwareDVSTeamingHealthCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSVlanHealthCheckResult struct {
0000000000000000000000000000000000000000;;		HostMemberUplinkHealthCheckResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TrunkedVlan   []NumericRange `xml:"trunkedVlan,omitempty"`
0000000000000000000000000000000000000000;;		UntrunkedVlan []NumericRange `xml:"untrunkedVlan,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSVlanHealthCheckResult"] = reflect.TypeOf((*VMwareDVSVlanHealthCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSVlanMtuHealthCheckConfig struct {
0000000000000000000000000000000000000000;;		VMwareDVSHealthCheckConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSVlanMtuHealthCheckConfig"] = reflect.TypeOf((*VMwareDVSVlanMtuHealthCheckConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSVspanCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MixedDestSupported         bool  `xml:"mixedDestSupported"`
0000000000000000000000000000000000000000;;		DvportSupported            bool  `xml:"dvportSupported"`
0000000000000000000000000000000000000000;;		RemoteSourceSupported      bool  `xml:"remoteSourceSupported"`
0000000000000000000000000000000000000000;;		RemoteDestSupported        bool  `xml:"remoteDestSupported"`
0000000000000000000000000000000000000000;;		EncapRemoteSourceSupported bool  `xml:"encapRemoteSourceSupported"`
0000000000000000000000000000000000000000;;		ErspanProtocolSupported    *bool `xml:"erspanProtocolSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSVspanCapability"] = reflect.TypeOf((*VMwareDVSVspanCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDVSVspanConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSession VMwareVspanSession `xml:"vspanSession"`
0000000000000000000000000000000000000000;;		Operation    string             `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDVSVspanConfigSpec"] = reflect.TypeOf((*VMwareDVSVspanConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDvsIpfixCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpfixSupported               *bool `xml:"ipfixSupported"`
0000000000000000000000000000000000000000;;		Ipv6ForIpfixSupported        *bool `xml:"ipv6ForIpfixSupported"`
0000000000000000000000000000000000000000;;		ObservationDomainIdSupported *bool `xml:"observationDomainIdSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDvsIpfixCapability"] = reflect.TypeOf((*VMwareDvsIpfixCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDvsLacpCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LacpSupported           *bool `xml:"lacpSupported"`
0000000000000000000000000000000000000000;;		MultiLacpGroupSupported *bool `xml:"multiLacpGroupSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDvsLacpCapability"] = reflect.TypeOf((*VMwareDvsLacpCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDvsLacpGroupConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                  string                   `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string                   `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Mode                 string                   `xml:"mode,omitempty"`
0000000000000000000000000000000000000000;;		UplinkNum            int32                    `xml:"uplinkNum,omitempty"`
0000000000000000000000000000000000000000;;		LoadbalanceAlgorithm string                   `xml:"loadbalanceAlgorithm,omitempty"`
0000000000000000000000000000000000000000;;		Vlan                 *VMwareDvsLagVlanConfig  `xml:"vlan,omitempty"`
0000000000000000000000000000000000000000;;		Ipfix                *VMwareDvsLagIpfixConfig `xml:"ipfix,omitempty"`
0000000000000000000000000000000000000000;;		UplinkName           []string                 `xml:"uplinkName,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPortKey        []string                 `xml:"uplinkPortKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDvsLacpGroupConfig"] = reflect.TypeOf((*VMwareDvsLacpGroupConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDvsLacpGroupSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LacpGroupConfig VMwareDvsLacpGroupConfig `xml:"lacpGroupConfig"`
0000000000000000000000000000000000000000;;		Operation       string                   `xml:"operation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDvsLacpGroupSpec"] = reflect.TypeOf((*VMwareDvsLacpGroupSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDvsLagIpfixConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpfixEnabled *bool `xml:"ipfixEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDvsLagIpfixConfig"] = reflect.TypeOf((*VMwareDvsLagIpfixConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareDvsLagVlanConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanId []NumericRange `xml:"vlanId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareDvsLagVlanConfig"] = reflect.TypeOf((*VMwareDvsLagVlanConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareIpfixConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CollectorIpAddress  string `xml:"collectorIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		CollectorPort       int32  `xml:"collectorPort,omitempty"`
0000000000000000000000000000000000000000;;		ObservationDomainId int64  `xml:"observationDomainId,omitempty"`
0000000000000000000000000000000000000000;;		ActiveFlowTimeout   int32  `xml:"activeFlowTimeout"`
0000000000000000000000000000000000000000;;		IdleFlowTimeout     int32  `xml:"idleFlowTimeout"`
0000000000000000000000000000000000000000;;		SamplingRate        int32  `xml:"samplingRate"`
0000000000000000000000000000000000000000;;		InternalFlowsOnly   bool   `xml:"internalFlowsOnly"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareIpfixConfig"] = reflect.TypeOf((*VMwareIpfixConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareUplinkLacpPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enable *BoolPolicy   `xml:"enable,omitempty"`
0000000000000000000000000000000000000000;;		Mode   *StringPolicy `xml:"mode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareUplinkLacpPolicy"] = reflect.TypeOf((*VMwareUplinkLacpPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareUplinkPortOrderPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActiveUplinkPort  []string `xml:"activeUplinkPort,omitempty"`
0000000000000000000000000000000000000000;;		StandbyUplinkPort []string `xml:"standbyUplinkPort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareUplinkPortOrderPolicy"] = reflect.TypeOf((*VMwareUplinkPortOrderPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareVspanPort struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey                   []string `xml:"portKey,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPortName            []string `xml:"uplinkPortName,omitempty"`
0000000000000000000000000000000000000000;;		WildcardPortConnecteeType []string `xml:"wildcardPortConnecteeType,omitempty"`
0000000000000000000000000000000000000000;;		Vlans                     []int32  `xml:"vlans,omitempty"`
0000000000000000000000000000000000000000;;		IpAddress                 []string `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareVspanPort"] = reflect.TypeOf((*VMwareVspanPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMwareVspanSession struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                   string           `xml:"key,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string           `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description           string           `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Enabled               bool             `xml:"enabled"`
0000000000000000000000000000000000000000;;		SourcePortTransmitted *VMwareVspanPort `xml:"sourcePortTransmitted,omitempty"`
0000000000000000000000000000000000000000;;		SourcePortReceived    *VMwareVspanPort `xml:"sourcePortReceived,omitempty"`
0000000000000000000000000000000000000000;;		DestinationPort       *VMwareVspanPort `xml:"destinationPort,omitempty"`
0000000000000000000000000000000000000000;;		EncapsulationVlanId   int32            `xml:"encapsulationVlanId,omitempty"`
0000000000000000000000000000000000000000;;		StripOriginalVlan     bool             `xml:"stripOriginalVlan"`
0000000000000000000000000000000000000000;;		MirroredPacketLength  int32            `xml:"mirroredPacketLength,omitempty"`
0000000000000000000000000000000000000000;;		NormalTrafficAllowed  bool             `xml:"normalTrafficAllowed"`
0000000000000000000000000000000000000000;;		SessionType           string           `xml:"sessionType,omitempty"`
0000000000000000000000000000000000000000;;		SamplingRate          int32            `xml:"samplingRate,omitempty"`
0000000000000000000000000000000000000000;;		EncapType             string           `xml:"encapType,omitempty"`
0000000000000000000000000000000000000000;;		ErspanId              int32            `xml:"erspanId,omitempty"`
0000000000000000000000000000000000000000;;		ErspanCOS             int32            `xml:"erspanCOS,omitempty"`
0000000000000000000000000000000000000000;;		ErspanGraNanosec      *bool            `xml:"erspanGraNanosec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VMwareVspanSession"] = reflect.TypeOf((*VMwareVspanSession)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VRPEditSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VrpId            string                     `xml:"vrpId"`
0000000000000000000000000000000000000000;;		Description      string                     `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		CpuAllocation    *VrpResourceAllocationInfo `xml:"cpuAllocation,omitempty"`
0000000000000000000000000000000000000000;;		MemoryAllocation *VrpResourceAllocationInfo `xml:"memoryAllocation,omitempty"`
0000000000000000000000000000000000000000;;		AddedHubs        []ManagedObjectReference   `xml:"addedHubs,omitempty"`
0000000000000000000000000000000000000000;;		RemovedHubs      []ManagedObjectReference   `xml:"removedHubs,omitempty"`
0000000000000000000000000000000000000000;;		ChangeVersion    int64                      `xml:"changeVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VRPEditSpec"] = reflect.TypeOf((*VRPEditSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VStorageObject struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config VStorageObjectConfigInfo `xml:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VStorageObject"] = reflect.TypeOf((*VStorageObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VStorageObjectConfigInfo struct {
0000000000000000000000000000000000000000;;		BaseConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CapacityInMB    int64    `xml:"capacityInMB"`
0000000000000000000000000000000000000000;;		ConsumptionType []string `xml:"consumptionType,omitempty"`
0000000000000000000000000000000000000000;;		ConsumerId      []ID     `xml:"consumerId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VStorageObjectConfigInfo"] = reflect.TypeOf((*VStorageObjectConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VStorageObjectStateInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tentative *bool `xml:"tentative"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VStorageObjectStateInfo"] = reflect.TypeOf((*VStorageObjectStateInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VVolHostPE struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key              ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		ProtocolEndpoint []HostProtocolEndpoint `xml:"protocolEndpoint"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VVolHostPE"] = reflect.TypeOf((*VVolHostPE)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VVolVmConfigFileUpdateResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SucceededVmConfigFile []KeyValue                                           `xml:"succeededVmConfigFile,omitempty"`
0000000000000000000000000000000000000000;;		FailedVmConfigFile    []VVolVmConfigFileUpdateResultFailedVmConfigFileInfo `xml:"failedVmConfigFile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VVolVmConfigFileUpdateResult"] = reflect.TypeOf((*VVolVmConfigFileUpdateResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VVolVmConfigFileUpdateResultFailedVmConfigFileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TargetConfigVVolId string               `xml:"targetConfigVVolId"`
0000000000000000000000000000000000000000;;		Fault              LocalizedMethodFault `xml:"fault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VVolVmConfigFileUpdateResultFailedVmConfigFileInfo"] = reflect.TypeOf((*VVolVmConfigFileUpdateResultFailedVmConfigFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateCredentialsInGuest ValidateCredentialsInGuestRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ValidateCredentialsInGuest"] = reflect.TypeOf((*ValidateCredentialsInGuest)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateCredentialsInGuestRequestType struct {
0000000000000000000000000000000000000000;;		This ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm   ManagedObjectReference  `xml:"vm"`
0000000000000000000000000000000000000000;;		Auth BaseGuestAuthentication `xml:"auth,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ValidateCredentialsInGuestRequestType"] = reflect.TypeOf((*ValidateCredentialsInGuestRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateCredentialsInGuestResponse struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateHost ValidateHostRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ValidateHost"] = reflect.TypeOf((*ValidateHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateHostRequestType struct {
0000000000000000000000000000000000000000;;		This          ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		OvfDescriptor string                 `xml:"ovfDescriptor"`
0000000000000000000000000000000000000000;;		Host          ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;		Vhp           OvfValidateHostParams  `xml:"vhp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ValidateHostRequestType"] = reflect.TypeOf((*ValidateHostRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateHostResponse struct {
0000000000000000000000000000000000000000;;		Returnval OvfValidateHostResult `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateMigration ValidateMigrationRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ValidateMigration"] = reflect.TypeOf((*ValidateMigration)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateMigrationRequestType struct {
0000000000000000000000000000000000000000;;		This     ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Vm       []ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		State    VirtualMachinePowerState `xml:"state,omitempty"`
0000000000000000000000000000000000000000;;		TestType []string                 `xml:"testType,omitempty"`
0000000000000000000000000000000000000000;;		Pool     *ManagedObjectReference  `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;		Host     *ManagedObjectReference  `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ValidateMigrationRequestType"] = reflect.TypeOf((*ValidateMigrationRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidateMigrationResponse struct {
0000000000000000000000000000000000000000;;		Returnval []BaseEvent `xml:"returnval,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VasaProviderContainerSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VasaProviderInfo []VimVasaProviderInfo `xml:"vasaProviderInfo,omitempty"`
0000000000000000000000000000000000000000;;		ScId             string                `xml:"scId"`
0000000000000000000000000000000000000000;;		Deleted          bool                  `xml:"deleted"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VasaProviderContainerSpec"] = reflect.TypeOf((*VasaProviderContainerSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VcAgentUninstallFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VcAgentUninstallFailedEvent"] = reflect.TypeOf((*VcAgentUninstallFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VcAgentUninstalledEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VcAgentUninstalledEvent"] = reflect.TypeOf((*VcAgentUninstalledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VcAgentUpgradeFailedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VcAgentUpgradeFailedEvent"] = reflect.TypeOf((*VcAgentUpgradeFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VcAgentUpgradedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VcAgentUpgradedEvent"] = reflect.TypeOf((*VcAgentUpgradedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaClusterConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FailoverNodeInfo1 *FailoverNodeInfo `xml:"failoverNodeInfo1,omitempty"`
0000000000000000000000000000000000000000;;		FailoverNodeInfo2 *FailoverNodeInfo `xml:"failoverNodeInfo2,omitempty"`
0000000000000000000000000000000000000000;;		WitnessNodeInfo   *WitnessNodeInfo  `xml:"witnessNodeInfo,omitempty"`
0000000000000000000000000000000000000000;;		State             string            `xml:"state"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaClusterConfigInfo"] = reflect.TypeOf((*VchaClusterConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaClusterConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PassiveIp string `xml:"passiveIp"`
0000000000000000000000000000000000000000;;		WitnessIp string `xml:"witnessIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaClusterConfigSpec"] = reflect.TypeOf((*VchaClusterConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaClusterDeploymentSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PassiveDeploymentSpec PassiveNodeDeploymentSpec `xml:"passiveDeploymentSpec"`
0000000000000000000000000000000000000000;;		WitnessDeploymentSpec BaseNodeDeploymentSpec    `xml:"witnessDeploymentSpec,typeattr"`
0000000000000000000000000000000000000000;;		ActiveVcSpec          SourceNodeSpec            `xml:"activeVcSpec"`
0000000000000000000000000000000000000000;;		ActiveVcNetworkConfig *ClusterNetworkConfigSpec `xml:"activeVcNetworkConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaClusterDeploymentSpec"] = reflect.TypeOf((*VchaClusterDeploymentSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaClusterHealth struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RuntimeInfo           VchaClusterRuntimeInfo `xml:"runtimeInfo"`
0000000000000000000000000000000000000000;;		HealthMessages        []LocalizableMessage   `xml:"healthMessages,omitempty"`
0000000000000000000000000000000000000000;;		AdditionalInformation []LocalizableMessage   `xml:"additionalInformation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaClusterHealth"] = reflect.TypeOf((*VchaClusterHealth)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaClusterNetworkSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WitnessNetworkSpec BaseNodeNetworkSpec    `xml:"witnessNetworkSpec,typeattr"`
0000000000000000000000000000000000000000;;		PassiveNetworkSpec PassiveNodeNetworkSpec `xml:"passiveNetworkSpec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaClusterNetworkSpec"] = reflect.TypeOf((*VchaClusterNetworkSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaClusterRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterState string                `xml:"clusterState"`
0000000000000000000000000000000000000000;;		NodeInfo     []VchaNodeRuntimeInfo `xml:"nodeInfo,omitempty"`
0000000000000000000000000000000000000000;;		ClusterMode  string                `xml:"clusterMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaClusterRuntimeInfo"] = reflect.TypeOf((*VchaClusterRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VchaNodeRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NodeState string `xml:"nodeState"`
0000000000000000000000000000000000000000;;		NodeRole  string `xml:"nodeRole"`
0000000000000000000000000000000000000000;;		NodeIp    string `xml:"nodeIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VchaNodeRuntimeInfo"] = reflect.TypeOf((*VchaNodeRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VimAccountPasswordChangedEvent struct {
0000000000000000000000000000000000000000;;		HostEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VimAccountPasswordChangedEvent"] = reflect.TypeOf((*VimAccountPasswordChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VimFault struct {
0000000000000000000000000000000000000000;;		MethodFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VimFault"] = reflect.TypeOf((*VimFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VimFaultFault BaseVimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VimFaultFault"] = reflect.TypeOf((*VimFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VimVasaProvider struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url                   string `xml:"url"`
0000000000000000000000000000000000000000;;		Name                  string `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		SelfSignedCertificate string `xml:"selfSignedCertificate,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VimVasaProvider"] = reflect.TypeOf((*VimVasaProvider)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VimVasaProviderInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Provider   VimVasaProvider                `xml:"provider"`
0000000000000000000000000000000000000000;;		ArrayState []VimVasaProviderStatePerArray `xml:"arrayState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VimVasaProviderInfo"] = reflect.TypeOf((*VimVasaProviderInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VimVasaProviderStatePerArray struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Priority int32  `xml:"priority"`
0000000000000000000000000000000000000000;;		ArrayId  string `xml:"arrayId"`
0000000000000000000000000000000000000000;;		Active   bool   `xml:"active"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VimVasaProviderStatePerArray"] = reflect.TypeOf((*VimVasaProviderStatePerArray)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualAHCIController struct {
0000000000000000000000000000000000000000;;		VirtualSATAController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualAHCIController"] = reflect.TypeOf((*VirtualAHCIController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualAHCIControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualSATAControllerOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualAHCIControllerOption"] = reflect.TypeOf((*VirtualAHCIControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualAppImportSpec struct {
0000000000000000000000000000000000000000;;		ImportSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name             string             `xml:"name"`
0000000000000000000000000000000000000000;;		VAppConfigSpec   VAppConfigSpec     `xml:"vAppConfigSpec"`
0000000000000000000000000000000000000000;;		ResourcePoolSpec ResourceConfigSpec `xml:"resourcePoolSpec"`
0000000000000000000000000000000000000000;;		Child            []BaseImportSpec   `xml:"child,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualAppImportSpec"] = reflect.TypeOf((*VirtualAppImportSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualAppLinkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key               ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		DestroyWithParent *bool                  `xml:"destroyWithParent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualAppLinkInfo"] = reflect.TypeOf((*VirtualAppLinkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualAppSummary struct {
0000000000000000000000000000000000000000;;		ResourcePoolSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Product             *VAppProductInfo    `xml:"product,omitempty"`
0000000000000000000000000000000000000000;;		VAppState           VirtualAppVAppState `xml:"vAppState,omitempty"`
0000000000000000000000000000000000000000;;		Suspended           *bool               `xml:"suspended"`
0000000000000000000000000000000000000000;;		InstallBootRequired *bool               `xml:"installBootRequired"`
0000000000000000000000000000000000000000;;		InstanceUuid        string              `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualAppSummary"] = reflect.TypeOf((*VirtualAppSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualBusLogicController struct {
0000000000000000000000000000000000000000;;		VirtualSCSIController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualBusLogicController"] = reflect.TypeOf((*VirtualBusLogicController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualBusLogicControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualSCSIControllerOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualBusLogicControllerOption"] = reflect.TypeOf((*VirtualBusLogicControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdrom struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdrom"] = reflect.TypeOf((*VirtualCdrom)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromAtapiBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromAtapiBackingInfo"] = reflect.TypeOf((*VirtualCdromAtapiBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromAtapiBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromAtapiBackingOption"] = reflect.TypeOf((*VirtualCdromAtapiBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromIsoBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromIsoBackingInfo"] = reflect.TypeOf((*VirtualCdromIsoBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromIsoBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromIsoBackingOption"] = reflect.TypeOf((*VirtualCdromIsoBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromOption"] = reflect.TypeOf((*VirtualCdromOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromPassthroughBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Exclusive bool `xml:"exclusive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromPassthroughBackingInfo"] = reflect.TypeOf((*VirtualCdromPassthroughBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromPassthroughBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Exclusive BoolOption `xml:"exclusive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromPassthroughBackingOption"] = reflect.TypeOf((*VirtualCdromPassthroughBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromRemoteAtapiBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromRemoteAtapiBackingInfo"] = reflect.TypeOf((*VirtualCdromRemoteAtapiBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromRemoteAtapiBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromRemoteAtapiBackingOption"] = reflect.TypeOf((*VirtualCdromRemoteAtapiBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromRemotePassthroughBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Exclusive bool `xml:"exclusive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromRemotePassthroughBackingInfo"] = reflect.TypeOf((*VirtualCdromRemotePassthroughBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualCdromRemotePassthroughBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Exclusive BoolOption `xml:"exclusive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualCdromRemotePassthroughBackingOption"] = reflect.TypeOf((*VirtualCdromRemotePassthroughBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualController struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BusNumber int32   `xml:"busNumber"`
0000000000000000000000000000000000000000;;		Device    []int32 `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualController"] = reflect.TypeOf((*VirtualController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Devices         IntOption `xml:"devices"`
0000000000000000000000000000000000000000;;		SupportedDevice []string  `xml:"supportedDevice,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualControllerOption"] = reflect.TypeOf((*VirtualControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDevice struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           int32                        `xml:"key"`
0000000000000000000000000000000000000000;;		DeviceInfo    BaseDescription              `xml:"deviceInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Backing       BaseVirtualDeviceBackingInfo `xml:"backing,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Connectable   *VirtualDeviceConnectInfo    `xml:"connectable,omitempty"`
0000000000000000000000000000000000000000;;		SlotInfo      BaseVirtualDeviceBusSlotInfo `xml:"slotInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ControllerKey int32                        `xml:"controllerKey,omitempty"`
0000000000000000000000000000000000000000;;		UnitNumber    *int32                       `xml:"unitNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDevice"] = reflect.TypeOf((*VirtualDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceBackingInfo"] = reflect.TypeOf((*VirtualDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type string `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceBackingOption"] = reflect.TypeOf((*VirtualDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceBusSlotInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceBusSlotInfo"] = reflect.TypeOf((*VirtualDeviceBusSlotInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceBusSlotOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type string `xml:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceBusSlotOption"] = reflect.TypeOf((*VirtualDeviceBusSlotOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation     VirtualDeviceConfigSpecOperation     `xml:"operation,omitempty"`
0000000000000000000000000000000000000000;;		FileOperation VirtualDeviceConfigSpecFileOperation `xml:"fileOperation,omitempty"`
0000000000000000000000000000000000000000;;		Device        BaseVirtualDevice                    `xml:"device,typeattr"`
0000000000000000000000000000000000000000;;		Profile       []BaseVirtualMachineProfileSpec      `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Backing       *VirtualDeviceConfigSpecBackingSpec  `xml:"backing,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceConfigSpec"] = reflect.TypeOf((*VirtualDeviceConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceConfigSpecBackingSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent *VirtualDeviceConfigSpecBackingSpec `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		Crypto BaseCryptoSpec                      `xml:"crypto,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceConfigSpecBackingSpec"] = reflect.TypeOf((*VirtualDeviceConfigSpecBackingSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceConnectInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartConnected    bool   `xml:"startConnected"`
0000000000000000000000000000000000000000;;		AllowGuestControl bool   `xml:"allowGuestControl"`
0000000000000000000000000000000000000000;;		Connected         bool   `xml:"connected"`
0000000000000000000000000000000000000000;;		Status            string `xml:"status,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceConnectInfo"] = reflect.TypeOf((*VirtualDeviceConnectInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceConnectOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartConnected    BoolOption `xml:"startConnected"`
0000000000000000000000000000000000000000;;		AllowGuestControl BoolOption `xml:"allowGuestControl"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceConnectOption"] = reflect.TypeOf((*VirtualDeviceConnectOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceName    string `xml:"deviceName"`
0000000000000000000000000000000000000000;;		UseAutoDetect *bool  `xml:"useAutoDetect"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceDeviceBackingInfo"] = reflect.TypeOf((*VirtualDeviceDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoDetectAvailable BoolOption `xml:"autoDetectAvailable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceDeviceBackingOption"] = reflect.TypeOf((*VirtualDeviceDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceFileBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileName        string                  `xml:"fileName"`
0000000000000000000000000000000000000000;;		Datastore       *ManagedObjectReference `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		BackingObjectId string                  `xml:"backingObjectId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceFileBackingInfo"] = reflect.TypeOf((*VirtualDeviceFileBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceFileBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileNameExtensions *ChoiceOption `xml:"fileNameExtensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceFileBackingOption"] = reflect.TypeOf((*VirtualDeviceFileBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Type                      string                           `xml:"type"`
0000000000000000000000000000000000000000;;		ConnectOption             *VirtualDeviceConnectOption      `xml:"connectOption,omitempty"`
0000000000000000000000000000000000000000;;		BusSlotOption             *VirtualDeviceBusSlotOption      `xml:"busSlotOption,omitempty"`
0000000000000000000000000000000000000000;;		ControllerType            string                           `xml:"controllerType,omitempty"`
0000000000000000000000000000000000000000;;		AutoAssignController      *BoolOption                      `xml:"autoAssignController,omitempty"`
0000000000000000000000000000000000000000;;		BackingOption             []BaseVirtualDeviceBackingOption `xml:"backingOption,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DefaultBackingOptionIndex int32                            `xml:"defaultBackingOptionIndex,omitempty"`
0000000000000000000000000000000000000000;;		LicensingLimit            []string                         `xml:"licensingLimit,omitempty"`
0000000000000000000000000000000000000000;;		Deprecated                bool                             `xml:"deprecated"`
0000000000000000000000000000000000000000;;		PlugAndPlay               bool                             `xml:"plugAndPlay"`
0000000000000000000000000000000000000000;;		HotRemoveSupported        *bool                            `xml:"hotRemoveSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceOption"] = reflect.TypeOf((*VirtualDeviceOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDevicePciBusSlotInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBusSlotInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PciSlotNumber int32 `xml:"pciSlotNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDevicePciBusSlotInfo"] = reflect.TypeOf((*VirtualDevicePciBusSlotInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDevicePipeBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PipeName string `xml:"pipeName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDevicePipeBackingInfo"] = reflect.TypeOf((*VirtualDevicePipeBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDevicePipeBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDevicePipeBackingOption"] = reflect.TypeOf((*VirtualDevicePipeBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceRemoteDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceName    string `xml:"deviceName"`
0000000000000000000000000000000000000000;;		UseAutoDetect *bool  `xml:"useAutoDetect"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceRemoteDeviceBackingInfo"] = reflect.TypeOf((*VirtualDeviceRemoteDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceRemoteDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoDetectAvailable BoolOption `xml:"autoDetectAvailable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceRemoteDeviceBackingOption"] = reflect.TypeOf((*VirtualDeviceRemoteDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceURIBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceURI string `xml:"serviceURI"`
0000000000000000000000000000000000000000;;		Direction  string `xml:"direction"`
0000000000000000000000000000000000000000;;		ProxyURI   string `xml:"proxyURI,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceURIBackingInfo"] = reflect.TypeOf((*VirtualDeviceURIBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDeviceURIBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Directions ChoiceOption `xml:"directions"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDeviceURIBackingOption"] = reflect.TypeOf((*VirtualDeviceURIBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDisk struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CapacityInKB          int64                             `xml:"capacityInKB"`
0000000000000000000000000000000000000000;;		CapacityInBytes       int64                             `xml:"capacityInBytes,omitempty"`
0000000000000000000000000000000000000000;;		Shares                *SharesInfo                       `xml:"shares,omitempty"`
0000000000000000000000000000000000000000;;		StorageIOAllocation   *StorageIOAllocationInfo          `xml:"storageIOAllocation,omitempty"`
0000000000000000000000000000000000000000;;		DiskObjectId          string                            `xml:"diskObjectId,omitempty"`
0000000000000000000000000000000000000000;;		VFlashCacheConfigInfo *VirtualDiskVFlashCacheConfigInfo `xml:"vFlashCacheConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;		Iofilter              []string                          `xml:"iofilter,omitempty"`
0000000000000000000000000000000000000000;;		VDiskId               *ID                               `xml:"vDiskId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDisk"] = reflect.TypeOf((*VirtualDisk)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskAntiAffinityRuleSpec struct {
0000000000000000000000000000000000000000;;		ClusterRuleInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskId []int32 `xml:"diskId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskAntiAffinityRuleSpec"] = reflect.TypeOf((*VirtualDiskAntiAffinityRuleSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskBlocksNotFullyProvisioned struct {
0000000000000000000000000000000000000000;;		DeviceBackingNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskBlocksNotFullyProvisioned"] = reflect.TypeOf((*VirtualDiskBlocksNotFullyProvisioned)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskBlocksNotFullyProvisionedFault VirtualDiskBlocksNotFullyProvisioned
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskBlocksNotFullyProvisionedFault"] = reflect.TypeOf((*VirtualDiskBlocksNotFullyProvisionedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskConfigSpec struct {
0000000000000000000000000000000000000000;;		VirtualDeviceConfigSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMoveType string `xml:"diskMoveType,omitempty"`
0000000000000000000000000000000000000000;;		MigrateCache *bool  `xml:"migrateCache"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskConfigSpec"] = reflect.TypeOf((*VirtualDiskConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskDeltaDiskFormatsSupported struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastoreType   string       `xml:"datastoreType"`
0000000000000000000000000000000000000000;;		DeltaDiskFormat ChoiceOption `xml:"deltaDiskFormat"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskDeltaDiskFormatsSupported"] = reflect.TypeOf((*VirtualDiskDeltaDiskFormatsSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskFlatVer1BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode     string                          `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split        *bool                           `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough *bool                           `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		ContentId    string                          `xml:"contentId,omitempty"`
0000000000000000000000000000000000000000;;		Parent       *VirtualDiskFlatVer1BackingInfo `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskFlatVer1BackingInfo"] = reflect.TypeOf((*VirtualDiskFlatVer1BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskFlatVer1BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode     ChoiceOption `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split        BoolOption   `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough BoolOption   `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		Growable     bool         `xml:"growable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskFlatVer1BackingOption"] = reflect.TypeOf((*VirtualDiskFlatVer1BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskFlatVer2BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode               string                          `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split                  *bool                           `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough           *bool                           `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		ThinProvisioned        *bool                           `xml:"thinProvisioned"`
0000000000000000000000000000000000000000;;		EagerlyScrub           *bool                           `xml:"eagerlyScrub"`
0000000000000000000000000000000000000000;;		Uuid                   string                          `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		ContentId              string                          `xml:"contentId,omitempty"`
0000000000000000000000000000000000000000;;		ChangeId               string                          `xml:"changeId,omitempty"`
0000000000000000000000000000000000000000;;		Parent                 *VirtualDiskFlatVer2BackingInfo `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		DeltaDiskFormat        string                          `xml:"deltaDiskFormat,omitempty"`
0000000000000000000000000000000000000000;;		DigestEnabled          *bool                           `xml:"digestEnabled"`
0000000000000000000000000000000000000000;;		DeltaGrainSize         int32                           `xml:"deltaGrainSize,omitempty"`
0000000000000000000000000000000000000000;;		DeltaDiskFormatVariant string                          `xml:"deltaDiskFormatVariant,omitempty"`
0000000000000000000000000000000000000000;;		Sharing                string                          `xml:"sharing,omitempty"`
0000000000000000000000000000000000000000;;		KeyId                  *CryptoKeyId                    `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskFlatVer2BackingInfo"] = reflect.TypeOf((*VirtualDiskFlatVer2BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskFlatVer2BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode                  ChoiceOption                           `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split                     BoolOption                             `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough              BoolOption                             `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		Growable                  bool                                   `xml:"growable"`
0000000000000000000000000000000000000000;;		HotGrowable               bool                                   `xml:"hotGrowable"`
0000000000000000000000000000000000000000;;		Uuid                      bool                                   `xml:"uuid"`
0000000000000000000000000000000000000000;;		ThinProvisioned           *BoolOption                            `xml:"thinProvisioned,omitempty"`
0000000000000000000000000000000000000000;;		EagerlyScrub              *BoolOption                            `xml:"eagerlyScrub,omitempty"`
0000000000000000000000000000000000000000;;		DeltaDiskFormat           *ChoiceOption                          `xml:"deltaDiskFormat,omitempty"`
0000000000000000000000000000000000000000;;		DeltaDiskFormatsSupported []VirtualDiskDeltaDiskFormatsSupported `xml:"deltaDiskFormatsSupported,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskFlatVer2BackingOption"] = reflect.TypeOf((*VirtualDiskFlatVer2BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskId struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm     ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;		DiskId int32                  `xml:"diskId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskId"] = reflect.TypeOf((*VirtualDiskId)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskModeNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mode string `xml:"mode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskModeNotSupported"] = reflect.TypeOf((*VirtualDiskModeNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskModeNotSupportedFault VirtualDiskModeNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskModeNotSupportedFault"] = reflect.TypeOf((*VirtualDiskModeNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CapacityInKB            LongOption                                `xml:"capacityInKB"`
0000000000000000000000000000000000000000;;		IoAllocationOption      *StorageIOAllocationOption                `xml:"ioAllocationOption,omitempty"`
0000000000000000000000000000000000000000;;		VFlashCacheConfigOption *VirtualDiskOptionVFlashCacheConfigOption `xml:"vFlashCacheConfigOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskOption"] = reflect.TypeOf((*VirtualDiskOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskOptionVFlashCacheConfigOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CacheConsistencyType ChoiceOption `xml:"cacheConsistencyType"`
0000000000000000000000000000000000000000;;		CacheMode            ChoiceOption `xml:"cacheMode"`
0000000000000000000000000000000000000000;;		ReservationInMB      LongOption   `xml:"reservationInMB"`
0000000000000000000000000000000000000000;;		BlockSizeInKB        LongOption   `xml:"blockSizeInKB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskOptionVFlashCacheConfigOption"] = reflect.TypeOf((*VirtualDiskOptionVFlashCacheConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskPartitionedRawDiskVer2BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDiskRawDiskVer2BackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partition []int32 `xml:"partition"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskPartitionedRawDiskVer2BackingInfo"] = reflect.TypeOf((*VirtualDiskPartitionedRawDiskVer2BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskPartitionedRawDiskVer2BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDiskRawDiskVer2BackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskPartitionedRawDiskVer2BackingOption"] = reflect.TypeOf((*VirtualDiskPartitionedRawDiskVer2BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskRawDiskMappingVer1BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LunUuid           string                                    `xml:"lunUuid,omitempty"`
0000000000000000000000000000000000000000;;		DeviceName        string                                    `xml:"deviceName,omitempty"`
0000000000000000000000000000000000000000;;		CompatibilityMode string                                    `xml:"compatibilityMode,omitempty"`
0000000000000000000000000000000000000000;;		DiskMode          string                                    `xml:"diskMode,omitempty"`
0000000000000000000000000000000000000000;;		Uuid              string                                    `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		ContentId         string                                    `xml:"contentId,omitempty"`
0000000000000000000000000000000000000000;;		ChangeId          string                                    `xml:"changeId,omitempty"`
0000000000000000000000000000000000000000;;		Parent            *VirtualDiskRawDiskMappingVer1BackingInfo `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		Sharing           string                                    `xml:"sharing,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskRawDiskMappingVer1BackingInfo"] = reflect.TypeOf((*VirtualDiskRawDiskMappingVer1BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskRawDiskMappingVer1BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DescriptorFileNameExtensions *ChoiceOption `xml:"descriptorFileNameExtensions,omitempty"`
0000000000000000000000000000000000000000;;		CompatibilityMode            ChoiceOption  `xml:"compatibilityMode"`
0000000000000000000000000000000000000000;;		DiskMode                     ChoiceOption  `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Uuid                         bool          `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskRawDiskMappingVer1BackingOption"] = reflect.TypeOf((*VirtualDiskRawDiskMappingVer1BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskRawDiskVer2BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DescriptorFileName string `xml:"descriptorFileName"`
0000000000000000000000000000000000000000;;		Uuid               string `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		ChangeId           string `xml:"changeId,omitempty"`
0000000000000000000000000000000000000000;;		Sharing            string `xml:"sharing,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskRawDiskVer2BackingInfo"] = reflect.TypeOf((*VirtualDiskRawDiskVer2BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskRawDiskVer2BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DescriptorFileNameExtensions ChoiceOption `xml:"descriptorFileNameExtensions"`
0000000000000000000000000000000000000000;;		Uuid                         bool         `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskRawDiskVer2BackingOption"] = reflect.TypeOf((*VirtualDiskRawDiskVer2BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSeSparseBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode        string                          `xml:"diskMode"`
0000000000000000000000000000000000000000;;		WriteThrough    *bool                           `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		Uuid            string                          `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		ContentId       string                          `xml:"contentId,omitempty"`
0000000000000000000000000000000000000000;;		ChangeId        string                          `xml:"changeId,omitempty"`
0000000000000000000000000000000000000000;;		Parent          *VirtualDiskSeSparseBackingInfo `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		DeltaDiskFormat string                          `xml:"deltaDiskFormat,omitempty"`
0000000000000000000000000000000000000000;;		DigestEnabled   *bool                           `xml:"digestEnabled"`
0000000000000000000000000000000000000000;;		GrainSize       int32                           `xml:"grainSize,omitempty"`
0000000000000000000000000000000000000000;;		KeyId           *CryptoKeyId                    `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSeSparseBackingInfo"] = reflect.TypeOf((*VirtualDiskSeSparseBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSeSparseBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode                  ChoiceOption                           `xml:"diskMode"`
0000000000000000000000000000000000000000;;		WriteThrough              BoolOption                             `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		Growable                  bool                                   `xml:"growable"`
0000000000000000000000000000000000000000;;		HotGrowable               bool                                   `xml:"hotGrowable"`
0000000000000000000000000000000000000000;;		Uuid                      bool                                   `xml:"uuid"`
0000000000000000000000000000000000000000;;		DeltaDiskFormatsSupported []VirtualDiskDeltaDiskFormatsSupported `xml:"deltaDiskFormatsSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSeSparseBackingOption"] = reflect.TypeOf((*VirtualDiskSeSparseBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSparseVer1BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode      string                            `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split         *bool                             `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough  *bool                             `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		SpaceUsedInKB int64                             `xml:"spaceUsedInKB,omitempty"`
0000000000000000000000000000000000000000;;		ContentId     string                            `xml:"contentId,omitempty"`
0000000000000000000000000000000000000000;;		Parent        *VirtualDiskSparseVer1BackingInfo `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSparseVer1BackingInfo"] = reflect.TypeOf((*VirtualDiskSparseVer1BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSparseVer1BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskModes    ChoiceOption `xml:"diskModes"`
0000000000000000000000000000000000000000;;		Split        BoolOption   `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough BoolOption   `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		Growable     bool         `xml:"growable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSparseVer1BackingOption"] = reflect.TypeOf((*VirtualDiskSparseVer1BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSparseVer2BackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode      string                            `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split         *bool                             `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough  *bool                             `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		SpaceUsedInKB int64                             `xml:"spaceUsedInKB,omitempty"`
0000000000000000000000000000000000000000;;		Uuid          string                            `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		ContentId     string                            `xml:"contentId,omitempty"`
0000000000000000000000000000000000000000;;		ChangeId      string                            `xml:"changeId,omitempty"`
0000000000000000000000000000000000000000;;		Parent        *VirtualDiskSparseVer2BackingInfo `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;		KeyId         *CryptoKeyId                      `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSparseVer2BackingInfo"] = reflect.TypeOf((*VirtualDiskSparseVer2BackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSparseVer2BackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskMode     ChoiceOption `xml:"diskMode"`
0000000000000000000000000000000000000000;;		Split        BoolOption   `xml:"split"`
0000000000000000000000000000000000000000;;		WriteThrough BoolOption   `xml:"writeThrough"`
0000000000000000000000000000000000000000;;		Growable     bool         `xml:"growable"`
0000000000000000000000000000000000000000;;		HotGrowable  bool         `xml:"hotGrowable"`
0000000000000000000000000000000000000000;;		Uuid         bool         `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSparseVer2BackingOption"] = reflect.TypeOf((*VirtualDiskSparseVer2BackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskType    string `xml:"diskType"`
0000000000000000000000000000000000000000;;		AdapterType string `xml:"adapterType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskSpec"] = reflect.TypeOf((*VirtualDiskSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskVFlashCacheConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VFlashModule         string `xml:"vFlashModule,omitempty"`
0000000000000000000000000000000000000000;;		ReservationInMB      int64  `xml:"reservationInMB,omitempty"`
0000000000000000000000000000000000000000;;		CacheConsistencyType string `xml:"cacheConsistencyType,omitempty"`
0000000000000000000000000000000000000000;;		CacheMode            string `xml:"cacheMode,omitempty"`
0000000000000000000000000000000000000000;;		BlockSizeInKB        int64  `xml:"blockSizeInKB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskVFlashCacheConfigInfo"] = reflect.TypeOf((*VirtualDiskVFlashCacheConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualE1000 struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualE1000"] = reflect.TypeOf((*VirtualE1000)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualE1000Option struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualE1000Option"] = reflect.TypeOf((*VirtualE1000Option)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualE1000e struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualE1000e"] = reflect.TypeOf((*VirtualE1000e)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualE1000eOption struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualE1000eOption"] = reflect.TypeOf((*VirtualE1000eOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEnsoniq1371 struct {
0000000000000000000000000000000000000000;;		VirtualSoundCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEnsoniq1371"] = reflect.TypeOf((*VirtualEnsoniq1371)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEnsoniq1371Option struct {
0000000000000000000000000000000000000000;;		VirtualSoundCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEnsoniq1371Option"] = reflect.TypeOf((*VirtualEnsoniq1371Option)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCard struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AddressType             string                                 `xml:"addressType,omitempty"`
0000000000000000000000000000000000000000;;		MacAddress              string                                 `xml:"macAddress,omitempty"`
0000000000000000000000000000000000000000;;		WakeOnLanEnabled        *bool                                  `xml:"wakeOnLanEnabled"`
0000000000000000000000000000000000000000;;		ResourceAllocation      *VirtualEthernetCardResourceAllocation `xml:"resourceAllocation,omitempty"`
0000000000000000000000000000000000000000;;		ExternalId              string                                 `xml:"externalId,omitempty"`
0000000000000000000000000000000000000000;;		UptCompatibilityEnabled *bool                                  `xml:"uptCompatibilityEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCard"] = reflect.TypeOf((*VirtualEthernetCard)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardDVPortBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardDVPortBackingOption"] = reflect.TypeOf((*VirtualEthernetCardDVPortBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardDistributedVirtualPortBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port DistributedVirtualSwitchPortConnection `xml:"port"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardDistributedVirtualPortBackingInfo"] = reflect.TypeOf((*VirtualEthernetCardDistributedVirtualPortBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardLegacyNetworkBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardLegacyNetworkBackingInfo"] = reflect.TypeOf((*VirtualEthernetCardLegacyNetworkBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardLegacyNetworkBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardLegacyNetworkBackingOption"] = reflect.TypeOf((*VirtualEthernetCardLegacyNetworkBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardNetworkBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network           *ManagedObjectReference `xml:"network,omitempty"`
0000000000000000000000000000000000000000;;		InPassthroughMode *bool                   `xml:"inPassthroughMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardNetworkBackingInfo"] = reflect.TypeOf((*VirtualEthernetCardNetworkBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardNetworkBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardNetworkBackingOption"] = reflect.TypeOf((*VirtualEthernetCardNetworkBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardNotSupported struct {
0000000000000000000000000000000000000000;;		DeviceNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardNotSupported"] = reflect.TypeOf((*VirtualEthernetCardNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardNotSupportedFault VirtualEthernetCardNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardNotSupportedFault"] = reflect.TypeOf((*VirtualEthernetCardNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardOpaqueNetworkBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpaqueNetworkId   string `xml:"opaqueNetworkId"`
0000000000000000000000000000000000000000;;		OpaqueNetworkType string `xml:"opaqueNetworkType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardOpaqueNetworkBackingInfo"] = reflect.TypeOf((*VirtualEthernetCardOpaqueNetworkBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardOpaqueNetworkBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardOpaqueNetworkBackingOption"] = reflect.TypeOf((*VirtualEthernetCardOpaqueNetworkBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SupportedOUI              ChoiceOption `xml:"supportedOUI"`
0000000000000000000000000000000000000000;;		MacType                   ChoiceOption `xml:"macType"`
0000000000000000000000000000000000000000;;		WakeOnLanEnabled          BoolOption   `xml:"wakeOnLanEnabled"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2Supported *bool        `xml:"vmDirectPathGen2Supported"`
0000000000000000000000000000000000000000;;		UptCompatibilityEnabled   *BoolOption  `xml:"uptCompatibilityEnabled,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardOption"] = reflect.TypeOf((*VirtualEthernetCardOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualEthernetCardResourceAllocation struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reservation int64      `xml:"reservation,omitempty"`
0000000000000000000000000000000000000000;;		Share       SharesInfo `xml:"share"`
0000000000000000000000000000000000000000;;		Limit       int64      `xml:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualEthernetCardResourceAllocation"] = reflect.TypeOf((*VirtualEthernetCardResourceAllocation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppy struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppy"] = reflect.TypeOf((*VirtualFloppy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyDeviceBackingInfo"] = reflect.TypeOf((*VirtualFloppyDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyDeviceBackingOption"] = reflect.TypeOf((*VirtualFloppyDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyImageBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyImageBackingInfo"] = reflect.TypeOf((*VirtualFloppyImageBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyImageBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyImageBackingOption"] = reflect.TypeOf((*VirtualFloppyImageBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyOption"] = reflect.TypeOf((*VirtualFloppyOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyRemoteDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyRemoteDeviceBackingInfo"] = reflect.TypeOf((*VirtualFloppyRemoteDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualFloppyRemoteDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualFloppyRemoteDeviceBackingOption"] = reflect.TypeOf((*VirtualFloppyRemoteDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHardware struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumCPU              int32               `xml:"numCPU"`
0000000000000000000000000000000000000000;;		NumCoresPerSocket   int32               `xml:"numCoresPerSocket,omitempty"`
0000000000000000000000000000000000000000;;		MemoryMB            int32               `xml:"memoryMB"`
0000000000000000000000000000000000000000;;		VirtualICH7MPresent *bool               `xml:"virtualICH7MPresent"`
0000000000000000000000000000000000000000;;		VirtualSMCPresent   *bool               `xml:"virtualSMCPresent"`
0000000000000000000000000000000000000000;;		Device              []BaseVirtualDevice `xml:"device,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHardware"] = reflect.TypeOf((*VirtualHardware)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHardwareCompatibilityIssue struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHardwareCompatibilityIssue"] = reflect.TypeOf((*VirtualHardwareCompatibilityIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHardwareCompatibilityIssueFault BaseVirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHardwareCompatibilityIssueFault"] = reflect.TypeOf((*VirtualHardwareCompatibilityIssueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHardwareOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HwVersion             int32                     `xml:"hwVersion"`
0000000000000000000000000000000000000000;;		VirtualDeviceOption   []BaseVirtualDeviceOption `xml:"virtualDeviceOption,typeattr"`
0000000000000000000000000000000000000000;;		DeviceListReadonly    bool                      `xml:"deviceListReadonly"`
0000000000000000000000000000000000000000;;		NumCPU                []int32                   `xml:"numCPU"`
0000000000000000000000000000000000000000;;		NumCoresPerSocket     *IntOption                `xml:"numCoresPerSocket,omitempty"`
0000000000000000000000000000000000000000;;		NumCpuReadonly        bool                      `xml:"numCpuReadonly"`
0000000000000000000000000000000000000000;;		MemoryMB              LongOption                `xml:"memoryMB"`
0000000000000000000000000000000000000000;;		NumPCIControllers     IntOption                 `xml:"numPCIControllers"`
0000000000000000000000000000000000000000;;		NumIDEControllers     IntOption                 `xml:"numIDEControllers"`
0000000000000000000000000000000000000000;;		NumUSBControllers     IntOption                 `xml:"numUSBControllers"`
0000000000000000000000000000000000000000;;		NumUSBXHCIControllers *IntOption                `xml:"numUSBXHCIControllers,omitempty"`
0000000000000000000000000000000000000000;;		NumSIOControllers     IntOption                 `xml:"numSIOControllers"`
0000000000000000000000000000000000000000;;		NumPS2Controllers     IntOption                 `xml:"numPS2Controllers"`
0000000000000000000000000000000000000000;;		LicensingLimit        []string                  `xml:"licensingLimit,omitempty"`
0000000000000000000000000000000000000000;;		NumSupportedWwnPorts  *IntOption                `xml:"numSupportedWwnPorts,omitempty"`
0000000000000000000000000000000000000000;;		NumSupportedWwnNodes  *IntOption                `xml:"numSupportedWwnNodes,omitempty"`
0000000000000000000000000000000000000000;;		ResourceConfigOption  *ResourceConfigOption     `xml:"resourceConfigOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHardwareOption"] = reflect.TypeOf((*VirtualHardwareOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHardwareVersionNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName string                 `xml:"hostName"`
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference `xml:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHardwareVersionNotSupported"] = reflect.TypeOf((*VirtualHardwareVersionNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHardwareVersionNotSupportedFault VirtualHardwareVersionNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHardwareVersionNotSupportedFault"] = reflect.TypeOf((*VirtualHardwareVersionNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHdAudioCard struct {
0000000000000000000000000000000000000000;;		VirtualSoundCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHdAudioCard"] = reflect.TypeOf((*VirtualHdAudioCard)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualHdAudioCardOption struct {
0000000000000000000000000000000000000000;;		VirtualSoundCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualHdAudioCardOption"] = reflect.TypeOf((*VirtualHdAudioCardOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualIDEController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualIDEController"] = reflect.TypeOf((*VirtualIDEController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualIDEControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumIDEDisks  IntOption `xml:"numIDEDisks"`
0000000000000000000000000000000000000000;;		NumIDECdroms IntOption `xml:"numIDECdroms"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualIDEControllerOption"] = reflect.TypeOf((*VirtualIDEControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualKeyboard struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualKeyboard"] = reflect.TypeOf((*VirtualKeyboard)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualKeyboardOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualKeyboardOption"] = reflect.TypeOf((*VirtualKeyboardOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualLsiLogicController struct {
0000000000000000000000000000000000000000;;		VirtualSCSIController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualLsiLogicController"] = reflect.TypeOf((*VirtualLsiLogicController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualLsiLogicControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualSCSIControllerOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualLsiLogicControllerOption"] = reflect.TypeOf((*VirtualLsiLogicControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualLsiLogicSASController struct {
0000000000000000000000000000000000000000;;		VirtualSCSIController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualLsiLogicSASController"] = reflect.TypeOf((*VirtualLsiLogicSASController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualLsiLogicSASControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualSCSIControllerOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualLsiLogicSASControllerOption"] = reflect.TypeOf((*VirtualLsiLogicSASControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineAffinityInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AffinitySet []int32 `xml:"affinitySet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineAffinityInfo"] = reflect.TypeOf((*VirtualMachineAffinityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineBootOptions struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BootDelay            int64                                         `xml:"bootDelay,omitempty"`
0000000000000000000000000000000000000000;;		EnterBIOSSetup       *bool                                         `xml:"enterBIOSSetup"`
0000000000000000000000000000000000000000;;		EfiSecureBootEnabled *bool                                         `xml:"efiSecureBootEnabled"`
0000000000000000000000000000000000000000;;		BootRetryEnabled     *bool                                         `xml:"bootRetryEnabled"`
0000000000000000000000000000000000000000;;		BootRetryDelay       int64                                         `xml:"bootRetryDelay,omitempty"`
0000000000000000000000000000000000000000;;		BootOrder            []BaseVirtualMachineBootOptionsBootableDevice `xml:"bootOrder,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		NetworkBootProtocol  string                                        `xml:"networkBootProtocol,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineBootOptions"] = reflect.TypeOf((*VirtualMachineBootOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineBootOptionsBootableCdromDevice struct {
0000000000000000000000000000000000000000;;		VirtualMachineBootOptionsBootableDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineBootOptionsBootableCdromDevice"] = reflect.TypeOf((*VirtualMachineBootOptionsBootableCdromDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineBootOptionsBootableDevice struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineBootOptionsBootableDevice"] = reflect.TypeOf((*VirtualMachineBootOptionsBootableDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineBootOptionsBootableDiskDevice struct {
0000000000000000000000000000000000000000;;		VirtualMachineBootOptionsBootableDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceKey int32 `xml:"deviceKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineBootOptionsBootableDiskDevice"] = reflect.TypeOf((*VirtualMachineBootOptionsBootableDiskDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineBootOptionsBootableEthernetDevice struct {
0000000000000000000000000000000000000000;;		VirtualMachineBootOptionsBootableDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceKey int32 `xml:"deviceKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineBootOptionsBootableEthernetDevice"] = reflect.TypeOf((*VirtualMachineBootOptionsBootableEthernetDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineBootOptionsBootableFloppyDevice struct {
0000000000000000000000000000000000000000;;		VirtualMachineBootOptionsBootableDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineBootOptionsBootableFloppyDevice"] = reflect.TypeOf((*VirtualMachineBootOptionsBootableFloppyDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineCapability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SnapshotOperationsSupported         bool  `xml:"snapshotOperationsSupported"`
0000000000000000000000000000000000000000;;		MultipleSnapshotsSupported          bool  `xml:"multipleSnapshotsSupported"`
0000000000000000000000000000000000000000;;		SnapshotConfigSupported             bool  `xml:"snapshotConfigSupported"`
0000000000000000000000000000000000000000;;		PoweredOffSnapshotsSupported        bool  `xml:"poweredOffSnapshotsSupported"`
0000000000000000000000000000000000000000;;		MemorySnapshotsSupported            bool  `xml:"memorySnapshotsSupported"`
0000000000000000000000000000000000000000;;		RevertToSnapshotSupported           bool  `xml:"revertToSnapshotSupported"`
0000000000000000000000000000000000000000;;		QuiescedSnapshotsSupported          bool  `xml:"quiescedSnapshotsSupported"`
0000000000000000000000000000000000000000;;		DisableSnapshotsSupported           bool  `xml:"disableSnapshotsSupported"`
0000000000000000000000000000000000000000;;		LockSnapshotsSupported              bool  `xml:"lockSnapshotsSupported"`
0000000000000000000000000000000000000000;;		ConsolePreferencesSupported         bool  `xml:"consolePreferencesSupported"`
0000000000000000000000000000000000000000;;		CpuFeatureMaskSupported             bool  `xml:"cpuFeatureMaskSupported"`
0000000000000000000000000000000000000000;;		S1AcpiManagementSupported           bool  `xml:"s1AcpiManagementSupported"`
0000000000000000000000000000000000000000;;		SettingScreenResolutionSupported    bool  `xml:"settingScreenResolutionSupported"`
0000000000000000000000000000000000000000;;		ToolsAutoUpdateSupported            bool  `xml:"toolsAutoUpdateSupported"`
0000000000000000000000000000000000000000;;		VmNpivWwnSupported                  bool  `xml:"vmNpivWwnSupported"`
0000000000000000000000000000000000000000;;		NpivWwnOnNonRdmVmSupported          bool  `xml:"npivWwnOnNonRdmVmSupported"`
0000000000000000000000000000000000000000;;		VmNpivWwnDisableSupported           *bool `xml:"vmNpivWwnDisableSupported"`
0000000000000000000000000000000000000000;;		VmNpivWwnUpdateSupported            *bool `xml:"vmNpivWwnUpdateSupported"`
0000000000000000000000000000000000000000;;		SwapPlacementSupported              bool  `xml:"swapPlacementSupported"`
0000000000000000000000000000000000000000;;		ToolsSyncTimeSupported              bool  `xml:"toolsSyncTimeSupported"`
0000000000000000000000000000000000000000;;		VirtualMmuUsageSupported            bool  `xml:"virtualMmuUsageSupported"`
0000000000000000000000000000000000000000;;		DiskSharesSupported                 bool  `xml:"diskSharesSupported"`
0000000000000000000000000000000000000000;;		BootOptionsSupported                bool  `xml:"bootOptionsSupported"`
0000000000000000000000000000000000000000;;		BootRetryOptionsSupported           *bool `xml:"bootRetryOptionsSupported"`
0000000000000000000000000000000000000000;;		SettingVideoRamSizeSupported        bool  `xml:"settingVideoRamSizeSupported"`
0000000000000000000000000000000000000000;;		SettingDisplayTopologySupported     *bool `xml:"settingDisplayTopologySupported"`
0000000000000000000000000000000000000000;;		RecordReplaySupported               *bool `xml:"recordReplaySupported"`
0000000000000000000000000000000000000000;;		ChangeTrackingSupported             *bool `xml:"changeTrackingSupported"`
0000000000000000000000000000000000000000;;		MultipleCoresPerSocketSupported     *bool `xml:"multipleCoresPerSocketSupported"`
0000000000000000000000000000000000000000;;		HostBasedReplicationSupported       *bool `xml:"hostBasedReplicationSupported"`
0000000000000000000000000000000000000000;;		GuestAutoLockSupported              *bool `xml:"guestAutoLockSupported"`
0000000000000000000000000000000000000000;;		MemoryReservationLockSupported      *bool `xml:"memoryReservationLockSupported"`
0000000000000000000000000000000000000000;;		FeatureRequirementSupported         *bool `xml:"featureRequirementSupported"`
0000000000000000000000000000000000000000;;		PoweredOnMonitorTypeChangeSupported *bool `xml:"poweredOnMonitorTypeChangeSupported"`
0000000000000000000000000000000000000000;;		SeSparseDiskSupported               *bool `xml:"seSparseDiskSupported"`
0000000000000000000000000000000000000000;;		NestedHVSupported                   *bool `xml:"nestedHVSupported"`
0000000000000000000000000000000000000000;;		VPMCSupported                       *bool `xml:"vPMCSupported"`
0000000000000000000000000000000000000000;;		SecureBootSupported                 *bool `xml:"secureBootSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineCapability"] = reflect.TypeOf((*VirtualMachineCapability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineCdromInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineCdromInfo"] = reflect.TypeOf((*VirtualMachineCdromInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineCloneSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Location      VirtualMachineRelocateSpec `xml:"location"`
0000000000000000000000000000000000000000;;		Template      bool                       `xml:"template"`
0000000000000000000000000000000000000000;;		Config        *VirtualMachineConfigSpec  `xml:"config,omitempty"`
0000000000000000000000000000000000000000;;		Customization *CustomizationSpec         `xml:"customization,omitempty"`
0000000000000000000000000000000000000000;;		PowerOn       bool                       `xml:"powerOn"`
0000000000000000000000000000000000000000;;		Snapshot      *ManagedObjectReference    `xml:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;		Memory        *bool                      `xml:"memory"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineCloneSpec"] = reflect.TypeOf((*VirtualMachineCloneSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeVersion                string                                     `xml:"changeVersion"`
0000000000000000000000000000000000000000;;		Modified                     time.Time                                  `xml:"modified"`
0000000000000000000000000000000000000000;;		Name                         string                                     `xml:"name"`
0000000000000000000000000000000000000000;;		GuestFullName                string                                     `xml:"guestFullName"`
0000000000000000000000000000000000000000;;		Version                      string                                     `xml:"version"`
0000000000000000000000000000000000000000;;		Uuid                         string                                     `xml:"uuid"`
0000000000000000000000000000000000000000;;		InstanceUuid                 string                                     `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;		NpivNodeWorldWideName        []int64                                    `xml:"npivNodeWorldWideName,omitempty"`
0000000000000000000000000000000000000000;;		NpivPortWorldWideName        []int64                                    `xml:"npivPortWorldWideName,omitempty"`
0000000000000000000000000000000000000000;;		NpivWorldWideNameType        string                                     `xml:"npivWorldWideNameType,omitempty"`
0000000000000000000000000000000000000000;;		NpivDesiredNodeWwns          int16                                      `xml:"npivDesiredNodeWwns,omitempty"`
0000000000000000000000000000000000000000;;		NpivDesiredPortWwns          int16                                      `xml:"npivDesiredPortWwns,omitempty"`
0000000000000000000000000000000000000000;;		NpivTemporaryDisabled        *bool                                      `xml:"npivTemporaryDisabled"`
0000000000000000000000000000000000000000;;		NpivOnNonRdmDisks            *bool                                      `xml:"npivOnNonRdmDisks"`
0000000000000000000000000000000000000000;;		LocationId                   string                                     `xml:"locationId,omitempty"`
0000000000000000000000000000000000000000;;		Template                     bool                                       `xml:"template"`
0000000000000000000000000000000000000000;;		GuestId                      string                                     `xml:"guestId"`
0000000000000000000000000000000000000000;;		AlternateGuestName           string                                     `xml:"alternateGuestName"`
0000000000000000000000000000000000000000;;		Annotation                   string                                     `xml:"annotation,omitempty"`
0000000000000000000000000000000000000000;;		Files                        VirtualMachineFileInfo                     `xml:"files"`
0000000000000000000000000000000000000000;;		Tools                        *ToolsConfigInfo                           `xml:"tools,omitempty"`
0000000000000000000000000000000000000000;;		Flags                        VirtualMachineFlagInfo                     `xml:"flags"`
0000000000000000000000000000000000000000;;		ConsolePreferences           *VirtualMachineConsolePreferences          `xml:"consolePreferences,omitempty"`
0000000000000000000000000000000000000000;;		DefaultPowerOps              VirtualMachineDefaultPowerOpInfo           `xml:"defaultPowerOps"`
0000000000000000000000000000000000000000;;		Hardware                     VirtualHardware                            `xml:"hardware"`
0000000000000000000000000000000000000000;;		CpuAllocation                BaseResourceAllocationInfo                 `xml:"cpuAllocation,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		MemoryAllocation             BaseResourceAllocationInfo                 `xml:"memoryAllocation,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		LatencySensitivity           *LatencySensitivity                        `xml:"latencySensitivity,omitempty"`
0000000000000000000000000000000000000000;;		MemoryHotAddEnabled          *bool                                      `xml:"memoryHotAddEnabled"`
0000000000000000000000000000000000000000;;		CpuHotAddEnabled             *bool                                      `xml:"cpuHotAddEnabled"`
0000000000000000000000000000000000000000;;		CpuHotRemoveEnabled          *bool                                      `xml:"cpuHotRemoveEnabled"`
0000000000000000000000000000000000000000;;		HotPlugMemoryLimit           int64                                      `xml:"hotPlugMemoryLimit,omitempty"`
0000000000000000000000000000000000000000;;		HotPlugMemoryIncrementSize   int64                                      `xml:"hotPlugMemoryIncrementSize,omitempty"`
0000000000000000000000000000000000000000;;		CpuAffinity                  *VirtualMachineAffinityInfo                `xml:"cpuAffinity,omitempty"`
0000000000000000000000000000000000000000;;		MemoryAffinity               *VirtualMachineAffinityInfo                `xml:"memoryAffinity,omitempty"`
0000000000000000000000000000000000000000;;		NetworkShaper                *VirtualMachineNetworkShaperInfo           `xml:"networkShaper,omitempty"`
0000000000000000000000000000000000000000;;		ExtraConfig                  []BaseOptionValue                          `xml:"extraConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		CpuFeatureMask               []HostCpuIdInfo                            `xml:"cpuFeatureMask,omitempty"`
0000000000000000000000000000000000000000;;		DatastoreUrl                 []VirtualMachineConfigInfoDatastoreUrlPair `xml:"datastoreUrl,omitempty"`
0000000000000000000000000000000000000000;;		SwapPlacement                string                                     `xml:"swapPlacement,omitempty"`
0000000000000000000000000000000000000000;;		BootOptions                  *VirtualMachineBootOptions                 `xml:"bootOptions,omitempty"`
0000000000000000000000000000000000000000;;		FtInfo                       BaseFaultToleranceConfigInfo               `xml:"ftInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		RepConfig                    *ReplicationConfigSpec                     `xml:"repConfig,omitempty"`
0000000000000000000000000000000000000000;;		VAppConfig                   BaseVmConfigInfo                           `xml:"vAppConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		VAssertsEnabled              *bool                                      `xml:"vAssertsEnabled"`
0000000000000000000000000000000000000000;;		ChangeTrackingEnabled        *bool                                      `xml:"changeTrackingEnabled"`
0000000000000000000000000000000000000000;;		Firmware                     string                                     `xml:"firmware,omitempty"`
0000000000000000000000000000000000000000;;		MaxMksConnections            int32                                      `xml:"maxMksConnections,omitempty"`
0000000000000000000000000000000000000000;;		GuestAutoLockEnabled         *bool                                      `xml:"guestAutoLockEnabled"`
0000000000000000000000000000000000000000;;		ManagedBy                    *ManagedByInfo                             `xml:"managedBy,omitempty"`
0000000000000000000000000000000000000000;;		MemoryReservationLockedToMax *bool                                      `xml:"memoryReservationLockedToMax"`
0000000000000000000000000000000000000000;;		InitialOverhead              *VirtualMachineConfigInfoOverheadInfo      `xml:"initialOverhead,omitempty"`
0000000000000000000000000000000000000000;;		NestedHVEnabled              *bool                                      `xml:"nestedHVEnabled"`
0000000000000000000000000000000000000000;;		VPMCEnabled                  *bool                                      `xml:"vPMCEnabled"`
0000000000000000000000000000000000000000;;		ScheduledHardwareUpgradeInfo *ScheduledHardwareUpgradeInfo              `xml:"scheduledHardwareUpgradeInfo,omitempty"`
0000000000000000000000000000000000000000;;		ForkConfigInfo               *VirtualMachineForkConfigInfo              `xml:"forkConfigInfo,omitempty"`
0000000000000000000000000000000000000000;;		VFlashCacheReservation       int64                                      `xml:"vFlashCacheReservation,omitempty"`
0000000000000000000000000000000000000000;;		VmxConfigChecksum            []byte                                     `xml:"vmxConfigChecksum,omitempty"`
0000000000000000000000000000000000000000;;		MessageBusTunnelEnabled      *bool                                      `xml:"messageBusTunnelEnabled"`
0000000000000000000000000000000000000000;;		VmStorageObjectId            string                                     `xml:"vmStorageObjectId,omitempty"`
0000000000000000000000000000000000000000;;		SwapStorageObjectId          string                                     `xml:"swapStorageObjectId,omitempty"`
0000000000000000000000000000000000000000;;		KeyId                        *CryptoKeyId                               `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;		GuestIntegrityInfo           *VirtualMachineGuestIntegrityInfo          `xml:"guestIntegrityInfo,omitempty"`
0000000000000000000000000000000000000000;;		MigrateEncryption            string                                     `xml:"migrateEncryption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigInfo"] = reflect.TypeOf((*VirtualMachineConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigInfoDatastoreUrlPair struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;		Url  string `xml:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigInfoDatastoreUrlPair"] = reflect.TypeOf((*VirtualMachineConfigInfoDatastoreUrlPair)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigInfoOverheadInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InitialMemoryReservation int64 `xml:"initialMemoryReservation,omitempty"`
0000000000000000000000000000000000000000;;		InitialSwapReservation   int64 `xml:"initialSwapReservation,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigInfoOverheadInfo"] = reflect.TypeOf((*VirtualMachineConfigInfoOverheadInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version                          string                   `xml:"version"`
0000000000000000000000000000000000000000;;		Description                      string                   `xml:"description"`
0000000000000000000000000000000000000000;;		GuestOSDescriptor                []GuestOsDescriptor      `xml:"guestOSDescriptor"`
0000000000000000000000000000000000000000;;		GuestOSDefaultIndex              int32                    `xml:"guestOSDefaultIndex"`
0000000000000000000000000000000000000000;;		HardwareOptions                  VirtualHardwareOption    `xml:"hardwareOptions"`
0000000000000000000000000000000000000000;;		Capabilities                     VirtualMachineCapability `xml:"capabilities"`
0000000000000000000000000000000000000000;;		Datastore                        DatastoreOption          `xml:"datastore"`
0000000000000000000000000000000000000000;;		DefaultDevice                    []BaseVirtualDevice      `xml:"defaultDevice,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		SupportedMonitorType             []string                 `xml:"supportedMonitorType"`
0000000000000000000000000000000000000000;;		SupportedOvfEnvironmentTransport []string                 `xml:"supportedOvfEnvironmentTransport,omitempty"`
0000000000000000000000000000000000000000;;		SupportedOvfInstallTransport     []string                 `xml:"supportedOvfInstallTransport,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigOption"] = reflect.TypeOf((*VirtualMachineConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigOptionDescriptor struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key                 string                   `xml:"key"`
0000000000000000000000000000000000000000;;		Description         string                   `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		Host                []ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		CreateSupported     *bool                    `xml:"createSupported"`
0000000000000000000000000000000000000000;;		DefaultConfigOption *bool                    `xml:"defaultConfigOption"`
0000000000000000000000000000000000000000;;		RunSupported        *bool                    `xml:"runSupported"`
0000000000000000000000000000000000000000;;		UpgradeSupported    *bool                    `xml:"upgradeSupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigOptionDescriptor"] = reflect.TypeOf((*VirtualMachineConfigOptionDescriptor)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeVersion                string                            `xml:"changeVersion,omitempty"`
0000000000000000000000000000000000000000;;		Name                         string                            `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Version                      string                            `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;		Uuid                         string                            `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		InstanceUuid                 string                            `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;		NpivNodeWorldWideName        []int64                           `xml:"npivNodeWorldWideName,omitempty"`
0000000000000000000000000000000000000000;;		NpivPortWorldWideName        []int64                           `xml:"npivPortWorldWideName,omitempty"`
0000000000000000000000000000000000000000;;		NpivWorldWideNameType        string                            `xml:"npivWorldWideNameType,omitempty"`
0000000000000000000000000000000000000000;;		NpivDesiredNodeWwns          int16                             `xml:"npivDesiredNodeWwns,omitempty"`
0000000000000000000000000000000000000000;;		NpivDesiredPortWwns          int16                             `xml:"npivDesiredPortWwns,omitempty"`
0000000000000000000000000000000000000000;;		NpivTemporaryDisabled        *bool                             `xml:"npivTemporaryDisabled"`
0000000000000000000000000000000000000000;;		NpivOnNonRdmDisks            *bool                             `xml:"npivOnNonRdmDisks"`
0000000000000000000000000000000000000000;;		NpivWorldWideNameOp          string                            `xml:"npivWorldWideNameOp,omitempty"`
0000000000000000000000000000000000000000;;		LocationId                   string                            `xml:"locationId,omitempty"`
0000000000000000000000000000000000000000;;		GuestId                      string                            `xml:"guestId,omitempty"`
0000000000000000000000000000000000000000;;		AlternateGuestName           string                            `xml:"alternateGuestName,omitempty"`
0000000000000000000000000000000000000000;;		Annotation                   string                            `xml:"annotation,omitempty"`
0000000000000000000000000000000000000000;;		Files                        *VirtualMachineFileInfo           `xml:"files,omitempty"`
0000000000000000000000000000000000000000;;		Tools                        *ToolsConfigInfo                  `xml:"tools,omitempty"`
0000000000000000000000000000000000000000;;		Flags                        *VirtualMachineFlagInfo           `xml:"flags,omitempty"`
0000000000000000000000000000000000000000;;		ConsolePreferences           *VirtualMachineConsolePreferences `xml:"consolePreferences,omitempty"`
0000000000000000000000000000000000000000;;		PowerOpInfo                  *VirtualMachineDefaultPowerOpInfo `xml:"powerOpInfo,omitempty"`
0000000000000000000000000000000000000000;;		NumCPUs                      int32                             `xml:"numCPUs,omitempty"`
0000000000000000000000000000000000000000;;		NumCoresPerSocket            int32                             `xml:"numCoresPerSocket,omitempty"`
0000000000000000000000000000000000000000;;		MemoryMB                     int64                             `xml:"memoryMB,omitempty"`
0000000000000000000000000000000000000000;;		MemoryHotAddEnabled          *bool                             `xml:"memoryHotAddEnabled"`
0000000000000000000000000000000000000000;;		CpuHotAddEnabled             *bool                             `xml:"cpuHotAddEnabled"`
0000000000000000000000000000000000000000;;		CpuHotRemoveEnabled          *bool                             `xml:"cpuHotRemoveEnabled"`
0000000000000000000000000000000000000000;;		VirtualICH7MPresent          *bool                             `xml:"virtualICH7MPresent"`
0000000000000000000000000000000000000000;;		VirtualSMCPresent            *bool                             `xml:"virtualSMCPresent"`
0000000000000000000000000000000000000000;;		DeviceChange                 []BaseVirtualDeviceConfigSpec     `xml:"deviceChange,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		CpuAllocation                BaseResourceAllocationInfo        `xml:"cpuAllocation,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		MemoryAllocation             BaseResourceAllocationInfo        `xml:"memoryAllocation,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		LatencySensitivity           *LatencySensitivity               `xml:"latencySensitivity,omitempty"`
0000000000000000000000000000000000000000;;		CpuAffinity                  *VirtualMachineAffinityInfo       `xml:"cpuAffinity,omitempty"`
0000000000000000000000000000000000000000;;		MemoryAffinity               *VirtualMachineAffinityInfo       `xml:"memoryAffinity,omitempty"`
0000000000000000000000000000000000000000;;		NetworkShaper                *VirtualMachineNetworkShaperInfo  `xml:"networkShaper,omitempty"`
0000000000000000000000000000000000000000;;		CpuFeatureMask               []VirtualMachineCpuIdInfoSpec     `xml:"cpuFeatureMask,omitempty"`
0000000000000000000000000000000000000000;;		ExtraConfig                  []BaseOptionValue                 `xml:"extraConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		SwapPlacement                string                            `xml:"swapPlacement,omitempty"`
0000000000000000000000000000000000000000;;		BootOptions                  *VirtualMachineBootOptions        `xml:"bootOptions,omitempty"`
0000000000000000000000000000000000000000;;		VAppConfig                   BaseVmConfigSpec                  `xml:"vAppConfig,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		FtInfo                       BaseFaultToleranceConfigInfo      `xml:"ftInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		RepConfig                    *ReplicationConfigSpec            `xml:"repConfig,omitempty"`
0000000000000000000000000000000000000000;;		VAppConfigRemoved            *bool                             `xml:"vAppConfigRemoved"`
0000000000000000000000000000000000000000;;		VAssertsEnabled              *bool                             `xml:"vAssertsEnabled"`
0000000000000000000000000000000000000000;;		ChangeTrackingEnabled        *bool                             `xml:"changeTrackingEnabled"`
0000000000000000000000000000000000000000;;		Firmware                     string                            `xml:"firmware,omitempty"`
0000000000000000000000000000000000000000;;		MaxMksConnections            int32                             `xml:"maxMksConnections,omitempty"`
0000000000000000000000000000000000000000;;		GuestAutoLockEnabled         *bool                             `xml:"guestAutoLockEnabled"`
0000000000000000000000000000000000000000;;		ManagedBy                    *ManagedByInfo                    `xml:"managedBy,omitempty"`
0000000000000000000000000000000000000000;;		MemoryReservationLockedToMax *bool                             `xml:"memoryReservationLockedToMax"`
0000000000000000000000000000000000000000;;		NestedHVEnabled              *bool                             `xml:"nestedHVEnabled"`
0000000000000000000000000000000000000000;;		VPMCEnabled                  *bool                             `xml:"vPMCEnabled"`
0000000000000000000000000000000000000000;;		ScheduledHardwareUpgradeInfo *ScheduledHardwareUpgradeInfo     `xml:"scheduledHardwareUpgradeInfo,omitempty"`
0000000000000000000000000000000000000000;;		VmProfile                    []BaseVirtualMachineProfileSpec   `xml:"vmProfile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		MessageBusTunnelEnabled      *bool                             `xml:"messageBusTunnelEnabled"`
0000000000000000000000000000000000000000;;		Crypto                       BaseCryptoSpec                    `xml:"crypto,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		MigrateEncryption            string                            `xml:"migrateEncryption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigSpec"] = reflect.TypeOf((*VirtualMachineConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConfigSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name                string                       `xml:"name"`
0000000000000000000000000000000000000000;;		Template            bool                         `xml:"template"`
0000000000000000000000000000000000000000;;		VmPathName          string                       `xml:"vmPathName"`
0000000000000000000000000000000000000000;;		MemorySizeMB        int32                        `xml:"memorySizeMB,omitempty"`
0000000000000000000000000000000000000000;;		CpuReservation      int32                        `xml:"cpuReservation,omitempty"`
0000000000000000000000000000000000000000;;		MemoryReservation   int32                        `xml:"memoryReservation,omitempty"`
0000000000000000000000000000000000000000;;		NumCpu              int32                        `xml:"numCpu,omitempty"`
0000000000000000000000000000000000000000;;		NumEthernetCards    int32                        `xml:"numEthernetCards,omitempty"`
0000000000000000000000000000000000000000;;		NumVirtualDisks     int32                        `xml:"numVirtualDisks,omitempty"`
0000000000000000000000000000000000000000;;		Uuid                string                       `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		InstanceUuid        string                       `xml:"instanceUuid,omitempty"`
0000000000000000000000000000000000000000;;		GuestId             string                       `xml:"guestId,omitempty"`
0000000000000000000000000000000000000000;;		GuestFullName       string                       `xml:"guestFullName,omitempty"`
0000000000000000000000000000000000000000;;		Annotation          string                       `xml:"annotation,omitempty"`
0000000000000000000000000000000000000000;;		Product             *VAppProductInfo             `xml:"product,omitempty"`
0000000000000000000000000000000000000000;;		InstallBootRequired *bool                        `xml:"installBootRequired"`
0000000000000000000000000000000000000000;;		FtInfo              BaseFaultToleranceConfigInfo `xml:"ftInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		ManagedBy           *ManagedByInfo               `xml:"managedBy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConfigSummary"] = reflect.TypeOf((*VirtualMachineConfigSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineConsolePreferences struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PowerOnWhenOpened        *bool `xml:"powerOnWhenOpened"`
0000000000000000000000000000000000000000;;		EnterFullScreenOnPowerOn *bool `xml:"enterFullScreenOnPowerOn"`
0000000000000000000000000000000000000000;;		CloseOnPowerOffOrSuspend *bool `xml:"closeOnPowerOffOrSuspend"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineConsolePreferences"] = reflect.TypeOf((*VirtualMachineConsolePreferences)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineCpuIdInfoSpec struct {
0000000000000000000000000000000000000000;;		ArrayUpdateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info *HostCpuIdInfo `xml:"info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineCpuIdInfoSpec"] = reflect.TypeOf((*VirtualMachineCpuIdInfoSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDatastoreInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore              DatastoreSummary    `xml:"datastore"`
0000000000000000000000000000000000000000;;		Capability             DatastoreCapability `xml:"capability"`
0000000000000000000000000000000000000000;;		MaxFileSize            int64               `xml:"maxFileSize"`
0000000000000000000000000000000000000000;;		MaxVirtualDiskCapacity int64               `xml:"maxVirtualDiskCapacity,omitempty"`
0000000000000000000000000000000000000000;;		MaxPhysicalRDMFileSize int64               `xml:"maxPhysicalRDMFileSize,omitempty"`
0000000000000000000000000000000000000000;;		MaxVirtualRDMFileSize  int64               `xml:"maxVirtualRDMFileSize,omitempty"`
0000000000000000000000000000000000000000;;		Mode                   string              `xml:"mode"`
0000000000000000000000000000000000000000;;		VStorageSupport        string              `xml:"vStorageSupport,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDatastoreInfo"] = reflect.TypeOf((*VirtualMachineDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDatastoreVolumeOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileSystemType string `xml:"fileSystemType"`
0000000000000000000000000000000000000000;;		MajorVersion   int32  `xml:"majorVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDatastoreVolumeOption"] = reflect.TypeOf((*VirtualMachineDatastoreVolumeOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDefaultPowerOpInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PowerOffType        string `xml:"powerOffType,omitempty"`
0000000000000000000000000000000000000000;;		SuspendType         string `xml:"suspendType,omitempty"`
0000000000000000000000000000000000000000;;		ResetType           string `xml:"resetType,omitempty"`
0000000000000000000000000000000000000000;;		DefaultPowerOffType string `xml:"defaultPowerOffType,omitempty"`
0000000000000000000000000000000000000000;;		DefaultSuspendType  string `xml:"defaultSuspendType,omitempty"`
0000000000000000000000000000000000000000;;		DefaultResetType    string `xml:"defaultResetType,omitempty"`
0000000000000000000000000000000000000000;;		StandbyAction       string `xml:"standbyAction,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDefaultPowerOpInfo"] = reflect.TypeOf((*VirtualMachineDefaultPowerOpInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDefaultProfileSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineProfileSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDefaultProfileSpec"] = reflect.TypeOf((*VirtualMachineDefaultProfileSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDefinedProfileSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineProfileSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfileId       string                        `xml:"profileId"`
0000000000000000000000000000000000000000;;		ReplicationSpec *ReplicationSpec              `xml:"replicationSpec,omitempty"`
0000000000000000000000000000000000000000;;		ProfileData     *VirtualMachineProfileRawData `xml:"profileData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDefinedProfileSpec"] = reflect.TypeOf((*VirtualMachineDefinedProfileSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDeviceRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RuntimeState BaseVirtualMachineDeviceRuntimeInfoDeviceRuntimeState `xml:"runtimeState,typeattr"`
0000000000000000000000000000000000000000;;		Key          int32                                                 `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDeviceRuntimeInfo"] = reflect.TypeOf((*VirtualMachineDeviceRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDeviceRuntimeInfoDeviceRuntimeState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"] = reflect.TypeOf((*VirtualMachineDeviceRuntimeInfoDeviceRuntimeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState struct {
0000000000000000000000000000000000000000;;		VirtualMachineDeviceRuntimeInfoDeviceRuntimeState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmDirectPathGen2Active                 bool     `xml:"vmDirectPathGen2Active"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2InactiveReasonVm       []string `xml:"vmDirectPathGen2InactiveReasonVm,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2InactiveReasonOther    []string `xml:"vmDirectPathGen2InactiveReasonOther,omitempty"`
0000000000000000000000000000000000000000;;		VmDirectPathGen2InactiveReasonExtended string   `xml:"vmDirectPathGen2InactiveReasonExtended,omitempty"`
0000000000000000000000000000000000000000;;		ReservationStatus                      string   `xml:"reservationStatus,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState"] = reflect.TypeOf((*VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDiskDeviceInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capacity int64                    `xml:"capacity,omitempty"`
0000000000000000000000000000000000000000;;		Vm       []ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDiskDeviceInfo"] = reflect.TypeOf((*VirtualMachineDiskDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDisplayTopology struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		X      int32 `xml:"x"`
0000000000000000000000000000000000000000;;		Y      int32 `xml:"y"`
0000000000000000000000000000000000000000;;		Width  int32 `xml:"width"`
0000000000000000000000000000000000000000;;		Height int32 `xml:"height"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineDisplayTopology"] = reflect.TypeOf((*VirtualMachineDisplayTopology)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineEmptyProfileSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineProfileSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineEmptyProfileSpec"] = reflect.TypeOf((*VirtualMachineEmptyProfileSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFeatureRequirement struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key         string `xml:"key"`
0000000000000000000000000000000000000000;;		FeatureName string `xml:"featureName"`
0000000000000000000000000000000000000000;;		Value       string `xml:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFeatureRequirement"] = reflect.TypeOf((*VirtualMachineFeatureRequirement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmPathName          string `xml:"vmPathName,omitempty"`
0000000000000000000000000000000000000000;;		SnapshotDirectory   string `xml:"snapshotDirectory,omitempty"`
0000000000000000000000000000000000000000;;		SuspendDirectory    string `xml:"suspendDirectory,omitempty"`
0000000000000000000000000000000000000000;;		LogDirectory        string `xml:"logDirectory,omitempty"`
0000000000000000000000000000000000000000;;		FtMetadataDirectory string `xml:"ftMetadataDirectory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileInfo"] = reflect.TypeOf((*VirtualMachineFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayout struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigFile []string                                 `xml:"configFile,omitempty"`
0000000000000000000000000000000000000000;;		LogFile    []string                                 `xml:"logFile,omitempty"`
0000000000000000000000000000000000000000;;		Disk       []VirtualMachineFileLayoutDiskLayout     `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;		Snapshot   []VirtualMachineFileLayoutSnapshotLayout `xml:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;		SwapFile   string                                   `xml:"swapFile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayout"] = reflect.TypeOf((*VirtualMachineFileLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutDiskLayout struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      int32    `xml:"key"`
0000000000000000000000000000000000000000;;		DiskFile []string `xml:"diskFile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutDiskLayout"] = reflect.TypeOf((*VirtualMachineFileLayoutDiskLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutEx struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		File      []VirtualMachineFileLayoutExFileInfo       `xml:"file,omitempty"`
0000000000000000000000000000000000000000;;		Disk      []VirtualMachineFileLayoutExDiskLayout     `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;		Snapshot  []VirtualMachineFileLayoutExSnapshotLayout `xml:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;		Timestamp time.Time                                  `xml:"timestamp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutEx"] = reflect.TypeOf((*VirtualMachineFileLayoutEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutExDiskLayout struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key   int32                                `xml:"key"`
0000000000000000000000000000000000000000;;		Chain []VirtualMachineFileLayoutExDiskUnit `xml:"chain,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutExDiskLayout"] = reflect.TypeOf((*VirtualMachineFileLayoutExDiskLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutExDiskUnit struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FileKey []int32 `xml:"fileKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutExDiskUnit"] = reflect.TypeOf((*VirtualMachineFileLayoutExDiskUnit)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutExFileInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key             int32  `xml:"key"`
0000000000000000000000000000000000000000;;		Name            string `xml:"name"`
0000000000000000000000000000000000000000;;		Type            string `xml:"type"`
0000000000000000000000000000000000000000;;		Size            int64  `xml:"size"`
0000000000000000000000000000000000000000;;		UniqueSize      int64  `xml:"uniqueSize,omitempty"`
0000000000000000000000000000000000000000;;		BackingObjectId string `xml:"backingObjectId,omitempty"`
0000000000000000000000000000000000000000;;		Accessible      *bool  `xml:"accessible"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutExFileInfo"] = reflect.TypeOf((*VirtualMachineFileLayoutExFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutExSnapshotLayout struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key       ManagedObjectReference                 `xml:"key"`
0000000000000000000000000000000000000000;;		DataKey   int32                                  `xml:"dataKey"`
0000000000000000000000000000000000000000;;		MemoryKey int32                                  `xml:"memoryKey,omitempty"`
0000000000000000000000000000000000000000;;		Disk      []VirtualMachineFileLayoutExDiskLayout `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutExSnapshotLayout"] = reflect.TypeOf((*VirtualMachineFileLayoutExSnapshotLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFileLayoutSnapshotLayout struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key          ManagedObjectReference `xml:"key"`
0000000000000000000000000000000000000000;;		SnapshotFile []string               `xml:"snapshotFile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFileLayoutSnapshotLayout"] = reflect.TypeOf((*VirtualMachineFileLayoutSnapshotLayout)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFlagInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DisableAcceleration      *bool  `xml:"disableAcceleration"`
0000000000000000000000000000000000000000;;		EnableLogging            *bool  `xml:"enableLogging"`
0000000000000000000000000000000000000000;;		UseToe                   *bool  `xml:"useToe"`
0000000000000000000000000000000000000000;;		RunWithDebugInfo         *bool  `xml:"runWithDebugInfo"`
0000000000000000000000000000000000000000;;		MonitorType              string `xml:"monitorType,omitempty"`
0000000000000000000000000000000000000000;;		HtSharing                string `xml:"htSharing,omitempty"`
0000000000000000000000000000000000000000;;		SnapshotDisabled         *bool  `xml:"snapshotDisabled"`
0000000000000000000000000000000000000000;;		SnapshotLocked           *bool  `xml:"snapshotLocked"`
0000000000000000000000000000000000000000;;		DiskUuidEnabled          *bool  `xml:"diskUuidEnabled"`
0000000000000000000000000000000000000000;;		VirtualMmuUsage          string `xml:"virtualMmuUsage,omitempty"`
0000000000000000000000000000000000000000;;		VirtualExecUsage         string `xml:"virtualExecUsage,omitempty"`
0000000000000000000000000000000000000000;;		SnapshotPowerOffBehavior string `xml:"snapshotPowerOffBehavior,omitempty"`
0000000000000000000000000000000000000000;;		RecordReplayEnabled      *bool  `xml:"recordReplayEnabled"`
0000000000000000000000000000000000000000;;		FaultToleranceType       string `xml:"faultToleranceType,omitempty"`
0000000000000000000000000000000000000000;;		CbrcCacheEnabled         *bool  `xml:"cbrcCacheEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFlagInfo"] = reflect.TypeOf((*VirtualMachineFlagInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineFloppyInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineFloppyInfo"] = reflect.TypeOf((*VirtualMachineFloppyInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineForkConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ParentEnabled     *bool  `xml:"parentEnabled"`
0000000000000000000000000000000000000000;;		ChildForkGroupId  string `xml:"childForkGroupId,omitempty"`
0000000000000000000000000000000000000000;;		ParentForkGroupId string `xml:"parentForkGroupId,omitempty"`
0000000000000000000000000000000000000000;;		ChildType         string `xml:"childType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineForkConfigInfo"] = reflect.TypeOf((*VirtualMachineForkConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineGuestIntegrityInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled *bool `xml:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineGuestIntegrityInfo"] = reflect.TypeOf((*VirtualMachineGuestIntegrityInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineGuestQuiesceSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timeout int32 `xml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineGuestQuiesceSpec"] = reflect.TypeOf((*VirtualMachineGuestQuiesceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineGuestSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GuestId             string                    `xml:"guestId,omitempty"`
0000000000000000000000000000000000000000;;		GuestFullName       string                    `xml:"guestFullName,omitempty"`
0000000000000000000000000000000000000000;;		ToolsStatus         VirtualMachineToolsStatus `xml:"toolsStatus,omitempty"`
0000000000000000000000000000000000000000;;		ToolsVersionStatus  string                    `xml:"toolsVersionStatus,omitempty"`
0000000000000000000000000000000000000000;;		ToolsVersionStatus2 string                    `xml:"toolsVersionStatus2,omitempty"`
0000000000000000000000000000000000000000;;		ToolsRunningStatus  string                    `xml:"toolsRunningStatus,omitempty"`
0000000000000000000000000000000000000000;;		HostName            string                    `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		IpAddress           string                    `xml:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineGuestSummary"] = reflect.TypeOf((*VirtualMachineGuestSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineIdeDiskDeviceInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineDiskDeviceInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PartitionTable []VirtualMachineIdeDiskDevicePartitionInfo `xml:"partitionTable,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineIdeDiskDeviceInfo"] = reflect.TypeOf((*VirtualMachineIdeDiskDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineIdeDiskDevicePartitionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id       int32 `xml:"id"`
0000000000000000000000000000000000000000;;		Capacity int32 `xml:"capacity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineIdeDiskDevicePartitionInfo"] = reflect.TypeOf((*VirtualMachineIdeDiskDevicePartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineImportSpec struct {
0000000000000000000000000000000000000000;;		ImportSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec    VirtualMachineConfigSpec `xml:"configSpec"`
0000000000000000000000000000000000000000;;		ResPoolEntity *ManagedObjectReference  `xml:"resPoolEntity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineImportSpec"] = reflect.TypeOf((*VirtualMachineImportSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineLegacyNetworkSwitchInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineLegacyNetworkSwitchInfo"] = reflect.TypeOf((*VirtualMachineLegacyNetworkSwitchInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMemoryReservationInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VirtualMachineMin      int64  `xml:"virtualMachineMin"`
0000000000000000000000000000000000000000;;		VirtualMachineMax      int64  `xml:"virtualMachineMax"`
0000000000000000000000000000000000000000;;		VirtualMachineReserved int64  `xml:"virtualMachineReserved"`
0000000000000000000000000000000000000000;;		AllocationPolicy       string `xml:"allocationPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMemoryReservationInfo"] = reflect.TypeOf((*VirtualMachineMemoryReservationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMemoryReservationSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VirtualMachineReserved int64  `xml:"virtualMachineReserved,omitempty"`
0000000000000000000000000000000000000000;;		AllocationPolicy       string `xml:"allocationPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMemoryReservationSpec"] = reflect.TypeOf((*VirtualMachineMemoryReservationSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMessage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id       string    `xml:"id"`
0000000000000000000000000000000000000000;;		Argument []AnyType `xml:"argument,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Text     string    `xml:"text,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMessage"] = reflect.TypeOf((*VirtualMachineMessage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMetadataManagerVmMetadata struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmId     string `xml:"vmId"`
0000000000000000000000000000000000000000;;		Metadata string `xml:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMetadataManagerVmMetadata"] = reflect.TypeOf((*VirtualMachineMetadataManagerVmMetadata)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMetadataManagerVmMetadataInput struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation  string                                  `xml:"operation"`
0000000000000000000000000000000000000000;;		VmMetadata VirtualMachineMetadataManagerVmMetadata `xml:"vmMetadata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMetadataManagerVmMetadataInput"] = reflect.TypeOf((*VirtualMachineMetadataManagerVmMetadataInput)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMetadataManagerVmMetadataOwner struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMetadataManagerVmMetadataOwner"] = reflect.TypeOf((*VirtualMachineMetadataManagerVmMetadataOwner)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMetadataManagerVmMetadataResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmMetadata VirtualMachineMetadataManagerVmMetadata `xml:"vmMetadata"`
0000000000000000000000000000000000000000;;		Error      *LocalizedMethodFault                   `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMetadataManagerVmMetadataResult"] = reflect.TypeOf((*VirtualMachineMetadataManagerVmMetadataResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineMksTicket struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ticket        string `xml:"ticket"`
0000000000000000000000000000000000000000;;		CfgFile       string `xml:"cfgFile"`
0000000000000000000000000000000000000000;;		Host          string `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Port          int32  `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprint string `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineMksTicket"] = reflect.TypeOf((*VirtualMachineMksTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineNetworkInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Network BaseNetworkSummary `xml:"network,typeattr"`
0000000000000000000000000000000000000000;;		Vswitch string             `xml:"vswitch,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineNetworkInfo"] = reflect.TypeOf((*VirtualMachineNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineNetworkShaperInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled    *bool `xml:"enabled"`
0000000000000000000000000000000000000000;;		PeakBps    int64 `xml:"peakBps,omitempty"`
0000000000000000000000000000000000000000;;		AverageBps int64 `xml:"averageBps,omitempty"`
0000000000000000000000000000000000000000;;		BurstSize  int64 `xml:"burstSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineNetworkShaperInfo"] = reflect.TypeOf((*VirtualMachineNetworkShaperInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineParallelInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineParallelInfo"] = reflect.TypeOf((*VirtualMachineParallelInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachinePciPassthroughInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PciDevice HostPciDevice `xml:"pciDevice"`
0000000000000000000000000000000000000000;;		SystemId  string        `xml:"systemId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachinePciPassthroughInfo"] = reflect.TypeOf((*VirtualMachinePciPassthroughInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachinePciSharedGpuPassthroughInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vgpu string `xml:"vgpu"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachinePciSharedGpuPassthroughInfo"] = reflect.TypeOf((*VirtualMachinePciSharedGpuPassthroughInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineProfileRawData struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionKey string `xml:"extensionKey"`
0000000000000000000000000000000000000000;;		ObjectData   string `xml:"objectData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineProfileRawData"] = reflect.TypeOf((*VirtualMachineProfileRawData)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineProfileSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineProfileSpec"] = reflect.TypeOf((*VirtualMachineProfileSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineQuestionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id      string                  `xml:"id"`
0000000000000000000000000000000000000000;;		Text    string                  `xml:"text"`
0000000000000000000000000000000000000000;;		Choice  ChoiceOption            `xml:"choice"`
0000000000000000000000000000000000000000;;		Message []VirtualMachineMessage `xml:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineQuestionInfo"] = reflect.TypeOf((*VirtualMachineQuestionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineQuickStats struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OverallCpuUsage              int32               `xml:"overallCpuUsage,omitempty"`
0000000000000000000000000000000000000000;;		OverallCpuDemand             int32               `xml:"overallCpuDemand,omitempty"`
0000000000000000000000000000000000000000;;		GuestMemoryUsage             int32               `xml:"guestMemoryUsage,omitempty"`
0000000000000000000000000000000000000000;;		HostMemoryUsage              int32               `xml:"hostMemoryUsage,omitempty"`
0000000000000000000000000000000000000000;;		GuestHeartbeatStatus         ManagedEntityStatus `xml:"guestHeartbeatStatus"`
0000000000000000000000000000000000000000;;		DistributedCpuEntitlement    int32               `xml:"distributedCpuEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		DistributedMemoryEntitlement int32               `xml:"distributedMemoryEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		StaticCpuEntitlement         int32               `xml:"staticCpuEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		StaticMemoryEntitlement      int32               `xml:"staticMemoryEntitlement,omitempty"`
0000000000000000000000000000000000000000;;		PrivateMemory                int32               `xml:"privateMemory,omitempty"`
0000000000000000000000000000000000000000;;		SharedMemory                 int32               `xml:"sharedMemory,omitempty"`
0000000000000000000000000000000000000000;;		SwappedMemory                int32               `xml:"swappedMemory,omitempty"`
0000000000000000000000000000000000000000;;		BalloonedMemory              int32               `xml:"balloonedMemory,omitempty"`
0000000000000000000000000000000000000000;;		ConsumedOverheadMemory       int32               `xml:"consumedOverheadMemory,omitempty"`
0000000000000000000000000000000000000000;;		FtLogBandwidth               int32               `xml:"ftLogBandwidth,omitempty"`
0000000000000000000000000000000000000000;;		FtSecondaryLatency           int32               `xml:"ftSecondaryLatency,omitempty"`
0000000000000000000000000000000000000000;;		FtLatencyStatus              ManagedEntityStatus `xml:"ftLatencyStatus,omitempty"`
0000000000000000000000000000000000000000;;		CompressedMemory             int64               `xml:"compressedMemory,omitempty"`
0000000000000000000000000000000000000000;;		UptimeSeconds                int32               `xml:"uptimeSeconds,omitempty"`
0000000000000000000000000000000000000000;;		SsdSwappedMemory             int64               `xml:"ssdSwappedMemory,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineQuickStats"] = reflect.TypeOf((*VirtualMachineQuickStats)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineRelocateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Service      *ServiceLocator                         `xml:"service,omitempty"`
0000000000000000000000000000000000000000;;		Folder       *ManagedObjectReference                 `xml:"folder,omitempty"`
0000000000000000000000000000000000000000;;		Datastore    *ManagedObjectReference                 `xml:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		DiskMoveType string                                  `xml:"diskMoveType,omitempty"`
0000000000000000000000000000000000000000;;		Pool         *ManagedObjectReference                 `xml:"pool,omitempty"`
0000000000000000000000000000000000000000;;		Host         *ManagedObjectReference                 `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Disk         []VirtualMachineRelocateSpecDiskLocator `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;		Transform    VirtualMachineRelocateTransformation    `xml:"transform,omitempty"`
0000000000000000000000000000000000000000;;		DeviceChange []BaseVirtualDeviceConfigSpec           `xml:"deviceChange,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Profile      []BaseVirtualMachineProfileSpec         `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineRelocateSpec"] = reflect.TypeOf((*VirtualMachineRelocateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineRelocateSpecDiskLocator struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskId          int32                           `xml:"diskId"`
0000000000000000000000000000000000000000;;		Datastore       ManagedObjectReference          `xml:"datastore"`
0000000000000000000000000000000000000000;;		DiskMoveType    string                          `xml:"diskMoveType,omitempty"`
0000000000000000000000000000000000000000;;		DiskBackingInfo BaseVirtualDeviceBackingInfo    `xml:"diskBackingInfo,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Profile         []BaseVirtualMachineProfileSpec `xml:"profile,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineRelocateSpecDiskLocator"] = reflect.TypeOf((*VirtualMachineRelocateSpecDiskLocator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device                    []VirtualMachineDeviceRuntimeInfo            `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;		Host                      *ManagedObjectReference                      `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionState           VirtualMachineConnectionState                `xml:"connectionState"`
0000000000000000000000000000000000000000;;		PowerState                VirtualMachinePowerState                     `xml:"powerState"`
0000000000000000000000000000000000000000;;		FaultToleranceState       VirtualMachineFaultToleranceState            `xml:"faultToleranceState,omitempty"`
0000000000000000000000000000000000000000;;		DasVmProtection           *VirtualMachineRuntimeInfoDasProtectionState `xml:"dasVmProtection,omitempty"`
0000000000000000000000000000000000000000;;		ToolsInstallerMounted     bool                                         `xml:"toolsInstallerMounted"`
0000000000000000000000000000000000000000;;		SuspendTime               *time.Time                                   `xml:"suspendTime"`
0000000000000000000000000000000000000000;;		BootTime                  *time.Time                                   `xml:"bootTime"`
0000000000000000000000000000000000000000;;		SuspendInterval           int64                                        `xml:"suspendInterval,omitempty"`
0000000000000000000000000000000000000000;;		Question                  *VirtualMachineQuestionInfo                  `xml:"question,omitempty"`
0000000000000000000000000000000000000000;;		MemoryOverhead            int64                                        `xml:"memoryOverhead,omitempty"`
0000000000000000000000000000000000000000;;		MaxCpuUsage               int32                                        `xml:"maxCpuUsage,omitempty"`
0000000000000000000000000000000000000000;;		MaxMemoryUsage            int32                                        `xml:"maxMemoryUsage,omitempty"`
0000000000000000000000000000000000000000;;		NumMksConnections         int32                                        `xml:"numMksConnections"`
0000000000000000000000000000000000000000;;		RecordReplayState         VirtualMachineRecordReplayState              `xml:"recordReplayState,omitempty"`
0000000000000000000000000000000000000000;;		CleanPowerOff             *bool                                        `xml:"cleanPowerOff"`
0000000000000000000000000000000000000000;;		NeedSecondaryReason       string                                       `xml:"needSecondaryReason,omitempty"`
0000000000000000000000000000000000000000;;		OnlineStandby             *bool                                        `xml:"onlineStandby"`
0000000000000000000000000000000000000000;;		MinRequiredEVCModeKey     string                                       `xml:"minRequiredEVCModeKey,omitempty"`
0000000000000000000000000000000000000000;;		ConsolidationNeeded       *bool                                        `xml:"consolidationNeeded"`
0000000000000000000000000000000000000000;;		OfflineFeatureRequirement []VirtualMachineFeatureRequirement           `xml:"offlineFeatureRequirement,omitempty"`
0000000000000000000000000000000000000000;;		FeatureRequirement        []VirtualMachineFeatureRequirement           `xml:"featureRequirement,omitempty"`
0000000000000000000000000000000000000000;;		FeatureMask               []HostFeatureMask                            `xml:"featureMask,omitempty"`
0000000000000000000000000000000000000000;;		VFlashCacheAllocation     int64                                        `xml:"vFlashCacheAllocation,omitempty"`
0000000000000000000000000000000000000000;;		Paused                    *bool                                        `xml:"paused"`
0000000000000000000000000000000000000000;;		SnapshotInBackground      *bool                                        `xml:"snapshotInBackground"`
0000000000000000000000000000000000000000;;		QuiescedForkParent        *bool                                        `xml:"quiescedForkParent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineRuntimeInfo"] = reflect.TypeOf((*VirtualMachineRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineRuntimeInfoDasProtectionState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DasProtected bool `xml:"dasProtected"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineRuntimeInfoDasProtectionState"] = reflect.TypeOf((*VirtualMachineRuntimeInfoDasProtectionState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineScsiDiskDeviceInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineDiskDeviceInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk          *HostScsiDisk `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;		TransportHint string        `xml:"transportHint,omitempty"`
0000000000000000000000000000000000000000;;		LunNumber     int32         `xml:"lunNumber,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineScsiDiskDeviceInfo"] = reflect.TypeOf((*VirtualMachineScsiDiskDeviceInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineScsiPassthroughInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScsiClass          string `xml:"scsiClass"`
0000000000000000000000000000000000000000;;		Vendor             string `xml:"vendor"`
0000000000000000000000000000000000000000;;		PhysicalUnitNumber int32  `xml:"physicalUnitNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineScsiPassthroughInfo"] = reflect.TypeOf((*VirtualMachineScsiPassthroughInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSerialInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSerialInfo"] = reflect.TypeOf((*VirtualMachineSerialInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSnapshotInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CurrentSnapshot  *ManagedObjectReference      `xml:"currentSnapshot,omitempty"`
0000000000000000000000000000000000000000;;		RootSnapshotList []VirtualMachineSnapshotTree `xml:"rootSnapshotList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSnapshotInfo"] = reflect.TypeOf((*VirtualMachineSnapshotInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSnapshotTree struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Snapshot          ManagedObjectReference       `xml:"snapshot"`
0000000000000000000000000000000000000000;;		Vm                ManagedObjectReference       `xml:"vm"`
0000000000000000000000000000000000000000;;		Name              string                       `xml:"name"`
0000000000000000000000000000000000000000;;		Description       string                       `xml:"description"`
0000000000000000000000000000000000000000;;		Id                int32                        `xml:"id,omitempty"`
0000000000000000000000000000000000000000;;		CreateTime        time.Time                    `xml:"createTime"`
0000000000000000000000000000000000000000;;		State             VirtualMachinePowerState     `xml:"state"`
0000000000000000000000000000000000000000;;		Quiesced          bool                         `xml:"quiesced"`
0000000000000000000000000000000000000000;;		BackupManifest    string                       `xml:"backupManifest,omitempty"`
0000000000000000000000000000000000000000;;		ChildSnapshotList []VirtualMachineSnapshotTree `xml:"childSnapshotList,omitempty"`
0000000000000000000000000000000000000000;;		ReplaySupported   *bool                        `xml:"replaySupported"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSnapshotTree"] = reflect.TypeOf((*VirtualMachineSnapshotTree)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSoundInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSoundInfo"] = reflect.TypeOf((*VirtualMachineSoundInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSriovDevicePoolInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `xml:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSriovDevicePoolInfo"] = reflect.TypeOf((*VirtualMachineSriovDevicePoolInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSriovInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachinePciPassthroughInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VirtualFunction bool                                  `xml:"virtualFunction"`
0000000000000000000000000000000000000000;;		Pnic            string                                `xml:"pnic,omitempty"`
0000000000000000000000000000000000000000;;		DevicePool      BaseVirtualMachineSriovDevicePoolInfo `xml:"devicePool,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSriovInfo"] = reflect.TypeOf((*VirtualMachineSriovInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSriovNetworkDevicePoolInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineSriovDevicePoolInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwitchKey  string `xml:"switchKey,omitempty"`
0000000000000000000000000000000000000000;;		SwitchUuid string `xml:"switchUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSriovNetworkDevicePoolInfo"] = reflect.TypeOf((*VirtualMachineSriovNetworkDevicePoolInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineStorageInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PerDatastoreUsage []VirtualMachineUsageOnDatastore `xml:"perDatastoreUsage,omitempty"`
0000000000000000000000000000000000000000;;		Timestamp         time.Time                        `xml:"timestamp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineStorageInfo"] = reflect.TypeOf((*VirtualMachineStorageInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineStorageSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Committed   int64     `xml:"committed"`
0000000000000000000000000000000000000000;;		Uncommitted int64     `xml:"uncommitted"`
0000000000000000000000000000000000000000;;		Unshared    int64     `xml:"unshared"`
0000000000000000000000000000000000000000;;		Timestamp   time.Time `xml:"timestamp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineStorageSummary"] = reflect.TypeOf((*VirtualMachineStorageSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSummary struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm            *ManagedObjectReference       `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Runtime       VirtualMachineRuntimeInfo     `xml:"runtime"`
0000000000000000000000000000000000000000;;		Guest         *VirtualMachineGuestSummary   `xml:"guest,omitempty"`
0000000000000000000000000000000000000000;;		Config        VirtualMachineConfigSummary   `xml:"config"`
0000000000000000000000000000000000000000;;		Storage       *VirtualMachineStorageSummary `xml:"storage,omitempty"`
0000000000000000000000000000000000000000;;		QuickStats    VirtualMachineQuickStats      `xml:"quickStats"`
0000000000000000000000000000000000000000;;		OverallStatus ManagedEntityStatus           `xml:"overallStatus"`
0000000000000000000000000000000000000000;;		CustomValue   []BaseCustomFieldValue        `xml:"customValue,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSummary"] = reflect.TypeOf((*VirtualMachineSummary)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineTargetInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name             string   `xml:"name"`
0000000000000000000000000000000000000000;;		ConfigurationTag []string `xml:"configurationTag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineTargetInfo"] = reflect.TypeOf((*VirtualMachineTargetInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineTicket struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ticket        string `xml:"ticket"`
0000000000000000000000000000000000000000;;		CfgFile       string `xml:"cfgFile"`
0000000000000000000000000000000000000000;;		Host          string `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Port          int32  `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;		SslThumbprint string `xml:"sslThumbprint,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineTicket"] = reflect.TypeOf((*VirtualMachineTicket)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineUsageOnDatastore struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore   ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;		Committed   int64                  `xml:"committed"`
0000000000000000000000000000000000000000;;		Uncommitted int64                  `xml:"uncommitted"`
0000000000000000000000000000000000000000;;		Unshared    int64                  `xml:"unshared"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineUsageOnDatastore"] = reflect.TypeOf((*VirtualMachineUsageOnDatastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineUsbInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description  string                 `xml:"description"`
0000000000000000000000000000000000000000;;		Vendor       int32                  `xml:"vendor"`
0000000000000000000000000000000000000000;;		Product      int32                  `xml:"product"`
0000000000000000000000000000000000000000;;		PhysicalPath string                 `xml:"physicalPath"`
0000000000000000000000000000000000000000;;		Family       []string               `xml:"family,omitempty"`
0000000000000000000000000000000000000000;;		Speed        []string               `xml:"speed,omitempty"`
0000000000000000000000000000000000000000;;		Summary      *VirtualMachineSummary `xml:"summary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineUsbInfo"] = reflect.TypeOf((*VirtualMachineUsbInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVFlashModuleInfo struct {
0000000000000000000000000000000000000000;;		VirtualMachineTargetInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VFlashModule HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption `xml:"vFlashModule"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVFlashModuleInfo"] = reflect.TypeOf((*VirtualMachineVFlashModuleInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVMCIDevice struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id                             int64                               `xml:"id,omitempty"`
0000000000000000000000000000000000000000;;		AllowUnrestrictedCommunication *bool                               `xml:"allowUnrestrictedCommunication"`
0000000000000000000000000000000000000000;;		FilterEnable                   *bool                               `xml:"filterEnable"`
0000000000000000000000000000000000000000;;		FilterInfo                     *VirtualMachineVMCIDeviceFilterInfo `xml:"filterInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVMCIDevice"] = reflect.TypeOf((*VirtualMachineVMCIDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVMCIDeviceFilterInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filters []VirtualMachineVMCIDeviceFilterSpec `xml:"filters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVMCIDeviceFilterInfo"] = reflect.TypeOf((*VirtualMachineVMCIDeviceFilterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVMCIDeviceFilterSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Rank                 int64  `xml:"rank"`
0000000000000000000000000000000000000000;;		Action               string `xml:"action"`
0000000000000000000000000000000000000000;;		Protocol             string `xml:"protocol"`
0000000000000000000000000000000000000000;;		Direction            string `xml:"direction"`
0000000000000000000000000000000000000000;;		LowerDstPortBoundary int64  `xml:"lowerDstPortBoundary,omitempty"`
0000000000000000000000000000000000000000;;		UpperDstPortBoundary int64  `xml:"upperDstPortBoundary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVMCIDeviceFilterSpec"] = reflect.TypeOf((*VirtualMachineVMCIDeviceFilterSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVMCIDeviceOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowUnrestrictedCommunication BoolOption                                      `xml:"allowUnrestrictedCommunication"`
0000000000000000000000000000000000000000;;		FilterSpecOption               *VirtualMachineVMCIDeviceOptionFilterSpecOption `xml:"filterSpecOption,omitempty"`
0000000000000000000000000000000000000000;;		FilterSupported                *BoolOption                                     `xml:"filterSupported,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVMCIDeviceOption"] = reflect.TypeOf((*VirtualMachineVMCIDeviceOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVMCIDeviceOptionFilterSpecOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Action               ChoiceOption `xml:"action"`
0000000000000000000000000000000000000000;;		Protocol             ChoiceOption `xml:"protocol"`
0000000000000000000000000000000000000000;;		Direction            ChoiceOption `xml:"direction"`
0000000000000000000000000000000000000000;;		LowerDstPortBoundary LongOption   `xml:"lowerDstPortBoundary"`
0000000000000000000000000000000000000000;;		UpperDstPortBoundary LongOption   `xml:"upperDstPortBoundary"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVMCIDeviceOptionFilterSpecOption"] = reflect.TypeOf((*VirtualMachineVMCIDeviceOptionFilterSpecOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVMIROM struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVMIROM"] = reflect.TypeOf((*VirtualMachineVMIROM)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineVideoCard struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VideoRamSizeInKB       int64  `xml:"videoRamSizeInKB,omitempty"`
0000000000000000000000000000000000000000;;		NumDisplays            int32  `xml:"numDisplays,omitempty"`
0000000000000000000000000000000000000000;;		UseAutoDetect          *bool  `xml:"useAutoDetect"`
0000000000000000000000000000000000000000;;		Enable3DSupport        *bool  `xml:"enable3DSupport"`
0000000000000000000000000000000000000000;;		Use3dRenderer          string `xml:"use3dRenderer,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsMemorySizeInKB int64  `xml:"graphicsMemorySizeInKB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineVideoCard"] = reflect.TypeOf((*VirtualMachineVideoCard)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineWindowsQuiesceSpec struct {
0000000000000000000000000000000000000000;;		VirtualMachineGuestQuiesceSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VssBackupType          int32  `xml:"vssBackupType,omitempty"`
0000000000000000000000000000000000000000;;		VssBootableSystemState *bool  `xml:"vssBootableSystemState"`
0000000000000000000000000000000000000000;;		VssPartialFileSupport  *bool  `xml:"vssPartialFileSupport"`
0000000000000000000000000000000000000000;;		VssBackupContext       string `xml:"vssBackupContext,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineWindowsQuiesceSpec"] = reflect.TypeOf((*VirtualMachineWindowsQuiesceSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineWipeResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskId              int32 `xml:"diskId"`
0000000000000000000000000000000000000000;;		ShrinkableDiskSpace int64 `xml:"shrinkableDiskSpace"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineWipeResult"] = reflect.TypeOf((*VirtualMachineWipeResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualNVMEController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualNVMEController"] = reflect.TypeOf((*VirtualNVMEController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualNVMEControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumNVMEDisks IntOption `xml:"numNVMEDisks"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualNVMEControllerOption"] = reflect.TypeOf((*VirtualNVMEControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualNicManagerNetConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NicType            string           `xml:"nicType"`
0000000000000000000000000000000000000000;;		MultiSelectAllowed bool             `xml:"multiSelectAllowed"`
0000000000000000000000000000000000000000;;		CandidateVnic      []HostVirtualNic `xml:"candidateVnic,omitempty"`
0000000000000000000000000000000000000000;;		SelectedVnic       []string         `xml:"selectedVnic,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualNicManagerNetConfig"] = reflect.TypeOf((*VirtualNicManagerNetConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIController"] = reflect.TypeOf((*VirtualPCIController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumSCSIControllers            IntOption  `xml:"numSCSIControllers"`
0000000000000000000000000000000000000000;;		NumEthernetCards              IntOption  `xml:"numEthernetCards"`
0000000000000000000000000000000000000000;;		NumVideoCards                 IntOption  `xml:"numVideoCards"`
0000000000000000000000000000000000000000;;		NumSoundCards                 IntOption  `xml:"numSoundCards"`
0000000000000000000000000000000000000000;;		NumVmiRoms                    IntOption  `xml:"numVmiRoms"`
0000000000000000000000000000000000000000;;		NumVmciDevices                *IntOption `xml:"numVmciDevices,omitempty"`
0000000000000000000000000000000000000000;;		NumPCIPassthroughDevices      *IntOption `xml:"numPCIPassthroughDevices,omitempty"`
0000000000000000000000000000000000000000;;		NumSasSCSIControllers         *IntOption `xml:"numSasSCSIControllers,omitempty"`
0000000000000000000000000000000000000000;;		NumVmxnet3EthernetCards       *IntOption `xml:"numVmxnet3EthernetCards,omitempty"`
0000000000000000000000000000000000000000;;		NumParaVirtualSCSIControllers *IntOption `xml:"numParaVirtualSCSIControllers,omitempty"`
0000000000000000000000000000000000000000;;		NumSATAControllers            *IntOption `xml:"numSATAControllers,omitempty"`
0000000000000000000000000000000000000000;;		NumNVMEControllers            *IntOption `xml:"numNVMEControllers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIControllerOption"] = reflect.TypeOf((*VirtualPCIControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthrough struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthrough"] = reflect.TypeOf((*VirtualPCIPassthrough)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Id       string `xml:"id"`
0000000000000000000000000000000000000000;;		DeviceId string `xml:"deviceId"`
0000000000000000000000000000000000000000;;		SystemId string `xml:"systemId"`
0000000000000000000000000000000000000000;;		VendorId int16  `xml:"vendorId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughDeviceBackingInfo"] = reflect.TypeOf((*VirtualPCIPassthroughDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughDeviceBackingOption"] = reflect.TypeOf((*VirtualPCIPassthroughDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughOption"] = reflect.TypeOf((*VirtualPCIPassthroughOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughPluginBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughPluginBackingInfo"] = reflect.TypeOf((*VirtualPCIPassthroughPluginBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughPluginBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughPluginBackingOption"] = reflect.TypeOf((*VirtualPCIPassthroughPluginBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughVmiopBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualPCIPassthroughPluginBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vgpu string `xml:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughVmiopBackingInfo"] = reflect.TypeOf((*VirtualPCIPassthroughVmiopBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCIPassthroughVmiopBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualPCIPassthroughPluginBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vgpu         StringOption `xml:"vgpu"`
0000000000000000000000000000000000000000;;		MaxInstances int32        `xml:"maxInstances"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCIPassthroughVmiopBackingOption"] = reflect.TypeOf((*VirtualPCIPassthroughVmiopBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCNet32 struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCNet32"] = reflect.TypeOf((*VirtualPCNet32)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPCNet32Option struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCardOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SupportsMorphing bool `xml:"supportsMorphing"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPCNet32Option"] = reflect.TypeOf((*VirtualPCNet32Option)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPS2Controller struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPS2Controller"] = reflect.TypeOf((*VirtualPS2Controller)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPS2ControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumKeyboards       IntOption `xml:"numKeyboards"`
0000000000000000000000000000000000000000;;		NumPointingDevices IntOption `xml:"numPointingDevices"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPS2ControllerOption"] = reflect.TypeOf((*VirtualPS2ControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualParallelPort struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualParallelPort"] = reflect.TypeOf((*VirtualParallelPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualParallelPortDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualParallelPortDeviceBackingInfo"] = reflect.TypeOf((*VirtualParallelPortDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualParallelPortDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualParallelPortDeviceBackingOption"] = reflect.TypeOf((*VirtualParallelPortDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualParallelPortFileBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualParallelPortFileBackingInfo"] = reflect.TypeOf((*VirtualParallelPortFileBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualParallelPortFileBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualParallelPortFileBackingOption"] = reflect.TypeOf((*VirtualParallelPortFileBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualParallelPortOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualParallelPortOption"] = reflect.TypeOf((*VirtualParallelPortOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPointingDevice struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPointingDevice"] = reflect.TypeOf((*VirtualPointingDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPointingDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostPointingDevice ChoiceOption `xml:"hostPointingDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPointingDeviceBackingOption"] = reflect.TypeOf((*VirtualPointingDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPointingDeviceDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostPointingDevice string `xml:"hostPointingDevice"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPointingDeviceDeviceBackingInfo"] = reflect.TypeOf((*VirtualPointingDeviceDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualPointingDeviceOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualPointingDeviceOption"] = reflect.TypeOf((*VirtualPointingDeviceOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualResourcePoolSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VrpId            string                    `xml:"vrpId,omitempty"`
0000000000000000000000000000000000000000;;		VrpName          string                    `xml:"vrpName,omitempty"`
0000000000000000000000000000000000000000;;		Description      string                    `xml:"description,omitempty"`
0000000000000000000000000000000000000000;;		CpuAllocation    VrpResourceAllocationInfo `xml:"cpuAllocation"`
0000000000000000000000000000000000000000;;		MemoryAllocation VrpResourceAllocationInfo `xml:"memoryAllocation"`
0000000000000000000000000000000000000000;;		RpList           []ManagedObjectReference  `xml:"rpList,omitempty"`
0000000000000000000000000000000000000000;;		HubList          []ManagedObjectReference  `xml:"hubList,omitempty"`
0000000000000000000000000000000000000000;;		RootVRP          *bool                     `xml:"rootVRP"`
0000000000000000000000000000000000000000;;		StaticVRP        *bool                     `xml:"staticVRP"`
0000000000000000000000000000000000000000;;		ChangeVersion    int64                     `xml:"changeVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualResourcePoolSpec"] = reflect.TypeOf((*VirtualResourcePoolSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualResourcePoolUsage struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VrpId                 string `xml:"vrpId"`
0000000000000000000000000000000000000000;;		CpuReservationMhz     int64  `xml:"cpuReservationMhz"`
0000000000000000000000000000000000000000;;		MemReservationMB      int64  `xml:"memReservationMB"`
0000000000000000000000000000000000000000;;		CpuReservationUsedMhz int64  `xml:"cpuReservationUsedMhz"`
0000000000000000000000000000000000000000;;		MemReservationUsedMB  int64  `xml:"memReservationUsedMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualResourcePoolUsage"] = reflect.TypeOf((*VirtualResourcePoolUsage)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSATAController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSATAController"] = reflect.TypeOf((*VirtualSATAController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSATAControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumSATADisks  IntOption `xml:"numSATADisks"`
0000000000000000000000000000000000000000;;		NumSATACdroms IntOption `xml:"numSATACdroms"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSATAControllerOption"] = reflect.TypeOf((*VirtualSATAControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSCSIController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HotAddRemove       *bool              `xml:"hotAddRemove"`
0000000000000000000000000000000000000000;;		SharedBus          VirtualSCSISharing `xml:"sharedBus"`
0000000000000000000000000000000000000000;;		ScsiCtlrUnitNumber int32              `xml:"scsiCtlrUnitNumber,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSCSIController"] = reflect.TypeOf((*VirtualSCSIController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSCSIControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumSCSIDisks       IntOption            `xml:"numSCSIDisks"`
0000000000000000000000000000000000000000;;		NumSCSICdroms      IntOption            `xml:"numSCSICdroms"`
0000000000000000000000000000000000000000;;		NumSCSIPassthrough IntOption            `xml:"numSCSIPassthrough"`
0000000000000000000000000000000000000000;;		Sharing            []VirtualSCSISharing `xml:"sharing"`
0000000000000000000000000000000000000000;;		DefaultSharedIndex int32                `xml:"defaultSharedIndex"`
0000000000000000000000000000000000000000;;		HotAddRemove       BoolOption           `xml:"hotAddRemove"`
0000000000000000000000000000000000000000;;		ScsiCtlrUnitNumber int32                `xml:"scsiCtlrUnitNumber"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSCSIControllerOption"] = reflect.TypeOf((*VirtualSCSIControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSCSIPassthrough struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSCSIPassthrough"] = reflect.TypeOf((*VirtualSCSIPassthrough)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSCSIPassthroughDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSCSIPassthroughDeviceBackingInfo"] = reflect.TypeOf((*VirtualSCSIPassthroughDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSCSIPassthroughDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSCSIPassthroughDeviceBackingOption"] = reflect.TypeOf((*VirtualSCSIPassthroughDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSCSIPassthroughOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSCSIPassthroughOption"] = reflect.TypeOf((*VirtualSCSIPassthroughOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSIOController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSIOController"] = reflect.TypeOf((*VirtualSIOController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSIOControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NumFloppyDrives  IntOption `xml:"numFloppyDrives"`
0000000000000000000000000000000000000000;;		NumSerialPorts   IntOption `xml:"numSerialPorts"`
0000000000000000000000000000000000000000;;		NumParallelPorts IntOption `xml:"numParallelPorts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSIOControllerOption"] = reflect.TypeOf((*VirtualSIOControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPort struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		YieldOnPoll bool `xml:"yieldOnPoll"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPort"] = reflect.TypeOf((*VirtualSerialPort)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortDeviceBackingInfo"] = reflect.TypeOf((*VirtualSerialPortDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortDeviceBackingOption"] = reflect.TypeOf((*VirtualSerialPortDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortFileBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortFileBackingInfo"] = reflect.TypeOf((*VirtualSerialPortFileBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortFileBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceFileBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortFileBackingOption"] = reflect.TypeOf((*VirtualSerialPortFileBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		YieldOnPoll BoolOption `xml:"yieldOnPoll"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortOption"] = reflect.TypeOf((*VirtualSerialPortOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortPipeBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDevicePipeBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Endpoint string `xml:"endpoint"`
0000000000000000000000000000000000000000;;		NoRxLoss *bool  `xml:"noRxLoss"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortPipeBackingInfo"] = reflect.TypeOf((*VirtualSerialPortPipeBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortPipeBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDevicePipeBackingOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Endpoint ChoiceOption `xml:"endpoint"`
0000000000000000000000000000000000000000;;		NoRxLoss BoolOption   `xml:"noRxLoss"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortPipeBackingOption"] = reflect.TypeOf((*VirtualSerialPortPipeBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortThinPrintBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortThinPrintBackingInfo"] = reflect.TypeOf((*VirtualSerialPortThinPrintBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortThinPrintBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortThinPrintBackingOption"] = reflect.TypeOf((*VirtualSerialPortThinPrintBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortURIBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceURIBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortURIBackingInfo"] = reflect.TypeOf((*VirtualSerialPortURIBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSerialPortURIBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceURIBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSerialPortURIBackingOption"] = reflect.TypeOf((*VirtualSerialPortURIBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSoundBlaster16 struct {
0000000000000000000000000000000000000000;;		VirtualSoundCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSoundBlaster16"] = reflect.TypeOf((*VirtualSoundBlaster16)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSoundBlaster16Option struct {
0000000000000000000000000000000000000000;;		VirtualSoundCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSoundBlaster16Option"] = reflect.TypeOf((*VirtualSoundBlaster16Option)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSoundCard struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSoundCard"] = reflect.TypeOf((*VirtualSoundCard)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSoundCardDeviceBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSoundCardDeviceBackingInfo"] = reflect.TypeOf((*VirtualSoundCardDeviceBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSoundCardDeviceBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSoundCardDeviceBackingOption"] = reflect.TypeOf((*VirtualSoundCardDeviceBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSoundCardOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSoundCardOption"] = reflect.TypeOf((*VirtualSoundCardOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSriovEthernetCard struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowGuestOSMtuChange *bool                                     `xml:"allowGuestOSMtuChange"`
0000000000000000000000000000000000000000;;		SriovBacking          *VirtualSriovEthernetCardSriovBackingInfo `xml:"sriovBacking,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSriovEthernetCard"] = reflect.TypeOf((*VirtualSriovEthernetCard)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSriovEthernetCardOption struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSriovEthernetCardOption"] = reflect.TypeOf((*VirtualSriovEthernetCardOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSriovEthernetCardSriovBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PhysicalFunctionBacking *VirtualPCIPassthroughDeviceBackingInfo `xml:"physicalFunctionBacking,omitempty"`
0000000000000000000000000000000000000000;;		VirtualFunctionBacking  *VirtualPCIPassthroughDeviceBackingInfo `xml:"virtualFunctionBacking,omitempty"`
0000000000000000000000000000000000000000;;		VirtualFunctionIndex    int32                                   `xml:"virtualFunctionIndex,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSriovEthernetCardSriovBackingInfo"] = reflect.TypeOf((*VirtualSriovEthernetCardSriovBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSriovEthernetCardSriovBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSriovEthernetCardSriovBackingOption"] = reflect.TypeOf((*VirtualSriovEthernetCardSriovBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSwitchProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key           string               `xml:"key"`
0000000000000000000000000000000000000000;;		Name          string               `xml:"name"`
0000000000000000000000000000000000000000;;		Link          LinkProfile          `xml:"link"`
0000000000000000000000000000000000000000;;		NumPorts      NumPortsProfile      `xml:"numPorts"`
0000000000000000000000000000000000000000;;		NetworkPolicy NetworkPolicyProfile `xml:"networkPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSwitchProfile"] = reflect.TypeOf((*VirtualSwitchProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualSwitchSelectionProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualSwitchSelectionProfile"] = reflect.TypeOf((*VirtualSwitchSelectionProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSB struct {
0000000000000000000000000000000000000000;;		VirtualDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Connected bool     `xml:"connected"`
0000000000000000000000000000000000000000;;		Vendor    int32    `xml:"vendor,omitempty"`
0000000000000000000000000000000000000000;;		Product   int32    `xml:"product,omitempty"`
0000000000000000000000000000000000000000;;		Family    []string `xml:"family,omitempty"`
0000000000000000000000000000000000000000;;		Speed     []string `xml:"speed,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSB"] = reflect.TypeOf((*VirtualUSB)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoConnectDevices *bool `xml:"autoConnectDevices"`
0000000000000000000000000000000000000000;;		EhciEnabled        *bool `xml:"ehciEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBController"] = reflect.TypeOf((*VirtualUSBController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoConnectDevices BoolOption `xml:"autoConnectDevices"`
0000000000000000000000000000000000000000;;		EhciSupported      BoolOption `xml:"ehciSupported"`
0000000000000000000000000000000000000000;;		SupportedSpeeds    []string   `xml:"supportedSpeeds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBControllerOption"] = reflect.TypeOf((*VirtualUSBControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBControllerPciBusSlotInfo struct {
0000000000000000000000000000000000000000;;		VirtualDevicePciBusSlotInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EhciPciSlotNumber int32 `xml:"ehciPciSlotNumber,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBControllerPciBusSlotInfo"] = reflect.TypeOf((*VirtualUSBControllerPciBusSlotInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBOption"] = reflect.TypeOf((*VirtualUSBOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBRemoteClientBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `xml:"hostname"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBRemoteClientBackingInfo"] = reflect.TypeOf((*VirtualUSBRemoteClientBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBRemoteClientBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceRemoteDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBRemoteClientBackingOption"] = reflect.TypeOf((*VirtualUSBRemoteClientBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBRemoteHostBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `xml:"hostname"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBRemoteHostBackingInfo"] = reflect.TypeOf((*VirtualUSBRemoteHostBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBRemoteHostBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBRemoteHostBackingOption"] = reflect.TypeOf((*VirtualUSBRemoteHostBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBUSBBackingInfo struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBUSBBackingInfo"] = reflect.TypeOf((*VirtualUSBUSBBackingInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBUSBBackingOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceDeviceBackingOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBUSBBackingOption"] = reflect.TypeOf((*VirtualUSBUSBBackingOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBXHCIController struct {
0000000000000000000000000000000000000000;;		VirtualController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoConnectDevices *bool `xml:"autoConnectDevices"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBXHCIController"] = reflect.TypeOf((*VirtualUSBXHCIController)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualUSBXHCIControllerOption struct {
0000000000000000000000000000000000000000;;		VirtualControllerOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoConnectDevices BoolOption `xml:"autoConnectDevices"`
0000000000000000000000000000000000000000;;		SupportedSpeeds    []string   `xml:"supportedSpeeds"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualUSBXHCIControllerOption"] = reflect.TypeOf((*VirtualUSBXHCIControllerOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVMIROMOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVMIROMOption"] = reflect.TypeOf((*VirtualVMIROMOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVideoCardOption struct {
0000000000000000000000000000000000000000;;		VirtualDeviceOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VideoRamSizeInKB            *LongOption `xml:"videoRamSizeInKB,omitempty"`
0000000000000000000000000000000000000000;;		NumDisplays                 *IntOption  `xml:"numDisplays,omitempty"`
0000000000000000000000000000000000000000;;		UseAutoDetect               *BoolOption `xml:"useAutoDetect,omitempty"`
0000000000000000000000000000000000000000;;		Support3D                   *BoolOption `xml:"support3D,omitempty"`
0000000000000000000000000000000000000000;;		Use3dRendererSupported      *BoolOption `xml:"use3dRendererSupported,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsMemorySizeInKB      *LongOption `xml:"graphicsMemorySizeInKB,omitempty"`
0000000000000000000000000000000000000000;;		GraphicsMemorySizeSupported *BoolOption `xml:"graphicsMemorySizeSupported,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVideoCardOption"] = reflect.TypeOf((*VirtualVideoCardOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCard
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet"] = reflect.TypeOf((*VirtualVmxnet)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet2 struct {
0000000000000000000000000000000000000000;;		VirtualVmxnet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet2"] = reflect.TypeOf((*VirtualVmxnet2)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet2Option struct {
0000000000000000000000000000000000000000;;		VirtualVmxnetOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet2Option"] = reflect.TypeOf((*VirtualVmxnet2Option)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet3 struct {
0000000000000000000000000000000000000000;;		VirtualVmxnet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet3"] = reflect.TypeOf((*VirtualVmxnet3)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet3Option struct {
0000000000000000000000000000000000000000;;		VirtualVmxnetOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet3Option"] = reflect.TypeOf((*VirtualVmxnet3Option)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet3Vrdma struct {
0000000000000000000000000000000000000000;;		VirtualVmxnet3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet3Vrdma"] = reflect.TypeOf((*VirtualVmxnet3Vrdma)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnet3VrdmaOption struct {
0000000000000000000000000000000000000000;;		VirtualVmxnet3Option
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnet3VrdmaOption"] = reflect.TypeOf((*VirtualVmxnet3VrdmaOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualVmxnetOption struct {
0000000000000000000000000000000000000000;;		VirtualEthernetCardOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualVmxnetOption"] = reflect.TypeOf((*VirtualVmxnetOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VlanProfile struct {
0000000000000000000000000000000000000000;;		ApplyProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VlanProfile"] = reflect.TypeOf((*VlanProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmAcquiredMksTicketEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmAcquiredMksTicketEvent"] = reflect.TypeOf((*VmAcquiredMksTicketEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmAcquiredTicketEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TicketType string `xml:"ticketType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmAcquiredTicketEvent"] = reflect.TypeOf((*VmAcquiredTicketEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmAlreadyExistsInDatacenter struct {
0000000000000000000000000000000000000000;;		InvalidFolder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Host     ManagedObjectReference   `xml:"host"`
0000000000000000000000000000000000000000;;		Hostname string                   `xml:"hostname"`
0000000000000000000000000000000000000000;;		Vm       []ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmAlreadyExistsInDatacenter"] = reflect.TypeOf((*VmAlreadyExistsInDatacenter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmAlreadyExistsInDatacenterFault VmAlreadyExistsInDatacenter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmAlreadyExistsInDatacenterFault"] = reflect.TypeOf((*VmAlreadyExistsInDatacenterFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmAutoRenameEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmAutoRenameEvent"] = reflect.TypeOf((*VmAutoRenameEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingClonedEvent struct {
0000000000000000000000000000000000000000;;		VmCloneEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestFolder FolderEventArgument `xml:"destFolder"`
0000000000000000000000000000000000000000;;		DestName   string              `xml:"destName"`
0000000000000000000000000000000000000000;;		DestHost   HostEventArgument   `xml:"destHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingClonedEvent"] = reflect.TypeOf((*VmBeingClonedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingClonedNoFolderEvent struct {
0000000000000000000000000000000000000000;;		VmCloneEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestName string            `xml:"destName"`
0000000000000000000000000000000000000000;;		DestHost HostEventArgument `xml:"destHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingClonedNoFolderEvent"] = reflect.TypeOf((*VmBeingClonedNoFolderEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingCreatedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec *VirtualMachineConfigSpec `xml:"configSpec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingCreatedEvent"] = reflect.TypeOf((*VmBeingCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingDeployedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SrcTemplate VmEventArgument `xml:"srcTemplate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingDeployedEvent"] = reflect.TypeOf((*VmBeingDeployedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingHotMigratedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestHost       HostEventArgument        `xml:"destHost"`
0000000000000000000000000000000000000000;;		DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingHotMigratedEvent"] = reflect.TypeOf((*VmBeingHotMigratedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingMigratedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestHost       HostEventArgument        `xml:"destHost"`
0000000000000000000000000000000000000000;;		DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingMigratedEvent"] = reflect.TypeOf((*VmBeingMigratedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmBeingRelocatedEvent struct {
0000000000000000000000000000000000000000;;		VmRelocateSpecEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestHost       HostEventArgument        `xml:"destHost"`
0000000000000000000000000000000000000000;;		DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmBeingRelocatedEvent"] = reflect.TypeOf((*VmBeingRelocatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmCloneEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmCloneEvent"] = reflect.TypeOf((*VmCloneEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmCloneFailedEvent struct {
0000000000000000000000000000000000000000;;		VmCloneEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestFolder FolderEventArgument  `xml:"destFolder"`
0000000000000000000000000000000000000000;;		DestName   string               `xml:"destName"`
0000000000000000000000000000000000000000;;		DestHost   HostEventArgument    `xml:"destHost"`
0000000000000000000000000000000000000000;;		Reason     LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmCloneFailedEvent"] = reflect.TypeOf((*VmCloneFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmClonedEvent struct {
0000000000000000000000000000000000000000;;		VmCloneEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceVm VmEventArgument `xml:"sourceVm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmClonedEvent"] = reflect.TypeOf((*VmClonedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFault"] = reflect.TypeOf((*VmConfigFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFaultFault BaseVmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFaultFault"] = reflect.TypeOf((*VmConfigFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFileEncryptionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyId *CryptoKeyId `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFileEncryptionInfo"] = reflect.TypeOf((*VmConfigFileEncryptionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigVersion int32                       `xml:"configVersion,omitempty"`
0000000000000000000000000000000000000000;;		Encryption    *VmConfigFileEncryptionInfo `xml:"encryption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFileInfo"] = reflect.TypeOf((*VmConfigFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filter  *VmConfigFileQueryFilter `xml:"filter,omitempty"`
0000000000000000000000000000000000000000;;		Details *VmConfigFileQueryFlags  `xml:"details,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFileQuery"] = reflect.TypeOf((*VmConfigFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFileQueryFilter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MatchConfigVersion []int32 `xml:"matchConfigVersion,omitempty"`
0000000000000000000000000000000000000000;;		Encrypted          *bool   `xml:"encrypted"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFileQueryFilter"] = reflect.TypeOf((*VmConfigFileQueryFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigFileQueryFlags struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigVersion bool  `xml:"configVersion"`
0000000000000000000000000000000000000000;;		Encryption    *bool `xml:"encryption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigFileQueryFlags"] = reflect.TypeOf((*VmConfigFileQueryFlags)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigIncompatibleForFaultTolerance struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigIncompatibleForFaultTolerance"] = reflect.TypeOf((*VmConfigIncompatibleForFaultTolerance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigIncompatibleForFaultToleranceFault VmConfigIncompatibleForFaultTolerance
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigIncompatibleForFaultToleranceFault"] = reflect.TypeOf((*VmConfigIncompatibleForFaultToleranceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigIncompatibleForRecordReplay struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fault *LocalizedMethodFault `xml:"fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigIncompatibleForRecordReplay"] = reflect.TypeOf((*VmConfigIncompatibleForRecordReplay)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigIncompatibleForRecordReplayFault VmConfigIncompatibleForRecordReplay
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigIncompatibleForRecordReplayFault"] = reflect.TypeOf((*VmConfigIncompatibleForRecordReplayFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Product                 []VAppProductInfo    `xml:"product,omitempty"`
0000000000000000000000000000000000000000;;		Property                []VAppPropertyInfo   `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;		IpAssignment            VAppIPAssignmentInfo `xml:"ipAssignment"`
0000000000000000000000000000000000000000;;		Eula                    []string             `xml:"eula,omitempty"`
0000000000000000000000000000000000000000;;		OvfSection              []VAppOvfSectionInfo `xml:"ovfSection,omitempty"`
0000000000000000000000000000000000000000;;		OvfEnvironmentTransport []string             `xml:"ovfEnvironmentTransport,omitempty"`
0000000000000000000000000000000000000000;;		InstallBootRequired     bool                 `xml:"installBootRequired"`
0000000000000000000000000000000000000000;;		InstallBootStopDelay    int32                `xml:"installBootStopDelay"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigInfo"] = reflect.TypeOf((*VmConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigMissingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigMissingEvent"] = reflect.TypeOf((*VmConfigMissingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConfigSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Product                 []VAppProductSpec     `xml:"product,omitempty"`
0000000000000000000000000000000000000000;;		Property                []VAppPropertySpec    `xml:"property,omitempty"`
0000000000000000000000000000000000000000;;		IpAssignment            *VAppIPAssignmentInfo `xml:"ipAssignment,omitempty"`
0000000000000000000000000000000000000000;;		Eula                    []string              `xml:"eula,omitempty"`
0000000000000000000000000000000000000000;;		OvfSection              []VAppOvfSectionSpec  `xml:"ovfSection,omitempty"`
0000000000000000000000000000000000000000;;		OvfEnvironmentTransport []string              `xml:"ovfEnvironmentTransport,omitempty"`
0000000000000000000000000000000000000000;;		InstallBootRequired     *bool                 `xml:"installBootRequired"`
0000000000000000000000000000000000000000;;		InstallBootStopDelay    int32                 `xml:"installBootStopDelay,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConfigSpec"] = reflect.TypeOf((*VmConfigSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmConnectedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmConnectedEvent"] = reflect.TypeOf((*VmConnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmCreatedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmCreatedEvent"] = reflect.TypeOf((*VmCreatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDasBeingResetEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDasBeingResetEvent"] = reflect.TypeOf((*VmDasBeingResetEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDasBeingResetWithScreenshotEvent struct {
0000000000000000000000000000000000000000;;		VmDasBeingResetEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScreenshotFilePath string `xml:"screenshotFilePath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDasBeingResetWithScreenshotEvent"] = reflect.TypeOf((*VmDasBeingResetWithScreenshotEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDasResetFailedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDasResetFailedEvent"] = reflect.TypeOf((*VmDasResetFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDasUpdateErrorEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDasUpdateErrorEvent"] = reflect.TypeOf((*VmDasUpdateErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDasUpdateOkEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDasUpdateOkEvent"] = reflect.TypeOf((*VmDasUpdateOkEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDateRolledBackEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDateRolledBackEvent"] = reflect.TypeOf((*VmDateRolledBackEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDeployFailedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestDatastore BaseEntityEventArgument `xml:"destDatastore,typeattr"`
0000000000000000000000000000000000000000;;		Reason        LocalizedMethodFault    `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDeployFailedEvent"] = reflect.TypeOf((*VmDeployFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDeployedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SrcTemplate VmEventArgument `xml:"srcTemplate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDeployedEvent"] = reflect.TypeOf((*VmDeployedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDisconnectedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDisconnectedEvent"] = reflect.TypeOf((*VmDisconnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiscoveredEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiscoveredEvent"] = reflect.TypeOf((*VmDiscoveredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiskFailedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk   string               `xml:"disk"`
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiskFailedEvent"] = reflect.TypeOf((*VmDiskFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiskFileEncryptionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyId *CryptoKeyId `xml:"keyId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiskFileEncryptionInfo"] = reflect.TypeOf((*VmDiskFileEncryptionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiskFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskType        string                    `xml:"diskType,omitempty"`
0000000000000000000000000000000000000000;;		CapacityKb      int64                     `xml:"capacityKb,omitempty"`
0000000000000000000000000000000000000000;;		HardwareVersion int32                     `xml:"hardwareVersion,omitempty"`
0000000000000000000000000000000000000000;;		ControllerType  string                    `xml:"controllerType,omitempty"`
0000000000000000000000000000000000000000;;		DiskExtents     []string                  `xml:"diskExtents,omitempty"`
0000000000000000000000000000000000000000;;		Thin            *bool                     `xml:"thin"`
0000000000000000000000000000000000000000;;		Encryption      *VmDiskFileEncryptionInfo `xml:"encryption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiskFileInfo"] = reflect.TypeOf((*VmDiskFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiskFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filter  *VmDiskFileQueryFilter `xml:"filter,omitempty"`
0000000000000000000000000000000000000000;;		Details *VmDiskFileQueryFlags  `xml:"details,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiskFileQuery"] = reflect.TypeOf((*VmDiskFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiskFileQueryFilter struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskType             []string `xml:"diskType,omitempty"`
0000000000000000000000000000000000000000;;		MatchHardwareVersion []int32  `xml:"matchHardwareVersion,omitempty"`
0000000000000000000000000000000000000000;;		ControllerType       []string `xml:"controllerType,omitempty"`
0000000000000000000000000000000000000000;;		Thin                 *bool    `xml:"thin"`
0000000000000000000000000000000000000000;;		Encrypted            *bool    `xml:"encrypted"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiskFileQueryFilter"] = reflect.TypeOf((*VmDiskFileQueryFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmDiskFileQueryFlags struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskType        bool  `xml:"diskType"`
0000000000000000000000000000000000000000;;		CapacityKb      bool  `xml:"capacityKb"`
0000000000000000000000000000000000000000;;		HardwareVersion bool  `xml:"hardwareVersion"`
0000000000000000000000000000000000000000;;		ControllerType  *bool `xml:"controllerType"`
0000000000000000000000000000000000000000;;		DiskExtents     *bool `xml:"diskExtents"`
0000000000000000000000000000000000000000;;		Thin            *bool `xml:"thin"`
0000000000000000000000000000000000000000;;		Encryption      *bool `xml:"encryption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmDiskFileQueryFlags"] = reflect.TypeOf((*VmDiskFileQueryFlags)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmEmigratingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmEmigratingEvent"] = reflect.TypeOf((*VmEmigratingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmEndRecordingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmEndRecordingEvent"] = reflect.TypeOf((*VmEndRecordingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmEndReplayingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmEndReplayingEvent"] = reflect.TypeOf((*VmEndReplayingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmEvent struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Template bool `xml:"template"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmEvent"] = reflect.TypeOf((*VmEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmEventArgument struct {
0000000000000000000000000000000000000000;;		EntityEventArgument
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm ManagedObjectReference `xml:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmEventArgument"] = reflect.TypeOf((*VmEventArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedMigrateEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestHost       HostEventArgument        `xml:"destHost"`
0000000000000000000000000000000000000000;;		Reason         LocalizedMethodFault     `xml:"reason"`
0000000000000000000000000000000000000000;;		DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedMigrateEvent"] = reflect.TypeOf((*VmFailedMigrateEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedRelayoutEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedRelayoutEvent"] = reflect.TypeOf((*VmFailedRelayoutEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedRelayoutOnVmfs2DatastoreEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedRelayoutOnVmfs2DatastoreEvent"] = reflect.TypeOf((*VmFailedRelayoutOnVmfs2DatastoreEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedStartingSecondaryEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedStartingSecondaryEvent"] = reflect.TypeOf((*VmFailedStartingSecondaryEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToPowerOffEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToPowerOffEvent"] = reflect.TypeOf((*VmFailedToPowerOffEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToPowerOnEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToPowerOnEvent"] = reflect.TypeOf((*VmFailedToPowerOnEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToRebootGuestEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToRebootGuestEvent"] = reflect.TypeOf((*VmFailedToRebootGuestEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToResetEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToResetEvent"] = reflect.TypeOf((*VmFailedToResetEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToShutdownGuestEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToShutdownGuestEvent"] = reflect.TypeOf((*VmFailedToShutdownGuestEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToStandbyGuestEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToStandbyGuestEvent"] = reflect.TypeOf((*VmFailedToStandbyGuestEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedToSuspendEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason LocalizedMethodFault `xml:"reason"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedToSuspendEvent"] = reflect.TypeOf((*VmFailedToSuspendEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailedUpdatingSecondaryConfig struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailedUpdatingSecondaryConfig"] = reflect.TypeOf((*VmFailedUpdatingSecondaryConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFailoverFailed struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason *LocalizedMethodFault `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFailoverFailed"] = reflect.TypeOf((*VmFailoverFailed)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceConfigIssue struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason     string                  `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		EntityName string                  `xml:"entityName,omitempty"`
0000000000000000000000000000000000000000;;		Entity     *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceConfigIssue"] = reflect.TypeOf((*VmFaultToleranceConfigIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceConfigIssueFault VmFaultToleranceConfigIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceConfigIssueFault"] = reflect.TypeOf((*VmFaultToleranceConfigIssueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceConfigIssueWrapper struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntityName string                  `xml:"entityName,omitempty"`
0000000000000000000000000000000000000000;;		Entity     *ManagedObjectReference `xml:"entity,omitempty"`
0000000000000000000000000000000000000000;;		Error      *LocalizedMethodFault   `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceConfigIssueWrapper"] = reflect.TypeOf((*VmFaultToleranceConfigIssueWrapper)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceConfigIssueWrapperFault VmFaultToleranceConfigIssueWrapper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceConfigIssueWrapperFault"] = reflect.TypeOf((*VmFaultToleranceConfigIssueWrapperFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceInvalidFileBacking struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BackingType     string `xml:"backingType,omitempty"`
0000000000000000000000000000000000000000;;		BackingFilename string `xml:"backingFilename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceInvalidFileBacking"] = reflect.TypeOf((*VmFaultToleranceInvalidFileBacking)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceInvalidFileBackingFault VmFaultToleranceInvalidFileBacking
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceInvalidFileBackingFault"] = reflect.TypeOf((*VmFaultToleranceInvalidFileBackingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceIssue struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceIssue"] = reflect.TypeOf((*VmFaultToleranceIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceIssueFault BaseVmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceIssueFault"] = reflect.TypeOf((*VmFaultToleranceIssueFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceOpIssuesList struct {
0000000000000000000000000000000000000000;;		VmFaultToleranceIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Errors   []LocalizedMethodFault `xml:"errors,omitempty"`
0000000000000000000000000000000000000000;;		Warnings []LocalizedMethodFault `xml:"warnings,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceOpIssuesList"] = reflect.TypeOf((*VmFaultToleranceOpIssuesList)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceOpIssuesListFault VmFaultToleranceOpIssuesList
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceOpIssuesListFault"] = reflect.TypeOf((*VmFaultToleranceOpIssuesListFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceStateChangedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldState VirtualMachineFaultToleranceState `xml:"oldState"`
0000000000000000000000000000000000000000;;		NewState VirtualMachineFaultToleranceState `xml:"newState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceStateChangedEvent"] = reflect.TypeOf((*VmFaultToleranceStateChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceTooManyFtVcpusOnHost struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName      string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		MaxNumFtVcpus int32  `xml:"maxNumFtVcpus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceTooManyFtVcpusOnHost"] = reflect.TypeOf((*VmFaultToleranceTooManyFtVcpusOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceTooManyFtVcpusOnHostFault VmFaultToleranceTooManyFtVcpusOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceTooManyFtVcpusOnHostFault"] = reflect.TypeOf((*VmFaultToleranceTooManyFtVcpusOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceTooManyVMsOnHost struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName    string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		MaxNumFtVms int32  `xml:"maxNumFtVms"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceTooManyVMsOnHost"] = reflect.TypeOf((*VmFaultToleranceTooManyVMsOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceTooManyVMsOnHostFault VmFaultToleranceTooManyVMsOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceTooManyVMsOnHostFault"] = reflect.TypeOf((*VmFaultToleranceTooManyVMsOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceTurnedOffEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceTurnedOffEvent"] = reflect.TypeOf((*VmFaultToleranceTurnedOffEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmFaultToleranceVmTerminatedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmFaultToleranceVmTerminatedEvent"] = reflect.TypeOf((*VmFaultToleranceVmTerminatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmGuestOSCrashedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmGuestOSCrashedEvent"] = reflect.TypeOf((*VmGuestOSCrashedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmGuestRebootEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmGuestRebootEvent"] = reflect.TypeOf((*VmGuestRebootEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmGuestShutdownEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmGuestShutdownEvent"] = reflect.TypeOf((*VmGuestShutdownEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmGuestStandbyEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmGuestStandbyEvent"] = reflect.TypeOf((*VmGuestStandbyEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmHealthMonitoringStateChangedEvent struct {
0000000000000000000000000000000000000000;;		ClusterEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State     string `xml:"state"`
0000000000000000000000000000000000000000;;		PrevState string `xml:"prevState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmHealthMonitoringStateChangedEvent"] = reflect.TypeOf((*VmHealthMonitoringStateChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmHostAffinityRuleViolation struct {
0000000000000000000000000000000000000000;;		VmConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmName   string `xml:"vmName"`
0000000000000000000000000000000000000000;;		HostName string `xml:"hostName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmHostAffinityRuleViolation"] = reflect.TypeOf((*VmHostAffinityRuleViolation)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmHostAffinityRuleViolationFault VmHostAffinityRuleViolation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmHostAffinityRuleViolationFault"] = reflect.TypeOf((*VmHostAffinityRuleViolationFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmInstanceUuidAssignedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceUuid string `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmInstanceUuidAssignedEvent"] = reflect.TypeOf((*VmInstanceUuidAssignedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmInstanceUuidChangedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldInstanceUuid string `xml:"oldInstanceUuid"`
0000000000000000000000000000000000000000;;		NewInstanceUuid string `xml:"newInstanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmInstanceUuidChangedEvent"] = reflect.TypeOf((*VmInstanceUuidChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmInstanceUuidConflictEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictedVm VmEventArgument `xml:"conflictedVm"`
0000000000000000000000000000000000000000;;		InstanceUuid string          `xml:"instanceUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmInstanceUuidConflictEvent"] = reflect.TypeOf((*VmInstanceUuidConflictEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmLimitLicense struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Limit int32 `xml:"limit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmLimitLicense"] = reflect.TypeOf((*VmLimitLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmLimitLicenseFault VmLimitLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmLimitLicenseFault"] = reflect.TypeOf((*VmLimitLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmLogFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmLogFileInfo"] = reflect.TypeOf((*VmLogFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmLogFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmLogFileQuery"] = reflect.TypeOf((*VmLogFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMacAssignedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Adapter string `xml:"adapter"`
0000000000000000000000000000000000000000;;		Mac     string `xml:"mac"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMacAssignedEvent"] = reflect.TypeOf((*VmMacAssignedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMacChangedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Adapter string `xml:"adapter"`
0000000000000000000000000000000000000000;;		OldMac  string `xml:"oldMac"`
0000000000000000000000000000000000000000;;		NewMac  string `xml:"newMac"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMacChangedEvent"] = reflect.TypeOf((*VmMacChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMacConflictEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictedVm VmEventArgument `xml:"conflictedVm"`
0000000000000000000000000000000000000000;;		Mac          string          `xml:"mac"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMacConflictEvent"] = reflect.TypeOf((*VmMacConflictEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMaxFTRestartCountReached struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMaxFTRestartCountReached"] = reflect.TypeOf((*VmMaxFTRestartCountReached)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMaxRestartCountReached struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMaxRestartCountReached"] = reflect.TypeOf((*VmMaxRestartCountReached)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMessageErrorEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message     string                  `xml:"message"`
0000000000000000000000000000000000000000;;		MessageInfo []VirtualMachineMessage `xml:"messageInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMessageErrorEvent"] = reflect.TypeOf((*VmMessageErrorEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMessageEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message     string                  `xml:"message"`
0000000000000000000000000000000000000000;;		MessageInfo []VirtualMachineMessage `xml:"messageInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMessageEvent"] = reflect.TypeOf((*VmMessageEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMessageWarningEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message     string                  `xml:"message"`
0000000000000000000000000000000000000000;;		MessageInfo []VirtualMachineMessage `xml:"messageInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMessageWarningEvent"] = reflect.TypeOf((*VmMessageWarningEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMetadataManagerFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMetadataManagerFault"] = reflect.TypeOf((*VmMetadataManagerFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMetadataManagerFaultFault VmMetadataManagerFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMetadataManagerFaultFault"] = reflect.TypeOf((*VmMetadataManagerFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMigratedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceHost       HostEventArgument        `xml:"sourceHost"`
0000000000000000000000000000000000000000;;		SourceDatacenter *DatacenterEventArgument `xml:"sourceDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		SourceDatastore  *DatastoreEventArgument  `xml:"sourceDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMigratedEvent"] = reflect.TypeOf((*VmMigratedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMonitorIncompatibleForFaultTolerance struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMonitorIncompatibleForFaultTolerance"] = reflect.TypeOf((*VmMonitorIncompatibleForFaultTolerance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmMonitorIncompatibleForFaultToleranceFault VmMonitorIncompatibleForFaultTolerance
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmMonitorIncompatibleForFaultToleranceFault"] = reflect.TypeOf((*VmMonitorIncompatibleForFaultToleranceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmNoCompatibleHostForSecondaryEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmNoCompatibleHostForSecondaryEvent"] = reflect.TypeOf((*VmNoCompatibleHostForSecondaryEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmNoNetworkAccessEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestHost HostEventArgument `xml:"destHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmNoNetworkAccessEvent"] = reflect.TypeOf((*VmNoNetworkAccessEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmNvramFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmNvramFileInfo"] = reflect.TypeOf((*VmNvramFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmNvramFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmNvramFileQuery"] = reflect.TypeOf((*VmNvramFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmOrphanedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmOrphanedEvent"] = reflect.TypeOf((*VmOrphanedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPodConfigForPlacement struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StoragePod  ManagedObjectReference  `xml:"storagePod"`
0000000000000000000000000000000000000000;;		Disk        []PodDiskLocator        `xml:"disk,omitempty"`
0000000000000000000000000000000000000000;;		VmConfig    *StorageDrsVmConfigInfo `xml:"vmConfig,omitempty"`
0000000000000000000000000000000000000000;;		InterVmRule []BaseClusterRuleInfo   `xml:"interVmRule,omitempty,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPodConfigForPlacement"] = reflect.TypeOf((*VmPodConfigForPlacement)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPortGroupProfile struct {
0000000000000000000000000000000000000000;;		PortGroupProfile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPortGroupProfile"] = reflect.TypeOf((*VmPortGroupProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPowerOffOnIsolationEvent struct {
0000000000000000000000000000000000000000;;		VmPoweredOffEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsolatedHost HostEventArgument `xml:"isolatedHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPowerOffOnIsolationEvent"] = reflect.TypeOf((*VmPowerOffOnIsolationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPowerOnDisabled struct {
0000000000000000000000000000000000000000;;		InvalidState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPowerOnDisabled"] = reflect.TypeOf((*VmPowerOnDisabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPowerOnDisabledFault VmPowerOnDisabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPowerOnDisabledFault"] = reflect.TypeOf((*VmPowerOnDisabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPoweredOffEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPoweredOffEvent"] = reflect.TypeOf((*VmPoweredOffEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPoweredOnEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPoweredOnEvent"] = reflect.TypeOf((*VmPoweredOnEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPoweringOnWithCustomizedDVPortEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vnic []VnicPortArgument `xml:"vnic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPoweringOnWithCustomizedDVPortEvent"] = reflect.TypeOf((*VmPoweringOnWithCustomizedDVPortEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmPrimaryFailoverEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason string `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmPrimaryFailoverEvent"] = reflect.TypeOf((*VmPrimaryFailoverEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmReconfiguredEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigSpec    VirtualMachineConfigSpec  `xml:"configSpec"`
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmReconfiguredEvent"] = reflect.TypeOf((*VmReconfiguredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRegisteredEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRegisteredEvent"] = reflect.TypeOf((*VmRegisteredEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRelayoutSuccessfulEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRelayoutSuccessfulEvent"] = reflect.TypeOf((*VmRelayoutSuccessfulEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRelayoutUpToDateEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRelayoutUpToDateEvent"] = reflect.TypeOf((*VmRelayoutUpToDateEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmReloadFromPathEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigPath string `xml:"configPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmReloadFromPathEvent"] = reflect.TypeOf((*VmReloadFromPathEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmReloadFromPathFailedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigPath string `xml:"configPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmReloadFromPathFailedEvent"] = reflect.TypeOf((*VmReloadFromPathFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRelocateFailedEvent struct {
0000000000000000000000000000000000000000;;		VmRelocateSpecEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DestHost       HostEventArgument        `xml:"destHost"`
0000000000000000000000000000000000000000;;		Reason         LocalizedMethodFault     `xml:"reason"`
0000000000000000000000000000000000000000;;		DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRelocateFailedEvent"] = reflect.TypeOf((*VmRelocateFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRelocateSpecEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRelocateSpecEvent"] = reflect.TypeOf((*VmRelocateSpecEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRelocatedEvent struct {
0000000000000000000000000000000000000000;;		VmRelocateSpecEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceHost       HostEventArgument        `xml:"sourceHost"`
0000000000000000000000000000000000000000;;		SourceDatacenter *DatacenterEventArgument `xml:"sourceDatacenter,omitempty"`
0000000000000000000000000000000000000000;;		SourceDatastore  *DatastoreEventArgument  `xml:"sourceDatastore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRelocatedEvent"] = reflect.TypeOf((*VmRelocatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRemoteConsoleConnectedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRemoteConsoleConnectedEvent"] = reflect.TypeOf((*VmRemoteConsoleConnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRemoteConsoleDisconnectedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRemoteConsoleDisconnectedEvent"] = reflect.TypeOf((*VmRemoteConsoleDisconnectedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRemovedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRemovedEvent"] = reflect.TypeOf((*VmRemovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRenamedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldName string `xml:"oldName"`
0000000000000000000000000000000000000000;;		NewName string `xml:"newName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRenamedEvent"] = reflect.TypeOf((*VmRenamedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRequirementsExceedCurrentEVCModeEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRequirementsExceedCurrentEVCModeEvent"] = reflect.TypeOf((*VmRequirementsExceedCurrentEVCModeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmResettingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmResettingEvent"] = reflect.TypeOf((*VmResettingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmResourcePoolMovedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldParent ResourcePoolEventArgument `xml:"oldParent"`
0000000000000000000000000000000000000000;;		NewParent ResourcePoolEventArgument `xml:"newParent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmResourcePoolMovedEvent"] = reflect.TypeOf((*VmResourcePoolMovedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmResourceReallocatedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigChanges *ChangesInfoEventArgument `xml:"configChanges,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmResourceReallocatedEvent"] = reflect.TypeOf((*VmResourceReallocatedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmRestartedOnAlternateHostEvent struct {
0000000000000000000000000000000000000000;;		VmPoweredOnEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceHost HostEventArgument `xml:"sourceHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmRestartedOnAlternateHostEvent"] = reflect.TypeOf((*VmRestartedOnAlternateHostEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmResumingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmResumingEvent"] = reflect.TypeOf((*VmResumingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSecondaryAddedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSecondaryAddedEvent"] = reflect.TypeOf((*VmSecondaryAddedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSecondaryDisabledBySystemEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Reason *LocalizedMethodFault `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSecondaryDisabledBySystemEvent"] = reflect.TypeOf((*VmSecondaryDisabledBySystemEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSecondaryDisabledEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSecondaryDisabledEvent"] = reflect.TypeOf((*VmSecondaryDisabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSecondaryEnabledEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSecondaryEnabledEvent"] = reflect.TypeOf((*VmSecondaryEnabledEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSecondaryStartedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSecondaryStartedEvent"] = reflect.TypeOf((*VmSecondaryStartedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmShutdownOnIsolationEvent struct {
0000000000000000000000000000000000000000;;		VmPoweredOffEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IsolatedHost   HostEventArgument `xml:"isolatedHost"`
0000000000000000000000000000000000000000;;		ShutdownResult string            `xml:"shutdownResult,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmShutdownOnIsolationEvent"] = reflect.TypeOf((*VmShutdownOnIsolationEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSmpFaultToleranceTooManyVMsOnHost struct {
0000000000000000000000000000000000000000;;		InsufficientResourcesFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostName       string `xml:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		MaxNumSmpFtVms int32  `xml:"maxNumSmpFtVms"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSmpFaultToleranceTooManyVMsOnHost"] = reflect.TypeOf((*VmSmpFaultToleranceTooManyVMsOnHost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSmpFaultToleranceTooManyVMsOnHostFault VmSmpFaultToleranceTooManyVMsOnHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSmpFaultToleranceTooManyVMsOnHostFault"] = reflect.TypeOf((*VmSmpFaultToleranceTooManyVMsOnHostFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSnapshotFileInfo struct {
0000000000000000000000000000000000000000;;		FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSnapshotFileInfo"] = reflect.TypeOf((*VmSnapshotFileInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSnapshotFileQuery struct {
0000000000000000000000000000000000000000;;		FileQuery
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSnapshotFileQuery"] = reflect.TypeOf((*VmSnapshotFileQuery)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmStartRecordingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmStartRecordingEvent"] = reflect.TypeOf((*VmStartRecordingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmStartReplayingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmStartReplayingEvent"] = reflect.TypeOf((*VmStartReplayingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmStartingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmStartingEvent"] = reflect.TypeOf((*VmStartingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmStartingSecondaryEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmStartingSecondaryEvent"] = reflect.TypeOf((*VmStartingSecondaryEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmStaticMacConflictEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictedVm VmEventArgument `xml:"conflictedVm"`
0000000000000000000000000000000000000000;;		Mac          string          `xml:"mac"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmStaticMacConflictEvent"] = reflect.TypeOf((*VmStaticMacConflictEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmStoppingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmStoppingEvent"] = reflect.TypeOf((*VmStoppingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSuspendedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSuspendedEvent"] = reflect.TypeOf((*VmSuspendedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmSuspendingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmSuspendingEvent"] = reflect.TypeOf((*VmSuspendingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmTimedoutStartingSecondaryEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timeout int64 `xml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmTimedoutStartingSecondaryEvent"] = reflect.TypeOf((*VmTimedoutStartingSecondaryEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmToolsUpgradeFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmToolsUpgradeFault"] = reflect.TypeOf((*VmToolsUpgradeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmToolsUpgradeFaultFault BaseVmToolsUpgradeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmToolsUpgradeFaultFault"] = reflect.TypeOf((*VmToolsUpgradeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUnsupportedStartingEvent struct {
0000000000000000000000000000000000000000;;		VmStartingEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GuestId string `xml:"guestId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUnsupportedStartingEvent"] = reflect.TypeOf((*VmUnsupportedStartingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUpgradeCompleteEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `xml:"version"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUpgradeCompleteEvent"] = reflect.TypeOf((*VmUpgradeCompleteEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUpgradeFailedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUpgradeFailedEvent"] = reflect.TypeOf((*VmUpgradeFailedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUpgradingEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `xml:"version"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUpgradingEvent"] = reflect.TypeOf((*VmUpgradingEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUuidAssignedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUuidAssignedEvent"] = reflect.TypeOf((*VmUuidAssignedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUuidChangedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldUuid string `xml:"oldUuid"`
0000000000000000000000000000000000000000;;		NewUuid string `xml:"newUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUuidChangedEvent"] = reflect.TypeOf((*VmUuidChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmUuidConflictEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictedVm VmEventArgument `xml:"conflictedVm"`
0000000000000000000000000000000000000000;;		Uuid         string          `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmUuidConflictEvent"] = reflect.TypeOf((*VmUuidConflictEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmValidateMaxDevice struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device"`
0000000000000000000000000000000000000000;;		Max    int32  `xml:"max"`
0000000000000000000000000000000000000000;;		Count  int32  `xml:"count"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmValidateMaxDevice"] = reflect.TypeOf((*VmValidateMaxDevice)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmValidateMaxDeviceFault VmValidateMaxDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmValidateMaxDeviceFault"] = reflect.TypeOf((*VmValidateMaxDeviceFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmVnicPoolReservationViolationClearEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmVnicResourcePoolKey  string `xml:"vmVnicResourcePoolKey"`
0000000000000000000000000000000000000000;;		VmVnicResourcePoolName string `xml:"vmVnicResourcePoolName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmVnicPoolReservationViolationClearEvent"] = reflect.TypeOf((*VmVnicPoolReservationViolationClearEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmVnicPoolReservationViolationRaiseEvent struct {
0000000000000000000000000000000000000000;;		DvsEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmVnicResourcePoolKey  string `xml:"vmVnicResourcePoolKey"`
0000000000000000000000000000000000000000;;		VmVnicResourcePoolName string `xml:"vmVnicResourcePoolName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmVnicPoolReservationViolationRaiseEvent"] = reflect.TypeOf((*VmVnicPoolReservationViolationRaiseEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmWwnAssignedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NodeWwns []int64 `xml:"nodeWwns"`
0000000000000000000000000000000000000000;;		PortWwns []int64 `xml:"portWwns"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmWwnAssignedEvent"] = reflect.TypeOf((*VmWwnAssignedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmWwnChangedEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldNodeWwns []int64 `xml:"oldNodeWwns,omitempty"`
0000000000000000000000000000000000000000;;		OldPortWwns []int64 `xml:"oldPortWwns,omitempty"`
0000000000000000000000000000000000000000;;		NewNodeWwns []int64 `xml:"newNodeWwns,omitempty"`
0000000000000000000000000000000000000000;;		NewPortWwns []int64 `xml:"newPortWwns,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmWwnChangedEvent"] = reflect.TypeOf((*VmWwnChangedEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmWwnConflict struct {
0000000000000000000000000000000000000000;;		InvalidVmConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vm   *ManagedObjectReference `xml:"vm,omitempty"`
0000000000000000000000000000000000000000;;		Host *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Name string                  `xml:"name,omitempty"`
0000000000000000000000000000000000000000;;		Wwn  int64                   `xml:"wwn,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmWwnConflict"] = reflect.TypeOf((*VmWwnConflict)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmWwnConflictEvent struct {
0000000000000000000000000000000000000000;;		VmEvent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConflictedVms   []VmEventArgument   `xml:"conflictedVms,omitempty"`
0000000000000000000000000000000000000000;;		ConflictedHosts []HostEventArgument `xml:"conflictedHosts,omitempty"`
0000000000000000000000000000000000000000;;		Wwn             int64               `xml:"wwn"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmWwnConflictEvent"] = reflect.TypeOf((*VmWwnConflictEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmWwnConflictFault VmWwnConflict
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmWwnConflictFault"] = reflect.TypeOf((*VmWwnConflictFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsAlreadyMounted struct {
0000000000000000000000000000000000000000;;		VmfsMountFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsAlreadyMounted"] = reflect.TypeOf((*VmfsAlreadyMounted)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsAlreadyMountedFault VmfsAlreadyMounted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsAlreadyMountedFault"] = reflect.TypeOf((*VmfsAlreadyMountedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsAmbiguousMount struct {
0000000000000000000000000000000000000000;;		VmfsMountFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsAmbiguousMount"] = reflect.TypeOf((*VmfsAmbiguousMount)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsAmbiguousMountFault VmfsAmbiguousMount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsAmbiguousMountFault"] = reflect.TypeOf((*VmfsAmbiguousMountFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsConfigOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BlockSizeOption        int32   `xml:"blockSizeOption"`
0000000000000000000000000000000000000000;;		UnmapGranularityOption []int32 `xml:"unmapGranularityOption,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsConfigOption"] = reflect.TypeOf((*VmfsConfigOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreAllExtentOption struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreSingleExtentOption
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreAllExtentOption"] = reflect.TypeOf((*VmfsDatastoreAllExtentOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreBaseOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Layout                HostDiskPartitionLayout `xml:"layout"`
0000000000000000000000000000000000000000;;		PartitionFormatChange *bool                   `xml:"partitionFormatChange"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreBaseOption"] = reflect.TypeOf((*VmfsDatastoreBaseOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreCreateSpec struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partition HostDiskPartitionSpec   `xml:"partition"`
0000000000000000000000000000000000000000;;		Vmfs      HostVmfsSpec            `xml:"vmfs"`
0000000000000000000000000000000000000000;;		Extent    []HostScsiDiskPartition `xml:"extent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreCreateSpec"] = reflect.TypeOf((*VmfsDatastoreCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreExpandSpec struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partition HostDiskPartitionSpec `xml:"partition"`
0000000000000000000000000000000000000000;;		Extent    HostScsiDiskPartition `xml:"extent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreExpandSpec"] = reflect.TypeOf((*VmfsDatastoreExpandSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreExtendSpec struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partition HostDiskPartitionSpec   `xml:"partition"`
0000000000000000000000000000000000000000;;		Extent    []HostScsiDiskPartition `xml:"extent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreExtendSpec"] = reflect.TypeOf((*VmfsDatastoreExtendSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreInfo struct {
0000000000000000000000000000000000000000;;		DatastoreInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxPhysicalRDMFileSize int64           `xml:"maxPhysicalRDMFileSize,omitempty"`
0000000000000000000000000000000000000000;;		MaxVirtualRDMFileSize  int64           `xml:"maxVirtualRDMFileSize,omitempty"`
0000000000000000000000000000000000000000;;		Vmfs                   *HostVmfsVolume `xml:"vmfs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreInfo"] = reflect.TypeOf((*VmfsDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreMultipleExtentOption struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreBaseOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmfsExtent []HostDiskPartitionBlockRange `xml:"vmfsExtent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreMultipleExtentOption"] = reflect.TypeOf((*VmfsDatastoreMultipleExtentOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreOption struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info BaseVmfsDatastoreBaseOption `xml:"info,typeattr"`
0000000000000000000000000000000000000000;;		Spec BaseVmfsDatastoreSpec       `xml:"spec,typeattr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreOption"] = reflect.TypeOf((*VmfsDatastoreOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreSingleExtentOption struct {
0000000000000000000000000000000000000000;;		VmfsDatastoreBaseOption
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmfsExtent HostDiskPartitionBlockRange `xml:"vmfsExtent"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreSingleExtentOption"] = reflect.TypeOf((*VmfsDatastoreSingleExtentOption)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsDatastoreSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskUuid string `xml:"diskUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsDatastoreSpec"] = reflect.TypeOf((*VmfsDatastoreSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsMountFault struct {
0000000000000000000000000000000000000000;;		HostConfigFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `xml:"uuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsMountFault"] = reflect.TypeOf((*VmfsMountFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmfsMountFaultFault BaseVmfsMountFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmfsMountFaultFault"] = reflect.TypeOf((*VmfsMountFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmotionInterfaceNotEnabled struct {
0000000000000000000000000000000000000000;;		HostPowerOpFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmotionInterfaceNotEnabled"] = reflect.TypeOf((*VmotionInterfaceNotEnabled)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmotionInterfaceNotEnabledFault VmotionInterfaceNotEnabled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmotionInterfaceNotEnabledFault"] = reflect.TypeOf((*VmotionInterfaceNotEnabledFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmwareDistributedVirtualSwitchPvlanSpec struct {
0000000000000000000000000000000000000000;;		VmwareDistributedVirtualSwitchVlanSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PvlanId int32 `xml:"pvlanId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmwareDistributedVirtualSwitchPvlanSpec"] = reflect.TypeOf((*VmwareDistributedVirtualSwitchPvlanSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmwareDistributedVirtualSwitchTrunkVlanSpec struct {
0000000000000000000000000000000000000000;;		VmwareDistributedVirtualSwitchVlanSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanId []NumericRange `xml:"vlanId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmwareDistributedVirtualSwitchTrunkVlanSpec"] = reflect.TypeOf((*VmwareDistributedVirtualSwitchTrunkVlanSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmwareDistributedVirtualSwitchVlanIdSpec struct {
0000000000000000000000000000000000000000;;		VmwareDistributedVirtualSwitchVlanSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VlanId int32 `xml:"vlanId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmwareDistributedVirtualSwitchVlanIdSpec"] = reflect.TypeOf((*VmwareDistributedVirtualSwitchVlanIdSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmwareDistributedVirtualSwitchVlanSpec struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmwareDistributedVirtualSwitchVlanSpec"] = reflect.TypeOf((*VmwareDistributedVirtualSwitchVlanSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmwareUplinkPortTeamingPolicy struct {
0000000000000000000000000000000000000000;;		InheritablePolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Policy          *StringPolicy                `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;		ReversePolicy   *BoolPolicy                  `xml:"reversePolicy,omitempty"`
0000000000000000000000000000000000000000;;		NotifySwitches  *BoolPolicy                  `xml:"notifySwitches,omitempty"`
0000000000000000000000000000000000000000;;		RollingOrder    *BoolPolicy                  `xml:"rollingOrder,omitempty"`
0000000000000000000000000000000000000000;;		FailureCriteria *DVSFailureCriteria          `xml:"failureCriteria,omitempty"`
0000000000000000000000000000000000000000;;		UplinkPortOrder *VMwareUplinkPortOrderPolicy `xml:"uplinkPortOrder,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmwareUplinkPortTeamingPolicy"] = reflect.TypeOf((*VmwareUplinkPortTeamingPolicy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VnicPortArgument struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vnic string                                 `xml:"vnic"`
0000000000000000000000000000000000000000;;		Port DistributedVirtualSwitchPortConnection `xml:"port"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VnicPortArgument"] = reflect.TypeOf((*VnicPortArgument)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeEditorError struct {
0000000000000000000000000000000000000000;;		CustomizationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VolumeEditorError"] = reflect.TypeOf((*VolumeEditorError)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeEditorErrorFault VolumeEditorError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VolumeEditorErrorFault"] = reflect.TypeOf((*VolumeEditorErrorFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VramLimitLicense struct {
0000000000000000000000000000000000000000;;		NotEnoughLicenses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Limit int32 `xml:"limit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VramLimitLicense"] = reflect.TypeOf((*VramLimitLicense)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VramLimitLicenseFault VramLimitLicense
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VramLimitLicenseFault"] = reflect.TypeOf((*VramLimitLicenseFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VrpResourceAllocationInfo struct {
0000000000000000000000000000000000000000;;		ResourceAllocationInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReservationLimit int64 `xml:"reservationLimit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VrpResourceAllocationInfo"] = reflect.TypeOf((*VrpResourceAllocationInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanClusterConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled       *bool                                 `xml:"enabled"`
0000000000000000000000000000000000000000;;		DefaultConfig *VsanClusterConfigInfoHostDefaultInfo `xml:"defaultConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanClusterConfigInfo"] = reflect.TypeOf((*VsanClusterConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanClusterConfigInfoHostDefaultInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid             string `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		AutoClaimStorage *bool  `xml:"autoClaimStorage"`
0000000000000000000000000000000000000000;;		ChecksumEnabled  *bool  `xml:"checksumEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanClusterConfigInfoHostDefaultInfo"] = reflect.TypeOf((*VsanClusterConfigInfoHostDefaultInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanClusterUuidMismatch struct {
0000000000000000000000000000000000000000;;		CannotMoveVsanEnabledHost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostClusterUuid        string `xml:"hostClusterUuid"`
0000000000000000000000000000000000000000;;		DestinationClusterUuid string `xml:"destinationClusterUuid"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanClusterUuidMismatch"] = reflect.TypeOf((*VsanClusterUuidMismatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanClusterUuidMismatchFault VsanClusterUuidMismatch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanClusterUuidMismatchFault"] = reflect.TypeOf((*VsanClusterUuidMismatchFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanDiskFault struct {
0000000000000000000000000000000000000000;;		VsanFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Device string `xml:"device,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanDiskFault"] = reflect.TypeOf((*VsanDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanDiskFaultFault BaseVsanDiskFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanDiskFaultFault"] = reflect.TypeOf((*VsanDiskFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanFault"] = reflect.TypeOf((*VsanFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanFaultFault BaseVsanFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanFaultFault"] = reflect.TypeOf((*VsanFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostClusterStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid       string                     `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		NodeUuid   string                     `xml:"nodeUuid,omitempty"`
0000000000000000000000000000000000000000;;		Health     string                     `xml:"health"`
0000000000000000000000000000000000000000;;		NodeState  VsanHostClusterStatusState `xml:"nodeState"`
0000000000000000000000000000000000000000;;		MemberUuid []string                   `xml:"memberUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostClusterStatus"] = reflect.TypeOf((*VsanHostClusterStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostClusterStatusState struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State      string                                        `xml:"state"`
0000000000000000000000000000000000000000;;		Completion *VsanHostClusterStatusStateCompletionEstimate `xml:"completion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostClusterStatusState"] = reflect.TypeOf((*VsanHostClusterStatusState)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostClusterStatusStateCompletionEstimate struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CompleteTime    *time.Time `xml:"completeTime"`
0000000000000000000000000000000000000000;;		PercentComplete int32      `xml:"percentComplete,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostClusterStatusStateCompletionEstimate"] = reflect.TypeOf((*VsanHostClusterStatusStateCompletionEstimate)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostConfigInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled         *bool                          `xml:"enabled"`
0000000000000000000000000000000000000000;;		HostSystem      *ManagedObjectReference        `xml:"hostSystem,omitempty"`
0000000000000000000000000000000000000000;;		ClusterInfo     *VsanHostConfigInfoClusterInfo `xml:"clusterInfo,omitempty"`
0000000000000000000000000000000000000000;;		StorageInfo     *VsanHostConfigInfoStorageInfo `xml:"storageInfo,omitempty"`
0000000000000000000000000000000000000000;;		NetworkInfo     *VsanHostConfigInfoNetworkInfo `xml:"networkInfo,omitempty"`
0000000000000000000000000000000000000000;;		FaultDomainInfo *VsanHostFaultDomainInfo       `xml:"faultDomainInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostConfigInfo"] = reflect.TypeOf((*VsanHostConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostConfigInfoClusterInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid     string `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		NodeUuid string `xml:"nodeUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostConfigInfoClusterInfo"] = reflect.TypeOf((*VsanHostConfigInfoClusterInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostConfigInfoNetworkInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port []VsanHostConfigInfoNetworkInfoPortConfig `xml:"port,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostConfigInfoNetworkInfo"] = reflect.TypeOf((*VsanHostConfigInfoNetworkInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostConfigInfoNetworkInfoPortConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpConfig *VsanHostIpConfig `xml:"ipConfig,omitempty"`
0000000000000000000000000000000000000000;;		Device   string            `xml:"device"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostConfigInfoNetworkInfoPortConfig"] = reflect.TypeOf((*VsanHostConfigInfoNetworkInfoPortConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostConfigInfoStorageInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoClaimStorage *bool                 `xml:"autoClaimStorage"`
0000000000000000000000000000000000000000;;		DiskMapping      []VsanHostDiskMapping `xml:"diskMapping,omitempty"`
0000000000000000000000000000000000000000;;		DiskMapInfo      []VsanHostDiskMapInfo `xml:"diskMapInfo,omitempty"`
0000000000000000000000000000000000000000;;		ChecksumEnabled  *bool                 `xml:"checksumEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostConfigInfoStorageInfo"] = reflect.TypeOf((*VsanHostConfigInfoStorageInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostDecommissionMode struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ObjectAction string `xml:"objectAction"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostDecommissionMode"] = reflect.TypeOf((*VsanHostDecommissionMode)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostDiskMapInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mapping VsanHostDiskMapping `xml:"mapping"`
0000000000000000000000000000000000000000;;		Mounted bool                `xml:"mounted"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostDiskMapInfo"] = reflect.TypeOf((*VsanHostDiskMapInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostDiskMapResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mapping    VsanHostDiskMapping   `xml:"mapping"`
0000000000000000000000000000000000000000;;		DiskResult []VsanHostDiskResult  `xml:"diskResult,omitempty"`
0000000000000000000000000000000000000000;;		Error      *LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostDiskMapResult"] = reflect.TypeOf((*VsanHostDiskMapResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostDiskMapping struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ssd    HostScsiDisk   `xml:"ssd"`
0000000000000000000000000000000000000000;;		NonSsd []HostScsiDisk `xml:"nonSsd"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostDiskMapping"] = reflect.TypeOf((*VsanHostDiskMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostDiskResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disk     HostScsiDisk          `xml:"disk"`
0000000000000000000000000000000000000000;;		State    string                `xml:"state"`
0000000000000000000000000000000000000000;;		VsanUuid string                `xml:"vsanUuid,omitempty"`
0000000000000000000000000000000000000000;;		Error    *LocalizedMethodFault `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Degraded *bool                 `xml:"degraded"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostDiskResult"] = reflect.TypeOf((*VsanHostDiskResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostFaultDomainInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostFaultDomainInfo"] = reflect.TypeOf((*VsanHostFaultDomainInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostIpConfig struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UpstreamIpAddress   string `xml:"upstreamIpAddress"`
0000000000000000000000000000000000000000;;		DownstreamIpAddress string `xml:"downstreamIpAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostIpConfig"] = reflect.TypeOf((*VsanHostIpConfig)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostMembershipInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NodeUuid string `xml:"nodeUuid"`
0000000000000000000000000000000000000000;;		Hostname string `xml:"hostname"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostMembershipInfo"] = reflect.TypeOf((*VsanHostMembershipInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostRuntimeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MembershipList []VsanHostMembershipInfo       `xml:"membershipList,omitempty"`
0000000000000000000000000000000000000000;;		DiskIssues     []VsanHostRuntimeInfoDiskIssue `xml:"diskIssues,omitempty"`
0000000000000000000000000000000000000000;;		AccessGenNo    int32                          `xml:"accessGenNo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostRuntimeInfo"] = reflect.TypeOf((*VsanHostRuntimeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostRuntimeInfoDiskIssue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DiskId string `xml:"diskId"`
0000000000000000000000000000000000000000;;		Issue  string `xml:"issue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostRuntimeInfoDiskIssue"] = reflect.TypeOf((*VsanHostRuntimeInfoDiskIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanHostVsanDiskInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VsanUuid      string `xml:"vsanUuid"`
0000000000000000000000000000000000000000;;		FormatVersion int32  `xml:"formatVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanHostVsanDiskInfo"] = reflect.TypeOf((*VsanHostVsanDiskInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanIncompatibleDiskMapping struct {
0000000000000000000000000000000000000000;;		VsanDiskFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanIncompatibleDiskMapping"] = reflect.TypeOf((*VsanIncompatibleDiskMapping)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanIncompatibleDiskMappingFault VsanIncompatibleDiskMapping
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanIncompatibleDiskMappingFault"] = reflect.TypeOf((*VsanIncompatibleDiskMappingFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanNewPolicyBatch struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Size   []int64 `xml:"size,omitempty"`
0000000000000000000000000000000000000000;;		Policy string  `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanNewPolicyBatch"] = reflect.TypeOf((*VsanNewPolicyBatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanPolicyChangeBatch struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid   []string `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		Policy string   `xml:"policy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanPolicyChangeBatch"] = reflect.TypeOf((*VsanPolicyChangeBatch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanPolicyCost struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangeDataSize                      int64   `xml:"changeDataSize,omitempty"`
0000000000000000000000000000000000000000;;		CurrentDataSize                     int64   `xml:"currentDataSize,omitempty"`
0000000000000000000000000000000000000000;;		TempDataSize                        int64   `xml:"tempDataSize,omitempty"`
0000000000000000000000000000000000000000;;		CopyDataSize                        int64   `xml:"copyDataSize,omitempty"`
0000000000000000000000000000000000000000;;		ChangeFlashReadCacheSize            int64   `xml:"changeFlashReadCacheSize,omitempty"`
0000000000000000000000000000000000000000;;		CurrentFlashReadCacheSize           int64   `xml:"currentFlashReadCacheSize,omitempty"`
0000000000000000000000000000000000000000;;		CurrentDiskSpaceToAddressSpaceRatio float32 `xml:"currentDiskSpaceToAddressSpaceRatio,omitempty"`
0000000000000000000000000000000000000000;;		DiskSpaceToAddressSpaceRatio        float32 `xml:"diskSpaceToAddressSpaceRatio,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanPolicyCost"] = reflect.TypeOf((*VsanPolicyCost)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanPolicySatisfiability struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid          string              `xml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;		IsSatisfiable bool                `xml:"isSatisfiable"`
0000000000000000000000000000000000000000;;		Reason        *LocalizableMessage `xml:"reason,omitempty"`
0000000000000000000000000000000000000000;;		Cost          *VsanPolicyCost     `xml:"cost,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanPolicySatisfiability"] = reflect.TypeOf((*VsanPolicySatisfiability)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemAPIBrokenIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemAPIBrokenIssue"] = reflect.TypeOf((*VsanUpgradeSystemAPIBrokenIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemAutoClaimEnabledOnHostsIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemAutoClaimEnabledOnHostsIssue"] = reflect.TypeOf((*VsanUpgradeSystemAutoClaimEnabledOnHostsIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemHostsDisconnectedIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemHostsDisconnectedIssue"] = reflect.TypeOf((*VsanUpgradeSystemHostsDisconnectedIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemMissingHostsInClusterIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemMissingHostsInClusterIssue"] = reflect.TypeOf((*VsanUpgradeSystemMissingHostsInClusterIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemNetworkPartitionInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemNetworkPartitionInfo"] = reflect.TypeOf((*VsanUpgradeSystemNetworkPartitionInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemNetworkPartitionIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Partitions []VsanUpgradeSystemNetworkPartitionInfo `xml:"partitions"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemNetworkPartitionIssue"] = reflect.TypeOf((*VsanUpgradeSystemNetworkPartitionIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemNotEnoughFreeCapacityIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReducedRedundancyUpgradePossible bool `xml:"reducedRedundancyUpgradePossible"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemNotEnoughFreeCapacityIssue"] = reflect.TypeOf((*VsanUpgradeSystemNotEnoughFreeCapacityIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemPreflightCheckIssue struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Msg string `xml:"msg"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemPreflightCheckIssue"] = reflect.TypeOf((*VsanUpgradeSystemPreflightCheckIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemPreflightCheckResult struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Issues               []BaseVsanUpgradeSystemPreflightCheckIssue `xml:"issues,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		DiskMappingToRestore *VsanHostDiskMapping                       `xml:"diskMappingToRestore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemPreflightCheckResult"] = reflect.TypeOf((*VsanUpgradeSystemPreflightCheckResult)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemRogueHostsInClusterIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuids []string `xml:"uuids"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemRogueHostsInClusterIssue"] = reflect.TypeOf((*VsanUpgradeSystemRogueHostsInClusterIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemUpgradeHistoryDiskGroupOp struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemUpgradeHistoryItem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operation   string              `xml:"operation"`
0000000000000000000000000000000000000000;;		DiskMapping VsanHostDiskMapping `xml:"diskMapping"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemUpgradeHistoryDiskGroupOp"] = reflect.TypeOf((*VsanUpgradeSystemUpgradeHistoryDiskGroupOp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemUpgradeHistoryItem struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timestamp time.Time               `xml:"timestamp"`
0000000000000000000000000000000000000000;;		Host      *ManagedObjectReference `xml:"host,omitempty"`
0000000000000000000000000000000000000000;;		Message   string                  `xml:"message"`
0000000000000000000000000000000000000000;;		Task      *ManagedObjectReference `xml:"task,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemUpgradeHistoryItem"] = reflect.TypeOf((*VsanUpgradeSystemUpgradeHistoryItem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemUpgradeHistoryPreflightFail struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemUpgradeHistoryItem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PreflightResult VsanUpgradeSystemPreflightCheckResult `xml:"preflightResult"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemUpgradeHistoryPreflightFail"] = reflect.TypeOf((*VsanUpgradeSystemUpgradeHistoryPreflightFail)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemUpgradeStatus struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InProgress bool                                      `xml:"inProgress"`
0000000000000000000000000000000000000000;;		History    []BaseVsanUpgradeSystemUpgradeHistoryItem `xml:"history,omitempty,typeattr"`
0000000000000000000000000000000000000000;;		Aborted    *bool                                     `xml:"aborted"`
0000000000000000000000000000000000000000;;		Completed  *bool                                     `xml:"completed"`
0000000000000000000000000000000000000000;;		Progress   int32                                     `xml:"progress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemUpgradeStatus"] = reflect.TypeOf((*VsanUpgradeSystemUpgradeStatus)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuids []string `xml:"uuids"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue"] = reflect.TypeOf((*VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystemWrongEsxVersionIssue struct {
0000000000000000000000000000000000000000;;		VsanUpgradeSystemPreflightCheckIssue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hosts []ManagedObjectReference `xml:"hosts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystemWrongEsxVersionIssue"] = reflect.TypeOf((*VsanUpgradeSystemWrongEsxVersionIssue)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmCloneSpec struct {
0000000000000000000000000000000000000000;;		VslmMigrateSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `xml:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmCloneSpec"] = reflect.TypeOf((*VslmCloneSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmCreateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name         string                        `xml:"name"`
0000000000000000000000000000000000000000;;		BackingSpec  BaseVslmCreateSpecBackingSpec `xml:"backingSpec,typeattr"`
0000000000000000000000000000000000000000;;		CapacityInMB int64                         `xml:"capacityInMB"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmCreateSpec"] = reflect.TypeOf((*VslmCreateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmCreateSpecBackingSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore ManagedObjectReference `xml:"datastore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmCreateSpecBackingSpec"] = reflect.TypeOf((*VslmCreateSpecBackingSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmCreateSpecDiskFileBackingSpec struct {
0000000000000000000000000000000000000000;;		VslmCreateSpecBackingSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProvisioningType string `xml:"provisioningType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmCreateSpecDiskFileBackingSpec"] = reflect.TypeOf((*VslmCreateSpecDiskFileBackingSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmCreateSpecRawDiskMappingBackingSpec struct {
0000000000000000000000000000000000000000;;		VslmCreateSpecBackingSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LunUuid           string `xml:"lunUuid"`
0000000000000000000000000000000000000000;;		CompatibilityMode string `xml:"compatibilityMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmCreateSpecRawDiskMappingBackingSpec"] = reflect.TypeOf((*VslmCreateSpecRawDiskMappingBackingSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmMigrateSpec struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BackingSpec BaseVslmCreateSpecBackingSpec `xml:"backingSpec,typeattr"`
0000000000000000000000000000000000000000;;		Consolidate *bool                         `xml:"consolidate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmMigrateSpec"] = reflect.TypeOf((*VslmMigrateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmRelocateSpec struct {
0000000000000000000000000000000000000000;;		VslmMigrateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmRelocateSpec"] = reflect.TypeOf((*VslmRelocateSpec)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VslmTagEntry struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TagName            string `xml:"tagName"`
0000000000000000000000000000000000000000;;		ParentCategoryName string `xml:"parentCategoryName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VslmTagEntry"] = reflect.TypeOf((*VslmTagEntry)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanDestPortConflict struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSessionKey1 string `xml:"vspanSessionKey1"`
0000000000000000000000000000000000000000;;		VspanSessionKey2 string `xml:"vspanSessionKey2"`
0000000000000000000000000000000000000000;;		PortKey          string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanDestPortConflict"] = reflect.TypeOf((*VspanDestPortConflict)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanDestPortConflictFault VspanDestPortConflict
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanDestPortConflictFault"] = reflect.TypeOf((*VspanDestPortConflictFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortConflict struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSessionKey1 string `xml:"vspanSessionKey1"`
0000000000000000000000000000000000000000;;		VspanSessionKey2 string `xml:"vspanSessionKey2"`
0000000000000000000000000000000000000000;;		PortKey          string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortConflict"] = reflect.TypeOf((*VspanPortConflict)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortConflictFault VspanPortConflict
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortConflictFault"] = reflect.TypeOf((*VspanPortConflictFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortMoveFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SrcPortgroupName  string `xml:"srcPortgroupName"`
0000000000000000000000000000000000000000;;		DestPortgroupName string `xml:"destPortgroupName"`
0000000000000000000000000000000000000000;;		PortKey           string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortMoveFault"] = reflect.TypeOf((*VspanPortMoveFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortMoveFaultFault VspanPortMoveFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortMoveFaultFault"] = reflect.TypeOf((*VspanPortMoveFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortPromiscChangeFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortKey string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortPromiscChangeFault"] = reflect.TypeOf((*VspanPortPromiscChangeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortPromiscChangeFaultFault VspanPortPromiscChangeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortPromiscChangeFaultFault"] = reflect.TypeOf((*VspanPortPromiscChangeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortgroupPromiscChangeFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortgroupName string `xml:"portgroupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortgroupPromiscChangeFault"] = reflect.TypeOf((*VspanPortgroupPromiscChangeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortgroupPromiscChangeFaultFault VspanPortgroupPromiscChangeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortgroupPromiscChangeFaultFault"] = reflect.TypeOf((*VspanPortgroupPromiscChangeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortgroupTypeChangeFault struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PortgroupName string `xml:"portgroupName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortgroupTypeChangeFault"] = reflect.TypeOf((*VspanPortgroupTypeChangeFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPortgroupTypeChangeFaultFault VspanPortgroupTypeChangeFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPortgroupTypeChangeFaultFault"] = reflect.TypeOf((*VspanPortgroupTypeChangeFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPromiscuousPortNotSupported struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSessionKey string `xml:"vspanSessionKey"`
0000000000000000000000000000000000000000;;		PortKey         string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPromiscuousPortNotSupported"] = reflect.TypeOf((*VspanPromiscuousPortNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanPromiscuousPortNotSupportedFault VspanPromiscuousPortNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanPromiscuousPortNotSupportedFault"] = reflect.TypeOf((*VspanPromiscuousPortNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanSameSessionPortConflict struct {
0000000000000000000000000000000000000000;;		DvsFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VspanSessionKey string `xml:"vspanSessionKey"`
0000000000000000000000000000000000000000;;		PortKey         string `xml:"portKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanSameSessionPortConflict"] = reflect.TypeOf((*VspanSameSessionPortConflict)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VspanSameSessionPortConflictFault VspanSameSessionPortConflict
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VspanSameSessionPortConflictFault"] = reflect.TypeOf((*VspanSameSessionPortConflictFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VvolDatastoreInfo struct {
0000000000000000000000000000000000000000;;		DatastoreInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VvolDS *HostVvolVolume `xml:"vvolDS,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VvolDatastoreInfo"] = reflect.TypeOf((*VvolDatastoreInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitForUpdates WaitForUpdatesRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WaitForUpdates"] = reflect.TypeOf((*WaitForUpdates)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitForUpdatesEx WaitForUpdatesExRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WaitForUpdatesEx"] = reflect.TypeOf((*WaitForUpdatesEx)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitForUpdatesExRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Version string                 `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;		Options *WaitOptions           `xml:"options,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WaitForUpdatesExRequestType"] = reflect.TypeOf((*WaitForUpdatesExRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitForUpdatesExResponse struct {
0000000000000000000000000000000000000000;;		Returnval *UpdateSet `xml:"returnval,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitForUpdatesRequestType struct {
0000000000000000000000000000000000000000;;		This    ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		Version string                 `xml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WaitForUpdatesRequestType"] = reflect.TypeOf((*WaitForUpdatesRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitForUpdatesResponse struct {
0000000000000000000000000000000000000000;;		Returnval UpdateSet `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitOptions struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxWaitSeconds   int32 `xml:"maxWaitSeconds,omitempty"`
0000000000000000000000000000000000000000;;		MaxObjectUpdates int32 `xml:"maxObjectUpdates,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WaitOptions"] = reflect.TypeOf((*WaitOptions)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WakeOnLanNotSupported struct {
0000000000000000000000000000000000000000;;		VirtualHardwareCompatibilityIssue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WakeOnLanNotSupported"] = reflect.TypeOf((*WakeOnLanNotSupported)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WakeOnLanNotSupportedByVmotionNIC struct {
0000000000000000000000000000000000000000;;		HostPowerOpFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WakeOnLanNotSupportedByVmotionNIC"] = reflect.TypeOf((*WakeOnLanNotSupportedByVmotionNIC)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WakeOnLanNotSupportedByVmotionNICFault WakeOnLanNotSupportedByVmotionNIC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WakeOnLanNotSupportedByVmotionNICFault"] = reflect.TypeOf((*WakeOnLanNotSupportedByVmotionNICFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WakeOnLanNotSupportedFault WakeOnLanNotSupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WakeOnLanNotSupportedFault"] = reflect.TypeOf((*WakeOnLanNotSupportedFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WarningUpgradeEvent struct {
0000000000000000000000000000000000000000;;		UpgradeEvent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WarningUpgradeEvent"] = reflect.TypeOf((*WarningUpgradeEvent)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WeeklyTaskScheduler struct {
0000000000000000000000000000000000000000;;		DailyTaskScheduler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Sunday    bool `xml:"sunday"`
0000000000000000000000000000000000000000;;		Monday    bool `xml:"monday"`
0000000000000000000000000000000000000000;;		Tuesday   bool `xml:"tuesday"`
0000000000000000000000000000000000000000;;		Wednesday bool `xml:"wednesday"`
0000000000000000000000000000000000000000;;		Thursday  bool `xml:"thursday"`
0000000000000000000000000000000000000000;;		Friday    bool `xml:"friday"`
0000000000000000000000000000000000000000;;		Saturday  bool `xml:"saturday"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WeeklyTaskScheduler"] = reflect.TypeOf((*WeeklyTaskScheduler)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WillLoseHAProtection struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Resolution string `xml:"resolution"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WillLoseHAProtection"] = reflect.TypeOf((*WillLoseHAProtection)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WillLoseHAProtectionFault WillLoseHAProtection
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WillLoseHAProtectionFault"] = reflect.TypeOf((*WillLoseHAProtectionFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WillModifyConfigCpuRequirements struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WillModifyConfigCpuRequirements"] = reflect.TypeOf((*WillModifyConfigCpuRequirements)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WillModifyConfigCpuRequirementsFault WillModifyConfigCpuRequirements
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WillModifyConfigCpuRequirementsFault"] = reflect.TypeOf((*WillModifyConfigCpuRequirementsFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WillResetSnapshotDirectory struct {
0000000000000000000000000000000000000000;;		MigrationFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WillResetSnapshotDirectory"] = reflect.TypeOf((*WillResetSnapshotDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WillResetSnapshotDirectoryFault WillResetSnapshotDirectory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WillResetSnapshotDirectoryFault"] = reflect.TypeOf((*WillResetSnapshotDirectoryFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WinNetBIOSConfigInfo struct {
0000000000000000000000000000000000000000;;		NetBIOSConfigInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrimaryWINS   string `xml:"primaryWINS"`
0000000000000000000000000000000000000000;;		SecondaryWINS string `xml:"secondaryWINS,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WinNetBIOSConfigInfo"] = reflect.TypeOf((*WinNetBIOSConfigInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WipeDiskFault struct {
0000000000000000000000000000000000000000;;		VimFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WipeDiskFault"] = reflect.TypeOf((*WipeDiskFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WipeDiskFaultFault WipeDiskFault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WipeDiskFaultFault"] = reflect.TypeOf((*WipeDiskFaultFault)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WitnessNodeInfo struct {
0000000000000000000000000000000000000000;;		DynamicData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpSettings CustomizationIPSettings `xml:"ipSettings"`
0000000000000000000000000000000000000000;;		BiosUuid   string                  `xml:"biosUuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["WitnessNodeInfo"] = reflect.TypeOf((*WitnessNodeInfo)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XmlToCustomizationSpecItem XmlToCustomizationSpecItemRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["XmlToCustomizationSpecItem"] = reflect.TypeOf((*XmlToCustomizationSpecItem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XmlToCustomizationSpecItemRequestType struct {
0000000000000000000000000000000000000000;;		This        ManagedObjectReference `xml:"_this"`
0000000000000000000000000000000000000000;;		SpecItemXml string                 `xml:"specItemXml"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["XmlToCustomizationSpecItemRequestType"] = reflect.TypeOf((*XmlToCustomizationSpecItemRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XmlToCustomizationSpecItemResponse struct {
0000000000000000000000000000000000000000;;		Returnval CustomizationSpecItem `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ZeroFillVirtualDiskRequestType struct {
0000000000000000000000000000000000000000;;		This       ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name       string                  `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ZeroFillVirtualDiskRequestType"] = reflect.TypeOf((*ZeroFillVirtualDiskRequestType)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ZeroFillVirtualDisk_Task ZeroFillVirtualDiskRequestType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ZeroFillVirtualDisk_Task"] = reflect.TypeOf((*ZeroFillVirtualDisk_Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ZeroFillVirtualDisk_TaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
