0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/types/registry.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/types/registry.go][vendor/github.com/vmware/govmomi/vim25/types/registry.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var t = map[string]reflect.Type{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Add(name string, kind reflect.Type) {
0000000000000000000000000000000000000000;;		t[name] = kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Func func(string) (reflect.Type, bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TypeFunc() Func {
0000000000000000000000000000000000000000;;		return func(name string) (reflect.Type, bool) {
0000000000000000000000000000000000000000;;			typ, ok := t[name]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				// The /sdk endpoint does not prefix types with the namespace,
0000000000000000000000000000000000000000;;				// but extension endpoints, such as /pbm/sdk do.
0000000000000000000000000000000000000000;;				name = strings.TrimPrefix(name, "vim25:")
0000000000000000000000000000000000000000;;				typ, ok = t[name]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return typ, ok
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
