0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/session/keep_alive.go[Godeps/_workspace/src/github.com/vmware/govmomi/session/keep_alive.go][vendor/github.com/vmware/govmomi/session/keep_alive.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package session
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/soap"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type keepAlive struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		roundTripper    soap.RoundTripper
0000000000000000000000000000000000000000;;		idleTime        time.Duration
0000000000000000000000000000000000000000;;		notifyRequest   chan struct{}
0000000000000000000000000000000000000000;;		notifyStop      chan struct{}
0000000000000000000000000000000000000000;;		notifyWaitGroup sync.WaitGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// keepAlive executes a request in the background with the purpose of
0000000000000000000000000000000000000000;;		// keeping the session active. The response for this request is discarded.
0000000000000000000000000000000000000000;;		keepAlive func(soap.RoundTripper) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultKeepAlive(roundTripper soap.RoundTripper) error {
0000000000000000000000000000000000000000;;		_, _ = methods.GetCurrentTime(context.Background(), roundTripper)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeepAlive wraps the specified soap.RoundTripper and executes a meaningless
0000000000000000000000000000000000000000;;	// API request in the background after the RoundTripper has been idle for the
0000000000000000000000000000000000000000;;	// specified amount of idle time. The keep alive process only starts once a
0000000000000000000000000000000000000000;;	// user logs in and runs until the user logs out again.
0000000000000000000000000000000000000000;;	func KeepAlive(roundTripper soap.RoundTripper, idleTime time.Duration) soap.RoundTripper {
0000000000000000000000000000000000000000;;		return KeepAliveHandler(roundTripper, idleTime, defaultKeepAlive)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeepAliveHandler works as KeepAlive() does, but the handler param can decide how to handle errors.
0000000000000000000000000000000000000000;;	// For example, if connectivity to ESX/VC is down long enough for a session to expire, a handler can choose to
0000000000000000000000000000000000000000;;	// Login() on a types.NotAuthenticated error.  If handler returns non-nil, the keep alive go routine will be stopped.
0000000000000000000000000000000000000000;;	func KeepAliveHandler(roundTripper soap.RoundTripper, idleTime time.Duration, handler func(soap.RoundTripper) error) soap.RoundTripper {
0000000000000000000000000000000000000000;;		k := &keepAlive{
0000000000000000000000000000000000000000;;			roundTripper:  roundTripper,
0000000000000000000000000000000000000000;;			idleTime:      idleTime,
0000000000000000000000000000000000000000;;			notifyRequest: make(chan struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		k.keepAlive = handler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return k
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *keepAlive) start() {
0000000000000000000000000000000000000000;;		k.Lock()
0000000000000000000000000000000000000000;;		defer k.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if k.notifyStop != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This channel must be closed to terminate idle timer.
0000000000000000000000000000000000000000;;		k.notifyStop = make(chan struct{})
0000000000000000000000000000000000000000;;		k.notifyWaitGroup.Add(1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer k.notifyWaitGroup.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for t := time.NewTimer(k.idleTime); ; {
0000000000000000000000000000000000000000;;				select {
0000000000000000000000000000000000000000;;				case <-k.notifyStop:
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				case <-k.notifyRequest:
0000000000000000000000000000000000000000;;					t.Reset(k.idleTime)
0000000000000000000000000000000000000000;;				case <-t.C:
0000000000000000000000000000000000000000;;					if err := k.keepAlive(k.roundTripper); err != nil {
0000000000000000000000000000000000000000;;						k.stop()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t = time.NewTimer(k.idleTime)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *keepAlive) stop() {
0000000000000000000000000000000000000000;;		k.Lock()
0000000000000000000000000000000000000000;;		defer k.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if k.notifyStop != nil {
0000000000000000000000000000000000000000;;			close(k.notifyStop)
0000000000000000000000000000000000000000;;			k.notifyWaitGroup.Wait()
0000000000000000000000000000000000000000;;			k.notifyStop = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *keepAlive) RoundTrip(ctx context.Context, req, res soap.HasFault) error {
0000000000000000000000000000000000000000;;		err := k.roundTripper.RoundTrip(ctx, req, res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start ticker on login, stop ticker on logout.
0000000000000000000000000000000000000000;;		switch req.(type) {
0000000000000000000000000000000000000000;;		case *methods.LoginBody, *methods.LoginExtensionByCertificateBody:
0000000000000000000000000000000000000000;;			k.start()
0000000000000000000000000000000000000000;;		case *methods.LogoutBody:
0000000000000000000000000000000000000000;;			k.stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
