0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2017 VMware, Inc. All Rights Reserved.
f6ad395f98e8f42c981d72ea247db1a4edb07eff;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package pbm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/pbm/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A struct to capture pbm create spec details.
0000000000000000000000000000000000000000;;	type CapabilityProfileCreateSpec struct {
0000000000000000000000000000000000000000;;		Name           string
0000000000000000000000000000000000000000;;		Description    string
0000000000000000000000000000000000000000;;		Category       string
0000000000000000000000000000000000000000;;		CapabilityList []Capability
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A struct to capture pbm capability instance details.
0000000000000000000000000000000000000000;;	type Capability struct {
0000000000000000000000000000000000000000;;		ID           string
0000000000000000000000000000000000000000;;		Namespace    string
0000000000000000000000000000000000000000;;		PropertyList []Property
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A struct to capture pbm property instance details.
0000000000000000000000000000000000000000;;	type Property struct {
0000000000000000000000000000000000000000;;		ID       string
0000000000000000000000000000000000000000;;		Operator string
0000000000000000000000000000000000000000;;		Value    string
0000000000000000000000000000000000000000;;		DataType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateCapabilityProfileSpec(pbmCreateSpec CapabilityProfileCreateSpec) (*types.PbmCapabilityProfileCreateSpec, error) {
0000000000000000000000000000000000000000;;		capabilities, err := createCapabilityInstances(pbmCreateSpec.CapabilityList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pbmCapabilityProfileSpec := types.PbmCapabilityProfileCreateSpec{
0000000000000000000000000000000000000000;;			Name:        pbmCreateSpec.Name,
0000000000000000000000000000000000000000;;			Description: pbmCreateSpec.Description,
0000000000000000000000000000000000000000;;			Category:    pbmCreateSpec.Category,
0000000000000000000000000000000000000000;;			ResourceType: types.PbmProfileResourceType{
0000000000000000000000000000000000000000;;				ResourceType: string(types.PbmProfileResourceTypeEnumSTORAGE),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Constraints: &types.PbmCapabilitySubProfileConstraints{
0000000000000000000000000000000000000000;;				SubProfiles: []types.PbmCapabilitySubProfile{
0000000000000000000000000000000000000000;;					types.PbmCapabilitySubProfile{
0000000000000000000000000000000000000000;;						Capability: capabilities,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pbmCapabilityProfileSpec, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createCapabilityInstances(rules []Capability) ([]types.PbmCapabilityInstance, error) {
0000000000000000000000000000000000000000;;		var capabilityInstances []types.PbmCapabilityInstance
0000000000000000000000000000000000000000;;		for _, capabilityRule := range rules {
0000000000000000000000000000000000000000;;			capability := types.PbmCapabilityInstance{
0000000000000000000000000000000000000000;;				Id: types.PbmCapabilityMetadataUniqueId{
0000000000000000000000000000000000000000;;					Namespace: capabilityRule.Namespace,
0000000000000000000000000000000000000000;;					Id:        capabilityRule.ID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var propertyInstances []types.PbmCapabilityPropertyInstance
0000000000000000000000000000000000000000;;			for _, propertyRule := range capabilityRule.PropertyList {
0000000000000000000000000000000000000000;;				property := types.PbmCapabilityPropertyInstance{
0000000000000000000000000000000000000000;;					Id: propertyRule.ID,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if propertyRule.Operator != "" {
0000000000000000000000000000000000000000;;					property.Operator = propertyRule.Operator
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var err error
0000000000000000000000000000000000000000;;				switch strings.ToLower(propertyRule.DataType) {
0000000000000000000000000000000000000000;;				case "int":
0000000000000000000000000000000000000000;;					// Go int32 is marshalled to xsi:int whereas Go int is marshalled to xsi:long when sending down the wire.
0000000000000000000000000000000000000000;;					var val int32
0000000000000000000000000000000000000000;;					val, err = verifyPropertyValueIsInt(propertyRule.Value, propertyRule.DataType)
0000000000000000000000000000000000000000;;					property.Value = val
0000000000000000000000000000000000000000;;				case "bool":
0000000000000000000000000000000000000000;;					var val bool
0000000000000000000000000000000000000000;;					val, err = verifyPropertyValueIsBoolean(propertyRule.Value, propertyRule.DataType)
0000000000000000000000000000000000000000;;					property.Value = val
0000000000000000000000000000000000000000;;				case "string":
0000000000000000000000000000000000000000;;					property.Value = propertyRule.Value
0000000000000000000000000000000000000000;;				case "set":
0000000000000000000000000000000000000000;;					set := types.PbmCapabilityDiscreteSet{}
0000000000000000000000000000000000000000;;					for _, val := range strings.Split(propertyRule.Value, ",") {
0000000000000000000000000000000000000000;;						set.Values = append(set.Values, val)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					property.Value = set
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("invalid value: %q with datatype: %q", propertyRule.Value, propertyRule.Value)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("invalid value: %q with datatype: %q", propertyRule.Value, propertyRule.Value)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				propertyInstances = append(propertyInstances, property)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			constraintInstances := []types.PbmCapabilityConstraintInstance{
0000000000000000000000000000000000000000;;				types.PbmCapabilityConstraintInstance{
0000000000000000000000000000000000000000;;					PropertyInstance: propertyInstances,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			capability.Constraint = constraintInstances
0000000000000000000000000000000000000000;;			capabilityInstances = append(capabilityInstances, capability)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return capabilityInstances, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verify if the capability value is of type integer.
0000000000000000000000000000000000000000;;	func verifyPropertyValueIsInt(propertyValue string, dataType string) (int32, error) {
0000000000000000000000000000000000000000;;		val, err := strconv.ParseInt(propertyValue, 10, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int32(val), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verify if the capability value is of type integer.
0000000000000000000000000000000000000000;;	func verifyPropertyValueIsBoolean(propertyValue string, dataType string) (bool, error) {
0000000000000000000000000000000000000000;;		val, err := strconv.ParseBool(propertyValue)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val, nil
0000000000000000000000000000000000000000;;	}
