0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2017 VMware, Inc. All Rights Reserved.
f6ad395f98e8f42c981d72ea247db1a4edb07eff;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package pbm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/pbm/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/pbm/types"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/soap"
0000000000000000000000000000000000000000;;		vim "github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		*soap.Client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceContent types.PbmServiceInstanceContent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewClient(ctx context.Context, c *vim25.Client) (*Client, error) {
0000000000000000000000000000000000000000;;		sc := c.Client.NewServiceClient("/pbm/sdk", "urn:pbm")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := types.PbmRetrieveServiceContent{
0000000000000000000000000000000000000000;;			This: vim.ManagedObjectReference{
0000000000000000000000000000000000000000;;				Type:  "PbmServiceInstance",
0000000000000000000000000000000000000000;;				Value: "ServiceInstance",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmRetrieveServiceContent(ctx, sc, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Client{sc, res.Returnval}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) QueryProfile(ctx context.Context, rtype types.PbmProfileResourceType, category string) ([]types.PbmProfileId, error) {
0000000000000000000000000000000000000000;;		req := types.PbmQueryProfile{
0000000000000000000000000000000000000000;;			This:            c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			ResourceType:    rtype,
0000000000000000000000000000000000000000;;			ProfileCategory: category,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmQueryProfile(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) RetrieveContent(ctx context.Context, ids []types.PbmProfileId) ([]types.BasePbmProfile, error) {
0000000000000000000000000000000000000000;;		req := types.PbmRetrieveContent{
0000000000000000000000000000000000000000;;			This:       c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			ProfileIds: ids,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmRetrieveContent(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PlacementCompatibilityResult []types.PbmPlacementCompatibilityResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) CheckRequirements(ctx context.Context, hubs []types.PbmPlacementHub, ref *types.PbmServerObjectRef, preq []types.BasePbmPlacementRequirement) (PlacementCompatibilityResult, error) {
0000000000000000000000000000000000000000;;		req := types.PbmCheckRequirements{
0000000000000000000000000000000000000000;;			This:                        c.ServiceContent.PlacementSolver,
0000000000000000000000000000000000000000;;			HubsToSearch:                hubs,
0000000000000000000000000000000000000000;;			PlacementSubjectRef:         ref,
0000000000000000000000000000000000000000;;			PlacementSubjectRequirement: preq,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmCheckRequirements(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l PlacementCompatibilityResult) CompatibleDatastores() []types.PbmPlacementHub {
0000000000000000000000000000000000000000;;		var compatibleDatastores []types.PbmPlacementHub
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, res := range l {
0000000000000000000000000000000000000000;;			if len(res.Error) == 0 {
0000000000000000000000000000000000000000;;				compatibleDatastores = append(compatibleDatastores, res.Hub)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return compatibleDatastores
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l PlacementCompatibilityResult) NonCompatibleDatastores() []types.PbmPlacementHub {
0000000000000000000000000000000000000000;;		var nonCompatibleDatastores []types.PbmPlacementHub
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, res := range l {
0000000000000000000000000000000000000000;;			if len(res.Error) > 0 {
0000000000000000000000000000000000000000;;				nonCompatibleDatastores = append(nonCompatibleDatastores, res.Hub)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nonCompatibleDatastores
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) CreateProfile(ctx context.Context, capabilityProfileCreateSpec types.PbmCapabilityProfileCreateSpec) (*types.PbmProfileId, error) {
0000000000000000000000000000000000000000;;		req := types.PbmCreate{
0000000000000000000000000000000000000000;;			This:       c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			CreateSpec: capabilityProfileCreateSpec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmCreate(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) UpdateProfile(ctx context.Context, id types.PbmProfileId, updateSpec types.PbmCapabilityProfileUpdateSpec) error {
0000000000000000000000000000000000000000;;		req := types.PbmUpdate{
0000000000000000000000000000000000000000;;			This:       c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			ProfileId:  id,
0000000000000000000000000000000000000000;;			UpdateSpec: updateSpec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.PbmUpdate(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) DeleteProfile(ctx context.Context, ids []types.PbmProfileId) ([]types.PbmProfileOperationOutcome, error) {
0000000000000000000000000000000000000000;;		req := types.PbmDelete{
0000000000000000000000000000000000000000;;			This:      c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			ProfileId: ids,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmDelete(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) QueryAssociatedEntity(ctx context.Context, id types.PbmProfileId, entityType string) ([]types.PbmServerObjectRef, error) {
0000000000000000000000000000000000000000;;		req := types.PbmQueryAssociatedEntity{
0000000000000000000000000000000000000000;;			This:       c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			Profile:    id,
0000000000000000000000000000000000000000;;			EntityType: entityType,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmQueryAssociatedEntity(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) QueryAssociatedEntities(ctx context.Context, ids []types.PbmProfileId) ([]types.PbmQueryProfileResult, error) {
0000000000000000000000000000000000000000;;		req := types.PbmQueryAssociatedEntities{
0000000000000000000000000000000000000000;;			This:     c.ServiceContent.ProfileManager,
0000000000000000000000000000000000000000;;			Profiles: ids,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.PbmQueryAssociatedEntities(ctx, c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) ProfileIDByName(ctx context.Context, profileName string) (string, error) {
0000000000000000000000000000000000000000;;		resourceType := types.PbmProfileResourceType{
0000000000000000000000000000000000000000;;			ResourceType: string(types.PbmProfileResourceTypeEnumSTORAGE),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		category := types.PbmProfileCategoryEnumREQUIREMENT
0000000000000000000000000000000000000000;;		ids, err := c.QueryProfile(ctx, resourceType, string(category))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		profiles, err := c.RetrieveContent(ctx, ids)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range profiles {
0000000000000000000000000000000000000000;;			profile := profiles[i].GetPbmProfile()
0000000000000000000000000000000000000000;;			if profile.Name == profileName {
0000000000000000000000000000000000000000;;				return profile.ProfileId.UniqueId, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("no pbm profile found with name: %q", profileName)
0000000000000000000000000000000000000000;;	}
