0000000000000000000000000000000000000000;;	// +build windows
df2e52f6d8f62c39f985d4ae6f4503dd137f6093;;	
0000000000000000000000000000000000000000;;	package SSPI
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		secur32_dll           = syscall.NewLazyDLL("secur32.dll")
0000000000000000000000000000000000000000;;		initSecurityInterface = secur32_dll.NewProc("InitSecurityInterfaceW")
0000000000000000000000000000000000000000;;		sec_fn                *SecurityFunctionTable
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		ptr, _, _ := initSecurityInterface.Call()
0000000000000000000000000000000000000000;;		sec_fn = (*SecurityFunctionTable)(unsafe.Pointer(ptr))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SEC_E_OK                        = 0
0000000000000000000000000000000000000000;;		SECPKG_CRED_OUTBOUND            = 2
0000000000000000000000000000000000000000;;		SEC_WINNT_AUTH_IDENTITY_UNICODE = 2
0000000000000000000000000000000000000000;;		ISC_REQ_DELEGATE                = 0x00000001
0000000000000000000000000000000000000000;;		ISC_REQ_REPLAY_DETECT           = 0x00000004
0000000000000000000000000000000000000000;;		ISC_REQ_SEQUENCE_DETECT         = 0x00000008
0000000000000000000000000000000000000000;;		ISC_REQ_CONFIDENTIALITY         = 0x00000010
0000000000000000000000000000000000000000;;		ISC_REQ_CONNECTION              = 0x00000800
0000000000000000000000000000000000000000;;		SECURITY_NETWORK_DREP           = 0
0000000000000000000000000000000000000000;;		SEC_I_CONTINUE_NEEDED           = 0x00090312
0000000000000000000000000000000000000000;;		SEC_I_COMPLETE_NEEDED           = 0x00090313
0000000000000000000000000000000000000000;;		SEC_I_COMPLETE_AND_CONTINUE     = 0x00090314
0000000000000000000000000000000000000000;;		SECBUFFER_VERSION               = 0
0000000000000000000000000000000000000000;;		SECBUFFER_TOKEN                 = 2
0000000000000000000000000000000000000000;;		NTLMBUF_LEN                     = 12000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const ISC_REQ = ISC_REQ_CONFIDENTIALITY |
0000000000000000000000000000000000000000;;		ISC_REQ_REPLAY_DETECT |
0000000000000000000000000000000000000000;;		ISC_REQ_SEQUENCE_DETECT |
0000000000000000000000000000000000000000;;		ISC_REQ_CONNECTION |
0000000000000000000000000000000000000000;;		ISC_REQ_DELEGATE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecurityFunctionTable struct {
0000000000000000000000000000000000000000;;		dwVersion                  uint32
0000000000000000000000000000000000000000;;		EnumerateSecurityPackages  uintptr
0000000000000000000000000000000000000000;;		QueryCredentialsAttributes uintptr
0000000000000000000000000000000000000000;;		AcquireCredentialsHandle   uintptr
0000000000000000000000000000000000000000;;		FreeCredentialsHandle      uintptr
0000000000000000000000000000000000000000;;		Reserved2                  uintptr
0000000000000000000000000000000000000000;;		InitializeSecurityContext  uintptr
0000000000000000000000000000000000000000;;		AcceptSecurityContext      uintptr
0000000000000000000000000000000000000000;;		CompleteAuthToken          uintptr
0000000000000000000000000000000000000000;;		DeleteSecurityContext      uintptr
0000000000000000000000000000000000000000;;		ApplyControlToken          uintptr
0000000000000000000000000000000000000000;;		QueryContextAttributes     uintptr
0000000000000000000000000000000000000000;;		ImpersonateSecurityContext uintptr
0000000000000000000000000000000000000000;;		RevertSecurityContext      uintptr
0000000000000000000000000000000000000000;;		MakeSignature              uintptr
0000000000000000000000000000000000000000;;		VerifySignature            uintptr
0000000000000000000000000000000000000000;;		FreeContextBuffer          uintptr
0000000000000000000000000000000000000000;;		QuerySecurityPackageInfo   uintptr
0000000000000000000000000000000000000000;;		Reserved3                  uintptr
0000000000000000000000000000000000000000;;		Reserved4                  uintptr
0000000000000000000000000000000000000000;;		Reserved5                  uintptr
0000000000000000000000000000000000000000;;		Reserved6                  uintptr
0000000000000000000000000000000000000000;;		Reserved7                  uintptr
0000000000000000000000000000000000000000;;		Reserved8                  uintptr
0000000000000000000000000000000000000000;;		QuerySecurityContextToken  uintptr
0000000000000000000000000000000000000000;;		EncryptMessage             uintptr
0000000000000000000000000000000000000000;;		DecryptMessage             uintptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SEC_WINNT_AUTH_IDENTITY struct {
0000000000000000000000000000000000000000;;		User           *uint16
0000000000000000000000000000000000000000;;		UserLength     uint32
0000000000000000000000000000000000000000;;		Domain         *uint16
0000000000000000000000000000000000000000;;		DomainLength   uint32
0000000000000000000000000000000000000000;;		Password       *uint16
0000000000000000000000000000000000000000;;		PasswordLength uint32
0000000000000000000000000000000000000000;;		Flags          uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeStamp struct {
0000000000000000000000000000000000000000;;		LowPart  uint32
0000000000000000000000000000000000000000;;		HighPart int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecHandle struct {
0000000000000000000000000000000000000000;;		dwLower uintptr
0000000000000000000000000000000000000000;;		dwUpper uintptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecBuffer struct {
0000000000000000000000000000000000000000;;		cbBuffer   uint32
0000000000000000000000000000000000000000;;		BufferType uint32
0000000000000000000000000000000000000000;;		pvBuffer   *byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecBufferDesc struct {
0000000000000000000000000000000000000000;;		ulVersion uint32
0000000000000000000000000000000000000000;;		cBuffers  uint32
0000000000000000000000000000000000000000;;		pBuffers  *SecBuffer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSPIAuth struct {
0000000000000000000000000000000000000000;;		Domain   string
0000000000000000000000000000000000000000;;		UserName string
0000000000000000000000000000000000000000;;		Password string
0000000000000000000000000000000000000000;;		Service  string
0000000000000000000000000000000000000000;;		cred     SecHandle
0000000000000000000000000000000000000000;;		ctxt     SecHandle
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Auth interface {
0000000000000000000000000000000000000000;;		InitialBytes() ([]byte, error)
0000000000000000000000000000000000000000;;		NextBytes([]byte) ([]byte, error)
0000000000000000000000000000000000000000;;		Free()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAuth returns SSPI auth object initialized with given params and true for success
0000000000000000000000000000000000000000;;	// In case of error, it will return nil SSPI object and false for failure
0000000000000000000000000000000000000000;;	func GetAuth(user, password, service, workstation string) (Auth, bool) {
0000000000000000000000000000000000000000;;		if user == "" {
0000000000000000000000000000000000000000;;			return &SSPIAuth{Service: service}, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.ContainsRune(user, '\\') {
0000000000000000000000000000000000000000;;			return nil, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		domain_user := strings.SplitN(user, "\\", 2)
0000000000000000000000000000000000000000;;		return &SSPIAuth{
0000000000000000000000000000000000000000;;			Domain:   domain_user[0],
0000000000000000000000000000000000000000;;			UserName: domain_user[1],
0000000000000000000000000000000000000000;;			Password: password,
0000000000000000000000000000000000000000;;			Service:  service,
0000000000000000000000000000000000000000;;		}, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *SSPIAuth) InitialBytes() ([]byte, error) {
0000000000000000000000000000000000000000;;		var identity *SEC_WINNT_AUTH_IDENTITY
0000000000000000000000000000000000000000;;		if auth.UserName != "" {
0000000000000000000000000000000000000000;;			identity = &SEC_WINNT_AUTH_IDENTITY{
0000000000000000000000000000000000000000;;				Flags:          SEC_WINNT_AUTH_IDENTITY_UNICODE,
0000000000000000000000000000000000000000;;				Password:       syscall.StringToUTF16Ptr(auth.Password),
0000000000000000000000000000000000000000;;				PasswordLength: uint32(len(auth.Password)),
0000000000000000000000000000000000000000;;				Domain:         syscall.StringToUTF16Ptr(auth.Domain),
0000000000000000000000000000000000000000;;				DomainLength:   uint32(len(auth.Domain)),
0000000000000000000000000000000000000000;;				User:           syscall.StringToUTF16Ptr(auth.UserName),
0000000000000000000000000000000000000000;;				UserLength:     uint32(len(auth.UserName)),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var ts TimeStamp
0000000000000000000000000000000000000000;;		sec_ok, _, _ := syscall.Syscall9(sec_fn.AcquireCredentialsHandle,
0000000000000000000000000000000000000000;;			9,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr("Negotiate"))),
0000000000000000000000000000000000000000;;			SECPKG_CRED_OUTBOUND,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(identity)),
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.cred)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&ts)))
0000000000000000000000000000000000000000;;		if sec_ok != SEC_E_OK {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("AcquireCredentialsHandle failed %x", sec_ok)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buf SecBuffer
0000000000000000000000000000000000000000;;		var desc SecBufferDesc
0000000000000000000000000000000000000000;;		desc.ulVersion = SECBUFFER_VERSION
0000000000000000000000000000000000000000;;		desc.cBuffers = 1
0000000000000000000000000000000000000000;;		desc.pBuffers = &buf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		outbuf := make([]byte, NTLMBUF_LEN)
0000000000000000000000000000000000000000;;		buf.cbBuffer = NTLMBUF_LEN
0000000000000000000000000000000000000000;;		buf.BufferType = SECBUFFER_TOKEN
0000000000000000000000000000000000000000;;		buf.pvBuffer = &outbuf[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var attrs uint32
0000000000000000000000000000000000000000;;		sec_ok, _, _ = syscall.Syscall12(sec_fn.InitializeSecurityContext,
0000000000000000000000000000000000000000;;			12,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.cred)),
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(auth.Service))),
0000000000000000000000000000000000000000;;			ISC_REQ,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			SECURITY_NETWORK_DREP,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.ctxt)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&desc)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&attrs)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&ts)))
0000000000000000000000000000000000000000;;		if sec_ok == SEC_I_COMPLETE_AND_CONTINUE ||
0000000000000000000000000000000000000000;;			sec_ok == SEC_I_COMPLETE_NEEDED {
0000000000000000000000000000000000000000;;			syscall.Syscall6(sec_fn.CompleteAuthToken,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				uintptr(unsafe.Pointer(&auth.ctxt)),
0000000000000000000000000000000000000000;;				uintptr(unsafe.Pointer(&desc)),
0000000000000000000000000000000000000000;;				0, 0, 0, 0)
0000000000000000000000000000000000000000;;		} else if sec_ok != SEC_E_OK &&
0000000000000000000000000000000000000000;;			sec_ok != SEC_I_CONTINUE_NEEDED {
0000000000000000000000000000000000000000;;			syscall.Syscall6(sec_fn.FreeCredentialsHandle,
0000000000000000000000000000000000000000;;				1,
0000000000000000000000000000000000000000;;				uintptr(unsafe.Pointer(&auth.cred)),
0000000000000000000000000000000000000000;;				0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("InitialBytes InitializeSecurityContext failed %x", sec_ok)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return outbuf[:buf.cbBuffer], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *SSPIAuth) NextBytes(bytes []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		var in_buf, out_buf SecBuffer
0000000000000000000000000000000000000000;;		var in_desc, out_desc SecBufferDesc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		in_desc.ulVersion = SECBUFFER_VERSION
0000000000000000000000000000000000000000;;		in_desc.cBuffers = 1
0000000000000000000000000000000000000000;;		in_desc.pBuffers = &in_buf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out_desc.ulVersion = SECBUFFER_VERSION
0000000000000000000000000000000000000000;;		out_desc.cBuffers = 1
0000000000000000000000000000000000000000;;		out_desc.pBuffers = &out_buf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		in_buf.BufferType = SECBUFFER_TOKEN
0000000000000000000000000000000000000000;;		in_buf.pvBuffer = &bytes[0]
0000000000000000000000000000000000000000;;		in_buf.cbBuffer = uint32(len(bytes))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		outbuf := make([]byte, NTLMBUF_LEN)
0000000000000000000000000000000000000000;;		out_buf.BufferType = SECBUFFER_TOKEN
0000000000000000000000000000000000000000;;		out_buf.pvBuffer = &outbuf[0]
0000000000000000000000000000000000000000;;		out_buf.cbBuffer = NTLMBUF_LEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var attrs uint32
0000000000000000000000000000000000000000;;		var ts TimeStamp
0000000000000000000000000000000000000000;;		sec_ok, _, _ := syscall.Syscall12(sec_fn.InitializeSecurityContext,
0000000000000000000000000000000000000000;;			12,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.cred)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.ctxt)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(auth.Service))),
0000000000000000000000000000000000000000;;			ISC_REQ,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			SECURITY_NETWORK_DREP,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&in_desc)),
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.ctxt)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&out_desc)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&attrs)),
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&ts)))
0000000000000000000000000000000000000000;;		if sec_ok == SEC_I_COMPLETE_AND_CONTINUE ||
0000000000000000000000000000000000000000;;			sec_ok == SEC_I_COMPLETE_NEEDED {
0000000000000000000000000000000000000000;;			syscall.Syscall6(sec_fn.CompleteAuthToken,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				uintptr(unsafe.Pointer(&auth.ctxt)),
0000000000000000000000000000000000000000;;				uintptr(unsafe.Pointer(&out_desc)),
0000000000000000000000000000000000000000;;				0, 0, 0, 0)
0000000000000000000000000000000000000000;;		} else if sec_ok != SEC_E_OK &&
0000000000000000000000000000000000000000;;			sec_ok != SEC_I_CONTINUE_NEEDED {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("NextBytes InitializeSecurityContext failed %x", sec_ok)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return outbuf[:out_buf.cbBuffer], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *SSPIAuth) Free() {
0000000000000000000000000000000000000000;;		syscall.Syscall6(sec_fn.DeleteSecurityContext,
0000000000000000000000000000000000000000;;			1,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.ctxt)),
0000000000000000000000000000000000000000;;			0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		syscall.Syscall6(sec_fn.FreeCredentialsHandle,
0000000000000000000000000000000000000000;;			1,
0000000000000000000000000000000000000000;;			uintptr(unsafe.Pointer(&auth.cred)),
0000000000000000000000000000000000000000;;			0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;	}
