0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for networks API.
0000000000000000000000000000000000000000;;	type NetworksAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options used for GetAll API
0000000000000000000000000000000000000000;;	type NetworkGetOptions struct {
0000000000000000000000000000000000000000;;		Name string `urlParam:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var networkUrl string = rootUrl + "/subnets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a network.
0000000000000000000000000000000000000000;;	func (api *NetworksAPI) Create(networkSpec *NetworkCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(networkSpec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+networkUrl,
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a network with specified ID.
0000000000000000000000000000000000000000;;	func (api *NetworksAPI) Delete(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Delete(api.client.Endpoint+networkUrl+"/"+id, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a network with the specified ID.
0000000000000000000000000000000000000000;;	func (api *NetworksAPI) Get(id string) (network *Network, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.client.Endpoint+networkUrl+"/"+id, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var result Network
0000000000000000000000000000000000000000;;		err = json.NewDecoder(res.Body).Decode(&result)
0000000000000000000000000000000000000000;;		return &result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns all networks
0000000000000000000000000000000000000000;;	func (api *NetworksAPI) GetAll(options *NetworkGetOptions) (result *Networks, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + networkUrl
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &Networks{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sets default network.
0000000000000000000000000000000000000000;;	func (api *NetworksAPI) SetDefault(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+networkUrl+"/"+id+"/set_default",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader([]byte("")),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
