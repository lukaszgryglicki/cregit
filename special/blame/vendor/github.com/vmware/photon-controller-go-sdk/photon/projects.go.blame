0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for projects API.
0000000000000000000000000000000000000000;;	type ProjectsAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options for GetDisks API.
0000000000000000000000000000000000000000;;	type DiskGetOptions struct {
0000000000000000000000000000000000000000;;		Name string `urlParam:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options for GetDisks API.
0000000000000000000000000000000000000000;;	type VmGetOptions struct {
0000000000000000000000000000000000000000;;		Name string `urlParam:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var projectUrl string = rootUrl + "/projects/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes the project with specified ID. Any VMs, disks, etc., owned by the project must be deleted first.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) Delete(projectID string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Delete(api.client.Endpoint+projectUrl+projectID, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a disk on the specified project.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) CreateDisk(projectID string, spec *DiskCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+projectUrl+projectID+"/disks",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets disks for project with the specified ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) GetDisks(projectID string, options *DiskGetOptions) (result *DiskList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + projectUrl + projectID + "/disks"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &DiskList{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a VM on the specified project.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) CreateVM(projectID string, spec *VmCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+projectUrl+projectID+"/vms",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all tasks with the specified project ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) GetTasks(id string, options *TaskGetOptions) (result *TaskList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + projectUrl + id + "/tasks"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &TaskList{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets vms for project with the specified ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) GetVMs(projectID string, options *VmGetOptions) (result *VMs, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + projectUrl + projectID + "/vms"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &VMs{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a service on the specified project.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) CreateService(projectID string, spec *ServiceCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+projectUrl+projectID+"/services",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets services for project with the specified ID
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) GetServices(projectID string) (result *Services, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + projectUrl + projectID + "/services"
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &Services{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets the project with a specified ID.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) Get(id string) (project *ProjectCompact, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.getEntityUrl(id), api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		project = &ProjectCompact{}
0000000000000000000000000000000000000000;;		err = json.NewDecoder(res.Body).Decode(project)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set security groups for this project, overwriting any existing ones.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) SetSecurityGroups(projectID string, securityGroups *SecurityGroupsSpec) (*Task, error) {
0000000000000000000000000000000000000000;;		return setSecurityGroups(api.client, api.getEntityUrl(projectID), securityGroups)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) getEntityUrl(id string) string {
0000000000000000000000000000000000000000;;		return api.client.Endpoint + projectUrl + id
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a router on the specified project.
0000000000000000000000000000000000000000;;	func (api *ProjectsAPI) CreateRouter(projectID string, spec *RouterCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+projectUrl+projectID+"/routers",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
