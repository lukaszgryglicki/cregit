0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/photon-controller-go-sdk/photon/lightwave"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for auth API.
0000000000000000000000000000000000000000;;	type AuthAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const authUrl string = rootUrl + "/auth"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets authentication info.
0000000000000000000000000000000000000000;;	func (api *AuthAPI) Get() (info *AuthInfo, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.client.Endpoint+authUrl, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info = &AuthInfo{}
0000000000000000000000000000000000000000;;		err = json.NewDecoder(res.Body).Decode(info)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets Tokens from username/password.
0000000000000000000000000000000000000000;;	func (api *AuthAPI) GetTokensByPassword(username string, password string) (tokenOptions *TokenOptions, err error) {
0000000000000000000000000000000000000000;;		oidcClient, err := api.buildOIDCClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenResponse, err := oidcClient.GetTokenByPasswordGrant(username, password)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return api.toTokenOptions(tokenResponse), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTokensFromWindowsLogInContext gets tokens based on Windows logged in context
0000000000000000000000000000000000000000;;	// In case of running on platform other than Windows, it returns error
0000000000000000000000000000000000000000;;	func (api *AuthAPI) GetTokensFromWindowsLogInContext() (tokenOptions *TokenOptions, err error) {
0000000000000000000000000000000000000000;;		oidcClient, err := api.buildOIDCClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenResponse, err := oidcClient.GetTokensFromWindowsLogInContext()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return api.toTokenOptions(tokenResponse), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets tokens from refresh token.
0000000000000000000000000000000000000000;;	func (api *AuthAPI) GetTokensByRefreshToken(refreshtoken string) (tokenOptions *TokenOptions, err error) {
0000000000000000000000000000000000000000;;		oidcClient, err := api.buildOIDCClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenResponse, err := oidcClient.GetTokenByRefreshTokenGrant(refreshtoken)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return api.toTokenOptions(tokenResponse), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (api *AuthAPI) getAuthEndpoint() (endpoint string, err error) {
0000000000000000000000000000000000000000;;		authInfo, err := api.client.Auth.Get()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if authInfo.Port == 0 {
0000000000000000000000000000000000000000;;			authInfo.Port = 443
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("https://%s:%d", authInfo.Endpoint, authInfo.Port), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (api *AuthAPI) buildOIDCClient() (client *lightwave.OIDCClient, err error) {
0000000000000000000000000000000000000000;;		authEndPoint, err := api.getAuthEndpoint()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return lightwave.NewOIDCClient(
0000000000000000000000000000000000000000;;			authEndPoint,
0000000000000000000000000000000000000000;;			api.buildOIDCClientOptions(&api.client.options),
0000000000000000000000000000000000000000;;			api.client.restClient.logger), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const tokenScope string = "openid offline_access rs_photon_platform at_groups"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (api *AuthAPI) buildOIDCClientOptions(options *ClientOptions) *lightwave.OIDCClientOptions {
0000000000000000000000000000000000000000;;		return &lightwave.OIDCClientOptions{
0000000000000000000000000000000000000000;;			IgnoreCertificate: api.client.options.IgnoreCertificate,
0000000000000000000000000000000000000000;;			RootCAs:           api.client.options.RootCAs,
0000000000000000000000000000000000000000;;			TokenScope:        tokenScope,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (api *AuthAPI) toTokenOptions(response *lightwave.OIDCTokenResponse) *TokenOptions {
0000000000000000000000000000000000000000;;		return &TokenOptions{
0000000000000000000000000000000000000000;;			AccessToken:  response.AccessToken,
0000000000000000000000000000000000000000;;			ExpiresIn:    response.ExpiresIn,
0000000000000000000000000000000000000000;;			RefreshToken: response.RefreshToken,
0000000000000000000000000000000000000000;;			IdToken:      response.IdToken,
0000000000000000000000000000000000000000;;			TokenType:    response.TokenType,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse the given token details.
0000000000000000000000000000000000000000;;	func (api *AuthAPI) parseTokenDetails(token string) (jwtToken *lightwave.JWTToken, err error) {
0000000000000000000000000000000000000000;;		jwtToken = lightwave.ParseTokenDetails(token)
0000000000000000000000000000000000000000;;		return jwtToken, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse the given token raw details.
0000000000000000000000000000000000000000;;	func (api *AuthAPI) parseRawTokenDetails(token string) (jwtToken []string, err error) {
0000000000000000000000000000000000000000;;		jwtToken, err = lightwave.ParseRawTokenDetails(token)
0000000000000000000000000000000000000000;;		return jwtToken, err
0000000000000000000000000000000000000000;;	}
