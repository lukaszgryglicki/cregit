0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Entity struct {
0000000000000000000000000000000000000000;;		ID   string `json:"id"`
0000000000000000000000000000000000000000;;		Kind string `json:"kind"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement a generic sdk error
0000000000000000000000000000000000000000;;	type SdkError struct {
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e SdkError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("photon: %v", e.Message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an error from the Photon API.
0000000000000000000000000000000000000000;;	type ApiError struct {
0000000000000000000000000000000000000000;;		Code           string                 `json:"code"`
0000000000000000000000000000000000000000;;		Data           map[string]interface{} `json:"data"`
0000000000000000000000000000000000000000;;		Message        string                 `json:"message"`
0000000000000000000000000000000000000000;;		HttpStatusCode int                    `json:"-"` // Not part of API contract
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement Go error interface for ApiError
0000000000000000000000000000000000000000;;	func (e ApiError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(
0000000000000000000000000000000000000000;;			"photon: { HTTP status: '%v', code: '%v', message: '%v', data: '%v' }",
0000000000000000000000000000000000000000;;			e.HttpStatusCode,
0000000000000000000000000000000000000000;;			e.Code,
0000000000000000000000000000000000000000;;			e.Message,
0000000000000000000000000000000000000000;;			e.Data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used to represent a generic HTTP error, i.e. an unexpected HTTP 500.
0000000000000000000000000000000000000000;;	type HttpError struct {
0000000000000000000000000000000000000000;;		StatusCode int
0000000000000000000000000000000000000000;;		Message    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implementation of error interface for HttpError
0000000000000000000000000000000000000000;;	func (e HttpError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("photon: HTTP %d: %v", e.StatusCode, e.Message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an Photon task that has entered into an error state.
0000000000000000000000000000000000000000;;	// Photon task errors can be caught and type-checked against with
0000000000000000000000000000000000000000;;	// the usual Go idiom.
0000000000000000000000000000000000000000;;	type TaskError struct {
0000000000000000000000000000000000000000;;		ID   string `json:"id"`
0000000000000000000000000000000000000000;;		Step Step   `json:"step,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement Go error interface for TaskError.
0000000000000000000000000000000000000000;;	func (e TaskError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("photon: Task '%s' is in error state: {@step==%s}", e.ID, GetStep(e.Step))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An error representing a timeout while waiting for a task to complete.
0000000000000000000000000000000000000000;;	type TaskTimeoutError struct {
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement Go error interface for TaskTimeoutError.
0000000000000000000000000000000000000000;;	func (e TaskTimeoutError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("photon: Timed out waiting for task '%s'. "+
0000000000000000000000000000000000000000;;			"Task may not be in error state, examine task for full details.", e.ID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an operation (Step) within a Task.
0000000000000000000000000000000000000000;;	type Step struct {
0000000000000000000000000000000000000000;;		ID                 string                 `json:"id"`
0000000000000000000000000000000000000000;;		Operation          string                 `json:"operation,omitempty"`
0000000000000000000000000000000000000000;;		State              string                 `json:"state"`
0000000000000000000000000000000000000000;;		StartedTime        int64                  `json:"startedTime"`
0000000000000000000000000000000000000000;;		EndTime            int64                  `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;		QueuedTime         int64                  `json:"queuedTime"`
0000000000000000000000000000000000000000;;		Sequence           int                    `json:"sequence,omitempty"`
0000000000000000000000000000000000000000;;		ResourceProperties map[string]interface{} `json:"resourceProperties,omitempty"`
0000000000000000000000000000000000000000;;		Errors             []ApiError             `json:"errors,omitempty"`
0000000000000000000000000000000000000000;;		Warnings           []ApiError             `json:"warnings,omitempty"`
0000000000000000000000000000000000000000;;		Options            map[string]interface{} `json:"options,omitempty"`
0000000000000000000000000000000000000000;;		SelfLink           string                 `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement Go error interface for Step.
0000000000000000000000000000000000000000;;	func GetStep(s Step) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("{\"sequence\"=>\"%d\",\"state\"=>\"%s\",\"errors\"=>%s,\"warnings\"=>%s,\"operation\"=>\"%s\","+
0000000000000000000000000000000000000000;;			"\"startedTime\"=>\"%d\",\"queuedTime\"=>\"%d\",\"endTime\"=>\"%d\",\"options\"=>%s}",
0000000000000000000000000000000000000000;;			s.Sequence, s.State, s.Errors, s.Warnings, s.Operation, s.StartedTime, s.QueuedTime,
0000000000000000000000000000000000000000;;			s.EndTime, s.Options)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an asynchronous task.
0000000000000000000000000000000000000000;;	type Task struct {
0000000000000000000000000000000000000000;;		ID                 string      `json:"id"`
0000000000000000000000000000000000000000;;		Operation          string      `json:"operation,omitempty"`
0000000000000000000000000000000000000000;;		State              string      `json:"state"`
0000000000000000000000000000000000000000;;		StartedTime        int64       `json:"startedTime"`
0000000000000000000000000000000000000000;;		EndTime            int64       `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;		QueuedTime         int64       `json:"queuedTime"`
0000000000000000000000000000000000000000;;		Entity             Entity      `json:"entity,omitempty"`
0000000000000000000000000000000000000000;;		SelfLink           string      `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;		Steps              []Step      `json:"steps,omitempty"`
0000000000000000000000000000000000000000;;		ResourceProperties interface{} `json:"resourceProperties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple tasks returned by the API.
0000000000000000000000000000000000000000;;	type TaskList struct {
0000000000000000000000000000000000000000;;		Items []Task `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options for GetTasks API.
0000000000000000000000000000000000000000;;	type TaskGetOptions struct {
0000000000000000000000000000000000000000;;		State      string `urlParam:"state"`
0000000000000000000000000000000000000000;;		Kind       string `urlParam:"kind"`
0000000000000000000000000000000000000000;;		EntityID   string `urlParam:"entityId"`
0000000000000000000000000000000000000000;;		EntityKind string `urlParam:"entityKind"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseCompact struct {
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		ID   string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuotaLineItem struct {
0000000000000000000000000000000000000000;;		Unit  string  `json:"unit"`
0000000000000000000000000000000000000000;;		Value float64 `json:"value"`
0000000000000000000000000000000000000000;;		Key   string  `json:"key"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for locality.
0000000000000000000000000000000000000000;;	type LocalitySpec struct {
0000000000000000000000000000000000000000;;		Kind string `json:"kind"`
0000000000000000000000000000000000000000;;		ID   string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for disks.
0000000000000000000000000000000000000000;;	type DiskCreateSpec struct {
0000000000000000000000000000000000000000;;		Flavor     string         `json:"flavor"`
0000000000000000000000000000000000000000;;		Kind       string         `json:"kind"`
0000000000000000000000000000000000000000;;		CapacityGB int            `json:"capacityGb"`
0000000000000000000000000000000000000000;;		Affinities []LocalitySpec `json:"affinities,omitempty"`
0000000000000000000000000000000000000000;;		Name       string         `json:"name"`
0000000000000000000000000000000000000000;;		Tags       []string       `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a persistent disk.
0000000000000000000000000000000000000000;;	type PersistentDisk struct {
0000000000000000000000000000000000000000;;		Flavor     string          `json:"flavor"`
0000000000000000000000000000000000000000;;		Cost       []QuotaLineItem `json:"cost"`
0000000000000000000000000000000000000000;;		Kind       string          `json:"kind"`
0000000000000000000000000000000000000000;;		Datastore  string          `json:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		CapacityGB int             `json:"capacityGb,omitempty"`
0000000000000000000000000000000000000000;;		Name       string          `json:"name"`
0000000000000000000000000000000000000000;;		State      string          `json:"state"`
0000000000000000000000000000000000000000;;		ID         string          `json:"id"`
0000000000000000000000000000000000000000;;		VMs        []string        `json:"vms"`
0000000000000000000000000000000000000000;;		Tags       []string        `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		SelfLink   string          `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple persistent disks returned by the API.
0000000000000000000000000000000000000000;;	type DiskList struct {
0000000000000000000000000000000000000000;;		Items []PersistentDisk `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for projects.
0000000000000000000000000000000000000000;;	type ProjectCreateSpec struct {
0000000000000000000000000000000000000000;;		ResourceTicket ResourceTicketReservation `json:"resourceTicket"`
0000000000000000000000000000000000000000;;		Name           string                    `json:"name"`
0000000000000000000000000000000000000000;;		SecurityGroups []string                  `json:"securityGroups,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple projects returned by the API.
0000000000000000000000000000000000000000;;	type ProjectList struct {
0000000000000000000000000000000000000000;;		Items []ProjectCompact `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compact representation of projects.
0000000000000000000000000000000000000000;;	type ProjectCompact struct {
0000000000000000000000000000000000000000;;		Kind           string          `json:"kind"`
0000000000000000000000000000000000000000;;		ResourceTicket ProjectTicket   `json:"resourceTicket"`
0000000000000000000000000000000000000000;;		Name           string          `json:"name"`
0000000000000000000000000000000000000000;;		ID             string          `json:"id"`
0000000000000000000000000000000000000000;;		Tags           []string        `json:"tags"`
0000000000000000000000000000000000000000;;		SelfLink       string          `json:"selfLink"`
0000000000000000000000000000000000000000;;		SecurityGroups []SecurityGroup `json:"securityGroups"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectTicket struct {
0000000000000000000000000000000000000000;;		TenantTicketID   string          `json:"tenantTicketId"`
0000000000000000000000000000000000000000;;		Usage            []QuotaLineItem `json:"usage"`
0000000000000000000000000000000000000000;;		TenantTicketName string          `json:"tenantTicketName"`
0000000000000000000000000000000000000000;;		Limits           []QuotaLineItem `json:"limits"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an image.
0000000000000000000000000000000000000000;;	type Image struct {
0000000000000000000000000000000000000000;;		Size                int64          `json:"size"`
0000000000000000000000000000000000000000;;		Kind                string         `json:"kind"`
0000000000000000000000000000000000000000;;		Name                string         `json:"name"`
0000000000000000000000000000000000000000;;		State               string         `json:"state"`
0000000000000000000000000000000000000000;;		ID                  string         `json:"id"`
0000000000000000000000000000000000000000;;		Tags                []string       `json:"tags"`
0000000000000000000000000000000000000000;;		SelfLink            string         `json:"selfLink"`
0000000000000000000000000000000000000000;;		Settings            []ImageSetting `json:"settings"`
0000000000000000000000000000000000000000;;		ReplicationType     string         `json:"replicationType"`
0000000000000000000000000000000000000000;;		ReplicationProgress string         `json:"replicationProgress"`
0000000000000000000000000000000000000000;;		SeedingProgress     string         `json:"seedingProgress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an image setting
0000000000000000000000000000000000000000;;	type ImageSetting struct {
0000000000000000000000000000000000000000;;		Name         string `json:"name"`
0000000000000000000000000000000000000000;;		DefaultValue string `json:"defaultValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for images.
0000000000000000000000000000000000000000;;	type ImageCreateOptions struct {
0000000000000000000000000000000000000000;;		ReplicationType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple images returned by the API.
0000000000000000000000000000000000000000;;	type Images struct {
0000000000000000000000000000000000000000;;		Items []Image `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a component with status.
0000000000000000000000000000000000000000;;	type Component struct {
0000000000000000000000000000000000000000;;		Component string
0000000000000000000000000000000000000000;;		Message   string
0000000000000000000000000000000000000000;;		Status    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents status of the photon system.
0000000000000000000000000000000000000000;;	type Status struct {
0000000000000000000000000000000000000000;;		Status     string
0000000000000000000000000000000000000000;;		Components []Component
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a single tenant.
0000000000000000000000000000000000000000;;	type Tenant struct {
0000000000000000000000000000000000000000;;		Projects        []BaseCompact   `json:"projects"`
0000000000000000000000000000000000000000;;		ResourceTickets []BaseCompact   `json:"resourceTickets"`
0000000000000000000000000000000000000000;;		Kind            string          `json:"kind"`
0000000000000000000000000000000000000000;;		Name            string          `json:"name"`
0000000000000000000000000000000000000000;;		ID              string          `json:"id"`
0000000000000000000000000000000000000000;;		SelfLink        string          `json:"selfLink"`
0000000000000000000000000000000000000000;;		Tags            []string        `json:"tags"`
0000000000000000000000000000000000000000;;		SecurityGroups  []SecurityGroup `json:"securityGroups"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple tenants returned by the API.
0000000000000000000000000000000000000000;;	type Tenants struct {
0000000000000000000000000000000000000000;;		Items []Tenant `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for tenants.
0000000000000000000000000000000000000000;;	type TenantCreateSpec struct {
0000000000000000000000000000000000000000;;		Name           string   `json:"name"`
0000000000000000000000000000000000000000;;		SecurityGroups []string `json:"securityGroups,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for resource tickets.
0000000000000000000000000000000000000000;;	type ResourceTicketCreateSpec struct {
0000000000000000000000000000000000000000;;		Name   string          `json:"name"`
0000000000000000000000000000000000000000;;		Limits []QuotaLineItem `json:"limits"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a single resource ticket.
0000000000000000000000000000000000000000;;	type ResourceTicket struct {
0000000000000000000000000000000000000000;;		Kind     string          `json:"kind"`
0000000000000000000000000000000000000000;;		Usage    []QuotaLineItem `json:"usage"`
0000000000000000000000000000000000000000;;		TenantId string          `json:"tenantId"`
0000000000000000000000000000000000000000;;		Name     string          `json:"name"`
0000000000000000000000000000000000000000;;		ID       string          `json:"id"`
0000000000000000000000000000000000000000;;		Limits   []QuotaLineItem `json:"limits"`
0000000000000000000000000000000000000000;;		Tags     []string        `json:"tags"`
0000000000000000000000000000000000000000;;		SelfLink string          `json:"selfLink"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple resource tickets returned by the API.
0000000000000000000000000000000000000000;;	type ResourceList struct {
0000000000000000000000000000000000000000;;		Items []ResourceTicket `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a resource reservation on a resource ticket.
0000000000000000000000000000000000000000;;	type ResourceTicketReservation struct {
0000000000000000000000000000000000000000;;		Name   string          `json:"name"`
0000000000000000000000000000000000000000;;		Limits []QuotaLineItem `json:"limits"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for VMs.
0000000000000000000000000000000000000000;;	type VmCreateSpec struct {
0000000000000000000000000000000000000000;;		Flavor        string            `json:"flavor"`
0000000000000000000000000000000000000000;;		SourceImageID string            `json:"sourceImageId"`
0000000000000000000000000000000000000000;;		AttachedDisks []AttachedDisk    `json:"attachedDisks"`
0000000000000000000000000000000000000000;;		Affinities    []LocalitySpec    `json:"affinities,omitempty"`
0000000000000000000000000000000000000000;;		Name          string            `json:"name"`
0000000000000000000000000000000000000000;;		Tags          []string          `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Subnets       []string          `json:"subnets,omitempty"`
0000000000000000000000000000000000000000;;		Environment   map[string]string `json:"environment,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents possible operations for VMs. Valid values include:
0000000000000000000000000000000000000000;;	// START_VM, STOP_VM, RESTART_VM, SUSPEND_VM, RESUME_VM
0000000000000000000000000000000000000000;;	type VmOperation struct {
0000000000000000000000000000000000000000;;		Operation string                 `json:"operation"`
0000000000000000000000000000000000000000;;		Arguments map[string]interface{} `json:"arguments,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents metadata that can be set on a VM.
0000000000000000000000000000000000000000;;	type VmMetadata struct {
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents tags that can be set on a VM.
0000000000000000000000000000000000000000;;	type VmTag struct {
0000000000000000000000000000000000000000;;		Tag string `json:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a single attached disk.
0000000000000000000000000000000000000000;;	type AttachedDisk struct {
0000000000000000000000000000000000000000;;		Flavor     string `json:"flavor"`
0000000000000000000000000000000000000000;;		Kind       string `json:"kind"`
0000000000000000000000000000000000000000;;		CapacityGB int    `json:"capacityGb,omitempty"`
0000000000000000000000000000000000000000;;		Name       string `json:"name"`
0000000000000000000000000000000000000000;;		State      string `json:"state"`
0000000000000000000000000000000000000000;;		ID         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		BootDisk   bool   `json:"bootDisk"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a single VM.
0000000000000000000000000000000000000000;;	type VM struct {
0000000000000000000000000000000000000000;;		SourceImageID string            `json:"sourceImageId,omitempty"`
0000000000000000000000000000000000000000;;		Cost          []QuotaLineItem   `json:"cost"`
0000000000000000000000000000000000000000;;		Kind          string            `json:"kind"`
0000000000000000000000000000000000000000;;		AttachedDisks []AttachedDisk    `json:"attachedDisks"`
0000000000000000000000000000000000000000;;		Datastore     string            `json:"datastore,omitempty"`
0000000000000000000000000000000000000000;;		AttachedISOs  []ISO             `json:"attachedIsos,omitempty"`
0000000000000000000000000000000000000000;;		Tags          []string          `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Metadata      map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;		SelfLink      string            `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;		Flavor        string            `json:"flavor"`
0000000000000000000000000000000000000000;;		Host          string            `json:"host,omitempty"`
0000000000000000000000000000000000000000;;		Name          string            `json:"name"`
0000000000000000000000000000000000000000;;		State         string            `json:"state"`
0000000000000000000000000000000000000000;;		ID            string            `json:"id"`
0000000000000000000000000000000000000000;;		FloatingIp    string            `json:"floatingIp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple VMs returned by the API.
0000000000000000000000000000000000000000;;	type VMs struct {
0000000000000000000000000000000000000000;;		Items []VM `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents an ISO.
0000000000000000000000000000000000000000;;	type ISO struct {
0000000000000000000000000000000000000000;;		Size int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		ID   string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents operations for disks.
0000000000000000000000000000000000000000;;	type VmDiskOperation struct {
0000000000000000000000000000000000000000;;		DiskID    string                 `json:"diskId"`
0000000000000000000000000000000000000000;;		Arguments map[string]interface{} `json:"arguments,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a floating IP operation related to a VM.
0000000000000000000000000000000000000000;;	type VmFloatingIpSpec struct {
0000000000000000000000000000000000000000;;		NetworkId string `json:"networkId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for flavors.
0000000000000000000000000000000000000000;;	type FlavorCreateSpec struct {
0000000000000000000000000000000000000000;;		Cost []QuotaLineItem `json:"cost"`
0000000000000000000000000000000000000000;;		Kind string          `json:"kind"`
0000000000000000000000000000000000000000;;		Name string          `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a single flavor.
0000000000000000000000000000000000000000;;	type Flavor struct {
0000000000000000000000000000000000000000;;		Cost     []QuotaLineItem `json:"cost"`
0000000000000000000000000000000000000000;;		Kind     string          `json:"kind"`
0000000000000000000000000000000000000000;;		Name     string          `json:"name"`
0000000000000000000000000000000000000000;;		ID       string          `json:"id"`
0000000000000000000000000000000000000000;;		Tags     []string        `json:"tags"`
0000000000000000000000000000000000000000;;		SelfLink string          `json:"selfLink"`
0000000000000000000000000000000000000000;;		State    string          `json:"state"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple flavors returned by the API.
0000000000000000000000000000000000000000;;	type FlavorList struct {
0000000000000000000000000000000000000000;;		Items []Flavor `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for hosts.
0000000000000000000000000000000000000000;;	type HostCreateSpec struct {
0000000000000000000000000000000000000000;;		Username         string            `json:"username"`
0000000000000000000000000000000000000000;;		Password         string            `json:"password"`
0000000000000000000000000000000000000000;;		AvailabilityZone string            `json:"availabilityZone,omitempty"`
0000000000000000000000000000000000000000;;		Metadata         map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;		Address          string            `json:"address"`
0000000000000000000000000000000000000000;;		Tags             []string          `json:"usageTags"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a host
0000000000000000000000000000000000000000;;	type Host struct {
0000000000000000000000000000000000000000;;		Username         string            `json:"username"`
0000000000000000000000000000000000000000;;		Password         string            `json:"password"`
0000000000000000000000000000000000000000;;		Address          string            `json:"address"`
0000000000000000000000000000000000000000;;		Kind             string            `json:"kind"`
0000000000000000000000000000000000000000;;		ID               string            `json:"id"`
0000000000000000000000000000000000000000;;		AvailabilityZone string            `json:"availabilityZone,omitempty"`
0000000000000000000000000000000000000000;;		Tags             []string          `json:"usageTags"`
0000000000000000000000000000000000000000;;		Metadata         map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;		SelfLink         string            `json:"selfLink"`
0000000000000000000000000000000000000000;;		State            string            `json:"state"`
0000000000000000000000000000000000000000;;		EsxVersion       string            `json:"esxVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple hosts returned by the API.
0000000000000000000000000000000000000000;;	type Hosts struct {
0000000000000000000000000000000000000000;;		Items []Host `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for deployments.
0000000000000000000000000000000000000000;;	type DeploymentCreateSpec struct {
0000000000000000000000000000000000000000;;		NTPEndpoint             interface{}                     `json:"ntpEndpoint"`
0000000000000000000000000000000000000000;;		UseImageDatastoreForVms bool                            `json:"useImageDatastoreForVms"`
0000000000000000000000000000000000000000;;		SyslogEndpoint          interface{}                     `json:"syslogEndpoint"`
0000000000000000000000000000000000000000;;		Stats                   *StatsInfo                      `json:"stats"`
0000000000000000000000000000000000000000;;		ImageDatastores         []string                        `json:"imageDatastores"`
0000000000000000000000000000000000000000;;		Auth                    *AuthInfo                       `json:"auth"`
0000000000000000000000000000000000000000;;		NetworkConfiguration    *NetworkConfigurationCreateSpec `json:"networkConfiguration"`
0000000000000000000000000000000000000000;;		LoadBalancerEnabled     bool                            `json:"loadBalancerEnabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deployment deploy config.
0000000000000000000000000000000000000000;;	type DeploymentDeployOperation struct {
0000000000000000000000000000000000000000;;		DesiredState string `json:"desiredState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrationStatus struct {
0000000000000000000000000000000000000000;;		CompletedDataMigrationCycles int `json:"completedDataMigrationCycles"`
0000000000000000000000000000000000000000;;		DataMigrationCycleProgress   int `json:"dataMigrationCycleProgress"`
0000000000000000000000000000000000000000;;		DataMigrationCycleSize       int `json:"dataMigrationCycleSize"`
0000000000000000000000000000000000000000;;		VibsUploaded                 int `json:"vibsUploaded"`
0000000000000000000000000000000000000000;;		VibsUploading                int `json:"vibsUploading"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a deployment
0000000000000000000000000000000000000000;;	type Deployment struct {
0000000000000000000000000000000000000000;;		NTPEndpoint             string                 `json:"ntpEndpoint,omitempty"`
0000000000000000000000000000000000000000;;		UseImageDatastoreForVms bool                   `json:"useImageDatastoreForVms,omitempty"`
0000000000000000000000000000000000000000;;		Auth                    *AuthInfo              `json:"auth"`
0000000000000000000000000000000000000000;;		NetworkConfiguration    *NetworkConfiguration  `json:"networkConfiguration"`
0000000000000000000000000000000000000000;;		Kind                    string                 `json:"kind"`
0000000000000000000000000000000000000000;;		SyslogEndpoint          string                 `json:"syslogEndpoint,omitempty"`
0000000000000000000000000000000000000000;;		Stats                   *StatsInfo             `json:"stats,omitempty"`
0000000000000000000000000000000000000000;;		State                   string                 `json:"state"`
0000000000000000000000000000000000000000;;		ID                      string                 `json:"id"`
0000000000000000000000000000000000000000;;		ImageDatastores         []string               `json:"imageDatastores"`
0000000000000000000000000000000000000000;;		SelfLink                string                 `json:"selfLink"`
0000000000000000000000000000000000000000;;		Migration               *MigrationStatus       `json:"migrationStatus,omitempty"`
0000000000000000000000000000000000000000;;		ServiceConfigurations   []ServiceConfiguration `json:"serviceConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancerEnabled     bool                   `json:"loadBalancerEnabled"`
0000000000000000000000000000000000000000;;		LoadBalancerAddress     string                 `json:"loadBalancerAddress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple deployments returned by the API.
0000000000000000000000000000000000000000;;	type Deployments struct {
0000000000000000000000000000000000000000;;		Items []Deployment `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents source load balacer address to migrate deployment
0000000000000000000000000000000000000000;;	type InitializeMigrationOperation struct {
0000000000000000000000000000000000000000;;		SourceNodeGroupReference string `json:"sourceNodeGroupReference"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents source load balacer address to finish migration of deployment
0000000000000000000000000000000000000000;;	type FinalizeMigrationOperation struct {
0000000000000000000000000000000000000000;;		SourceNodeGroupReference string `json:"sourceNodeGroupReference"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents stats information
0000000000000000000000000000000000000000;;	type StatsInfo struct {
0000000000000000000000000000000000000000;;		Enabled       bool   `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		StoreEndpoint string `json:"storeEndpoint,omitempty"`
0000000000000000000000000000000000000000;;		StorePort     int    `json:"storePort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents authentication information
0000000000000000000000000000000000000000;;	type AuthInfo struct {
0000000000000000000000000000000000000000;;		Password       string   `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Endpoint       string   `json:"endpoint,omitempty"`
0000000000000000000000000000000000000000;;		Tenant         string   `json:"tenant,omitempty"`
0000000000000000000000000000000000000000;;		Port           int      `json:"port,omitempty"`
0000000000000000000000000000000000000000;;		SecurityGroups []string `json:"securityGroups,omitempty"`
0000000000000000000000000000000000000000;;		Username       string   `json:"username,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents ip range
0000000000000000000000000000000000000000;;	type IpRange struct {
0000000000000000000000000000000000000000;;		Start string `json:"start,omitempty"`
0000000000000000000000000000000000000000;;		End   string `json:"end,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents creation spec for network configuration.
0000000000000000000000000000000000000000;;	type NetworkConfigurationCreateSpec struct {
0000000000000000000000000000000000000000;;		Enabled         bool     `json:"sdnEnabled,omitempty"`
0000000000000000000000000000000000000000;;		Address         string   `json:"networkManagerAddress,omitempty"`
0000000000000000000000000000000000000000;;		Username        string   `json:"networkManagerUsername,omitempty"`
0000000000000000000000000000000000000000;;		Password        string   `json:"networkManagerPassword,omitempty"`
0000000000000000000000000000000000000000;;		NetworkZoneId   string   `json:"networkZoneId,omitempty"`
0000000000000000000000000000000000000000;;		TopRouterId     string   `json:"networkTopRouterId,omitempty"`
0000000000000000000000000000000000000000;;		EdgeIpPoolId    string   `json:"networkEdgeIpPoolId,omitempty"`
0000000000000000000000000000000000000000;;		HostUplinkPnic  string   `json:"networkHostUplinkPnic,omitempty"`
0000000000000000000000000000000000000000;;		IpRange         string   `json:"ipRange,omitempty"`
0000000000000000000000000000000000000000;;		ExternalIpRange *IpRange `json:"externalIpRange,omitempty"`
0000000000000000000000000000000000000000;;		DhcpServers     []string `json:"dhcpServers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents network configuration.
0000000000000000000000000000000000000000;;	type NetworkConfiguration struct {
0000000000000000000000000000000000000000;;		Enabled         bool     `json:"sdnEnabled,omitempty"`
0000000000000000000000000000000000000000;;		Address         string   `json:"networkManagerAddress,omitempty"`
0000000000000000000000000000000000000000;;		Username        string   `json:"networkManagerUsername,omitempty"`
0000000000000000000000000000000000000000;;		Password        string   `json:"networkManagerPassword,omitempty"`
0000000000000000000000000000000000000000;;		NetworkZoneId   string   `json:"networkZoneId,omitempty"`
0000000000000000000000000000000000000000;;		TopRouterId     string   `json:"networkTopRouterId,omitempty"`
0000000000000000000000000000000000000000;;		EdgeIpPoolId    string   `json:"networkEdgeIpPoolId,omitempty"`
0000000000000000000000000000000000000000;;		HostUplinkPnic  string   `json:"networkHostUplinkPnic,omitempty"`
0000000000000000000000000000000000000000;;		IpRange         string   `json:"ipRange,omitempty"`
0000000000000000000000000000000000000000;;		FloatingIpRange *IpRange `json:"floatingIpRange,omitempty"`
0000000000000000000000000000000000000000;;		SnatIp          string   `json:"snatIp,omitempty"`
0000000000000000000000000000000000000000;;		DhcpServers     []string `json:"dhcpServers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for networks.
0000000000000000000000000000000000000000;;	type NetworkCreateSpec struct {
0000000000000000000000000000000000000000;;		Name        string   `json:"name"`
0000000000000000000000000000000000000000;;		Description string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		PortGroups  []string `json:"portGroups"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a subnet
0000000000000000000000000000000000000000;;	type Network struct {
0000000000000000000000000000000000000000;;		Kind        string   `json:"kind"`
0000000000000000000000000000000000000000;;		Name        string   `json:"name"`
0000000000000000000000000000000000000000;;		Description string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		State       string   `json:"state"`
0000000000000000000000000000000000000000;;		ID          string   `json:"id"`
0000000000000000000000000000000000000000;;		PortGroups  []string `json:"portGroups"`
0000000000000000000000000000000000000000;;		Tags        []string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		SelfLink    string   `json:"selfLink"`
0000000000000000000000000000000000000000;;		IsDefault   bool     `json:"isDefault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple subnets returned by the API
0000000000000000000000000000000000000000;;	type Networks struct {
0000000000000000000000000000000000000000;;		Items []Network `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create spec for virtual subnet
0000000000000000000000000000000000000000;;	type VirtualSubnetCreateSpec struct {
0000000000000000000000000000000000000000;;		Name                 string `json:"name"`
0000000000000000000000000000000000000000;;		Description          string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		RoutingType          string `json:"routingType"`
0000000000000000000000000000000000000000;;		Size                 int    `json:"size"`
0000000000000000000000000000000000000000;;		ReservedStaticIpSize int    `json:"reservedStaticIpSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a virtual network
0000000000000000000000000000000000000000;;	type VirtualSubnet struct {
0000000000000000000000000000000000000000;;		ID             string   `json:"id"`
0000000000000000000000000000000000000000;;		Name           string   `json:"name"`
0000000000000000000000000000000000000000;;		Description    string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		State          string   `json:"state"`
0000000000000000000000000000000000000000;;		RoutingType    string   `json:"routingType"`
0000000000000000000000000000000000000000;;		IsDefault      bool     `json:"isDefault"`
0000000000000000000000000000000000000000;;		Cidr           string   `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		LowIpDynamic   string   `json:"lowIpDynamic,omitempty"`
0000000000000000000000000000000000000000;;		HighIpDynamic  string   `json:"highIpDynamic,omitempty"`
0000000000000000000000000000000000000000;;		LowIpStatic    string   `json:"lowIpStatic,omitempty"`
0000000000000000000000000000000000000000;;		HighIpStatic   string   `json:"highIpStatic,omitempty"`
0000000000000000000000000000000000000000;;		ReservedIpList []string `json:"reservedIpList"`
0000000000000000000000000000000000000000;;		SelfLink       string   `json:"selfLink"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple virtual subnets returned
0000000000000000000000000000000000000000;;	type VirtualSubnets struct {
0000000000000000000000000000000000000000;;		Items []VirtualSubnet `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a router
0000000000000000000000000000000000000000;;	type Router struct {
0000000000000000000000000000000000000000;;		ID            string `json:"id"`
0000000000000000000000000000000000000000;;		Kind          string `json:"kind"`
0000000000000000000000000000000000000000;;		Name          string `json:"name"`
0000000000000000000000000000000000000000;;		PrivateIpCidr string `json:"privateIpCidr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple routers returned by the API.
0000000000000000000000000000000000000000;;	type Routers struct {
0000000000000000000000000000000000000000;;		Items []Router `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RouterCreateSpec struct {
0000000000000000000000000000000000000000;;		Name          string `json:"name"`
0000000000000000000000000000000000000000;;		PrivateIpCidr string `json:"privateIpCidr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents name that can be set for router
0000000000000000000000000000000000000000;;	type RouterUpdateSpec struct {
0000000000000000000000000000000000000000;;		RouterName string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for Service Configuration.
0000000000000000000000000000000000000000;;	type ServiceConfigurationSpec struct {
0000000000000000000000000000000000000000;;		Type    string `json:"type"`
0000000000000000000000000000000000000000;;		ImageID string `json:"imageId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represnts a Service configuration.
0000000000000000000000000000000000000000;;	type ServiceConfiguration struct {
0000000000000000000000000000000000000000;;		Kind    string `json:"kind"`
0000000000000000000000000000000000000000;;		Type    string `json:"type"`
0000000000000000000000000000000000000000;;		ImageID string `json:"imageId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for services.
0000000000000000000000000000000000000000;;	type ServiceCreateSpec struct {
0000000000000000000000000000000000000000;;		Name               string            `json:"name"`
0000000000000000000000000000000000000000;;		Type               string            `json:"type"`
0000000000000000000000000000000000000000;;		VMFlavor           string            `json:"vmFlavor,omitempty"`
0000000000000000000000000000000000000000;;		MasterVmFlavor     string            `json:"masterVmFlavor,omitempty"`
0000000000000000000000000000000000000000;;		WorkerVmFlavor     string            `json:"workerVmFlavor,omitempty"`
0000000000000000000000000000000000000000;;		DiskFlavor         string            `json:"diskFlavor,omitempty"`
0000000000000000000000000000000000000000;;		NetworkID          string            `json:"vmNetworkId,omitempty"`
0000000000000000000000000000000000000000;;		ImageID            string            `json:"imageId,omitempty"`
0000000000000000000000000000000000000000;;		WorkerCount        int               `json:"workerCount"`
0000000000000000000000000000000000000000;;		BatchSizeWorker    int               `json:"workerBatchExpansionSize,omitempty"`
0000000000000000000000000000000000000000;;		ExtendedProperties map[string]string `json:"extendedProperties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a service
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		Kind               string            `json:"kind"`
0000000000000000000000000000000000000000;;		Name               string            `json:"name"`
0000000000000000000000000000000000000000;;		State              string            `json:"state"`
0000000000000000000000000000000000000000;;		ID                 string            `json:"id"`
0000000000000000000000000000000000000000;;		Type               string            `json:"type"`
0000000000000000000000000000000000000000;;		ProjectID          string            `json:"projectID,omitempty"`
0000000000000000000000000000000000000000;;		WorkerCount        int               `json:"workerCount"`
0000000000000000000000000000000000000000;;		SelfLink           string            `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;		ErrorReason        string            `json:"errorReason,omitempty"`
0000000000000000000000000000000000000000;;		ExtendedProperties map[string]string `json:"extendedProperties"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple services returned by the API
0000000000000000000000000000000000000000;;	type Services struct {
0000000000000000000000000000000000000000;;		Items []Service `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents service size that can be resized for service
0000000000000000000000000000000000000000;;	type ServiceResizeOperation struct {
0000000000000000000000000000000000000000;;		NewWorkerCount int `json:"newWorkerCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents service imageId that can be updated during change version
0000000000000000000000000000000000000000;;	type ServiceChangeVersionOperation struct {
0000000000000000000000000000000000000000;;		NewImageID string `json:"newImageId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a security group
0000000000000000000000000000000000000000;;	type SecurityGroup struct {
0000000000000000000000000000000000000000;;		Name      string `json:"name"`
0000000000000000000000000000000000000000;;		Inherited bool   `json:"inherited"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents set_security_groups spec
0000000000000000000000000000000000000000;;	type SecurityGroupsSpec struct {
0000000000000000000000000000000000000000;;		Items []string `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents single availability zone.
0000000000000000000000000000000000000000;;	type AvailabilityZone struct {
0000000000000000000000000000000000000000;;		Kind     string `json:"kind"`
0000000000000000000000000000000000000000;;		Name     string `json:"name"`
0000000000000000000000000000000000000000;;		State    string `json:"state"`
0000000000000000000000000000000000000000;;		ID       string `json:"id"`
0000000000000000000000000000000000000000;;		SelfLink string `json:"selfLink"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple availability zones returned by the API.
0000000000000000000000000000000000000000;;	type AvailabilityZones struct {
0000000000000000000000000000000000000000;;		Items []AvailabilityZone `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for availability zones.
0000000000000000000000000000000000000000;;	type AvailabilityZoneCreateSpec struct {
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents availability zone that can be set for host
0000000000000000000000000000000000000000;;	type HostSetAvailabilityZoneOperation struct {
0000000000000000000000000000000000000000;;		AvailabilityZoneId string `json:"availabilityZoneId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents the list of image datastores.
0000000000000000000000000000000000000000;;	type ImageDatastores struct {
0000000000000000000000000000000000000000;;		Items []string `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Image creation spec.
0000000000000000000000000000000000000000;;	type ImageCreateSpec struct {
0000000000000000000000000000000000000000;;		Name            string `json:"name"`
0000000000000000000000000000000000000000;;		ReplicationType string `json:"replicationType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents deployment info
0000000000000000000000000000000000000000;;	type Info struct {
0000000000000000000000000000000000000000;;		BaseVersion   string `json:"baseVersion"`
0000000000000000000000000000000000000000;;		FullVersion   string `json:"fullVersion"`
0000000000000000000000000000000000000000;;		GitCommitHash string `json:"gitCommitHash"`
0000000000000000000000000000000000000000;;		NetworkType   string `json:"networkType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NSX configuration spec
0000000000000000000000000000000000000000;;	type NsxConfigurationSpec struct {
0000000000000000000000000000000000000000;;		NsxAddress             string            `json:"nsxAddress"`
0000000000000000000000000000000000000000;;		NsxUsername            string            `json:"nsxUsername"`
0000000000000000000000000000000000000000;;		NsxPassword            string            `json:"nsxPassword"`
0000000000000000000000000000000000000000;;		DhcpServerAddresses    map[string]string `json:"dhcpServerAddresses"`
0000000000000000000000000000000000000000;;		PrivateIpRootCidr      string            `json:"privateIpRootCidr"`
0000000000000000000000000000000000000000;;		FloatingIpRootRange    IpRange           `json:"floatingIpRootRange"`
0000000000000000000000000000000000000000;;		T0RouterId             string            `json:"t0RouterId"`
0000000000000000000000000000000000000000;;		EdgeClusterId          string            `json:"edgeClusterId"`
0000000000000000000000000000000000000000;;		OverlayTransportZoneId string            `json:"overlayTransportZoneId"`
0000000000000000000000000000000000000000;;		TunnelIpPoolId         string            `json:"tunnelIpPoolId"`
0000000000000000000000000000000000000000;;		HostUplinkPnic         string            `json:"hostUplinkPnic"`
0000000000000000000000000000000000000000;;		HostUplinkVlanId       int               `json:"hostUplinkVlanId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents a subnet
0000000000000000000000000000000000000000;;	type Subnet struct {
0000000000000000000000000000000000000000;;		ID            string            `json:"id"`
0000000000000000000000000000000000000000;;		Kind          string            `json:"kind"`
0000000000000000000000000000000000000000;;		Name          string            `json:"name"`
0000000000000000000000000000000000000000;;		Description   string            `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIpCidr string            `json:"privateIpCidr"`
0000000000000000000000000000000000000000;;		ReservedIps   map[string]string `json:"reservedIps"`
0000000000000000000000000000000000000000;;		State         string            `json:"state"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents multiple subnets returned by the API.
0000000000000000000000000000000000000000;;	type Subnets struct {
0000000000000000000000000000000000000000;;		Items []Subnet `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creation spec for subnets.
0000000000000000000000000000000000000000;;	type SubnetCreateSpec struct {
0000000000000000000000000000000000000000;;		Name          string `json:"name"`
0000000000000000000000000000000000000000;;		Description   string `json:"description"`
0000000000000000000000000000000000000000;;		PrivateIpCidr string `json:"privateIpCidr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Represents name that can be set for subnet
0000000000000000000000000000000000000000;;	type SubnetUpdateSpec struct {
0000000000000000000000000000000000000000;;		SubnetName string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Identity and Access Management (IAM)
0000000000000000000000000000000000000000;;	// IAM Policy entry
0000000000000000000000000000000000000000;;	type PolicyEntry struct {
0000000000000000000000000000000000000000;;		Principal string   `json:"principal"`
0000000000000000000000000000000000000000;;		Roles     []string `json:"roles"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PolicyDelta struct {
0000000000000000000000000000000000000000;;		Principal string `json:"principal"`
0000000000000000000000000000000000000000;;		Action    string `json:"action"`
0000000000000000000000000000000000000000;;		Role      string `json:"role"`
0000000000000000000000000000000000000000;;	}
