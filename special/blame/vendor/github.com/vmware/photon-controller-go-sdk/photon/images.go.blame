0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for images API.
0000000000000000000000000000000000000000;;	type ImagesAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options for GetImage API.
0000000000000000000000000000000000000000;;	type ImageGetOptions struct {
0000000000000000000000000000000000000000;;		Name string `urlParam:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var imageUrl string = rootUrl + "/images"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uploads a new image, reading from the specified image path.
0000000000000000000000000000000000000000;;	// If options is nil, default options are used.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) CreateFromFile(imagePath string, options *ImageCreateOptions) (task *Task, err error) {
0000000000000000000000000000000000000000;;		params := imageCreateOptionsToMap(options)
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.MultipartUploadFile(api.client.Endpoint+imageUrl, imagePath, params, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		result, err := getTask(getError(res))
0000000000000000000000000000000000000000;;		return result, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uploads a new image, reading from the specified io.Reader.
0000000000000000000000000000000000000000;;	// Name is a descriptive name of the image, it is used in the filename field of the Content-Disposition header,
0000000000000000000000000000000000000000;;	// and does not need to be unique.
0000000000000000000000000000000000000000;;	// If options is nil, default options are used.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) Create(reader io.ReadSeeker, name string, options *ImageCreateOptions) (task *Task, err error) {
0000000000000000000000000000000000000000;;		params := imageCreateOptionsToMap(options)
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.MultipartUpload(api.client.Endpoint+imageUrl, reader, name, params, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		result, err := getTask(getError(res))
0000000000000000000000000000000000000000;;		return result, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all images on this photon instance.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) GetAll(options *ImageGetOptions) (images *Images, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + imageUrl
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		images = &Images{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, images)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets details of image with the specified ID.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) Get(imageID string) (image *Image, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.client.Endpoint+imageUrl+"/"+imageID, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var result Image
0000000000000000000000000000000000000000;;		err = json.NewDecoder(res.Body).Decode(&result)
0000000000000000000000000000000000000000;;		return &result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes image with the specified ID.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) Delete(imageID string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Delete(api.client.Endpoint+imageUrl+"/"+imageID, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		result, err := getTask(getError(res))
0000000000000000000000000000000000000000;;		return result, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all tasks with the specified image ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) GetTasks(id string, options *TaskGetOptions) (result *TaskList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + imageUrl + "/" + id + "/tasks"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &TaskList{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets IAM Policy of an image.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) GetIam(imageID string) (policy *[]PolicyEntry, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(
0000000000000000000000000000000000000000;;			api.client.Endpoint+imageUrl+"/"+imageID+"/iam",
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var result []PolicyEntry
0000000000000000000000000000000000000000;;		err = json.NewDecoder(res.Body).Decode(&result)
0000000000000000000000000000000000000000;;		return &result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sets IAM Policy on an image.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) SetIam(imageID string, policy *[]PolicyEntry) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(policy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+imageUrl+"/"+imageID+"/iam",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Modifies IAM Policy on an image.
0000000000000000000000000000000000000000;;	func (api *ImagesAPI) ModifyIam(imageID string, policyDelta *PolicyDelta) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(policyDelta)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Put(
0000000000000000000000000000000000000000;;			api.client.Endpoint+imageUrl+"/"+imageID+"/iam",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func imageCreateOptionsToMap(opts *ImageCreateOptions) map[string]string {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return map[string]string{
0000000000000000000000000000000000000000;;			"ImageReplication": opts.ReplicationType,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
