0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for tenants API.
0000000000000000000000000000000000000000;;	type TenantsAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options for GetResourceTickets API.
0000000000000000000000000000000000000000;;	type ResourceTicketGetOptions struct {
0000000000000000000000000000000000000000;;		Name string `urlParam:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options for GetProjects API.
0000000000000000000000000000000000000000;;	type ProjectGetOptions struct {
0000000000000000000000000000000000000000;;		Name string `urlParam:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tenantUrl string = rootUrl + "/tenants"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns all tenants on an photon instance.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) GetAll() (result *Tenants, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + tenantUrl
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &Tenants{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a tenant.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) Create(tenantSpec *TenantCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(tenantSpec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+tenantUrl,
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes the tenant with specified ID. Any projects, VMs, disks, etc., owned by the tenant must be deleted first.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) Delete(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Delete(api.client.Endpoint+tenantUrl+"/"+id, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a resource ticket on the specified tenant.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) CreateResourceTicket(tenantId string, spec *ResourceTicketCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+tenantUrl+"/"+tenantId+"/resource-tickets",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets resource tickets for tenant with the specified ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) GetResourceTickets(tenantId string, options *ResourceTicketGetOptions) (tickets *ResourceList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + tenantUrl + "/" + tenantId + "/resource-tickets"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tickets = &ResourceList{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, tickets)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a project on the specified tenant.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) CreateProject(tenantId string, spec *ProjectCreateSpec) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+tenantUrl+"/"+tenantId+"/projects",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets the projects for tenant with the specified ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) GetProjects(tenantId string, options *ProjectGetOptions) (result *ProjectList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + tenantUrl + "/" + tenantId + "/projects"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &(ProjectList{})
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all tasks with the specified tenant ID, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) GetTasks(id string, options *TaskGetOptions) (result *TaskList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + tenantUrl + "/" + id + "/tasks"
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &TaskList{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a tenant with the specified ID or name
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) Get(identity string) (tenant *Tenant, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.getEntityUrl(identity), api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		tenant = &Tenant{}
0000000000000000000000000000000000000000;;		if res != nil {
0000000000000000000000000000000000000000;;			err = json.NewDecoder(res.Body).Decode(tenant)
0000000000000000000000000000000000000000;;			// ID corresponds to the tenant ID found, return tenant
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Find by Name
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + tenantUrl + "?name=" + identity
0000000000000000000000000000000000000000;;		res2, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tenants := &Tenants{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res2, tenants)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(tenants.Items) < 1 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Cannot find a tenant with id or name match %s", identity)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tenant = &(tenants.Items[0])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set security groups for this tenant, overwriting any existing ones.
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) SetSecurityGroups(id string, securityGroups *SecurityGroupsSpec) (*Task, error) {
0000000000000000000000000000000000000000;;		return setSecurityGroups(api.client, api.getEntityUrl(id), securityGroups)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (api *TenantsAPI) getEntityUrl(id string) (url string) {
0000000000000000000000000000000000000000;;		return api.client.Endpoint + tenantUrl + "/" + id
0000000000000000000000000000000000000000;;	}
