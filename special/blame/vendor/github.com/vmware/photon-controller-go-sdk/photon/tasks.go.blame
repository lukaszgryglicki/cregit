0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;;	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for tasks API.
0000000000000000000000000000000000000000;;	type TasksAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var taskUrl string = rootUrl + "/tasks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a task by ID.
0000000000000000000000000000000000000000;;	func (api *TasksAPI) Get(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.client.Endpoint+taskUrl+"/"+id, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		result, err := getTask(getError(res))
0000000000000000000000000000000000000000;;		return result, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all tasks, using options to filter the results.
0000000000000000000000000000000000000000;;	// If options is nil, no filtering will occur.
0000000000000000000000000000000000000000;;	func (api *TasksAPI) GetAll(options *TaskGetOptions) (result *TaskList, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + taskUrl
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			uri += getQueryString(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &TaskList{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Waits for a task to complete by polling the tasks API until a task returns with
0000000000000000000000000000000000000000;;	// the state COMPLETED or ERROR. Will wait no longer than the duration specified by timeout.
0000000000000000000000000000000000000000;;	func (api *TasksAPI) WaitTimeout(id string, timeout time.Duration) (task *Task, err error) {
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		numErrors := 0
0000000000000000000000000000000000000000;;		maxErrors := api.client.options.TaskRetryCount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for time.Since(start) < timeout {
0000000000000000000000000000000000000000;;			task, err = api.Get(id)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				switch err.(type) {
0000000000000000000000000000000000000000;;				// If an ApiError comes back, something is wrong, return the error to the caller
0000000000000000000000000000000000000000;;				case ApiError:
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				// For other errors, retry before giving up
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					numErrors++
0000000000000000000000000000000000000000;;					if numErrors > maxErrors {
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Reset the error count any time a successful call is made
0000000000000000000000000000000000000000;;				numErrors = 0
0000000000000000000000000000000000000000;;				if task.State == "COMPLETED" {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if task.State == "ERROR" {
0000000000000000000000000000000000000000;;					err = TaskError{task.ID, getFailedStep(task)}
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(api.client.options.TaskPollDelay)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = TaskTimeoutError{id}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Waits for a task to complete by polling the tasks API until a task returns with
0000000000000000000000000000000000000000;;	// the state COMPLETED or ERROR.
0000000000000000000000000000000000000000;;	func (api *TasksAPI) Wait(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		return api.WaitTimeout(id, api.client.options.TaskPollTimeout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets the failed step in the task to get error details for failed task.
0000000000000000000000000000000000000000;;	func getFailedStep(task *Task) (step Step) {
0000000000000000000000000000000000000000;;		var errorStep Step
0000000000000000000000000000000000000000;;		for _, s := range task.Steps {
0000000000000000000000000000000000000000;;			if s.State == "ERROR" {
0000000000000000000000000000000000000000;;				errorStep = s
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return errorStep
0000000000000000000000000000000000000000;;	}
