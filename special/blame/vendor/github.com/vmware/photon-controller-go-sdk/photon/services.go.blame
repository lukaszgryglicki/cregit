0000000000000000000000000000000000000000;;	// Copyright (c) 2016 VMware, Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product is licensed to you under the Apache License, Version 2.0 (the "License").
0000000000000000000000000000000000000000;;	// You may not use this product except in compliance with the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This product may include a number of subcomponents with separate copyright notices and
0000000000000000000000000000000000000000;;	// license terms. Your use of these subcomponents is subject to the terms and conditions
0000000000000000000000000000000000000000;;	// of the subcomponent's license, as noted in the LICENSE file.
0397bbe9e5e919442706b4face2f9b10553493d7;vendor/github.com/vmware/photon-controller-go-sdk/photon/clusters.go[vendor/github.com/vmware/photon-controller-go-sdk/photon/clusters.go][vendor/github.com/vmware/photon-controller-go-sdk/photon/services.go];	
0000000000000000000000000000000000000000;;	package photon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains functionality for services API.
0000000000000000000000000000000000000000;;	type ServicesAPI struct {
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var serviceUrl = rootUrl + "/services/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extended Properties
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ExtendedPropertyDNS              = "dns"
0000000000000000000000000000000000000000;;		ExtendedPropertyGateway          = "gateway"
0000000000000000000000000000000000000000;;		ExtendedPropertyNetMask          = "netmask"
0000000000000000000000000000000000000000;;		ExtendedPropertyLoadBalancerIP   = "load_balancer_ip"
0000000000000000000000000000000000000000;;		ExtendedPropertyNumberOfMasters  = "number_of_masters"
0000000000000000000000000000000000000000;;		ExtendedPropertyMasterIPs        = "master_ips"
0000000000000000000000000000000000000000;;		ExtendedPropertyMasterIP         = "master_ip"
0000000000000000000000000000000000000000;;		ExtendedPropertyMasterIP2        = "master_ip2"
0000000000000000000000000000000000000000;;		ExtendedPropertyContainerNetwork = "container_network"
0000000000000000000000000000000000000000;;		ExtendedPropertyZookeeperIP1     = "zookeeper_ip1"
0000000000000000000000000000000000000000;;		ExtendedPropertyZookeeperIP2     = "zookeeper_ip2"
0000000000000000000000000000000000000000;;		ExtendedPropertyZookeeperIP3     = "zookeeper_ip3"
0000000000000000000000000000000000000000;;		ExtendedPropertyNumberOfETCDs    = "number_of_etcds"
0000000000000000000000000000000000000000;;		ExtendedPropertyETCDIP1          = "etcd_ip1"
0000000000000000000000000000000000000000;;		ExtendedPropertyETCDIP2          = "etcd_ip2"
0000000000000000000000000000000000000000;;		ExtendedPropertyETCDIP3          = "etcd_ip3"
0000000000000000000000000000000000000000;;		ExtendedPropertySSHKey           = "ssh_key"
0000000000000000000000000000000000000000;;		ExtendedPropertyRegistryCACert   = "registry_ca_cert"
0000000000000000000000000000000000000000;;		ExtendedPropertyAdminPassword    = "admin_password"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a service with specified ID.
0000000000000000000000000000000000000000;;	func (api *ServicesAPI) Delete(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Delete(api.client.Endpoint+serviceUrl+id, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a service with the specified ID.
0000000000000000000000000000000000000000;;	func (api *ServicesAPI) Get(id string) (service *Service, err error) {
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Get(api.client.Endpoint+serviceUrl+id, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		res, err = getError(res)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var result Service
0000000000000000000000000000000000000000;;		err = json.NewDecoder(res.Body).Decode(&result)
0000000000000000000000000000000000000000;;		return &result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets vms for service with the specified ID.
0000000000000000000000000000000000000000;;	func (api *ServicesAPI) GetVMs(id string) (result *VMs, err error) {
0000000000000000000000000000000000000000;;		uri := api.client.Endpoint + serviceUrl + id + "/vms"
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.GetList(api.client.Endpoint, uri, api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = &VMs{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(res, result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resize a service to specified count.
0000000000000000000000000000000000000000;;	func (api *ServicesAPI) Resize(id string, resize *ServiceResizeOperation) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(resize)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+serviceUrl+id+"/resize",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Start a background process to recreate failed VMs in a service with the specified ID.
0000000000000000000000000000000000000000;;	func (api *ServicesAPI) TriggerMaintenance(id string) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body := []byte{}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+serviceUrl+id+"/trigger_maintenance",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Change a service version to the specified image by destroying and recreating the VMs.
0000000000000000000000000000000000000000;;	func (api *ServicesAPI) ChangeVersion(id string, changeVersion *ServiceChangeVersionOperation) (task *Task, err error) {
0000000000000000000000000000000000000000;;		body, err := json.Marshal(changeVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		res, err := api.client.restClient.Post(
0000000000000000000000000000000000000000;;			api.client.Endpoint+serviceUrl+id+"/change_version",
0000000000000000000000000000000000000000;;			"application/json",
0000000000000000000000000000000000000000;;			bytes.NewReader(body),
0000000000000000000000000000000000000000;;			api.client.options.TokenOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		task, err = getTask(getError(res))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
