0000000000000000000000000000000000000000;;	package quobyte
9742188346891e2043163a03b89e3353f061a457;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		emptyResponse string = "Empty result and no error occured"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type request struct {
0000000000000000000000000000000000000000;;		ID      string      `json:"id"`
0000000000000000000000000000000000000000;;		Version string      `json:"jsonrpc"`
0000000000000000000000000000000000000000;;		Method  string      `json:"method"`
0000000000000000000000000000000000000000;;		Params  interface{} `json:"params"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type response struct {
0000000000000000000000000000000000000000;;		ID      string           `json:"id"`
0000000000000000000000000000000000000000;;		Version string           `json:"jsonrpc"`
0000000000000000000000000000000000000000;;		Result  *json.RawMessage `json:"result"`
0000000000000000000000000000000000000000;;		Error   *json.RawMessage `json:"error"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rpcError struct {
0000000000000000000000000000000000000000;;		Code    int64  `json:"code"`
0000000000000000000000000000000000000000;;		Message string `json:"message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (err *rpcError) decodeErrorCode() string {
0000000000000000000000000000000000000000;;		switch err.Code {
0000000000000000000000000000000000000000;;		case -32600:
0000000000000000000000000000000000000000;;			return "ERROR_CODE_INVALID_REQUEST"
0000000000000000000000000000000000000000;;		case -32603:
0000000000000000000000000000000000000000;;			return "ERROR_CODE_JSON_ENCODING_FAILED"
0000000000000000000000000000000000000000;;		case -32601:
0000000000000000000000000000000000000000;;			return "ERROR_CODE_METHOD_NOT_FOUND"
0000000000000000000000000000000000000000;;		case -32700:
0000000000000000000000000000000000000000;;			return "ERROR_CODE_PARSE_ERROR"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func encodeRequest(method string, params interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(&request{
0000000000000000000000000000000000000000;;			// Generate random ID and convert it to a string
0000000000000000000000000000000000000000;;			ID:      strconv.FormatInt(rand.Int63(), 10),
0000000000000000000000000000000000000000;;			Version: "2.0",
0000000000000000000000000000000000000000;;			Method:  method,
0000000000000000000000000000000000000000;;			Params:  params,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeResponse(ioReader io.Reader, reply interface{}) error {
0000000000000000000000000000000000000000;;		var resp response
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(ioReader).Decode(&resp); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.Error != nil {
0000000000000000000000000000000000000000;;			var rpcErr rpcError
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(*resp.Error, &rpcErr); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if rpcErr.Message != "" {
0000000000000000000000000000000000000000;;				return errors.New(rpcErr.Message)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			respError := rpcErr.decodeErrorCode()
0000000000000000000000000000000000000000;;			if respError != "" {
0000000000000000000000000000000000000000;;				return errors.New(respError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.Result != nil && reply != nil {
0000000000000000000000000000000000000000;;			return json.Unmarshal(*resp.Result, reply)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return errors.New(emptyResponse)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client QuobyteClient) sendRequest(method string, request interface{}, response interface{}) error {
0000000000000000000000000000000000000000;;		message, err := encodeRequest(method, request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("POST", client.url, bytes.NewBuffer(message))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		req.SetBasicAuth(client.username, client.password)
0000000000000000000000000000000000000000;;		resp, err := client.client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return decodeResponse(resp.Body, &response)
0000000000000000000000000000000000000000;;	}
