0000000000000000000000000000000000000000;;	// Package quobyte represents a golang API for the Quobyte Storage System
0000000000000000000000000000000000000000;;	package quobyte
9742188346891e2043163a03b89e3353f061a457;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuobyteClient struct {
0000000000000000000000000000000000000000;;		client   *http.Client
0000000000000000000000000000000000000000;;		url      string
0000000000000000000000000000000000000000;;		username string
0000000000000000000000000000000000000000;;		password string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewQuobyteClient creates a new Quobyte API client
0000000000000000000000000000000000000000;;	func NewQuobyteClient(url string, username string, password string) *QuobyteClient {
0000000000000000000000000000000000000000;;		return &QuobyteClient{
0000000000000000000000000000000000000000;;			client:   &http.Client{},
0000000000000000000000000000000000000000;;			url:      url,
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;			password: password,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolume creates a new Quobyte volume. Its root directory will be owned by given user and group
0000000000000000000000000000000000000000;;	func (client QuobyteClient) CreateVolume(request *CreateVolumeRequest) (string, error) {
0000000000000000000000000000000000000000;;		var response volumeUUID
0000000000000000000000000000000000000000;;		if err := client.sendRequest("createVolume", request, &response); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return response.VolumeUUID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResolveVolumeNameToUUID resolves a volume name to a UUID
0000000000000000000000000000000000000000;;	func (client *QuobyteClient) ResolveVolumeNameToUUID(volumeName, tenant string) (string, error) {
0000000000000000000000000000000000000000;;		request := &resolveVolumeNameRequest{
0000000000000000000000000000000000000000;;			VolumeName:   volumeName,
0000000000000000000000000000000000000000;;			TenantDomain: tenant,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var response volumeUUID
0000000000000000000000000000000000000000;;		if err := client.sendRequest("resolveVolumeName", request, &response); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return response.VolumeUUID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVolume deletes a Quobyte volume
0000000000000000000000000000000000000000;;	func (client *QuobyteClient) DeleteVolume(UUID string) error {
0000000000000000000000000000000000000000;;		return client.sendRequest(
0000000000000000000000000000000000000000;;			"deleteVolume",
0000000000000000000000000000000000000000;;			&volumeUUID{
0000000000000000000000000000000000000000;;				VolumeUUID: UUID,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVolumeByName deletes a volume by a given name
0000000000000000000000000000000000000000;;	func (client *QuobyteClient) DeleteVolumeByName(volumeName, tenant string) error {
0000000000000000000000000000000000000000;;		uuid, err := client.ResolveVolumeNameToUUID(volumeName, tenant)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.DeleteVolume(uuid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetClientList returns a list of all active clients
0000000000000000000000000000000000000000;;	func (client *QuobyteClient) GetClientList(tenant string) (GetClientListResponse, error) {
0000000000000000000000000000000000000000;;		request := &getClientListRequest{
0000000000000000000000000000000000000000;;			TenantDomain: tenant,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response GetClientListResponse
0000000000000000000000000000000000000000;;		if err := client.sendRequest("getClientListRequest", request, &response); err != nil {
0000000000000000000000000000000000000000;;			return response, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return response, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *QuobyteClient) SetVolumeQuota(volumeUUID string, quotaSize uint64) error {
0000000000000000000000000000000000000000;;		request := &setQuotaRequest{
0000000000000000000000000000000000000000;;			Quotas: []*quota{
0000000000000000000000000000000000000000;;				&quota{
0000000000000000000000000000000000000000;;					Consumer: []*consumingEntity{
0000000000000000000000000000000000000000;;						&consumingEntity{
0000000000000000000000000000000000000000;;							Type:       "VOLUME",
0000000000000000000000000000000000000000;;							Identifier: volumeUUID,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: []*resource{
0000000000000000000000000000000000000000;;						&resource{
0000000000000000000000000000000000000000;;							Type:  "LOGICAL_DISK_SPACE",
0000000000000000000000000000000000000000;;							Value: quotaSize,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.sendRequest("setQuota", request, nil)
0000000000000000000000000000000000000000;;	}
