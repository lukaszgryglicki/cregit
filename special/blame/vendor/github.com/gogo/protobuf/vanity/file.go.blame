0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2015, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/vanity/file.go[Godeps/_workspace/src/github.com/gogo/protobuf/vanity/file.go][vendor/github.com/gogo/protobuf/vanity/file.go];	
0000000000000000000000000000000000000000;;	package vanity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NotGoogleProtobufDescriptorProto(file *descriptor.FileDescriptorProto) bool {
0000000000000000000000000000000000000000;;		// can not just check if file.GetName() == "google/protobuf/descriptor.proto" because we do not want to assume compile path
0000000000000000000000000000000000000000;;		_, fileName := filepath.Split(file.GetName())
0000000000000000000000000000000000000000;;		return !(file.GetPackage() == "google.protobuf" && fileName == "descriptor.proto")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FilterFiles(files []*descriptor.FileDescriptorProto, f func(file *descriptor.FileDescriptorProto) bool) []*descriptor.FileDescriptorProto {
0000000000000000000000000000000000000000;;		filtered := make([]*descriptor.FileDescriptorProto, 0, len(files))
0000000000000000000000000000000000000000;;		for i := range files {
0000000000000000000000000000000000000000;;			if !f(files[i]) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			filtered = append(filtered, files[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filtered
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FileHasBoolExtension(file *descriptor.FileDescriptorProto, extension *proto.ExtensionDesc) bool {
0000000000000000000000000000000000000000;;		if file.Options == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		value, err := proto.GetExtension(file.Options, extension)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if value == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if value.(*bool) == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetBoolFileOption(extension *proto.ExtensionDesc, value bool) func(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		return func(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			if FileHasBoolExtension(file, extension) {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if file.Options == nil {
0000000000000000000000000000000000000000;;				file.Options = &descriptor.FileOptions{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := proto.SetExtension(file.Options, extension, &value); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGoGettersAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GoprotoGettersAll, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGoEnumPrefixAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GoprotoEnumPrefixAll, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGoStringerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GoprotoStringerAll, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnVerboseEqualAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_VerboseEqualAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnFaceAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_FaceAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnGoStringAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GostringAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnPopulateAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_PopulateAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnStringerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_StringerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnEqualAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_EqualAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnDescriptionAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_DescriptionAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnTestGenAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_TestgenAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnBenchGenAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_BenchgenAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnMarshalerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_MarshalerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnUnmarshalerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_UnmarshalerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnStable_MarshalerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_StableMarshalerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnSizerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_SizerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGoEnumStringerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GoprotoEnumStringerAll, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnEnumStringerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_EnumStringerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnUnsafeUnmarshalerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_UnsafeUnmarshalerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnUnsafeMarshalerAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_UnsafeMarshalerAll, true)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGoExtensionsMapAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GoprotoExtensionsMapAll, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGoUnrecognizedAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GoprotoUnrecognizedAll, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOffGogoImport(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_GogoprotoImport, false)(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TurnOnCompareAll(file *descriptor.FileDescriptorProto) {
0000000000000000000000000000000000000000;;		SetBoolFileOption(gogoproto.E_CompareAll, true)(file)
0000000000000000000000000000000000000000;;	}
