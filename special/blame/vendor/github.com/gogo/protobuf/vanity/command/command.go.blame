0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2015, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/vanity/command/command.go[Godeps/_workspace/src/github.com/gogo/protobuf/vanity/command/command.go][vendor/github.com/gogo/protobuf/vanity/command/command.go];	
0000000000000000000000000000000000000000;;	package command
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/format"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/compare"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/defaultcheck"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/description"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/embedcheck"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/enumstringer"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/equal"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/face"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/gostring"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/marshalto"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/oneofcheck"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/populate"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/size"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/stringer"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/plugin/testgen"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/union"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/plugin/unmarshal"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		_ "github.com/gogo/protobuf/protoc-gen-gogo/grpc"
0000000000000000000000000000000000000000;;		plugin "github.com/gogo/protobuf/protoc-gen-gogo/plugin"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Read() *plugin.CodeGeneratorRequest {
0000000000000000000000000000000000000000;;		g := generator.New()
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(os.Stdin)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			g.Error(err, "reading input")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := proto.Unmarshal(data, g.Request); err != nil {
0000000000000000000000000000000000000000;;			g.Error(err, "parsing input proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(g.Request.FileToGenerate) == 0 {
0000000000000000000000000000000000000000;;			g.Fail("no files to generate")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return g.Request
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// filenameSuffix replaces the .pb.go at the end of each filename.
0000000000000000000000000000000000000000;;	func GeneratePlugin(req *plugin.CodeGeneratorRequest, p generator.Plugin, filenameSuffix string) *plugin.CodeGeneratorResponse {
0000000000000000000000000000000000000000;;		g := generator.New()
0000000000000000000000000000000000000000;;		g.Request = req
0000000000000000000000000000000000000000;;		if len(g.Request.FileToGenerate) == 0 {
0000000000000000000000000000000000000000;;			g.Fail("no files to generate")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.CommandLineParameters(g.Request.GetParameter())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.WrapTypes()
0000000000000000000000000000000000000000;;		g.SetPackageNames()
0000000000000000000000000000000000000000;;		g.BuildTypeNameMap()
0000000000000000000000000000000000000000;;		g.GeneratePlugin(p)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < len(g.Response.File); i++ {
0000000000000000000000000000000000000000;;			g.Response.File[i].Name = proto.String(
0000000000000000000000000000000000000000;;				strings.Replace(*g.Response.File[i].Name, ".pb.go", filenameSuffix, -1),
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := goformat(g.Response); err != nil {
0000000000000000000000000000000000000000;;			g.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return g.Response
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func goformat(resp *plugin.CodeGeneratorResponse) error {
0000000000000000000000000000000000000000;;		for i := 0; i < len(resp.File); i++ {
0000000000000000000000000000000000000000;;			formatted, err := format.Source([]byte(resp.File[i].GetContent()))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("go format error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmts := string(formatted)
0000000000000000000000000000000000000000;;			resp.File[i].Content = &fmts
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Generate(req *plugin.CodeGeneratorRequest) *plugin.CodeGeneratorResponse {
0000000000000000000000000000000000000000;;		// Begin by allocating a generator. The request and response structures are stored there
0000000000000000000000000000000000000000;;		// so we can do error handling easily - the response structure contains the field to
0000000000000000000000000000000000000000;;		// report failure.
0000000000000000000000000000000000000000;;		g := generator.New()
0000000000000000000000000000000000000000;;		g.Request = req
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.CommandLineParameters(g.Request.GetParameter())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a wrapped version of the Descriptors and EnumDescriptors that
0000000000000000000000000000000000000000;;		// point to the file that defines them.
0000000000000000000000000000000000000000;;		g.WrapTypes()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.SetPackageNames()
0000000000000000000000000000000000000000;;		g.BuildTypeNameMap()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.GenerateAllFiles()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := goformat(g.Response); err != nil {
0000000000000000000000000000000000000000;;			g.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testReq := proto.Clone(req).(*plugin.CodeGeneratorRequest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testResp := GeneratePlugin(testReq, testgen.NewPlugin(), "pb_test.go")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < len(testResp.File); i++ {
0000000000000000000000000000000000000000;;			if strings.Contains(*testResp.File[i].Content, `//These tests are generated by github.com/gogo/protobuf/plugin/testgen`) {
0000000000000000000000000000000000000000;;				g.Response.File = append(g.Response.File, testResp.File[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return g.Response
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Write(resp *plugin.CodeGeneratorResponse) {
0000000000000000000000000000000000000000;;		g := generator.New()
0000000000000000000000000000000000000000;;		// Send back the results.
0000000000000000000000000000000000000000;;		data, err := proto.Marshal(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			g.Error(err, "failed to marshal output proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = os.Stdout.Write(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			g.Error(err, "failed to write output proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
