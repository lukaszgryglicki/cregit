0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/defaultcheck/defaultcheck.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/defaultcheck/defaultcheck.go][vendor/github.com/gogo/protobuf/plugin/defaultcheck/defaultcheck.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The defaultcheck plugin is used to check whether nullable is not used incorrectly.
0000000000000000000000000000000000000000;;	For instance:
0000000000000000000000000000000000000000;;	An error is caused if a nullable field:
0000000000000000000000000000000000000000;;	  - has a default value,
0000000000000000000000000000000000000000;;	  - is an enum which does not start at zero,
0000000000000000000000000000000000000000;;	  - is used for an extension,
0000000000000000000000000000000000000000;;	  - is used for a native proto3 type,
0000000000000000000000000000000000000000;;	  - is used for a repeated native type.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	An error is also caused if a field with a default value is used in a message:
0000000000000000000000000000000000000000;;	  - which is a face.
0000000000000000000000000000000000000000;;	  - without getters.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - nullable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For incorrect usage of nullable with tests see:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/nullableconflict
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package defaultcheck
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type plugin struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPlugin() *plugin {
0000000000000000000000000000000000000000;;		return &plugin{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Name() string {
0000000000000000000000000000000000000000;;		return "defaultcheck"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;		for _, msg := range file.Messages() {
0000000000000000000000000000000000000000;;			getters := gogoproto.HasGoGetters(file.FileDescriptorProto, msg.DescriptorProto)
0000000000000000000000000000000000000000;;			face := gogoproto.IsFace(file.FileDescriptorProto, msg.DescriptorProto)
0000000000000000000000000000000000000000;;			for _, field := range msg.GetField() {
0000000000000000000000000000000000000000;;				if len(field.GetDefaultValue()) > 0 {
0000000000000000000000000000000000000000;;					if !getters {
0000000000000000000000000000000000000000;;						fmt.Fprintf(os.Stderr, "ERROR: field %v.%v cannot have a default value and not have a getter method", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name))
0000000000000000000000000000000000000000;;						os.Exit(1)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if face {
0000000000000000000000000000000000000000;;						fmt.Fprintf(os.Stderr, "ERROR: field %v.%v cannot have a default value be in a face", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name))
0000000000000000000000000000000000000000;;						os.Exit(1)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(field.GetDefaultValue()) > 0 {
0000000000000000000000000000000000000000;;					fmt.Fprintf(os.Stderr, "ERROR: field %v.%v cannot be non-nullable and have a default value", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name))
0000000000000000000000000000000000000000;;					os.Exit(1)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !field.IsMessage() && !gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;					if field.IsRepeated() {
0000000000000000000000000000000000000000;;						fmt.Fprintf(os.Stderr, "WARNING: field %v.%v is a repeated non-nullable native type, nullable=false has no effect\n", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name))
0000000000000000000000000000000000000000;;					} else if proto3 {
0000000000000000000000000000000000000000;;						fmt.Fprintf(os.Stderr, "ERROR: field %v.%v is a native type and in proto3 syntax with nullable=false there exists conflicting implementations when encoding zero values", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name))
0000000000000000000000000000000000000000;;						os.Exit(1)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if field.IsBytes() {
0000000000000000000000000000000000000000;;						fmt.Fprintf(os.Stderr, "WARNING: field %v.%v is a non-nullable bytes type, nullable=false has no effect\n", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !field.IsEnum() {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				enum := p.ObjectNamed(field.GetTypeName()).(*generator.EnumDescriptor)
0000000000000000000000000000000000000000;;				if len(enum.Value) == 0 || enum.Value[0].GetNumber() != 0 {
0000000000000000000000000000000000000000;;					fmt.Fprintf(os.Stderr, "ERROR: field %v.%v cannot be non-nullable and be an enum type %v which does not start with zero", generator.CamelCase(*msg.Name), generator.CamelCase(*field.Name), enum.GetName())
0000000000000000000000000000000000000000;;					os.Exit(1)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, e := range file.GetExtension() {
0000000000000000000000000000000000000000;;			if !gogoproto.IsNullable(e) {
0000000000000000000000000000000000000000;;				fmt.Fprintf(os.Stderr, "ERROR: extended field %v cannot be nullable %v", generator.CamelCase(e.GetName()), generator.CamelCase(*e.Name))
0000000000000000000000000000000000000000;;				os.Exit(1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) GenerateImports(*generator.FileDescriptor) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewPlugin())
0000000000000000000000000000000000000000;;	}
