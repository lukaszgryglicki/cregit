0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package compare
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/vanity"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type plugin struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		fmtPkg      generator.Single
0000000000000000000000000000000000000000;;		bytesPkg    generator.Single
0000000000000000000000000000000000000000;;		sortkeysPkg generator.Single
0000000000000000000000000000000000000000;;		protoPkg    generator.Single
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPlugin() *plugin {
0000000000000000000000000000000000000000;;		return &plugin{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Name() string {
0000000000000000000000000000000000000000;;		return "compare"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		p.fmtPkg = p.NewImport("fmt")
0000000000000000000000000000000000000000;;		p.bytesPkg = p.NewImport("bytes")
0000000000000000000000000000000000000000;;		p.sortkeysPkg = p.NewImport("github.com/gogo/protobuf/sortkeys")
0000000000000000000000000000000000000000;;		p.protoPkg = p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, msg := range file.Messages() {
0000000000000000000000000000000000000000;;			if msg.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasCompare(file.FileDescriptorProto, msg.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.generateMessage(file, msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) generateNullableField(fieldname string) {
0000000000000000000000000000000000000000;;		p.P(`if this.`, fieldname, ` != nil && that1.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`if *this.`, fieldname, ` != *that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`if *this.`, fieldname, ` < *that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return -1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return 1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`} else if this.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return 1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`} else if that1.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return -1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) generateMsgNullAndTypeCheck(ccTypeName string) {
0000000000000000000000000000000000000000;;		p.P(`if that == nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`if this == nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return 0`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return 1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(``)
0000000000000000000000000000000000000000;;		p.P(`that1, ok := that.(*`, ccTypeName, `)`)
0000000000000000000000000000000000000000;;		p.P(`if !ok {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`that2, ok := that.(`, ccTypeName, `)`)
0000000000000000000000000000000000000000;;		p.P(`if ok {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`that1 = &that2`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`} else {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return 1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`if that1 == nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`if this == nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return 0`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return 1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`} else if this == nil {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return -1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) generateField(file *generator.FileDescriptor, message *generator.Descriptor, field *descriptor.FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;		fieldname := p.GetOneOfFieldName(message, field)
0000000000000000000000000000000000000000;;		repeated := field.IsRepeated()
0000000000000000000000000000000000000000;;		ctype := gogoproto.IsCustomType(field)
0000000000000000000000000000000000000000;;		nullable := gogoproto.IsNullable(field)
0000000000000000000000000000000000000000;;		// oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;		if !repeated {
0000000000000000000000000000000000000000;;			if ctype {
0000000000000000000000000000000000000000;;				if nullable {
0000000000000000000000000000000000000000;;					p.P(`if that1.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`if this.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return 1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`} else if this.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return -1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`} else if c := this.`, fieldname, `.Compare(*that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if c := this.`, fieldname, `.Compare(that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return c`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if field.IsMessage() || p.IsGroup(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`if c := this.`, fieldname, `.Compare(that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if c := this.`, fieldname, `.Compare(&that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return c`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if field.IsBytes() {
0000000000000000000000000000000000000000;;					p.P(`if c := `, p.bytesPkg.Use(), `.Compare(this.`, fieldname, `, that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return c`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if field.IsString() {
0000000000000000000000000000000000000000;;					if nullable && !proto3 {
0000000000000000000000000000000000000000;;						p.generateNullableField(fieldname)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, ` != that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, ` < that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if field.IsBool() {
0000000000000000000000000000000000000000;;					if nullable && !proto3 {
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, ` != nil && that1.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if *this.`, fieldname, ` != *that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if !*this.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`} else if this.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`} else if that1.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, ` != that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if !this.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if nullable && !proto3 {
0000000000000000000000000000000000000000;;						p.generateNullableField(fieldname)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, ` != that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, ` < that1.`, fieldname, `{`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			p.P(`if len(this.`, fieldname, `) != len(that1.`, fieldname, `) {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`if len(this.`, fieldname, `) < len(that1.`, fieldname, `) {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return -1`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`return 1`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`for i := range this.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			if ctype {
0000000000000000000000000000000000000000;;				p.P(`if c := this.`, fieldname, `[i].Compare(that1.`, fieldname, `[i]); c != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return c`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if p.IsMap(field) {
0000000000000000000000000000000000000000;;					m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;					valuegoTyp, _ := p.GoType(nil, m.ValueField)
0000000000000000000000000000000000000000;;					valuegoAliasTyp, _ := p.GoType(nil, m.ValueAliasField)
0000000000000000000000000000000000000000;;					nullable, valuegoTyp, valuegoAliasTyp = generator.GoMapValueTypes(field, m.ValueField, valuegoTyp, valuegoAliasTyp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					mapValue := m.ValueAliasField
0000000000000000000000000000000000000000;;					if mapValue.IsMessage() || p.IsGroup(mapValue) {
0000000000000000000000000000000000000000;;						if nullable && valuegoTyp == valuegoAliasTyp {
0000000000000000000000000000000000000000;;							p.P(`if c := this.`, fieldname, `[i].Compare(that1.`, fieldname, `[i]); c != 0 {`)
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							// Compare() has a pointer receiver, but map value is a value type
0000000000000000000000000000000000000000;;							a := `this.` + fieldname + `[i]`
0000000000000000000000000000000000000000;;							b := `that1.` + fieldname + `[i]`
0000000000000000000000000000000000000000;;							if valuegoTyp != valuegoAliasTyp {
0000000000000000000000000000000000000000;;								// cast back to the type that has the generated methods on it
0000000000000000000000000000000000000000;;								a = `(` + valuegoTyp + `)(` + a + `)`
0000000000000000000000000000000000000000;;								b = `(` + valuegoTyp + `)(` + b + `)`
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							p.P(`a := `, a)
0000000000000000000000000000000000000000;;							p.P(`b := `, b)
0000000000000000000000000000000000000000;;							if nullable {
0000000000000000000000000000000000000000;;								p.P(`if c := a.Compare(b); c != 0 {`)
0000000000000000000000000000000000000000;;							} else {
0000000000000000000000000000000000000000;;								p.P(`if c := (&a).Compare(&b); c != 0 {`)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return c`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					} else if mapValue.IsBytes() {
0000000000000000000000000000000000000000;;						p.P(`if c := `, p.bytesPkg.Use(), `.Compare(this.`, fieldname, `[i], that1.`, fieldname, `[i]); c != 0 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return c`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					} else if mapValue.IsString() {
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, `[i] != that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, `[i] < that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, `[i] != that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`if this.`, fieldname, `[i] < that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`return 1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if field.IsMessage() || p.IsGroup(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`if c := this.`, fieldname, `[i].Compare(that1.`, fieldname, `[i]); c != 0 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return c`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if c := this.`, fieldname, `[i].Compare(&that1.`, fieldname, `[i]); c != 0 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return c`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if field.IsBytes() {
0000000000000000000000000000000000000000;;					p.P(`if c := `, p.bytesPkg.Use(), `.Compare(this.`, fieldname, `[i], that1.`, fieldname, `[i]); c != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return c`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if field.IsString() {
0000000000000000000000000000000000000000;;					p.P(`if this.`, fieldname, `[i] != that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`if this.`, fieldname, `[i] < that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return -1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`return 1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if field.IsBool() {
0000000000000000000000000000000000000000;;					p.P(`if this.`, fieldname, `[i] != that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`if !this.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return -1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`return 1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if this.`, fieldname, `[i] != that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`if this.`, fieldname, `[i] < that1.`, fieldname, `[i] {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return -1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`return 1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) generateMessage(file *generator.FileDescriptor, message *generator.Descriptor) {
0000000000000000000000000000000000000000;;		ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;		p.P(`func (this *`, ccTypeName, `) Compare(that interface{}) int {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.generateMsgNullAndTypeCheck(ccTypeName)
0000000000000000000000000000000000000000;;		oneofs := make(map[string]struct{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, field := range message.Field {
0000000000000000000000000000000000000000;;			oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				if _, ok := oneofs[fieldname]; ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					oneofs[fieldname] = struct{}{}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if that1.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if this.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else if this.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return -1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else if c := this.`, fieldname, `.Compare(that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return c`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.generateField(file, message, field)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;			if gogoproto.HasExtensionsMap(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.P(`thismap := `, p.protoPkg.Use(), `.GetUnsafeExtensionsMap(this)`)
0000000000000000000000000000000000000000;;				p.P(`thatmap := `, p.protoPkg.Use(), `.GetUnsafeExtensionsMap(that1)`)
0000000000000000000000000000000000000000;;				p.P(`extkeys := make([]int32, 0, len(thismap)+len(thatmap))`)
0000000000000000000000000000000000000000;;				p.P(`for k, _ := range thismap {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`extkeys = append(extkeys, k)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`for k, _ := range thatmap {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if _, ok := thismap[k]; !ok {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`extkeys = append(extkeys, k)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(p.sortkeysPkg.Use(), `.Int32s(extkeys)`)
0000000000000000000000000000000000000000;;				p.P(`for _, k := range extkeys {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if v, ok := thismap[k]; ok {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if v2, ok := thatmap[k]; ok {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if c := v.Compare(&v2); c != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return c`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else  {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return -1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fieldname := "XXX_extensions"
0000000000000000000000000000000000000000;;				p.P(`if c := `, p.bytesPkg.Use(), `.Compare(this.`, fieldname, `, that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return c`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if gogoproto.HasUnrecognized(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;			fieldname := "XXX_unrecognized"
0000000000000000000000000000000000000000;;			p.P(`if c := `, p.bytesPkg.Use(), `.Compare(this.`, fieldname, `, that1.`, fieldname, `); c != 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return c`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.P(`return 0`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//Generate Compare methods for oneof fields
0000000000000000000000000000000000000000;;		m := proto.Clone(message.DescriptorProto).(*descriptor.DescriptorProto)
0000000000000000000000000000000000000000;;		for _, field := range m.Field {
0000000000000000000000000000000000000000;;			oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;			if !oneof {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ccTypeName := p.OneOfTypeName(message, field)
0000000000000000000000000000000000000000;;			p.P(`func (this *`, ccTypeName, `) Compare(that interface{}) int {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.generateMsgNullAndTypeCheck(ccTypeName)
0000000000000000000000000000000000000000;;			vanity.TurnOffNullableForNativeTypesWithoutDefaultsOnly(field)
0000000000000000000000000000000000000000;;			p.generateField(file, message, field)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(`return 0`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewPlugin())
0000000000000000000000000000000000000000;;	}
