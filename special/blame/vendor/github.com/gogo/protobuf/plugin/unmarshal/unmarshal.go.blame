0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/unmarshal/unmarshal.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/unmarshal/unmarshal.go][vendor/github.com/gogo/protobuf/plugin/unmarshal/unmarshal.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The unmarshal plugin generates a Unmarshal method for each message.
0000000000000000000000000000000000000000;;	The `Unmarshal([]byte) error` method results in the fact that the message
0000000000000000000000000000000000000000;;	implements the Unmarshaler interface.
0000000000000000000000000000000000000000;;	The allows proto.Unmarshal to be faster by calling the generated Unmarshal method rather than using reflect.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - unmarshaler
0000000000000000000000000000000000000000;;	  - unmarshaler_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Or the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - unsafe_unmarshaler
0000000000000000000000000000000000000000;;	  - unsafe_unmarshaler_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	That is if you want to use the unsafe package in your generated code.
0000000000000000000000000000000000000000;;	The speed up using the unsafe package is not very significant.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The generation of unmarshalling tests are enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	And benchmarks given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - benchgen
0000000000000000000000000000000000000000;;	  - benchgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  option (gogoproto.unmarshaler_all) = true;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message B {
0000000000000000000000000000000000000000;;		option (gogoproto.description) = true;
0000000000000000000000000000000000000000;;		optional A A = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
0000000000000000000000000000000000000000;;		repeated bytes G = 2 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uint128", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the unmarshal plugin, will generate the following code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func (m *B) Unmarshal(dAtA []byte) error {
0000000000000000000000000000000000000000;;		l := len(dAtA)
0000000000000000000000000000000000000000;;		iNdEx := 0
0000000000000000000000000000000000000000;;		for iNdEx < l {
0000000000000000000000000000000000000000;;			var wire uint64
0000000000000000000000000000000000000000;;			for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;				if iNdEx >= l {
0000000000000000000000000000000000000000;;					return io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				b := dAtA[iNdEx]
0000000000000000000000000000000000000000;;				iNdEx++
0000000000000000000000000000000000000000;;				wire |= (uint64(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;				if b < 0x80 {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fieldNum := int32(wire >> 3)
0000000000000000000000000000000000000000;;			wireType := int(wire & 0x7)
0000000000000000000000000000000000000000;;			switch fieldNum {
0000000000000000000000000000000000000000;;			case 1:
0000000000000000000000000000000000000000;;				if wireType != 2 {
0000000000000000000000000000000000000000;;					return proto.ErrWrongType
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var msglen int
0000000000000000000000000000000000000000;;				for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;					if iNdEx >= l {
0000000000000000000000000000000000000000;;						return io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					b := dAtA[iNdEx]
0000000000000000000000000000000000000000;;					iNdEx++
0000000000000000000000000000000000000000;;					msglen |= (int(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;					if b < 0x80 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				postIndex := iNdEx + msglen
0000000000000000000000000000000000000000;;				if postIndex > l {
0000000000000000000000000000000000000000;;					return io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				iNdEx = postIndex
0000000000000000000000000000000000000000;;			case 2:
0000000000000000000000000000000000000000;;				if wireType != 2 {
0000000000000000000000000000000000000000;;					return proto.ErrWrongType
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var byteLen int
0000000000000000000000000000000000000000;;				for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;					if iNdEx >= l {
0000000000000000000000000000000000000000;;						return io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					b := dAtA[iNdEx]
0000000000000000000000000000000000000000;;					iNdEx++
0000000000000000000000000000000000000000;;					byteLen |= (int(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;					if b < 0x80 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				postIndex := iNdEx + byteLen
0000000000000000000000000000000000000000;;				if postIndex > l {
0000000000000000000000000000000000000000;;					return io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				m.G = append(m.G, github_com_gogo_protobuf_test_custom.Uint128{})
0000000000000000000000000000000000000000;;				if err := m.G[len(m.G)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				iNdEx = postIndex
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				var sizeOfWire int
0000000000000000000000000000000000000000;;				for {
0000000000000000000000000000000000000000;;					sizeOfWire++
0000000000000000000000000000000000000000;;					wire >>= 7
0000000000000000000000000000000000000000;;					if wire == 0 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				iNdEx -= sizeOfWire
0000000000000000000000000000000000000000;;				skippy, err := skip(dAtA[iNdEx:])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if (iNdEx + skippy) > l {
0000000000000000000000000000000000000000;;					return io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
0000000000000000000000000000000000000000;;				iNdEx += skippy
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Remember when using this code to call proto.Unmarshal.
0000000000000000000000000000000000000000;;	This will call m.Reset and invoke the generated Unmarshal method for you.
0000000000000000000000000000000000000000;;	If you call m.Unmarshal without m.Reset you could be merging protocol buffers.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package unmarshal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type unmarshal struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		unsafe bool
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		atleastOne bool
0000000000000000000000000000000000000000;;		ioPkg      generator.Single
0000000000000000000000000000000000000000;;		mathPkg    generator.Single
0000000000000000000000000000000000000000;;		unsafePkg  generator.Single
0000000000000000000000000000000000000000;;		typesPkg   generator.Single
0000000000000000000000000000000000000000;;		localName  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnmarshal() *unmarshal {
0000000000000000000000000000000000000000;;		return &unmarshal{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnsafeUnmarshal() *unmarshal {
0000000000000000000000000000000000000000;;		return &unmarshal{unsafe: true}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) Name() string {
0000000000000000000000000000000000000000;;		if p.unsafe {
0000000000000000000000000000000000000000;;			return "unsafeunmarshaler"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "unmarshal"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) decodeVarint(varName string, typName string) {
0000000000000000000000000000000000000000;;		p.P(`for shift := uint(0); ; shift += 7 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`if shift >= 64 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return ErrIntOverflow` + p.localName)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`if iNdEx >= l {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`b := dAtA[iNdEx]`)
0000000000000000000000000000000000000000;;		p.P(`iNdEx++`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= (`, typName, `(b) & 0x7F) << shift`)
0000000000000000000000000000000000000000;;		p.P(`if b < 0x80 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`break`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) decodeFixed32(varName string, typeName string) {
0000000000000000000000000000000000000000;;		p.P(`if (iNdEx+4) > l {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`iNdEx += 4`)
0000000000000000000000000000000000000000;;		p.P(varName, ` = `, typeName, `(dAtA[iNdEx-4])`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-3]) << 8`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-2]) << 16`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-1]) << 24`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) unsafeFixed32(varName string, typeName string) {
0000000000000000000000000000000000000000;;		p.P(`if iNdEx + 4 > l {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(varName, ` = *(*`, typeName, `)(`, p.unsafePkg.Use(), `.Pointer(&dAtA[iNdEx]))`)
0000000000000000000000000000000000000000;;		p.P(`iNdEx += 4`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) decodeFixed64(varName string, typeName string) {
0000000000000000000000000000000000000000;;		p.P(`if (iNdEx+8) > l {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`iNdEx += 8`)
0000000000000000000000000000000000000000;;		p.P(varName, ` = `, typeName, `(dAtA[iNdEx-8])`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-7]) << 8`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-6]) << 16`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-5]) << 24`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-4]) << 32`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-3]) << 40`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-2]) << 48`)
0000000000000000000000000000000000000000;;		p.P(varName, ` |= `, typeName, `(dAtA[iNdEx-1]) << 56`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) unsafeFixed64(varName string, typeName string) {
0000000000000000000000000000000000000000;;		p.P(`if iNdEx + 8 > l {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(varName, ` = *(*`, typeName, `)(`, p.unsafePkg.Use(), `.Pointer(&dAtA[iNdEx]))`)
0000000000000000000000000000000000000000;;		p.P(`iNdEx += 8`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) mapField(varName string, customType bool, field *descriptor.FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		switch field.GetType() {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_DOUBLE:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, `temp uint64`)
0000000000000000000000000000000000000000;;			p.decodeFixed64(varName+"temp", "uint64")
0000000000000000000000000000000000000000;;			p.P(varName, ` := `, p.mathPkg.Use(), `.Float64frombits(`, varName, `temp)`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FLOAT:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, `temp uint32`)
0000000000000000000000000000000000000000;;			p.decodeFixed32(varName+"temp", "uint32")
0000000000000000000000000000000000000000;;			p.P(varName, ` := `, p.mathPkg.Use(), `.Float32frombits(`, varName, `temp)`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT64:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` int64`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName, "int64")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT64:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName, "uint64")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` int32`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName, "int32")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED64:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` uint64`)
0000000000000000000000000000000000000000;;			p.decodeFixed64(varName, "uint64")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED32:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` uint32`)
0000000000000000000000000000000000000000;;			p.decodeFixed32(varName, "uint32")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, `temp int`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName+"temp", "int")
0000000000000000000000000000000000000000;;			p.P(varName, ` := bool(`, varName, `temp != 0)`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;			p.P(`var stringLen`, varName, ` uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint("stringLen"+varName, "uint64")
0000000000000000000000000000000000000000;;			p.P(`intStringLen`, varName, ` := int(stringLen`, varName, `)`)
0000000000000000000000000000000000000000;;			p.P(`if intStringLen`, varName, ` < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`postStringIndex`, varName, ` := iNdEx + intStringLen`, varName)
0000000000000000000000000000000000000000;;			p.P(`if postStringIndex`, varName, ` > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			cast, _ := p.GoType(nil, field)
0000000000000000000000000000000000000000;;			cast = strings.Replace(cast, "*", "", 1)
0000000000000000000000000000000000000000;;			p.P(varName, ` := `, cast, `(dAtA[iNdEx:postStringIndex`, varName, `])`)
0000000000000000000000000000000000000000;;			p.P(`iNdEx = postStringIndex`, varName)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;			p.P(`var mapmsglen int`)
0000000000000000000000000000000000000000;;			p.decodeVarint("mapmsglen", "int")
0000000000000000000000000000000000000000;;			p.P(`if mapmsglen < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`postmsgIndex := iNdEx + mapmsglen`)
0000000000000000000000000000000000000000;;			p.P(`if mapmsglen < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`if postmsgIndex > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			desc := p.ObjectNamed(field.GetTypeName())
0000000000000000000000000000000000000000;;			msgname := p.TypeName(desc)
0000000000000000000000000000000000000000;;			buf := `dAtA[iNdEx:postmsgIndex]`
0000000000000000000000000000000000000000;;			if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;				p.P(varName, ` := new(time.Time)`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(`, varName, `, `, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;			} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;				p.P(varName, ` := new(time.Duration)`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(`, varName, `, `, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(varName, ` := &`, msgname, `{}`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, varName, `.Unmarshal(`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return err`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`iNdEx = postmsgIndex`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;			p.P(`var mapbyteLen uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint("mapbyteLen", "uint64")
0000000000000000000000000000000000000000;;			p.P(`intMapbyteLen := int(mapbyteLen)`)
0000000000000000000000000000000000000000;;			p.P(`if intMapbyteLen < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`postbytesIndex := iNdEx + intMapbyteLen`)
0000000000000000000000000000000000000000;;			p.P(`if postbytesIndex > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			if customType {
0000000000000000000000000000000000000000;;				_, ctyp, err := generator.GetCustomType(field)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					panic(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`var `, varName, `1 `, ctyp)
0000000000000000000000000000000000000000;;				p.P(`var `, varName, ` = &`, varName, `1`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, varName, `.Unmarshal(dAtA[iNdEx:postbytesIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(varName, ` := make([]byte, mapbyteLen)`)
0000000000000000000000000000000000000000;;				p.P(`copy(`, varName, `, dAtA[iNdEx:postbytesIndex])`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`iNdEx = postbytesIndex`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT32:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` uint32`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName, "uint32")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_ENUM:
0000000000000000000000000000000000000000;;			typName := p.TypeName(p.ObjectNamed(field.GetTypeName()))
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` `, typName)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName, typName)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` int32`)
0000000000000000000000000000000000000000;;			p.decodeFixed32(varName, "int32")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, ` int64`)
0000000000000000000000000000000000000000;;			p.decodeFixed64(varName, "int64")
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT32:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, `temp int32`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName+"temp", "int32")
0000000000000000000000000000000000000000;;			p.P(varName, `temp = int32((uint32(`, varName, `temp) >> 1) ^ uint32(((`, varName, `temp&1)<<31)>>31))`)
0000000000000000000000000000000000000000;;			p.P(varName, ` := int32(`, varName, `temp)`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			p.P(`var `, varName, `temp uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint(varName+"temp", "uint64")
0000000000000000000000000000000000000000;;			p.P(varName, `temp = (`, varName, `temp >> 1) ^ uint64((int64(`, varName, `temp&1)<<63)>>63)`)
0000000000000000000000000000000000000000;;			p.P(varName, ` := int64(`, varName, `temp)`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) noStarOrSliceType(msg *generator.Descriptor, field *descriptor.FieldDescriptorProto) string {
0000000000000000000000000000000000000000;;		typ, _ := p.GoType(msg, field)
0000000000000000000000000000000000000000;;		if typ[0] == '*' {
0000000000000000000000000000000000000000;;			return typ[1:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typ[0] == '[' && typ[1] == ']' {
0000000000000000000000000000000000000000;;			return typ[2:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return typ
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) field(file *generator.FileDescriptor, msg *generator.Descriptor, field *descriptor.FieldDescriptorProto, fieldname string, proto3 bool) {
0000000000000000000000000000000000000000;;		repeated := field.IsRepeated()
0000000000000000000000000000000000000000;;		nullable := gogoproto.IsNullable(field)
0000000000000000000000000000000000000000;;		typ := p.noStarOrSliceType(msg, field)
0000000000000000000000000000000000000000;;		oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;		switch *field.Type {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_DOUBLE:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				p.P(`var v uint64`)
0000000000000000000000000000000000000000;;				p.decodeFixed64("v", "uint64")
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{`, typ, "(", p.mathPkg.Use(), `.Float64frombits(v))}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`v2 := `, typ, "(", p.mathPkg.Use(), `.Float64frombits(v))`)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v2)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = `, typ, "(", p.mathPkg.Use(), `.Float64frombits(v))`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`v2 := `, typ, "(", p.mathPkg.Use(), `.Float64frombits(v))`)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v2`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v float64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "float64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v float64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "float64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.unsafeFixed64(`m.`+fieldname, "float64")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v float64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "float64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FLOAT:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				p.P(`var v uint32`)
0000000000000000000000000000000000000000;;				p.decodeFixed32("v", "uint32")
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{`, typ, "(", p.mathPkg.Use(), `.Float32frombits(v))}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`v2 := `, typ, "(", p.mathPkg.Use(), `.Float32frombits(v))`)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v2)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = `, typ, "(", p.mathPkg.Use(), `.Float32frombits(v))`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`v2 := `, typ, "(", p.mathPkg.Use(), `.Float32frombits(v))`)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v2`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v float32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "float32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v float32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "float32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.unsafeFixed32("m."+fieldname, "float32")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v float32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "float32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT64:
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;				p.decodeVarint("m."+fieldname, typ)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT64:
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;				p.decodeVarint("m."+fieldname, typ)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;				p.decodeVarint("m."+fieldname, typ)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED64:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed64("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed64("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;					p.decodeFixed64("m."+fieldname, typ)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed64("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v uint64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "uint64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v uint64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "uint64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.unsafeFixed64("m."+fieldname, "uint64")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v uint64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "uint64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED32:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed32("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed32("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;					p.decodeFixed32("m."+fieldname, typ)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed32("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v uint32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "uint32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v uint32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "uint32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.unsafeFixed32("m."+fieldname, "uint32")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v uint32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "uint32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			p.P(`var v int`)
0000000000000000000000000000000000000000;;			p.decodeVarint("v", "int")
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`b := `, typ, `(v != 0)`)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{b}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, `, typ, `(v != 0))`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = `, typ, `(v != 0)`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`b := `, typ, `(v != 0)`)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &b`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;			p.P(`var stringLen uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint("stringLen", "uint64")
0000000000000000000000000000000000000000;;			p.P(`intStringLen := int(stringLen)`)
0000000000000000000000000000000000000000;;			p.P(`if intStringLen < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`postIndex := iNdEx + intStringLen`)
0000000000000000000000000000000000000000;;			p.P(`if postIndex > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{`, typ, `(dAtA[iNdEx:postIndex])}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, `, typ, `(dAtA[iNdEx:postIndex]))`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = `, typ, `(dAtA[iNdEx:postIndex])`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`s := `, typ, `(dAtA[iNdEx:postIndex])`)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &s`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`iNdEx = postIndex`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_GROUP:
0000000000000000000000000000000000000000;;			panic(fmt.Errorf("unmarshaler does not support group %v", fieldname))
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;			desc := p.ObjectNamed(field.GetTypeName())
0000000000000000000000000000000000000000;;			msgname := p.TypeName(desc)
0000000000000000000000000000000000000000;;			p.P(`var msglen int`)
0000000000000000000000000000000000000000;;			p.decodeVarint("msglen", "int")
0000000000000000000000000000000000000000;;			p.P(`if msglen < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`postIndex := iNdEx + msglen`)
0000000000000000000000000000000000000000;;			p.P(`if postIndex > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				buf := `dAtA[iNdEx:postIndex]`
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`v := new(time.Time)`)
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(v, `, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`v := time.Time{}`)
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(&v, `, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`v := new(time.Duration)`)
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(v, `, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`v := time.Duration(0)`)
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(&v, `, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`v := &`, msgname, `{}`)
0000000000000000000000000000000000000000;;					p.P(`if err := v.Unmarshal(`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if p.IsMap(field) {
0000000000000000000000000000000000000000;;				m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				keygoTyp, _ := p.GoType(nil, m.KeyField)
0000000000000000000000000000000000000000;;				keygoAliasTyp, _ := p.GoType(nil, m.KeyAliasField)
0000000000000000000000000000000000000000;;				// keys may not be pointers
0000000000000000000000000000000000000000;;				keygoTyp = strings.Replace(keygoTyp, "*", "", 1)
0000000000000000000000000000000000000000;;				keygoAliasTyp = strings.Replace(keygoAliasTyp, "*", "", 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				valuegoTyp, _ := p.GoType(nil, m.ValueField)
0000000000000000000000000000000000000000;;				valuegoAliasTyp, _ := p.GoType(nil, m.ValueAliasField)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// if the map type is an alias and key or values are aliases (type Foo map[Bar]Baz),
0000000000000000000000000000000000000000;;				// we need to explicitly record their use here.
0000000000000000000000000000000000000000;;				if gogoproto.IsCastKey(field) {
0000000000000000000000000000000000000000;;					p.RecordTypeUse(m.KeyAliasField.GetTypeName())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsCastValue(field) {
0000000000000000000000000000000000000000;;					p.RecordTypeUse(m.ValueAliasField.GetTypeName())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				nullable, valuegoTyp, valuegoAliasTyp = generator.GoMapValueTypes(field, m.ValueField, valuegoTyp, valuegoAliasTyp)
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) || gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					valuegoTyp = valuegoAliasTyp
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				p.P(`var keykey uint64`)
0000000000000000000000000000000000000000;;				p.decodeVarint("keykey", "uint64")
0000000000000000000000000000000000000000;;				p.mapField("mapkey", false, m.KeyAliasField)
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = make(`, m.GoType, `)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				s := `m.` + fieldname
0000000000000000000000000000000000000000;;				if keygoTyp == keygoAliasTyp {
0000000000000000000000000000000000000000;;					s += `[mapkey]`
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					s += `[` + keygoAliasTyp + `(mapkey)]`
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				v := `mapvalue`
0000000000000000000000000000000000000000;;				if (m.ValueField.IsMessage() || gogoproto.IsCustomType(field)) && !nullable {
0000000000000000000000000000000000000000;;					v = `*` + v
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if valuegoTyp != valuegoAliasTyp {
0000000000000000000000000000000000000000;;					v = `((` + valuegoAliasTyp + `)(` + v + `))`
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if iNdEx < postIndex {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`var valuekey uint64`)
0000000000000000000000000000000000000000;;				p.decodeVarint("valuekey", "uint64")
0000000000000000000000000000000000000000;;				p.mapField("mapvalue", gogoproto.IsCustomType(field), m.ValueAliasField)
0000000000000000000000000000000000000000;;				p.P(s, ` = `, v)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					p.P(`var mapvalue = new(time.Time)`)
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(s, ` = mapvalue`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(s, ` = *mapvalue`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					p.P(`var mapvalue = new(time.Duration)`)
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(s, ` = mapvalue`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(s, ` = *mapvalue`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var mapvalue `, valuegoAliasTyp)
0000000000000000000000000000000000000000;;					p.P(s, ` = mapvalue`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, new(time.Time))`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, time.Time{})`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, new(time.Duration))`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, time.Duration(0))`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if nullable && !gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, &`, msgname, `{})`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					goType, _ := p.GoType(nil, field)
0000000000000000000000000000000000000000;;					// remove the slice from the type, i.e. []*T -> *T
0000000000000000000000000000000000000000;;					goType = goType[2:]
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, `, goType, `{})`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				varName := `m.` + fieldname + `[len(m.` + fieldname + `)-1]`
0000000000000000000000000000000000000000;;				buf := `dAtA[iNdEx:postIndex]`
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(`, varName, `,`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(&(`, varName, `),`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(`, varName, `,`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(&(`, varName, `),`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if err := `, varName, `.Unmarshal(`, buf, `); err != nil {`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = new(time.Time)`)
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = new(time.Duration)`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					goType, _ := p.GoType(nil, field)
0000000000000000000000000000000000000000;;					// remove the star from the type
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, goType[1:], `{}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(m.`, fieldname, `, dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(m.`, fieldname, `, dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if err := m.`, fieldname, `.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					p.P(`if err := `, p.typesPkg.Use(), `.StdTimeUnmarshal(&m.`, fieldname, `, dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					p.P(`if err := `, p.typesPkg.Use(), `.StdDurationUnmarshal(&m.`, fieldname, `, dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if err := m.`, fieldname, `.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`iNdEx = postIndex`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;			p.P(`var byteLen int`)
0000000000000000000000000000000000000000;;			p.decodeVarint("byteLen", "int")
0000000000000000000000000000000000000000;;			p.P(`if byteLen < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`postIndex := iNdEx + byteLen`)
0000000000000000000000000000000000000000;;			p.P(`if postIndex > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			if !gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`v := make([]byte, postIndex-iNdEx)`)
0000000000000000000000000000000000000000;;					p.P(`copy(v, dAtA[iNdEx:postIndex])`)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, make([]byte, postIndex-iNdEx))`)
0000000000000000000000000000000000000000;;					p.P(`copy(m.`, fieldname, `[len(m.`, fieldname, `)-1], dAtA[iNdEx:postIndex])`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `[:0] , dAtA[iNdEx:postIndex]...)`)
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` == nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = []byte{}`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				_, ctyp, err := generator.GetCustomType(field)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					panic(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var vv `, ctyp)
0000000000000000000000000000000000000000;;					p.P(`v := &vv`)
0000000000000000000000000000000000000000;;					p.P(`if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{*v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v `, ctyp)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;					p.P(`if err := m.`, fieldname, `[len(m.`, fieldname, `)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if nullable {
0000000000000000000000000000000000000000;;					p.P(`var v `, ctyp)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;					p.P(`if err := m.`, fieldname, `.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if err := m.`, fieldname, `.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`iNdEx = postIndex`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT32:
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;				p.decodeVarint("m."+fieldname, typ)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`var v `, typ)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_ENUM:
0000000000000000000000000000000000000000;;			typName := p.TypeName(p.ObjectNamed(field.GetTypeName()))
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`var v `, typName)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typName)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`var v `, typName)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typName)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;				p.decodeVarint("m."+fieldname, typName)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`var v `, typName)
0000000000000000000000000000000000000000;;				p.decodeVarint("v", typName)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed32("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed32("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;					p.decodeFixed32("m."+fieldname, typ)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed32("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v int32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "int32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v int32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "int32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.unsafeFixed32("m."+fieldname, "int32")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v int32`)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("v", "int32")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed64("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed64("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = 0`)
0000000000000000000000000000000000000000;;					p.decodeFixed64("m."+fieldname, typ)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v `, typ)
0000000000000000000000000000000000000000;;					p.decodeFixed64("v", typ)
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					p.P(`var v int64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "int64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`var v int64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "int64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;				} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;					p.unsafeFixed64("m."+fieldname, "int64")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`var v int64`)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("v", "int64")
0000000000000000000000000000000000000000;;					p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT32:
0000000000000000000000000000000000000000;;			p.P(`var v `, typ)
0000000000000000000000000000000000000000;;			p.decodeVarint("v", typ)
0000000000000000000000000000000000000000;;			p.P(`v = `, typ, `((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))`)
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{v}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, v)`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = v`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			p.P(`var v uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint("v", "uint64")
0000000000000000000000000000000000000000;;			p.P(`v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)`)
0000000000000000000000000000000000000000;;			if oneof {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &`, p.OneOfTypeName(msg, field), `{`, typ, `(v)}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = append(m.`, fieldname, `, `, typ, `(v))`)
0000000000000000000000000000000000000000;;			} else if proto3 || !nullable {
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = `, typ, `(v)`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`v2 := `, typ, `(v)`)
0000000000000000000000000000000000000000;;				p.P(`m.`, fieldname, ` = &v2`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("not implemented")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *unmarshal) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		p.atleastOne = false
0000000000000000000000000000000000000000;;		p.localName = generator.FileName(file)
0000000000000000000000000000000000000000;;		if p.unsafe {
0000000000000000000000000000000000000000;;			p.localName += "Unsafe"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.ioPkg = p.NewImport("io")
0000000000000000000000000000000000000000;;		p.mathPkg = p.NewImport("math")
0000000000000000000000000000000000000000;;		p.unsafePkg = p.NewImport("unsafe")
0000000000000000000000000000000000000000;;		p.typesPkg = p.NewImport("github.com/gogo/protobuf/types")
0000000000000000000000000000000000000000;;		fmtPkg := p.NewImport("fmt")
0000000000000000000000000000000000000000;;		protoPkg := p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = p.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			if p.unsafe {
0000000000000000000000000000000000000000;;				if !gogoproto.IsUnsafeUnmarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsUnmarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					panic(fmt.Sprintf("unsafe_unmarshaler and unmarshaler enabled for %v", ccTypeName))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !p.unsafe {
0000000000000000000000000000000000000000;;				if !gogoproto.IsUnmarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsUnsafeUnmarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					panic(fmt.Sprintf("unsafe_unmarshaler and unmarshaler enabled for %v", ccTypeName))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.atleastOne = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// build a map required field_id -> bitmask offset
0000000000000000000000000000000000000000;;			rfMap := make(map[int32]uint)
0000000000000000000000000000000000000000;;			rfNextId := uint(0)
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				if field.IsRequired() {
0000000000000000000000000000000000000000;;					rfMap[field.GetNumber()] = rfNextId
0000000000000000000000000000000000000000;;					rfNextId++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rfCount := len(rfMap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(`func (m *`, ccTypeName, `) Unmarshal(dAtA []byte) error {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			if rfCount > 0 {
0000000000000000000000000000000000000000;;				p.P(`var hasFields [`, strconv.Itoa(1+(rfCount-1)/64), `]uint64`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`l := len(dAtA)`)
0000000000000000000000000000000000000000;;			p.P(`iNdEx := 0`)
0000000000000000000000000000000000000000;;			p.P(`for iNdEx < l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`preIndex := iNdEx`)
0000000000000000000000000000000000000000;;			p.P(`var wire uint64`)
0000000000000000000000000000000000000000;;			p.decodeVarint("wire", "uint64")
0000000000000000000000000000000000000000;;			p.P(`fieldNum := int32(wire >> 3)`)
0000000000000000000000000000000000000000;;			if len(message.Field) > 0 || !message.IsGroup() {
0000000000000000000000000000000000000000;;				p.P(`wireType := int(wire & 0x7)`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !message.IsGroup() {
0000000000000000000000000000000000000000;;				p.P(`if wireType == `, strconv.Itoa(proto.WireEndGroup), ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return `, fmtPkg.Use(), `.Errorf("proto: `+message.GetName()+`: wiretype end group for non-group")`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`if fieldNum <= 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, fmtPkg.Use(), `.Errorf("proto: `+message.GetName()+`: illegal tag %d (wire type %d)", fieldNum, wire)`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`switch fieldNum {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				errFieldname := fieldname
0000000000000000000000000000000000000000;;				if field.OneofIndex != nil {
0000000000000000000000000000000000000000;;					errFieldname = p.GetOneOfFieldName(message, field)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				possiblyPacked := field.IsScalar() && field.IsRepeated()
0000000000000000000000000000000000000000;;				p.P(`case `, strconv.Itoa(int(field.GetNumber())), `:`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				wireType := field.WireType()
0000000000000000000000000000000000000000;;				if possiblyPacked {
0000000000000000000000000000000000000000;;					p.P(`if wireType == `, strconv.Itoa(wireType), `{`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.field(file, message, field, fieldname, false)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`} else if wireType == `, strconv.Itoa(proto.WireBytes), `{`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`var packedLen int`)
0000000000000000000000000000000000000000;;					p.decodeVarint("packedLen", "int")
0000000000000000000000000000000000000000;;					p.P(`if packedLen < 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return ErrInvalidLength` + p.localName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`postIndex := iNdEx + packedLen`)
0000000000000000000000000000000000000000;;					p.P(`if postIndex > l {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`for iNdEx < postIndex {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.field(file, message, field, fieldname, false)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`} else {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return ` + fmtPkg.Use() + `.Errorf("proto: wrong wireType = %d for field ` + errFieldname + `", wireType)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if wireType != `, strconv.Itoa(wireType), `{`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return ` + fmtPkg.Use() + `.Errorf("proto: wrong wireType = %d for field ` + errFieldname + `", wireType)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.field(file, message, field, fieldname, proto3)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if field.IsRequired() {
0000000000000000000000000000000000000000;;					fieldBit, ok := rfMap[field.GetNumber()]
0000000000000000000000000000000000000000;;					if !ok {
0000000000000000000000000000000000000000;;						panic("field is required, but no bit registered")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`hasFields[`, strconv.Itoa(int(fieldBit/64)), `] |= uint64(`, fmt.Sprintf("0x%08x", 1<<(fieldBit%64)), `)`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`default:`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				c := []string{}
0000000000000000000000000000000000000000;;				for _, erange := range message.GetExtensionRange() {
0000000000000000000000000000000000000000;;					c = append(c, `((fieldNum >= `+strconv.Itoa(int(erange.GetStart()))+") && (fieldNum<"+strconv.Itoa(int(erange.GetEnd()))+`))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if `, strings.Join(c, "||"), `{`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`var sizeOfWire int`)
0000000000000000000000000000000000000000;;				p.P(`for {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`sizeOfWire++`)
0000000000000000000000000000000000000000;;				p.P(`wire >>= 7`)
0000000000000000000000000000000000000000;;				p.P(`if wire == 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`break`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`iNdEx-=sizeOfWire`)
0000000000000000000000000000000000000000;;				p.P(`skippy, err := skip`, p.localName+`(dAtA[iNdEx:])`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`if skippy < 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return ErrInvalidLength`, p.localName)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`if (iNdEx + skippy) > l {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(protoPkg.Use(), `.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])`)
0000000000000000000000000000000000000000;;				p.P(`iNdEx += skippy`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`iNdEx=preIndex`)
0000000000000000000000000000000000000000;;			p.P(`skippy, err := skip`, p.localName, `(dAtA[iNdEx:])`)
0000000000000000000000000000000000000000;;			p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return err`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`if skippy < 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ErrInvalidLength`, p.localName)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`if (iNdEx + skippy) > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			if gogoproto.HasUnrecognized(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.P(`m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`iNdEx += skippy`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				if !field.IsRequired() {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				fieldBit, ok := rfMap[field.GetNumber()]
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					panic("field is required, but no bit registered")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				p.P(`if hasFields[`, strconv.Itoa(int(fieldBit/64)), `] & uint64(`, fmt.Sprintf("0x%08x", 1<<(fieldBit%64)), `) == 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`return new(`, protoPkg.Use(), `.RequiredNotSetError)`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`return `, protoPkg.Use(), `.NewRequiredNotSetError("`, field.GetName(), `")`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P()
0000000000000000000000000000000000000000;;			p.P(`if iNdEx > l {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return ` + p.ioPkg.Use() + `.ErrUnexpectedEOF`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`return nil`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !p.atleastOne {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func skip` + p.localName + `(dAtA []byte) (n int, err error) {
0000000000000000000000000000000000000000;;			l := len(dAtA)
0000000000000000000000000000000000000000;;			iNdEx := 0
0000000000000000000000000000000000000000;;			for iNdEx < l {
0000000000000000000000000000000000000000;;				var wire uint64
0000000000000000000000000000000000000000;;				for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;					if shift >= 64 {
0000000000000000000000000000000000000000;;						return 0, ErrIntOverflow` + p.localName + `
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if iNdEx >= l {
0000000000000000000000000000000000000000;;						return 0, ` + p.ioPkg.Use() + `.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					b := dAtA[iNdEx]
0000000000000000000000000000000000000000;;					iNdEx++
0000000000000000000000000000000000000000;;					wire |= (uint64(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;					if b < 0x80 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				wireType := int(wire & 0x7)
0000000000000000000000000000000000000000;;				switch wireType {
0000000000000000000000000000000000000000;;				case 0:
0000000000000000000000000000000000000000;;					for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;						if shift >= 64 {
0000000000000000000000000000000000000000;;							return 0, ErrIntOverflow` + p.localName + `
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if iNdEx >= l {
0000000000000000000000000000000000000000;;							return 0, ` + p.ioPkg.Use() + `.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						iNdEx++
0000000000000000000000000000000000000000;;						if dAtA[iNdEx-1] < 0x80 {
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return iNdEx, nil
0000000000000000000000000000000000000000;;				case 1:
0000000000000000000000000000000000000000;;					iNdEx += 8
0000000000000000000000000000000000000000;;					return iNdEx, nil
0000000000000000000000000000000000000000;;				case 2:
0000000000000000000000000000000000000000;;					var length int
0000000000000000000000000000000000000000;;					for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;						if shift >= 64 {
0000000000000000000000000000000000000000;;							return 0, ErrIntOverflow` + p.localName + `
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						if iNdEx >= l {
0000000000000000000000000000000000000000;;							return 0, ` + p.ioPkg.Use() + `.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						b := dAtA[iNdEx]
0000000000000000000000000000000000000000;;						iNdEx++
0000000000000000000000000000000000000000;;						length |= (int(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;						if b < 0x80 {
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					iNdEx += length
0000000000000000000000000000000000000000;;					if length < 0 {
0000000000000000000000000000000000000000;;						return 0, ErrInvalidLength` + p.localName + `
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return iNdEx, nil
0000000000000000000000000000000000000000;;				case 3:
0000000000000000000000000000000000000000;;					for {
0000000000000000000000000000000000000000;;						var innerWire uint64
0000000000000000000000000000000000000000;;						var start int = iNdEx
0000000000000000000000000000000000000000;;						for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;							if shift >= 64 {
0000000000000000000000000000000000000000;;								return 0, ErrIntOverflow` + p.localName + `
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if iNdEx >= l {
0000000000000000000000000000000000000000;;								return 0, ` + p.ioPkg.Use() + `.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							b := dAtA[iNdEx]
0000000000000000000000000000000000000000;;							iNdEx++
0000000000000000000000000000000000000000;;							innerWire |= (uint64(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;							if b < 0x80 {
0000000000000000000000000000000000000000;;								break
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						innerWireType := int(innerWire & 0x7)
0000000000000000000000000000000000000000;;						if innerWireType == 4 {
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						next, err := skip` + p.localName + `(dAtA[start:])
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							return 0, err
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						iNdEx = start + next
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return iNdEx, nil
0000000000000000000000000000000000000000;;				case 4:
0000000000000000000000000000000000000000;;					return iNdEx, nil
0000000000000000000000000000000000000000;;				case 5:
0000000000000000000000000000000000000000;;					iNdEx += 4
0000000000000000000000000000000000000000;;					return iNdEx, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return 0, ` + fmtPkg.Use() + `.Errorf("proto: illegal wireType %d", wireType)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			panic("unreachable")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			ErrInvalidLength` + p.localName + ` = ` + fmtPkg.Use() + `.Errorf("proto: negative length found during unmarshaling")
0000000000000000000000000000000000000000;;			ErrIntOverflow` + p.localName + ` = ` + fmtPkg.Use() + `.Errorf("proto: integer overflow")
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewUnmarshal())
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewUnsafeUnmarshal())
0000000000000000000000000000000000000000;;	}
