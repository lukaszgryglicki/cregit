0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/testgen/testgen.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/testgen/testgen.go][vendor/github.com/gogo/protobuf/plugin/testgen/testgen.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The testgen plugin generates Test and Benchmark functions for each message.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Tests are enabled using the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Benchmarks are enabled using the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - benchgen
0000000000000000000000000000000000000000;;	  - benchgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  option (gogoproto.testgen_all) = true;
0000000000000000000000000000000000000000;;	  option (gogoproto.benchgen_all) = true;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message A {
0000000000000000000000000000000000000000;;		optional string Description = 1 [(gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;		optional int64 Number = 2 [(gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;		optional bytes Id = 3 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uuid", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the testgen plugin, will generate the following test code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestAProto(t *testing.T) {
0000000000000000000000000000000000000000;;			popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedA(popr, false)
0000000000000000000000000000000000000000;;			dAtA, err := github_com_gogo_protobuf_proto.Marshal(p)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			msg := &A{}
0000000000000000000000000000000000000000;;			if err := github_com_gogo_protobuf_proto.Unmarshal(dAtA, msg); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range dAtA {
0000000000000000000000000000000000000000;;				dAtA[i] = byte(popr.Intn(256))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := p.VerboseEqual(msg); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !p.Equal(msg) {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !Proto %#v", msg, p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func BenchmarkAProtoMarshal(b *testing.B) {
0000000000000000000000000000000000000000;;			popr := math_rand.New(math_rand.NewSource(616))
0000000000000000000000000000000000000000;;			total := 0
0000000000000000000000000000000000000000;;			pops := make([]*A, 10000)
0000000000000000000000000000000000000000;;			for i := 0; i < 10000; i++ {
0000000000000000000000000000000000000000;;				pops[i] = NewPopulatedA(popr, false)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b.ResetTimer()
0000000000000000000000000000000000000000;;			for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;				dAtA, err := github_com_gogo_protobuf_proto.Marshal(pops[i%10000])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					panic(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				total += len(dAtA)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b.SetBytes(int64(total / b.N))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func BenchmarkAProtoUnmarshal(b *testing.B) {
0000000000000000000000000000000000000000;;			popr := math_rand.New(math_rand.NewSource(616))
0000000000000000000000000000000000000000;;			total := 0
0000000000000000000000000000000000000000;;			datas := make([][]byte, 10000)
0000000000000000000000000000000000000000;;			for i := 0; i < 10000; i++ {
0000000000000000000000000000000000000000;;				dAtA, err := github_com_gogo_protobuf_proto.Marshal(NewPopulatedA(popr, false))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					panic(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				datas[i] = dAtA
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			msg := &A{}
0000000000000000000000000000000000000000;;			b.ResetTimer()
0000000000000000000000000000000000000000;;			for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;				total += len(datas[i%10000])
0000000000000000000000000000000000000000;;				if err := github_com_gogo_protobuf_proto.Unmarshal(datas[i%10000], msg); err != nil {
0000000000000000000000000000000000000000;;					panic(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b.SetBytes(int64(total / b.N))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestAJSON(t *testing1.T) {
0000000000000000000000000000000000000000;;			popr := math_rand1.New(math_rand1.NewSource(time1.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedA(popr, true)
0000000000000000000000000000000000000000;;			jsondata, err := encoding_json.Marshal(p)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			msg := &A{}
0000000000000000000000000000000000000000;;			err = encoding_json.Unmarshal(jsondata, msg)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := p.VerboseEqual(msg); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !p.Equal(msg) {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !Json Equal %#v", msg, p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestAProtoText(t *testing2.T) {
0000000000000000000000000000000000000000;;			popr := math_rand2.New(math_rand2.NewSource(time2.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedA(popr, true)
0000000000000000000000000000000000000000;;			dAtA := github_com_gogo_protobuf_proto1.MarshalTextString(p)
0000000000000000000000000000000000000000;;			msg := &A{}
0000000000000000000000000000000000000000;;			if err := github_com_gogo_protobuf_proto1.UnmarshalText(dAtA, msg); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := p.VerboseEqual(msg); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !p.Equal(msg) {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !Proto %#v", msg, p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestAProtoCompactText(t *testing2.T) {
0000000000000000000000000000000000000000;;			popr := math_rand2.New(math_rand2.NewSource(time2.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedA(popr, true)
0000000000000000000000000000000000000000;;			dAtA := github_com_gogo_protobuf_proto1.CompactTextString(p)
0000000000000000000000000000000000000000;;			msg := &A{}
0000000000000000000000000000000000000000;;			if err := github_com_gogo_protobuf_proto1.UnmarshalText(dAtA, msg); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := p.VerboseEqual(msg); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !p.Equal(msg) {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !Proto %#v", msg, p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Other registered tests are also generated.
0000000000000000000000000000000000000000;;	Tests are registered to this test plugin by calling the following function.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func RegisterTestPlugin(newFunc NewTestPlugin)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	where NewTestPlugin is:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  type NewTestPlugin func(g *generator.Generator) TestPlugin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and TestPlugin is an interface:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  type TestPlugin interface {
0000000000000000000000000000000000000000;;		Generate(imports generator.PluginImports, file *generator.FileDescriptor) (used bool)
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Plugins that use this interface include:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - populate
0000000000000000000000000000000000000000;;	  - gostring
0000000000000000000000000000000000000000;;	  - equal
0000000000000000000000000000000000000000;;	  - union
0000000000000000000000000000000000000000;;	  - and more
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Please look at these plugins as examples of how to create your own.
0000000000000000000000000000000000000000;;	A good idea is to let each plugin generate its own tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package testgen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestPlugin interface {
0000000000000000000000000000000000000000;;		Generate(imports generator.PluginImports, file *generator.FileDescriptor) (used bool)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NewTestPlugin func(g *generator.Generator) TestPlugin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var testplugins = make([]NewTestPlugin, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegisterTestPlugin(newFunc NewTestPlugin) {
0000000000000000000000000000000000000000;;		testplugins = append(testplugins, newFunc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type plugin struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		tests []TestPlugin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPlugin() *plugin {
0000000000000000000000000000000000000000;;		return &plugin{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Name() string {
0000000000000000000000000000000000000000;;		return "testgen"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;		p.tests = make([]TestPlugin, 0, len(testplugins))
0000000000000000000000000000000000000000;;		for i := range testplugins {
0000000000000000000000000000000000000000;;			p.tests = append(p.tests, testplugins[i](g))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		atLeastOne := false
0000000000000000000000000000000000000000;;		for i := range p.tests {
0000000000000000000000000000000000000000;;			used := p.tests[i].Generate(p.PluginImports, file)
0000000000000000000000000000000000000000;;			if used {
0000000000000000000000000000000000000000;;				atLeastOne = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if atLeastOne {
0000000000000000000000000000000000000000;;			p.P(`//These tests are generated by github.com/gogo/protobuf/plugin/testgen`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testProto struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newProto(g *generator.Generator) TestPlugin {
0000000000000000000000000000000000000000;;		return &testProto{g}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testProto) Generate(imports generator.PluginImports, file *generator.FileDescriptor) bool {
0000000000000000000000000000000000000000;;		used := false
0000000000000000000000000000000000000000;;		testingPkg := imports.NewImport("testing")
0000000000000000000000000000000000000000;;		randPkg := imports.NewImport("math/rand")
0000000000000000000000000000000000000000;;		timePkg := imports.NewImport("time")
0000000000000000000000000000000000000000;;		unsafePkg := imports.NewImport("unsafe")
0000000000000000000000000000000000000000;;		protoPkg := imports.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = imports.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hasUnsafe := gogoproto.IsUnsafeMarshaler(file.FileDescriptorProto, message.DescriptorProto) ||
0000000000000000000000000000000000000000;;				gogoproto.IsUnsafeUnmarshaler(file.FileDescriptorProto, message.DescriptorProto)
0000000000000000000000000000000000000000;;			if gogoproto.HasTestGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				used = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				p.P(`func Test`, ccTypeName, `Proto(t *`, testingPkg.Use(), `.T) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if hasUnsafe {
0000000000000000000000000000000000000000;;					p.P(`var bigendian uint32 = 0x01020304`)
0000000000000000000000000000000000000000;;					p.P(`if *(*byte)(`, unsafePkg.Use(), `.Pointer(&bigendian)) == 1 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Skip("unsafe does not work on big endian architectures")`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`seed := `, timePkg.Use(), `.Now().UnixNano()`)
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(seed))`)
0000000000000000000000000000000000000000;;				p.P(`p := NewPopulated`, ccTypeName, `(popr, false)`)
0000000000000000000000000000000000000000;;				p.P(`dAtA, err := `, protoPkg.Use(), `.Marshal(p)`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`msg := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, protoPkg.Use(), `.Unmarshal(dAtA, msg); err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`littlefuzz := make([]byte, len(dAtA))`)
0000000000000000000000000000000000000000;;				p.P(`copy(littlefuzz, dAtA)`)
0000000000000000000000000000000000000000;;				p.P(`for i := range dAtA {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = byte(popr.Intn(256))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				if gogoproto.HasVerboseEqual(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`if err := p.VerboseEqual(msg); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, %#v !VerboseProto %#v, since %v", seed, msg, p, err)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if !p.Equal(msg) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, %#v !Proto %#v", seed, msg, p)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`if len(littlefuzz) > 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`fuzzamount := 100`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < fuzzamount; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))`)
0000000000000000000000000000000000000000;;				p.P(`littlefuzz = append(littlefuzz, byte(popr.Intn(256)))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`// shouldn't panic`)
0000000000000000000000000000000000000000;;				p.P(`_ = `, protoPkg.Use(), `.Unmarshal(littlefuzz, msg)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if gogoproto.HasTestGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				if gogoproto.IsMarshaler(file.FileDescriptorProto, message.DescriptorProto) || gogoproto.IsUnsafeMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`func Test`, ccTypeName, `MarshalTo(t *`, testingPkg.Use(), `.T) {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					if hasUnsafe {
0000000000000000000000000000000000000000;;						p.P(`var bigendian uint32 = 0x01020304`)
0000000000000000000000000000000000000000;;						p.P(`if *(*byte)(`, unsafePkg.Use(), `.Pointer(&bigendian)) == 1 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`t.Skip("unsafe does not work on big endian architectures")`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`seed := `, timePkg.Use(), `.Now().UnixNano()`)
0000000000000000000000000000000000000000;;					p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(seed))`)
0000000000000000000000000000000000000000;;					p.P(`p := NewPopulated`, ccTypeName, `(popr, false)`)
0000000000000000000000000000000000000000;;					if gogoproto.IsProtoSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;						p.P(`size := p.ProtoSize()`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`size := p.Size()`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`dAtA := make([]byte, size)`)
0000000000000000000000000000000000000000;;					p.P(`for i := range dAtA {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`dAtA[i] = byte(popr.Intn(256))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`_, err := p.MarshalTo(dAtA)`)
0000000000000000000000000000000000000000;;					p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`msg := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;					p.P(`if err := `, protoPkg.Use(), `.Unmarshal(dAtA, msg); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`for i := range dAtA {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`dAtA[i] = byte(popr.Intn(256))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					if gogoproto.HasVerboseEqual(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;						p.P(`if err := p.VerboseEqual(msg); err != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`t.Fatalf("seed = %d, %#v !VerboseProto %#v, since %v", seed, msg, p, err)`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`if !p.Equal(msg) {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, %#v !Proto %#v", seed, msg, p)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if gogoproto.HasBenchGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				used = true
0000000000000000000000000000000000000000;;				p.P(`func Benchmark`, ccTypeName, `ProtoMarshal(b *`, testingPkg.Use(), `.B) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(616))`)
0000000000000000000000000000000000000000;;				p.P(`total := 0`)
0000000000000000000000000000000000000000;;				p.P(`pops := make([]*`, ccTypeName, `, 10000)`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < 10000; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`pops[i] = NewPopulated`, ccTypeName, `(popr, false)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`b.ResetTimer()`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < b.N; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA, err := `, protoPkg.Use(), `.Marshal(pops[i%10000])`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`panic(err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`total += len(dAtA)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`b.SetBytes(int64(total / b.N))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				p.P(`func Benchmark`, ccTypeName, `ProtoUnmarshal(b *`, testingPkg.Use(), `.B) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(616))`)
0000000000000000000000000000000000000000;;				p.P(`total := 0`)
0000000000000000000000000000000000000000;;				p.P(`datas := make([][]byte, 10000)`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < 10000; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA, err := `, protoPkg.Use(), `.Marshal(NewPopulated`, ccTypeName, `(popr, false))`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`panic(err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`datas[i] = dAtA`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`msg := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;				p.P(`b.ResetTimer()`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < b.N; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`total += len(datas[i%10000])`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, protoPkg.Use(), `.Unmarshal(datas[i%10000], msg); err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`panic(err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`b.SetBytes(int64(total / b.N))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return used
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testJson struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newJson(g *generator.Generator) TestPlugin {
0000000000000000000000000000000000000000;;		return &testJson{g}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testJson) Generate(imports generator.PluginImports, file *generator.FileDescriptor) bool {
0000000000000000000000000000000000000000;;		used := false
0000000000000000000000000000000000000000;;		testingPkg := imports.NewImport("testing")
0000000000000000000000000000000000000000;;		randPkg := imports.NewImport("math/rand")
0000000000000000000000000000000000000000;;		timePkg := imports.NewImport("time")
0000000000000000000000000000000000000000;;		jsonPkg := imports.NewImport("github.com/gogo/protobuf/jsonpb")
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasTestGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				used = true
0000000000000000000000000000000000000000;;				p.P(`func Test`, ccTypeName, `JSON(t *`, testingPkg.Use(), `.T) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`seed := `, timePkg.Use(), `.Now().UnixNano()`)
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(seed))`)
0000000000000000000000000000000000000000;;				p.P(`p := NewPopulated`, ccTypeName, `(popr, true)`)
0000000000000000000000000000000000000000;;				p.P(`marshaler := `, jsonPkg.Use(), `.Marshaler{}`)
0000000000000000000000000000000000000000;;				p.P(`jsondata, err := marshaler.MarshalToString(p)`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`msg := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;				p.P(`err = `, jsonPkg.Use(), `.UnmarshalString(jsondata, msg)`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				if gogoproto.HasVerboseEqual(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`if err := p.VerboseEqual(msg); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, %#v !VerboseProto %#v, since %v", seed, msg, p, err)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if !p.Equal(msg) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, %#v !Json Equal %#v", seed, msg, p)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return used
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testText struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newText(g *generator.Generator) TestPlugin {
0000000000000000000000000000000000000000;;		return &testText{g}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testText) Generate(imports generator.PluginImports, file *generator.FileDescriptor) bool {
0000000000000000000000000000000000000000;;		used := false
0000000000000000000000000000000000000000;;		testingPkg := imports.NewImport("testing")
0000000000000000000000000000000000000000;;		randPkg := imports.NewImport("math/rand")
0000000000000000000000000000000000000000;;		timePkg := imports.NewImport("time")
0000000000000000000000000000000000000000;;		protoPkg := imports.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = imports.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		//fmtPkg := imports.NewImport("fmt")
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasTestGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				used = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				p.P(`func Test`, ccTypeName, `ProtoText(t *`, testingPkg.Use(), `.T) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`seed := `, timePkg.Use(), `.Now().UnixNano()`)
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(seed))`)
0000000000000000000000000000000000000000;;				p.P(`p := NewPopulated`, ccTypeName, `(popr, true)`)
0000000000000000000000000000000000000000;;				p.P(`dAtA := `, protoPkg.Use(), `.MarshalTextString(p)`)
0000000000000000000000000000000000000000;;				p.P(`msg := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, protoPkg.Use(), `.UnmarshalText(dAtA, msg); err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				if gogoproto.HasVerboseEqual(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`if err := p.VerboseEqual(msg); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, %#v !VerboseProto %#v, since %v", seed, msg, p, err)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if !p.Equal(msg) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, %#v !Proto %#v", seed, msg, p)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				p.P(`func Test`, ccTypeName, `ProtoCompactText(t *`, testingPkg.Use(), `.T) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`seed := `, timePkg.Use(), `.Now().UnixNano()`)
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(seed))`)
0000000000000000000000000000000000000000;;				p.P(`p := NewPopulated`, ccTypeName, `(popr, true)`)
0000000000000000000000000000000000000000;;				p.P(`dAtA := `, protoPkg.Use(), `.CompactTextString(p)`)
0000000000000000000000000000000000000000;;				p.P(`msg := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;				p.P(`if err := `, protoPkg.Use(), `.UnmarshalText(dAtA, msg); err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				if gogoproto.HasVerboseEqual(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`if err := p.VerboseEqual(msg); err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`t.Fatalf("seed = %d, %#v !VerboseProto %#v, since %v", seed, msg, p, err)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if !p.Equal(msg) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, %#v !Proto %#v", seed, msg, p)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return used
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		RegisterTestPlugin(newProto)
0000000000000000000000000000000000000000;;		RegisterTestPlugin(newJson)
0000000000000000000000000000000000000000;;		RegisterTestPlugin(newText)
0000000000000000000000000000000000000000;;	}
