0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/size/size.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/size/size.go][vendor/github.com/gogo/protobuf/plugin/size/size.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The size plugin generates a Size or ProtoSize method for each message.
0000000000000000000000000000000000000000;;	This is useful with the MarshalTo method generated by the marshalto plugin and the
0000000000000000000000000000000000000000;;	gogoproto.marshaler and gogoproto.marshaler_all extensions.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - sizer
0000000000000000000000000000000000000000;;	  - sizer_all
0000000000000000000000000000000000000000;;	  - protosizer
0000000000000000000000000000000000000000;;	  - protosizer_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The size plugin also generates a test given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	And a benchmark given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - benchgen
0000000000000000000000000000000000000000;;	  - benchgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  option (gogoproto.sizer_all) = true;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message B {
0000000000000000000000000000000000000000;;		option (gogoproto.description) = true;
0000000000000000000000000000000000000000;;		optional A A = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
0000000000000000000000000000000000000000;;		repeated bytes G = 2 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uint128", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the size plugin, will generate the following code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func (m *B) Size() (n int) {
0000000000000000000000000000000000000000;;		var l int
0000000000000000000000000000000000000000;;		_ = l
0000000000000000000000000000000000000000;;		l = m.A.Size()
0000000000000000000000000000000000000000;;		n += 1 + l + sovExample(uint64(l))
0000000000000000000000000000000000000000;;		if len(m.G) > 0 {
0000000000000000000000000000000000000000;;			for _, e := range m.G {
0000000000000000000000000000000000000000;;				l = e.Size()
0000000000000000000000000000000000000000;;				n += 1 + l + sovExample(uint64(l))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.XXX_unrecognized != nil {
0000000000000000000000000000000000000000;;			n += len(m.XXX_unrecognized)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and the following test code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestBSize(t *testing5.T) {
0000000000000000000000000000000000000000;;			popr := math_rand5.New(math_rand5.NewSource(time5.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedB(popr, true)
0000000000000000000000000000000000000000;;			dAtA, err := github_com_gogo_protobuf_proto2.Marshal(p)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			size := p.Size()
0000000000000000000000000000000000000000;;			if len(dAtA) != size {
0000000000000000000000000000000000000000;;				t.Fatalf("size %v != marshalled size %v", size, len(dAtA))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func BenchmarkBSize(b *testing5.B) {
0000000000000000000000000000000000000000;;			popr := math_rand5.New(math_rand5.NewSource(616))
0000000000000000000000000000000000000000;;			total := 0
0000000000000000000000000000000000000000;;			pops := make([]*B, 1000)
0000000000000000000000000000000000000000;;			for i := 0; i < 1000; i++ {
0000000000000000000000000000000000000000;;				pops[i] = NewPopulatedB(popr, false)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b.ResetTimer()
0000000000000000000000000000000000000000;;			for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;				total += pops[i%1000].Size()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b.SetBytes(int64(total / b.N))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The sovExample function is a size of varint function for the example.pb.go file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package size
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/vanity"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type size struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		atleastOne bool
0000000000000000000000000000000000000000;;		localName  string
0000000000000000000000000000000000000000;;		typesPkg   generator.Single
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSize() *size {
0000000000000000000000000000000000000000;;		return &size{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) Name() string {
0000000000000000000000000000000000000000;;		return "size"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func wireToType(wire string) int {
0000000000000000000000000000000000000000;;		switch wire {
0000000000000000000000000000000000000000;;		case "fixed64":
0000000000000000000000000000000000000000;;			return proto.WireFixed64
0000000000000000000000000000000000000000;;		case "fixed32":
0000000000000000000000000000000000000000;;			return proto.WireFixed32
0000000000000000000000000000000000000000;;		case "varint":
0000000000000000000000000000000000000000;;			return proto.WireVarint
0000000000000000000000000000000000000000;;		case "bytes":
0000000000000000000000000000000000000000;;			return proto.WireBytes
0000000000000000000000000000000000000000;;		case "group":
0000000000000000000000000000000000000000;;			return proto.WireBytes
0000000000000000000000000000000000000000;;		case "zigzag32":
0000000000000000000000000000000000000000;;			return proto.WireVarint
0000000000000000000000000000000000000000;;		case "zigzag64":
0000000000000000000000000000000000000000;;			return proto.WireVarint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("unreachable")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func keySize(fieldNumber int32, wireType int) int {
0000000000000000000000000000000000000000;;		x := uint32(fieldNumber)<<3 | uint32(wireType)
0000000000000000000000000000000000000000;;		size := 0
0000000000000000000000000000000000000000;;		for size = 0; x > 127; size++ {
0000000000000000000000000000000000000000;;			x >>= 7
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		size++
0000000000000000000000000000000000000000;;		return size
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) sizeVarint() {
0000000000000000000000000000000000000000;;		p.P(`
0000000000000000000000000000000000000000;;		func sov`, p.localName, `(x uint64) (n int) {
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				n++
0000000000000000000000000000000000000000;;				x >>= 7
0000000000000000000000000000000000000000;;				if x == 0 {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return n
0000000000000000000000000000000000000000;;		}`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) sizeZigZag() {
0000000000000000000000000000000000000000;;		p.P(`func soz`, p.localName, `(x uint64) (n int) {
0000000000000000000000000000000000000000;;			return sov`, p.localName, `(uint64((x << 1) ^ uint64((int64(x) >> 63))))
0000000000000000000000000000000000000000;;		}`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) std(field *descriptor.FieldDescriptorProto, name string) (string, bool) {
0000000000000000000000000000000000000000;;		if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;			if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;				return p.typesPkg.Use() + `.SizeOfStdTime(*` + name + `)`, true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return p.typesPkg.Use() + `.SizeOfStdTime(` + name + `)`, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;			if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;				return p.typesPkg.Use() + `.SizeOfStdDuration(*` + name + `)`, true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return p.typesPkg.Use() + `.SizeOfStdDuration(` + name + `)`, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) generateField(proto3 bool, file *generator.FileDescriptor, message *generator.Descriptor, field *descriptor.FieldDescriptorProto, sizeName string) {
0000000000000000000000000000000000000000;;		fieldname := p.GetOneOfFieldName(message, field)
0000000000000000000000000000000000000000;;		nullable := gogoproto.IsNullable(field)
0000000000000000000000000000000000000000;;		repeated := field.IsRepeated()
0000000000000000000000000000000000000000;;		doNilCheck := gogoproto.NeedsNilCheck(proto3, field)
0000000000000000000000000000000000000000;;		if repeated {
0000000000000000000000000000000000000000;;			p.P(`if len(m.`, fieldname, `) > 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;		} else if doNilCheck {
0000000000000000000000000000000000000000;;			p.P(`if m.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		packed := field.IsPacked() || (proto3 && field.IsPacked3())
0000000000000000000000000000000000000000;;		_, wire := p.GoType(message, field)
0000000000000000000000000000000000000000;;		wireType := wireToType(wire)
0000000000000000000000000000000000000000;;		fieldNumber := field.GetNumber()
0000000000000000000000000000000000000000;;		if packed {
0000000000000000000000000000000000000000;;			wireType = proto.WireBytes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		key := keySize(fieldNumber, wireType)
0000000000000000000000000000000000000000;;		switch *field.Type {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_DOUBLE,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(len(m.`, fieldname, `)*8))`, `+len(m.`, fieldname, `)*8`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+8), `*len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+8))
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+8))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+8))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FLOAT,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(len(m.`, fieldname, `)*4))`, `+len(m.`, fieldname, `)*4`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+4), `*len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+4))
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+4))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+4))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_ENUM,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				p.P(`l = 0`)
0000000000000000000000000000000000000000;;				p.P(`for _, e := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`l+=sov`, p.localName, `(uint64(e))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(l))+l`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, e := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(e))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(*m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(len(m.`, fieldname, `)))`, `+len(m.`, fieldname, `)*1`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+1), `*len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+1))
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+1))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key+1))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;			if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, s := range m.`, fieldname, ` { `)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`l = len(s)`)
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`l=len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`if l > 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`l=len(*m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`l=len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_GROUP:
0000000000000000000000000000000000000000;;			panic(fmt.Errorf("size does not support group %v", fieldname))
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;			if p.IsMap(field) {
0000000000000000000000000000000000000000;;				m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;				_, keywire := p.GoType(nil, m.KeyAliasField)
0000000000000000000000000000000000000000;;				valuegoTyp, _ := p.GoType(nil, m.ValueField)
0000000000000000000000000000000000000000;;				valuegoAliasTyp, valuewire := p.GoType(nil, m.ValueAliasField)
0000000000000000000000000000000000000000;;				_, fieldwire := p.GoType(nil, field)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				nullable, valuegoTyp, valuegoAliasTyp = generator.GoMapValueTypes(field, m.ValueField, valuegoTyp, valuegoAliasTyp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				fieldKeySize := keySize(field.GetNumber(), wireToType(fieldwire))
0000000000000000000000000000000000000000;;				keyKeySize := keySize(1, wireToType(keywire))
0000000000000000000000000000000000000000;;				valueKeySize := keySize(2, wireToType(valuewire))
0000000000000000000000000000000000000000;;				p.P(`for k, v := range m.`, fieldname, ` { `)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`_ = k`)
0000000000000000000000000000000000000000;;				p.P(`_ = v`)
0000000000000000000000000000000000000000;;				sum := []string{strconv.Itoa(keyKeySize)}
0000000000000000000000000000000000000000;;				switch m.KeyField.GetType() {
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_DOUBLE,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;					sum = append(sum, `8`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_FLOAT,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;					sum = append(sum, `4`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_ENUM,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;					sum = append(sum, `sov`+p.localName+`(uint64(k))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;					sum = append(sum, `1`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_STRING,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;					sum = append(sum, `len(k)+sov`+p.localName+`(uint64(len(k)))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_SINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;					sum = append(sum, `soz`+p.localName+`(uint64(k))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch m.ValueField.GetType() {
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_DOUBLE,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(8))
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_FLOAT,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(4))
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_ENUM,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `sov`+p.localName+`(uint64(v))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `1`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `len(v)+sov`+p.localName+`(uint64(len(v)))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;					if gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;						p.P(`l = 0`)
0000000000000000000000000000000000000000;;						if nullable {
0000000000000000000000000000000000000000;;							p.P(`if v != nil {`)
0000000000000000000000000000000000000000;;							p.In()
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.P(`l = v.`, sizeName, `()`)
0000000000000000000000000000000000000000;;						p.P(`l += `, strconv.Itoa(valueKeySize), ` + sov`+p.localName+`(uint64(l))`)
0000000000000000000000000000000000000000;;						if nullable {
0000000000000000000000000000000000000000;;							p.Out()
0000000000000000000000000000000000000000;;							p.P(`}`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						sum = append(sum, `l`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`l = 0`)
0000000000000000000000000000000000000000;;						if proto3 {
0000000000000000000000000000000000000000;;							p.P(`if len(v) > 0 {`)
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							p.P(`if v != nil {`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`l = `, strconv.Itoa(valueKeySize), ` + len(v)+sov`+p.localName+`(uint64(len(v)))`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						sum = append(sum, `l`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_SINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `soz`+p.localName+`(uint64(v))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;					stdSizeCall, stdOk := p.std(field, "v")
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P(`l = 0`)
0000000000000000000000000000000000000000;;						p.P(`if v != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						if stdOk {
0000000000000000000000000000000000000000;;							p.P(`l = `, stdSizeCall)
0000000000000000000000000000000000000000;;						} else if valuegoTyp != valuegoAliasTyp {
0000000000000000000000000000000000000000;;							p.P(`l = ((`, valuegoTyp, `)(v)).`, sizeName, `()`)
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							p.P(`l = v.`, sizeName, `()`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.P(`l += `, strconv.Itoa(valueKeySize), ` + sov`+p.localName+`(uint64(l))`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						sum = append(sum, `l`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						if stdOk {
0000000000000000000000000000000000000000;;							p.P(`l = `, stdSizeCall)
0000000000000000000000000000000000000000;;						} else if valuegoTyp != valuegoAliasTyp {
0000000000000000000000000000000000000000;;							p.P(`l = ((*`, valuegoTyp, `)(&v)).`, sizeName, `()`)
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							p.P(`l = v.`, sizeName, `()`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;						sum = append(sum, `l+sov`+p.localName+`(uint64(l))`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`mapEntrySize := `, strings.Join(sum, "+"))
0000000000000000000000000000000000000000;;				p.P(`n+=mapEntrySize+`, fieldKeySize, `+sov`, p.localName, `(uint64(mapEntrySize))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, e := range m.`, fieldname, ` { `)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				stdSizeCall, stdOk := p.std(field, "e")
0000000000000000000000000000000000000000;;				if stdOk {
0000000000000000000000000000000000000000;;					p.P(`l=`, stdSizeCall)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`l=e.`, sizeName, `()`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				stdSizeCall, stdOk := p.std(field, "m."+fieldname)
0000000000000000000000000000000000000000;;				if stdOk {
0000000000000000000000000000000000000000;;					p.P(`l=`, stdSizeCall)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`l=m.`, fieldname, `.`, sizeName, `()`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;			if !gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;				if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, b := range m.`, fieldname, ` { `)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`l = len(b)`)
0000000000000000000000000000000000000000;;					p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`l=len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;					p.P(`if l > 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`l=len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;					p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, e := range m.`, fieldname, ` { `)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`l=e.`, sizeName, `()`)
0000000000000000000000000000000000000000;;					p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`l=m.`, fieldname, `.`, sizeName, `()`)
0000000000000000000000000000000000000000;;					p.P(`n+=`, strconv.Itoa(key), `+l+sov`, p.localName, `(uint64(l))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				p.P(`l = 0`)
0000000000000000000000000000000000000000;;				p.P(`for _, e := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`l+=soz`, p.localName, `(uint64(e))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+sov`, p.localName, `(uint64(l))+l`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, e := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+soz`, p.localName, `(uint64(e))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+soz`, p.localName, `(uint64(m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if nullable {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+soz`, p.localName, `(uint64(*m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`n+=`, strconv.Itoa(key), `+soz`, p.localName, `(uint64(m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("not implemented")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if repeated || doNilCheck {
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *size) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		p.atleastOne = false
0000000000000000000000000000000000000000;;		p.localName = generator.FileName(file)
0000000000000000000000000000000000000000;;		p.typesPkg = p.NewImport("github.com/gogo/protobuf/types")
0000000000000000000000000000000000000000;;		protoPkg := p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = p.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			sizeName := ""
0000000000000000000000000000000000000000;;			if gogoproto.IsSizer(file.FileDescriptorProto, message.DescriptorProto) && gogoproto.IsProtoSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				fmt.Fprintf(os.Stderr, "ERROR: message %v cannot support both sizer and protosizer plugins\n", generator.CamelCase(*message.Name))
0000000000000000000000000000000000000000;;				os.Exit(1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.IsSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				sizeName = "Size"
0000000000000000000000000000000000000000;;			} else if gogoproto.IsProtoSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				sizeName = "ProtoSize"
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.atleastOne = true
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			p.P(`func (m *`, ccTypeName, `) `, sizeName, `() (n int) {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`var l int`)
0000000000000000000000000000000000000000;;			p.P(`_ = l`)
0000000000000000000000000000000000000000;;			oneofs := make(map[string]struct{})
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;				if !oneof {
0000000000000000000000000000000000000000;;					proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;					p.generateField(proto3, file, message, field, sizeName)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;					if _, ok := oneofs[fieldname]; ok {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						oneofs[fieldname] = struct{}{}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`n+=m.`, fieldname, `.`, sizeName, `()`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				if gogoproto.HasExtensionsMap(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`n += `, protoPkg.Use(), `.SizeOfInternalExtension(m)`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if m.XXX_extensions != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`n+=len(m.XXX_extensions)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasUnrecognized(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.P(`if m.XXX_unrecognized != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`n+=len(m.XXX_unrecognized)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`return n`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//Generate Size methods for oneof fields
0000000000000000000000000000000000000000;;			m := proto.Clone(message.DescriptorProto).(*descriptor.DescriptorProto)
0000000000000000000000000000000000000000;;			for _, f := range m.Field {
0000000000000000000000000000000000000000;;				oneof := f.OneofIndex != nil
0000000000000000000000000000000000000000;;				if !oneof {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ccTypeName := p.OneOfTypeName(message, f)
0000000000000000000000000000000000000000;;				p.P(`func (m *`, ccTypeName, `) `, sizeName, `() (n int) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`var l int`)
0000000000000000000000000000000000000000;;				p.P(`_ = l`)
0000000000000000000000000000000000000000;;				vanity.TurnOffNullableForNativeTypesWithoutDefaultsOnly(f)
0000000000000000000000000000000000000000;;				p.generateField(false, file, message, f, sizeName)
0000000000000000000000000000000000000000;;				p.P(`return n`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !p.atleastOne {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.sizeVarint()
0000000000000000000000000000000000000000;;		p.sizeZigZag()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewSize())
0000000000000000000000000000000000000000;;	}
