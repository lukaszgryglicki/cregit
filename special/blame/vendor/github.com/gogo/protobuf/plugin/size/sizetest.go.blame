0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/size/sizetest.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/size/sizetest.go][vendor/github.com/gogo/protobuf/plugin/size/sizetest.go];	
0000000000000000000000000000000000000000;;	package size
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/plugin/testgen"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type test struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTest(g *generator.Generator) testgen.TestPlugin {
0000000000000000000000000000000000000000;;		return &test{g}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *test) Generate(imports generator.PluginImports, file *generator.FileDescriptor) bool {
0000000000000000000000000000000000000000;;		used := false
0000000000000000000000000000000000000000;;		randPkg := imports.NewImport("math/rand")
0000000000000000000000000000000000000000;;		timePkg := imports.NewImport("time")
0000000000000000000000000000000000000000;;		testingPkg := imports.NewImport("testing")
0000000000000000000000000000000000000000;;		protoPkg := imports.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = imports.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			sizeName := ""
0000000000000000000000000000000000000000;;			if gogoproto.IsSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				sizeName = "Size"
0000000000000000000000000000000000000000;;			} else if gogoproto.IsProtoSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				sizeName = "ProtoSize"
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if gogoproto.HasTestGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				used = true
0000000000000000000000000000000000000000;;				p.P(`func Test`, ccTypeName, sizeName, `(t *`, testingPkg.Use(), `.T) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`seed := `, timePkg.Use(), `.Now().UnixNano()`)
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(seed))`)
0000000000000000000000000000000000000000;;				p.P(`p := NewPopulated`, ccTypeName, `(popr, true)`)
0000000000000000000000000000000000000000;;				p.P(`size2 := `, protoPkg.Use(), `.Size(p)`)
0000000000000000000000000000000000000000;;				p.P(`dAtA, err := `, protoPkg.Use(), `.Marshal(p)`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Fatalf("seed = %d, err = %v", seed, err)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`size := p.`, sizeName, `()`)
0000000000000000000000000000000000000000;;				p.P(`if len(dAtA) != size {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Errorf("seed = %d, size %v != marshalled size %v", seed, size, len(dAtA))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`if size2 != size {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Errorf("seed = %d, size %v != before marshal proto.Size %v", seed, size, size2)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`size3 := `, protoPkg.Use(), `.Size(p)`)
0000000000000000000000000000000000000000;;				p.P(`if size3 != size {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`t.Errorf("seed = %d, size %v != after marshal proto.Size %v", seed, size, size3)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if gogoproto.HasBenchGen(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				used = true
0000000000000000000000000000000000000000;;				p.P(`func Benchmark`, ccTypeName, sizeName, `(b *`, testingPkg.Use(), `.B) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`popr := `, randPkg.Use(), `.New(`, randPkg.Use(), `.NewSource(616))`)
0000000000000000000000000000000000000000;;				p.P(`total := 0`)
0000000000000000000000000000000000000000;;				p.P(`pops := make([]*`, ccTypeName, `, 1000)`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < 1000; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`pops[i] = NewPopulated`, ccTypeName, `(popr, false)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`b.ResetTimer()`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < b.N; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`total += pops[i%1000].`, sizeName, `()`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`b.SetBytes(int64(total / b.N))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return used
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		testgen.RegisterTestPlugin(NewTest)
0000000000000000000000000000000000000000;;	}
