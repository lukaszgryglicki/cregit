0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/stringer/stringer.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/stringer/stringer.go][vendor/github.com/gogo/protobuf/plugin/stringer/stringer.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The stringer plugin generates a String method for each message.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - stringer
0000000000000000000000000000000000000000;;	  - stringer_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The stringer plugin also generates a test given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  option (gogoproto.goproto_stringer_all) = false;
0000000000000000000000000000000000000000;;	  option (gogoproto.stringer_all) =  true;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message A {
0000000000000000000000000000000000000000;;		optional string Description = 1 [(gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;		optional int64 Number = 2 [(gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;		optional bytes Id = 3 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uuid", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the stringer stringer, will generate the following code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func (this *A) String() string {
0000000000000000000000000000000000000000;;		if this == nil {
0000000000000000000000000000000000000000;;			return "nil"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := strings.Join([]string{`&A{`,
0000000000000000000000000000000000000000;;			`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
0000000000000000000000000000000000000000;;			`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
0000000000000000000000000000000000000000;;			`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
0000000000000000000000000000000000000000;;			`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
0000000000000000000000000000000000000000;;			`}`,
0000000000000000000000000000000000000000;;		}, "")
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and the following test code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestAStringer(t *testing4.T) {
0000000000000000000000000000000000000000;;			popr := math_rand4.New(math_rand4.NewSource(time4.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedA(popr, false)
0000000000000000000000000000000000000000;;			s1 := p.String()
0000000000000000000000000000000000000000;;			s2 := fmt1.Sprintf("%v", p)
0000000000000000000000000000000000000000;;			if s1 != s2 {
0000000000000000000000000000000000000000;;				t.Fatalf("String want %v got %v", s1, s2)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Typically fmt.Printf("%v") will stop to print when it reaches a pointer and
0000000000000000000000000000000000000000;;	not print their values, while the generated String method will always print all values, recursively.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package stringer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type stringer struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		atleastOne bool
0000000000000000000000000000000000000000;;		localName  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStringer() *stringer {
0000000000000000000000000000000000000000;;		return &stringer{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *stringer) Name() string {
0000000000000000000000000000000000000000;;		return "stringer"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *stringer) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *stringer) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		p.atleastOne = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.localName = generator.FileName(file)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmtPkg := p.NewImport("fmt")
0000000000000000000000000000000000000000;;		stringsPkg := p.NewImport("strings")
0000000000000000000000000000000000000000;;		reflectPkg := p.NewImport("reflect")
0000000000000000000000000000000000000000;;		sortKeysPkg := p.NewImport("github.com/gogo/protobuf/sortkeys")
0000000000000000000000000000000000000000;;		protoPkg := p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			if !gogoproto.IsStringer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.EnabledGoStringer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				panic("old string method needs to be disabled, please use gogoproto.goproto_stringer or gogoproto.goproto_stringer_all and set it to false")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.atleastOne = true
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			p.P(`func (this *`, ccTypeName, `) String() string {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`if this == nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return "nil"`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				if !p.IsMap(field) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;				mapgoTyp, keyField, keyAliasField := m.GoType, m.KeyField, m.KeyAliasField
0000000000000000000000000000000000000000;;				keysName := `keysFor` + fieldname
0000000000000000000000000000000000000000;;				keygoTyp, _ := p.GoType(nil, keyField)
0000000000000000000000000000000000000000;;				keygoTyp = strings.Replace(keygoTyp, "*", "", 1)
0000000000000000000000000000000000000000;;				keygoAliasTyp, _ := p.GoType(nil, keyAliasField)
0000000000000000000000000000000000000000;;				keygoAliasTyp = strings.Replace(keygoAliasTyp, "*", "", 1)
0000000000000000000000000000000000000000;;				keyCapTyp := generator.CamelCase(keygoTyp)
0000000000000000000000000000000000000000;;				p.P(keysName, ` := make([]`, keygoTyp, `, 0, len(this.`, fieldname, `))`)
0000000000000000000000000000000000000000;;				p.P(`for k, _ := range this.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if keygoAliasTyp == keygoTyp {
0000000000000000000000000000000000000000;;					p.P(keysName, ` = append(`, keysName, `, k)`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(keysName, ` = append(`, keysName, `, `, keygoTyp, `(k))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(sortKeysPkg.Use(), `.`, keyCapTyp, `s(`, keysName, `)`)
0000000000000000000000000000000000000000;;				mapName := `mapStringFor` + fieldname
0000000000000000000000000000000000000000;;				p.P(mapName, ` := "`, mapgoTyp, `{"`)
0000000000000000000000000000000000000000;;				p.P(`for _, k := range `, keysName, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if keygoAliasTyp == keygoTyp {
0000000000000000000000000000000000000000;;					p.P(mapName, ` += fmt.Sprintf("%v: %v,", k, this.`, fieldname, `[k])`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(mapName, ` += fmt.Sprintf("%v: %v,", k, this.`, fieldname, `[`, keygoAliasTyp, `(k)])`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(mapName, ` += "}"`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P("s := ", stringsPkg.Use(), ".Join([]string{`&", ccTypeName, "{`,")
0000000000000000000000000000000000000000;;			oneofs := make(map[string]struct{})
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				nullable := gogoproto.IsNullable(field)
0000000000000000000000000000000000000000;;				repeated := field.IsRepeated()
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;				if oneof {
0000000000000000000000000000000000000000;;					if _, ok := oneofs[fieldname]; ok {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						oneofs[fieldname] = struct{}{}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P("`", fieldname, ":`", ` + `, fmtPkg.Use(), `.Sprintf("%v", this.`, fieldname, ") + `,", "`,")
0000000000000000000000000000000000000000;;				} else if p.IsMap(field) {
0000000000000000000000000000000000000000;;					mapName := `mapStringFor` + fieldname
0000000000000000000000000000000000000000;;					p.P("`", fieldname, ":`", ` + `, mapName, " + `,", "`,")
0000000000000000000000000000000000000000;;				} else if (field.IsMessage() && !gogoproto.IsCustomType(field)) || p.IsGroup(field) {
0000000000000000000000000000000000000000;;					desc := p.ObjectNamed(field.GetTypeName())
0000000000000000000000000000000000000000;;					msgname := p.TypeName(desc)
0000000000000000000000000000000000000000;;					msgnames := strings.Split(msgname, ".")
0000000000000000000000000000000000000000;;					typeName := msgnames[len(msgnames)-1]
0000000000000000000000000000000000000000;;					if nullable {
0000000000000000000000000000000000000000;;						p.P("`", fieldname, ":`", ` + `, stringsPkg.Use(), `.Replace(`, fmtPkg.Use(), `.Sprintf("%v", this.`, fieldname, `), "`, typeName, `","`, msgname, `"`, ", 1) + `,", "`,")
0000000000000000000000000000000000000000;;					} else if repeated {
0000000000000000000000000000000000000000;;						p.P("`", fieldname, ":`", ` + `, stringsPkg.Use(), `.Replace(`, stringsPkg.Use(), `.Replace(`, fmtPkg.Use(), `.Sprintf("%v", this.`, fieldname, `), "`, typeName, `","`, msgname, `"`, ", 1),`&`,``,1) + `,", "`,")
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P("`", fieldname, ":`", ` + `, stringsPkg.Use(), `.Replace(`, stringsPkg.Use(), `.Replace(this.`, fieldname, `.String(), "`, typeName, `","`, msgname, `"`, ", 1),`&`,``,1) + `,", "`,")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if nullable && !repeated && !proto3 {
0000000000000000000000000000000000000000;;						p.P("`", fieldname, ":`", ` + valueToString`, p.localName, `(this.`, fieldname, ") + `,", "`,")
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P("`", fieldname, ":`", ` + `, fmtPkg.Use(), `.Sprintf("%v", this.`, fieldname, ") + `,", "`,")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				if gogoproto.HasExtensionsMap(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P("`XXX_InternalExtensions:` + ", protoPkg.Use(), ".StringFromInternalExtension(this) + `,`,")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P("`XXX_extensions:` + ", protoPkg.Use(), ".StringFromExtensionsBytes(this.XXX_extensions) + `,`,")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasUnrecognized(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.P("`XXX_unrecognized:` + ", fmtPkg.Use(), `.Sprintf("%v", this.XXX_unrecognized) + `, "`,`,")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P("`}`,")
0000000000000000000000000000000000000000;;			p.P(`}`, `,""`, ")")
0000000000000000000000000000000000000000;;			p.P(`return s`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//Generate String methods for oneof fields
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;				if !oneof {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ccTypeName := p.OneOfTypeName(message, field)
0000000000000000000000000000000000000000;;				p.P(`func (this *`, ccTypeName, `) String() string {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if this == nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return "nil"`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P("s := ", stringsPkg.Use(), ".Join([]string{`&", ccTypeName, "{`,")
0000000000000000000000000000000000000000;;				fieldname := p.GetOneOfFieldName(message, field)
0000000000000000000000000000000000000000;;				if field.IsMessage() || p.IsGroup(field) {
0000000000000000000000000000000000000000;;					desc := p.ObjectNamed(field.GetTypeName())
0000000000000000000000000000000000000000;;					msgname := p.TypeName(desc)
0000000000000000000000000000000000000000;;					msgnames := strings.Split(msgname, ".")
0000000000000000000000000000000000000000;;					typeName := msgnames[len(msgnames)-1]
0000000000000000000000000000000000000000;;					p.P("`", fieldname, ":`", ` + `, stringsPkg.Use(), `.Replace(`, fmtPkg.Use(), `.Sprintf("%v", this.`, fieldname, `), "`, typeName, `","`, msgname, `"`, ", 1) + `,", "`,")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P("`", fieldname, ":`", ` + `, fmtPkg.Use(), `.Sprintf("%v", this.`, fieldname, ") + `,", "`,")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P("`}`,")
0000000000000000000000000000000000000000;;				p.P(`}`, `,""`, ")")
0000000000000000000000000000000000000000;;				p.P(`return s`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !p.atleastOne {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func valueToString`, p.localName, `(v interface{}) string {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`rv := `, reflectPkg.Use(), `.ValueOf(v)`)
0000000000000000000000000000000000000000;;		p.P(`if rv.IsNil() {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return "nil"`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`pv := `, reflectPkg.Use(), `.Indirect(rv).Interface()`)
0000000000000000000000000000000000000000;;		p.P(`return `, fmtPkg.Use(), `.Sprintf("*%v", pv)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewStringer())
0000000000000000000000000000000000000000;;	}
