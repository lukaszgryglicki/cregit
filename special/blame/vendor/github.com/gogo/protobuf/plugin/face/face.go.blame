0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/face/face.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/face/face.go][vendor/github.com/gogo/protobuf/plugin/face/face.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The face plugin generates a function will be generated which can convert a structure which satisfies an interface (face) to the specified structure.
0000000000000000000000000000000000000000;;	This interface contains getters for each of the fields in the struct.
0000000000000000000000000000000000000000;;	The specified struct is also generated with the getters.
0000000000000000000000000000000000000000;;	This means that getters should be turned off so as not to conflict with face getters.
0000000000000000000000000000000000000000;;	This allows it to satisfy its own face.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - face
0000000000000000000000000000000000000000;;	  - face_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Turn off getters by using the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - getters
0000000000000000000000000000000000000000;;	  - getters_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The face plugin also generates a test given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message A {
0000000000000000000000000000000000000000;;		option (gogoproto.face) = true;
0000000000000000000000000000000000000000;;		option (gogoproto.goproto_getters) = false;
0000000000000000000000000000000000000000;;		optional string Description = 1 [(gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;		optional int64 Number = 2 [(gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;		optional bytes Id = 3 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uuid", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the face plugin, will generate the following code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type AFace interface {
0000000000000000000000000000000000000000;;			Proto() github_com_gogo_protobuf_proto.Message
0000000000000000000000000000000000000000;;			GetDescription() string
0000000000000000000000000000000000000000;;			GetNumber() int64
0000000000000000000000000000000000000000;;			GetId() github_com_gogo_protobuf_test_custom.Uuid
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *A) Proto() github_com_gogo_protobuf_proto.Message {
0000000000000000000000000000000000000000;;			return this
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *A) TestProto() github_com_gogo_protobuf_proto.Message {
0000000000000000000000000000000000000000;;			return NewAFromFace(this)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *A) GetDescription() string {
0000000000000000000000000000000000000000;;			return this.Description
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *A) GetNumber() int64 {
0000000000000000000000000000000000000000;;			return this.Number
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *A) GetId() github_com_gogo_protobuf_test_custom.Uuid {
0000000000000000000000000000000000000000;;			return this.Id
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func NewAFromFace(that AFace) *A {
0000000000000000000000000000000000000000;;			this := &A{}
0000000000000000000000000000000000000000;;			this.Description = that.GetDescription()
0000000000000000000000000000000000000000;;			this.Number = that.GetNumber()
0000000000000000000000000000000000000000;;			this.Id = that.GetId()
0000000000000000000000000000000000000000;;			return this
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and the following test code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func TestAFace(t *testing7.T) {
0000000000000000000000000000000000000000;;			popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
0000000000000000000000000000000000000000;;			p := NewPopulatedA(popr, true)
0000000000000000000000000000000000000000;;			msg := p.TestProto()
0000000000000000000000000000000000000000;;			if !p.Equal(msg) {
0000000000000000000000000000000000000000;;				t.Fatalf("%#v !Face Equal %#v", msg, p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The struct A, representing the message, will also be generated just like always.
0000000000000000000000000000000000000000;;	As you can see A satisfies its own Face, AFace.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Creating another struct which satisfies AFace is very easy.
0000000000000000000000000000000000000000;;	Simply create all these methods specified in AFace.
0000000000000000000000000000000000000000;;	Implementing The Proto method is done with the helper function NewAFromFace:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *MyStruct) Proto() proto.Message {
0000000000000000000000000000000000000000;;		  return NewAFromFace(this)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	just the like TestProto method which is used to test the NewAFromFace function.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package face
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type plugin struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPlugin() *plugin {
0000000000000000000000000000000000000000;;		return &plugin{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Name() string {
0000000000000000000000000000000000000000;;		return "face"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		protoPkg := p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = p.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			if !gogoproto.IsFace(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				panic("face does not support message with extensions")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasGoGetters(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				panic("face requires getters to be disabled please use gogoproto.getters or gogoproto.getters_all and set it to false")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			p.P(`type `, ccTypeName, `Face interface{`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`Proto() `, protoPkg.Use(), `.Message`)
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				goTyp, _ := p.GoType(message, field)
0000000000000000000000000000000000000000;;				if p.IsMap(field) {
0000000000000000000000000000000000000000;;					m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;					goTyp = m.GoType
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`Get`, fieldname, `() `, goTyp)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;			p.P(`func (this *`, ccTypeName, `) Proto() `, protoPkg.Use(), `.Message {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return this`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;			p.P(`func (this *`, ccTypeName, `) TestProto() `, protoPkg.Use(), `.Message {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return New`, ccTypeName, `FromFace(this)`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				goTyp, _ := p.GoType(message, field)
0000000000000000000000000000000000000000;;				if p.IsMap(field) {
0000000000000000000000000000000000000000;;					m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;					goTyp = m.GoType
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`func (this *`, ccTypeName, `) Get`, fieldname, `() `, goTyp, `{`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(` return this.`, fieldname)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(``)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;			p.P(`func New`, ccTypeName, `FromFace(that `, ccTypeName, `Face) *`, ccTypeName, ` {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`this := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, ` = that.Get`, fieldname, `()`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`return this`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewPlugin())
0000000000000000000000000000000000000000;;	}
