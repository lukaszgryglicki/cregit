0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/union/union.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/union/union.go][vendor/github.com/gogo/protobuf/plugin/union/union.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The onlyone plugin generates code for the onlyone extension.
0000000000000000000000000000000000000000;;	All fields must be nullable and only one of the fields may be set, like a union.
0000000000000000000000000000000000000000;;	Two methods are generated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  GetValue() interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  SetValue(v interface{}) (set bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	These provide easier interaction with a onlyone.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The onlyone extension is not called union as this causes compile errors in the C++ generated code.
0000000000000000000000000000000000000000;;	There can only be one ;)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - onlyone
0000000000000000000000000000000000000000;;	  - onlyone_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The onlyone plugin also generates a test given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Lets look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message U {
0000000000000000000000000000000000000000;;		  option (gogoproto.onlyone) = true;
0000000000000000000000000000000000000000;;		  optional A A = 1;
0000000000000000000000000000000000000000;;		  optional B B = 2;
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the onlyone plugin, will generate code which looks a lot like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *U) GetValue() interface{} {
0000000000000000000000000000000000000000;;			if this.A != nil {
0000000000000000000000000000000000000000;;				return this.A
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if this.B != nil {
0000000000000000000000000000000000000000;;				return this.B
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func (this *U) SetValue(value interface{}) bool {
0000000000000000000000000000000000000000;;			switch vt := value.(type) {
0000000000000000000000000000000000000000;;			case *A:
0000000000000000000000000000000000000000;;				this.A = vt
0000000000000000000000000000000000000000;;			case *B:
0000000000000000000000000000000000000000;;				this.B = vt
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and the following test code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func TestUUnion(t *testing.T) {
0000000000000000000000000000000000000000;;		popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))
0000000000000000000000000000000000000000;;		p := NewPopulatedU(popr)
0000000000000000000000000000000000000000;;		v := p.GetValue()
0000000000000000000000000000000000000000;;		msg := &U{}
0000000000000000000000000000000000000000;;		if !msg.SetValue(v) {
0000000000000000000000000000000000000000;;			t.Fatalf("Union: Could not set Value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !p.Equal(msg) {
0000000000000000000000000000000000000000;;			t.Fatalf("%#v !Union Equal %#v", msg, p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package union
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type union struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnion() *union {
0000000000000000000000000000000000000000;;		return &union{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *union) Name() string {
0000000000000000000000000000000000000000;;		return "union"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *union) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *union) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			if !gogoproto.IsUnion(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				panic("onlyone does not currently support extensions")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			p.P(`func (this *`, ccTypeName, `) GetValue() interface{} {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				if fieldname == "Value" {
0000000000000000000000000000000000000000;;					panic("cannot have a onlyone message " + ccTypeName + " with a field named Value")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if this.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return this.`, fieldname)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`return nil`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;			p.P(`func (this *`, ccTypeName, `) SetValue(value interface{}) bool {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`switch vt := value.(type) {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				goTyp, _ := p.GoType(message, field)
0000000000000000000000000000000000000000;;				p.P(`case `, goTyp, `:`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, ` = vt`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`default:`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;				if field.IsMessage() {
0000000000000000000000000000000000000000;;					goTyp, _ := p.GoType(message, field)
0000000000000000000000000000000000000000;;					obj := p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if gogoproto.IsUnion(obj.File(), obj.DescriptorProto) {
0000000000000000000000000000000000000000;;						p.P(`this.`, fieldname, ` = new(`, generator.GoTypeToName(goTyp), `)`)
0000000000000000000000000000000000000000;;						p.P(`if set := this.`, fieldname, `.SetValue(value); set {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return true`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`this.`, fieldname, ` = nil`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`return false`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`return true`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewUnion())
0000000000000000000000000000000000000000;;	}
