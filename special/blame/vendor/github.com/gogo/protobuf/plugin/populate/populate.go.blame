0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/populate/populate.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/populate/populate.go][vendor/github.com/gogo/protobuf/plugin/populate/populate.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The populate plugin generates a NewPopulated function.
0000000000000000000000000000000000000000;;	This function returns a newly populated structure.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - populate
0000000000000000000000000000000000000000;;	  - populate_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  option (gogoproto.populate_all) = true;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  message B {
0000000000000000000000000000000000000000;;		optional A A = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
0000000000000000000000000000000000000000;;		repeated bytes G = 2 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uint128", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the populate plugin, will generate code the following code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func NewPopulatedB(r randyExample, easy bool) *B {
0000000000000000000000000000000000000000;;		this := &B{}
0000000000000000000000000000000000000000;;		v2 := NewPopulatedA(r, easy)
0000000000000000000000000000000000000000;;		this.A = *v2
0000000000000000000000000000000000000000;;		if r.Intn(10) != 0 {
0000000000000000000000000000000000000000;;			v3 := r.Intn(10)
0000000000000000000000000000000000000000;;			this.G = make([]github_com_gogo_protobuf_test_custom.Uint128, v3)
0000000000000000000000000000000000000000;;			for i := 0; i < v3; i++ {
0000000000000000000000000000000000000000;;				v4 := github_com_gogo_protobuf_test_custom.NewPopulatedUint128(r)
0000000000000000000000000000000000000000;;				this.G[i] = *v4
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !easy && r.Intn(10) != 0 {
0000000000000000000000000000000000000000;;			this.XXX_unrecognized = randUnrecognizedExample(r, 3)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return this
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The idea that is useful for testing.
0000000000000000000000000000000000000000;;	Most of the other plugins' generated test code uses it.
0000000000000000000000000000000000000000;;	You will still be able to use the generated test code of other packages
0000000000000000000000000000000000000000;;	if you turn off the popluate plugin and write your own custom NewPopulated function.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If the easy flag is not set the XXX_unrecognized and XXX_extensions fields are also populated.
0000000000000000000000000000000000000000;;	These have caused problems with JSON marshalling and unmarshalling tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package populate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/vanity"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VarGen interface {
0000000000000000000000000000000000000000;;		Next() string
0000000000000000000000000000000000000000;;		Current() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type varGen struct {
0000000000000000000000000000000000000000;;		index int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVarGen() VarGen {
0000000000000000000000000000000000000000;;		return &varGen{0}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this *varGen) Next() string {
0000000000000000000000000000000000000000;;		this.index++
0000000000000000000000000000000000000000;;		return fmt.Sprintf("v%d", this.index)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this *varGen) Current() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("v%d", this.index)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type plugin struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		varGen     VarGen
0000000000000000000000000000000000000000;;		atleastOne bool
0000000000000000000000000000000000000000;;		localName  string
0000000000000000000000000000000000000000;;		typesPkg   generator.Single
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPlugin() *plugin {
0000000000000000000000000000000000000000;;		return &plugin{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Name() string {
0000000000000000000000000000000000000000;;		return "populate"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func value(typeName string, fieldType descriptor.FieldDescriptorProto_Type) string {
0000000000000000000000000000000000000000;;		switch fieldType {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_DOUBLE:
0000000000000000000000000000000000000000;;			return typeName + "(r.Float64())"
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FLOAT:
0000000000000000000000000000000000000000;;			return typeName + "(r.Float32())"
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			return typeName + "(r.Int63())"
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_FIXED64:
0000000000000000000000000000000000000000;;			return typeName + "(uint64(r.Uint32()))"
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_ENUM:
0000000000000000000000000000000000000000;;			return typeName + "(r.Int31())"
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_FIXED32:
0000000000000000000000000000000000000000;;			return typeName + "(r.Uint32())"
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			return typeName + `(bool(r.Intn(2) == 0))`
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_STRING,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_GROUP,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_MESSAGE,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic(fmt.Errorf("unexpected type %v", typeName))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func negative(fieldType descriptor.FieldDescriptorProto_Type) bool {
0000000000000000000000000000000000000000;;		switch fieldType {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) getFuncName(goTypName string) string {
0000000000000000000000000000000000000000;;		funcName := "NewPopulated" + goTypName
0000000000000000000000000000000000000000;;		goTypNames := strings.Split(goTypName, ".")
0000000000000000000000000000000000000000;;		if len(goTypNames) == 2 {
0000000000000000000000000000000000000000;;			funcName = goTypNames[0] + ".NewPopulated" + goTypNames[1]
0000000000000000000000000000000000000000;;		} else if len(goTypNames) != 1 {
0000000000000000000000000000000000000000;;			panic(fmt.Errorf("unreachable: too many dots in %v", goTypName))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch funcName {
0000000000000000000000000000000000000000;;		case "time.NewPopulatedTime":
0000000000000000000000000000000000000000;;			funcName = p.typesPkg.Use() + ".NewPopulatedStdTime"
0000000000000000000000000000000000000000;;		case "time.NewPopulatedDuration":
0000000000000000000000000000000000000000;;			funcName = p.typesPkg.Use() + ".NewPopulatedStdDuration"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return funcName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) getFuncCall(goTypName string) string {
0000000000000000000000000000000000000000;;		funcName := p.getFuncName(goTypName)
0000000000000000000000000000000000000000;;		funcCall := funcName + "(r, easy)"
0000000000000000000000000000000000000000;;		return funcCall
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) getCustomFuncCall(goTypName string) string {
0000000000000000000000000000000000000000;;		funcName := p.getFuncName(goTypName)
0000000000000000000000000000000000000000;;		funcCall := funcName + "(r)"
0000000000000000000000000000000000000000;;		return funcCall
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) getEnumVal(field *descriptor.FieldDescriptorProto, goTyp string) string {
0000000000000000000000000000000000000000;;		enum := p.ObjectNamed(field.GetTypeName()).(*generator.EnumDescriptor)
0000000000000000000000000000000000000000;;		l := len(enum.Value)
0000000000000000000000000000000000000000;;		values := make([]string, l)
0000000000000000000000000000000000000000;;		for i := range enum.Value {
0000000000000000000000000000000000000000;;			values[i] = strconv.Itoa(int(*enum.Value[i].Number))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		arr := "[]int32{" + strings.Join(values, ",") + "}"
0000000000000000000000000000000000000000;;		val := strings.Join([]string{generator.GoTypeToName(goTyp), `(`, arr, `[r.Intn(`, fmt.Sprintf("%d", l), `)])`}, "")
0000000000000000000000000000000000000000;;		return val
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) GenerateField(file *generator.FileDescriptor, message *generator.Descriptor, field *descriptor.FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;		goTyp, _ := p.GoType(message, field)
0000000000000000000000000000000000000000;;		fieldname := p.GetOneOfFieldName(message, field)
0000000000000000000000000000000000000000;;		goTypName := generator.GoTypeToName(goTyp)
0000000000000000000000000000000000000000;;		if p.IsMap(field) {
0000000000000000000000000000000000000000;;			m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;			keygoTyp, _ := p.GoType(nil, m.KeyField)
0000000000000000000000000000000000000000;;			keygoTyp = strings.Replace(keygoTyp, "*", "", 1)
0000000000000000000000000000000000000000;;			keygoAliasTyp, _ := p.GoType(nil, m.KeyAliasField)
0000000000000000000000000000000000000000;;			keygoAliasTyp = strings.Replace(keygoAliasTyp, "*", "", 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			valuegoTyp, _ := p.GoType(nil, m.ValueField)
0000000000000000000000000000000000000000;;			valuegoAliasTyp, _ := p.GoType(nil, m.ValueAliasField)
0000000000000000000000000000000000000000;;			keytypName := generator.GoTypeToName(keygoTyp)
0000000000000000000000000000000000000000;;			keygoAliasTyp = generator.GoTypeToName(keygoAliasTyp)
0000000000000000000000000000000000000000;;			valuetypAliasName := generator.GoTypeToName(valuegoAliasTyp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			nullable, valuegoTyp, valuegoAliasTyp := generator.GoMapValueTypes(field, m.ValueField, valuegoTyp, valuegoAliasTyp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(p.varGen.Next(), ` := r.Intn(10)`)
0000000000000000000000000000000000000000;;			p.P(`this.`, fieldname, ` = make(`, m.GoType, `)`)
0000000000000000000000000000000000000000;;			p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			keyval := ""
0000000000000000000000000000000000000000;;			if m.KeyField.IsString() {
0000000000000000000000000000000000000000;;				keyval = fmt.Sprintf("randString%v(r)", p.localName)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				keyval = value(keytypName, m.KeyField.GetType())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if keygoAliasTyp != keygoTyp {
0000000000000000000000000000000000000000;;				keyval = keygoAliasTyp + `(` + keyval + `)`
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if m.ValueField.IsMessage() || p.IsGroup(field) ||
0000000000000000000000000000000000000000;;				(m.ValueField.IsBytes() && gogoproto.IsCustomType(field)) {
0000000000000000000000000000000000000000;;				s := `this.` + fieldname + `[` + keyval + `] = `
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) || gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					valuegoTyp = valuegoAliasTyp
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				funcCall := p.getCustomFuncCall(goTypName)
0000000000000000000000000000000000000000;;				if !gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;					goTypName = generator.GoTypeToName(valuegoTyp)
0000000000000000000000000000000000000000;;					funcCall = p.getFuncCall(goTypName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !nullable {
0000000000000000000000000000000000000000;;					funcCall = `*` + funcCall
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if valuegoTyp != valuegoAliasTyp {
0000000000000000000000000000000000000000;;					funcCall = `(` + valuegoAliasTyp + `)(` + funcCall + `)`
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s += funcCall
0000000000000000000000000000000000000000;;				p.P(s)
0000000000000000000000000000000000000000;;			} else if m.ValueField.IsEnum() {
0000000000000000000000000000000000000000;;				s := `this.` + fieldname + `[` + keyval + `]` + ` = ` + p.getEnumVal(m.ValueField, valuegoTyp)
0000000000000000000000000000000000000000;;				p.P(s)
0000000000000000000000000000000000000000;;			} else if m.ValueField.IsBytes() {
0000000000000000000000000000000000000000;;				count := p.varGen.Next()
0000000000000000000000000000000000000000;;				p.P(count, ` := r.Intn(100)`)
0000000000000000000000000000000000000000;;				p.P(p.varGen.Next(), ` := `, keyval)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, `[`, p.varGen.Current(), `] = make(`, valuegoTyp, `, `, count, `)`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < `, count, `; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, `[`, p.varGen.Current(), `][i] = byte(r.Intn(256))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if m.ValueField.IsString() {
0000000000000000000000000000000000000000;;				s := `this.` + fieldname + `[` + keyval + `]` + ` = ` + fmt.Sprintf("randString%v(r)", p.localName)
0000000000000000000000000000000000000000;;				p.P(s)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(p.varGen.Next(), ` := `, keyval)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, `[`, p.varGen.Current(), `] = `, value(valuetypAliasName, m.ValueField.GetType()))
0000000000000000000000000000000000000000;;				if negative(m.ValueField.GetType()) {
0000000000000000000000000000000000000000;;					p.P(`if r.Intn(2) == 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[`, p.varGen.Current(), `] *= -1`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		} else if gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;			funcCall := p.getCustomFuncCall(goTypName)
0000000000000000000000000000000000000000;;			if field.IsRepeated() {
0000000000000000000000000000000000000000;;				p.P(p.varGen.Next(), ` := r.Intn(10)`)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(p.varGen.Next(), `:= `, funcCall)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, `[i] = *`, p.varGen.Current())
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, ` = `, funcCall)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(p.varGen.Next(), `:= `, funcCall)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, ` = *`, p.varGen.Current())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if field.IsMessage() || p.IsGroup(field) {
0000000000000000000000000000000000000000;;			funcCall := p.getFuncCall(goTypName)
0000000000000000000000000000000000000000;;			if field.IsRepeated() {
0000000000000000000000000000000000000000;;				p.P(p.varGen.Next(), ` := r.Intn(5)`)
0000000000000000000000000000000000000000;;				p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;				p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = `, funcCall)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), `:= `, funcCall)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = *`, p.varGen.Current())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = `, funcCall)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), `:= `, funcCall)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = *`, p.varGen.Current())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if field.IsEnum() {
0000000000000000000000000000000000000000;;				val := p.getEnumVal(field, goTyp)
0000000000000000000000000000000000000000;;				if field.IsRepeated() {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := r.Intn(10)`)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;					p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = `, val)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !gogoproto.IsNullable(field) || proto3 {
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = `, val)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := `, val)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = &`, p.varGen.Current())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if field.IsBytes() {
0000000000000000000000000000000000000000;;				if field.IsRepeated() {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := r.Intn(10)`)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;					p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := r.Intn(100)`)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = make([]byte,`, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;					p.P(`for j := 0; j < `, p.varGen.Current(), `; j++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i][j] = byte(r.Intn(256))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := r.Intn(100)`)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;					p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = byte(r.Intn(256))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if field.IsString() {
0000000000000000000000000000000000000000;;				typName := generator.GoTypeToName(goTyp)
0000000000000000000000000000000000000000;;				val := fmt.Sprintf("%s(randString%v(r))", typName, p.localName)
0000000000000000000000000000000000000000;;				if field.IsRepeated() {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := r.Intn(10)`)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;					p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = `, val)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !gogoproto.IsNullable(field) || proto3 {
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = `, val)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), `:= `, val)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = &`, p.varGen.Current())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				typName := generator.GoTypeToName(goTyp)
0000000000000000000000000000000000000000;;				if field.IsRepeated() {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := r.Intn(10)`)
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = make(`, goTyp, `, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;					p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, `[i] = `, value(typName, field.GetType()))
0000000000000000000000000000000000000000;;					if negative(field.GetType()) {
0000000000000000000000000000000000000000;;						p.P(`if r.Intn(2) == 0 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`this.`, fieldname, `[i] *= -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !gogoproto.IsNullable(field) || proto3 {
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = `, value(typName, field.GetType()))
0000000000000000000000000000000000000000;;					if negative(field.GetType()) {
0000000000000000000000000000000000000000;;						p.P(`if r.Intn(2) == 0 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`this.`, fieldname, ` *= -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(p.varGen.Next(), ` := `, value(typName, field.GetType()))
0000000000000000000000000000000000000000;;					if negative(field.GetType()) {
0000000000000000000000000000000000000000;;						p.P(`if r.Intn(2) == 0 {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(p.varGen.Current(), ` *= -1`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`this.`, fieldname, ` = &`, p.varGen.Current())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) hasLoop(field *descriptor.FieldDescriptorProto, visited []*generator.Descriptor, excludes []*generator.Descriptor) *generator.Descriptor {
0000000000000000000000000000000000000000;;		if field.IsMessage() || p.IsGroup(field) || p.IsMap(field) {
0000000000000000000000000000000000000000;;			var fieldMessage *generator.Descriptor
0000000000000000000000000000000000000000;;			if p.IsMap(field) {
0000000000000000000000000000000000000000;;				m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;				if !m.ValueField.IsMessage() {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fieldMessage = p.ObjectNamed(m.ValueField.GetTypeName()).(*generator.Descriptor)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fieldMessage = p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fieldTypeName := generator.CamelCaseSlice(fieldMessage.TypeName())
0000000000000000000000000000000000000000;;			for _, message := range visited {
0000000000000000000000000000000000000000;;				messageTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;				if fieldTypeName == messageTypeName {
0000000000000000000000000000000000000000;;					for _, e := range excludes {
0000000000000000000000000000000000000000;;						if fieldTypeName == generator.CamelCaseSlice(e.TypeName()) {
0000000000000000000000000000000000000000;;							return nil
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return fieldMessage
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pkg := strings.Split(field.GetTypeName(), ".")[1]
0000000000000000000000000000000000000000;;			for _, f := range fieldMessage.Field {
0000000000000000000000000000000000000000;;				if strings.HasPrefix(f.GetTypeName(), "."+pkg+".") {
0000000000000000000000000000000000000000;;					visited = append(visited, fieldMessage)
0000000000000000000000000000000000000000;;					loopTo := p.hasLoop(f, visited, excludes)
0000000000000000000000000000000000000000;;					if loopTo != nil {
0000000000000000000000000000000000000000;;						return loopTo
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) loops(field *descriptor.FieldDescriptorProto, message *generator.Descriptor) int {
0000000000000000000000000000000000000000;;		//fmt.Fprintf(os.Stderr, "loops %v %v\n", field.GetTypeName(), generator.CamelCaseSlice(message.TypeName()))
0000000000000000000000000000000000000000;;		excludes := []*generator.Descriptor{}
0000000000000000000000000000000000000000;;		loops := 0
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			visited := []*generator.Descriptor{}
0000000000000000000000000000000000000000;;			loopTo := p.hasLoop(field, visited, excludes)
0000000000000000000000000000000000000000;;			if loopTo == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			//fmt.Fprintf(os.Stderr, "loopTo %v\n", generator.CamelCaseSlice(loopTo.TypeName()))
0000000000000000000000000000000000000000;;			excludes = append(excludes, loopTo)
0000000000000000000000000000000000000000;;			loops++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return loops
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *plugin) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		p.atleastOne = false
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		p.varGen = NewVarGen()
0000000000000000000000000000000000000000;;		proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;		p.typesPkg = p.NewImport("github.com/gogo/protobuf/types")
0000000000000000000000000000000000000000;;		p.localName = generator.FileName(file)
0000000000000000000000000000000000000000;;		protoPkg := p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			protoPkg = p.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			if !gogoproto.HasPopulate(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.atleastOne = true
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			loopLevels := make([]int, len(message.Field))
0000000000000000000000000000000000000000;;			maxLoopLevel := 0
0000000000000000000000000000000000000000;;			for i, field := range message.Field {
0000000000000000000000000000000000000000;;				loopLevels[i] = p.loops(field, message)
0000000000000000000000000000000000000000;;				if loopLevels[i] > maxLoopLevel {
0000000000000000000000000000000000000000;;					maxLoopLevel = loopLevels[i]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ranTotal := 0
0000000000000000000000000000000000000000;;			for i := range loopLevels {
0000000000000000000000000000000000000000;;				ranTotal += int(math.Pow10(maxLoopLevel - loopLevels[i]))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`func NewPopulated`, ccTypeName, `(r randy`, p.localName, `, easy bool) *`, ccTypeName, ` {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`this := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;			if gogoproto.IsUnion(message.File(), message.DescriptorProto) && len(message.Field) > 0 {
0000000000000000000000000000000000000000;;				p.P(`fieldNum := r.Intn(`, fmt.Sprintf("%d", ranTotal), `)`)
0000000000000000000000000000000000000000;;				p.P(`switch fieldNum {`)
0000000000000000000000000000000000000000;;				k := 0
0000000000000000000000000000000000000000;;				for i, field := range message.Field {
0000000000000000000000000000000000000000;;					is := []string{}
0000000000000000000000000000000000000000;;					ran := int(math.Pow10(maxLoopLevel - loopLevels[i]))
0000000000000000000000000000000000000000;;					for j := 0; j < ran; j++ {
0000000000000000000000000000000000000000;;						is = append(is, fmt.Sprintf("%d", j+k))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					k += ran
0000000000000000000000000000000000000000;;					p.P(`case `, strings.Join(is, ","), `:`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.GenerateField(file, message, field)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				var maxFieldNumber int32
0000000000000000000000000000000000000000;;				oneofs := make(map[string]struct{})
0000000000000000000000000000000000000000;;				for fieldIndex, field := range message.Field {
0000000000000000000000000000000000000000;;					if field.GetNumber() > maxFieldNumber {
0000000000000000000000000000000000000000;;						maxFieldNumber = field.GetNumber()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;					if !oneof {
0000000000000000000000000000000000000000;;						if field.IsRequired() || (!gogoproto.IsNullable(field) && !field.IsRepeated()) || (proto3 && !field.IsMessage()) {
0000000000000000000000000000000000000000;;							p.GenerateField(file, message, field)
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							if loopLevels[fieldIndex] > 0 {
0000000000000000000000000000000000000000;;								p.P(`if r.Intn(10) == 0 {`)
0000000000000000000000000000000000000000;;							} else {
0000000000000000000000000000000000000000;;								p.P(`if r.Intn(10) != 0 {`)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							p.In()
0000000000000000000000000000000000000000;;							p.GenerateField(file, message, field)
0000000000000000000000000000000000000000;;							p.Out()
0000000000000000000000000000000000000000;;							p.P(`}`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;						if _, ok := oneofs[fieldname]; ok {
0000000000000000000000000000000000000000;;							continue
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							oneofs[fieldname] = struct{}{}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						fieldNumbers := []int32{}
0000000000000000000000000000000000000000;;						for _, f := range message.Field {
0000000000000000000000000000000000000000;;							fname := p.GetFieldName(message, f)
0000000000000000000000000000000000000000;;							if fname == fieldname {
0000000000000000000000000000000000000000;;								fieldNumbers = append(fieldNumbers, f.GetNumber())
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						p.P(`oneofNumber_`, fieldname, ` := `, fmt.Sprintf("%#v", fieldNumbers), `[r.Intn(`, strconv.Itoa(len(fieldNumbers)), `)]`)
0000000000000000000000000000000000000000;;						p.P(`switch oneofNumber_`, fieldname, ` {`)
0000000000000000000000000000000000000000;;						for _, f := range message.Field {
0000000000000000000000000000000000000000;;							fname := p.GetFieldName(message, f)
0000000000000000000000000000000000000000;;							if fname != fieldname {
0000000000000000000000000000000000000000;;								continue
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							p.P(`case `, strconv.Itoa(int(f.GetNumber())), `:`)
0000000000000000000000000000000000000000;;							p.In()
0000000000000000000000000000000000000000;;							ccTypeName := p.OneOfTypeName(message, f)
0000000000000000000000000000000000000000;;							p.P(`this.`, fname, ` = NewPopulated`, ccTypeName, `(r, easy)`)
0000000000000000000000000000000000000000;;							p.Out()
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;					p.P(`if !easy && r.Intn(10) != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`l := r.Intn(5)`)
0000000000000000000000000000000000000000;;					p.P(`for i := 0; i < l; i++ {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					if len(message.DescriptorProto.GetExtensionRange()) > 1 {
0000000000000000000000000000000000000000;;						p.P(`eIndex := r.Intn(`, strconv.Itoa(len(message.DescriptorProto.GetExtensionRange())), `)`)
0000000000000000000000000000000000000000;;						p.P(`fieldNumber := 0`)
0000000000000000000000000000000000000000;;						p.P(`switch eIndex {`)
0000000000000000000000000000000000000000;;						for i, e := range message.DescriptorProto.GetExtensionRange() {
0000000000000000000000000000000000000000;;							p.P(`case `, strconv.Itoa(i), `:`)
0000000000000000000000000000000000000000;;							p.In()
0000000000000000000000000000000000000000;;							p.P(`fieldNumber = r.Intn(`, strconv.Itoa(int(e.GetEnd()-e.GetStart())), `) + `, strconv.Itoa(int(e.GetStart())))
0000000000000000000000000000000000000000;;							p.Out()
0000000000000000000000000000000000000000;;							if e.GetEnd() > maxFieldNumber {
0000000000000000000000000000000000000000;;								maxFieldNumber = e.GetEnd()
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						e := message.DescriptorProto.GetExtensionRange()[0]
0000000000000000000000000000000000000000;;						p.P(`fieldNumber := r.Intn(`, strconv.Itoa(int(e.GetEnd()-e.GetStart())), `) + `, strconv.Itoa(int(e.GetStart())))
0000000000000000000000000000000000000000;;						if e.GetEnd() > maxFieldNumber {
0000000000000000000000000000000000000000;;							maxFieldNumber = e.GetEnd()
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`wire := r.Intn(4)`)
0000000000000000000000000000000000000000;;					p.P(`if wire == 3 { wire = 5 }`)
0000000000000000000000000000000000000000;;					p.P(`dAtA := randField`, p.localName, `(nil, r, fieldNumber, wire)`)
0000000000000000000000000000000000000000;;					p.P(protoPkg.Use(), `.SetRawExtension(this, int32(fieldNumber), dAtA)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if maxFieldNumber < (1 << 10) {
0000000000000000000000000000000000000000;;					p.P(`if !easy && r.Intn(10) != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					if gogoproto.HasUnrecognized(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;						p.P(`this.XXX_unrecognized = randUnrecognized`, p.localName, `(r, `, strconv.Itoa(int(maxFieldNumber+1)), `)`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`return this`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//Generate NewPopulated functions for oneof fields
0000000000000000000000000000000000000000;;			m := proto.Clone(message.DescriptorProto).(*descriptor.DescriptorProto)
0000000000000000000000000000000000000000;;			for _, f := range m.Field {
0000000000000000000000000000000000000000;;				oneof := f.OneofIndex != nil
0000000000000000000000000000000000000000;;				if !oneof {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ccTypeName := p.OneOfTypeName(message, f)
0000000000000000000000000000000000000000;;				p.P(`func NewPopulated`, ccTypeName, `(r randy`, p.localName, `, easy bool) *`, ccTypeName, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`this := &`, ccTypeName, `{}`)
0000000000000000000000000000000000000000;;				vanity.TurnOffNullableForNativeTypesWithoutDefaultsOnly(f)
0000000000000000000000000000000000000000;;				p.GenerateField(file, message, f)
0000000000000000000000000000000000000000;;				p.P(`return this`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !p.atleastOne {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`type randy`, p.localName, ` interface {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`Float32() float32`)
0000000000000000000000000000000000000000;;		p.P(`Float64() float64`)
0000000000000000000000000000000000000000;;		p.P(`Int63() int64`)
0000000000000000000000000000000000000000;;		p.P(`Int31() int32`)
0000000000000000000000000000000000000000;;		p.P(`Uint32() uint32`)
0000000000000000000000000000000000000000;;		p.P(`Intn(n int) int`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func randUTF8Rune`, p.localName, `(r randy`, p.localName, `) rune {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`ru := r.Intn(62)`)
0000000000000000000000000000000000000000;;		p.P(`if ru < 10 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return rune(ru+48)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`} else if ru < 36 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`return rune(ru+55)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return rune(ru+61)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func randString`, p.localName, `(r randy`, p.localName, `) string {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(p.varGen.Next(), ` := r.Intn(100)`)
0000000000000000000000000000000000000000;;		p.P(`tmps := make([]rune, `, p.varGen.Current(), `)`)
0000000000000000000000000000000000000000;;		p.P(`for i := 0; i < `, p.varGen.Current(), `; i++ {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`tmps[i] = randUTF8Rune`, p.localName, `(r)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return string(tmps)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func randUnrecognized`, p.localName, `(r randy`, p.localName, `, maxFieldNumber int) (dAtA []byte) {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`l := r.Intn(5)`)
0000000000000000000000000000000000000000;;		p.P(`for i := 0; i < l; i++ {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`wire := r.Intn(4)`)
0000000000000000000000000000000000000000;;		p.P(`if wire == 3 { wire = 5 }`)
0000000000000000000000000000000000000000;;		p.P(`fieldNumber := maxFieldNumber + r.Intn(100)`)
0000000000000000000000000000000000000000;;		p.P(`dAtA = randField`, p.localName, `(dAtA, r, fieldNumber, wire)`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return dAtA`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func randField`, p.localName, `(dAtA []byte, r randy`, p.localName, `, fieldNumber int, wire int) []byte {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`key := uint32(fieldNumber)<<3 | uint32(wire)`)
0000000000000000000000000000000000000000;;		p.P(`switch wire {`)
0000000000000000000000000000000000000000;;		p.P(`case 0:`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA = encodeVarintPopulate`, p.localName, `(dAtA, uint64(key))`)
0000000000000000000000000000000000000000;;		p.P(p.varGen.Next(), ` := r.Int63()`)
0000000000000000000000000000000000000000;;		p.P(`if r.Intn(2) == 0 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(p.varGen.Current(), ` *= -1`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`dAtA = encodeVarintPopulate`, p.localName, `(dAtA, uint64(`, p.varGen.Current(), `))`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`case 1:`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA = encodeVarintPopulate`, p.localName, `(dAtA, uint64(key))`)
0000000000000000000000000000000000000000;;		p.P(`dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`case 2:`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA = encodeVarintPopulate`, p.localName, `(dAtA, uint64(key))`)
0000000000000000000000000000000000000000;;		p.P(`ll := r.Intn(100)`)
0000000000000000000000000000000000000000;;		p.P(`dAtA = encodeVarintPopulate`, p.localName, `(dAtA, uint64(ll))`)
0000000000000000000000000000000000000000;;		p.P(`for j := 0; j < ll; j++ {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA = append(dAtA, byte(r.Intn(256)))`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`default:`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA = encodeVarintPopulate`, p.localName, `(dAtA, uint64(key))`)
0000000000000000000000000000000000000000;;		p.P(`dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`return dAtA`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.P(`func encodeVarintPopulate`, p.localName, `(dAtA []byte, v uint64) []byte {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`for v >= 1<<7 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))`)
0000000000000000000000000000000000000000;;		p.P(`v >>= 7`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`dAtA = append(dAtA, uint8(v))`)
0000000000000000000000000000000000000000;;		p.P(`return dAtA`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewPlugin())
0000000000000000000000000000000000000000;;	}
