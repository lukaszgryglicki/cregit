0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/marshalto/marshalto.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/marshalto/marshalto.go][vendor/github.com/gogo/protobuf/plugin/marshalto/marshalto.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The marshalto plugin generates a Marshal and MarshalTo method for each message.
0000000000000000000000000000000000000000;;	The `Marshal() ([]byte, error)` method results in the fact that the message
0000000000000000000000000000000000000000;;	implements the Marshaler interface.
0000000000000000000000000000000000000000;;	This allows proto.Marshal to be faster by calling the generated Marshal method rather than using reflect to Marshal the struct.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If is enabled by the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - marshaler
0000000000000000000000000000000000000000;;	  - marshaler_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Or the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - unsafe_marshaler
0000000000000000000000000000000000000000;;	  - unsafe_marshaler_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	That is if you want to use the unsafe package in your generated code.
0000000000000000000000000000000000000000;;	The speed up using the unsafe package is not very significant.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The generation of marshalling tests are enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - testgen
0000000000000000000000000000000000000000;;	  - testgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	And benchmarks given it is enabled using one of the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  - benchgen
0000000000000000000000000000000000000000;;	  - benchgen_all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Let us look at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/example.proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Btw all the output can be seen at:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  github.com/gogo/protobuf/test/example/*
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following message:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	option (gogoproto.marshaler_all) = true;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	message B {
0000000000000000000000000000000000000000;;		option (gogoproto.description) = true;
0000000000000000000000000000000000000000;;		optional A A = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
0000000000000000000000000000000000000000;;		repeated bytes G = 2 [(gogoproto.customtype) = "github.com/gogo/protobuf/test/custom.Uint128", (gogoproto.nullable) = false];
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	given to the marshalto plugin, will generate the following code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func (m *B) Marshal() (dAtA []byte, err error) {
0000000000000000000000000000000000000000;;		size := m.Size()
0000000000000000000000000000000000000000;;		dAtA = make([]byte, size)
0000000000000000000000000000000000000000;;		n, err := m.MarshalTo(dAtA)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dAtA[:n], nil
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  func (m *B) MarshalTo(dAtA []byte) (int, error) {
0000000000000000000000000000000000000000;;		var i int
0000000000000000000000000000000000000000;;		_ = i
0000000000000000000000000000000000000000;;		var l int
0000000000000000000000000000000000000000;;		_ = l
0000000000000000000000000000000000000000;;		dAtA[i] = 0xa
0000000000000000000000000000000000000000;;		i++
0000000000000000000000000000000000000000;;		i = encodeVarintExample(dAtA, i, uint64(m.A.Size()))
0000000000000000000000000000000000000000;;		n2, err := m.A.MarshalTo(dAtA[i:])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		i += n2
0000000000000000000000000000000000000000;;		if len(m.G) > 0 {
0000000000000000000000000000000000000000;;			for _, msg := range m.G {
0000000000000000000000000000000000000000;;				dAtA[i] = 0x12
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;				i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
0000000000000000000000000000000000000000;;				n, err := msg.MarshalTo(dAtA[i:])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return 0, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i += n
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.XXX_unrecognized != nil {
0000000000000000000000000000000000000000;;			i += copy(dAtA[i:], m.XXX_unrecognized)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return i, nil
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	As shown above Marshal calculates the size of the not yet marshalled message
0000000000000000000000000000000000000000;;	and allocates the appropriate buffer.
0000000000000000000000000000000000000000;;	This is followed by calling the MarshalTo method which requires a preallocated buffer.
0000000000000000000000000000000000000000;;	The MarshalTo method allows a user to rather preallocated a reusable buffer.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The Size method is generated using the size plugin and the gogoproto.sizer, gogoproto.sizer_all extensions.
0000000000000000000000000000000000000000;;	The user can also using the generated Size method to check that his reusable buffer is still big enough.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The generated tests and benchmarks will keep you safe and show that this is really a significant speed improvement.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	An additional message-level option `stable_marshaler` (and the file-level
0000000000000000000000000000000000000000;;	option `stable_marshaler_all`) exists which causes the generated marshalling
0000000000000000000000000000000000000000;;	code to behave deterministically. Today, this only changes the serialization of
0000000000000000000000000000000000000000;;	maps; they are serialized in sort order.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package marshalto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/gogoproto"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/vanity"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NumGen interface {
0000000000000000000000000000000000000000;;		Next() string
0000000000000000000000000000000000000000;;		Current() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type numGen struct {
0000000000000000000000000000000000000000;;		index int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNumGen() NumGen {
0000000000000000000000000000000000000000;;		return &numGen{0}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this *numGen) Next() string {
0000000000000000000000000000000000000000;;		this.index++
0000000000000000000000000000000000000000;;		return this.Current()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this *numGen) Current() string {
0000000000000000000000000000000000000000;;		return strconv.Itoa(this.index)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type marshalto struct {
0000000000000000000000000000000000000000;;		*generator.Generator
0000000000000000000000000000000000000000;;		generator.PluginImports
0000000000000000000000000000000000000000;;		atleastOne  bool
0000000000000000000000000000000000000000;;		unsafePkg   generator.Single
0000000000000000000000000000000000000000;;		errorsPkg   generator.Single
0000000000000000000000000000000000000000;;		protoPkg    generator.Single
0000000000000000000000000000000000000000;;		sortKeysPkg generator.Single
0000000000000000000000000000000000000000;;		mathPkg     generator.Single
0000000000000000000000000000000000000000;;		typesPkg    generator.Single
0000000000000000000000000000000000000000;;		localName   string
0000000000000000000000000000000000000000;;		unsafe      bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMarshal() *marshalto {
0000000000000000000000000000000000000000;;		return &marshalto{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnsafeMarshal() *marshalto {
0000000000000000000000000000000000000000;;		return &marshalto{unsafe: true}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) Name() string {
0000000000000000000000000000000000000000;;		if p.unsafe {
0000000000000000000000000000000000000000;;			return "unsafemarshaler"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "marshalto"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) Init(g *generator.Generator) {
0000000000000000000000000000000000000000;;		p.Generator = g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) callFixed64(varName ...string) {
0000000000000000000000000000000000000000;;		p.P(`i = encodeFixed64`, p.localName, `(dAtA, i, uint64(`, strings.Join(varName, ""), `))`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) callFixed32(varName ...string) {
0000000000000000000000000000000000000000;;		p.P(`i = encodeFixed32`, p.localName, `(dAtA, i, uint32(`, strings.Join(varName, ""), `))`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) callVarint(varName ...string) {
0000000000000000000000000000000000000000;;		p.P(`i = encodeVarint`, p.localName, `(dAtA, i, uint64(`, strings.Join(varName, ""), `))`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) encodeVarint(varName string) {
0000000000000000000000000000000000000000;;		p.P(`for `, varName, ` >= 1<<7 {`)
0000000000000000000000000000000000000000;;		p.In()
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(uint64(`, varName, `)&0x7f|0x80)`)
0000000000000000000000000000000000000000;;		p.P(varName, ` >>= 7`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.Out()
0000000000000000000000000000000000000000;;		p.P(`}`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, `)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) encodeFixed64(varName string) {
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, `)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 8)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 16)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 24)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 32)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 40)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 48)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 56)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) unsafeFixed64(varName string, someType string) {
0000000000000000000000000000000000000000;;		p.P(`*(*`, someType, `)(`, p.unsafePkg.Use(), `.Pointer(&dAtA[i])) = `, varName)
0000000000000000000000000000000000000000;;		p.P(`i+=8`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) encodeFixed32(varName string) {
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, `)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 8)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 16)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;		p.P(`dAtA[i] = uint8(`, varName, ` >> 24)`)
0000000000000000000000000000000000000000;;		p.P(`i++`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) unsafeFixed32(varName string, someType string) {
0000000000000000000000000000000000000000;;		p.P(`*(*`, someType, `)(`, p.unsafePkg.Use(), `.Pointer(&dAtA[i])) = `, varName)
0000000000000000000000000000000000000000;;		p.P(`i+=4`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) encodeKey(fieldNumber int32, wireType int) {
0000000000000000000000000000000000000000;;		x := uint32(fieldNumber)<<3 | uint32(wireType)
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		keybuf := make([]byte, 0)
0000000000000000000000000000000000000000;;		for i = 0; x > 127; i++ {
0000000000000000000000000000000000000000;;			keybuf = append(keybuf, 0x80|uint8(x&0x7F))
0000000000000000000000000000000000000000;;			x >>= 7
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keybuf = append(keybuf, uint8(x))
0000000000000000000000000000000000000000;;		for _, b := range keybuf {
0000000000000000000000000000000000000000;;			p.P(`dAtA[i] = `, fmt.Sprintf("%#v", b))
0000000000000000000000000000000000000000;;			p.P(`i++`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func keySize(fieldNumber int32, wireType int) int {
0000000000000000000000000000000000000000;;		x := uint32(fieldNumber)<<3 | uint32(wireType)
0000000000000000000000000000000000000000;;		size := 0
0000000000000000000000000000000000000000;;		for size = 0; x > 127; size++ {
0000000000000000000000000000000000000000;;			x >>= 7
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		size++
0000000000000000000000000000000000000000;;		return size
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func wireToType(wire string) int {
0000000000000000000000000000000000000000;;		switch wire {
0000000000000000000000000000000000000000;;		case "fixed64":
0000000000000000000000000000000000000000;;			return proto.WireFixed64
0000000000000000000000000000000000000000;;		case "fixed32":
0000000000000000000000000000000000000000;;			return proto.WireFixed32
0000000000000000000000000000000000000000;;		case "varint":
0000000000000000000000000000000000000000;;			return proto.WireVarint
0000000000000000000000000000000000000000;;		case "bytes":
0000000000000000000000000000000000000000;;			return proto.WireBytes
0000000000000000000000000000000000000000;;		case "group":
0000000000000000000000000000000000000000;;			return proto.WireBytes
0000000000000000000000000000000000000000;;		case "zigzag32":
0000000000000000000000000000000000000000;;			return proto.WireVarint
0000000000000000000000000000000000000000;;		case "zigzag64":
0000000000000000000000000000000000000000;;			return proto.WireVarint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("unreachable")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) mapField(numGen NumGen, field *descriptor.FieldDescriptorProto, kvField *descriptor.FieldDescriptorProto, varName string, protoSizer bool) {
0000000000000000000000000000000000000000;;		switch kvField.GetType() {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_DOUBLE:
0000000000000000000000000000000000000000;;			p.callFixed64(p.mathPkg.Use(), `.Float64bits(float64(`, varName, `))`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FLOAT:
0000000000000000000000000000000000000000;;			p.callFixed32(p.mathPkg.Use(), `.Float32bits(float32(`, varName, `))`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_INT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_ENUM:
0000000000000000000000000000000000000000;;			p.callVarint(varName)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;			p.callFixed64(varName)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;			p.callFixed32(varName)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			p.P(`if `, varName, ` {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`dAtA[i] = 1`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`} else {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`dAtA[i] = 0`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`i++`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_STRING,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;			if gogoproto.IsCustomType(field) && kvField.IsBytes() {
0000000000000000000000000000000000000000;;				p.callVarint(varName, `.Size()`)
0000000000000000000000000000000000000000;;				p.P(`n`, numGen.Next(), `, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return 0, err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i+=n`, numGen.Current())
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.callVarint(`len(`, varName, `)`)
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], `, varName, `)`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT32:
0000000000000000000000000000000000000000;;			p.callVarint(`(uint32(`, varName, `) << 1) ^ uint32((`, varName, ` >> 31))`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			p.callVarint(`(uint64(`, varName, `) << 1) ^ uint64((`, varName, ` >> 63))`)
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;			if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;				p.callVarint(p.typesPkg.Use(), `.SizeOfStdTime(*`, varName, `)`)
0000000000000000000000000000000000000000;;				p.P(`n`, numGen.Next(), `, err := `, p.typesPkg.Use(), `.StdTimeMarshalTo(*`, varName, `, dAtA[i:])`)
0000000000000000000000000000000000000000;;			} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;				p.callVarint(p.typesPkg.Use(), `.SizeOfStdDuration(*`, varName, `)`)
0000000000000000000000000000000000000000;;				p.P(`n`, numGen.Next(), `, err := `, p.typesPkg.Use(), `.StdDurationMarshalTo(*`, varName, `, dAtA[i:])`)
0000000000000000000000000000000000000000;;			} else if protoSizer {
0000000000000000000000000000000000000000;;				p.callVarint(varName, `.ProtoSize()`)
0000000000000000000000000000000000000000;;				p.P(`n`, numGen.Next(), `, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.callVarint(varName, `.Size()`)
0000000000000000000000000000000000000000;;				p.P(`n`, numGen.Next(), `, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return 0, err`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`i+=n`, numGen.Current())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type orderFields []*descriptor.FieldDescriptorProto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this orderFields) Len() int {
0000000000000000000000000000000000000000;;		return len(this)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this orderFields) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return this[i].GetNumber() < this[j].GetNumber()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (this orderFields) Swap(i, j int) {
0000000000000000000000000000000000000000;;		this[i], this[j] = this[j], this[i]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) generateField(proto3 bool, numGen NumGen, file *generator.FileDescriptor, message *generator.Descriptor, field *descriptor.FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		fieldname := p.GetOneOfFieldName(message, field)
0000000000000000000000000000000000000000;;		nullable := gogoproto.IsNullable(field)
0000000000000000000000000000000000000000;;		repeated := field.IsRepeated()
0000000000000000000000000000000000000000;;		required := field.IsRequired()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		protoSizer := gogoproto.IsProtoSizer(file.FileDescriptorProto, message.DescriptorProto)
0000000000000000000000000000000000000000;;		doNilCheck := gogoproto.NeedsNilCheck(proto3, field)
0000000000000000000000000000000000000000;;		if required && nullable {
0000000000000000000000000000000000000000;;			p.P(`if m.`, fieldname, `== nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;				p.P(`return 0, new(`, p.protoPkg.Use(), `.RequiredNotSetError)`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`return 0, `, p.protoPkg.Use(), `.NewRequiredNotSetError("`, field.GetName(), `")`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`} else {`)
0000000000000000000000000000000000000000;;		} else if repeated {
0000000000000000000000000000000000000000;;			p.P(`if len(m.`, fieldname, `) > 0 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;		} else if doNilCheck {
0000000000000000000000000000000000000000;;			p.P(`if m.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		packed := field.IsPacked() || (proto3 && field.IsPacked3())
0000000000000000000000000000000000000000;;		wireType := field.WireType()
0000000000000000000000000000000000000000;;		fieldNumber := field.GetNumber()
0000000000000000000000000000000000000000;;		if packed {
0000000000000000000000000000000000000000;;			wireType = proto.WireBytes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch *field.Type {
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_DOUBLE:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 8`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`f`, numGen.Next(), ` := `, p.mathPkg.Use(), `.Float64bits(float64(num))`)
0000000000000000000000000000000000000000;;					p.encodeFixed64("f" + numGen.Current())
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.P(`f`, numGen.Next(), ` := `, p.mathPkg.Use(), `.Float64bits(float64(num))`)
0000000000000000000000000000000000000000;;					p.encodeFixed64("f" + numGen.Current())
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed64(p.mathPkg.Use(), `.Float64bits(float64(m.`+fieldname, `))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed64(p.mathPkg.Use(), `.Float64bits(float64(m.`+fieldname, `))`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed64(p.mathPkg.Use(), `.Float64bits(float64(*m.`+fieldname, `))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 8`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.unsafeFixed64("num", "float64")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("num", "float64")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64(`m.`+fieldname, "float64")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64(`m.`+fieldname, "float64")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64(`*m.`+fieldname, `float64`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FLOAT:
0000000000000000000000000000000000000000;;			if !p.unsafe || gogoproto.IsCastType(field) {
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 4`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`f`, numGen.Next(), ` := `, p.mathPkg.Use(), `.Float32bits(float32(num))`)
0000000000000000000000000000000000000000;;					p.encodeFixed32("f" + numGen.Current())
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.P(`f`, numGen.Next(), ` := `, p.mathPkg.Use(), `.Float32bits(float32(num))`)
0000000000000000000000000000000000000000;;					p.encodeFixed32("f" + numGen.Current())
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed32(p.mathPkg.Use(), `.Float32bits(float32(m.`+fieldname, `))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed32(p.mathPkg.Use(), `.Float32bits(float32(m.`+fieldname, `))`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed32(p.mathPkg.Use(), `.Float32bits(float32(*m.`+fieldname, `))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 4`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.unsafeFixed32("num", "float32")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("num", "float32")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32(`m.`+fieldname, `float32`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32(`m.`+fieldname, `float32`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32(`*m.`+fieldname, "float32")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_INT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_ENUM:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				jvar := "j" + numGen.Next()
0000000000000000000000000000000000000000;;				p.P(`dAtA`, numGen.Next(), ` := make([]byte, len(m.`, fieldname, `)*10)`)
0000000000000000000000000000000000000000;;				p.P(`var `, jvar, ` int`)
0000000000000000000000000000000000000000;;				if *field.Type == descriptor.FieldDescriptorProto_TYPE_INT64 ||
0000000000000000000000000000000000000000;;					*field.Type == descriptor.FieldDescriptorProto_TYPE_INT32 {
0000000000000000000000000000000000000000;;					p.P(`for _, num1 := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`num := uint64(num1)`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`for num >= 1<<7 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA`, numGen.Current(), `[`, jvar, `] = uint8(uint64(num)&0x7f|0x80)`)
0000000000000000000000000000000000000000;;				p.P(`num >>= 7`)
0000000000000000000000000000000000000000;;				p.P(jvar, `++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`dAtA`, numGen.Current(), `[`, jvar, `] = uint8(num)`)
0000000000000000000000000000000000000000;;				p.P(jvar, `++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(jvar)
0000000000000000000000000000000000000000;;				p.P(`i += copy(dAtA[i:], dAtA`, numGen.Current(), `[:`, jvar, `])`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint("num")
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`m.`, fieldname)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if !nullable {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`m.`, fieldname)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`*m.`, fieldname)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;			if !p.unsafe {
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 8`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeFixed64("num")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.encodeFixed64("num")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed64("m." + fieldname)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed64("m." + fieldname)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed64("*m." + fieldname)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				typeName := "int64"
0000000000000000000000000000000000000000;;				if *field.Type == descriptor.FieldDescriptorProto_TYPE_FIXED64 {
0000000000000000000000000000000000000000;;					typeName = "uint64"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 8`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.unsafeFixed64("num", typeName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("num", typeName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("m."+fieldname, typeName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("m."+fieldname, typeName)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed64("*m."+fieldname, typeName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;			descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;			if !p.unsafe {
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 4`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeFixed32("num")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.encodeFixed32("num")
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed32("m." + fieldname)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed32("m." + fieldname)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callFixed32("*m." + fieldname)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				typeName := "int32"
0000000000000000000000000000000000000000;;				if *field.Type == descriptor.FieldDescriptorProto_TYPE_FIXED32 {
0000000000000000000000000000000000000000;;					typeName = "uint32"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if packed {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `) * 4`)
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.unsafeFixed32("num", typeName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("num", typeName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("m."+fieldname, typeName)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if !nullable {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("m."+fieldname, typeName)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.unsafeFixed32("*m."+fieldname, typeName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`for _, b := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`if b {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 0`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, b := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`if b {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 0`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 0`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if !nullable {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 0`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i++`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`if *m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 1`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`} else {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`dAtA[i] = 0`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i++`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;			if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, s := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`l = len(s)`)
0000000000000000000000000000000000000000;;				p.encodeVarint("l")
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], s)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if len(m.`, fieldname, `) > 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if !nullable {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`len(*m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], *m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_GROUP:
0000000000000000000000000000000000000000;;			panic(fmt.Errorf("marshaler does not support group %v", fieldname))
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;			if p.IsMap(field) {
0000000000000000000000000000000000000000;;				m := p.GoMapType(nil, field)
0000000000000000000000000000000000000000;;				keygoTyp, keywire := p.GoType(nil, m.KeyField)
0000000000000000000000000000000000000000;;				keygoAliasTyp, _ := p.GoType(nil, m.KeyAliasField)
0000000000000000000000000000000000000000;;				// keys may not be pointers
0000000000000000000000000000000000000000;;				keygoTyp = strings.Replace(keygoTyp, "*", "", 1)
0000000000000000000000000000000000000000;;				keygoAliasTyp = strings.Replace(keygoAliasTyp, "*", "", 1)
0000000000000000000000000000000000000000;;				keyCapTyp := generator.CamelCase(keygoTyp)
0000000000000000000000000000000000000000;;				valuegoTyp, valuewire := p.GoType(nil, m.ValueField)
0000000000000000000000000000000000000000;;				valuegoAliasTyp, _ := p.GoType(nil, m.ValueAliasField)
0000000000000000000000000000000000000000;;				nullable, valuegoTyp, valuegoAliasTyp = generator.GoMapValueTypes(field, m.ValueField, valuegoTyp, valuegoAliasTyp)
0000000000000000000000000000000000000000;;				keyKeySize := keySize(1, wireToType(keywire))
0000000000000000000000000000000000000000;;				valueKeySize := keySize(2, wireToType(valuewire))
0000000000000000000000000000000000000000;;				if gogoproto.IsStableMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					keysName := `keysFor` + fieldname
0000000000000000000000000000000000000000;;					p.P(keysName, ` := make([]`, keygoTyp, `, 0, len(m.`, fieldname, `))`)
0000000000000000000000000000000000000000;;					p.P(`for k, _ := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(keysName, ` = append(`, keysName, `, `, keygoTyp, `(k))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(p.sortKeysPkg.Use(), `.`, keyCapTyp, `s(`, keysName, `)`)
0000000000000000000000000000000000000000;;					p.P(`for _, k := range `, keysName, ` {`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`for k, _ := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				sum := []string{strconv.Itoa(keyKeySize)}
0000000000000000000000000000000000000000;;				switch m.KeyField.GetType() {
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_DOUBLE,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;					sum = append(sum, `8`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_FLOAT,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;					sum = append(sum, `4`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_ENUM,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;					sum = append(sum, `sov`+p.localName+`(uint64(k))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;					sum = append(sum, `1`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_STRING,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;					sum = append(sum, `len(k)+sov`+p.localName+`(uint64(len(k)))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_SINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;					sum = append(sum, `soz`+p.localName+`(uint64(k))`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsStableMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`v := m.`, fieldname, `[`, keygoAliasTyp, `(k)]`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`v := m.`, fieldname, `[k]`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				accessor := `v`
0000000000000000000000000000000000000000;;				switch m.ValueField.GetType() {
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_DOUBLE,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(8))
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_FLOAT,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_FIXED32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(4))
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_INT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT64,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_UINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_ENUM,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `sov`+p.localName+`(uint64(v))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `1`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `len(v)+sov`+p.localName+`(uint64(len(v)))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;					if gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;						p.P(`cSize := 0`)
0000000000000000000000000000000000000000;;						if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;							p.P(`if `, accessor, ` != nil {`)
0000000000000000000000000000000000000000;;							p.In()
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.P(`cSize = `, accessor, `.Size()`)
0000000000000000000000000000000000000000;;						p.P(`cSize += `, strconv.Itoa(valueKeySize), ` + sov`+p.localName+`(uint64(cSize))`)
0000000000000000000000000000000000000000;;						if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;							p.Out()
0000000000000000000000000000000000000000;;							p.P(`}`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						sum = append(sum, `cSize`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`byteSize := 0`)
0000000000000000000000000000000000000000;;						if proto3 {
0000000000000000000000000000000000000000;;							p.P(`if len(v) > 0 {`)
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							p.P(`if v != nil {`)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`byteSize = `, strconv.Itoa(valueKeySize), ` + len(v)+sov`+p.localName+`(uint64(len(v)))`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						sum = append(sum, `byteSize`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_SINT32,
0000000000000000000000000000000000000000;;					descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;					sum = append(sum, strconv.Itoa(valueKeySize))
0000000000000000000000000000000000000000;;					sum = append(sum, `soz`+p.localName+`(uint64(v))`)
0000000000000000000000000000000000000000;;				case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;					if valuegoTyp != valuegoAliasTyp &&
0000000000000000000000000000000000000000;;						!gogoproto.IsStdTime(field) &&
0000000000000000000000000000000000000000;;						!gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;						if nullable {
0000000000000000000000000000000000000000;;							// cast back to the type that has the generated methods on it
0000000000000000000000000000000000000000;;							accessor = `((` + valuegoTyp + `)(` + accessor + `))`
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							accessor = `((*` + valuegoTyp + `)(&` + accessor + `))`
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					} else if !nullable {
0000000000000000000000000000000000000000;;						accessor = `(&v)`
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`msgSize := 0`)
0000000000000000000000000000000000000000;;					p.P(`if `, accessor, ` != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;						p.P(`msgSize = `, p.typesPkg.Use(), `.SizeOfStdTime(*`, accessor, `)`)
0000000000000000000000000000000000000000;;					} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;						p.P(`msgSize = `, p.typesPkg.Use(), `.SizeOfStdDuration(*`, accessor, `)`)
0000000000000000000000000000000000000000;;					} else if protoSizer {
0000000000000000000000000000000000000000;;						p.P(`msgSize = `, accessor, `.ProtoSize()`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`msgSize = `, accessor, `.Size()`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`msgSize += `, strconv.Itoa(valueKeySize), ` + sov`+p.localName+`(uint64(msgSize))`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					sum = append(sum, `msgSize`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`mapSize := `, strings.Join(sum, " + "))
0000000000000000000000000000000000000000;;				p.callVarint("mapSize")
0000000000000000000000000000000000000000;;				p.encodeKey(1, wireToType(keywire))
0000000000000000000000000000000000000000;;				p.mapField(numGen, field, m.KeyField, "k", protoSizer)
0000000000000000000000000000000000000000;;				nullableMsg := nullable && (m.ValueField.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE ||
0000000000000000000000000000000000000000;;					gogoproto.IsCustomType(field) && m.ValueField.IsBytes())
0000000000000000000000000000000000000000;;				plainBytes := m.ValueField.IsBytes() && !gogoproto.IsCustomType(field)
0000000000000000000000000000000000000000;;				if nullableMsg {
0000000000000000000000000000000000000000;;					p.P(`if `, accessor, ` != nil { `)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;				} else if plainBytes {
0000000000000000000000000000000000000000;;					if proto3 {
0000000000000000000000000000000000000000;;						p.P(`if len(`, accessor, `) > 0 {`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.P(`if `, accessor, ` != nil {`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.encodeKey(2, wireToType(valuewire))
0000000000000000000000000000000000000000;;				p.mapField(numGen, field, m.ValueField, accessor, protoSizer)
0000000000000000000000000000000000000000;;				if nullableMsg || plainBytes {
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, msg := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				varName := "msg"
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;						varName = "*" + varName
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.callVarint(p.typesPkg.Use(), `.SizeOfStdTime(`, varName, `)`)
0000000000000000000000000000000000000000;;					p.P(`n, err := `, p.typesPkg.Use(), `.StdTimeMarshalTo(`, varName, `, dAtA[i:])`)
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;						varName = "*" + varName
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.callVarint(p.typesPkg.Use(), `.SizeOfStdDuration(`, varName, `)`)
0000000000000000000000000000000000000000;;					p.P(`n, err := `, p.typesPkg.Use(), `.StdDurationMarshalTo(`, varName, `, dAtA[i:])`)
0000000000000000000000000000000000000000;;				} else if protoSizer {
0000000000000000000000000000000000000000;;					p.callVarint(varName, ".ProtoSize()")
0000000000000000000000000000000000000000;;					p.P(`n, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.callVarint(varName, ".Size()")
0000000000000000000000000000000000000000;;					p.P(`n, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return 0, err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i+=n`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				varName := `m.` + fieldname
0000000000000000000000000000000000000000;;				if gogoproto.IsStdTime(field) {
0000000000000000000000000000000000000000;;					if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;						varName = "*" + varName
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.callVarint(p.typesPkg.Use(), `.SizeOfStdTime(`, varName, `)`)
0000000000000000000000000000000000000000;;					p.P(`n`, numGen.Next(), `, err := `, p.typesPkg.Use(), `.StdTimeMarshalTo(`, varName, `, dAtA[i:])`)
0000000000000000000000000000000000000000;;				} else if gogoproto.IsStdDuration(field) {
0000000000000000000000000000000000000000;;					if gogoproto.IsNullable(field) {
0000000000000000000000000000000000000000;;						varName = "*" + varName
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.callVarint(p.typesPkg.Use(), `.SizeOfStdDuration(`, varName, `)`)
0000000000000000000000000000000000000000;;					p.P(`n`, numGen.Next(), `, err := `, p.typesPkg.Use(), `.StdDurationMarshalTo(`, varName, `, dAtA[i:])`)
0000000000000000000000000000000000000000;;				} else if protoSizer {
0000000000000000000000000000000000000000;;					p.callVarint(varName, `.ProtoSize()`)
0000000000000000000000000000000000000000;;					p.P(`n`, numGen.Next(), `, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.callVarint(varName, `.Size()`)
0000000000000000000000000000000000000000;;					p.P(`n`, numGen.Next(), `, err := `, varName, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`return 0, err`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(`i+=n`, numGen.Current())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;			if !gogoproto.IsCustomType(field) {
0000000000000000000000000000000000000000;;				if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, b := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint("len(b)")
0000000000000000000000000000000000000000;;					p.P(`i+=copy(dAtA[i:], b)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else if proto3 {
0000000000000000000000000000000000000000;;					p.P(`if len(m.`, fieldname, `) > 0 {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;					p.P(`i+=copy(dAtA[i:], m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					p.callVarint(`len(m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;					p.P(`i+=copy(dAtA[i:], m.`, fieldname, `)`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if repeated {
0000000000000000000000000000000000000000;;					p.P(`for _, msg := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					if protoSizer {
0000000000000000000000000000000000000000;;						p.callVarint(`msg.ProtoSize()`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.callVarint(`msg.Size()`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`n, err := msg.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;					p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return 0, err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`i+=n`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;					if protoSizer {
0000000000000000000000000000000000000000;;						p.callVarint(`m.`, fieldname, `.ProtoSize()`)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						p.callVarint(`m.`, fieldname, `.Size()`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					p.P(`n`, numGen.Next(), `, err := m.`, fieldname, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;					p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return 0, err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`i+=n`, numGen.Current())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT32:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				datavar := "dAtA" + numGen.Next()
0000000000000000000000000000000000000000;;				jvar := "j" + numGen.Next()
0000000000000000000000000000000000000000;;				p.P(datavar, ` := make([]byte, len(m.`, fieldname, ")*5)")
0000000000000000000000000000000000000000;;				p.P(`var `, jvar, ` int`)
0000000000000000000000000000000000000000;;				p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				xvar := "x" + numGen.Next()
0000000000000000000000000000000000000000;;				p.P(xvar, ` := (uint32(num) << 1) ^ uint32((num >> 31))`)
0000000000000000000000000000000000000000;;				p.P(`for `, xvar, ` >= 1<<7 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(datavar, `[`, jvar, `] = uint8(uint64(`, xvar, `)&0x7f|0x80)`)
0000000000000000000000000000000000000000;;				p.P(jvar, `++`)
0000000000000000000000000000000000000000;;				p.P(xvar, ` >>= 7`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(datavar, `[`, jvar, `] = uint8(`, xvar, `)`)
0000000000000000000000000000000000000000;;				p.P(jvar, `++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(jvar)
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], `, datavar, `[:`, jvar, `])`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`x`, numGen.Next(), ` := (uint32(num) << 1) ^ uint32((num >> 31))`)
0000000000000000000000000000000000000000;;				p.encodeVarint("x" + numGen.Current())
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`(uint32(m.`, fieldname, `) << 1) ^ uint32((m.`, fieldname, ` >> 31))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if !nullable {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`(uint32(m.`, fieldname, `) << 1) ^ uint32((m.`, fieldname, ` >> 31))`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`(uint32(*m.`, fieldname, `) << 1) ^ uint32((*m.`, fieldname, ` >> 31))`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case descriptor.FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			if packed {
0000000000000000000000000000000000000000;;				jvar := "j" + numGen.Next()
0000000000000000000000000000000000000000;;				xvar := "x" + numGen.Next()
0000000000000000000000000000000000000000;;				datavar := "dAtA" + numGen.Next()
0000000000000000000000000000000000000000;;				p.P(`var `, jvar, ` int`)
0000000000000000000000000000000000000000;;				p.P(datavar, ` := make([]byte, len(m.`, fieldname, `)*10)`)
0000000000000000000000000000000000000000;;				p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(xvar, ` := (uint64(num) << 1) ^ uint64((num >> 63))`)
0000000000000000000000000000000000000000;;				p.P(`for `, xvar, ` >= 1<<7 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(datavar, `[`, jvar, `] = uint8(uint64(`, xvar, `)&0x7f|0x80)`)
0000000000000000000000000000000000000000;;				p.P(jvar, `++`)
0000000000000000000000000000000000000000;;				p.P(xvar, ` >>= 7`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.P(datavar, `[`, jvar, `] = uint8(`, xvar, `)`)
0000000000000000000000000000000000000000;;				p.P(jvar, `++`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(jvar)
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], `, datavar, `[:`, jvar, `])`)
0000000000000000000000000000000000000000;;			} else if repeated {
0000000000000000000000000000000000000000;;				p.P(`for _, num := range m.`, fieldname, ` {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.P(`x`, numGen.Next(), ` := (uint64(num) << 1) ^ uint64((num >> 63))`)
0000000000000000000000000000000000000000;;				p.encodeVarint("x" + numGen.Current())
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if proto3 {
0000000000000000000000000000000000000000;;				p.P(`if m.`, fieldname, ` != 0 {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`(uint64(m.`, fieldname, `) << 1) ^ uint64((m.`, fieldname, ` >> 63))`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			} else if !nullable {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`(uint64(m.`, fieldname, `) << 1) ^ uint64((m.`, fieldname, ` >> 63))`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.encodeKey(fieldNumber, wireType)
0000000000000000000000000000000000000000;;				p.callVarint(`(uint64(*m.`, fieldname, `) << 1) ^ uint64((*m.`, fieldname, ` >> 63))`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("not implemented")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if (required && nullable) || repeated || doNilCheck {
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *marshalto) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		numGen := NewNumGen()
0000000000000000000000000000000000000000;;		p.PluginImports = generator.NewPluginImports(p.Generator)
0000000000000000000000000000000000000000;;		p.atleastOne = false
0000000000000000000000000000000000000000;;		p.localName = generator.FileName(file)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.mathPkg = p.NewImport("math")
0000000000000000000000000000000000000000;;		p.sortKeysPkg = p.NewImport("github.com/gogo/protobuf/sortkeys")
0000000000000000000000000000000000000000;;		p.protoPkg = p.NewImport("github.com/gogo/protobuf/proto")
0000000000000000000000000000000000000000;;		if !gogoproto.ImportsGoGoProto(file.FileDescriptorProto) {
0000000000000000000000000000000000000000;;			p.protoPkg = p.NewImport("github.com/golang/protobuf/proto")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.unsafePkg = p.NewImport("unsafe")
0000000000000000000000000000000000000000;;		p.errorsPkg = p.NewImport("errors")
0000000000000000000000000000000000000000;;		p.typesPkg = p.NewImport("github.com/gogo/protobuf/types")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, message := range file.Messages() {
0000000000000000000000000000000000000000;;			if message.DescriptorProto.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ccTypeName := generator.CamelCaseSlice(message.TypeName())
0000000000000000000000000000000000000000;;			if p.unsafe {
0000000000000000000000000000000000000000;;				if !gogoproto.IsUnsafeMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					panic(fmt.Sprintf("unsafe_marshaler and marshalto enabled for %v", ccTypeName))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !p.unsafe {
0000000000000000000000000000000000000000;;				if !gogoproto.IsMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if gogoproto.IsUnsafeMarshaler(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					panic(fmt.Sprintf("unsafe_marshaler and marshalto enabled for %v", ccTypeName))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.atleastOne = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(`func (m *`, ccTypeName, `) Marshal() (dAtA []byte, err error) {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			if gogoproto.IsProtoSizer(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.P(`size := m.ProtoSize()`)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.P(`size := m.Size()`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.P(`dAtA = make([]byte, size)`)
0000000000000000000000000000000000000000;;			p.P(`n, err := m.MarshalTo(dAtA)`)
0000000000000000000000000000000000000000;;			p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`return nil, err`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`return dAtA[:n], nil`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(``)
0000000000000000000000000000000000000000;;			p.P(`func (m *`, ccTypeName, `) MarshalTo(dAtA []byte) (int, error) {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`var i int`)
0000000000000000000000000000000000000000;;			p.P(`_ = i`)
0000000000000000000000000000000000000000;;			p.P(`var l int`)
0000000000000000000000000000000000000000;;			p.P(`_ = l`)
0000000000000000000000000000000000000000;;			fields := orderFields(message.GetField())
0000000000000000000000000000000000000000;;			sort.Sort(fields)
0000000000000000000000000000000000000000;;			oneofs := make(map[string]struct{})
0000000000000000000000000000000000000000;;			for _, field := range message.Field {
0000000000000000000000000000000000000000;;				oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;				if !oneof {
0000000000000000000000000000000000000000;;					proto3 := gogoproto.IsProto3(file.FileDescriptorProto)
0000000000000000000000000000000000000000;;					p.generateField(proto3, numGen, file, message, field)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fieldname := p.GetFieldName(message, field)
0000000000000000000000000000000000000000;;					if _, ok := oneofs[fieldname]; !ok {
0000000000000000000000000000000000000000;;						oneofs[fieldname] = struct{}{}
0000000000000000000000000000000000000000;;						p.P(`if m.`, fieldname, ` != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`nn`, numGen.Next(), `, err := m.`, fieldname, `.MarshalTo(dAtA[i:])`)
0000000000000000000000000000000000000000;;						p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;						p.In()
0000000000000000000000000000000000000000;;						p.P(`return 0, err`)
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;						p.P(`i+=nn`, numGen.Current())
0000000000000000000000000000000000000000;;						p.Out()
0000000000000000000000000000000000000000;;						p.P(`}`)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if message.DescriptorProto.HasExtension() {
0000000000000000000000000000000000000000;;				if gogoproto.HasExtensionsMap(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;					p.P(`n, err := `, p.protoPkg.Use(), `.EncodeInternalExtension(m, dAtA[i:])`)
0000000000000000000000000000000000000000;;					p.P(`if err != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`return 0, err`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;					p.P(`i+=n`)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					p.P(`if m.XXX_extensions != nil {`)
0000000000000000000000000000000000000000;;					p.In()
0000000000000000000000000000000000000000;;					p.P(`i+=copy(dAtA[i:], m.XXX_extensions)`)
0000000000000000000000000000000000000000;;					p.Out()
0000000000000000000000000000000000000000;;					p.P(`}`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if gogoproto.HasUnrecognized(file.FileDescriptorProto, message.DescriptorProto) {
0000000000000000000000000000000000000000;;				p.P(`if m.XXX_unrecognized != nil {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`i+=copy(dAtA[i:], m.XXX_unrecognized)`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(`return i, nil`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//Generate MarshalTo methods for oneof fields
0000000000000000000000000000000000000000;;			m := proto.Clone(message.DescriptorProto).(*descriptor.DescriptorProto)
0000000000000000000000000000000000000000;;			for _, field := range m.Field {
0000000000000000000000000000000000000000;;				oneof := field.OneofIndex != nil
0000000000000000000000000000000000000000;;				if !oneof {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ccTypeName := p.OneOfTypeName(message, field)
0000000000000000000000000000000000000000;;				p.P(`func (m *`, ccTypeName, `) MarshalTo(dAtA []byte) (int, error) {`)
0000000000000000000000000000000000000000;;				p.In()
0000000000000000000000000000000000000000;;				p.P(`i := 0`)
0000000000000000000000000000000000000000;;				vanity.TurnOffNullableForNativeTypesWithoutDefaultsOnly(field)
0000000000000000000000000000000000000000;;				p.generateField(false, numGen, file, message, field)
0000000000000000000000000000000000000000;;				p.P(`return i, nil`)
0000000000000000000000000000000000000000;;				p.Out()
0000000000000000000000000000000000000000;;				p.P(`}`)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if p.atleastOne {
0000000000000000000000000000000000000000;;			p.P(`func encodeFixed64`, p.localName, `(dAtA []byte, offset int, v uint64) int {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset] = uint8(v)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+1] = uint8(v >> 8)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+2] = uint8(v >> 16)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+3] = uint8(v >> 24)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+4] = uint8(v >> 32)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+5] = uint8(v >> 40)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+6] = uint8(v >> 48)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+7] = uint8(v >> 56)`)
0000000000000000000000000000000000000000;;			p.P(`return offset+8`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(`func encodeFixed32`, p.localName, `(dAtA []byte, offset int, v uint32) int {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset] = uint8(v)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+1] = uint8(v >> 8)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+2] = uint8(v >> 16)`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset+3] = uint8(v >> 24)`)
0000000000000000000000000000000000000000;;			p.P(`return offset+4`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.P(`func encodeVarint`, p.localName, `(dAtA []byte, offset int, v uint64) int {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`for v >= 1<<7 {`)
0000000000000000000000000000000000000000;;			p.In()
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset] = uint8(v&0x7f|0x80)`)
0000000000000000000000000000000000000000;;			p.P(`v >>= 7`)
0000000000000000000000000000000000000000;;			p.P(`offset++`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;			p.P(`dAtA[offset] = uint8(v)`)
0000000000000000000000000000000000000000;;			p.P(`return offset+1`)
0000000000000000000000000000000000000000;;			p.Out()
0000000000000000000000000000000000000000;;			p.P(`}`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewMarshal())
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(NewUnsafeMarshal())
0000000000000000000000000000000000000000;;	}
