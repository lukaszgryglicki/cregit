0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/sortkeys/sortkeys.go[Godeps/_workspace/src/github.com/gogo/protobuf/sortkeys/sortkeys.go][vendor/github.com/gogo/protobuf/sortkeys/sortkeys.go];	
0000000000000000000000000000000000000000;;	package sortkeys
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Strings(l []string) {
0000000000000000000000000000000000000000;;		sort.Strings(l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Float64s(l []float64) {
0000000000000000000000000000000000000000;;		sort.Float64s(l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Float32s(l []float32) {
0000000000000000000000000000000000000000;;		sort.Sort(Float32Slice(l))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Int64s(l []int64) {
0000000000000000000000000000000000000000;;		sort.Sort(Int64Slice(l))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Int32s(l []int32) {
0000000000000000000000000000000000000000;;		sort.Sort(Int32Slice(l))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Uint64s(l []uint64) {
0000000000000000000000000000000000000000;;		sort.Sort(Uint64Slice(l))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Uint32s(l []uint32) {
0000000000000000000000000000000000000000;;		sort.Sort(Uint32Slice(l))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Bools(l []bool) {
0000000000000000000000000000000000000000;;		sort.Sort(BoolSlice(l))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BoolSlice []bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p BoolSlice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p BoolSlice) Less(i, j int) bool { return p[j] }
0000000000000000000000000000000000000000;;	func (p BoolSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Int64Slice []int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Int64Slice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p Int64Slice) Less(i, j int) bool { return p[i] < p[j] }
0000000000000000000000000000000000000000;;	func (p Int64Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Int32Slice []int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Int32Slice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p Int32Slice) Less(i, j int) bool { return p[i] < p[j] }
0000000000000000000000000000000000000000;;	func (p Int32Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Uint64Slice []uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Uint64Slice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p Uint64Slice) Less(i, j int) bool { return p[i] < p[j] }
0000000000000000000000000000000000000000;;	func (p Uint64Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Uint32Slice []uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Uint32Slice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p Uint32Slice) Less(i, j int) bool { return p[i] < p[j] }
0000000000000000000000000000000000000000;;	func (p Uint32Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Float32Slice []float32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Float32Slice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p Float32Slice) Less(i, j int) bool { return p[i] < p[j] }
0000000000000000000000000000000000000000;;	func (p Float32Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
