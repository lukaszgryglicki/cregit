0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
8329b5f94b1a4a7919ce36cf38e5a9fa0715aaf4;Godeps/_workspace/src/github.com/gogo/protobuf/proto/skip_gogo.go[Godeps/_workspace/src/github.com/gogo/protobuf/proto/skip_gogo.go][vendor/github.com/gogo/protobuf/proto/skip_gogo.go];	
0000000000000000000000000000000000000000;;	package proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Skip(data []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		l := len(data)
0000000000000000000000000000000000000000;;		index := 0
0000000000000000000000000000000000000000;;		for index < l {
0000000000000000000000000000000000000000;;			var wire uint64
0000000000000000000000000000000000000000;;			for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;				if index >= l {
0000000000000000000000000000000000000000;;					return 0, io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				b := data[index]
0000000000000000000000000000000000000000;;				index++
0000000000000000000000000000000000000000;;				wire |= (uint64(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;				if b < 0x80 {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wireType := int(wire & 0x7)
0000000000000000000000000000000000000000;;			switch wireType {
0000000000000000000000000000000000000000;;			case 0:
0000000000000000000000000000000000000000;;				for {
0000000000000000000000000000000000000000;;					if index >= l {
0000000000000000000000000000000000000000;;						return 0, io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					index++
0000000000000000000000000000000000000000;;					if data[index-1] < 0x80 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return index, nil
0000000000000000000000000000000000000000;;			case 1:
0000000000000000000000000000000000000000;;				index += 8
0000000000000000000000000000000000000000;;				return index, nil
0000000000000000000000000000000000000000;;			case 2:
0000000000000000000000000000000000000000;;				var length int
0000000000000000000000000000000000000000;;				for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;					if index >= l {
0000000000000000000000000000000000000000;;						return 0, io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					b := data[index]
0000000000000000000000000000000000000000;;					index++
0000000000000000000000000000000000000000;;					length |= (int(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;					if b < 0x80 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				index += length
0000000000000000000000000000000000000000;;				return index, nil
0000000000000000000000000000000000000000;;			case 3:
0000000000000000000000000000000000000000;;				for {
0000000000000000000000000000000000000000;;					var innerWire uint64
0000000000000000000000000000000000000000;;					var start int = index
0000000000000000000000000000000000000000;;					for shift := uint(0); ; shift += 7 {
0000000000000000000000000000000000000000;;						if index >= l {
0000000000000000000000000000000000000000;;							return 0, io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						b := data[index]
0000000000000000000000000000000000000000;;						index++
0000000000000000000000000000000000000000;;						innerWire |= (uint64(b) & 0x7F) << shift
0000000000000000000000000000000000000000;;						if b < 0x80 {
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					innerWireType := int(innerWire & 0x7)
0000000000000000000000000000000000000000;;					if innerWireType == 4 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					next, err := Skip(data[start:])
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return 0, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					index = start + next
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return index, nil
0000000000000000000000000000000000000000;;			case 4:
0000000000000000000000000000000000000000;;				return index, nil
0000000000000000000000000000000000000000;;			case 5:
0000000000000000000000000000000000000000;;				index += 4
0000000000000000000000000000000000000000;;				return index, nil
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("unreachable")
0000000000000000000000000000000000000000;;	}
