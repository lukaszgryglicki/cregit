0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
8329b5f94b1a4a7919ce36cf38e5a9fa0715aaf4;Godeps/_workspace/src/github.com/gogo/protobuf/proto/properties_gogo.go[Godeps/_workspace/src/github.com/gogo/protobuf/proto/properties_gogo.go][vendor/github.com/gogo/protobuf/proto/properties_gogo.go];	
0000000000000000000000000000000000000000;;	package proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Properties) setCustomEncAndDec(typ reflect.Type) {
0000000000000000000000000000000000000000;;		p.ctype = typ
0000000000000000000000000000000000000000;;		if p.Repeated {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_custom_slice_bytes
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_custom_slice_bytes
0000000000000000000000000000000000000000;;			p.size = size_custom_slice_bytes
0000000000000000000000000000000000000000;;		} else if typ.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_custom_bytes
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_custom_bytes
0000000000000000000000000000000000000000;;			p.size = size_custom_bytes
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_custom_ref_bytes
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_custom_ref_bytes
0000000000000000000000000000000000000000;;			p.size = size_custom_ref_bytes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Properties) setDurationEncAndDec(typ reflect.Type) {
0000000000000000000000000000000000000000;;		if p.Repeated {
0000000000000000000000000000000000000000;;			if typ.Elem().Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;				p.enc = (*Buffer).enc_slice_duration
0000000000000000000000000000000000000000;;				p.dec = (*Buffer).dec_slice_duration
0000000000000000000000000000000000000000;;				p.size = size_slice_duration
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.enc = (*Buffer).enc_slice_ref_duration
0000000000000000000000000000000000000000;;				p.dec = (*Buffer).dec_slice_ref_duration
0000000000000000000000000000000000000000;;				p.size = size_slice_ref_duration
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if typ.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_duration
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_duration
0000000000000000000000000000000000000000;;			p.size = size_duration
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_ref_duration
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_ref_duration
0000000000000000000000000000000000000000;;			p.size = size_ref_duration
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Properties) setTimeEncAndDec(typ reflect.Type) {
0000000000000000000000000000000000000000;;		if p.Repeated {
0000000000000000000000000000000000000000;;			if typ.Elem().Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;				p.enc = (*Buffer).enc_slice_time
0000000000000000000000000000000000000000;;				p.dec = (*Buffer).dec_slice_time
0000000000000000000000000000000000000000;;				p.size = size_slice_time
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p.enc = (*Buffer).enc_slice_ref_time
0000000000000000000000000000000000000000;;				p.dec = (*Buffer).dec_slice_ref_time
0000000000000000000000000000000000000000;;				p.size = size_slice_ref_time
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if typ.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_time
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_time
0000000000000000000000000000000000000000;;			p.size = size_time
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			p.enc = (*Buffer).enc_ref_time
0000000000000000000000000000000000000000;;			p.dec = (*Buffer).dec_ref_time
0000000000000000000000000000000000000000;;			p.size = size_ref_time
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Properties) setSliceOfNonPointerStructs(typ reflect.Type) {
0000000000000000000000000000000000000000;;		t2 := typ.Elem()
0000000000000000000000000000000000000000;;		p.sstype = typ
0000000000000000000000000000000000000000;;		p.stype = t2
0000000000000000000000000000000000000000;;		p.isMarshaler = isMarshaler(t2)
0000000000000000000000000000000000000000;;		p.isUnmarshaler = isUnmarshaler(t2)
0000000000000000000000000000000000000000;;		p.enc = (*Buffer).enc_slice_ref_struct_message
0000000000000000000000000000000000000000;;		p.dec = (*Buffer).dec_slice_ref_struct_message
0000000000000000000000000000000000000000;;		p.size = size_slice_ref_struct_message
0000000000000000000000000000000000000000;;		if p.Wire != "bytes" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "proto: no ptr oenc for %T -> %T \n", typ, t2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
