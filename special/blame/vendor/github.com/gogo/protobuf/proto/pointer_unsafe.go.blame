0000000000000000000000000000000000000000;;	// Go support for Protocol Buffers - Google's data interchange format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// https://github.com/golang/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	// contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	// this software without specific prior written permission.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
8329b5f94b1a4a7919ce36cf38e5a9fa0715aaf4;Godeps/_workspace/src/github.com/gogo/protobuf/proto/pointer_unsafe.go[Godeps/_workspace/src/github.com/gogo/protobuf/proto/pointer_unsafe.go][vendor/github.com/gogo/protobuf/proto/pointer_unsafe.go];	
0000000000000000000000000000000000000000;;	// +build !appengine,!js
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains the implementation of the proto field accesses using package unsafe.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE: These type_Foo functions would more idiomatically be methods,
0000000000000000000000000000000000000000;;	// but Go does not allow methods on pointer types, and we must preserve
0000000000000000000000000000000000000000;;	// some pointer type for the garbage collector. We use these
0000000000000000000000000000000000000000;;	// funcs with clunky names as our poor approximation to methods.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An alternative would be
0000000000000000000000000000000000000000;;	//	type structPointer struct { p unsafe.Pointer }
0000000000000000000000000000000000000000;;	// but that does not registerize as well.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A structPointer is a pointer to a struct.
0000000000000000000000000000000000000000;;	type structPointer unsafe.Pointer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// toStructPointer returns a structPointer equivalent to the given reflect value.
0000000000000000000000000000000000000000;;	func toStructPointer(v reflect.Value) structPointer {
0000000000000000000000000000000000000000;;		return structPointer(unsafe.Pointer(v.Pointer()))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNil reports whether p is nil.
0000000000000000000000000000000000000000;;	func structPointer_IsNil(p structPointer) bool {
0000000000000000000000000000000000000000;;		return p == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface returns the struct pointer, assumed to have element type t,
0000000000000000000000000000000000000000;;	// as an interface value.
0000000000000000000000000000000000000000;;	func structPointer_Interface(p structPointer, t reflect.Type) interface{} {
0000000000000000000000000000000000000000;;		return reflect.NewAt(t, unsafe.Pointer(p)).Interface()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A field identifies a field in a struct, accessible from a structPointer.
0000000000000000000000000000000000000000;;	// In this implementation, a field is identified by its byte offset from the start of the struct.
0000000000000000000000000000000000000000;;	type field uintptr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// toField returns a field equivalent to the given reflect field.
0000000000000000000000000000000000000000;;	func toField(f *reflect.StructField) field {
0000000000000000000000000000000000000000;;		return field(f.Offset)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// invalidField is an invalid field identifier.
0000000000000000000000000000000000000000;;	const invalidField = ^field(0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValid reports whether the field identifier is valid.
0000000000000000000000000000000000000000;;	func (f field) IsValid() bool {
0000000000000000000000000000000000000000;;		return f != ^field(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bytes returns the address of a []byte field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_Bytes(p structPointer, f field) *[]byte {
0000000000000000000000000000000000000000;;		return (*[]byte)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BytesSlice returns the address of a [][]byte field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_BytesSlice(p structPointer, f field) *[][]byte {
0000000000000000000000000000000000000000;;		return (*[][]byte)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool returns the address of a *bool field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_Bool(p structPointer, f field) **bool {
0000000000000000000000000000000000000000;;		return (**bool)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolVal returns the address of a bool field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_BoolVal(p structPointer, f field) *bool {
0000000000000000000000000000000000000000;;		return (*bool)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolSlice returns the address of a []bool field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_BoolSlice(p structPointer, f field) *[]bool {
0000000000000000000000000000000000000000;;		return (*[]bool)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the address of a *string field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_String(p structPointer, f field) **string {
0000000000000000000000000000000000000000;;		return (**string)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringVal returns the address of a string field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_StringVal(p structPointer, f field) *string {
0000000000000000000000000000000000000000;;		return (*string)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringSlice returns the address of a []string field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_StringSlice(p structPointer, f field) *[]string {
0000000000000000000000000000000000000000;;		return (*[]string)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtMap returns the address of an extension map field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_Extensions(p structPointer, f field) *XXX_InternalExtensions {
0000000000000000000000000000000000000000;;		return (*XXX_InternalExtensions)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func structPointer_ExtMap(p structPointer, f field) *map[int32]Extension {
0000000000000000000000000000000000000000;;		return (*map[int32]Extension)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAt returns the reflect.Value for a pointer to a field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_NewAt(p structPointer, f field, typ reflect.Type) reflect.Value {
0000000000000000000000000000000000000000;;		return reflect.NewAt(typ, unsafe.Pointer(uintptr(p)+uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStructPointer writes a *struct field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_SetStructPointer(p structPointer, f field, q structPointer) {
0000000000000000000000000000000000000000;;		*(*structPointer)(unsafe.Pointer(uintptr(p) + uintptr(f))) = q
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStructPointer reads a *struct field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_GetStructPointer(p structPointer, f field) structPointer {
0000000000000000000000000000000000000000;;		return *(*structPointer)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StructPointerSlice the address of a []*struct field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_StructPointerSlice(p structPointer, f field) *structPointerSlice {
0000000000000000000000000000000000000000;;		return (*structPointerSlice)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A structPointerSlice represents a slice of pointers to structs (themselves submessages or groups).
0000000000000000000000000000000000000000;;	type structPointerSlice []structPointer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *structPointerSlice) Len() int                  { return len(*v) }
0000000000000000000000000000000000000000;;	func (v *structPointerSlice) Index(i int) structPointer { return (*v)[i] }
0000000000000000000000000000000000000000;;	func (v *structPointerSlice) Append(p structPointer)    { *v = append(*v, p) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A word32 is the address of a "pointer to 32-bit value" field.
0000000000000000000000000000000000000000;;	type word32 **uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNil reports whether *v is nil.
0000000000000000000000000000000000000000;;	func word32_IsNil(p word32) bool {
0000000000000000000000000000000000000000;;		return *p == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set sets *v to point at a newly allocated word set to x.
0000000000000000000000000000000000000000;;	func word32_Set(p word32, o *Buffer, x uint32) {
0000000000000000000000000000000000000000;;		if len(o.uint32s) == 0 {
0000000000000000000000000000000000000000;;			o.uint32s = make([]uint32, uint32PoolSize)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.uint32s[0] = x
0000000000000000000000000000000000000000;;		*p = &o.uint32s[0]
0000000000000000000000000000000000000000;;		o.uint32s = o.uint32s[1:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets the value pointed at by *v.
0000000000000000000000000000000000000000;;	func word32_Get(p word32) uint32 {
0000000000000000000000000000000000000000;;		return **p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Word32 returns the address of a *int32, *uint32, *float32, or *enum field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_Word32(p structPointer, f field) word32 {
0000000000000000000000000000000000000000;;		return word32((**uint32)(unsafe.Pointer(uintptr(p) + uintptr(f))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A word32Val is the address of a 32-bit value field.
0000000000000000000000000000000000000000;;	type word32Val *uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set sets *p to x.
0000000000000000000000000000000000000000;;	func word32Val_Set(p word32Val, x uint32) {
0000000000000000000000000000000000000000;;		*p = x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets the value pointed at by p.
0000000000000000000000000000000000000000;;	func word32Val_Get(p word32Val) uint32 {
0000000000000000000000000000000000000000;;		return *p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Word32Val returns the address of a *int32, *uint32, *float32, or *enum field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_Word32Val(p structPointer, f field) word32Val {
0000000000000000000000000000000000000000;;		return word32Val((*uint32)(unsafe.Pointer(uintptr(p) + uintptr(f))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A word32Slice is a slice of 32-bit values.
0000000000000000000000000000000000000000;;	type word32Slice []uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *word32Slice) Append(x uint32)    { *v = append(*v, x) }
0000000000000000000000000000000000000000;;	func (v *word32Slice) Len() int           { return len(*v) }
0000000000000000000000000000000000000000;;	func (v *word32Slice) Index(i int) uint32 { return (*v)[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Word32Slice returns the address of a []int32, []uint32, []float32, or []enum field in the struct.
0000000000000000000000000000000000000000;;	func structPointer_Word32Slice(p structPointer, f field) *word32Slice {
0000000000000000000000000000000000000000;;		return (*word32Slice)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// word64 is like word32 but for 64-bit values.
0000000000000000000000000000000000000000;;	type word64 **uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func word64_Set(p word64, o *Buffer, x uint64) {
0000000000000000000000000000000000000000;;		if len(o.uint64s) == 0 {
0000000000000000000000000000000000000000;;			o.uint64s = make([]uint64, uint64PoolSize)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.uint64s[0] = x
0000000000000000000000000000000000000000;;		*p = &o.uint64s[0]
0000000000000000000000000000000000000000;;		o.uint64s = o.uint64s[1:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func word64_IsNil(p word64) bool {
0000000000000000000000000000000000000000;;		return *p == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func word64_Get(p word64) uint64 {
0000000000000000000000000000000000000000;;		return **p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func structPointer_Word64(p structPointer, f field) word64 {
0000000000000000000000000000000000000000;;		return word64((**uint64)(unsafe.Pointer(uintptr(p) + uintptr(f))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// word64Val is like word32Val but for 64-bit values.
0000000000000000000000000000000000000000;;	type word64Val *uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func word64Val_Set(p word64Val, o *Buffer, x uint64) {
0000000000000000000000000000000000000000;;		*p = x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func word64Val_Get(p word64Val) uint64 {
0000000000000000000000000000000000000000;;		return *p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func structPointer_Word64Val(p structPointer, f field) word64Val {
0000000000000000000000000000000000000000;;		return word64Val((*uint64)(unsafe.Pointer(uintptr(p) + uintptr(f))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// word64Slice is like word32Slice but for 64-bit values.
0000000000000000000000000000000000000000;;	type word64Slice []uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *word64Slice) Append(x uint64)    { *v = append(*v, x) }
0000000000000000000000000000000000000000;;	func (v *word64Slice) Len() int           { return len(*v) }
0000000000000000000000000000000000000000;;	func (v *word64Slice) Index(i int) uint64 { return (*v)[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func structPointer_Word64Slice(p structPointer, f field) *word64Slice {
0000000000000000000000000000000000000000;;		return (*word64Slice)(unsafe.Pointer(uintptr(p) + uintptr(f)))
0000000000000000000000000000000000000000;;	}
