0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Go support for Protocol Buffers - Google's data interchange format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2010 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/golang/protobuf/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	// contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	// this software without specific prior written permission.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
8329b5f94b1a4a7919ce36cf38e5a9fa0715aaf4;Godeps/_workspace/src/github.com/gogo/protobuf/proto/encode_gogo.go[Godeps/_workspace/src/github.com/gogo/protobuf/proto/encode_gogo.go][vendor/github.com/gogo/protobuf/proto/encode_gogo.go];	
0000000000000000000000000000000000000000;;	package proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRequiredNotSetError(field string) *RequiredNotSetError {
0000000000000000000000000000000000000000;;		return &RequiredNotSetError{field}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sizer interface {
0000000000000000000000000000000000000000;;		Size() int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ext_slice_byte(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		s := *structPointer_Bytes(base, p.field)
0000000000000000000000000000000000000000;;		if s == nil {
0000000000000000000000000000000000000000;;			return ErrNil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, s...)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_ext_slice_byte(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		s := *structPointer_Bytes(base, p.field)
0000000000000000000000000000000000000000;;		if s == nil {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n += len(s)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode a reference to bool pointer.
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ref_bool(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		v := *structPointer_BoolVal(base, p.field)
0000000000000000000000000000000000000000;;		x := 0
0000000000000000000000000000000000000000;;		if v {
0000000000000000000000000000000000000000;;			x = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		p.valEnc(o, uint64(x))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_ref_bool(p *Properties, base structPointer) int {
0000000000000000000000000000000000000000;;		return len(p.tagcode) + 1 // each bool takes exactly one byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode a reference to int32 pointer.
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ref_int32(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		v := structPointer_Word32Val(base, p.field)
0000000000000000000000000000000000000000;;		x := int32(word32Val_Get(v))
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		p.valEnc(o, uint64(x))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_ref_int32(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		v := structPointer_Word32Val(base, p.field)
0000000000000000000000000000000000000000;;		x := int32(word32Val_Get(v))
0000000000000000000000000000000000000000;;		n += len(p.tagcode)
0000000000000000000000000000000000000000;;		n += p.valSize(uint64(x))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ref_uint32(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		v := structPointer_Word32Val(base, p.field)
0000000000000000000000000000000000000000;;		x := word32Val_Get(v)
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		p.valEnc(o, uint64(x))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_ref_uint32(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		v := structPointer_Word32Val(base, p.field)
0000000000000000000000000000000000000000;;		x := word32Val_Get(v)
0000000000000000000000000000000000000000;;		n += len(p.tagcode)
0000000000000000000000000000000000000000;;		n += p.valSize(uint64(x))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode a reference to an int64 pointer.
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ref_int64(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		v := structPointer_Word64Val(base, p.field)
0000000000000000000000000000000000000000;;		x := word64Val_Get(v)
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		p.valEnc(o, x)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_ref_int64(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		v := structPointer_Word64Val(base, p.field)
0000000000000000000000000000000000000000;;		x := word64Val_Get(v)
0000000000000000000000000000000000000000;;		n += len(p.tagcode)
0000000000000000000000000000000000000000;;		n += p.valSize(x)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode a reference to a string pointer.
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ref_string(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		v := *structPointer_StringVal(base, p.field)
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		o.EncodeStringBytes(v)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_ref_string(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		v := *structPointer_StringVal(base, p.field)
0000000000000000000000000000000000000000;;		n += len(p.tagcode)
0000000000000000000000000000000000000000;;		n += sizeStringBytes(v)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode a reference to a message struct.
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_ref_struct_message(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		var state errorState
0000000000000000000000000000000000000000;;		structp := structPointer_GetRefStructPointer(base, p.field)
0000000000000000000000000000000000000000;;		if structPointer_IsNil(structp) {
0000000000000000000000000000000000000000;;			return ErrNil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Can the object marshal itself?
0000000000000000000000000000000000000000;;		if p.isMarshaler {
0000000000000000000000000000000000000000;;			m := structPointer_Interface(structp, p.stype).(Marshaler)
0000000000000000000000000000000000000000;;			data, err := m.Marshal()
0000000000000000000000000000000000000000;;			if err != nil && !state.shouldContinue(err, nil) {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;			o.EncodeRawBytes(data)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		return o.enc_len_struct(p.sprop, structp, &state)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TODO this is only copied, please fix this
0000000000000000000000000000000000000000;;	func size_ref_struct_message(p *Properties, base structPointer) int {
0000000000000000000000000000000000000000;;		structp := structPointer_GetRefStructPointer(base, p.field)
0000000000000000000000000000000000000000;;		if structPointer_IsNil(structp) {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Can the object marshal itself?
0000000000000000000000000000000000000000;;		if p.isMarshaler {
0000000000000000000000000000000000000000;;			m := structPointer_Interface(structp, p.stype).(Marshaler)
0000000000000000000000000000000000000000;;			data, _ := m.Marshal()
0000000000000000000000000000000000000000;;			n0 := len(p.tagcode)
0000000000000000000000000000000000000000;;			n1 := sizeRawBytes(data)
0000000000000000000000000000000000000000;;			return n0 + n1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n0 := len(p.tagcode)
0000000000000000000000000000000000000000;;		n1 := size_struct(p.sprop, structp)
0000000000000000000000000000000000000000;;		n2 := sizeVarint(uint64(n1)) // size of encoded length
0000000000000000000000000000000000000000;;		return n0 + n1 + n2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode a slice of references to message struct pointers ([]struct).
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_slice_ref_struct_message(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		var state errorState
0000000000000000000000000000000000000000;;		ss := structPointer_StructRefSlice(base, p.field, p.stype.Size())
0000000000000000000000000000000000000000;;		l := ss.Len()
0000000000000000000000000000000000000000;;		for i := 0; i < l; i++ {
0000000000000000000000000000000000000000;;			structp := ss.Index(i)
0000000000000000000000000000000000000000;;			if structPointer_IsNil(structp) {
0000000000000000000000000000000000000000;;				return errRepeatedHasNil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Can the object marshal itself?
0000000000000000000000000000000000000000;;			if p.isMarshaler {
0000000000000000000000000000000000000000;;				m := structPointer_Interface(structp, p.stype).(Marshaler)
0000000000000000000000000000000000000000;;				data, err := m.Marshal()
0000000000000000000000000000000000000000;;				if err != nil && !state.shouldContinue(err, nil) {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;				o.EncodeRawBytes(data)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;			err := o.enc_len_struct(p.sprop, structp, &state)
0000000000000000000000000000000000000000;;			if err != nil && !state.shouldContinue(err, nil) {
0000000000000000000000000000000000000000;;				if err == ErrNil {
0000000000000000000000000000000000000000;;					return errRepeatedHasNil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return state.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TODO this is only copied, please fix this
0000000000000000000000000000000000000000;;	func size_slice_ref_struct_message(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		ss := structPointer_StructRefSlice(base, p.field, p.stype.Size())
0000000000000000000000000000000000000000;;		l := ss.Len()
0000000000000000000000000000000000000000;;		n += l * len(p.tagcode)
0000000000000000000000000000000000000000;;		for i := 0; i < l; i++ {
0000000000000000000000000000000000000000;;			structp := ss.Index(i)
0000000000000000000000000000000000000000;;			if structPointer_IsNil(structp) {
0000000000000000000000000000000000000000;;				return // return the size up to this point
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Can the object marshal itself?
0000000000000000000000000000000000000000;;			if p.isMarshaler {
0000000000000000000000000000000000000000;;				m := structPointer_Interface(structp, p.stype).(Marshaler)
0000000000000000000000000000000000000000;;				data, _ := m.Marshal()
0000000000000000000000000000000000000000;;				n += len(p.tagcode)
0000000000000000000000000000000000000000;;				n += sizeRawBytes(data)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			n0 := size_struct(p.sprop, structp)
0000000000000000000000000000000000000000;;			n1 := sizeVarint(uint64(n0)) // size of encoded length
0000000000000000000000000000000000000000;;			n += n0 + n1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_custom_bytes(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		i := structPointer_InterfaceRef(base, p.field, p.ctype)
0000000000000000000000000000000000000000;;		if i == nil {
0000000000000000000000000000000000000000;;			return ErrNil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		custom := i.(Marshaler)
0000000000000000000000000000000000000000;;		data, err := custom.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data == nil {
0000000000000000000000000000000000000000;;			return ErrNil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		o.EncodeRawBytes(data)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_custom_bytes(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		n += len(p.tagcode)
0000000000000000000000000000000000000000;;		i := structPointer_InterfaceRef(base, p.field, p.ctype)
0000000000000000000000000000000000000000;;		if i == nil {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		custom := i.(Marshaler)
0000000000000000000000000000000000000000;;		data, _ := custom.Marshal()
0000000000000000000000000000000000000000;;		n += sizeRawBytes(data)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_custom_ref_bytes(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		custom := structPointer_InterfaceAt(base, p.field, p.ctype).(Marshaler)
0000000000000000000000000000000000000000;;		data, err := custom.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data == nil {
0000000000000000000000000000000000000000;;			return ErrNil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;		o.EncodeRawBytes(data)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_custom_ref_bytes(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		n += len(p.tagcode)
0000000000000000000000000000000000000000;;		i := structPointer_InterfaceAt(base, p.field, p.ctype)
0000000000000000000000000000000000000000;;		if i == nil {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		custom := i.(Marshaler)
0000000000000000000000000000000000000000;;		data, _ := custom.Marshal()
0000000000000000000000000000000000000000;;		n += sizeRawBytes(data)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *Buffer) enc_custom_slice_bytes(p *Properties, base structPointer) error {
0000000000000000000000000000000000000000;;		inter := structPointer_InterfaceRef(base, p.field, p.ctype)
0000000000000000000000000000000000000000;;		if inter == nil {
0000000000000000000000000000000000000000;;			return ErrNil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		slice := reflect.ValueOf(inter)
0000000000000000000000000000000000000000;;		l := slice.Len()
0000000000000000000000000000000000000000;;		for i := 0; i < l; i++ {
0000000000000000000000000000000000000000;;			v := slice.Index(i)
0000000000000000000000000000000000000000;;			custom := v.Interface().(Marshaler)
0000000000000000000000000000000000000000;;			data, err := custom.Marshal()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			o.buf = append(o.buf, p.tagcode...)
0000000000000000000000000000000000000000;;			o.EncodeRawBytes(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func size_custom_slice_bytes(p *Properties, base structPointer) (n int) {
0000000000000000000000000000000000000000;;		inter := structPointer_InterfaceRef(base, p.field, p.ctype)
0000000000000000000000000000000000000000;;		if inter == nil {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		slice := reflect.ValueOf(inter)
0000000000000000000000000000000000000000;;		l := slice.Len()
0000000000000000000000000000000000000000;;		n += l * len(p.tagcode)
0000000000000000000000000000000000000000;;		for i := 0; i < l; i++ {
0000000000000000000000000000000000000000;;			v := slice.Index(i)
0000000000000000000000000000000000000000;;			custom := v.Interface().(Marshaler)
0000000000000000000000000000000000000000;;			data, _ := custom.Marshal()
0000000000000000000000000000000000000000;;			n += sizeRawBytes(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
