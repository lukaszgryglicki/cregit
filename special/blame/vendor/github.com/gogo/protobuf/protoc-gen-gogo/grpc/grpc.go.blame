0000000000000000000000000000000000000000;;	// Go support for Protocol Buffers - Google's data interchange format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// https://github.com/golang/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	// contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	// this software without specific prior written permission.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/plugin/grpc/grpc.go[Godeps/_workspace/src/github.com/gogo/protobuf/plugin/grpc/grpc.go][vendor/github.com/gogo/protobuf/protoc-gen-gogo/grpc/grpc.go];	
0000000000000000000000000000000000000000;;	// Package grpc outputs gRPC service descriptions in Go code.
0000000000000000000000000000000000000000;;	// It runs as a plugin for the Go protocol buffer compiler plugin.
0000000000000000000000000000000000000000;;	// It is linked in to protoc-gen-go.
0000000000000000000000000000000000000000;;	package grpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/protoc-gen-gogo/generator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// generatedCodeVersion indicates a version of the generated code.
0000000000000000000000000000000000000000;;	// It is incremented whenever an incompatibility between the generated code and
0000000000000000000000000000000000000000;;	// the grpc package is introduced; the generated code references
0000000000000000000000000000000000000000;;	// a constant, grpc.SupportPackageIsVersionN (where N is generatedCodeVersion).
0000000000000000000000000000000000000000;;	const generatedCodeVersion = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Paths for packages used by code generated in this file,
0000000000000000000000000000000000000000;;	// relative to the import_prefix of the generator.Generator.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		contextPkgPath = "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		grpcPkgPath    = "google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		generator.RegisterPlugin(new(grpc))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// grpc is an implementation of the Go protocol buffer compiler's
0000000000000000000000000000000000000000;;	// plugin architecture.  It generates bindings for gRPC support.
0000000000000000000000000000000000000000;;	type grpc struct {
0000000000000000000000000000000000000000;;		gen *generator.Generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name returns the name of this plugin, "grpc".
0000000000000000000000000000000000000000;;	func (g *grpc) Name() string {
0000000000000000000000000000000000000000;;		return "grpc"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The names for packages imported in the generated code.
0000000000000000000000000000000000000000;;	// They may vary from the final path component of the import path
0000000000000000000000000000000000000000;;	// if the name is used by other packages.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		contextPkg string
0000000000000000000000000000000000000000;;		grpcPkg    string
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Init initializes the plugin.
0000000000000000000000000000000000000000;;	func (g *grpc) Init(gen *generator.Generator) {
0000000000000000000000000000000000000000;;		g.gen = gen
0000000000000000000000000000000000000000;;		contextPkg = generator.RegisterUniquePackageName("context", nil)
0000000000000000000000000000000000000000;;		grpcPkg = generator.RegisterUniquePackageName("grpc", nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Given a type name defined in a .proto, return its object.
0000000000000000000000000000000000000000;;	// Also record that we're using it, to guarantee the associated import.
0000000000000000000000000000000000000000;;	func (g *grpc) objectNamed(name string) generator.Object {
0000000000000000000000000000000000000000;;		g.gen.RecordTypeUse(name)
0000000000000000000000000000000000000000;;		return g.gen.ObjectNamed(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Given a type name defined in a .proto, return its name as we will print it.
0000000000000000000000000000000000000000;;	func (g *grpc) typeName(str string) string {
0000000000000000000000000000000000000000;;		return g.gen.TypeName(g.objectNamed(str))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// P forwards to g.gen.P.
0000000000000000000000000000000000000000;;	func (g *grpc) P(args ...interface{}) { g.gen.P(args...) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate generates code for the services in the given file.
0000000000000000000000000000000000000000;;	func (g *grpc) Generate(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		if len(file.FileDescriptorProto.Service) == 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.P("// Reference imports to suppress errors if they are not otherwise used.")
0000000000000000000000000000000000000000;;		g.P("var _ ", contextPkg, ".Context")
0000000000000000000000000000000000000000;;		g.P("var _ ", grpcPkg, ".ClientConn")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert version compatibility.
0000000000000000000000000000000000000000;;		g.P("// This is a compile-time assertion to ensure that this generated file")
0000000000000000000000000000000000000000;;		g.P("// is compatible with the grpc package it is being compiled against.")
0000000000000000000000000000000000000000;;		g.P("const _ = ", grpcPkg, ".SupportPackageIsVersion", generatedCodeVersion)
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, service := range file.FileDescriptorProto.Service {
0000000000000000000000000000000000000000;;			g.generateService(file, service, i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenerateImports generates the import declaration for this file.
0000000000000000000000000000000000000000;;	func (g *grpc) GenerateImports(file *generator.FileDescriptor) {
0000000000000000000000000000000000000000;;		if len(file.FileDescriptorProto.Service) == 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("import (")
0000000000000000000000000000000000000000;;		g.P(contextPkg, " ", strconv.Quote(path.Join(g.gen.ImportPrefix, contextPkgPath)))
0000000000000000000000000000000000000000;;		g.P(grpcPkg, " ", strconv.Quote(path.Join(g.gen.ImportPrefix, grpcPkgPath)))
0000000000000000000000000000000000000000;;		g.P(")")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// reservedClientName records whether a client name is reserved on the client side.
0000000000000000000000000000000000000000;;	var reservedClientName = map[string]bool{
0000000000000000000000000000000000000000;;	// TODO: do we need any in gRPC?
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// generateService generates all the code for the named service.
0000000000000000000000000000000000000000;;	func (g *grpc) generateService(file *generator.FileDescriptor, service *pb.ServiceDescriptorProto, index int) {
0000000000000000000000000000000000000000;;		path := fmt.Sprintf("6,%d", index) // 6 means service.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		origServName := service.GetName()
0000000000000000000000000000000000000000;;		fullServName := origServName
0000000000000000000000000000000000000000;;		if pkg := file.GetPackage(); pkg != "" {
0000000000000000000000000000000000000000;;			fullServName = pkg + "." + fullServName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		servName := generator.CamelCase(origServName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;		g.P("// Client API for ", servName, " service")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Client interface.
0000000000000000000000000000000000000000;;		g.P("type ", servName, "Client interface {")
0000000000000000000000000000000000000000;;		for i, method := range service.Method {
0000000000000000000000000000000000000000;;			g.gen.PrintComments(fmt.Sprintf("%s,2,%d", path, i)) // 2 means method in a service.
0000000000000000000000000000000000000000;;			g.P(g.generateClientSignature(servName, method))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Client structure.
0000000000000000000000000000000000000000;;		g.P("type ", unexport(servName), "Client struct {")
0000000000000000000000000000000000000000;;		g.P("cc *", grpcPkg, ".ClientConn")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NewClient factory.
0000000000000000000000000000000000000000;;		g.P("func New", servName, "Client (cc *", grpcPkg, ".ClientConn) ", servName, "Client {")
0000000000000000000000000000000000000000;;		g.P("return &", unexport(servName), "Client{cc}")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var methodIndex, streamIndex int
0000000000000000000000000000000000000000;;		serviceDescVar := "_" + servName + "_serviceDesc"
0000000000000000000000000000000000000000;;		// Client method implementations.
0000000000000000000000000000000000000000;;		for _, method := range service.Method {
0000000000000000000000000000000000000000;;			var descExpr string
0000000000000000000000000000000000000000;;			if !method.GetServerStreaming() && !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;				// Unary RPC method
0000000000000000000000000000000000000000;;				descExpr = fmt.Sprintf("&%s.Methods[%d]", serviceDescVar, methodIndex)
0000000000000000000000000000000000000000;;				methodIndex++
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Streaming RPC method
0000000000000000000000000000000000000000;;				descExpr = fmt.Sprintf("&%s.Streams[%d]", serviceDescVar, streamIndex)
0000000000000000000000000000000000000000;;				streamIndex++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			g.generateClientMethod(servName, fullServName, serviceDescVar, method, descExpr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.P("// Server API for ", servName, " service")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Server interface.
0000000000000000000000000000000000000000;;		serverType := servName + "Server"
0000000000000000000000000000000000000000;;		g.P("type ", serverType, " interface {")
0000000000000000000000000000000000000000;;		for i, method := range service.Method {
0000000000000000000000000000000000000000;;			g.gen.PrintComments(fmt.Sprintf("%s,2,%d", path, i)) // 2 means method in a service.
0000000000000000000000000000000000000000;;			g.P(g.generateServerSignature(servName, method))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Server registration.
0000000000000000000000000000000000000000;;		g.P("func Register", servName, "Server(s *", grpcPkg, ".Server, srv ", serverType, ") {")
0000000000000000000000000000000000000000;;		g.P("s.RegisterService(&", serviceDescVar, `, srv)`)
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Server handler implementations.
0000000000000000000000000000000000000000;;		var handlerNames []string
0000000000000000000000000000000000000000;;		for _, method := range service.Method {
0000000000000000000000000000000000000000;;			hname := g.generateServerMethod(servName, fullServName, method)
0000000000000000000000000000000000000000;;			handlerNames = append(handlerNames, hname)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Service descriptor.
0000000000000000000000000000000000000000;;		g.P("var ", serviceDescVar, " = ", grpcPkg, ".ServiceDesc {")
0000000000000000000000000000000000000000;;		g.P("ServiceName: ", strconv.Quote(fullServName), ",")
0000000000000000000000000000000000000000;;		g.P("HandlerType: (*", serverType, ")(nil),")
0000000000000000000000000000000000000000;;		g.P("Methods: []", grpcPkg, ".MethodDesc{")
0000000000000000000000000000000000000000;;		for i, method := range service.Method {
0000000000000000000000000000000000000000;;			if method.GetServerStreaming() || method.GetClientStreaming() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			g.P("{")
0000000000000000000000000000000000000000;;			g.P("MethodName: ", strconv.Quote(method.GetName()), ",")
0000000000000000000000000000000000000000;;			g.P("Handler: ", handlerNames[i], ",")
0000000000000000000000000000000000000000;;			g.P("},")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("},")
0000000000000000000000000000000000000000;;		g.P("Streams: []", grpcPkg, ".StreamDesc{")
0000000000000000000000000000000000000000;;		for i, method := range service.Method {
0000000000000000000000000000000000000000;;			if !method.GetServerStreaming() && !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			g.P("{")
0000000000000000000000000000000000000000;;			g.P("StreamName: ", strconv.Quote(method.GetName()), ",")
0000000000000000000000000000000000000000;;			g.P("Handler: ", handlerNames[i], ",")
0000000000000000000000000000000000000000;;			if method.GetServerStreaming() {
0000000000000000000000000000000000000000;;				g.P("ServerStreams: true,")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if method.GetClientStreaming() {
0000000000000000000000000000000000000000;;				g.P("ClientStreams: true,")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			g.P("},")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("},")
0000000000000000000000000000000000000000;;		g.P("Metadata: \"", file.GetName(), "\",")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// generateClientSignature returns the client-side signature for a method.
0000000000000000000000000000000000000000;;	func (g *grpc) generateClientSignature(servName string, method *pb.MethodDescriptorProto) string {
0000000000000000000000000000000000000000;;		origMethName := method.GetName()
0000000000000000000000000000000000000000;;		methName := generator.CamelCase(origMethName)
0000000000000000000000000000000000000000;;		if reservedClientName[methName] {
0000000000000000000000000000000000000000;;			methName += "_"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqArg := ", in *" + g.typeName(method.GetInputType())
0000000000000000000000000000000000000000;;		if method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			reqArg = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		respName := "*" + g.typeName(method.GetOutputType())
0000000000000000000000000000000000000000;;		if method.GetServerStreaming() || method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			respName = servName + "_" + generator.CamelCase(origMethName) + "Client"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s(ctx %s.Context%s, opts ...%s.CallOption) (%s, error)", methName, contextPkg, reqArg, grpcPkg, respName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *grpc) generateClientMethod(servName, fullServName, serviceDescVar string, method *pb.MethodDescriptorProto, descExpr string) {
0000000000000000000000000000000000000000;;		sname := fmt.Sprintf("/%s/%s", fullServName, method.GetName())
0000000000000000000000000000000000000000;;		methName := generator.CamelCase(method.GetName())
0000000000000000000000000000000000000000;;		inType := g.typeName(method.GetInputType())
0000000000000000000000000000000000000000;;		outType := g.typeName(method.GetOutputType())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.P("func (c *", unexport(servName), "Client) ", g.generateClientSignature(servName, method), "{")
0000000000000000000000000000000000000000;;		if !method.GetServerStreaming() && !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			g.P("out := new(", outType, ")")
0000000000000000000000000000000000000000;;			// TODO: Pass descExpr to Invoke.
0000000000000000000000000000000000000000;;			g.P("err := ", grpcPkg, `.Invoke(ctx, "`, sname, `", in, out, c.cc, opts...)`)
0000000000000000000000000000000000000000;;			g.P("if err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("return out, nil")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		streamType := unexport(servName) + methName + "Client"
0000000000000000000000000000000000000000;;		g.P("stream, err := ", grpcPkg, ".NewClientStream(ctx, ", descExpr, `, c.cc, "`, sname, `", opts...)`)
0000000000000000000000000000000000000000;;		g.P("if err != nil { return nil, err }")
0000000000000000000000000000000000000000;;		g.P("x := &", streamType, "{stream}")
0000000000000000000000000000000000000000;;		if !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			g.P("if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("if err := x.ClientStream.CloseSend(); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("return x, nil")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genSend := method.GetClientStreaming()
0000000000000000000000000000000000000000;;		genRecv := method.GetServerStreaming()
0000000000000000000000000000000000000000;;		genCloseAndRecv := !method.GetServerStreaming()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stream auxiliary types and methods.
0000000000000000000000000000000000000000;;		g.P("type ", servName, "_", methName, "Client interface {")
0000000000000000000000000000000000000000;;		if genSend {
0000000000000000000000000000000000000000;;			g.P("Send(*", inType, ") error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genRecv {
0000000000000000000000000000000000000000;;			g.P("Recv() (*", outType, ", error)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genCloseAndRecv {
0000000000000000000000000000000000000000;;			g.P("CloseAndRecv() (*", outType, ", error)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P(grpcPkg, ".ClientStream")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.P("type ", streamType, " struct {")
0000000000000000000000000000000000000000;;		g.P(grpcPkg, ".ClientStream")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if genSend {
0000000000000000000000000000000000000000;;			g.P("func (x *", streamType, ") Send(m *", inType, ") error {")
0000000000000000000000000000000000000000;;			g.P("return x.ClientStream.SendMsg(m)")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genRecv {
0000000000000000000000000000000000000000;;			g.P("func (x *", streamType, ") Recv() (*", outType, ", error) {")
0000000000000000000000000000000000000000;;			g.P("m := new(", outType, ")")
0000000000000000000000000000000000000000;;			g.P("if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("return m, nil")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genCloseAndRecv {
0000000000000000000000000000000000000000;;			g.P("func (x *", streamType, ") CloseAndRecv() (*", outType, ", error) {")
0000000000000000000000000000000000000000;;			g.P("if err := x.ClientStream.CloseSend(); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("m := new(", outType, ")")
0000000000000000000000000000000000000000;;			g.P("if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("return m, nil")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// generateServerSignature returns the server-side signature for a method.
0000000000000000000000000000000000000000;;	func (g *grpc) generateServerSignature(servName string, method *pb.MethodDescriptorProto) string {
0000000000000000000000000000000000000000;;		origMethName := method.GetName()
0000000000000000000000000000000000000000;;		methName := generator.CamelCase(origMethName)
0000000000000000000000000000000000000000;;		if reservedClientName[methName] {
0000000000000000000000000000000000000000;;			methName += "_"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var reqArgs []string
0000000000000000000000000000000000000000;;		ret := "error"
0000000000000000000000000000000000000000;;		if !method.GetServerStreaming() && !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			reqArgs = append(reqArgs, contextPkg+".Context")
0000000000000000000000000000000000000000;;			ret = "(*" + g.typeName(method.GetOutputType()) + ", error)"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			reqArgs = append(reqArgs, "*"+g.typeName(method.GetInputType()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if method.GetServerStreaming() || method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			reqArgs = append(reqArgs, servName+"_"+generator.CamelCase(origMethName)+"Server")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return methName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *grpc) generateServerMethod(servName, fullServName string, method *pb.MethodDescriptorProto) string {
0000000000000000000000000000000000000000;;		methName := generator.CamelCase(method.GetName())
0000000000000000000000000000000000000000;;		hname := fmt.Sprintf("_%s_%s_Handler", servName, methName)
0000000000000000000000000000000000000000;;		inType := g.typeName(method.GetInputType())
0000000000000000000000000000000000000000;;		outType := g.typeName(method.GetOutputType())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !method.GetServerStreaming() && !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			g.P("func ", hname, "(srv interface{}, ctx ", contextPkg, ".Context, dec func(interface{}) error, interceptor ", grpcPkg, ".UnaryServerInterceptor) (interface{}, error) {")
0000000000000000000000000000000000000000;;			g.P("in := new(", inType, ")")
0000000000000000000000000000000000000000;;			g.P("if err := dec(in); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("if interceptor == nil { return srv.(", servName, "Server).", methName, "(ctx, in) }")
0000000000000000000000000000000000000000;;			g.P("info := &", grpcPkg, ".UnaryServerInfo{")
0000000000000000000000000000000000000000;;			g.P("Server: srv,")
0000000000000000000000000000000000000000;;			g.P("FullMethod: ", strconv.Quote(fmt.Sprintf("/%s/%s", fullServName, methName)), ",")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P("handler := func(ctx ", contextPkg, ".Context, req interface{}) (interface{}, error) {")
0000000000000000000000000000000000000000;;			g.P("return srv.(", servName, "Server).", methName, "(ctx, req.(*", inType, "))")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P("return interceptor(ctx, in, info, handler)")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;			return hname
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		streamType := unexport(servName) + methName + "Server"
0000000000000000000000000000000000000000;;		g.P("func ", hname, "(srv interface{}, stream ", grpcPkg, ".ServerStream) error {")
0000000000000000000000000000000000000000;;		if !method.GetClientStreaming() {
0000000000000000000000000000000000000000;;			g.P("m := new(", inType, ")")
0000000000000000000000000000000000000000;;			g.P("if err := stream.RecvMsg(m); err != nil { return err }")
0000000000000000000000000000000000000000;;			g.P("return srv.(", servName, "Server).", methName, "(m, &", streamType, "{stream})")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			g.P("return srv.(", servName, "Server).", methName, "(&", streamType, "{stream})")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genSend := method.GetServerStreaming()
0000000000000000000000000000000000000000;;		genSendAndClose := !method.GetServerStreaming()
0000000000000000000000000000000000000000;;		genRecv := method.GetClientStreaming()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stream auxiliary types and methods.
0000000000000000000000000000000000000000;;		g.P("type ", servName, "_", methName, "Server interface {")
0000000000000000000000000000000000000000;;		if genSend {
0000000000000000000000000000000000000000;;			g.P("Send(*", outType, ") error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genSendAndClose {
0000000000000000000000000000000000000000;;			g.P("SendAndClose(*", outType, ") error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genRecv {
0000000000000000000000000000000000000000;;			g.P("Recv() (*", inType, ", error)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.P(grpcPkg, ".ServerStream")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.P("type ", streamType, " struct {")
0000000000000000000000000000000000000000;;		g.P(grpcPkg, ".ServerStream")
0000000000000000000000000000000000000000;;		g.P("}")
0000000000000000000000000000000000000000;;		g.P()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if genSend {
0000000000000000000000000000000000000000;;			g.P("func (x *", streamType, ") Send(m *", outType, ") error {")
0000000000000000000000000000000000000000;;			g.P("return x.ServerStream.SendMsg(m)")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genSendAndClose {
0000000000000000000000000000000000000000;;			g.P("func (x *", streamType, ") SendAndClose(m *", outType, ") error {")
0000000000000000000000000000000000000000;;			g.P("return x.ServerStream.SendMsg(m)")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if genRecv {
0000000000000000000000000000000000000000;;			g.P("func (x *", streamType, ") Recv() (*", inType, ", error) {")
0000000000000000000000000000000000000000;;			g.P("m := new(", inType, ")")
0000000000000000000000000000000000000000;;			g.P("if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }")
0000000000000000000000000000000000000000;;			g.P("return m, nil")
0000000000000000000000000000000000000000;;			g.P("}")
0000000000000000000000000000000000000000;;			g.P()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return hname
0000000000000000000000000000000000000000;;	}
