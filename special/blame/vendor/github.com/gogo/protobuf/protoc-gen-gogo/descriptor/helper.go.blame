0000000000000000000000000000000000000000;;	// Protocol Buffers for Go with Gadgets
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2013, The GoGo Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// http://github.com/gogo/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
3d29d329cedf26a7a5df80b3b66a105722269e22;Godeps/_workspace/src/github.com/gogo/protobuf/protoc-gen-gogo/descriptor/helper.go[Godeps/_workspace/src/github.com/gogo/protobuf/protoc-gen-gogo/descriptor/helper.go][vendor/github.com/gogo/protobuf/protoc-gen-gogo/descriptor/helper.go];	
0000000000000000000000000000000000000000;;	package descriptor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *DescriptorProto) GetMapFields() (*FieldDescriptorProto, *FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		if !msg.GetOptions().GetMapEntry() {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return msg.GetField()[0], msg.GetField()[1]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func dotToUnderscore(r rune) rune {
0000000000000000000000000000000000000000;;		if r == '.' {
0000000000000000000000000000000000000000;;			return '_'
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (field *FieldDescriptorProto) WireType() (wire int) {
0000000000000000000000000000000000000000;;		switch *field.Type {
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_DOUBLE:
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_FLOAT:
0000000000000000000000000000000000000000;;			return 5
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_INT64:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_UINT64:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_INT32:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_UINT32:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_FIXED64:
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_FIXED32:
0000000000000000000000000000000000000000;;			return 5
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_BOOL:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_STRING:
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_GROUP:
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_MESSAGE:
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_BYTES:
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_ENUM:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_SFIXED32:
0000000000000000000000000000000000000000;;			return 5
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_SFIXED64:
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_SINT32:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		case FieldDescriptorProto_TYPE_SINT64:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("unreachable")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (field *FieldDescriptorProto) GetKeyUint64() (x uint64) {
0000000000000000000000000000000000000000;;		packed := field.IsPacked()
0000000000000000000000000000000000000000;;		wireType := field.WireType()
0000000000000000000000000000000000000000;;		fieldNumber := field.GetNumber()
0000000000000000000000000000000000000000;;		if packed {
0000000000000000000000000000000000000000;;			wireType = 2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		x = uint64(uint32(fieldNumber)<<3 | uint32(wireType))
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (field *FieldDescriptorProto) GetKey3Uint64() (x uint64) {
0000000000000000000000000000000000000000;;		packed := field.IsPacked3()
0000000000000000000000000000000000000000;;		wireType := field.WireType()
0000000000000000000000000000000000000000;;		fieldNumber := field.GetNumber()
0000000000000000000000000000000000000000;;		if packed {
0000000000000000000000000000000000000000;;			wireType = 2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		x = uint64(uint32(fieldNumber)<<3 | uint32(wireType))
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (field *FieldDescriptorProto) GetKey() []byte {
0000000000000000000000000000000000000000;;		x := field.GetKeyUint64()
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		keybuf := make([]byte, 0)
0000000000000000000000000000000000000000;;		for i = 0; x > 127; i++ {
0000000000000000000000000000000000000000;;			keybuf = append(keybuf, 0x80|uint8(x&0x7F))
0000000000000000000000000000000000000000;;			x >>= 7
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keybuf = append(keybuf, uint8(x))
0000000000000000000000000000000000000000;;		return keybuf
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (field *FieldDescriptorProto) GetKey3() []byte {
0000000000000000000000000000000000000000;;		x := field.GetKey3Uint64()
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		keybuf := make([]byte, 0)
0000000000000000000000000000000000000000;;		for i = 0; x > 127; i++ {
0000000000000000000000000000000000000000;;			keybuf = append(keybuf, 0x80|uint8(x&0x7F))
0000000000000000000000000000000000000000;;			x >>= 7
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keybuf = append(keybuf, uint8(x))
0000000000000000000000000000000000000000;;		return keybuf
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) GetField(packageName, messageName, fieldName string) *FieldDescriptorProto {
0000000000000000000000000000000000000000;;		msg := desc.GetMessage(packageName, messageName)
0000000000000000000000000000000000000000;;		if msg == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, field := range msg.GetField() {
0000000000000000000000000000000000000000;;			if field.GetName() == fieldName {
0000000000000000000000000000000000000000;;				return field
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (file *FileDescriptorProto) GetMessage(typeName string) *DescriptorProto {
0000000000000000000000000000000000000000;;		for _, msg := range file.GetMessageType() {
0000000000000000000000000000000000000000;;			if msg.GetName() == typeName {
0000000000000000000000000000000000000000;;				return msg
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nes := file.GetNestedMessage(msg, strings.TrimPrefix(typeName, msg.GetName()+"."))
0000000000000000000000000000000000000000;;			if nes != nil {
0000000000000000000000000000000000000000;;				return nes
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (file *FileDescriptorProto) GetNestedMessage(msg *DescriptorProto, typeName string) *DescriptorProto {
0000000000000000000000000000000000000000;;		for _, nes := range msg.GetNestedType() {
0000000000000000000000000000000000000000;;			if nes.GetName() == typeName {
0000000000000000000000000000000000000000;;				return nes
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			res := file.GetNestedMessage(nes, strings.TrimPrefix(typeName, nes.GetName()+"."))
0000000000000000000000000000000000000000;;			if res != nil {
0000000000000000000000000000000000000000;;				return res
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) GetMessage(packageName string, typeName string) *DescriptorProto {
0000000000000000000000000000000000000000;;		for _, file := range desc.GetFile() {
0000000000000000000000000000000000000000;;			if strings.Map(dotToUnderscore, file.GetPackage()) != strings.Map(dotToUnderscore, packageName) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, msg := range file.GetMessageType() {
0000000000000000000000000000000000000000;;				if msg.GetName() == typeName {
0000000000000000000000000000000000000000;;					return msg
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, msg := range file.GetMessageType() {
0000000000000000000000000000000000000000;;				for _, nes := range msg.GetNestedType() {
0000000000000000000000000000000000000000;;					if nes.GetName() == typeName {
0000000000000000000000000000000000000000;;						return nes
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if msg.GetName()+"."+nes.GetName() == typeName {
0000000000000000000000000000000000000000;;						return nes
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) IsProto3(packageName string, typeName string) bool {
0000000000000000000000000000000000000000;;		for _, file := range desc.GetFile() {
0000000000000000000000000000000000000000;;			if strings.Map(dotToUnderscore, file.GetPackage()) != strings.Map(dotToUnderscore, packageName) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, msg := range file.GetMessageType() {
0000000000000000000000000000000000000000;;				if msg.GetName() == typeName {
0000000000000000000000000000000000000000;;					return file.GetSyntax() == "proto3"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, msg := range file.GetMessageType() {
0000000000000000000000000000000000000000;;				for _, nes := range msg.GetNestedType() {
0000000000000000000000000000000000000000;;					if nes.GetName() == typeName {
0000000000000000000000000000000000000000;;						return file.GetSyntax() == "proto3"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if msg.GetName()+"."+nes.GetName() == typeName {
0000000000000000000000000000000000000000;;						return file.GetSyntax() == "proto3"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *DescriptorProto) IsExtendable() bool {
0000000000000000000000000000000000000000;;		return len(msg.GetExtensionRange()) > 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) FindExtension(packageName string, typeName string, fieldName string) (extPackageName string, field *FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		parent := desc.GetMessage(packageName, typeName)
0000000000000000000000000000000000000000;;		if parent == nil {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !parent.IsExtendable() {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		extendee := "." + packageName + "." + typeName
0000000000000000000000000000000000000000;;		for _, file := range desc.GetFile() {
0000000000000000000000000000000000000000;;			for _, ext := range file.GetExtension() {
0000000000000000000000000000000000000000;;				if strings.Map(dotToUnderscore, file.GetPackage()) == strings.Map(dotToUnderscore, packageName) {
0000000000000000000000000000000000000000;;					if !(ext.GetExtendee() == typeName || ext.GetExtendee() == extendee) {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if ext.GetExtendee() != extendee {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ext.GetName() == fieldName {
0000000000000000000000000000000000000000;;					return file.GetPackage(), ext
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) FindExtensionByFieldNumber(packageName string, typeName string, fieldNum int32) (extPackageName string, field *FieldDescriptorProto) {
0000000000000000000000000000000000000000;;		parent := desc.GetMessage(packageName, typeName)
0000000000000000000000000000000000000000;;		if parent == nil {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !parent.IsExtendable() {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		extendee := "." + packageName + "." + typeName
0000000000000000000000000000000000000000;;		for _, file := range desc.GetFile() {
0000000000000000000000000000000000000000;;			for _, ext := range file.GetExtension() {
0000000000000000000000000000000000000000;;				if strings.Map(dotToUnderscore, file.GetPackage()) == strings.Map(dotToUnderscore, packageName) {
0000000000000000000000000000000000000000;;					if !(ext.GetExtendee() == typeName || ext.GetExtendee() == extendee) {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if ext.GetExtendee() != extendee {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ext.GetNumber() == fieldNum {
0000000000000000000000000000000000000000;;					return file.GetPackage(), ext
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) FindMessage(packageName string, typeName string, fieldName string) (msgPackageName string, msgName string) {
0000000000000000000000000000000000000000;;		parent := desc.GetMessage(packageName, typeName)
0000000000000000000000000000000000000000;;		if parent == nil {
0000000000000000000000000000000000000000;;			return "", ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		field := parent.GetFieldDescriptor(fieldName)
0000000000000000000000000000000000000000;;		if field == nil {
0000000000000000000000000000000000000000;;			var extPackageName string
0000000000000000000000000000000000000000;;			extPackageName, field = desc.FindExtension(packageName, typeName, fieldName)
0000000000000000000000000000000000000000;;			if field == nil {
0000000000000000000000000000000000000000;;				return "", ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			packageName = extPackageName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeNames := strings.Split(field.GetTypeName(), ".")
0000000000000000000000000000000000000000;;		if len(typeNames) == 1 {
0000000000000000000000000000000000000000;;			msg := desc.GetMessage(packageName, typeName)
0000000000000000000000000000000000000000;;			if msg == nil {
0000000000000000000000000000000000000000;;				return "", ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return packageName, msg.GetName()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(typeNames) > 2 {
0000000000000000000000000000000000000000;;			for i := 1; i < len(typeNames)-1; i++ {
0000000000000000000000000000000000000000;;				packageName = strings.Join(typeNames[1:len(typeNames)-i], ".")
0000000000000000000000000000000000000000;;				typeName = strings.Join(typeNames[len(typeNames)-i:], ".")
0000000000000000000000000000000000000000;;				msg := desc.GetMessage(packageName, typeName)
0000000000000000000000000000000000000000;;				if msg != nil {
0000000000000000000000000000000000000000;;					typeNames := strings.Split(msg.GetName(), ".")
0000000000000000000000000000000000000000;;					if len(typeNames) == 1 {
0000000000000000000000000000000000000000;;						return packageName, msg.GetName()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return strings.Join(typeNames[1:len(typeNames)-1], "."), typeNames[len(typeNames)-1]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *DescriptorProto) GetFieldDescriptor(fieldName string) *FieldDescriptorProto {
0000000000000000000000000000000000000000;;		for _, field := range msg.GetField() {
0000000000000000000000000000000000000000;;			if field.GetName() == fieldName {
0000000000000000000000000000000000000000;;				return field
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (desc *FileDescriptorSet) GetEnum(packageName string, typeName string) *EnumDescriptorProto {
0000000000000000000000000000000000000000;;		for _, file := range desc.GetFile() {
0000000000000000000000000000000000000000;;			if strings.Map(dotToUnderscore, file.GetPackage()) != strings.Map(dotToUnderscore, packageName) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, enum := range file.GetEnumType() {
0000000000000000000000000000000000000000;;				if enum.GetName() == typeName {
0000000000000000000000000000000000000000;;					return enum
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsEnum() bool {
0000000000000000000000000000000000000000;;		return *f.Type == FieldDescriptorProto_TYPE_ENUM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsMessage() bool {
0000000000000000000000000000000000000000;;		return *f.Type == FieldDescriptorProto_TYPE_MESSAGE
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsBytes() bool {
0000000000000000000000000000000000000000;;		return *f.Type == FieldDescriptorProto_TYPE_BYTES
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsRepeated() bool {
0000000000000000000000000000000000000000;;		return f.Label != nil && *f.Label == FieldDescriptorProto_LABEL_REPEATED
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsString() bool {
0000000000000000000000000000000000000000;;		return *f.Type == FieldDescriptorProto_TYPE_STRING
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsBool() bool {
0000000000000000000000000000000000000000;;		return *f.Type == FieldDescriptorProto_TYPE_BOOL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsRequired() bool {
0000000000000000000000000000000000000000;;		return f.Label != nil && *f.Label == FieldDescriptorProto_LABEL_REQUIRED
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsPacked() bool {
0000000000000000000000000000000000000000;;		return f.Options != nil && f.GetOptions().GetPacked()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FieldDescriptorProto) IsPacked3() bool {
0000000000000000000000000000000000000000;;		if f.IsRepeated() && f.IsScalar() {
0000000000000000000000000000000000000000;;			if f.Options == nil || f.GetOptions().Packed == nil {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return f.Options != nil && f.GetOptions().GetPacked()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *DescriptorProto) HasExtension() bool {
0000000000000000000000000000000000000000;;		return len(m.ExtensionRange) > 0
0000000000000000000000000000000000000000;;	}
