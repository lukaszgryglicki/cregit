0000000000000000000000000000000000000000;;	package pagination
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkerPage is a stricter Page interface that describes additional functionality required for use with NewMarkerPager.
0000000000000000000000000000000000000000;;	// For convenience, embed the MarkedPageBase struct.
0000000000000000000000000000000000000000;;	type MarkerPage interface {
0000000000000000000000000000000000000000;;		Page
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LastMarker returns the last "marker" value on this page.
0000000000000000000000000000000000000000;;		LastMarker() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkerPageBase is a page in a collection that's paginated by "limit" and "marker" query parameters.
0000000000000000000000000000000000000000;;	type MarkerPageBase struct {
0000000000000000000000000000000000000000;;		PageResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner is a reference to the embedding struct.
0000000000000000000000000000000000000000;;		Owner MarkerPage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL generates the URL for the page of results after this one.
0000000000000000000000000000000000000000;;	func (current MarkerPageBase) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		currentURL := current.URL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mark, err := current.Owner.LastMarker()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q := currentURL.Query()
0000000000000000000000000000000000000000;;		q.Set("marker", mark)
0000000000000000000000000000000000000000;;		currentURL.RawQuery = q.Encode()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return currentURL.String(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty satisifies the IsEmpty method of the Page interface
0000000000000000000000000000000000000000;;	func (current MarkerPageBase) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		if b, ok := current.Body.([]interface{}); ok {
0000000000000000000000000000000000000000;;			return len(b) == 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := gophercloud.ErrUnexpectedType{}
0000000000000000000000000000000000000000;;		err.Expected = "[]interface{}"
0000000000000000000000000000000000000000;;		err.Actual = fmt.Sprintf("%v", reflect.TypeOf(current.Body))
0000000000000000000000000000000000000000;;		return true, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetBody returns the linked page's body. This method is needed to satisfy the
0000000000000000000000000000000000000000;;	// Page interface.
0000000000000000000000000000000000000000;;	func (current MarkerPageBase) GetBody() interface{} {
0000000000000000000000000000000000000000;;		return current.Body
0000000000000000000000000000000000000000;;	}
