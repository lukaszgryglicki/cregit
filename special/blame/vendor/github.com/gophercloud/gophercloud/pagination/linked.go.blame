0000000000000000000000000000000000000000;;	package pagination
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LinkedPageBase may be embedded to implement a page that provides navigational "Next" and "Previous" links within its result.
0000000000000000000000000000000000000000;;	type LinkedPageBase struct {
0000000000000000000000000000000000000000;;		PageResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LinkPath lists the keys that should be traversed within a response to arrive at the "next" pointer.
0000000000000000000000000000000000000000;;		// If any link along the path is missing, an empty URL will be returned.
0000000000000000000000000000000000000000;;		// If any link results in an unexpected value type, an error will be returned.
0000000000000000000000000000000000000000;;		// When left as "nil", []string{"links", "next"} will be used as a default.
0000000000000000000000000000000000000000;;		LinkPath []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL extracts the pagination structure from a JSON response and returns the "next" link, if one is present.
0000000000000000000000000000000000000000;;	// It assumes that the links are available in a "links" element of the top-level response object.
0000000000000000000000000000000000000000;;	// If this is not the case, override NextPageURL on your result type.
0000000000000000000000000000000000000000;;	func (current LinkedPageBase) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var path []string
0000000000000000000000000000000000000000;;		var key string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if current.LinkPath == nil {
0000000000000000000000000000000000000000;;			path = []string{"links", "next"}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			path = current.LinkPath
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		submap, ok := current.Body.(map[string]interface{})
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			err := gophercloud.ErrUnexpectedType{}
0000000000000000000000000000000000000000;;			err.Expected = "map[string]interface{}"
0000000000000000000000000000000000000000;;			err.Actual = fmt.Sprintf("%v", reflect.TypeOf(current.Body))
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			key, path = path[0], path[1:len(path)]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			value, ok := submap[key]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return "", nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(path) > 0 {
0000000000000000000000000000000000000000;;				submap, ok = value.(map[string]interface{})
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					err := gophercloud.ErrUnexpectedType{}
0000000000000000000000000000000000000000;;					err.Expected = "map[string]interface{}"
0000000000000000000000000000000000000000;;					err.Actual = fmt.Sprintf("%v", reflect.TypeOf(value))
0000000000000000000000000000000000000000;;					return "", err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if value == nil {
0000000000000000000000000000000000000000;;					// Actual null element.
0000000000000000000000000000000000000000;;					return "", nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				url, ok := value.(string)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					err := gophercloud.ErrUnexpectedType{}
0000000000000000000000000000000000000000;;					err.Expected = "string"
0000000000000000000000000000000000000000;;					err.Actual = fmt.Sprintf("%v", reflect.TypeOf(value))
0000000000000000000000000000000000000000;;					return "", err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return url, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty satisifies the IsEmpty method of the Page interface
0000000000000000000000000000000000000000;;	func (current LinkedPageBase) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		if b, ok := current.Body.([]interface{}); ok {
0000000000000000000000000000000000000000;;			return len(b) == 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := gophercloud.ErrUnexpectedType{}
0000000000000000000000000000000000000000;;		err.Expected = "[]interface{}"
0000000000000000000000000000000000000000;;		err.Actual = fmt.Sprintf("%v", reflect.TypeOf(current.Body))
0000000000000000000000000000000000000000;;		return true, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetBody returns the linked page's body. This method is needed to satisfy the
0000000000000000000000000000000000000000;;	// Page interface.
0000000000000000000000000000000000000000;;	func (current LinkedPageBase) GetBody() interface{} {
0000000000000000000000000000000000000000;;		return current.Body
0000000000000000000000000000000000000000;;	}
