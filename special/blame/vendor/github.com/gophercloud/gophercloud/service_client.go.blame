0000000000000000000000000000000000000000;;	package gophercloud
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceClient stores details required to interact with a specific service API implemented by a provider.
0000000000000000000000000000000000000000;;	// Generally, you'll acquire these by calling the appropriate `New` method on a ProviderClient.
0000000000000000000000000000000000000000;;	type ServiceClient struct {
0000000000000000000000000000000000000000;;		// ProviderClient is a reference to the provider that implements this service.
0000000000000000000000000000000000000000;;		*ProviderClient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Endpoint is the base URL of the service's API, acquired from a service catalog.
0000000000000000000000000000000000000000;;		// It MUST end with a /.
0000000000000000000000000000000000000000;;		Endpoint string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceBase is the base URL shared by the resources within a service's API. It should include
0000000000000000000000000000000000000000;;		// the API version and, like Endpoint, MUST end with a / if set. If not set, the Endpoint is used
0000000000000000000000000000000000000000;;		// as-is, instead.
0000000000000000000000000000000000000000;;		ResourceBase string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is the service client type (e.g. compute, sharev2).
0000000000000000000000000000000000000000;;		// NOTE: FOR INTERNAL USE ONLY. DO NOT SET. GOPHERCLOUD WILL SET THIS.
0000000000000000000000000000000000000000;;		// It is only exported because it gets set in a different package.
0000000000000000000000000000000000000000;;		Type string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The microversion of the service to use. Set this to use a particular microversion.
0000000000000000000000000000000000000000;;		Microversion string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceBaseURL returns the base URL of any resources used by this service. It MUST end with a /.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) ResourceBaseURL() string {
0000000000000000000000000000000000000000;;		if client.ResourceBase != "" {
0000000000000000000000000000000000000000;;			return client.ResourceBase
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client.Endpoint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceURL constructs a URL for a resource belonging to this provider.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) ServiceURL(parts ...string) string {
0000000000000000000000000000000000000000;;		return client.ResourceBaseURL() + strings.Join(parts, "/")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ServiceClient) initReqOpts(url string, JSONBody interface{}, JSONResponse interface{}, opts *RequestOpts) {
0000000000000000000000000000000000000000;;		if v, ok := (JSONBody).(io.Reader); ok {
0000000000000000000000000000000000000000;;			opts.RawBody = v
0000000000000000000000000000000000000000;;		} else if JSONBody != nil {
0000000000000000000000000000000000000000;;			opts.JSONBody = JSONBody
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if JSONResponse != nil {
0000000000000000000000000000000000000000;;			opts.JSONResponse = JSONResponse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.MoreHeaders == nil {
0000000000000000000000000000000000000000;;			opts.MoreHeaders = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if client.Microversion != "" {
0000000000000000000000000000000000000000;;			client.setMicroversionHeader(opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get calls `Request` with the "GET" HTTP verb.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) Get(url string, JSONResponse interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = new(RequestOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.initReqOpts(url, nil, JSONResponse, opts)
0000000000000000000000000000000000000000;;		return client.Request("GET", url, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Post calls `Request` with the "POST" HTTP verb.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) Post(url string, JSONBody interface{}, JSONResponse interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = new(RequestOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.initReqOpts(url, JSONBody, JSONResponse, opts)
0000000000000000000000000000000000000000;;		return client.Request("POST", url, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put calls `Request` with the "PUT" HTTP verb.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) Put(url string, JSONBody interface{}, JSONResponse interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = new(RequestOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.initReqOpts(url, JSONBody, JSONResponse, opts)
0000000000000000000000000000000000000000;;		return client.Request("PUT", url, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch calls `Request` with the "PATCH" HTTP verb.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) Patch(url string, JSONBody interface{}, JSONResponse interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = new(RequestOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.initReqOpts(url, JSONBody, JSONResponse, opts)
0000000000000000000000000000000000000000;;		return client.Request("PATCH", url, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete calls `Request` with the "DELETE" HTTP verb.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) Delete(url string, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = new(RequestOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.initReqOpts(url, nil, nil, opts)
0000000000000000000000000000000000000000;;		return client.Request("DELETE", url, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ServiceClient) setMicroversionHeader(opts *RequestOpts) {
0000000000000000000000000000000000000000;;		switch client.Type {
0000000000000000000000000000000000000000;;		case "compute":
0000000000000000000000000000000000000000;;			opts.MoreHeaders["X-OpenStack-Nova-API-Version"] = client.Microversion
0000000000000000000000000000000000000000;;		case "sharev2":
0000000000000000000000000000000000000000;;			opts.MoreHeaders["X-OpenStack-Manila-API-Version"] = client.Microversion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if client.Type != "" {
0000000000000000000000000000000000000000;;			opts.MoreHeaders["OpenStack-API-Version"] = client.Type + " " + client.Microversion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
