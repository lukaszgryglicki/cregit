0000000000000000000000000000000000000000;;	package tenants
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts filters the Tenants that are returned by the List call.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		// Marker is the ID of the last Tenant on the previous page.
0000000000000000000000000000000000000000;;		Marker string `q:"marker"`
0000000000000000000000000000000000000000;;		// Limit specifies the page size.
0000000000000000000000000000000000000000;;		Limit int `q:"limit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List enumerates the Tenants to which the current token has access.
0000000000000000000000000000000000000000;;	func List(client *gophercloud.ServiceClient, opts *ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += q.String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return TenantPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
