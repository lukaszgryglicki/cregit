0000000000000000000000000000000000000000;;	package tokens
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import "github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scope allows a created token to be limited to a specific domain or project.
0000000000000000000000000000000000000000;;	type Scope struct {
0000000000000000000000000000000000000000;;		ProjectID   string
0000000000000000000000000000000000000000;;		ProjectName string
0000000000000000000000000000000000000000;;		DomainID    string
0000000000000000000000000000000000000000;;		DomainName  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptionsBuilder describes any argument that may be passed to the Create call.
0000000000000000000000000000000000000000;;	type AuthOptionsBuilder interface {
0000000000000000000000000000000000000000;;		// ToTokenV3CreateMap assembles the Create request body, returning an error if parameters are
0000000000000000000000000000000000000000;;		// missing or inconsistent.
0000000000000000000000000000000000000000;;		ToTokenV3CreateMap(map[string]interface{}) (map[string]interface{}, error)
0000000000000000000000000000000000000000;;		ToTokenV3ScopeMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;		CanReauth() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthOptions struct {
0000000000000000000000000000000000000000;;		// IdentityEndpoint specifies the HTTP endpoint that is required to work with
0000000000000000000000000000000000000000;;		// the Identity API of the appropriate version. While it's ultimately needed by
0000000000000000000000000000000000000000;;		// all of the identity services, it will often be populated by a provider-level
0000000000000000000000000000000000000000;;		// function.
0000000000000000000000000000000000000000;;		IdentityEndpoint string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Username is required if using Identity V2 API. Consult with your provider's
0000000000000000000000000000000000000000;;		// control panel to discover your account's username. In Identity V3, either
0000000000000000000000000000000000000000;;		// UserID or a combination of Username and DomainID or DomainName are needed.
0000000000000000000000000000000000000000;;		Username string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		UserID   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Password string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// At most one of DomainID and DomainName must be provided if using Username
0000000000000000000000000000000000000000;;		// with Identity V3. Otherwise, either are optional.
0000000000000000000000000000000000000000;;		DomainID   string `json:"-"`
0000000000000000000000000000000000000000;;		DomainName string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AllowReauth should be set to true if you grant permission for Gophercloud to
0000000000000000000000000000000000000000;;		// cache your credentials in memory, and to allow Gophercloud to attempt to
0000000000000000000000000000000000000000;;		// re-authenticate automatically if/when your token expires.  If you set it to
0000000000000000000000000000000000000000;;		// false, it will not cache these settings, but re-authentication will not be
0000000000000000000000000000000000000000;;		// possible.  This setting defaults to false.
0000000000000000000000000000000000000000;;		AllowReauth bool `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TokenID allows users to authenticate (possibly as another user) with an
0000000000000000000000000000000000000000;;		// authentication token ID.
0000000000000000000000000000000000000000;;		TokenID string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Scope Scope `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts *AuthOptions) ToTokenV3CreateMap(scope map[string]interface{}) (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		gophercloudAuthOpts := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;			Username:    opts.Username,
0000000000000000000000000000000000000000;;			UserID:      opts.UserID,
0000000000000000000000000000000000000000;;			Password:    opts.Password,
0000000000000000000000000000000000000000;;			DomainID:    opts.DomainID,
0000000000000000000000000000000000000000;;			DomainName:  opts.DomainName,
0000000000000000000000000000000000000000;;			AllowReauth: opts.AllowReauth,
0000000000000000000000000000000000000000;;			TokenID:     opts.TokenID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gophercloudAuthOpts.ToTokenV3CreateMap(scope)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts *AuthOptions) ToTokenV3ScopeMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		if opts.Scope.ProjectName != "" {
0000000000000000000000000000000000000000;;			// ProjectName provided: either DomainID or DomainName must also be supplied.
0000000000000000000000000000000000000000;;			// ProjectID may not be supplied.
0000000000000000000000000000000000000000;;			if opts.Scope.DomainID == "" && opts.Scope.DomainName == "" {
0000000000000000000000000000000000000000;;				return nil, gophercloud.ErrScopeDomainIDOrDomainName{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if opts.Scope.ProjectID != "" {
0000000000000000000000000000000000000000;;				return nil, gophercloud.ErrScopeProjectIDOrProjectName{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if opts.Scope.DomainID != "" {
0000000000000000000000000000000000000000;;				// ProjectName + DomainID
0000000000000000000000000000000000000000;;				return map[string]interface{}{
0000000000000000000000000000000000000000;;					"project": map[string]interface{}{
0000000000000000000000000000000000000000;;						"name":   &opts.Scope.ProjectName,
0000000000000000000000000000000000000000;;						"domain": map[string]interface{}{"id": &opts.Scope.DomainID},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if opts.Scope.DomainName != "" {
0000000000000000000000000000000000000000;;				// ProjectName + DomainName
0000000000000000000000000000000000000000;;				return map[string]interface{}{
0000000000000000000000000000000000000000;;					"project": map[string]interface{}{
0000000000000000000000000000000000000000;;						"name":   &opts.Scope.ProjectName,
0000000000000000000000000000000000000000;;						"domain": map[string]interface{}{"name": &opts.Scope.DomainName},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if opts.Scope.ProjectID != "" {
0000000000000000000000000000000000000000;;			// ProjectID provided. ProjectName, DomainID, and DomainName may not be provided.
0000000000000000000000000000000000000000;;			if opts.Scope.DomainID != "" {
0000000000000000000000000000000000000000;;				return nil, gophercloud.ErrScopeProjectIDAlone{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if opts.Scope.DomainName != "" {
0000000000000000000000000000000000000000;;				return nil, gophercloud.ErrScopeProjectIDAlone{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// ProjectID
0000000000000000000000000000000000000000;;			return map[string]interface{}{
0000000000000000000000000000000000000000;;				"project": map[string]interface{}{
0000000000000000000000000000000000000000;;					"id": &opts.Scope.ProjectID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		} else if opts.Scope.DomainID != "" {
0000000000000000000000000000000000000000;;			// DomainID provided. ProjectID, ProjectName, and DomainName may not be provided.
0000000000000000000000000000000000000000;;			if opts.Scope.DomainName != "" {
0000000000000000000000000000000000000000;;				return nil, gophercloud.ErrScopeDomainIDOrDomainName{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// DomainID
0000000000000000000000000000000000000000;;			return map[string]interface{}{
0000000000000000000000000000000000000000;;				"domain": map[string]interface{}{
0000000000000000000000000000000000000000;;					"id": &opts.Scope.DomainID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		} else if opts.Scope.DomainName != "" {
0000000000000000000000000000000000000000;;			return nil, gophercloud.ErrScopeDomainName{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts *AuthOptions) CanReauth() bool {
0000000000000000000000000000000000000000;;		return opts.AllowReauth
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func subjectTokenHeaders(c *gophercloud.ServiceClient, subjectToken string) map[string]string {
0000000000000000000000000000000000000000;;		return map[string]string{
0000000000000000000000000000000000000000;;			"X-Subject-Token": subjectToken,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create authenticates and either generates a new token, or changes the Scope of an existing token.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts AuthOptionsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		scope, err := opts.ToTokenV3ScopeMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b, err := opts.ToTokenV3CreateMap(scope)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := c.Post(tokenURL(c), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			MoreHeaders: map[string]string{"X-Auth-Token": ""},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		r.Err = err
0000000000000000000000000000000000000000;;		if resp != nil {
0000000000000000000000000000000000000000;;			r.Header = resp.Header
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get validates and retrieves information about another token.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, token string) (r GetResult) {
0000000000000000000000000000000000000000;;		resp, err := c.Get(tokenURL(c), &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			MoreHeaders: subjectTokenHeaders(c, token),
0000000000000000000000000000000000000000;;			OkCodes:     []int{200, 203},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if resp != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			r.Header = resp.Header
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate determines if a specified token is valid or not.
0000000000000000000000000000000000000000;;	func Validate(c *gophercloud.ServiceClient, token string) (bool, error) {
0000000000000000000000000000000000000000;;		resp, err := c.Request("HEAD", tokenURL(c), &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			MoreHeaders: subjectTokenHeaders(c, token),
0000000000000000000000000000000000000000;;			OkCodes:     []int{200, 204, 400, 401, 403, 404},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp.StatusCode == 200 || resp.StatusCode == 204, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Revoke immediately makes specified token invalid.
0000000000000000000000000000000000000000;;	func Revoke(c *gophercloud.ServiceClient, token string) (r RevokeResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(tokenURL(c), &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			MoreHeaders: subjectTokenHeaders(c, token),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
