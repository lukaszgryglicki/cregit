0000000000000000000000000000000000000000;;	package tokens
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/identity/v2/tenants"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Token provides only the most basic information related to an authentication token.
0000000000000000000000000000000000000000;;	type Token struct {
0000000000000000000000000000000000000000;;		// ID provides the primary means of identifying a user to the OpenStack API.
0000000000000000000000000000000000000000;;		// OpenStack defines this field as an opaque value, so do not depend on its content.
0000000000000000000000000000000000000000;;		// It is safe, however, to compare for equality.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExpiresAt provides a timestamp in ISO 8601 format, indicating when the authentication token becomes invalid.
0000000000000000000000000000000000000000;;		// After this point in time, future API requests made using this authentication token will respond with errors.
0000000000000000000000000000000000000000;;		// Either the caller will need to reauthenticate manually, or more preferably, the caller should exploit automatic re-authentication.
0000000000000000000000000000000000000000;;		// See the AuthOptions structure for more details.
0000000000000000000000000000000000000000;;		ExpiresAt time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Tenant provides information about the tenant to which this token grants access.
0000000000000000000000000000000000000000;;		Tenant tenants.Tenant
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Role is a role for a user.
0000000000000000000000000000000000000000;;	type Role struct {
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// User is an OpenStack user.
0000000000000000000000000000000000000000;;	type User struct {
0000000000000000000000000000000000000000;;		ID       string `json:"id"`
0000000000000000000000000000000000000000;;		Name     string `json:"name"`
0000000000000000000000000000000000000000;;		UserName string `json:"username"`
0000000000000000000000000000000000000000;;		Roles    []Role `json:"roles"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Endpoint represents a single API endpoint offered by a service.
0000000000000000000000000000000000000000;;	// It provides the public and internal URLs, if supported, along with a region specifier, again if provided.
0000000000000000000000000000000000000000;;	// The significance of the Region field will depend upon your provider.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In addition, the interface offered by the service will have version information associated with it
0000000000000000000000000000000000000000;;	// through the VersionId, VersionInfo, and VersionList fields, if provided or supported.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In all cases, fields which aren't supported by the provider and service combined will assume a zero-value ("").
0000000000000000000000000000000000000000;;	type Endpoint struct {
0000000000000000000000000000000000000000;;		TenantID    string `json:"tenantId"`
0000000000000000000000000000000000000000;;		PublicURL   string `json:"publicURL"`
0000000000000000000000000000000000000000;;		InternalURL string `json:"internalURL"`
0000000000000000000000000000000000000000;;		AdminURL    string `json:"adminURL"`
0000000000000000000000000000000000000000;;		Region      string `json:"region"`
0000000000000000000000000000000000000000;;		VersionID   string `json:"versionId"`
0000000000000000000000000000000000000000;;		VersionInfo string `json:"versionInfo"`
0000000000000000000000000000000000000000;;		VersionList string `json:"versionList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CatalogEntry provides a type-safe interface to an Identity API V2 service catalog listing.
0000000000000000000000000000000000000000;;	// Each class of service, such as cloud DNS or block storage services, will have a single
0000000000000000000000000000000000000000;;	// CatalogEntry representing it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: when looking for the desired service, try, whenever possible, to key off the type field.
0000000000000000000000000000000000000000;;	// Otherwise, you'll tie the representation of the service to a specific provider.
0000000000000000000000000000000000000000;;	type CatalogEntry struct {
0000000000000000000000000000000000000000;;		// Name will contain the provider-specified name for the service.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type will contain a type string if OpenStack defines a type for the service.
0000000000000000000000000000000000000000;;		// Otherwise, for provider-specific services, the provider may assign their own type strings.
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Endpoints will let the caller iterate over all the different endpoints that may exist for
0000000000000000000000000000000000000000;;		// the service.
0000000000000000000000000000000000000000;;		Endpoints []Endpoint `json:"endpoints"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceCatalog provides a view into the service catalog from a previous, successful authentication.
0000000000000000000000000000000000000000;;	type ServiceCatalog struct {
0000000000000000000000000000000000000000;;		Entries []CatalogEntry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult defers the interpretation of a created token.
0000000000000000000000000000000000000000;;	// Use ExtractToken() to interpret it as a Token, or ExtractServiceCatalog() to interpret it as a service catalog.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult is the deferred response from a Get call, which is the same with a Created token.
0000000000000000000000000000000000000000;;	// Use ExtractUser() to interpret it as a User.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		CreateResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractToken returns the just-created Token from a CreateResult.
0000000000000000000000000000000000000000;;	func (r CreateResult) ExtractToken() (*Token, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Access struct {
0000000000000000000000000000000000000000;;				Token struct {
0000000000000000000000000000000000000000;;					Expires string         `json:"expires"`
0000000000000000000000000000000000000000;;					ID      string         `json:"id"`
0000000000000000000000000000000000000000;;					Tenant  tenants.Tenant `json:"tenant"`
0000000000000000000000000000000000000000;;				} `json:"token"`
0000000000000000000000000000000000000000;;			} `json:"access"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expiresTs, err := time.Parse(gophercloud.RFC3339Milli, s.Access.Token.Expires)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Token{
0000000000000000000000000000000000000000;;			ID:        s.Access.Token.ID,
0000000000000000000000000000000000000000;;			ExpiresAt: expiresTs,
0000000000000000000000000000000000000000;;			Tenant:    s.Access.Token.Tenant,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractServiceCatalog returns the ServiceCatalog that was generated along with the user's Token.
0000000000000000000000000000000000000000;;	func (r CreateResult) ExtractServiceCatalog() (*ServiceCatalog, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Access struct {
0000000000000000000000000000000000000000;;				Entries []CatalogEntry `json:"serviceCatalog"`
0000000000000000000000000000000000000000;;			} `json:"access"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return &ServiceCatalog{Entries: s.Access.Entries}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractUser returns the User from a GetResult.
0000000000000000000000000000000000000000;;	func (r GetResult) ExtractUser() (*User, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Access struct {
0000000000000000000000000000000000000000;;				User User `json:"user"`
0000000000000000000000000000000000000000;;			} `json:"access"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return &s.Access.User, err
0000000000000000000000000000000000000000;;	}
