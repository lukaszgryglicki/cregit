0000000000000000000000000000000000000000;;	package tokens
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import "github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PasswordCredentialsV2 struct {
0000000000000000000000000000000000000000;;		Username string `json:"username" required:"true"`
0000000000000000000000000000000000000000;;		Password string `json:"password" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TokenCredentialsV2 struct {
0000000000000000000000000000000000000000;;		ID string `json:"id,omitempty" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptionsV2 wraps a gophercloud AuthOptions in order to adhere to the AuthOptionsBuilder
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type AuthOptionsV2 struct {
0000000000000000000000000000000000000000;;		PasswordCredentials *PasswordCredentialsV2 `json:"passwordCredentials,omitempty" xor:"TokenCredentials"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The TenantID and TenantName fields are optional for the Identity V2 API.
0000000000000000000000000000000000000000;;		// Some providers allow you to specify a TenantName instead of the TenantId.
0000000000000000000000000000000000000000;;		// Some require both. Your provider's authentication policies will determine
0000000000000000000000000000000000000000;;		// how these fields influence authentication.
0000000000000000000000000000000000000000;;		TenantID   string `json:"tenantId,omitempty"`
0000000000000000000000000000000000000000;;		TenantName string `json:"tenantName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TokenCredentials allows users to authenticate (possibly as another user) with an
0000000000000000000000000000000000000000;;		// authentication token ID.
0000000000000000000000000000000000000000;;		TokenCredentials *TokenCredentialsV2 `json:"token,omitempty" xor:"PasswordCredentials"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptionsBuilder describes any argument that may be passed to the Create call.
0000000000000000000000000000000000000000;;	type AuthOptionsBuilder interface {
0000000000000000000000000000000000000000;;		// ToTokenCreateMap assembles the Create request body, returning an error if parameters are
0000000000000000000000000000000000000000;;		// missing or inconsistent.
0000000000000000000000000000000000000000;;		ToTokenV2CreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptions are the valid options for Openstack Identity v2 authentication.
0000000000000000000000000000000000000000;;	// For field descriptions, see gophercloud.AuthOptions.
0000000000000000000000000000000000000000;;	type AuthOptions struct {
0000000000000000000000000000000000000000;;		IdentityEndpoint string `json:"-"`
0000000000000000000000000000000000000000;;		Username         string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Password         string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		TenantID         string `json:"tenantId,omitempty"`
0000000000000000000000000000000000000000;;		TenantName       string `json:"tenantName,omitempty"`
0000000000000000000000000000000000000000;;		AllowReauth      bool   `json:"-"`
0000000000000000000000000000000000000000;;		TokenID          string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTokenV2CreateMap allows AuthOptions to satisfy the AuthOptionsBuilder
0000000000000000000000000000000000000000;;	// interface in the v2 tokens package
0000000000000000000000000000000000000000;;	func (opts AuthOptions) ToTokenV2CreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		v2Opts := AuthOptionsV2{
0000000000000000000000000000000000000000;;			TenantID:   opts.TenantID,
0000000000000000000000000000000000000000;;			TenantName: opts.TenantName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.Password != "" {
0000000000000000000000000000000000000000;;			v2Opts.PasswordCredentials = &PasswordCredentialsV2{
0000000000000000000000000000000000000000;;				Username: opts.Username,
0000000000000000000000000000000000000000;;				Password: opts.Password,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			v2Opts.TokenCredentials = &TokenCredentialsV2{
0000000000000000000000000000000000000000;;				ID: opts.TokenID,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b, err := gophercloud.BuildRequestBody(v2Opts, "auth")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create authenticates to the identity service and attempts to acquire a Token.
0000000000000000000000000000000000000000;;	// If successful, the CreateResult
0000000000000000000000000000000000000000;;	// Generally, rather than interact with this call directly, end users should call openstack.AuthenticatedClient(),
0000000000000000000000000000000000000000;;	// which abstracts all of the gory details about navigating service catalogs and such.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, auth AuthOptionsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := auth.ToTokenV2CreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(CreateURL(client), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes:     []int{200, 203},
0000000000000000000000000000000000000000;;			MoreHeaders: map[string]string{"X-Auth-Token": ""},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get validates and retrieves information for user's token.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, token string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(GetURL(client, token), &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 203},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
