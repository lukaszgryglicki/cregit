0000000000000000000000000000000000000000;;	package tenants
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tenant is a grouping of users in the identity service.
0000000000000000000000000000000000000000;;	type Tenant struct {
0000000000000000000000000000000000000000;;		// ID is a unique identifier for this tenant.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is a friendlier user-facing name for this tenant.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description is a human-readable explanation of this Tenant's purpose.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enabled indicates whether or not a tenant is active.
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TenantPage is a single page of Tenant results.
0000000000000000000000000000000000000000;;	type TenantPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty determines whether or not a page of Tenants contains any results.
0000000000000000000000000000000000000000;;	func (r TenantPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		tenants, err := ExtractTenants(r)
0000000000000000000000000000000000000000;;		return len(tenants) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL extracts the "next" link from the tenants_links section of the result.
0000000000000000000000000000000000000000;;	func (r TenantPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"tenants_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractTenants returns a slice of Tenants contained in a single page of results.
0000000000000000000000000000000000000000;;	func ExtractTenants(r pagination.Page) ([]Tenant, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Tenants []Tenant `json:"tenants"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(TenantPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Tenants, err
0000000000000000000000000000000000000000;;	}
