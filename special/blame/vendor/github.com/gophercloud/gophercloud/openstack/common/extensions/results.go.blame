0000000000000000000000000000000000000000;;	package extensions
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult temporarily stores the result of a Get call.
0000000000000000000000000000000000000000;;	// Use its Extract() method to interpret it as an Extension.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract interprets a GetResult as an Extension.
0000000000000000000000000000000000000000;;	func (r GetResult) Extract() (*Extension, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Extension *Extension `json:"extension"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Extension, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extension is a struct that represents an OpenStack extension.
0000000000000000000000000000000000000000;;	type Extension struct {
0000000000000000000000000000000000000000;;		Updated     string        `json:"updated"`
0000000000000000000000000000000000000000;;		Name        string        `json:"name"`
0000000000000000000000000000000000000000;;		Links       []interface{} `json:"links"`
0000000000000000000000000000000000000000;;		Namespace   string        `json:"namespace"`
0000000000000000000000000000000000000000;;		Alias       string        `json:"alias"`
0000000000000000000000000000000000000000;;		Description string        `json:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtensionPage is the page returned by a pager when traversing over a collection of extensions.
0000000000000000000000000000000000000000;;	type ExtensionPage struct {
0000000000000000000000000000000000000000;;		pagination.SinglePageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether an ExtensionPage struct is empty.
0000000000000000000000000000000000000000;;	func (r ExtensionPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractExtensions(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractExtensions accepts a Page struct, specifically an ExtensionPage struct, and extracts the
0000000000000000000000000000000000000000;;	// elements into a slice of Extension structs.
0000000000000000000000000000000000000000;;	// In other words, a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractExtensions(r pagination.Page) ([]Extension, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Extensions []Extension `json:"extensions"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(ExtensionPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Extensions, err
0000000000000000000000000000000000000000;;	}
