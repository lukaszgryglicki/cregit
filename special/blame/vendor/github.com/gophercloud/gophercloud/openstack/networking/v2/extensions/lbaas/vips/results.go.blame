0000000000000000000000000000000000000000;;	package vips
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SessionPersistence represents the session persistence feature of the load
0000000000000000000000000000000000000000;;	// balancing service. It attempts to force connections or requests in the same
0000000000000000000000000000000000000000;;	// session to be processed by the same member as long as it is ative. Three
0000000000000000000000000000000000000000;;	// types of persistence are supported:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// SOURCE_IP:   With this mode, all connections originating from the same source
0000000000000000000000000000000000000000;;	//              IP address, will be handled by the same member of the pool.
0000000000000000000000000000000000000000;;	// HTTP_COOKIE: With this persistence mode, the load balancing function will
0000000000000000000000000000000000000000;;	//              create a cookie on the first request from a client. Subsequent
0000000000000000000000000000000000000000;;	//              requests containing the same cookie value will be handled by
0000000000000000000000000000000000000000;;	//              the same member of the pool.
0000000000000000000000000000000000000000;;	// APP_COOKIE:  With this persistence mode, the load balancing function will
0000000000000000000000000000000000000000;;	//              rely on a cookie established by the backend application. All
0000000000000000000000000000000000000000;;	//              requests carrying the same cookie value will be handled by the
0000000000000000000000000000000000000000;;	//              same member of the pool.
0000000000000000000000000000000000000000;;	type SessionPersistence struct {
0000000000000000000000000000000000000000;;		// The type of persistence mode
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of cookie if persistence mode is set appropriately
0000000000000000000000000000000000000000;;		CookieName string `json:"cookie_name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualIP is the primary load balancing configuration object that specifies
0000000000000000000000000000000000000000;;	// the virtual IP address and port on which client traffic is received, as well
0000000000000000000000000000000000000000;;	// as other details such as the load balancing method to be use, protocol, etc.
0000000000000000000000000000000000000000;;	// This entity is sometimes known in LB products under the name of a "virtual
0000000000000000000000000000000000000000;;	// server", a "vserver" or a "listener".
0000000000000000000000000000000000000000;;	type VirtualIP struct {
0000000000000000000000000000000000000000;;		// The unique ID for the VIP.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the VIP. Only an admin user can specify a tenant ID other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Human-readable name for the VIP. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Human-readable description for the VIP.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet on which to allocate the VIP address.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP address of the VIP.
0000000000000000000000000000000000000000;;		Address string `json:"address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The protocol of the VIP address. A valid value is TCP, HTTP, or HTTPS.
0000000000000000000000000000000000000000;;		Protocol string `json:"protocol"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The port on which to listen to client traffic that is associated with the
0000000000000000000000000000000000000000;;		// VIP address. A valid value is from 0 to 65535.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the pool with which the VIP is associated.
0000000000000000000000000000000000000000;;		PoolID string `json:"pool_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the port which belongs to the load balancer
0000000000000000000000000000000000000000;;		PortID string `json:"port_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether connections in the same session will be processed by the
0000000000000000000000000000000000000000;;		// same pool member or not.
0000000000000000000000000000000000000000;;		Persistence SessionPersistence `json:"session_persistence"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of connections allowed for the VIP. Default is -1,
0000000000000000000000000000000000000000;;		// meaning no limit.
0000000000000000000000000000000000000000;;		ConnLimit int `json:"connection_limit"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The administrative state of the VIP. A valid value is true (UP) or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the VIP. Indicates whether the VIP is operational.
0000000000000000000000000000000000000000;;		Status string `json:"status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VIPPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of routers.
0000000000000000000000000000000000000000;;	type VIPPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of routers has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r VIPPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"vips_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a VIPPage struct is empty.
0000000000000000000000000000000000000000;;	func (r VIPPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractVIPs(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractVIPs accepts a Page struct, specifically a VIPPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of VirtualIP structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractVIPs(r pagination.Page) ([]VirtualIP, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			VIPs []VirtualIP `json:"vips"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(VIPPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.VIPs, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*VirtualIP, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			VirtualIP *VirtualIP `json:"vip" json:"vip"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.VirtualIP, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
