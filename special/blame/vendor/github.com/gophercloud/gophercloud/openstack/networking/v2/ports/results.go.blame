0000000000000000000000000000000000000000;;	package ports
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a port resource.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Port, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Port *Port `json:"port"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Port, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IP is a sub-struct that represents an individual IP.
0000000000000000000000000000000000000000;;	type IP struct {
0000000000000000000000000000000000000000;;		SubnetID  string `json:"subnet_id"`
0000000000000000000000000000000000000000;;		IPAddress string `json:"ip_address,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddressPair contains the IP Address and the MAC address.
0000000000000000000000000000000000000000;;	type AddressPair struct {
0000000000000000000000000000000000000000;;		IPAddress  string `json:"ip_address,omitempty"`
0000000000000000000000000000000000000000;;		MACAddress string `json:"mac_address,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Port represents a Neutron port. See package documentation for a top-level
0000000000000000000000000000000000000000;;	// description of what this is.
0000000000000000000000000000000000000000;;	type Port struct {
0000000000000000000000000000000000000000;;		// UUID for the port.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;		// Network that this port is associated with.
0000000000000000000000000000000000000000;;		NetworkID string `json:"network_id"`
0000000000000000000000000000000000000000;;		// Human-readable name for the port. Might not be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Administrative state of port. If false (down), port does not forward packets.
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;		// Indicates whether network is currently operational. Possible values include
0000000000000000000000000000000000000000;;		// `ACTIVE', `DOWN', `BUILD', or `ERROR'. Plug-ins might define additional values.
0000000000000000000000000000000000000000;;		Status string `json:"status"`
0000000000000000000000000000000000000000;;		// Mac address to use on this port.
0000000000000000000000000000000000000000;;		MACAddress string `json:"mac_address"`
0000000000000000000000000000000000000000;;		// Specifies IP addresses for the port thus associating the port itself with
0000000000000000000000000000000000000000;;		// the subnets where the IP addresses are picked from
0000000000000000000000000000000000000000;;		FixedIPs []IP `json:"fixed_ips"`
0000000000000000000000000000000000000000;;		// Owner of network. Only admin users can specify a tenant_id other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;		// Identifies the entity (e.g.: dhcp agent) using this port.
0000000000000000000000000000000000000000;;		DeviceOwner string `json:"device_owner"`
0000000000000000000000000000000000000000;;		// Specifies the IDs of any security groups associated with a port.
0000000000000000000000000000000000000000;;		SecurityGroups []string `json:"security_groups"`
0000000000000000000000000000000000000000;;		// Identifies the device (e.g., virtual server) using this port.
0000000000000000000000000000000000000000;;		DeviceID string `json:"device_id"`
0000000000000000000000000000000000000000;;		// Identifies the list of IP addresses the port will recognize/accept
0000000000000000000000000000000000000000;;		AllowedAddressPairs []AddressPair `json:"allowed_address_pairs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PortPage is the page returned by a pager when traversing over a collection
0000000000000000000000000000000000000000;;	// of network ports.
0000000000000000000000000000000000000000;;	type PortPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of ports has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r PortPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"ports_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a PortPage struct is empty.
0000000000000000000000000000000000000000;;	func (r PortPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractPorts(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractPorts accepts a Page struct, specifically a PortPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Port structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractPorts(r pagination.Page) ([]Port, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Ports []Port `json:"ports"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(PortPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Ports, err
0000000000000000000000000000000000000000;;	}
