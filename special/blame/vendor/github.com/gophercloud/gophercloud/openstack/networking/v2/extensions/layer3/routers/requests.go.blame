0000000000000000000000000000000000000000;;	package routers
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		ID           string `q:"id"`
0000000000000000000000000000000000000000;;		Name         string `q:"name"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		Distributed  *bool  `q:"distributed"`
0000000000000000000000000000000000000000;;		Status       string `q:"status"`
0000000000000000000000000000000000000000;;		TenantID     string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		Limit        int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker       string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey      string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir      string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// routers. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those routers that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return RouterPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Create operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToRouterCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new router. There are
0000000000000000000000000000000000000000;;	// no required values.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		Name         string       `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool        `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;		Distributed  *bool        `json:"distributed,omitempty"`
0000000000000000000000000000000000000000;;		TenantID     string       `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		GatewayInfo  *GatewayInfo `json:"external_gateway_info,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToRouterCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "router")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create accepts a CreateOpts struct and uses the values to create a new
0000000000000000000000000000000000000000;;	// logical router. When it is created, the router does not have an internal
0000000000000000000000000000000000000000;;	// interface - it is not associated to any subnet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can optionally specify an external gateway for a router using the
0000000000000000000000000000000000000000;;	// GatewayInfo struct. The external gateway for the router must be plugged into
0000000000000000000000000000000000000000;;	// an external network (it is external if its `router:external' field is set to
0000000000000000000000000000000000000000;;	// true).
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToRouterCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular router based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToRouterUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains the values used when updating a router.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		Name         string       `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool        `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;		Distributed  *bool        `json:"distributed,omitempty"`
0000000000000000000000000000000000000000;;		GatewayInfo  *GatewayInfo `json:"external_gateway_info,omitempty"`
0000000000000000000000000000000000000000;;		Routes       []Route      `json:"routes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToRouterUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "router")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update allows routers to be updated. You can update the name, administrative
0000000000000000000000000000000000000000;;	// state, and the external gateway. For more information about how to set the
0000000000000000000000000000000000000000;;	// external gateway for a router, see Create. This operation does not enable
0000000000000000000000000000000000000000;;	// the update of router interfaces. To do this, use the AddInterface and
0000000000000000000000000000000000000000;;	// RemoveInterface functions.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToRouterUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular router based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddInterfaceOptsBuilder is what types must satisfy to be used as AddInterface
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type AddInterfaceOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToRouterAddInterfaceMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddInterfaceOpts allow you to work with operations that either add
0000000000000000000000000000000000000000;;	// an internal interface from a router.
0000000000000000000000000000000000000000;;	type AddInterfaceOpts struct {
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id,omitempty" xor:"PortID"`
0000000000000000000000000000000000000000;;		PortID   string `json:"port_id,omitempty" xor:"SubnetID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToRouterAddInterfaceMap allows InterfaceOpts to satisfy the InterfaceOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts AddInterfaceOpts) ToRouterAddInterfaceMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddInterface attaches a subnet to an internal router interface. You must
0000000000000000000000000000000000000000;;	// specify either a SubnetID or PortID in the request body. If you specify both,
0000000000000000000000000000000000000000;;	// the operation will fail and an error will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify a SubnetID, the gateway IP address for that particular subnet
0000000000000000000000000000000000000000;;	// is used to create the router interface. Alternatively, if you specify a
0000000000000000000000000000000000000000;;	// PortID, the IP address associated with the port is used to create the router
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you reference a port that is associated with multiple IP addresses, or
0000000000000000000000000000000000000000;;	// if the port is associated with zero IP addresses, the operation will fail and
0000000000000000000000000000000000000000;;	// a 400 Bad Request error will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you reference a port already in use, the operation will fail and a 409
0000000000000000000000000000000000000000;;	// Conflict error will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The PortID that is returned after using Extract() on the result of this
0000000000000000000000000000000000000000;;	// operation can either be the same PortID passed in or, on the other hand, the
0000000000000000000000000000000000000000;;	// identifier of a new port created by this operation. After the operation
0000000000000000000000000000000000000000;;	// completes, the device ID of the port is set to the router ID, and the
0000000000000000000000000000000000000000;;	// device owner attribute is set to `network:router_interface'.
0000000000000000000000000000000000000000;;	func AddInterface(c *gophercloud.ServiceClient, id string, opts AddInterfaceOptsBuilder) (r InterfaceResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToRouterAddInterfaceMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(addInterfaceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveInterfaceOptsBuilder is what types must satisfy to be used as RemoveInterface
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type RemoveInterfaceOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToRouterRemoveInterfaceMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveInterfaceOpts allow you to work with operations that either add or remote
0000000000000000000000000000000000000000;;	// an internal interface from a router.
0000000000000000000000000000000000000000;;	type RemoveInterfaceOpts struct {
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id,omitempty" or:"PortID"`
0000000000000000000000000000000000000000;;		PortID   string `json:"port_id,omitempty" or:"SubnetID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToRouterRemoveInterfaceMap allows RemoveInterfaceOpts to satisfy the RemoveInterfaceOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts RemoveInterfaceOpts) ToRouterRemoveInterfaceMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveInterface removes an internal router interface, which detaches a
0000000000000000000000000000000000000000;;	// subnet from the router. You must specify either a SubnetID or PortID, since
0000000000000000000000000000000000000000;;	// these values are used to identify the router interface to remove.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unlike AddInterface, you can also specify both a SubnetID and PortID. If you
0000000000000000000000000000000000000000;;	// choose to specify both, the subnet ID must correspond to the subnet ID of
0000000000000000000000000000000000000000;;	// the first IP address on the port specified by the port ID. Otherwise, the
0000000000000000000000000000000000000000;;	// operation will fail and return a 409 Conflict error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the router, subnet or port which are referenced do not exist or are not
0000000000000000000000000000000000000000;;	// visible to you, the operation will fail and a 404 Not Found error will be
0000000000000000000000000000000000000000;;	// returned. After this operation completes, the port connecting the router
0000000000000000000000000000000000000000;;	// with the subnet is removed from the subnet for the network.
0000000000000000000000000000000000000000;;	func RemoveInterface(c *gophercloud.ServiceClient, id string, opts RemoveInterfaceOptsBuilder) (r InterfaceResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToRouterRemoveInterfaceMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(removeInterfaceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
