0000000000000000000000000000000000000000;;	package rules
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecGroupRule represents a rule to dictate the behaviour of incoming or
0000000000000000000000000000000000000000;;	// outgoing traffic for a particular security group.
0000000000000000000000000000000000000000;;	type SecGroupRule struct {
0000000000000000000000000000000000000000;;		// The UUID for this security group rule.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The direction in which the security group rule is applied. The only values
0000000000000000000000000000000000000000;;		// allowed are "ingress" or "egress". For a compute instance, an ingress
0000000000000000000000000000000000000000;;		// security group rule is applied to incoming (ingress) traffic for that
0000000000000000000000000000000000000000;;		// instance. An egress rule is applied to traffic leaving the instance.
0000000000000000000000000000000000000000;;		Direction string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Must be IPv4 or IPv6, and addresses represented in CIDR must match the
0000000000000000000000000000000000000000;;		// ingress or egress rules.
0000000000000000000000000000000000000000;;		EtherType string `json:"ethertype"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The security group ID to associate with this security group rule.
0000000000000000000000000000000000000000;;		SecGroupID string `json:"security_group_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The minimum port number in the range that is matched by the security group
0000000000000000000000000000000000000000;;		// rule. If the protocol is TCP or UDP, this value must be less than or equal
0000000000000000000000000000000000000000;;		// to the value of the PortRangeMax attribute. If the protocol is ICMP, this
0000000000000000000000000000000000000000;;		// value must be an ICMP type.
0000000000000000000000000000000000000000;;		PortRangeMin int `json:"port_range_min"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum port number in the range that is matched by the security group
0000000000000000000000000000000000000000;;		// rule. The PortRangeMin attribute constrains the PortRangeMax attribute. If
0000000000000000000000000000000000000000;;		// the protocol is ICMP, this value must be an ICMP type.
0000000000000000000000000000000000000000;;		PortRangeMax int `json:"port_range_max"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The protocol that is matched by the security group rule. Valid values are
0000000000000000000000000000000000000000;;		// "tcp", "udp", "icmp" or an empty string.
0000000000000000000000000000000000000000;;		Protocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The remote group ID to be associated with this security group rule. You
0000000000000000000000000000000000000000;;		// can specify either RemoteGroupID or RemoteIPPrefix.
0000000000000000000000000000000000000000;;		RemoteGroupID string `json:"remote_group_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The remote IP prefix to be associated with this security group rule. You
0000000000000000000000000000000000000000;;		// can specify either RemoteGroupID or RemoteIPPrefix . This attribute
0000000000000000000000000000000000000000;;		// matches the specified IP prefix as the source IP address of the IP packet.
0000000000000000000000000000000000000000;;		RemoteIPPrefix string `json:"remote_ip_prefix"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The owner of this security group rule.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecGroupRulePage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of security group rules.
0000000000000000000000000000000000000000;;	type SecGroupRulePage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of security group rules has
0000000000000000000000000000000000000000;;	// reached the end of a page and the pager seeks to traverse over a new one. In
0000000000000000000000000000000000000000;;	// order to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r SecGroupRulePage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"security_group_rules_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a SecGroupRulePage struct is empty.
0000000000000000000000000000000000000000;;	func (r SecGroupRulePage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractRules(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractRules accepts a Page struct, specifically a SecGroupRulePage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of SecGroupRule structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractRules(r pagination.Page) ([]SecGroupRule, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			SecGroupRules []SecGroupRule `json:"security_group_rules"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(SecGroupRulePage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.SecGroupRules, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a security rule.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*SecGroupRule, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			SecGroupRule *SecGroupRule `json:"security_group_rule"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.SecGroupRule, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
