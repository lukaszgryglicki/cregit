0000000000000000000000000000000000000000;;	package pools
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pool represents a logical set of devices, such as web servers, that you
0000000000000000000000000000000000000000;;	// group together to receive and process traffic. The load balancing function
0000000000000000000000000000000000000000;;	// chooses a member of the pool according to the configured load balancing
0000000000000000000000000000000000000000;;	// method to handle the new requests or connections received on the VIP address.
0000000000000000000000000000000000000000;;	// There is only one pool per virtual IP.
0000000000000000000000000000000000000000;;	type Pool struct {
0000000000000000000000000000000000000000;;		// The status of the pool. Indicates whether the pool is operational.
0000000000000000000000000000000000000000;;		Status string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The load-balancer algorithm, which is round-robin, least-connections, and
0000000000000000000000000000000000000000;;		// so on. This value, which must be supported, is dependent on the provider.
0000000000000000000000000000000000000000;;		// Round-robin must be supported.
0000000000000000000000000000000000000000;;		LBMethod string `json:"lb_method"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The protocol of the pool, which is TCP, HTTP, or HTTPS.
0000000000000000000000000000000000000000;;		Protocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description for the pool.
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of associated monitors which check the health of the pool members.
0000000000000000000000000000000000000000;;		MonitorIDs []string `json:"health_monitors"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The network on which the members of the pool will be located. Only members
0000000000000000000000000000000000000000;;		// that are on this network can be added to the pool.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the pool. Only an administrative user can specify a tenant ID
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The administrative state of the pool, which is up (true) or down (false).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pool name. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of member IDs that belong to the pool.
0000000000000000000000000000000000000000;;		MemberIDs []string `json:"members"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique ID for the pool.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual IP associated with this pool
0000000000000000000000000000000000000000;;		VIPID string `json:"vip_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The provider
0000000000000000000000000000000000000000;;		Provider string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PoolPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of pools.
0000000000000000000000000000000000000000;;	type PoolPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of pools has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r PoolPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"pools_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a PoolPage struct is empty.
0000000000000000000000000000000000000000;;	func (r PoolPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractPools(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractPools accepts a Page struct, specifically a RouterPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Router structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractPools(r pagination.Page) ([]Pool, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Pools []Pool `json:"pools"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(PoolPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Pools, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Pool, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Pool *Pool `json:"pool"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Pool, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateResult represents the result of an association operation.
0000000000000000000000000000000000000000;;	type AssociateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
