0000000000000000000000000000000000000000;;	package vips
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		ID              string `q:"id"`
0000000000000000000000000000000000000000;;		Name            string `q:"name"`
0000000000000000000000000000000000000000;;		AdminStateUp    *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		Status          string `q:"status"`
0000000000000000000000000000000000000000;;		TenantID        string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		SubnetID        string `q:"subnet_id"`
0000000000000000000000000000000000000000;;		Address         string `q:"address"`
0000000000000000000000000000000000000000;;		PortID          string `q:"port_id"`
0000000000000000000000000000000000000000;;		Protocol        string `q:"protocol"`
0000000000000000000000000000000000000000;;		ProtocolPort    int    `q:"protocol_port"`
0000000000000000000000000000000000000000;;		ConnectionLimit int    `q:"connection_limit"`
0000000000000000000000000000000000000000;;		Limit           int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker          string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey         string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir         string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// routers. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those routers that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return VIPPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is what types must satisfy to be used as Create
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVIPCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new virtual IP.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Human-readable name for the VIP. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name" required:"true"`
0000000000000000000000000000000000000000;;		// The network on which to allocate the VIP's address. A tenant can
0000000000000000000000000000000000000000;;		// only create VIPs on networks authorized by policy (e.g. networks that
0000000000000000000000000000000000000000;;		// belong to them or networks that are shared).
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id" required:"true"`
0000000000000000000000000000000000000000;;		// The protocol - can either be TCP, HTTP or HTTPS.
0000000000000000000000000000000000000000;;		Protocol string `json:"protocol" required:"true"`
0000000000000000000000000000000000000000;;		// The port on which to listen for client traffic.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port" required:"true"`
0000000000000000000000000000000000000000;;		// The ID of the pool with which the VIP is associated.
0000000000000000000000000000000000000000;;		PoolID string `json:"pool_id" required:"true"`
0000000000000000000000000000000000000000;;		// Required for admins. Indicates the owner of the VIP.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		// The IP address of the VIP.
0000000000000000000000000000000000000000;;		Address string `json:"address,omitempty"`
0000000000000000000000000000000000000000;;		// Human-readable description for the VIP.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// Omit this field to prevent session persistence.
0000000000000000000000000000000000000000;;		Persistence *SessionPersistence `json:"session_persistence,omitempty"`
0000000000000000000000000000000000000000;;		// The maximum number of connections allowed for the VIP.
0000000000000000000000000000000000000000;;		ConnLimit *int `json:"connection_limit,omitempty"`
0000000000000000000000000000000000000000;;		// The administrative state of the VIP. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVIPCreateMap allows CreateOpts to satisfy the CreateOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToVIPCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "vip")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create is an operation which provisions a new virtual IP based on the
0000000000000000000000000000000000000000;;	// configuration defined in the CreateOpts struct. Once the request is
0000000000000000000000000000000000000000;;	// validated and progress has started on the provisioning process, a
0000000000000000000000000000000000000000;;	// CreateResult will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please note that the PoolID should refer to a pool that is not already
0000000000000000000000000000000000000000;;	// associated with another vip. If the pool is already used by another vip,
0000000000000000000000000000000000000000;;	// then the operation will fail with a 409 Conflict error will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Users with an admin role can create VIPs on behalf of other tenants by
0000000000000000000000000000000000000000;;	// specifying a TenantID attribute different than their own.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOpts) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToVIPCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular virtual IP based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is what types must satisfy to be used as Update
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVIPUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains all the values needed to update an existing virtual IP.
0000000000000000000000000000000000000000;;	// Attributes not listed here but appear in CreateOpts are immutable and cannot
0000000000000000000000000000000000000000;;	// be updated.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// Human-readable name for the VIP. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// The ID of the pool with which the VIP is associated.
0000000000000000000000000000000000000000;;		PoolID *string `json:"pool_id,omitempty"`
0000000000000000000000000000000000000000;;		// Human-readable description for the VIP.
0000000000000000000000000000000000000000;;		Description *string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// Omit this field to prevent session persistence.
0000000000000000000000000000000000000000;;		Persistence *SessionPersistence `json:"session_persistence,omitempty"`
0000000000000000000000000000000000000000;;		// The maximum number of connections allowed for the VIP.
0000000000000000000000000000000000000000;;		ConnLimit *int `json:"connection_limit,omitempty"`
0000000000000000000000000000000000000000;;		// The administrative state of the VIP. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVIPUpdateMap allows UpdateOpts to satisfy the UpdateOptsBuilder interface
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToVIPUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "vip")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update is an operation which modifies the attributes of the specified VIP.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToVIPUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular virtual IP based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
