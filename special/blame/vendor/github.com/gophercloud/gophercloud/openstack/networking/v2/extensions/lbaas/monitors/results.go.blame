0000000000000000000000000000000000000000;;	package monitors
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Monitor represents a load balancer health monitor. A health monitor is used
0000000000000000000000000000000000000000;;	// to determine whether or not back-end members of the VIP's pool are usable
0000000000000000000000000000000000000000;;	// for processing a request. A pool can have several health monitors associated
0000000000000000000000000000000000000000;;	// with it. There are different types of health monitors supported:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// PING: used to ping the members using ICMP.
0000000000000000000000000000000000000000;;	// TCP: used to connect to the members using TCP.
0000000000000000000000000000000000000000;;	// HTTP: used to send an HTTP request to the member.
0000000000000000000000000000000000000000;;	// HTTPS: used to send a secure HTTP request to the member.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When a pool has several monitors associated with it, each member of the pool
0000000000000000000000000000000000000000;;	// is monitored by all these monitors. If any monitor declares the member as
0000000000000000000000000000000000000000;;	// unhealthy, then the member status is changed to INACTIVE and the member
0000000000000000000000000000000000000000;;	// won't participate in its pool's load balancing. In other words, ALL monitors
0000000000000000000000000000000000000000;;	// must declare the member to be healthy for it to stay ACTIVE.
0000000000000000000000000000000000000000;;	type Monitor struct {
0000000000000000000000000000000000000000;;		// The unique ID for the VIP.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Monitor name. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the VIP. Only an administrative user can specify a tenant ID
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of probe sent by the load balancer to verify the member state,
0000000000000000000000000000000000000000;;		// which is PING, TCP, HTTP, or HTTPS.
0000000000000000000000000000000000000000;;		Type string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time, in seconds, between sending probes to members.
0000000000000000000000000000000000000000;;		Delay int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of seconds for a monitor to wait for a connection to be
0000000000000000000000000000000000000000;;		// established before it times out. This value must be less than the delay value.
0000000000000000000000000000000000000000;;		Timeout int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of allowed connection failures before changing the status of the
0000000000000000000000000000000000000000;;		// member to INACTIVE. A valid value is from 1 to 10.
0000000000000000000000000000000000000000;;		MaxRetries int `json:"max_retries"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The HTTP method that the monitor uses for requests.
0000000000000000000000000000000000000000;;		HTTPMethod string `json:"http_method"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The HTTP path of the request sent by the monitor to test the health of a
0000000000000000000000000000000000000000;;		// member. Must be a string beginning with a forward slash (/).
0000000000000000000000000000000000000000;;		URLPath string `json:"url_path"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expected HTTP codes for a passing HTTP(S) monitor.
0000000000000000000000000000000000000000;;		ExpectedCodes string `json:"expected_codes"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The administrative state of the health monitor, which is up (true) or down (false).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the health monitor. Indicates whether the health monitor is
0000000000000000000000000000000000000000;;		// operational.
0000000000000000000000000000000000000000;;		Status string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitorPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of health monitors.
0000000000000000000000000000000000000000;;	type MonitorPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of monitors has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r MonitorPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"health_monitors_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a PoolPage struct is empty.
0000000000000000000000000000000000000000;;	func (r MonitorPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractMonitors(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractMonitors accepts a Page struct, specifically a MonitorPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Monitor structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractMonitors(r pagination.Page) ([]Monitor, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Monitors []Monitor `json:"health_monitors"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(MonitorPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Monitors, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a monitor.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Monitor, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Monitor *Monitor `json:"health_monitor"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Monitor, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
