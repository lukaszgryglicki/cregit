0000000000000000000000000000000000000000;;	package pools
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToPoolListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the Pool attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular Pool attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		LBMethod       string `q:"lb_algorithm"`
0000000000000000000000000000000000000000;;		Protocol       string `q:"protocol"`
0000000000000000000000000000000000000000;;		TenantID       string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		AdminStateUp   *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		Name           string `q:"name"`
0000000000000000000000000000000000000000;;		ID             string `q:"id"`
0000000000000000000000000000000000000000;;		LoadbalancerID string `q:"loadbalancer_id"`
0000000000000000000000000000000000000000;;		ListenerID     string `q:"listener_id"`
0000000000000000000000000000000000000000;;		Limit          int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker         string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey        string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir        string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToPoolListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToPoolListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// pools. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those pools that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := rootURL(c)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToPoolListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return PoolPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LBMethod string
0000000000000000000000000000000000000000;;	type Protocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Supported attributes for create/update operations.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LBMethodRoundRobin       LBMethod = "ROUND_ROBIN"
0000000000000000000000000000000000000000;;		LBMethodLeastConnections LBMethod = "LEAST_CONNECTIONS"
0000000000000000000000000000000000000000;;		LBMethodSourceIp         LBMethod = "SOURCE_IP"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProtocolTCP   Protocol = "TCP"
0000000000000000000000000000000000000000;;		ProtocolHTTP  Protocol = "HTTP"
0000000000000000000000000000000000000000;;		ProtocolHTTPS Protocol = "HTTPS"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Create operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToPoolCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts is the common options struct used in this package's Create
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// The algorithm used to distribute load between the members of the pool. The
0000000000000000000000000000000000000000;;		// current specification supports LBMethodRoundRobin, LBMethodLeastConnections
0000000000000000000000000000000000000000;;		// and LBMethodSourceIp as valid values for this attribute.
0000000000000000000000000000000000000000;;		LBMethod LBMethod `json:"lb_algorithm" required:"true"`
0000000000000000000000000000000000000000;;		// The protocol used by the pool members, you can use either
0000000000000000000000000000000000000000;;		// ProtocolTCP, ProtocolHTTP, or ProtocolHTTPS.
0000000000000000000000000000000000000000;;		Protocol Protocol `json:"protocol" required:"true"`
0000000000000000000000000000000000000000;;		// The Loadbalancer on which the members of the pool will be associated with.
0000000000000000000000000000000000000000;;		// Note:  one of LoadbalancerID or ListenerID must be provided.
0000000000000000000000000000000000000000;;		LoadbalancerID string `json:"loadbalancer_id,omitempty" xor:"ListenerID"`
0000000000000000000000000000000000000000;;		// The Listener on which the members of the pool will be associated with.
0000000000000000000000000000000000000000;;		// Note:  one of LoadbalancerID or ListenerID must be provided.
0000000000000000000000000000000000000000;;		ListenerID string `json:"listener_id,omitempty" xor:"LoadbalancerID"`
0000000000000000000000000000000000000000;;		// Only required if the caller has an admin role and wants to create a pool
0000000000000000000000000000000000000000;;		// for another tenant.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		// Name of the pool.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Human-readable description for the pool.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// Omit this field to prevent session persistence.
0000000000000000000000000000000000000000;;		Persistence *SessionPersistence `json:"session_persistence,omitempty"`
0000000000000000000000000000000000000000;;		// The administrative state of the Pool. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToPoolCreateMap casts a CreateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToPoolCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "pool")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create accepts a CreateOpts struct and uses the values to create a new
0000000000000000000000000000000000000000;;	// load balancer pool.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToPoolCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular pool based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Update operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToPoolUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts is the common options struct used in this package's Update
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// Name of the pool.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Human-readable description for the pool.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// The algorithm used to distribute load between the members of the pool. The
0000000000000000000000000000000000000000;;		// current specification supports LBMethodRoundRobin, LBMethodLeastConnections
0000000000000000000000000000000000000000;;		// and LBMethodSourceIp as valid values for this attribute.
0000000000000000000000000000000000000000;;		LBMethod LBMethod `json:"lb_algorithm,omitempty"`
0000000000000000000000000000000000000000;;		// The administrative state of the Pool. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToPoolUpdateMap casts a UpdateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToPoolUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "pool")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update allows pools to be updated.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToPoolUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular pool based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMemberOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// ListMembers request.
0000000000000000000000000000000000000000;;	type ListMembersOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToMembersListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMembersOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the Member attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular Member attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListMembersOpts struct {
0000000000000000000000000000000000000000;;		Name         string `q:"name"`
0000000000000000000000000000000000000000;;		Weight       int    `q:"weight"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		TenantID     string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		Address      string `q:"address"`
0000000000000000000000000000000000000000;;		ProtocolPort int    `q:"protocol_port"`
0000000000000000000000000000000000000000;;		ID           string `q:"id"`
0000000000000000000000000000000000000000;;		Limit        int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker       string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey      string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir      string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToMemberListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListMembersOpts) ToMembersListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMembers returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// members. It accepts a ListMembersOptsBuilder, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those members that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func ListMembers(c *gophercloud.ServiceClient, poolID string, opts ListMembersOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := memberRootURL(c, poolID)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToMembersListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return MemberPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateMemberOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the CreateMember operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type CreateMemberOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToMemberCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateMemberOpts is the common options struct used in this package's CreateMember
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type CreateMemberOpts struct {
0000000000000000000000000000000000000000;;		// Required. The IP address of the member to receive traffic from the load balancer.
0000000000000000000000000000000000000000;;		Address string `json:"address" required:"true"`
0000000000000000000000000000000000000000;;		// Required. The port on which to listen for client traffic.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port" required:"true"`
0000000000000000000000000000000000000000;;		// Optional. Name of the Member.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Only required if the caller has an admin role and wants to create a Member
0000000000000000000000000000000000000000;;		// for another tenant.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. A positive integer value that indicates the relative portion of
0000000000000000000000000000000000000000;;		// traffic that this member should receive from the pool. For example, a
0000000000000000000000000000000000000000;;		// member with a weight of 10 receives five times as much traffic as a member
0000000000000000000000000000000000000000;;		// with a weight of 2.
0000000000000000000000000000000000000000;;		Weight int `json:"weight,omitempty"`
0000000000000000000000000000000000000000;;		// Optional.  If you omit this parameter, LBaaS uses the vip_subnet_id
0000000000000000000000000000000000000000;;		// parameter value for the subnet UUID.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The administrative state of the Pool. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToMemberCreateMap casts a CreateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts CreateMemberOpts) ToMemberCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "member")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateMember will create and associate a Member with a particular Pool.
0000000000000000000000000000000000000000;;	func CreateMember(c *gophercloud.ServiceClient, poolID string, opts CreateMemberOpts) (r CreateMemberResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToMemberCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(memberRootURL(c, poolID), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMember retrieves a particular Pool Member based on its unique ID.
0000000000000000000000000000000000000000;;	func GetMember(c *gophercloud.ServiceClient, poolID string, memberID string) (r GetMemberResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(memberResourceURL(c, poolID, memberID), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemberUpdateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Update operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type UpdateMemberOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToMemberUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMemberOpts is the common options struct used in this package's Update
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type UpdateMemberOpts struct {
0000000000000000000000000000000000000000;;		// Optional. Name of the Member.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. A positive integer value that indicates the relative portion of
0000000000000000000000000000000000000000;;		// traffic that this member should receive from the pool. For example, a
0000000000000000000000000000000000000000;;		// member with a weight of 10 receives five times as much traffic as a member
0000000000000000000000000000000000000000;;		// with a weight of 2.
0000000000000000000000000000000000000000;;		Weight int `json:"weight,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The administrative state of the Pool. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToMemberUpdateMap casts a UpdateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts UpdateMemberOpts) ToMemberUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "member")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update allows Member to be updated.
0000000000000000000000000000000000000000;;	func UpdateMember(c *gophercloud.ServiceClient, poolID string, memberID string, opts UpdateMemberOptsBuilder) (r UpdateMemberResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToMemberUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(memberResourceURL(c, poolID, memberID), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 201, 202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateMember will remove and disassociate a Member from a particular Pool.
0000000000000000000000000000000000000000;;	func DeleteMember(c *gophercloud.ServiceClient, poolID string, memberID string) (r DeleteMemberResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(memberResourceURL(c, poolID, memberID), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
