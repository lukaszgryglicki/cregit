0000000000000000000000000000000000000000;;	package loadbalancers
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/lbaas_v2/listeners"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancer is the primary load balancing configuration object that specifies
0000000000000000000000000000000000000000;;	// the virtual IP address on which client traffic is received, as well
0000000000000000000000000000000000000000;;	// as other details such as the load balancing method to be use, protocol, etc.
0000000000000000000000000000000000000000;;	type LoadBalancer struct {
0000000000000000000000000000000000000000;;		// Human-readable description for the Loadbalancer.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;		// The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;		// Owner of the LoadBalancer. Only an admin user can specify a tenant ID other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;		// The provisioning status of the LoadBalancer. This value is ACTIVE, PENDING_CREATE or ERROR.
0000000000000000000000000000000000000000;;		ProvisioningStatus string `json:"provisioning_status"`
0000000000000000000000000000000000000000;;		// The IP address of the Loadbalancer.
0000000000000000000000000000000000000000;;		VipAddress string `json:"vip_address"`
0000000000000000000000000000000000000000;;		// The UUID of the port associated with the IP address.
0000000000000000000000000000000000000000;;		VipPortID string `json:"vip_port_id"`
0000000000000000000000000000000000000000;;		// The UUID of the subnet on which to allocate the virtual IP for the Loadbalancer address.
0000000000000000000000000000000000000000;;		VipSubnetID string `json:"vip_subnet_id"`
0000000000000000000000000000000000000000;;		// The unique ID for the LoadBalancer.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;		// The operating status of the LoadBalancer. This value is ONLINE or OFFLINE.
0000000000000000000000000000000000000000;;		OperatingStatus string `json:"operating_status"`
0000000000000000000000000000000000000000;;		// Human-readable name for the LoadBalancer. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// The UUID of a flavor if set.
0000000000000000000000000000000000000000;;		Flavor string `json:"flavor"`
0000000000000000000000000000000000000000;;		// The name of the provider.
0000000000000000000000000000000000000000;;		Provider  string               `json:"provider"`
0000000000000000000000000000000000000000;;		Listeners []listeners.Listener `json:"listeners"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatusTree struct {
0000000000000000000000000000000000000000;;		Loadbalancer *LoadBalancer `json:"loadbalancer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancerPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of routers.
0000000000000000000000000000000000000000;;	type LoadBalancerPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of routers has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r LoadBalancerPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"loadbalancers_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a LoadBalancerPage struct is empty.
0000000000000000000000000000000000000000;;	func (p LoadBalancerPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractLoadBalancers(p)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractLoadBalancers accepts a Page struct, specifically a LoadbalancerPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of LoadBalancer structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractLoadBalancers(r pagination.Page) ([]LoadBalancer, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			LoadBalancers []LoadBalancer `json:"loadbalancers"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(LoadBalancerPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.LoadBalancers, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*LoadBalancer, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			LoadBalancer *LoadBalancer `json:"loadbalancer"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.LoadBalancer, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetStatusesResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a Loadbalancer.
0000000000000000000000000000000000000000;;	func (r GetStatusesResult) Extract() (*StatusTree, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Statuses *StatusTree `json:"statuses"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Statuses, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
