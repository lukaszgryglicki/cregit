0000000000000000000000000000000000000000;;	package routers
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GatewayInfo represents the information of an external gateway for any
0000000000000000000000000000000000000000;;	// particular network router.
0000000000000000000000000000000000000000;;	type GatewayInfo struct {
0000000000000000000000000000000000000000;;		NetworkID string `json:"network_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Route is a possible route in a router.
0000000000000000000000000000000000000000;;	type Route struct {
0000000000000000000000000000000000000000;;		NextHop         string `json:"nexthop"`
0000000000000000000000000000000000000000;;		DestinationCIDR string `json:"destination"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Router represents a Neutron router. A router is a logical entity that
0000000000000000000000000000000000000000;;	// forwards packets across internal subnets and NATs (network address
0000000000000000000000000000000000000000;;	// translation) them on external networks through an appropriate gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A router has an interface for each subnet with which it is associated. By
0000000000000000000000000000000000000000;;	// default, the IP address of such interface is the subnet's gateway IP. Also,
0000000000000000000000000000000000000000;;	// whenever a router is associated with a subnet, a port for that router
0000000000000000000000000000000000000000;;	// interface is added to the subnet's network.
0000000000000000000000000000000000000000;;	type Router struct {
0000000000000000000000000000000000000000;;		// Indicates whether or not a router is currently operational.
0000000000000000000000000000000000000000;;		Status string `json:"status"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information on external gateway for the router.
0000000000000000000000000000000000000000;;		GatewayInfo GatewayInfo `json:"external_gateway_info"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Administrative state of the router.
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Whether router is disitrubted or not..
0000000000000000000000000000000000000000;;		Distributed bool `json:"distributed"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Human readable name for the router. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique identifier for the router.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the router. Only admin users can specify a tenant identifier
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Routes []Route `json:"routes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouterPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of routers.
0000000000000000000000000000000000000000;;	type RouterPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of routers has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r RouterPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"routers_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a RouterPage struct is empty.
0000000000000000000000000000000000000000;;	func (r RouterPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractRouters(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractRouters accepts a Page struct, specifically a RouterPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Router structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractRouters(r pagination.Page) ([]Router, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Routers []Router `json:"routers"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(RouterPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Routers, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Router, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Router *Router `json:"router"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Router, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceInfo represents information about a particular router interface. As
0000000000000000000000000000000000000000;;	// mentioned above, in order for a router to forward to a subnet, it needs an
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type InterfaceInfo struct {
0000000000000000000000000000000000000000;;		// The ID of the subnet which this interface is associated with.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the port that is a part of the subnet.
0000000000000000000000000000000000000000;;		PortID string `json:"port_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The UUID of the interface.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the interface.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceResult represents the result of interface operations, such as
0000000000000000000000000000000000000000;;	// AddInterface() and RemoveInterface().
0000000000000000000000000000000000000000;;	type InterfaceResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts an information struct.
0000000000000000000000000000000000000000;;	func (r InterfaceResult) Extract() (*InterfaceInfo, error) {
0000000000000000000000000000000000000000;;		var s InterfaceInfo
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return &s, err
0000000000000000000000000000000000000000;;	}
