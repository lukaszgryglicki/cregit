0000000000000000000000000000000000000000;;	package listeners
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/lbaas_v2/pools"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerID struct {
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Listener is the primary load balancing configuration object that specifies
0000000000000000000000000000000000000000;;	// the loadbalancer and port on which client traffic is received, as well
0000000000000000000000000000000000000000;;	// as other details such as the load balancing method to be use, protocol, etc.
0000000000000000000000000000000000000000;;	type Listener struct {
0000000000000000000000000000000000000000;;		// The unique ID for the Listener.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;		// Owner of the Listener. Only an admin user can specify a tenant ID other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;		// Human-readable name for the Listener. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Human-readable description for the Listener.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;		// The protocol to loadbalance. A valid value is TCP, HTTP, or HTTPS.
0000000000000000000000000000000000000000;;		Protocol string `json:"protocol"`
0000000000000000000000000000000000000000;;		// The port on which to listen to client traffic that is associated with the
0000000000000000000000000000000000000000;;		// Loadbalancer. A valid value is from 0 to 65535.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port"`
0000000000000000000000000000000000000000;;		// The UUID of default pool. Must have compatible protocol with listener.
0000000000000000000000000000000000000000;;		DefaultPoolID string `json:"default_pool_id"`
0000000000000000000000000000000000000000;;		// A list of load balancer IDs.
0000000000000000000000000000000000000000;;		Loadbalancers []LoadBalancerID `json:"loadbalancers"`
0000000000000000000000000000000000000000;;		// The maximum number of connections allowed for the Loadbalancer. Default is -1,
0000000000000000000000000000000000000000;;		// meaning no limit.
0000000000000000000000000000000000000000;;		ConnLimit int `json:"connection_limit"`
0000000000000000000000000000000000000000;;		// The list of references to TLS secrets.
0000000000000000000000000000000000000000;;		SniContainerRefs []string `json:"sni_container_refs"`
0000000000000000000000000000000000000000;;		// Optional. A reference to a container of TLS secrets.
0000000000000000000000000000000000000000;;		DefaultTlsContainerRef string `json:"default_tls_container_ref"`
0000000000000000000000000000000000000000;;		// The administrative state of the Listener. A valid value is true (UP) or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp bool         `json:"admin_state_up"`
0000000000000000000000000000000000000000;;		Pools        []pools.Pool `json:"pools"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListenerPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of routers.
0000000000000000000000000000000000000000;;	type ListenerPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of routers has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r ListenerPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"listeners_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a RouterPage struct is empty.
0000000000000000000000000000000000000000;;	func (r ListenerPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractListeners(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractListeners accepts a Page struct, specifically a ListenerPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Listener structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractListeners(r pagination.Page) ([]Listener, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Listeners []Listener `json:"listeners"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(ListenerPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Listeners, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Listener, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Listener *Listener `json:"listener"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Listener, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
