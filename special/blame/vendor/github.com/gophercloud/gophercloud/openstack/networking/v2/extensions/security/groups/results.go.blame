0000000000000000000000000000000000000000;;	package groups
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/security/rules"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecGroup represents a container for security group rules.
0000000000000000000000000000000000000000;;	type SecGroup struct {
0000000000000000000000000000000000000000;;		// The UUID for the security group.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Human-readable name for the security group. Might not be unique. Cannot be
0000000000000000000000000000000000000000;;		// named "default" as that is automatically created for a tenant.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The security group description.
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A slice of security group rules that dictate the permitted behaviour for
0000000000000000000000000000000000000000;;		// traffic entering and leaving the group.
0000000000000000000000000000000000000000;;		Rules []rules.SecGroupRule `json:"security_group_rules"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the security group. Only admin users can specify a TenantID
0000000000000000000000000000000000000000;;		// other than their own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecGroupPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of security groups.
0000000000000000000000000000000000000000;;	type SecGroupPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of security groups has
0000000000000000000000000000000000000000;;	// reached the end of a page and the pager seeks to traverse over a new one. In
0000000000000000000000000000000000000000;;	// order to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r SecGroupPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"security_groups_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a SecGroupPage struct is empty.
0000000000000000000000000000000000000000;;	func (r SecGroupPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractGroups(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractGroups accepts a Page struct, specifically a SecGroupPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of SecGroup structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractGroups(r pagination.Page) ([]SecGroup, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			SecGroups []SecGroup `json:"security_groups"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(SecGroupPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.SecGroups, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a security group.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*SecGroup, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			SecGroup *SecGroup `json:"security_group"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.SecGroup, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
