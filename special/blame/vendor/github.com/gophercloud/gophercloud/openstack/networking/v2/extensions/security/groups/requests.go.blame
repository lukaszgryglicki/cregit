0000000000000000000000000000000000000000;;	package groups
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		ID       string `q:"id"`
0000000000000000000000000000000000000000;;		Name     string `q:"name"`
0000000000000000000000000000000000000000;;		TenantID string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		Limit    int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker   string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey  string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir  string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// security groups. It accepts a ListOpts struct, which allows you to filter
0000000000000000000000000000000000000000;;	// and sort the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return SecGroupPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToSecGroupCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new security group.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Required. Human-readable name for the Security Group. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name" required:"true"`
0000000000000000000000000000000000000000;;		// Required for admins. Indicates the owner of the Security Group.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. Describes the security group.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToSecGroupCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "security_group")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create is an operation which provisions a new security group with default
0000000000000000000000000000000000000000;;	// security group rules for the IPv4 and IPv6 ether types.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToSecGroupCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToSecGroupUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains all the values needed to update an existing security group.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// Human-readable name for the Security Group. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. Describes the security group.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToSecGroupUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "security_group")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update is an operation which updates an existing security group.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToSecGroupUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular security group based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular security group based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convenience function that returns a security group's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		pages, err := List(client, ListOpts{}).AllPages()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		all, err := ExtractGroups(pages)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, s := range all {
0000000000000000000000000000000000000000;;			if s.Name == name {
0000000000000000000000000000000000000000;;				count++
0000000000000000000000000000000000000000;;				id = s.ID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch count {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrResourceNotFound{Name: name, ResourceType: "security group"}
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrMultipleResourcesFound{Name: name, Count: count, ResourceType: "security group"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
