0000000000000000000000000000000000000000;;	package members
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Member represents the application running on a backend server.
0000000000000000000000000000000000000000;;	type Member struct {
0000000000000000000000000000000000000000;;		// The status of the member. Indicates whether the member is operational.
0000000000000000000000000000000000000000;;		Status string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weight of member.
0000000000000000000000000000000000000000;;		Weight int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The administrative state of the member, which is up (true) or down (false).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the member. Only an administrative user can specify a tenant ID
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The pool to which the member belongs.
0000000000000000000000000000000000000000;;		PoolID string `json:"pool_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP address of the member.
0000000000000000000000000000000000000000;;		Address string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The port on which the application is hosted.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique ID for the member.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemberPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of pool members.
0000000000000000000000000000000000000000;;	type MemberPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of members has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r MemberPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"members_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a MemberPage struct is empty.
0000000000000000000000000000000000000000;;	func (r MemberPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractMembers(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractMembers accepts a Page struct, specifically a MemberPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Member structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractMembers(r pagination.Page) ([]Member, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Members []Member `json:"members"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(MemberPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Members, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Member, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Member *Member `json:"member"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Member, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
