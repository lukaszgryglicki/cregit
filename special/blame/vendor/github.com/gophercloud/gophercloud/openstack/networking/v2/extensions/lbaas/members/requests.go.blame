0000000000000000000000000000000000000000;;	package members
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		Status       string `q:"status"`
0000000000000000000000000000000000000000;;		Weight       int    `q:"weight"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		TenantID     string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		PoolID       string `q:"pool_id"`
0000000000000000000000000000000000000000;;		Address      string `q:"address"`
0000000000000000000000000000000000000000;;		ProtocolPort int    `q:"protocol_port"`
0000000000000000000000000000000000000000;;		ID           string `q:"id"`
0000000000000000000000000000000000000000;;		Limit        int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker       string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey      string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir      string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// pools. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those pools that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return MemberPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLBMemberCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new pool member.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// The IP address of the member.
0000000000000000000000000000000000000000;;		Address string `json:"address" required:"true"`
0000000000000000000000000000000000000000;;		// The port on which the application is hosted.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port" required:"true"`
0000000000000000000000000000000000000000;;		// The pool to which this member will belong.
0000000000000000000000000000000000000000;;		PoolID string `json:"pool_id" required:"true"`
0000000000000000000000000000000000000000;;		// Only required if the caller has an admin role and wants to create a pool
0000000000000000000000000000000000000000;;		// for another tenant.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToLBMemberCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "member")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create accepts a CreateOpts struct and uses the values to create a new
0000000000000000000000000000000000000000;;	// load balancer pool member.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLBMemberCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular pool member based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLBMemberUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains the values used when updating a pool member.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// The administrative state of the member, which is up (true) or down (false).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToLBMemberUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "member")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update allows members to be updated.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLBMemberUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 201, 202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular member based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
