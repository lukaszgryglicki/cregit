0000000000000000000000000000000000000000;;	package floatingips
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		ID                string `q:"id"`
0000000000000000000000000000000000000000;;		FloatingNetworkID string `q:"floating_network_id"`
0000000000000000000000000000000000000000;;		PortID            string `q:"port_id"`
0000000000000000000000000000000000000000;;		FixedIP           string `q:"fixed_ip_address"`
0000000000000000000000000000000000000000;;		FloatingIP        string `q:"floating_ip_address"`
0000000000000000000000000000000000000000;;		TenantID          string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		Limit             int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker            string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey           string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir           string `q:"sort_dir"`
0000000000000000000000000000000000000000;;		RouterID          string `q:"router_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// floating IP resources. It accepts a ListOpts struct, which allows you to
0000000000000000000000000000000000000000;;	// filter and sort the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return FloatingIPPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is the interface type must satisfy to be used as Create
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToFloatingIPCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new floating IP
0000000000000000000000000000000000000000;;	// resource. The only required fields are FloatingNetworkID and PortID which
0000000000000000000000000000000000000000;;	// refer to the external network and internal port respectively.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		FloatingNetworkID string `json:"floating_network_id" required:"true"`
0000000000000000000000000000000000000000;;		FloatingIP        string `json:"floating_ip_address,omitempty"`
0000000000000000000000000000000000000000;;		PortID            string `json:"port_id,omitempty"`
0000000000000000000000000000000000000000;;		FixedIP           string `json:"fixed_ip_address,omitempty"`
0000000000000000000000000000000000000000;;		TenantID          string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToFloatingIPCreateMap allows CreateOpts to satisfy the CreateOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToFloatingIPCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "floatingip")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create accepts a CreateOpts struct and uses the values provided to create a
0000000000000000000000000000000000000000;;	// new floating IP resource. You can create floating IPs on external networks
0000000000000000000000000000000000000000;;	// only. If you provide a FloatingNetworkID which refers to a network that is
0000000000000000000000000000000000000000;;	// not external (i.e. its `router:external' attribute is False), the operation
0000000000000000000000000000000000000000;;	// will fail and return a 400 error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you do not specify a FloatingIP address value, the operation will
0000000000000000000000000000000000000000;;	// automatically allocate an available address for the new resource. If you do
0000000000000000000000000000000000000000;;	// choose to specify one, it must fall within the subnet range for the external
0000000000000000000000000000000000000000;;	// network - otherwise the operation returns a 400 error. If the FloatingIP
0000000000000000000000000000000000000000;;	// address is already in use, the operation returns a 409 error code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can associate the new resource with an internal port by using the PortID
0000000000000000000000000000000000000000;;	// field. If you specify a PortID that is not valid, the operation will fail and
0000000000000000000000000000000000000000;;	// return 404 error code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You must also configure an IP address for the port associated with the PortID
0000000000000000000000000000000000000000;;	// you have provided - this is what the FixedIP refers to: an IP fixed to a port.
0000000000000000000000000000000000000000;;	// Because a port might be associated with multiple IP addresses, you can use
0000000000000000000000000000000000000000;;	// the FixedIP field to associate a particular IP address rather than have the
0000000000000000000000000000000000000000;;	// API assume for you. If you specify an IP address that is not valid, the
0000000000000000000000000000000000000000;;	// operation will fail and return a 400 error code. If the PortID and FixedIP
0000000000000000000000000000000000000000;;	// are already associated with another resource, the operation will fail and
0000000000000000000000000000000000000000;;	// returns a 409 error code.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToFloatingIPCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular floating IP resource based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is the interface type must satisfy to be used as Update
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToFloatingIPUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains the values used when updating a floating IP resource. The
0000000000000000000000000000000000000000;;	// only value that can be updated is which internal port the floating IP is
0000000000000000000000000000000000000000;;	// linked to. To associate the floating IP with a new internal port, provide its
0000000000000000000000000000000000000000;;	// ID. To disassociate the floating IP from all ports, provide an empty string.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		PortID *string `json:"port_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToFloatingIPUpdateMap allows UpdateOpts to satisfy the UpdateOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToFloatingIPUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "floatingip")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update allows floating IP resources to be updated. Currently, the only way to
0000000000000000000000000000000000000000;;	// "update" a floating IP is to associate it with a new internal port, or
0000000000000000000000000000000000000000;;	// disassociated it from all ports. See UpdateOpts for instructions of how to
0000000000000000000000000000000000000000;;	// do this.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToFloatingIPUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular floating IP resource. Please
0000000000000000000000000000000000000000;;	// ensure this is what you want - you can also disassociate the IP from existing
0000000000000000000000000000000000000000;;	// internal ports.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
