0000000000000000000000000000000000000000;;	package pools
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		Status       string `q:"status"`
0000000000000000000000000000000000000000;;		LBMethod     string `q:"lb_method"`
0000000000000000000000000000000000000000;;		Protocol     string `q:"protocol"`
0000000000000000000000000000000000000000;;		SubnetID     string `q:"subnet_id"`
0000000000000000000000000000000000000000;;		TenantID     string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		Name         string `q:"name"`
0000000000000000000000000000000000000000;;		ID           string `q:"id"`
0000000000000000000000000000000000000000;;		VIPID        string `q:"vip_id"`
0000000000000000000000000000000000000000;;		Limit        int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker       string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey      string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir      string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// pools. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those pools that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return PoolPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LBMethod is a type used for possible load balancing methods
0000000000000000000000000000000000000000;;	type LBMethod string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LBProtocol is a type used for possible load balancing protocols
0000000000000000000000000000000000000000;;	type LBProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Supported attributes for create/update operations.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LBMethodRoundRobin       LBMethod = "ROUND_ROBIN"
0000000000000000000000000000000000000000;;		LBMethodLeastConnections LBMethod = "LEAST_CONNECTIONS"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProtocolTCP   LBProtocol = "TCP"
0000000000000000000000000000000000000000;;		ProtocolHTTP  LBProtocol = "HTTP"
0000000000000000000000000000000000000000;;		ProtocolHTTPS LBProtocol = "HTTPS"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is the interface types must satisfy to be used as options
0000000000000000000000000000000000000000;;	// for the Create function
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLBPoolCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new pool.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Name of the pool.
0000000000000000000000000000000000000000;;		Name string `json:"name" required:"true"`
0000000000000000000000000000000000000000;;		// The protocol used by the pool members, you can use either
0000000000000000000000000000000000000000;;		// ProtocolTCP, ProtocolHTTP, or ProtocolHTTPS.
0000000000000000000000000000000000000000;;		Protocol LBProtocol `json:"protocol" required:"true"`
0000000000000000000000000000000000000000;;		// Only required if the caller has an admin role and wants to create a pool
0000000000000000000000000000000000000000;;		// for another tenant.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		// The network on which the members of the pool will be located. Only members
0000000000000000000000000000000000000000;;		// that are on this network can be added to the pool.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id,omitempty"`
0000000000000000000000000000000000000000;;		// The algorithm used to distribute load between the members of the pool. The
0000000000000000000000000000000000000000;;		// current specification supports LBMethodRoundRobin and
0000000000000000000000000000000000000000;;		// LBMethodLeastConnections as valid values for this attribute.
0000000000000000000000000000000000000000;;		LBMethod LBMethod `json:"lb_method" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The provider of the pool
0000000000000000000000000000000000000000;;		Provider string `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLBPoolCreateMap allows CreateOpts to satisfy the CreateOptsBuilder interface
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToLBPoolCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "pool")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create accepts a CreateOptsBuilder and uses the values to create a new
0000000000000000000000000000000000000000;;	// load balancer pool.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLBPoolCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular pool based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is the interface types must satisfy to be used as options
0000000000000000000000000000000000000000;;	// for the Update function
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLBPoolUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains the values used when updating a pool.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// Name of the pool.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// The algorithm used to distribute load between the members of the pool. The
0000000000000000000000000000000000000000;;		// current specification supports LBMethodRoundRobin and
0000000000000000000000000000000000000000;;		// LBMethodLeastConnections as valid values for this attribute.
0000000000000000000000000000000000000000;;		LBMethod LBMethod `json:"lb_method,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLBPoolUpdateMap allows UpdateOpts to satisfy the UpdateOptsBuilder interface
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToLBPoolUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "pool")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update allows pools to be updated.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLBPoolUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular pool based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateMonitor will associate a health monitor with a particular pool.
0000000000000000000000000000000000000000;;	// Once associated, the health monitor will start monitoring the members of the
0000000000000000000000000000000000000000;;	// pool and will deactivate these members if they are deemed unhealthy. A
0000000000000000000000000000000000000000;;	// member can be deactivated (status set to INACTIVE) if any of health monitors
0000000000000000000000000000000000000000;;	// finds it unhealthy.
0000000000000000000000000000000000000000;;	func AssociateMonitor(c *gophercloud.ServiceClient, poolID, monitorID string) (r AssociateResult) {
0000000000000000000000000000000000000000;;		b := map[string]interface{}{"health_monitor": map[string]string{"id": monitorID}}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(associateURL(c, poolID), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateMonitor will disassociate a health monitor with a particular
0000000000000000000000000000000000000000;;	// pool. When dissociation is successful, the health monitor will no longer
0000000000000000000000000000000000000000;;	// check for the health of the members of the pool.
0000000000000000000000000000000000000000;;	func DisassociateMonitor(c *gophercloud.ServiceClient, poolID, monitorID string) (r AssociateResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(disassociateURL(c, poolID, monitorID), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
