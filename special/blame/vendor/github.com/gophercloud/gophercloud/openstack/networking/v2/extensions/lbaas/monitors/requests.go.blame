0000000000000000000000000000000000000000;;	package monitors
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the floating IP attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular network attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		ID            string `q:"id"`
0000000000000000000000000000000000000000;;		TenantID      string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		Type          string `q:"type"`
0000000000000000000000000000000000000000;;		Delay         int    `q:"delay"`
0000000000000000000000000000000000000000;;		Timeout       int    `q:"timeout"`
0000000000000000000000000000000000000000;;		MaxRetries    int    `q:"max_retries"`
0000000000000000000000000000000000000000;;		HTTPMethod    string `q:"http_method"`
0000000000000000000000000000000000000000;;		URLPath       string `q:"url_path"`
0000000000000000000000000000000000000000;;		ExpectedCodes string `q:"expected_codes"`
0000000000000000000000000000000000000000;;		AdminStateUp  *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		Status        string `q:"status"`
0000000000000000000000000000000000000000;;		Limit         int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker        string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey       string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir       string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// routers. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those routers that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOpts) pagination.Pager {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(&opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u := rootURL(c) + q.String()
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, u, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return MonitorPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitorType is the type for all the types of LB monitors
0000000000000000000000000000000000000000;;	type MonitorType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Constants that represent approved monitoring types.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TypePING  MonitorType = "PING"
0000000000000000000000000000000000000000;;		TypeTCP   MonitorType = "TCP"
0000000000000000000000000000000000000000;;		TypeHTTP  MonitorType = "HTTP"
0000000000000000000000000000000000000000;;		TypeHTTPS MonitorType = "HTTPS"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is what types must satisfy to be used as Create
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLBMonitorCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains all the values needed to create a new health monitor.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Required. The type of probe, which is PING, TCP, HTTP, or HTTPS, that is
0000000000000000000000000000000000000000;;		// sent by the load balancer to verify the member state.
0000000000000000000000000000000000000000;;		Type MonitorType `json:"type" required:"true"`
0000000000000000000000000000000000000000;;		// Required. The time, in seconds, between sending probes to members.
0000000000000000000000000000000000000000;;		Delay int `json:"delay" required:"true"`
0000000000000000000000000000000000000000;;		// Required. Maximum number of seconds for a monitor to wait for a ping reply
0000000000000000000000000000000000000000;;		// before it times out. The value must be less than the delay value.
0000000000000000000000000000000000000000;;		Timeout int `json:"timeout" required:"true"`
0000000000000000000000000000000000000000;;		// Required. Number of permissible ping failures before changing the member's
0000000000000000000000000000000000000000;;		// status to INACTIVE. Must be a number between 1 and 10.
0000000000000000000000000000000000000000;;		MaxRetries int `json:"max_retries" required:"true"`
0000000000000000000000000000000000000000;;		// Required for HTTP(S) types. URI path that will be accessed if monitor type
0000000000000000000000000000000000000000;;		// is HTTP or HTTPS.
0000000000000000000000000000000000000000;;		URLPath string `json:"url_path,omitempty"`
0000000000000000000000000000000000000000;;		// Required for HTTP(S) types. The HTTP method used for requests by the
0000000000000000000000000000000000000000;;		// monitor. If this attribute is not specified, it defaults to "GET".
0000000000000000000000000000000000000000;;		HTTPMethod string `json:"http_method,omitempty"`
0000000000000000000000000000000000000000;;		// Required for HTTP(S) types. Expected HTTP codes for a passing HTTP(S)
0000000000000000000000000000000000000000;;		// monitor. You can either specify a single status like "200", or a range
0000000000000000000000000000000000000000;;		// like "200-202".
0000000000000000000000000000000000000000;;		ExpectedCodes string `json:"expected_codes,omitempty"`
0000000000000000000000000000000000000000;;		// Required for admins. Indicates the owner of the VIP.
0000000000000000000000000000000000000000;;		TenantID     string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool  `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLBMonitorCreateMap allows CreateOpts to satisfy the CreateOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToLBMonitorCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		if opts.Type == TypeHTTP || opts.Type == TypeHTTPS {
0000000000000000000000000000000000000000;;			if opts.URLPath == "" {
0000000000000000000000000000000000000000;;				err := gophercloud.ErrMissingInput{}
0000000000000000000000000000000000000000;;				err.Argument = "monitors.CreateOpts.URLPath"
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if opts.ExpectedCodes == "" {
0000000000000000000000000000000000000000;;				err := gophercloud.ErrMissingInput{}
0000000000000000000000000000000000000000;;				err.Argument = "monitors.CreateOpts.ExpectedCodes"
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Delay < opts.Timeout {
0000000000000000000000000000000000000000;;			err := gophercloud.ErrInvalidInput{}
0000000000000000000000000000000000000000;;			err.Argument = "monitors.CreateOpts.Delay/monitors.CreateOpts.Timeout"
0000000000000000000000000000000000000000;;			err.Info = "Delay must be greater than or equal to timeout"
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "health_monitor")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create is an operation which provisions a new health monitor. There are
0000000000000000000000000000000000000000;;	// different types of monitor you can provision: PING, TCP or HTTP(S). Below
0000000000000000000000000000000000000000;;	// are examples of how to create each one.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Here is an example config struct to use when creating a PING or TCP monitor:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// CreateOpts{Type: TypePING, Delay: 20, Timeout: 10, MaxRetries: 3}
0000000000000000000000000000000000000000;;	// CreateOpts{Type: TypeTCP, Delay: 20, Timeout: 10, MaxRetries: 3}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Here is an example config struct to use when creating a HTTP(S) monitor:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// CreateOpts{Type: TypeHTTP, Delay: 20, Timeout: 10, MaxRetries: 3,
0000000000000000000000000000000000000000;;	//  HttpMethod: "HEAD", ExpectedCodes: "200"}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLBMonitorCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular health monitor based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is what types must satisfy to be used as Update
0000000000000000000000000000000000000000;;	// options.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLBMonitorUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contains all the values needed to update an existing virtual IP.
0000000000000000000000000000000000000000;;	// Attributes not listed here but appear in CreateOpts are immutable and cannot
0000000000000000000000000000000000000000;;	// be updated.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// The time, in seconds, between sending probes to members.
0000000000000000000000000000000000000000;;		Delay int `json:"delay,omitempty"`
0000000000000000000000000000000000000000;;		// Maximum number of seconds for a monitor to wait for a ping reply
0000000000000000000000000000000000000000;;		// before it times out. The value must be less than the delay value.
0000000000000000000000000000000000000000;;		Timeout int `json:"timeout,omitempty"`
0000000000000000000000000000000000000000;;		// Number of permissible ping failures before changing the member's
0000000000000000000000000000000000000000;;		// status to INACTIVE. Must be a number between 1 and 10.
0000000000000000000000000000000000000000;;		MaxRetries int `json:"max_retries,omitempty"`
0000000000000000000000000000000000000000;;		// URI path that will be accessed if monitor type
0000000000000000000000000000000000000000;;		// is HTTP or HTTPS.
0000000000000000000000000000000000000000;;		URLPath string `json:"url_path,omitempty"`
0000000000000000000000000000000000000000;;		// The HTTP method used for requests by the
0000000000000000000000000000000000000000;;		// monitor. If this attribute is not specified, it defaults to "GET".
0000000000000000000000000000000000000000;;		HTTPMethod string `json:"http_method,omitempty"`
0000000000000000000000000000000000000000;;		// Expected HTTP codes for a passing HTTP(S)
0000000000000000000000000000000000000000;;		// monitor. You can either specify a single status like "200", or a range
0000000000000000000000000000000000000000;;		// like "200-202".
0000000000000000000000000000000000000000;;		ExpectedCodes string `json:"expected_codes,omitempty"`
0000000000000000000000000000000000000000;;		AdminStateUp  *bool  `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLBMonitorUpdateMap allows UpdateOpts to satisfy the UpdateOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToLBMonitorUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		if opts.Delay > 0 && opts.Timeout > 0 && opts.Delay < opts.Timeout {
0000000000000000000000000000000000000000;;			err := gophercloud.ErrInvalidInput{}
0000000000000000000000000000000000000000;;			err.Argument = "monitors.CreateOpts.Delay/monitors.CreateOpts.Timeout"
0000000000000000000000000000000000000000;;			err.Value = fmt.Sprintf("%d/%d", opts.Delay, opts.Timeout)
0000000000000000000000000000000000000000;;			err.Info = "Delay must be greater than or equal to timeout"
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "health_monitor")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update is an operation which modifies the attributes of the specified monitor.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLBMonitorUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular monitor based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
