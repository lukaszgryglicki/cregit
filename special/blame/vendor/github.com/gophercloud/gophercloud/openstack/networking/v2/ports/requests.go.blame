0000000000000000000000000000000000000000;;	package ports
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToPortListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the port attributes you want to see returned. SortKey allows you to sort
0000000000000000000000000000000000000000;;	// by a particular port attribute. SortDir sets the direction, and is either
0000000000000000000000000000000000000000;;	// `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		Status       string `q:"status"`
0000000000000000000000000000000000000000;;		Name         string `q:"name"`
0000000000000000000000000000000000000000;;		AdminStateUp *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		NetworkID    string `q:"network_id"`
0000000000000000000000000000000000000000;;		TenantID     string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		DeviceOwner  string `q:"device_owner"`
0000000000000000000000000000000000000000;;		MACAddress   string `q:"mac_address"`
0000000000000000000000000000000000000000;;		ID           string `q:"id"`
0000000000000000000000000000000000000000;;		DeviceID     string `q:"device_id"`
0000000000000000000000000000000000000000;;		Limit        int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker       string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey      string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir      string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToPortListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToPortListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// ports. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those ports that are owned by the tenant
0000000000000000000000000000000000000000;;	// who submits the request, unless the request is submitted by a user with
0000000000000000000000000000000000000000;;	// administrative rights.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listURL(c)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToPortListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return PortPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a specific port based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(getURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Create operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToPortCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts represents the attributes used when creating a new port.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		NetworkID           string        `json:"network_id" required:"true"`
0000000000000000000000000000000000000000;;		Name                string        `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		AdminStateUp        *bool         `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;		MACAddress          string        `json:"mac_address,omitempty"`
0000000000000000000000000000000000000000;;		FixedIPs            interface{}   `json:"fixed_ips,omitempty"`
0000000000000000000000000000000000000000;;		DeviceID            string        `json:"device_id,omitempty"`
0000000000000000000000000000000000000000;;		DeviceOwner         string        `json:"device_owner,omitempty"`
0000000000000000000000000000000000000000;;		TenantID            string        `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		SecurityGroups      []string      `json:"security_groups,omitempty"`
0000000000000000000000000000000000000000;;		AllowedAddressPairs []AddressPair `json:"allowed_address_pairs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToPortCreateMap casts a CreateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToPortCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "port")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create accepts a CreateOpts struct and creates a new network using the values
0000000000000000000000000000000000000000;;	// provided. You must remember to provide a NetworkID value.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToPortCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(createURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Update operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToPortUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts represents the attributes used when updating an existing port.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		Name                string        `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		AdminStateUp        *bool         `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;		FixedIPs            interface{}   `json:"fixed_ips,omitempty"`
0000000000000000000000000000000000000000;;		DeviceID            string        `json:"device_id,omitempty"`
0000000000000000000000000000000000000000;;		DeviceOwner         string        `json:"device_owner,omitempty"`
0000000000000000000000000000000000000000;;		SecurityGroups      []string      `json:"security_groups"`
0000000000000000000000000000000000000000;;		AllowedAddressPairs []AddressPair `json:"allowed_address_pairs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToPortUpdateMap casts an UpdateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToPortUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "port")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update accepts a UpdateOpts struct and updates an existing port using the
0000000000000000000000000000000000000000;;	// values provided.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToPortUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(updateURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 201},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete accepts a unique ID and deletes the port associated with it.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(deleteURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convenience function that returns a port's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		pages, err := List(client, nil).AllPages()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		all, err := ExtractPorts(pages)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, s := range all {
0000000000000000000000000000000000000000;;			if s.Name == name {
0000000000000000000000000000000000000000;;				count++
0000000000000000000000000000000000000000;;				id = s.ID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch count {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrResourceNotFound{Name: name, ResourceType: "port"}
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrMultipleResourcesFound{Name: name, Count: count, ResourceType: "port"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
