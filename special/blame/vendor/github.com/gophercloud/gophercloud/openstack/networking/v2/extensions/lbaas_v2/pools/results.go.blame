0000000000000000000000000000000000000000;;	package pools
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/lbaas_v2/monitors"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SessionPersistence represents the session persistence feature of the load
0000000000000000000000000000000000000000;;	// balancing service. It attempts to force connections or requests in the same
0000000000000000000000000000000000000000;;	// session to be processed by the same member as long as it is ative. Three
0000000000000000000000000000000000000000;;	// types of persistence are supported:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// SOURCE_IP:   With this mode, all connections originating from the same source
0000000000000000000000000000000000000000;;	//              IP address, will be handled by the same Member of the Pool.
0000000000000000000000000000000000000000;;	// HTTP_COOKIE: With this persistence mode, the load balancing function will
0000000000000000000000000000000000000000;;	//              create a cookie on the first request from a client. Subsequent
0000000000000000000000000000000000000000;;	//              requests containing the same cookie value will be handled by
0000000000000000000000000000000000000000;;	//              the same Member of the Pool.
0000000000000000000000000000000000000000;;	// APP_COOKIE:  With this persistence mode, the load balancing function will
0000000000000000000000000000000000000000;;	//              rely on a cookie established by the backend application. All
0000000000000000000000000000000000000000;;	//              requests carrying the same cookie value will be handled by the
0000000000000000000000000000000000000000;;	//              same Member of the Pool.
0000000000000000000000000000000000000000;;	type SessionPersistence struct {
0000000000000000000000000000000000000000;;		// The type of persistence mode
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of cookie if persistence mode is set appropriately
0000000000000000000000000000000000000000;;		CookieName string `json:"cookie_name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerID struct {
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListenerID struct {
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pool represents a logical set of devices, such as web servers, that you
0000000000000000000000000000000000000000;;	// group together to receive and process traffic. The load balancing function
0000000000000000000000000000000000000000;;	// chooses a Member of the Pool according to the configured load balancing
0000000000000000000000000000000000000000;;	// method to handle the new requests or connections received on the VIP address.
0000000000000000000000000000000000000000;;	type Pool struct {
0000000000000000000000000000000000000000;;		// The load-balancer algorithm, which is round-robin, least-connections, and
0000000000000000000000000000000000000000;;		// so on. This value, which must be supported, is dependent on the provider.
0000000000000000000000000000000000000000;;		// Round-robin must be supported.
0000000000000000000000000000000000000000;;		LBMethod string `json:"lb_algorithm"`
0000000000000000000000000000000000000000;;		// The protocol of the Pool, which is TCP, HTTP, or HTTPS.
0000000000000000000000000000000000000000;;		Protocol string `json:"protocol"`
0000000000000000000000000000000000000000;;		// Description for the Pool.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;		// A list of listeners objects IDs.
0000000000000000000000000000000000000000;;		Listeners []ListenerID `json:"listeners"` //[]map[string]interface{}
0000000000000000000000000000000000000000;;		// A list of member objects IDs.
0000000000000000000000000000000000000000;;		Members []Member `json:"members"`
0000000000000000000000000000000000000000;;		// The ID of associated health monitor.
0000000000000000000000000000000000000000;;		MonitorID string `json:"healthmonitor_id"`
0000000000000000000000000000000000000000;;		// The network on which the members of the Pool will be located. Only members
0000000000000000000000000000000000000000;;		// that are on this network can be added to the Pool.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id"`
0000000000000000000000000000000000000000;;		// Owner of the Pool. Only an administrative user can specify a tenant ID
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;		// The administrative state of the Pool, which is up (true) or down (false).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;		// Pool name. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// The unique ID for the Pool.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;		// A list of load balancer objects IDs.
0000000000000000000000000000000000000000;;		Loadbalancers []LoadBalancerID `json:"loadbalancers"`
0000000000000000000000000000000000000000;;		// Indicates whether connections in the same session will be processed by the
0000000000000000000000000000000000000000;;		// same Pool member or not.
0000000000000000000000000000000000000000;;		Persistence SessionPersistence `json:"session_persistence"`
0000000000000000000000000000000000000000;;		// The provider
0000000000000000000000000000000000000000;;		Provider string           `json:"provider"`
0000000000000000000000000000000000000000;;		Monitor  monitors.Monitor `json:"healthmonitor"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PoolPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of pools.
0000000000000000000000000000000000000000;;	type PoolPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of pools has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r PoolPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"pools_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a PoolPage struct is empty.
0000000000000000000000000000000000000000;;	func (r PoolPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractPools(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractPools accepts a Page struct, specifically a PoolPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Router structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractPools(r pagination.Page) ([]Pool, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Pools []Pool `json:"pools"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(PoolPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Pools, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Pool, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Pool *Pool `json:"pool"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Pool, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a Create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a Get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an Update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of a Delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Member represents the application running on a backend server.
0000000000000000000000000000000000000000;;	type Member struct {
0000000000000000000000000000000000000000;;		// Name of the Member.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Weight of Member.
0000000000000000000000000000000000000000;;		Weight int `json:"weight"`
0000000000000000000000000000000000000000;;		// The administrative state of the member, which is up (true) or down (false).
0000000000000000000000000000000000000000;;		AdminStateUp bool `json:"admin_state_up"`
0000000000000000000000000000000000000000;;		// Owner of the Member. Only an administrative user can specify a tenant ID
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;		// parameter value for the subnet UUID.
0000000000000000000000000000000000000000;;		SubnetID string `json:"subnet_id"`
0000000000000000000000000000000000000000;;		// The Pool to which the Member belongs.
0000000000000000000000000000000000000000;;		PoolID string `json:"pool_id"`
0000000000000000000000000000000000000000;;		// The IP address of the Member.
0000000000000000000000000000000000000000;;		Address string `json:"address"`
0000000000000000000000000000000000000000;;		// The port on which the application is hosted.
0000000000000000000000000000000000000000;;		ProtocolPort int `json:"protocol_port"`
0000000000000000000000000000000000000000;;		// The unique ID for the Member.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemberPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of Members in a Pool.
0000000000000000000000000000000000000000;;	type MemberPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of members has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r MemberPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"members_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a MemberPage struct is empty.
0000000000000000000000000000000000000000;;	func (r MemberPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractMembers(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractMembers accepts a Page struct, specifically a RouterPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of Router structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractMembers(r pagination.Page) ([]Member, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Members []Member `json:"members"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(MemberPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Members, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonMemberResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractMember is a function that accepts a result and extracts a router.
0000000000000000000000000000000000000000;;	func (r commonMemberResult) Extract() (*Member, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Member *Member `json:"member"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Member, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateMemberResult represents the result of a CreateMember operation.
0000000000000000000000000000000000000000;;	type CreateMemberResult struct {
0000000000000000000000000000000000000000;;		commonMemberResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMemberResult represents the result of a GetMember operation.
0000000000000000000000000000000000000000;;	type GetMemberResult struct {
0000000000000000000000000000000000000000;;		commonMemberResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMemberResult represents the result of an UpdateMember operation.
0000000000000000000000000000000000000000;;	type UpdateMemberResult struct {
0000000000000000000000000000000000000000;;		commonMemberResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteMemberResult represents the result of a DeleteMember operation.
0000000000000000000000000000000000000000;;	type DeleteMemberResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
