0000000000000000000000000000000000000000;;	package floatingips
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FloatingIP represents a floating IP resource. A floating IP is an external
0000000000000000000000000000000000000000;;	// IP address that is mapped to an internal port and, optionally, a specific
0000000000000000000000000000000000000000;;	// IP address on a private network. In other words, it enables access to an
0000000000000000000000000000000000000000;;	// instance on a private network from an external network. For this reason,
0000000000000000000000000000000000000000;;	// floating IPs can only be defined on networks where the `router:external'
0000000000000000000000000000000000000000;;	// attribute (provided by the external network extension) is set to True.
0000000000000000000000000000000000000000;;	type FloatingIP struct {
0000000000000000000000000000000000000000;;		// Unique identifier for the floating IP instance.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UUID of the external network where the floating IP is to be created.
0000000000000000000000000000000000000000;;		FloatingNetworkID string `json:"floating_network_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Address of the floating IP on the external network.
0000000000000000000000000000000000000000;;		FloatingIP string `json:"floating_ip_address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UUID of the port on an internal network that is associated with the floating IP.
0000000000000000000000000000000000000000;;		PortID string `json:"port_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The specific IP address of the internal port which should be associated
0000000000000000000000000000000000000000;;		// with the floating IP.
0000000000000000000000000000000000000000;;		FixedIP string `json:"fixed_ip_address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Owner of the floating IP. Only admin users can specify a tenant identifier
0000000000000000000000000000000000000000;;		// other than its own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The condition of the API resource.
0000000000000000000000000000000000000000;;		Status string `json:"status"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//The ID of the router used for this Floating-IP
0000000000000000000000000000000000000000;;		RouterID string `json:"router_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract a result and extracts a FloatingIP resource.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*FloatingIP, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			FloatingIP *FloatingIP `json:"floatingip"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.FloatingIP, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of an update operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FloatingIPPage is the page returned by a pager when traversing over a
0000000000000000000000000000000000000000;;	// collection of floating IPs.
0000000000000000000000000000000000000000;;	type FloatingIPPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL is invoked when a paginated collection of floating IPs has reached
0000000000000000000000000000000000000000;;	// the end of a page and the pager seeks to traverse over a new one. In order
0000000000000000000000000000000000000000;;	// to do this, it needs to construct the next page's URL.
0000000000000000000000000000000000000000;;	func (r FloatingIPPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"floatingips_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty checks whether a NetworkPage struct is empty.
0000000000000000000000000000000000000000;;	func (r FloatingIPPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		is, err := ExtractFloatingIPs(r)
0000000000000000000000000000000000000000;;		return len(is) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractFloatingIPs accepts a Page struct, specifically a FloatingIPPage struct,
0000000000000000000000000000000000000000;;	// and extracts the elements into a slice of FloatingIP structs. In other words,
0000000000000000000000000000000000000000;;	// a generic collection is mapped into a relevant slice.
0000000000000000000000000000000000000000;;	func ExtractFloatingIPs(r pagination.Page) ([]FloatingIP, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			FloatingIPs []FloatingIP `json:"floatingips"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(FloatingIPPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.FloatingIPs, err
0000000000000000000000000000000000000000;;	}
