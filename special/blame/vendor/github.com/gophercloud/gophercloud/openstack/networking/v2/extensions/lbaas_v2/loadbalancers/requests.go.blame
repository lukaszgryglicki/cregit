0000000000000000000000000000000000000000;;	package loadbalancers
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLoadBalancerListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the Loadbalancer attributes you want to see returned. SortKey allows you to
0000000000000000000000000000000000000000;;	// sort by a particular attribute. SortDir sets the direction, and is
0000000000000000000000000000000000000000;;	// either `asc' or `desc'. Marker and Limit are used for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		Description        string `q:"description"`
0000000000000000000000000000000000000000;;		AdminStateUp       *bool  `q:"admin_state_up"`
0000000000000000000000000000000000000000;;		TenantID           string `q:"tenant_id"`
0000000000000000000000000000000000000000;;		ProvisioningStatus string `q:"provisioning_status"`
0000000000000000000000000000000000000000;;		VipAddress         string `q:"vip_address"`
0000000000000000000000000000000000000000;;		VipPortID          string `q:"vip_port_id"`
0000000000000000000000000000000000000000;;		VipSubnetID        string `q:"vip_subnet_id"`
0000000000000000000000000000000000000000;;		ID                 string `q:"id"`
0000000000000000000000000000000000000000;;		OperatingStatus    string `q:"operating_status"`
0000000000000000000000000000000000000000;;		Name               string `q:"name"`
0000000000000000000000000000000000000000;;		Flavor             string `q:"flavor"`
0000000000000000000000000000000000000000;;		Provider           string `q:"provider"`
0000000000000000000000000000000000000000;;		Limit              int    `q:"limit"`
0000000000000000000000000000000000000000;;		Marker             string `q:"marker"`
0000000000000000000000000000000000000000;;		SortKey            string `q:"sort_key"`
0000000000000000000000000000000000000000;;		SortDir            string `q:"sort_dir"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLoadbalancerListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToLoadBalancerListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager which allows you to iterate over a collection of
0000000000000000000000000000000000000000;;	// routers. It accepts a ListOpts struct, which allows you to filter and sort
0000000000000000000000000000000000000000;;	// the returned collection for greater efficiency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Default policy settings return only those routers that are owned by the
0000000000000000000000000000000000000000;;	// tenant who submits the request, unless an admin user submits the request.
0000000000000000000000000000000000000000;;	func List(c *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := rootURL(c)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToLoadBalancerListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(c, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return LoadBalancerPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Create operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLoadBalancerCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts is the common options struct used in this package's Create
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Optional. Human-readable name for the Loadbalancer. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. Human-readable description for the Loadbalancer.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// Required. The network on which to allocate the Loadbalancer's address. A tenant can
0000000000000000000000000000000000000000;;		// only create Loadbalancers on networks authorized by policy (e.g. networks that
0000000000000000000000000000000000000000;;		// belong to them or networks that are shared).
0000000000000000000000000000000000000000;;		VipSubnetID string `json:"vip_subnet_id" required:"true"`
0000000000000000000000000000000000000000;;		// Required for admins. The UUID of the tenant who owns the Loadbalancer.
0000000000000000000000000000000000000000;;		// Only administrative users can specify a tenant UUID other than their own.
0000000000000000000000000000000000000000;;		TenantID string `json:"tenant_id,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The IP address of the Loadbalancer.
0000000000000000000000000000000000000000;;		VipAddress string `json:"vip_address,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The administrative state of the Loadbalancer. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The UUID of a flavor.
0000000000000000000000000000000000000000;;		Flavor string `json:"flavor,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The name of the provider.
0000000000000000000000000000000000000000;;		Provider string `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLoadBalancerCreateMap casts a CreateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToLoadBalancerCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "loadbalancer")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create is an operation which provisions a new loadbalancer based on the
0000000000000000000000000000000000000000;;	// configuration defined in the CreateOpts struct. Once the request is
0000000000000000000000000000000000000000;;	// validated and progress has started on the provisioning process, a
0000000000000000000000000000000000000000;;	// CreateResult will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Users with an admin role can create loadbalancers on behalf of other tenants by
0000000000000000000000000000000000000000;;	// specifying a TenantID attribute different than their own.
0000000000000000000000000000000000000000;;	func Create(c *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLoadBalancerCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Post(rootURL(c), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a particular Loadbalancer based on its unique ID.
0000000000000000000000000000000000000000;;	func Get(c *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(resourceURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder is the interface options structs have to satisfy in order
0000000000000000000000000000000000000000;;	// to be used in the main Update operation in this package. Since many
0000000000000000000000000000000000000000;;	// extensions decorate or modify the common logic, it is useful for them to
0000000000000000000000000000000000000000;;	// satisfy a basic interface in order for them to be used.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToLoadBalancerUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts is the common options struct used in this package's Update
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// Optional. Human-readable name for the Loadbalancer. Does not have to be unique.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. Human-readable description for the Loadbalancer.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// Optional. The administrative state of the Loadbalancer. A valid value is true (UP)
0000000000000000000000000000000000000000;;		// or false (DOWN).
0000000000000000000000000000000000000000;;		AdminStateUp *bool `json:"admin_state_up,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToLoadBalancerUpdateMap casts a UpdateOpts struct to a map.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToLoadBalancerUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "loadbalancer")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update is an operation which modifies the attributes of the specified LoadBalancer.
0000000000000000000000000000000000000000;;	func Update(c *gophercloud.ServiceClient, id string, opts UpdateOpts) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToLoadBalancerUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = c.Put(resourceURL(c, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will permanently delete a particular LoadBalancer based on its unique ID.
0000000000000000000000000000000000000000;;	func Delete(c *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Delete(resourceURL(c, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetStatuses(c *gophercloud.ServiceClient, id string) (r GetStatusesResult) {
0000000000000000000000000000000000000000;;		_, r.Err = c.Get(statusRootURL(c, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
