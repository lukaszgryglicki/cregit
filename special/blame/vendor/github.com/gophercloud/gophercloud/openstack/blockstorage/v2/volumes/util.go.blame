0000000000000000000000000000000000000000;;	package volumes
6b6fb3b5acf09b10f0b5a4182251f9385ec3b317;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitForStatus will continually poll the resource, checking for a particular
0000000000000000000000000000000000000000;;	// status. It will do this for the amount of seconds defined.
0000000000000000000000000000000000000000;;	func WaitForStatus(c *gophercloud.ServiceClient, id, status string, secs int) error {
0000000000000000000000000000000000000000;;		return gophercloud.WaitFor(secs, func() (bool, error) {
0000000000000000000000000000000000000000;;			current, err := Get(c, id).Extract()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if current.Status == status {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
