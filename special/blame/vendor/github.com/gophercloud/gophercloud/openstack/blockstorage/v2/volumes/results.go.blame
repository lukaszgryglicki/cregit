0000000000000000000000000000000000000000;;	package volumes
6b6fb3b5acf09b10f0b5a4182251f9385ec3b317;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Attachment struct {
0000000000000000000000000000000000000000;;		AttachedAt   time.Time `json:"-"`
0000000000000000000000000000000000000000;;		AttachmentID string    `json:"attachment_id"`
0000000000000000000000000000000000000000;;		Device       string    `json:"device"`
0000000000000000000000000000000000000000;;		HostName     string    `json:"host_name"`
0000000000000000000000000000000000000000;;		ID           string    `json:"id"`
0000000000000000000000000000000000000000;;		ServerID     string    `json:"server_id"`
0000000000000000000000000000000000000000;;		VolumeID     string    `json:"volume_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Attachment) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		type tmp Attachment
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			tmp
0000000000000000000000000000000000000000;;			AttachedAt gophercloud.JSONRFC3339MilliNoZ `json:"attached_at"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*r = Attachment(s.tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.AttachedAt = time.Time(s.AttachedAt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume contains all the information associated with an OpenStack Volume.
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;		// Unique identifier for the volume.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;		// Current status of the volume.
0000000000000000000000000000000000000000;;		Status string `json:"status"`
0000000000000000000000000000000000000000;;		// Size of the volume in GB.
0000000000000000000000000000000000000000;;		Size int `json:"size"`
0000000000000000000000000000000000000000;;		// AvailabilityZone is which availability zone the volume is in.
0000000000000000000000000000000000000000;;		AvailabilityZone string `json:"availability_zone"`
0000000000000000000000000000000000000000;;		// The date when this volume was created.
0000000000000000000000000000000000000000;;		CreatedAt time.Time `json:"-"`
0000000000000000000000000000000000000000;;		// The date when this volume was last updated
0000000000000000000000000000000000000000;;		UpdatedAt time.Time `json:"-"`
0000000000000000000000000000000000000000;;		// Instances onto which the volume is attached.
0000000000000000000000000000000000000000;;		Attachments []Attachment `json:"attachments"`
0000000000000000000000000000000000000000;;		// Human-readable display name for the volume.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Human-readable description for the volume.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;		// The type of volume to create, either SATA or SSD.
0000000000000000000000000000000000000000;;		VolumeType string `json:"volume_type"`
0000000000000000000000000000000000000000;;		// The ID of the snapshot from which the volume was created
0000000000000000000000000000000000000000;;		SnapshotID string `json:"snapshot_id"`
0000000000000000000000000000000000000000;;		// The ID of another block storage volume from which the current volume was created
0000000000000000000000000000000000000000;;		SourceVolID string `json:"source_volid"`
0000000000000000000000000000000000000000;;		// Arbitrary key-value pairs defined by the user.
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata"`
0000000000000000000000000000000000000000;;		// UserID is the id of the user who created the volume.
0000000000000000000000000000000000000000;;		UserID string `json:"user_id"`
0000000000000000000000000000000000000000;;		// Indicates whether this is a bootable volume.
0000000000000000000000000000000000000000;;		Bootable string `json:"bootable"`
0000000000000000000000000000000000000000;;		// Encrypted denotes if the volume is encrypted.
0000000000000000000000000000000000000000;;		Encrypted bool `json:"encrypted"`
0000000000000000000000000000000000000000;;		// ReplicationStatus is the status of replication.
0000000000000000000000000000000000000000;;		ReplicationStatus string `json:"replication_status"`
0000000000000000000000000000000000000000;;		// ConsistencyGroupID is the consistency group ID.
0000000000000000000000000000000000000000;;		ConsistencyGroupID string `json:"consistencygroup_id"`
0000000000000000000000000000000000000000;;		// Multiattach denotes if the volume is multi-attach capable.
0000000000000000000000000000000000000000;;		Multiattach bool `json:"multiattach"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Volume) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		type tmp Volume
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			tmp
0000000000000000000000000000000000000000;;			CreatedAt gophercloud.JSONRFC3339MilliNoZ `json:"created_at"`
0000000000000000000000000000000000000000;;			UpdatedAt gophercloud.JSONRFC3339MilliNoZ `json:"updated_at"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*r = Volume(s.tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.CreatedAt = time.Time(s.CreatedAt)
0000000000000000000000000000000000000000;;		r.UpdatedAt = time.Time(s.UpdatedAt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumePage is a pagination.pager that is returned from a call to the List function.
0000000000000000000000000000000000000000;;	type VolumePage struct {
0000000000000000000000000000000000000000;;		pagination.SinglePageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty returns true if a ListResult contains no Volumes.
0000000000000000000000000000000000000000;;	func (r VolumePage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		volumes, err := ExtractVolumes(r)
0000000000000000000000000000000000000000;;		return len(volumes) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractVolumes extracts and returns Volumes. It is used while iterating over a volumes.List call.
0000000000000000000000000000000000000000;;	func ExtractVolumes(r pagination.Page) ([]Volume, error) {
0000000000000000000000000000000000000000;;		var s []Volume
0000000000000000000000000000000000000000;;		err := ExtractVolumesInto(r, &s)
0000000000000000000000000000000000000000;;		return s, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract will get the Volume object out of the commonResult object.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Volume, error) {
0000000000000000000000000000000000000000;;		var s Volume
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return &s, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r commonResult) ExtractInto(v interface{}) error {
0000000000000000000000000000000000000000;;		return r.Result.ExtractIntoStructPtr(v, "volume")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExtractVolumesInto(r pagination.Page, v interface{}) error {
0000000000000000000000000000000000000000;;		return r.(VolumePage).Result.ExtractIntoSlicePtr(v, "volumes")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult contains the response body and error from a Create request.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult contains the response body and error from a Get request.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult contains the response body and error from an Update request.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult contains the response body and error from a Delete request.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
