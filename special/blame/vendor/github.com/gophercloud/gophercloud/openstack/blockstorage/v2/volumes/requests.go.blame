0000000000000000000000000000000000000000;;	package volumes
6b6fb3b5acf09b10f0b5a4182251f9385ec3b317;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Create request.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains options for creating a Volume. This object is passed to
0000000000000000000000000000000000000000;;	// the volumes.Create function. For more information about these parameters,
0000000000000000000000000000000000000000;;	// see the Volume object.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// The size of the volume, in GB
0000000000000000000000000000000000000000;;		Size int `json:"size" required:"true"`
0000000000000000000000000000000000000000;;		// The availability zone
0000000000000000000000000000000000000000;;		AvailabilityZone string `json:"availability_zone,omitempty"`
0000000000000000000000000000000000000000;;		// ConsistencyGroupID is the ID of a consistency group
0000000000000000000000000000000000000000;;		ConsistencyGroupID string `json:"consistencygroup_id,omitempty"`
0000000000000000000000000000000000000000;;		// The volume description
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		// One or more metadata key and value pairs to associate with the volume
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;		// The volume name
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// the ID of the existing volume snapshot
0000000000000000000000000000000000000000;;		SnapshotID string `json:"snapshot_id,omitempty"`
0000000000000000000000000000000000000000;;		// SourceReplica is a UUID of an existing volume to replicate with
0000000000000000000000000000000000000000;;		SourceReplica string `json:"source_replica,omitempty"`
0000000000000000000000000000000000000000;;		// the ID of the existing volume
0000000000000000000000000000000000000000;;		SourceVolID string `json:"source_volid,omitempty"`
0000000000000000000000000000000000000000;;		// The ID of the image from which you want to create the volume.
0000000000000000000000000000000000000000;;		// Required to create a bootable volume.
0000000000000000000000000000000000000000;;		ImageID string `json:"imageRef,omitempty"`
0000000000000000000000000000000000000000;;		// The associated volume type
0000000000000000000000000000000000000000;;		VolumeType string `json:"volume_type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeCreateMap assembles a request body based on the contents of a
0000000000000000000000000000000000000000;;	// CreateOpts.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToVolumeCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "volume")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create will create a new Volume based on the values in CreateOpts. To extract
0000000000000000000000000000000000000000;;	// the Volume object from the response, call the Extract method on the
0000000000000000000000000000000000000000;;	// CreateResult.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToVolumeCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(createURL(client), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will delete the existing Volume with the provided ID.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Delete(deleteURL(client, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the Volume with the provided ID. To extract the Volume object
0000000000000000000000000000000000000000;;	// from the response, call the Extract method on the GetResult.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(getURL(client, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the List
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts holds options for listing Volumes. It is passed to the volumes.List
0000000000000000000000000000000000000000;;	// function.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		// admin-only option. Set it to true to see all tenant volumes.
0000000000000000000000000000000000000000;;		AllTenants bool `q:"all_tenants"`
0000000000000000000000000000000000000000;;		// List only volumes that contain Metadata.
0000000000000000000000000000000000000000;;		Metadata map[string]string `q:"metadata"`
0000000000000000000000000000000000000000;;		// List only volumes that have Name as the display name.
0000000000000000000000000000000000000000;;		Name string `q:"name"`
0000000000000000000000000000000000000000;;		// List only volumes that have a status of Status.
0000000000000000000000000000000000000000;;		Status string `q:"status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToVolumeListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns Volumes optionally limited by the conditions provided in ListOpts.
0000000000000000000000000000000000000000;;	func List(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToVolumeListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return VolumePage{pagination.SinglePageBase(r)}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Update request.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contain options for updating an existing Volume. This object is passed
0000000000000000000000000000000000000000;;	// to the volumes.Update function. For more information about the parameters, see
0000000000000000000000000000000000000000;;	// the Volume object.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		Name        string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Description string            `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Metadata    map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeUpdateMap assembles a request body based on the contents of an
0000000000000000000000000000000000000000;;	// UpdateOpts.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToVolumeUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "volume")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update will update the Volume with provided information. To extract the updated
0000000000000000000000000000000000000000;;	// Volume from the response, call the Extract method on the UpdateResult.
0000000000000000000000000000000000000000;;	func Update(client *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToVolumeUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Put(updateURL(client, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns a server's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		pages, err := List(client, nil).AllPages()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		all, err := ExtractVolumes(pages)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, s := range all {
0000000000000000000000000000000000000000;;			if s.Name == name {
0000000000000000000000000000000000000000;;				count++
0000000000000000000000000000000000000000;;				id = s.ID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch count {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrResourceNotFound{Name: name, ResourceType: "volume"}
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrMultipleResourcesFound{Name: name, Count: count, ResourceType: "volume"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
