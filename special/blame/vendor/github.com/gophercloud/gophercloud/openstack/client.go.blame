0000000000000000000000000000000000000000;;	package openstack
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		tokens2 "github.com/gophercloud/gophercloud/openstack/identity/v2/tokens"
0000000000000000000000000000000000000000;;		tokens3 "github.com/gophercloud/gophercloud/openstack/identity/v3/tokens"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/utils"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		v20 = "v2.0"
0000000000000000000000000000000000000000;;		v30 = "v3.0"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient prepares an unauthenticated ProviderClient instance.
0000000000000000000000000000000000000000;;	// Most users will probably prefer using the AuthenticatedClient function instead.
0000000000000000000000000000000000000000;;	// This is useful if you wish to explicitly control the version of the identity service that's used for authentication explicitly,
0000000000000000000000000000000000000000;;	// for example.
0000000000000000000000000000000000000000;;	func NewClient(endpoint string) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		u, err := url.Parse(endpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hadPath := u.Path != ""
0000000000000000000000000000000000000000;;		u.Path, u.RawQuery, u.Fragment = "", "", ""
0000000000000000000000000000000000000000;;		base := u.String()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint = gophercloud.NormalizeURL(endpoint)
0000000000000000000000000000000000000000;;		base = gophercloud.NormalizeURL(base)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if hadPath {
0000000000000000000000000000000000000000;;			return &gophercloud.ProviderClient{
0000000000000000000000000000000000000000;;				IdentityBase:     base,
0000000000000000000000000000000000000000;;				IdentityEndpoint: endpoint,
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ProviderClient{
0000000000000000000000000000000000000000;;			IdentityBase:     base,
0000000000000000000000000000000000000000;;			IdentityEndpoint: "",
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatedClient logs in to an OpenStack cloud found at the identity endpoint specified by options, acquires a token, and
0000000000000000000000000000000000000000;;	// returns a Client instance that's ready to operate.
0000000000000000000000000000000000000000;;	// It first queries the root identity endpoint to determine which versions of the identity service are supported, then chooses
0000000000000000000000000000000000000000;;	// the most recent identity service available to proceed.
0000000000000000000000000000000000000000;;	func AuthenticatedClient(options gophercloud.AuthOptions) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		client, err := NewClient(options.IdentityEndpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = Authenticate(client, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticate or re-authenticate against the most recent identity service supported at the provided endpoint.
0000000000000000000000000000000000000000;;	func Authenticate(client *gophercloud.ProviderClient, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		versions := []*utils.Version{
0000000000000000000000000000000000000000;;			{ID: v20, Priority: 20, Suffix: "/v2.0/"},
0000000000000000000000000000000000000000;;			{ID: v30, Priority: 30, Suffix: "/v3/"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		chosen, endpoint, err := utils.ChooseVersion(client, versions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch chosen.ID {
0000000000000000000000000000000000000000;;		case v20:
0000000000000000000000000000000000000000;;			return v2auth(client, endpoint, options, gophercloud.EndpointOpts{})
0000000000000000000000000000000000000000;;		case v30:
0000000000000000000000000000000000000000;;			return v3auth(client, endpoint, &options, gophercloud.EndpointOpts{})
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// The switch statement must be out of date from the versions list.
0000000000000000000000000000000000000000;;			return fmt.Errorf("Unrecognized identity version: %s", chosen.ID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateV2 explicitly authenticates against the identity v2 endpoint.
0000000000000000000000000000000000000000;;	func AuthenticateV2(client *gophercloud.ProviderClient, options gophercloud.AuthOptions, eo gophercloud.EndpointOpts) error {
0000000000000000000000000000000000000000;;		return v2auth(client, "", options, eo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func v2auth(client *gophercloud.ProviderClient, endpoint string, options gophercloud.AuthOptions, eo gophercloud.EndpointOpts) error {
0000000000000000000000000000000000000000;;		v2Client, err := NewIdentityV2(client, eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if endpoint != "" {
0000000000000000000000000000000000000000;;			v2Client.Endpoint = endpoint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v2Opts := tokens2.AuthOptions{
0000000000000000000000000000000000000000;;			IdentityEndpoint: options.IdentityEndpoint,
0000000000000000000000000000000000000000;;			Username:         options.Username,
0000000000000000000000000000000000000000;;			Password:         options.Password,
0000000000000000000000000000000000000000;;			TenantID:         options.TenantID,
0000000000000000000000000000000000000000;;			TenantName:       options.TenantName,
0000000000000000000000000000000000000000;;			AllowReauth:      options.AllowReauth,
0000000000000000000000000000000000000000;;			TokenID:          options.TokenID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := tokens2.Create(v2Client, v2Opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		catalog, err := result.ExtractServiceCatalog()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.AllowReauth {
0000000000000000000000000000000000000000;;			client.ReauthFunc = func() error {
0000000000000000000000000000000000000000;;				client.TokenID = ""
0000000000000000000000000000000000000000;;				return v2auth(client, endpoint, options, eo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.TokenID = token.ID
0000000000000000000000000000000000000000;;		client.EndpointLocator = func(opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;			return V2EndpointURL(catalog, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateV3 explicitly authenticates against the identity v3 service.
0000000000000000000000000000000000000000;;	func AuthenticateV3(client *gophercloud.ProviderClient, options tokens3.AuthOptionsBuilder, eo gophercloud.EndpointOpts) error {
0000000000000000000000000000000000000000;;		return v3auth(client, "", options, eo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func v3auth(client *gophercloud.ProviderClient, endpoint string, opts tokens3.AuthOptionsBuilder, eo gophercloud.EndpointOpts) error {
0000000000000000000000000000000000000000;;		// Override the generated service endpoint with the one returned by the version endpoint.
0000000000000000000000000000000000000000;;		v3Client, err := NewIdentityV3(client, eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if endpoint != "" {
0000000000000000000000000000000000000000;;			v3Client.Endpoint = endpoint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := tokens3.Create(v3Client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		catalog, err := result.ExtractServiceCatalog()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client.TokenID = token.ID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.CanReauth() {
0000000000000000000000000000000000000000;;			client.ReauthFunc = func() error {
0000000000000000000000000000000000000000;;				client.TokenID = ""
0000000000000000000000000000000000000000;;				return v3auth(client, endpoint, opts, eo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.EndpointLocator = func(opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;			return V3EndpointURL(catalog, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIdentityV2 creates a ServiceClient that may be used to interact with the v2 identity service.
0000000000000000000000000000000000000000;;	func NewIdentityV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		endpoint := client.IdentityBase + "v2.0/"
0000000000000000000000000000000000000000;;		clientType := "identity"
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(eo, gophercloud.EndpointOpts{}) {
0000000000000000000000000000000000000000;;			eo.ApplyDefaults(clientType)
0000000000000000000000000000000000000000;;			endpoint, err = client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       endpoint,
0000000000000000000000000000000000000000;;			Type:           clientType,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIdentityV3 creates a ServiceClient that may be used to access the v3 identity service.
0000000000000000000000000000000000000000;;	func NewIdentityV3(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		endpoint := client.IdentityBase + "v3/"
0000000000000000000000000000000000000000;;		clientType := "identity"
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(eo, gophercloud.EndpointOpts{}) {
0000000000000000000000000000000000000000;;			eo.ApplyDefaults(clientType)
0000000000000000000000000000000000000000;;			endpoint, err = client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       endpoint,
0000000000000000000000000000000000000000;;			Type:           clientType,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initClientOpts(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts, clientType string) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		sc := new(gophercloud.ServiceClient)
0000000000000000000000000000000000000000;;		eo.ApplyDefaults(clientType)
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return sc, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sc.ProviderClient = client
0000000000000000000000000000000000000000;;		sc.Endpoint = url
0000000000000000000000000000000000000000;;		sc.Type = clientType
0000000000000000000000000000000000000000;;		return sc, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewObjectStorageV1 creates a ServiceClient that may be used with the v1 object storage package.
0000000000000000000000000000000000000000;;	func NewObjectStorageV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "object-store")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewComputeV2 creates a ServiceClient that may be used with the v2 compute package.
0000000000000000000000000000000000000000;;	func NewComputeV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "compute")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNetworkV2 creates a ServiceClient that may be used with the v2 network package.
0000000000000000000000000000000000000000;;	func NewNetworkV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		sc, err := initClientOpts(client, eo, "network")
0000000000000000000000000000000000000000;;		sc.ResourceBase = sc.Endpoint + "v2.0/"
0000000000000000000000000000000000000000;;		return sc, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBlockStorageV1 creates a ServiceClient that may be used to access the v1 block storage service.
0000000000000000000000000000000000000000;;	func NewBlockStorageV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "volume")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBlockStorageV2 creates a ServiceClient that may be used to access the v2 block storage service.
0000000000000000000000000000000000000000;;	func NewBlockStorageV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "volumev2")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSharedFileSystemV2 creates a ServiceClient that may be used to access the v2 shared file system service.
0000000000000000000000000000000000000000;;	func NewSharedFileSystemV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "sharev2")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCDNV1 creates a ServiceClient that may be used to access the OpenStack v1
0000000000000000000000000000000000000000;;	// CDN service.
0000000000000000000000000000000000000000;;	func NewCDNV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "cdn")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewOrchestrationV1 creates a ServiceClient that may be used to access the v1 orchestration service.
0000000000000000000000000000000000000000;;	func NewOrchestrationV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "orchestration")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDBV1 creates a ServiceClient that may be used to access the v1 DB service.
0000000000000000000000000000000000000000;;	func NewDBV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return initClientOpts(client, eo, "database")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDNSV2 creates a ServiceClient that may be used to access the v2 DNS service.
0000000000000000000000000000000000000000;;	func NewDNSV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		sc, err := initClientOpts(client, eo, "dns")
0000000000000000000000000000000000000000;;		sc.ResourceBase = sc.Endpoint + "v2/"
0000000000000000000000000000000000000000;;		return sc, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewImageServiceV2 creates a ServiceClient that may be used to access the v2 image service.
0000000000000000000000000000000000000000;;	func NewImageServiceV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		sc, err := initClientOpts(client, eo, "image")
0000000000000000000000000000000000000000;;		sc.ResourceBase = sc.Endpoint + "v2/"
0000000000000000000000000000000000000000;;		return sc, err
0000000000000000000000000000000000000000;;	}
