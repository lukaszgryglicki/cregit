0000000000000000000000000000000000000000;;	package openstack
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		tokens2 "github.com/gophercloud/gophercloud/openstack/identity/v2/tokens"
0000000000000000000000000000000000000000;;		tokens3 "github.com/gophercloud/gophercloud/openstack/identity/v3/tokens"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrEndpointNotFound is the error when no suitable endpoint can be found
0000000000000000000000000000000000000000;;	// in the user's catalog
0000000000000000000000000000000000000000;;	type ErrEndpointNotFound struct{ gophercloud.BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrEndpointNotFound) Error() string {
0000000000000000000000000000000000000000;;		return "No suitable endpoint could be found in the service catalog."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrInvalidAvailabilityProvided is the error when an invalid endpoint
0000000000000000000000000000000000000000;;	// availability is provided
0000000000000000000000000000000000000000;;	type ErrInvalidAvailabilityProvided struct{ gophercloud.ErrInvalidInput }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrInvalidAvailabilityProvided) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Unexpected availability in endpoint query: %s", e.Value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrMultipleMatchingEndpointsV2 is the error when more than one endpoint
0000000000000000000000000000000000000000;;	// for the given options is found in the v2 catalog
0000000000000000000000000000000000000000;;	type ErrMultipleMatchingEndpointsV2 struct {
0000000000000000000000000000000000000000;;		gophercloud.BaseError
0000000000000000000000000000000000000000;;		Endpoints []tokens2.Endpoint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrMultipleMatchingEndpointsV2) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Discovered %d matching endpoints: %#v", len(e.Endpoints), e.Endpoints)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrMultipleMatchingEndpointsV3 is the error when more than one endpoint
0000000000000000000000000000000000000000;;	// for the given options is found in the v3 catalog
0000000000000000000000000000000000000000;;	type ErrMultipleMatchingEndpointsV3 struct {
0000000000000000000000000000000000000000;;		gophercloud.BaseError
0000000000000000000000000000000000000000;;		Endpoints []tokens3.Endpoint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrMultipleMatchingEndpointsV3) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Discovered %d matching endpoints: %#v", len(e.Endpoints), e.Endpoints)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNoAuthURL is the error when the OS_AUTH_URL environment variable is not
0000000000000000000000000000000000000000;;	// found
0000000000000000000000000000000000000000;;	type ErrNoAuthURL struct{ gophercloud.ErrInvalidInput }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrNoAuthURL) Error() string {
0000000000000000000000000000000000000000;;		return "Environment variable OS_AUTH_URL needs to be set."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNoUsername is the error when the OS_USERNAME environment variable is not
0000000000000000000000000000000000000000;;	// found
0000000000000000000000000000000000000000;;	type ErrNoUsername struct{ gophercloud.ErrInvalidInput }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrNoUsername) Error() string {
0000000000000000000000000000000000000000;;		return "Environment variable OS_USERNAME needs to be set."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNoPassword is the error when the OS_PASSWORD environment variable is not
0000000000000000000000000000000000000000;;	// found
0000000000000000000000000000000000000000;;	type ErrNoPassword struct{ gophercloud.ErrInvalidInput }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrNoPassword) Error() string {
0000000000000000000000000000000000000000;;		return "Environment variable OS_PASSWORD needs to be set."
0000000000000000000000000000000000000000;;	}
