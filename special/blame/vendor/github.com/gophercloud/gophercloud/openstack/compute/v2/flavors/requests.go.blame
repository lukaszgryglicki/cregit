0000000000000000000000000000000000000000;;	package flavors
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToFlavorListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccessType maps to OpenStack's Flavor.is_public field. Although the is_public field is boolean, the
0000000000000000000000000000000000000000;;	// request options are ternary, which is why AccessType is a string. The following values are
0000000000000000000000000000000000000000;;	// allowed:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//      PublicAccess (the default):  Returns public flavors and private flavors associated with that project.
0000000000000000000000000000000000000000;;	//      PrivateAccess (admin only):  Returns private flavors, across all projects.
0000000000000000000000000000000000000000;;	//      AllAccess (admin only):      Returns public and private flavors across all projects.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The AccessType arguement is optional, and if it is not supplied, OpenStack returns the PublicAccess
0000000000000000000000000000000000000000;;	// flavors.
0000000000000000000000000000000000000000;;	type AccessType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PublicAccess  AccessType = "true"
0000000000000000000000000000000000000000;;		PrivateAccess AccessType = "false"
0000000000000000000000000000000000000000;;		AllAccess     AccessType = "None"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts helps control the results returned by the List() function.
0000000000000000000000000000000000000000;;	// For example, a flavor with a minDisk field of 10 will not be returned if you specify MinDisk set to 20.
0000000000000000000000000000000000000000;;	// Typically, software will use the last ID of the previous call to List to set the Marker for the current call.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ChangesSince, if provided, instructs List to return only those things which have changed since the timestamp provided.
0000000000000000000000000000000000000000;;		ChangesSince string `q:"changes-since"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MinDisk and MinRAM, if provided, elides flavors which do not meet your criteria.
0000000000000000000000000000000000000000;;		MinDisk int `q:"minDisk"`
0000000000000000000000000000000000000000;;		MinRAM  int `q:"minRam"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Marker and Limit control paging.
0000000000000000000000000000000000000000;;		// Marker instructs List where to start listing from.
0000000000000000000000000000000000000000;;		Marker string `q:"marker"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Limit instructs List to refrain from sending excessively large lists of flavors.
0000000000000000000000000000000000000000;;		Limit int `q:"limit"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AccessType, if provided, instructs List which set of flavors to return. If IsPublic not provided,
0000000000000000000000000000000000000000;;		// flavors for the current project are returned.
0000000000000000000000000000000000000000;;		AccessType AccessType `q:"is_public"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToFlavorListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToFlavorListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListDetail instructs OpenStack to provide a list of flavors.
0000000000000000000000000000000000000000;;	// You may provide criteria by which List curtails its results for easier processing.
0000000000000000000000000000000000000000;;	// See ListOpts for more details.
0000000000000000000000000000000000000000;;	func ListDetail(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToFlavorListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return FlavorPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToFlavorCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts is passed to Create to create a flavor
0000000000000000000000000000000000000000;;	// Source:
0000000000000000000000000000000000000000;;	// https://github.com/openstack/nova/blob/stable/newton/nova/api/openstack/compute/schemas/flavor_manage.py#L20
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		Name string `json:"name" required:"true"`
0000000000000000000000000000000000000000;;		// memory size, in MBs
0000000000000000000000000000000000000000;;		RAM   int `json:"ram" required:"true"`
0000000000000000000000000000000000000000;;		VCPUs int `json:"vcpus" required:"true"`
0000000000000000000000000000000000000000;;		// disk size, in GBs
0000000000000000000000000000000000000000;;		Disk *int   `json:"disk" required:"true"`
0000000000000000000000000000000000000000;;		ID   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		// non-zero, positive
0000000000000000000000000000000000000000;;		Swap       *int    `json:"swap,omitempty"`
0000000000000000000000000000000000000000;;		RxTxFactor float64 `json:"rxtx_factor,omitempty"`
0000000000000000000000000000000000000000;;		IsPublic   *bool   `json:"os-flavor-access:is_public,omitempty"`
0000000000000000000000000000000000000000;;		// ephemeral disk size, in GBs, non-zero, positive
0000000000000000000000000000000000000000;;		Ephemeral *int `json:"OS-FLV-EXT-DATA:ephemeral,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToFlavorCreateMap satisfies the CreateOptsBuilder interface
0000000000000000000000000000000000000000;;	func (opts *CreateOpts) ToFlavorCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "flavor")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create a flavor
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToFlavorCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(createURL(client), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 201},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get instructs OpenStack to provide details on a single flavor, identified by its ID.
0000000000000000000000000000000000000000;;	// Use ExtractFlavor to convert its result into a Flavor.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(getURL(client, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns a flavor's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		allPages, err := ListDetail(client, nil).AllPages()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		all, err := ExtractFlavors(allPages)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, f := range all {
0000000000000000000000000000000000000000;;			if f.Name == name {
0000000000000000000000000000000000000000;;				count++
0000000000000000000000000000000000000000;;				id = f.ID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch count {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			err := &gophercloud.ErrResourceNotFound{}
0000000000000000000000000000000000000000;;			err.ResourceType = "flavor"
0000000000000000000000000000000000000000;;			err.Name = name
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			err := &gophercloud.ErrMultipleResourcesFound{}
0000000000000000000000000000000000000000;;			err.ResourceType = "flavor"
0000000000000000000000000000000000000000;;			err.Name = name
0000000000000000000000000000000000000000;;			err.Count = count
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
