0000000000000000000000000000000000000000;;	package images
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToImageListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts contain options for limiting the number of Images returned from a call to ListDetail.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		// When the image last changed status (in date-time format).
0000000000000000000000000000000000000000;;		ChangesSince string `q:"changes-since"`
0000000000000000000000000000000000000000;;		// The number of Images to return.
0000000000000000000000000000000000000000;;		Limit int `q:"limit"`
0000000000000000000000000000000000000000;;		// UUID of the Image at which to set a marker.
0000000000000000000000000000000000000000;;		Marker string `q:"marker"`
0000000000000000000000000000000000000000;;		// The name of the Image.
0000000000000000000000000000000000000000;;		Name string `q:"name"`
0000000000000000000000000000000000000000;;		// The name of the Server (in URL format).
0000000000000000000000000000000000000000;;		Server string `q:"server"`
0000000000000000000000000000000000000000;;		// The current status of the Image.
0000000000000000000000000000000000000000;;		Status string `q:"status"`
0000000000000000000000000000000000000000;;		// The value of the type of image (e.g. BASE, SERVER, ALL)
0000000000000000000000000000000000000000;;		Type string `q:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToImageListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToImageListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListDetail enumerates the available images.
0000000000000000000000000000000000000000;;	func ListDetail(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listDetailURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToImageListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return ImagePage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get acquires additional detail about a specific image by ID.
0000000000000000000000000000000000000000;;	// Use ExtractImage() to interpret the result as an openstack Image.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(getURL(client, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes the specified image ID.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Delete(deleteURL(client, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns an image's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		allPages, err := ListDetail(client, nil).AllPages()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		all, err := ExtractImages(allPages)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, f := range all {
0000000000000000000000000000000000000000;;			if f.Name == name {
0000000000000000000000000000000000000000;;				count++
0000000000000000000000000000000000000000;;				id = f.ID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch count {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			err := &gophercloud.ErrResourceNotFound{}
0000000000000000000000000000000000000000;;			err.ResourceType = "image"
0000000000000000000000000000000000000000;;			err.Name = name
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			err := &gophercloud.ErrMultipleResourcesFound{}
0000000000000000000000000000000000000000;;			err.ResourceType = "image"
0000000000000000000000000000000000000000;;			err.Name = name
0000000000000000000000000000000000000000;;			err.Count = count
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
