0000000000000000000000000000000000000000;;	package volumeattach
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeAttachment controls the attachment of a volume to an instance.
0000000000000000000000000000000000000000;;	type VolumeAttachment struct {
0000000000000000000000000000000000000000;;		// ID is a unique id of the attachment
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Device is what device the volume is attached as
0000000000000000000000000000000000000000;;		Device string `json:"device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeID is the ID of the attached volume
0000000000000000000000000000000000000000;;		VolumeID string `json:"volumeId"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerID is the ID of the instance that has the volume attached
0000000000000000000000000000000000000000;;		ServerID string `json:"serverId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeAttachmentPage stores a single, only page of VolumeAttachments
0000000000000000000000000000000000000000;;	// results from a List call.
0000000000000000000000000000000000000000;;	type VolumeAttachmentPage struct {
0000000000000000000000000000000000000000;;		pagination.SinglePageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty determines whether or not a VolumeAttachmentsPage is empty.
0000000000000000000000000000000000000000;;	func (page VolumeAttachmentPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		va, err := ExtractVolumeAttachments(page)
0000000000000000000000000000000000000000;;		return len(va) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractVolumeAttachments interprets a page of results as a slice of
0000000000000000000000000000000000000000;;	// VolumeAttachments.
0000000000000000000000000000000000000000;;	func ExtractVolumeAttachments(r pagination.Page) ([]VolumeAttachment, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			VolumeAttachments []VolumeAttachment `json:"volumeAttachments"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(VolumeAttachmentPage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.VolumeAttachments, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeAttachmentResult is the result from a volume attachment operation.
0000000000000000000000000000000000000000;;	type VolumeAttachmentResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a method that attempts to interpret any VolumeAttachment resource
0000000000000000000000000000000000000000;;	// response as a VolumeAttachment struct.
0000000000000000000000000000000000000000;;	func (r VolumeAttachmentResult) Extract() (*VolumeAttachment, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			VolumeAttachment *VolumeAttachment `json:"volumeAttachment"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.VolumeAttachment, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult is the response from a Create operation. Call its Extract method to interpret it
0000000000000000000000000000000000000000;;	// as a VolumeAttachment.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		VolumeAttachmentResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult is the response from a Get operation. Call its Extract method to interpret it
0000000000000000000000000000000000000000;;	// as a VolumeAttachment.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		VolumeAttachmentResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult is the response from a Delete operation. Call its Extract method to determine if
0000000000000000000000000000000000000000;;	// the call succeeded or failed.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
