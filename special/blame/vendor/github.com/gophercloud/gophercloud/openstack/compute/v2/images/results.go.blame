0000000000000000000000000000000000000000;;	package images
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult temporarily stores a Get response.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult represents the result of an image.Delete operation.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract interprets a GetResult as an Image.
0000000000000000000000000000000000000000;;	func (r GetResult) Extract() (*Image, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Image *Image `json:"image"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := r.ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Image, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Image is used for JSON (un)marshalling.
0000000000000000000000000000000000000000;;	// It provides a description of an OS image.
0000000000000000000000000000000000000000;;	type Image struct {
0000000000000000000000000000000000000000;;		// ID contains the image's unique identifier.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MinDisk and MinRAM specify the minimum resources a server must provide to be able to install the image.
0000000000000000000000000000000000000000;;		MinDisk int
0000000000000000000000000000000000000000;;		MinRAM  int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name provides a human-readable moniker for the OS image.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Progress and Status fields indicate image-creation status.
0000000000000000000000000000000000000000;;		// Any usable image will have 100% progress.
0000000000000000000000000000000000000000;;		Progress int
0000000000000000000000000000000000000000;;		Status   string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Updated string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Metadata map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImagePage contains a single page of results from a List operation.
0000000000000000000000000000000000000000;;	// Use ExtractImages to convert it into a slice of usable structs.
0000000000000000000000000000000000000000;;	type ImagePage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty returns true if a page contains no Image results.
0000000000000000000000000000000000000000;;	func (page ImagePage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		images, err := ExtractImages(page)
0000000000000000000000000000000000000000;;		return len(images) == 0, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL uses the response's embedded link reference to navigate to the next page of results.
0000000000000000000000000000000000000000;;	func (page ImagePage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `json:"images_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := page.ExtractInto(&s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(s.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractImages converts a page of List results into a slice of usable Image structs.
0000000000000000000000000000000000000000;;	func ExtractImages(r pagination.Page) ([]Image, error) {
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			Images []Image `json:"images"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := (r.(ImagePage)).ExtractInto(&s)
0000000000000000000000000000000000000000;;		return s.Images, err
0000000000000000000000000000000000000000;;	}
