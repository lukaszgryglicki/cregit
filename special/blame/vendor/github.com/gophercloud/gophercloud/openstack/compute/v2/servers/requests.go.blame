0000000000000000000000000000000000000000;;	package servers
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/compute/v2/flavors"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack/compute/v2/images"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts allows the filtering and sorting of paginated collections through
0000000000000000000000000000000000000000;;	// the API. Filtering is achieved by passing in struct field values that map to
0000000000000000000000000000000000000000;;	// the server attributes you want to see returned. Marker and Limit are used
0000000000000000000000000000000000000000;;	// for pagination.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		// A time/date stamp for when the server last changed status.
0000000000000000000000000000000000000000;;		ChangesSince string `q:"changes-since"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of the image in URL format.
0000000000000000000000000000000000000000;;		Image string `q:"image"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of the flavor in URL format.
0000000000000000000000000000000000000000;;		Flavor string `q:"flavor"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of the server as a string; can be queried with regular expressions.
0000000000000000000000000000000000000000;;		// Realize that ?name=bob returns both bob and bobb. If you need to match bob
0000000000000000000000000000000000000000;;		// only, you can use a regular expression matching the syntax of the
0000000000000000000000000000000000000000;;		// underlying database server implemented for Compute.
0000000000000000000000000000000000000000;;		Name string `q:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value of the status of the server so that you can filter on "ACTIVE" for example.
0000000000000000000000000000000000000000;;		Status string `q:"status"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of the host as a string.
0000000000000000000000000000000000000000;;		Host string `q:"host"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UUID of the server at which you want to set a marker.
0000000000000000000000000000000000000000;;		Marker string `q:"marker"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Integer value for the limit of values to return.
0000000000000000000000000000000000000000;;		Limit int `q:"limit"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Bool to show all tenants
0000000000000000000000000000000000000000;;		AllTenants bool `q:"all_tenants"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToServerListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		return q.String(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List makes a request against the API to list servers accessible to you.
0000000000000000000000000000000000000000;;	func List(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listDetailURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToServerListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return ServerPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder describes struct types that can be accepted by the Create call.
0000000000000000000000000000000000000000;;	// The CreateOpts struct in this package does.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Network is used within CreateOpts to control a new server's network attachments.
0000000000000000000000000000000000000000;;	type Network struct {
0000000000000000000000000000000000000000;;		// UUID of a nova-network to attach to the newly provisioned server.
0000000000000000000000000000000000000000;;		// Required unless Port is provided.
0000000000000000000000000000000000000000;;		UUID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Port of a neutron network to attach to the newly provisioned server.
0000000000000000000000000000000000000000;;		// Required unless UUID is provided.
0000000000000000000000000000000000000000;;		Port string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FixedIP [optional] specifies a fixed IPv4 address to be used on this network.
0000000000000000000000000000000000000000;;		FixedIP string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Personality is an array of files that are injected into the server at launch.
0000000000000000000000000000000000000000;;	type Personality []*File
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// File is used within CreateOpts and RebuildOpts to inject a file into the server at launch.
0000000000000000000000000000000000000000;;	// File implements the json.Marshaler interface, so when a Create or Rebuild operation is requested,
0000000000000000000000000000000000000000;;	// json.Marshal will call File's MarshalJSON method.
0000000000000000000000000000000000000000;;	type File struct {
0000000000000000000000000000000000000000;;		// Path of the file
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;		// Contents of the file. Maximum content size is 255 bytes.
0000000000000000000000000000000000000000;;		Contents []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON marshals the escaped file, base64 encoding the contents.
0000000000000000000000000000000000000000;;	func (f *File) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		file := struct {
0000000000000000000000000000000000000000;;			Path     string `json:"path"`
0000000000000000000000000000000000000000;;			Contents string `json:"contents"`
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			Path:     f.Path,
0000000000000000000000000000000000000000;;			Contents: base64.StdEncoding.EncodeToString(f.Contents),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts specifies server creation parameters.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Name is the name to assign to the newly launched server.
0000000000000000000000000000000000000000;;		Name string `json:"name" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageRef [optional; required if ImageName is not provided] is the ID or full
0000000000000000000000000000000000000000;;		// URL to the image that contains the server's OS and initial state.
0000000000000000000000000000000000000000;;		// Also optional if using the boot-from-volume extension.
0000000000000000000000000000000000000000;;		ImageRef string `json:"imageRef"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageName [optional; required if ImageRef is not provided] is the name of the
0000000000000000000000000000000000000000;;		// image that contains the server's OS and initial state.
0000000000000000000000000000000000000000;;		// Also optional if using the boot-from-volume extension.
0000000000000000000000000000000000000000;;		ImageName string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FlavorRef [optional; required if FlavorName is not provided] is the ID or
0000000000000000000000000000000000000000;;		// full URL to the flavor that describes the server's specs.
0000000000000000000000000000000000000000;;		FlavorRef string `json:"flavorRef"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FlavorName [optional; required if FlavorRef is not provided] is the name of
0000000000000000000000000000000000000000;;		// the flavor that describes the server's specs.
0000000000000000000000000000000000000000;;		FlavorName string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SecurityGroups lists the names of the security groups to which this server should belong.
0000000000000000000000000000000000000000;;		SecurityGroups []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserData contains configuration information or scripts to use upon launch.
0000000000000000000000000000000000000000;;		// Create will base64-encode it for you, if it isn't already.
0000000000000000000000000000000000000000;;		UserData []byte `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AvailabilityZone in which to launch the server.
0000000000000000000000000000000000000000;;		AvailabilityZone string `json:"availability_zone,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Networks dictates how this server will be attached to available networks.
0000000000000000000000000000000000000000;;		// By default, the server will be attached to all isolated networks for the tenant.
0000000000000000000000000000000000000000;;		Networks []Network `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metadata contains key-value pairs (up to 255 bytes each) to attach to the server.
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Personality includes files to inject into the server at launch.
0000000000000000000000000000000000000000;;		// Create will base64-encode file contents for you.
0000000000000000000000000000000000000000;;		Personality Personality `json:"personality,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConfigDrive enables metadata injection through a configuration drive.
0000000000000000000000000000000000000000;;		ConfigDrive *bool `json:"config_drive,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AdminPass sets the root user password. If not set, a randomly-generated
0000000000000000000000000000000000000000;;		// password will be created and returned in the rponse.
0000000000000000000000000000000000000000;;		AdminPass string `json:"adminPass,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AccessIPv4 specifies an IPv4 address for the instance.
0000000000000000000000000000000000000000;;		AccessIPv4 string `json:"accessIPv4,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AccessIPv6 pecifies an IPv6 address for the instance.
0000000000000000000000000000000000000000;;		AccessIPv6 string `json:"accessIPv6,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceClient will allow calls to be made to retrieve an image or
0000000000000000000000000000000000000000;;		// flavor ID by name.
0000000000000000000000000000000000000000;;		ServiceClient *gophercloud.ServiceClient `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerCreateMap assembles a request body based on the contents of a CreateOpts.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToServerCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		sc := opts.ServiceClient
0000000000000000000000000000000000000000;;		opts.ServiceClient = nil
0000000000000000000000000000000000000000;;		b, err := gophercloud.BuildRequestBody(opts, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.UserData != nil {
0000000000000000000000000000000000000000;;			var userData string
0000000000000000000000000000000000000000;;			if _, err := base64.StdEncoding.DecodeString(string(opts.UserData)); err != nil {
0000000000000000000000000000000000000000;;				userData = base64.StdEncoding.EncodeToString(opts.UserData)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				userData = string(opts.UserData)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b["user_data"] = &userData
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(opts.SecurityGroups) > 0 {
0000000000000000000000000000000000000000;;			securityGroups := make([]map[string]interface{}, len(opts.SecurityGroups))
0000000000000000000000000000000000000000;;			for i, groupName := range opts.SecurityGroups {
0000000000000000000000000000000000000000;;				securityGroups[i] = map[string]interface{}{"name": groupName}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b["security_groups"] = securityGroups
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(opts.Networks) > 0 {
0000000000000000000000000000000000000000;;			networks := make([]map[string]interface{}, len(opts.Networks))
0000000000000000000000000000000000000000;;			for i, net := range opts.Networks {
0000000000000000000000000000000000000000;;				networks[i] = make(map[string]interface{})
0000000000000000000000000000000000000000;;				if net.UUID != "" {
0000000000000000000000000000000000000000;;					networks[i]["uuid"] = net.UUID
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if net.Port != "" {
0000000000000000000000000000000000000000;;					networks[i]["port"] = net.Port
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if net.FixedIP != "" {
0000000000000000000000000000000000000000;;					networks[i]["fixed_ip"] = net.FixedIP
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b["networks"] = networks
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If ImageRef isn't provided, check if ImageName was provided to ascertain
0000000000000000000000000000000000000000;;		// the image ID.
0000000000000000000000000000000000000000;;		if opts.ImageRef == "" {
0000000000000000000000000000000000000000;;			if opts.ImageName != "" {
0000000000000000000000000000000000000000;;				if sc == nil {
0000000000000000000000000000000000000000;;					err := ErrNoClientProvidedForIDByName{}
0000000000000000000000000000000000000000;;					err.Argument = "ServiceClient"
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				imageID, err := images.IDFromName(sc, opts.ImageName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				b["imageRef"] = imageID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If FlavorRef isn't provided, use FlavorName to ascertain the flavor ID.
0000000000000000000000000000000000000000;;		if opts.FlavorRef == "" {
0000000000000000000000000000000000000000;;			if opts.FlavorName == "" {
0000000000000000000000000000000000000000;;				err := ErrNeitherFlavorIDNorFlavorNameProvided{}
0000000000000000000000000000000000000000;;				err.Argument = "FlavorRef/FlavorName"
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if sc == nil {
0000000000000000000000000000000000000000;;				err := ErrNoClientProvidedForIDByName{}
0000000000000000000000000000000000000000;;				err.Argument = "ServiceClient"
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			flavorID, err := flavors.IDFromName(sc, opts.FlavorName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b["flavorRef"] = flavorID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"server": b}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create requests a server to be provisioned to the user in the current tenant.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, opts CreateOptsBuilder) (r CreateResult) {
0000000000000000000000000000000000000000;;		reqBody, err := opts.ToServerCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(listURL(client), reqBody, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete requests that a server previously provisioned be removed from your account.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, id string) (r DeleteResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Delete(deleteURL(client, id), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ForceDelete forces the deletion of a server
0000000000000000000000000000000000000000;;	func ForceDelete(client *gophercloud.ServiceClient, id string) (r ActionResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), map[string]interface{}{"forceDelete": ""}, nil, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get requests details on a single server, by ID.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) (r GetResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(getURL(client, id), &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 203},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder allows extensions to add additional attributes to the Update request.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts specifies the base attributes that may be updated on an existing server.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// Name changes the displayed name of the server.
0000000000000000000000000000000000000000;;		// The server host name will *not* change.
0000000000000000000000000000000000000000;;		// Server names are not constrained to be unique, even within the same tenant.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AccessIPv4 provides a new IPv4 address for the instance.
0000000000000000000000000000000000000000;;		AccessIPv4 string `json:"accessIPv4,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AccessIPv6 provides a new IPv6 address for the instance.
0000000000000000000000000000000000000000;;		AccessIPv6 string `json:"accessIPv6,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerUpdateMap formats an UpdateOpts structure into a request body.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToServerUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "server")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update requests that various attributes of the indicated server be changed.
0000000000000000000000000000000000000000;;	func Update(client *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) (r UpdateResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToServerUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Put(updateURL(client, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangeAdminPassword alters the administrator or root password for a specified server.
0000000000000000000000000000000000000000;;	func ChangeAdminPassword(client *gophercloud.ServiceClient, id, newPassword string) (r ActionResult) {
0000000000000000000000000000000000000000;;		b := map[string]interface{}{
0000000000000000000000000000000000000000;;			"changePassword": map[string]string{
0000000000000000000000000000000000000000;;				"adminPass": newPassword,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), b, nil, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebootMethod describes the mechanisms by which a server reboot can be requested.
0000000000000000000000000000000000000000;;	type RebootMethod string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These constants determine how a server should be rebooted.
0000000000000000000000000000000000000000;;	// See the Reboot() function for further details.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SoftReboot RebootMethod = "SOFT"
0000000000000000000000000000000000000000;;		HardReboot RebootMethod = "HARD"
0000000000000000000000000000000000000000;;		OSReboot                = SoftReboot
0000000000000000000000000000000000000000;;		PowerCycle              = HardReboot
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebootOptsBuilder is an interface that options must satisfy in order to be
0000000000000000000000000000000000000000;;	// used when rebooting a server instance
0000000000000000000000000000000000000000;;	type RebootOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerRebootMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebootOpts satisfies the RebootOptsBuilder interface
0000000000000000000000000000000000000000;;	type RebootOpts struct {
0000000000000000000000000000000000000000;;		Type RebootMethod `json:"type" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerRebootMap allows RebootOpts to satisfiy the RebootOptsBuilder
0000000000000000000000000000000000000000;;	// interface
0000000000000000000000000000000000000000;;	func (opts *RebootOpts) ToServerRebootMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "reboot")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reboot requests that a given server reboot.
0000000000000000000000000000000000000000;;	// Two methods exist for rebooting a server:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// HardReboot (aka PowerCycle) starts the server instance by physically cutting power to the machine, or if a VM,
0000000000000000000000000000000000000000;;	// terminating it at the hypervisor level.
0000000000000000000000000000000000000000;;	// It's done. Caput. Full stop.
0000000000000000000000000000000000000000;;	// Then, after a brief while, power is rtored or the VM instance rtarted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// SoftReboot (aka OSReboot) simply tells the OS to rtart under its own procedur.
0000000000000000000000000000000000000000;;	// E.g., in Linux, asking it to enter runlevel 6, or executing "sudo shutdown -r now", or by asking Windows to rtart the machine.
0000000000000000000000000000000000000000;;	func Reboot(client *gophercloud.ServiceClient, id string, opts RebootOptsBuilder) (r ActionResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToServerRebootMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), b, nil, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebuildOptsBuilder is an interface that allows extensions to override the
0000000000000000000000000000000000000000;;	// default behaviour of rebuild options
0000000000000000000000000000000000000000;;	type RebuildOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerRebuildMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebuildOpts represents the configuration options used in a server rebuild
0000000000000000000000000000000000000000;;	// operation
0000000000000000000000000000000000000000;;	type RebuildOpts struct {
0000000000000000000000000000000000000000;;		// The server's admin password
0000000000000000000000000000000000000000;;		AdminPass string `json:"adminPass,omitempty"`
0000000000000000000000000000000000000000;;		// The ID of the image you want your server to be provisioned on
0000000000000000000000000000000000000000;;		ImageID   string `json:"imageRef"`
0000000000000000000000000000000000000000;;		ImageName string `json:"-"`
0000000000000000000000000000000000000000;;		// Name to set the server to
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// AccessIPv4 [optional] provides a new IPv4 address for the instance.
0000000000000000000000000000000000000000;;		AccessIPv4 string `json:"accessIPv4,omitempty"`
0000000000000000000000000000000000000000;;		// AccessIPv6 [optional] provides a new IPv6 address for the instance.
0000000000000000000000000000000000000000;;		AccessIPv6 string `json:"accessIPv6,omitempty"`
0000000000000000000000000000000000000000;;		// Metadata [optional] contains key-value pairs (up to 255 bytes each) to attach to the server.
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;		// Personality [optional] includes files to inject into the server at launch.
0000000000000000000000000000000000000000;;		// Rebuild will base64-encode file contents for you.
0000000000000000000000000000000000000000;;		Personality   Personality                `json:"personality,omitempty"`
0000000000000000000000000000000000000000;;		ServiceClient *gophercloud.ServiceClient `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerRebuildMap formats a RebuildOpts struct into a map for use in JSON
0000000000000000000000000000000000000000;;	func (opts RebuildOpts) ToServerRebuildMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		b, err := gophercloud.BuildRequestBody(opts, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If ImageRef isn't provided, check if ImageName was provided to ascertain
0000000000000000000000000000000000000000;;		// the image ID.
0000000000000000000000000000000000000000;;		if opts.ImageID == "" {
0000000000000000000000000000000000000000;;			if opts.ImageName != "" {
0000000000000000000000000000000000000000;;				if opts.ServiceClient == nil {
0000000000000000000000000000000000000000;;					err := ErrNoClientProvidedForIDByName{}
0000000000000000000000000000000000000000;;					err.Argument = "ServiceClient"
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				imageID, err := images.IDFromName(opts.ServiceClient, opts.ImageName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				b["imageRef"] = imageID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"rebuild": b}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rebuild will reprovision the server according to the configuration options
0000000000000000000000000000000000000000;;	// provided in the RebuildOpts struct.
0000000000000000000000000000000000000000;;	func Rebuild(client *gophercloud.ServiceClient, id string, opts RebuildOptsBuilder) (r RebuildResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToServerRebuildMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), b, &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResizeOptsBuilder is an interface that allows extensions to override the default structure of
0000000000000000000000000000000000000000;;	// a Resize request.
0000000000000000000000000000000000000000;;	type ResizeOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerResizeMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResizeOpts represents the configuration options used to control a Resize operation.
0000000000000000000000000000000000000000;;	type ResizeOpts struct {
0000000000000000000000000000000000000000;;		// FlavorRef is the ID of the flavor you wish your server to become.
0000000000000000000000000000000000000000;;		FlavorRef string `json:"flavorRef" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerResizeMap formats a ResizeOpts as a map that can be used as a JSON request body for the
0000000000000000000000000000000000000000;;	// Resize request.
0000000000000000000000000000000000000000;;	func (opts ResizeOpts) ToServerResizeMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "resize")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resize instructs the provider to change the flavor of the server.
0000000000000000000000000000000000000000;;	// Note that this implies rebuilding it.
0000000000000000000000000000000000000000;;	// Unfortunately, one cannot pass rebuild parameters to the resize function.
0000000000000000000000000000000000000000;;	// When the resize completes, the server will be in RESIZE_VERIFY state.
0000000000000000000000000000000000000000;;	// While in this state, you can explore the use of the new server's configuration.
0000000000000000000000000000000000000000;;	// If you like it, call ConfirmResize() to commit the resize permanently.
0000000000000000000000000000000000000000;;	// Otherwise, call RevertResize() to restore the old configuration.
0000000000000000000000000000000000000000;;	func Resize(client *gophercloud.ServiceClient, id string, opts ResizeOptsBuilder) (r ActionResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToServerResizeMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), b, nil, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfirmResize confirms a previous resize operation on a server.
0000000000000000000000000000000000000000;;	// See Resize() for more details.
0000000000000000000000000000000000000000;;	func ConfirmResize(client *gophercloud.ServiceClient, id string) (r ActionResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), map[string]interface{}{"confirmResize": nil}, nil, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{201, 202, 204},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RevertResize cancels a previous resize operation on a server.
0000000000000000000000000000000000000000;;	// See Resize() for more details.
0000000000000000000000000000000000000000;;	func RevertResize(client *gophercloud.ServiceClient, id string) (r ActionResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), map[string]interface{}{"revertResize": nil}, nil, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RescueOptsBuilder is an interface that allows extensions to override the
0000000000000000000000000000000000000000;;	// default structure of a Rescue request.
0000000000000000000000000000000000000000;;	type RescueOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerRescueMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RescueOpts represents the configuration options used to control a Rescue
0000000000000000000000000000000000000000;;	// option.
0000000000000000000000000000000000000000;;	type RescueOpts struct {
0000000000000000000000000000000000000000;;		// AdminPass is the desired administrative password for the instance in
0000000000000000000000000000000000000000;;		// RESCUE mode. If it's left blank, the server will generate a password.
0000000000000000000000000000000000000000;;		AdminPass string `json:"adminPass,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerRescueMap formats a RescueOpts as a map that can be used as a JSON
0000000000000000000000000000000000000000;;	// request body for the Rescue request.
0000000000000000000000000000000000000000;;	func (opts RescueOpts) ToServerRescueMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "rescue")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rescue instructs the provider to place the server into RESCUE mode.
0000000000000000000000000000000000000000;;	func Rescue(client *gophercloud.ServiceClient, id string, opts RescueOptsBuilder) (r RescueResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToServerRescueMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(actionURL(client, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetMetadataOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Reset request.
0000000000000000000000000000000000000000;;	type ResetMetadataOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToMetadataResetMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetadataOpts is a map that contains key-value pairs.
0000000000000000000000000000000000000000;;	type MetadataOpts map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToMetadataResetMap assembles a body for a Reset request based on the contents of a MetadataOpts.
0000000000000000000000000000000000000000;;	func (opts MetadataOpts) ToMetadataResetMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return map[string]interface{}{"metadata": opts}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToMetadataUpdateMap assembles a body for an Update request based on the contents of a MetadataOpts.
0000000000000000000000000000000000000000;;	func (opts MetadataOpts) ToMetadataUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return map[string]interface{}{"metadata": opts}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetMetadata will create multiple new key-value pairs for the given server ID.
0000000000000000000000000000000000000000;;	// Note: Using this operation will erase any already-existing metadata and create
0000000000000000000000000000000000000000;;	// the new metadata provided. To keep any already-existing metadata, use the
0000000000000000000000000000000000000000;;	// UpdateMetadatas or UpdateMetadata function.
0000000000000000000000000000000000000000;;	func ResetMetadata(client *gophercloud.ServiceClient, id string, opts ResetMetadataOptsBuilder) (r ResetMetadataResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToMetadataResetMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Put(metadataURL(client, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Metadata requests all the metadata for the given server ID.
0000000000000000000000000000000000000000;;	func Metadata(client *gophercloud.ServiceClient, id string) (r GetMetadataResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(metadataURL(client, id), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMetadataOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Create request.
0000000000000000000000000000000000000000;;	type UpdateMetadataOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToMetadataUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMetadata updates (or creates) all the metadata specified by opts for the given server ID.
0000000000000000000000000000000000000000;;	// This operation does not affect already-existing metadata that is not specified
0000000000000000000000000000000000000000;;	// by opts.
0000000000000000000000000000000000000000;;	func UpdateMetadata(client *gophercloud.ServiceClient, id string, opts UpdateMetadataOptsBuilder) (r UpdateMetadataResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToMetadataUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Post(metadataURL(client, id), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetadatumOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Create request.
0000000000000000000000000000000000000000;;	type MetadatumOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToMetadatumCreateMap() (map[string]interface{}, string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetadatumOpts is a map of length one that contains a key-value pair.
0000000000000000000000000000000000000000;;	type MetadatumOpts map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToMetadatumCreateMap assembles a body for a Create request based on the contents of a MetadataumOpts.
0000000000000000000000000000000000000000;;	func (opts MetadatumOpts) ToMetadatumCreateMap() (map[string]interface{}, string, error) {
0000000000000000000000000000000000000000;;		if len(opts) != 1 {
0000000000000000000000000000000000000000;;			err := gophercloud.ErrInvalidInput{}
0000000000000000000000000000000000000000;;			err.Argument = "servers.MetadatumOpts"
0000000000000000000000000000000000000000;;			err.Info = "Must have 1 and only 1 key-value pair"
0000000000000000000000000000000000000000;;			return nil, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metadatum := map[string]interface{}{"meta": opts}
0000000000000000000000000000000000000000;;		var key string
0000000000000000000000000000000000000000;;		for k := range metadatum["meta"].(MetadatumOpts) {
0000000000000000000000000000000000000000;;			key = k
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return metadatum, key, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateMetadatum will create or update the key-value pair with the given key for the given server ID.
0000000000000000000000000000000000000000;;	func CreateMetadatum(client *gophercloud.ServiceClient, id string, opts MetadatumOptsBuilder) (r CreateMetadatumResult) {
0000000000000000000000000000000000000000;;		b, key, err := opts.ToMetadatumCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, r.Err = client.Put(metadatumURL(client, id, key), b, &r.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Metadatum requests the key-value pair with the given key for the given server ID.
0000000000000000000000000000000000000000;;	func Metadatum(client *gophercloud.ServiceClient, id, key string) (r GetMetadatumResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(metadatumURL(client, id, key), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteMetadatum will delete the key-value pair with the given key for the given server ID.
0000000000000000000000000000000000000000;;	func DeleteMetadatum(client *gophercloud.ServiceClient, id, key string) (r DeleteMetadatumResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Delete(metadatumURL(client, id, key), nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAddresses makes a request against the API to list the servers IP addresses.
0000000000000000000000000000000000000000;;	func ListAddresses(client *gophercloud.ServiceClient, id string) pagination.Pager {
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, listAddressesURL(client, id), func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return AddressPage{pagination.SinglePageBase(r)}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAddressesByNetwork makes a request against the API to list the servers IP addresses
0000000000000000000000000000000000000000;;	// for the given network.
0000000000000000000000000000000000000000;;	func ListAddressesByNetwork(client *gophercloud.ServiceClient, id, network string) pagination.Pager {
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, listAddressesByNetworkURL(client, id, network), func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return NetworkAddressPage{pagination.SinglePageBase(r)}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateImageOptsBuilder is the interface types must satisfy in order to be
0000000000000000000000000000000000000000;;	// used as CreateImage options
0000000000000000000000000000000000000000;;	type CreateImageOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToServerCreateImageMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateImageOpts satisfies the CreateImageOptsBuilder
0000000000000000000000000000000000000000;;	type CreateImageOpts struct {
0000000000000000000000000000000000000000;;		// Name of the image/snapshot
0000000000000000000000000000000000000000;;		Name string `json:"name" required:"true"`
0000000000000000000000000000000000000000;;		// Metadata contains key-value pairs (up to 255 bytes each) to attach to the created image.
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerCreateImageMap formats a CreateImageOpts structure into a request body.
0000000000000000000000000000000000000000;;	func (opts CreateImageOpts) ToServerCreateImageMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return gophercloud.BuildRequestBody(opts, "createImage")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateImage makes a request against the nova API to schedule an image to be created of the server
0000000000000000000000000000000000000000;;	func CreateImage(client *gophercloud.ServiceClient, id string, opts CreateImageOptsBuilder) (r CreateImageResult) {
0000000000000000000000000000000000000000;;		b, err := opts.ToServerCreateImageMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Err = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := client.Post(actionURL(client, id), b, nil, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		r.Err = err
0000000000000000000000000000000000000000;;		r.Header = resp.Header
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns a server's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		id := ""
0000000000000000000000000000000000000000;;		allPages, err := List(client, nil).AllPages()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		all, err := ExtractServers(allPages)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, f := range all {
0000000000000000000000000000000000000000;;			if f.Name == name {
0000000000000000000000000000000000000000;;				count++
0000000000000000000000000000000000000000;;				id = f.ID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch count {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrResourceNotFound{Name: name, ResourceType: "server"}
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", gophercloud.ErrMultipleResourcesFound{Name: name, Count: count, ResourceType: "server"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPassword makes a request against the nova API to get the encrypted administrative password.
0000000000000000000000000000000000000000;;	func GetPassword(client *gophercloud.ServiceClient, serverId string) (r GetPasswordResult) {
0000000000000000000000000000000000000000;;		_, r.Err = client.Get(passwordURL(client, serverId), &r.Body, nil)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
