0000000000000000000000000000000000000000;;	package gophercloud
c191e5bce96b97325e2d7149d40cc3a540ce2fa4;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BaseError is an error type that all other error types embed.
0000000000000000000000000000000000000000;;	type BaseError struct {
0000000000000000000000000000000000000000;;		DefaultErrString string
0000000000000000000000000000000000000000;;		Info             string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e BaseError) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = "An error occurred while executing a Gophercloud request."
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e BaseError) choseErrString() string {
0000000000000000000000000000000000000000;;		if e.Info != "" {
0000000000000000000000000000000000000000;;			return e.Info
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.DefaultErrString
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrMissingInput is the error when input is required in a particular
0000000000000000000000000000000000000000;;	// situation but not provided by the user
0000000000000000000000000000000000000000;;	type ErrMissingInput struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		Argument string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrMissingInput) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Missing input for argument [%s]", e.Argument)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrInvalidInput is an error type used for most non-HTTP Gophercloud errors.
0000000000000000000000000000000000000000;;	type ErrInvalidInput struct {
0000000000000000000000000000000000000000;;		ErrMissingInput
0000000000000000000000000000000000000000;;		Value interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrInvalidInput) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Invalid input provided for argument [%s]: [%+v]", e.Argument, e.Value)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUnexpectedResponseCode is returned by the Request method when a response code other than
0000000000000000000000000000000000000000;;	// those listed in OkCodes is encountered.
0000000000000000000000000000000000000000;;	type ErrUnexpectedResponseCode struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		URL      string
0000000000000000000000000000000000000000;;		Method   string
0000000000000000000000000000000000000000;;		Expected []int
0000000000000000000000000000000000000000;;		Actual   int
0000000000000000000000000000000000000000;;		Body     []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrUnexpectedResponseCode) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf(
0000000000000000000000000000000000000000;;			"Expected HTTP response code %v when accessing [%s %s], but got %d instead\n%s",
0000000000000000000000000000000000000000;;			e.Expected, e.Method, e.URL, e.Actual, e.Body,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault400 is the default error type returned on a 400 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault400 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault401 is the default error type returned on a 401 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault401 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault404 is the default error type returned on a 404 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault404 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault405 is the default error type returned on a 405 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault405 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault408 is the default error type returned on a 408 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault408 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault429 is the default error type returned on a 429 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault429 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault500 is the default error type returned on a 500 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault500 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDefault503 is the default error type returned on a 503 HTTP response code.
0000000000000000000000000000000000000000;;	type ErrDefault503 struct {
0000000000000000000000000000000000000000;;		ErrUnexpectedResponseCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrDefault400) Error() string {
0000000000000000000000000000000000000000;;		return "Invalid request due to incorrect syntax or missing required parameters."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault401) Error() string {
0000000000000000000000000000000000000000;;		return "Authentication failed"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault404) Error() string {
0000000000000000000000000000000000000000;;		return "Resource not found"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault405) Error() string {
0000000000000000000000000000000000000000;;		return "Method not allowed"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault408) Error() string {
0000000000000000000000000000000000000000;;		return "The server timed out waiting for the request"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault429) Error() string {
0000000000000000000000000000000000000000;;		return "Too many requests have been sent in a given amount of time. Pause" +
0000000000000000000000000000000000000000;;			" requests, wait up to one minute, and try again."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault500) Error() string {
0000000000000000000000000000000000000000;;		return "Internal Server Error"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e ErrDefault503) Error() string {
0000000000000000000000000000000000000000;;		return "The service is currently unable to handle the request due to a temporary" +
0000000000000000000000000000000000000000;;			" overloading or maintenance. This is a temporary condition. Try again later."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err400er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 400 error.
0000000000000000000000000000000000000000;;	type Err400er interface {
0000000000000000000000000000000000000000;;		Error400(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err401er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 401 error.
0000000000000000000000000000000000000000;;	type Err401er interface {
0000000000000000000000000000000000000000;;		Error401(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err404er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 404 error.
0000000000000000000000000000000000000000;;	type Err404er interface {
0000000000000000000000000000000000000000;;		Error404(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err405er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 405 error.
0000000000000000000000000000000000000000;;	type Err405er interface {
0000000000000000000000000000000000000000;;		Error405(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err408er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 408 error.
0000000000000000000000000000000000000000;;	type Err408er interface {
0000000000000000000000000000000000000000;;		Error408(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err429er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 429 error.
0000000000000000000000000000000000000000;;	type Err429er interface {
0000000000000000000000000000000000000000;;		Error429(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err500er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 500 error.
0000000000000000000000000000000000000000;;	type Err500er interface {
0000000000000000000000000000000000000000;;		Error500(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Err503er is the interface resource error types implement to override the error message
0000000000000000000000000000000000000000;;	// from a 503 error.
0000000000000000000000000000000000000000;;	type Err503er interface {
0000000000000000000000000000000000000000;;		Error503(ErrUnexpectedResponseCode) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrTimeOut is the error type returned when an operations times out.
0000000000000000000000000000000000000000;;	type ErrTimeOut struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrTimeOut) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = "A time out occurred"
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUnableToReauthenticate is the error type returned when reauthentication fails.
0000000000000000000000000000000000000000;;	type ErrUnableToReauthenticate struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		ErrOriginal error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrUnableToReauthenticate) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Unable to re-authenticate: %s", e.ErrOriginal)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrErrorAfterReauthentication is the error type returned when reauthentication
0000000000000000000000000000000000000000;;	// succeeds, but an error occurs afterword (usually an HTTP error).
0000000000000000000000000000000000000000;;	type ErrErrorAfterReauthentication struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		ErrOriginal error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrErrorAfterReauthentication) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Successfully re-authenticated, but got error executing request: %s", e.ErrOriginal)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrServiceNotFound is returned when no service in a service catalog matches
0000000000000000000000000000000000000000;;	// the provided EndpointOpts. This is generally returned by provider service
0000000000000000000000000000000000000000;;	// factory methods like "NewComputeV2()" and can mean that a service is not
0000000000000000000000000000000000000000;;	// enabled for your account.
0000000000000000000000000000000000000000;;	type ErrServiceNotFound struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrServiceNotFound) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = "No suitable service could be found in the service catalog."
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrEndpointNotFound is returned when no available endpoints match the
0000000000000000000000000000000000000000;;	// provided EndpointOpts. This is also generally returned by provider service
0000000000000000000000000000000000000000;;	// factory methods, and usually indicates that a region was specified
0000000000000000000000000000000000000000;;	// incorrectly.
0000000000000000000000000000000000000000;;	type ErrEndpointNotFound struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrEndpointNotFound) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = "No suitable endpoint could be found in the service catalog."
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrResourceNotFound is the error when trying to retrieve a resource's
0000000000000000000000000000000000000000;;	// ID by name and the resource doesn't exist.
0000000000000000000000000000000000000000;;	type ErrResourceNotFound struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		Name         string
0000000000000000000000000000000000000000;;		ResourceType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrResourceNotFound) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Unable to find %s with name %s", e.ResourceType, e.Name)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrMultipleResourcesFound is the error when trying to retrieve a resource's
0000000000000000000000000000000000000000;;	// ID by name and multiple resources have the user-provided name.
0000000000000000000000000000000000000000;;	type ErrMultipleResourcesFound struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		Name         string
0000000000000000000000000000000000000000;;		Count        int
0000000000000000000000000000000000000000;;		ResourceType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrMultipleResourcesFound) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Found %d %ss matching %s", e.Count, e.ResourceType, e.Name)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUnexpectedType is the error when an unexpected type is encountered
0000000000000000000000000000000000000000;;	type ErrUnexpectedType struct {
0000000000000000000000000000000000000000;;		BaseError
0000000000000000000000000000000000000000;;		Expected string
0000000000000000000000000000000000000000;;		Actual   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrUnexpectedType) Error() string {
0000000000000000000000000000000000000000;;		e.DefaultErrString = fmt.Sprintf("Expected %s but got %s", e.Expected, e.Actual)
0000000000000000000000000000000000000000;;		return e.choseErrString()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unacceptedAttributeErr(attribute string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("The base Identity V3 API does not accept authentication by %s", attribute)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func redundantWithTokenErr(attribute string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s may not be provided when authenticating with a TokenID", attribute)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func redundantWithUserID(attribute string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s may not be provided when authenticating with a UserID", attribute)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrAPIKeyProvided indicates that an APIKey was provided but can't be used.
0000000000000000000000000000000000000000;;	type ErrAPIKeyProvided struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrAPIKeyProvided) Error() string {
0000000000000000000000000000000000000000;;		return unacceptedAttributeErr("APIKey")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrTenantIDProvided indicates that a TenantID was provided but can't be used.
0000000000000000000000000000000000000000;;	type ErrTenantIDProvided struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrTenantIDProvided) Error() string {
0000000000000000000000000000000000000000;;		return unacceptedAttributeErr("TenantID")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrTenantNameProvided indicates that a TenantName was provided but can't be used.
0000000000000000000000000000000000000000;;	type ErrTenantNameProvided struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrTenantNameProvided) Error() string {
0000000000000000000000000000000000000000;;		return unacceptedAttributeErr("TenantName")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUsernameWithToken indicates that a Username was provided, but token authentication is being used instead.
0000000000000000000000000000000000000000;;	type ErrUsernameWithToken struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrUsernameWithToken) Error() string {
0000000000000000000000000000000000000000;;		return redundantWithTokenErr("Username")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUserIDWithToken indicates that a UserID was provided, but token authentication is being used instead.
0000000000000000000000000000000000000000;;	type ErrUserIDWithToken struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrUserIDWithToken) Error() string {
0000000000000000000000000000000000000000;;		return redundantWithTokenErr("UserID")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDomainIDWithToken indicates that a DomainID was provided, but token authentication is being used instead.
0000000000000000000000000000000000000000;;	type ErrDomainIDWithToken struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrDomainIDWithToken) Error() string {
0000000000000000000000000000000000000000;;		return redundantWithTokenErr("DomainID")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDomainNameWithToken indicates that a DomainName was provided, but token authentication is being used instead.s
0000000000000000000000000000000000000000;;	type ErrDomainNameWithToken struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrDomainNameWithToken) Error() string {
0000000000000000000000000000000000000000;;		return redundantWithTokenErr("DomainName")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUsernameOrUserID indicates that neither username nor userID are specified, or both are at once.
0000000000000000000000000000000000000000;;	type ErrUsernameOrUserID struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrUsernameOrUserID) Error() string {
0000000000000000000000000000000000000000;;		return "Exactly one of Username and UserID must be provided for password authentication"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDomainIDWithUserID indicates that a DomainID was provided, but unnecessary because a UserID is being used.
0000000000000000000000000000000000000000;;	type ErrDomainIDWithUserID struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrDomainIDWithUserID) Error() string {
0000000000000000000000000000000000000000;;		return redundantWithUserID("DomainID")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDomainNameWithUserID indicates that a DomainName was provided, but unnecessary because a UserID is being used.
0000000000000000000000000000000000000000;;	type ErrDomainNameWithUserID struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrDomainNameWithUserID) Error() string {
0000000000000000000000000000000000000000;;		return redundantWithUserID("DomainName")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrDomainIDOrDomainName indicates that a username was provided, but no domain to scope it.
0000000000000000000000000000000000000000;;	// It may also indicate that both a DomainID and a DomainName were provided at once.
0000000000000000000000000000000000000000;;	type ErrDomainIDOrDomainName struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrDomainIDOrDomainName) Error() string {
0000000000000000000000000000000000000000;;		return "You must provide exactly one of DomainID or DomainName to authenticate by Username"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrMissingPassword indicates that no password was provided and no token is available.
0000000000000000000000000000000000000000;;	type ErrMissingPassword struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrMissingPassword) Error() string {
0000000000000000000000000000000000000000;;		return "You must provide a password to authenticate"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrScopeDomainIDOrDomainName indicates that a domain ID or Name was required in a Scope, but not present.
0000000000000000000000000000000000000000;;	type ErrScopeDomainIDOrDomainName struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrScopeDomainIDOrDomainName) Error() string {
0000000000000000000000000000000000000000;;		return "You must provide exactly one of DomainID or DomainName in a Scope with ProjectName"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrScopeProjectIDOrProjectName indicates that both a ProjectID and a ProjectName were provided in a Scope.
0000000000000000000000000000000000000000;;	type ErrScopeProjectIDOrProjectName struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrScopeProjectIDOrProjectName) Error() string {
0000000000000000000000000000000000000000;;		return "You must provide at most one of ProjectID or ProjectName in a Scope"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrScopeProjectIDAlone indicates that a ProjectID was provided with other constraints in a Scope.
0000000000000000000000000000000000000000;;	type ErrScopeProjectIDAlone struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrScopeProjectIDAlone) Error() string {
0000000000000000000000000000000000000000;;		return "ProjectID must be supplied alone in a Scope"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrScopeDomainName indicates that a DomainName was provided alone in a Scope.
0000000000000000000000000000000000000000;;	type ErrScopeDomainName struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrScopeDomainName) Error() string {
0000000000000000000000000000000000000000;;		return "DomainName must be supplied with a ProjectName or ProjectID in a Scope"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrScopeEmpty indicates that no credentials were provided in a Scope.
0000000000000000000000000000000000000000;;	type ErrScopeEmpty struct{ BaseError }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrScopeEmpty) Error() string {
0000000000000000000000000000000000000000;;		return "You must provide either a Project or Domain in a Scope"
0000000000000000000000000000000000000000;;	}
