0000000000000000000000000000000000000000;;	# Tips
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Implementing default logging and re-authentication attempts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can implement custom logging and/or limit re-auth attempts by creating a custom HTTP client
0000000000000000000000000000000000000000;;	like the following and setting it as the provider client's HTTP Client (via the
0000000000000000000000000000000000000000;;	`gophercloud.ProviderClient.HTTPClient` field):
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	//...
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogRoundTripper satisfies the http.RoundTripper interface and is used to
0000000000000000000000000000000000000000;;	// customize the default Gophercloud RoundTripper to allow for logging.
0000000000000000000000000000000000000000;;	type LogRoundTripper struct {
0000000000000000000000000000000000000000;;		rt                http.RoundTripper
0000000000000000000000000000000000000000;;		numReauthAttempts int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newHTTPClient return a custom HTTP client that allows for logging relevant
0000000000000000000000000000000000000000;;	// information before and after the HTTP request.
0000000000000000000000000000000000000000;;	func newHTTPClient() http.Client {
0000000000000000000000000000000000000000;;		return http.Client{
0000000000000000000000000000000000000000;;			Transport: &LogRoundTripper{
0000000000000000000000000000000000000000;;				rt: http.DefaultTransport,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RoundTrip performs a round-trip HTTP request and logs relevant information about it.
0000000000000000000000000000000000000000;;	func (lrt *LogRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		glog.Infof("Request URL: %s\n", request.URL)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		response, err := lrt.rt.RoundTrip(request)
0000000000000000000000000000000000000000;;		if response == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if response.StatusCode == http.StatusUnauthorized {
0000000000000000000000000000000000000000;;			if lrt.numReauthAttempts == 3 {
0000000000000000000000000000000000000000;;				return response, fmt.Errorf("Tried to re-authenticate 3 times with no success.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			lrt.numReauthAttempts++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Debugf("Response Status: %s\n", response.Status)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return response, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	endpoint := "https://127.0.0.1/auth"
0000000000000000000000000000000000000000;;	pc := openstack.NewClient(endpoint)
0000000000000000000000000000000000000000;;	pc.HTTPClient = newHTTPClient()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Implementing custom objects
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	OpenStack request/response objects may differ among variable names or types.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Custom request objects
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To pass custom options to a request, implement the desired `<ACTION>OptsBuilder` interface. For
0000000000000000000000000000000000000000;;	example, to pass in
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	type MyCreateServerOpts struct {
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		Size int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	to `servers.Create`, simply implement the `servers.CreateOptsBuilder` interface:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (o MyCreateServeropts) ToServerCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		return map[string]interface{}{
0000000000000000000000000000000000000000;;			"name": o.Name,
0000000000000000000000000000000000000000;;			"size": o.Size,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	create an instance of your custom options object, and pass it to `servers.Create`:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	myOpts := MyCreateServerOpts{
0000000000000000000000000000000000000000;;		Name: "s1",
0000000000000000000000000000000000000000;;		Size: "100",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	server, err := servers.Create(computeClient, myOpts).Extract()
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Custom response objects
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Some OpenStack services have extensions. Extensions that are supported in Gophercloud can be
0000000000000000000000000000000000000000;;	combined to create a custom object:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	type MyVolume struct {
0000000000000000000000000000000000000000;;	  volumes.Volume
0000000000000000000000000000000000000000;;	  tenantattr.VolumeExt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var v struct {
0000000000000000000000000000000000000000;;	  MyVolume `json:"volume"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	err := volumes.Get(client, volID).ExtractInto(&v)
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Overriding default `UnmarshalJSON` method
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For some response objects, a field may be a custom type or may be allowed to take on
0000000000000000000000000000000000000000;;	different types. In these cases, overriding the default `UnmarshalJSON` method may be
0000000000000000000000000000000000000000;;	necessary. To do this, declare the JSON `struct` field tag as "-" and create an `UnmarshalJSON`
0000000000000000000000000000000000000000;;	method on the type:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	type MyVolume struct {
0000000000000000000000000000000000000000;;		ID string `json: "id"`
0000000000000000000000000000000000000000;;		TimeCreated time.Time `json: "-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *MyVolume) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		type tmp MyVolume
0000000000000000000000000000000000000000;;		var s struct {
0000000000000000000000000000000000000000;;			tmp
0000000000000000000000000000000000000000;;			TimeCreated gophercloud.JSONRFC3339MilliNoZ `json:"created_at"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*r = Volume(s.tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.TimeCreated = time.Time(s.CreatedAt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	```
