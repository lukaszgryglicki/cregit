0000000000000000000000000000000000000000;;	// Copyright 2014 Gary Burd
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License"): you may
0000000000000000000000000000000000000000;;	// not use this file except in compliance with the License. You may obtain
0000000000000000000000000000000000000000;;	// a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
0000000000000000000000000000000000000000;;	// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
0000000000000000000000000000000000000000;;	// License for the specific language governing permissions and limitations
0000000000000000000000000000000000000000;;	// under the License.
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/garyburd/redigo/internal/commandinfo.go[Godeps/_workspace/src/github.com/garyburd/redigo/internal/commandinfo.go][vendor/github.com/garyburd/redigo/internal/commandinfo.go];	
0000000000000000000000000000000000000000;;	package internal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		WatchState = 1 << iota
0000000000000000000000000000000000000000;;		MultiState
0000000000000000000000000000000000000000;;		SubscribeState
0000000000000000000000000000000000000000;;		MonitorState
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CommandInfo struct {
0000000000000000000000000000000000000000;;		Set, Clear int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var commandInfos = map[string]CommandInfo{
0000000000000000000000000000000000000000;;		"WATCH":      {Set: WatchState},
0000000000000000000000000000000000000000;;		"UNWATCH":    {Clear: WatchState},
0000000000000000000000000000000000000000;;		"MULTI":      {Set: MultiState},
0000000000000000000000000000000000000000;;		"EXEC":       {Clear: WatchState | MultiState},
0000000000000000000000000000000000000000;;		"DISCARD":    {Clear: WatchState | MultiState},
0000000000000000000000000000000000000000;;		"PSUBSCRIBE": {Set: SubscribeState},
0000000000000000000000000000000000000000;;		"SUBSCRIBE":  {Set: SubscribeState},
0000000000000000000000000000000000000000;;		"MONITOR":    {Set: MonitorState},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		for n, ci := range commandInfos {
0000000000000000000000000000000000000000;;			commandInfos[strings.ToLower(n)] = ci
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LookupCommandInfo(commandName string) CommandInfo {
0000000000000000000000000000000000000000;;		if ci, ok := commandInfos[commandName]; ok {
0000000000000000000000000000000000000000;;			return ci
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return commandInfos[strings.ToUpper(commandName)]
0000000000000000000000000000000000000000;;	}
