0000000000000000000000000000000000000000;;	// Copyright 2012 Gary Burd
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License"): you may
0000000000000000000000000000000000000000;;	// not use this file except in compliance with the License. You may obtain
0000000000000000000000000000000000000000;;	// a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
0000000000000000000000000000000000000000;;	// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
0000000000000000000000000000000000000000;;	// License for the specific language governing permissions and limitations
0000000000000000000000000000000000000000;;	// under the License.
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/garyburd/redigo/redis/reply.go[Godeps/_workspace/src/github.com/garyburd/redigo/redis/reply.go][vendor/github.com/garyburd/redigo/redis/reply.go];	
0000000000000000000000000000000000000000;;	package redis
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNil indicates that a reply value is nil.
0000000000000000000000000000000000000000;;	var ErrNil = errors.New("redigo: nil returned")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int is a helper that converts a command reply to an integer. If err is not
0000000000000000000000000000000000000000;;	// equal to nil, then Int returns 0, err. Otherwise, Int converts the
0000000000000000000000000000000000000000;;	// reply to an int as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type    Result
0000000000000000000000000000000000000000;;	//  integer       int(reply), nil
0000000000000000000000000000000000000000;;	//  bulk string   parsed reply, nil
0000000000000000000000000000000000000000;;	//  nil           0, ErrNil
0000000000000000000000000000000000000000;;	//  other         0, error
0000000000000000000000000000000000000000;;	func Int(reply interface{}, err error) (int, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			x := int(reply)
0000000000000000000000000000000000000000;;			if int64(x) != reply {
0000000000000000000000000000000000000000;;				return 0, strconv.ErrRange
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return x, nil
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			n, err := strconv.ParseInt(string(reply), 10, 0)
0000000000000000000000000000000000000000;;			return int(n), err
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return 0, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return 0, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("redigo: unexpected type for Int, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64 is a helper that converts a command reply to 64 bit integer. If err is
0000000000000000000000000000000000000000;;	// not equal to nil, then Int returns 0, err. Otherwise, Int64 converts the
0000000000000000000000000000000000000000;;	// reply to an int64 as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type    Result
0000000000000000000000000000000000000000;;	//  integer       reply, nil
0000000000000000000000000000000000000000;;	//  bulk string   parsed reply, nil
0000000000000000000000000000000000000000;;	//  nil           0, ErrNil
0000000000000000000000000000000000000000;;	//  other         0, error
0000000000000000000000000000000000000000;;	func Int64(reply interface{}, err error) (int64, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			return reply, nil
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			n, err := strconv.ParseInt(string(reply), 10, 64)
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return 0, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return 0, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("redigo: unexpected type for Int64, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errNegativeInt = errors.New("redigo: unexpected value for Uint64")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64 is a helper that converts a command reply to 64 bit integer. If err is
0000000000000000000000000000000000000000;;	// not equal to nil, then Int returns 0, err. Otherwise, Int64 converts the
0000000000000000000000000000000000000000;;	// reply to an int64 as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type    Result
0000000000000000000000000000000000000000;;	//  integer       reply, nil
0000000000000000000000000000000000000000;;	//  bulk string   parsed reply, nil
0000000000000000000000000000000000000000;;	//  nil           0, ErrNil
0000000000000000000000000000000000000000;;	//  other         0, error
0000000000000000000000000000000000000000;;	func Uint64(reply interface{}, err error) (uint64, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			if reply < 0 {
0000000000000000000000000000000000000000;;				return 0, errNegativeInt
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return uint64(reply), nil
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			n, err := strconv.ParseUint(string(reply), 10, 64)
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return 0, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return 0, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("redigo: unexpected type for Uint64, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64 is a helper that converts a command reply to 64 bit float. If err is
0000000000000000000000000000000000000000;;	// not equal to nil, then Float64 returns 0, err. Otherwise, Float64 converts
0000000000000000000000000000000000000000;;	// the reply to an int as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type    Result
0000000000000000000000000000000000000000;;	//  bulk string   parsed reply, nil
0000000000000000000000000000000000000000;;	//  nil           0, ErrNil
0000000000000000000000000000000000000000;;	//  other         0, error
0000000000000000000000000000000000000000;;	func Float64(reply interface{}, err error) (float64, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			n, err := strconv.ParseFloat(string(reply), 64)
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return 0, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return 0, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("redigo: unexpected type for Float64, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String is a helper that converts a command reply to a string. If err is not
0000000000000000000000000000000000000000;;	// equal to nil, then String returns "", err. Otherwise String converts the
0000000000000000000000000000000000000000;;	// reply to a string as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type      Result
0000000000000000000000000000000000000000;;	//  bulk string     string(reply), nil
0000000000000000000000000000000000000000;;	//  simple string   reply, nil
0000000000000000000000000000000000000000;;	//  nil             "",  ErrNil
0000000000000000000000000000000000000000;;	//  other           "",  error
0000000000000000000000000000000000000000;;	func String(reply interface{}, err error) (string, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			return string(reply), nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return reply, nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return "", ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return "", reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("redigo: unexpected type for String, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bytes is a helper that converts a command reply to a slice of bytes. If err
0000000000000000000000000000000000000000;;	// is not equal to nil, then Bytes returns nil, err. Otherwise Bytes converts
0000000000000000000000000000000000000000;;	// the reply to a slice of bytes as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type      Result
0000000000000000000000000000000000000000;;	//  bulk string     reply, nil
0000000000000000000000000000000000000000;;	//  simple string   []byte(reply), nil
0000000000000000000000000000000000000000;;	//  nil             nil, ErrNil
0000000000000000000000000000000000000000;;	//  other           nil, error
0000000000000000000000000000000000000000;;	func Bytes(reply interface{}, err error) ([]byte, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			return reply, nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return []byte(reply), nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return nil, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return nil, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("redigo: unexpected type for Bytes, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool is a helper that converts a command reply to a boolean. If err is not
0000000000000000000000000000000000000000;;	// equal to nil, then Bool returns false, err. Otherwise Bool converts the
0000000000000000000000000000000000000000;;	// reply to boolean as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type      Result
0000000000000000000000000000000000000000;;	//  integer         value != 0, nil
0000000000000000000000000000000000000000;;	//  bulk string     strconv.ParseBool(reply)
0000000000000000000000000000000000000000;;	//  nil             false, ErrNil
0000000000000000000000000000000000000000;;	//  other           false, error
0000000000000000000000000000000000000000;;	func Bool(reply interface{}, err error) (bool, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			return reply != 0, nil
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			return strconv.ParseBool(string(reply))
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return false, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return false, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, fmt.Errorf("redigo: unexpected type for Bool, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MultiBulk is a helper that converts an array command reply to a []interface{}.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deprecated: Use Values instead.
0000000000000000000000000000000000000000;;	func MultiBulk(reply interface{}, err error) ([]interface{}, error) { return Values(reply, err) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Values is a helper that converts an array command reply to a []interface{}.
0000000000000000000000000000000000000000;;	// If err is not equal to nil, then Values returns nil, err. Otherwise, Values
0000000000000000000000000000000000000000;;	// converts the reply as follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  Reply type      Result
0000000000000000000000000000000000000000;;	//  array           reply, nil
0000000000000000000000000000000000000000;;	//  nil             nil, ErrNil
0000000000000000000000000000000000000000;;	//  other           nil, error
0000000000000000000000000000000000000000;;	func Values(reply interface{}, err error) ([]interface{}, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case []interface{}:
0000000000000000000000000000000000000000;;			return reply, nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return nil, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return nil, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("redigo: unexpected type for Values, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strings is a helper that converts an array command reply to a []string. If
0000000000000000000000000000000000000000;;	// err is not equal to nil, then Strings returns nil, err. Nil array items are
0000000000000000000000000000000000000000;;	// converted to "" in the output slice. Strings returns an error if an array
0000000000000000000000000000000000000000;;	// item is not a bulk string or nil.
0000000000000000000000000000000000000000;;	func Strings(reply interface{}, err error) ([]string, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case []interface{}:
0000000000000000000000000000000000000000;;			result := make([]string, len(reply))
0000000000000000000000000000000000000000;;			for i := range reply {
0000000000000000000000000000000000000000;;				if reply[i] == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p, ok := reply[i].([]byte)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("redigo: unexpected element type for Strings, got type %T", reply[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				result[i] = string(p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return result, nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return nil, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return nil, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("redigo: unexpected type for Strings, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByteSlices is a helper that converts an array command reply to a [][]byte.
0000000000000000000000000000000000000000;;	// If err is not equal to nil, then ByteSlices returns nil, err. Nil array
0000000000000000000000000000000000000000;;	// items are stay nil. ByteSlices returns an error if an array item is not a
0000000000000000000000000000000000000000;;	// bulk string or nil.
0000000000000000000000000000000000000000;;	func ByteSlices(reply interface{}, err error) ([][]byte, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reply := reply.(type) {
0000000000000000000000000000000000000000;;		case []interface{}:
0000000000000000000000000000000000000000;;			result := make([][]byte, len(reply))
0000000000000000000000000000000000000000;;			for i := range reply {
0000000000000000000000000000000000000000;;				if reply[i] == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p, ok := reply[i].([]byte)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("redigo: unexpected element type for ByteSlices, got type %T", reply[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				result[i] = p
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return result, nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return nil, ErrNil
0000000000000000000000000000000000000000;;		case Error:
0000000000000000000000000000000000000000;;			return nil, reply
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("redigo: unexpected type for ByteSlices, got type %T", reply)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ints is a helper that converts an array command reply to a []int. If
0000000000000000000000000000000000000000;;	// err is not equal to nil, then Ints returns nil, err.
0000000000000000000000000000000000000000;;	func Ints(reply interface{}, err error) ([]int, error) {
0000000000000000000000000000000000000000;;		var ints []int
0000000000000000000000000000000000000000;;		values, err := Values(reply, err)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ints, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ScanSlice(values, &ints); err != nil {
0000000000000000000000000000000000000000;;			return ints, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ints, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringMap is a helper that converts an array of strings (alternating key, value)
0000000000000000000000000000000000000000;;	// into a map[string]string. The HGETALL and CONFIG GET commands return replies in this format.
0000000000000000000000000000000000000000;;	// Requires an even number of values in result.
0000000000000000000000000000000000000000;;	func StringMap(result interface{}, err error) (map[string]string, error) {
0000000000000000000000000000000000000000;;		values, err := Values(result, err)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(values)%2 != 0 {
0000000000000000000000000000000000000000;;			return nil, errors.New("redigo: StringMap expects even number of values result")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := make(map[string]string, len(values)/2)
0000000000000000000000000000000000000000;;		for i := 0; i < len(values); i += 2 {
0000000000000000000000000000000000000000;;			key, okKey := values[i].([]byte)
0000000000000000000000000000000000000000;;			value, okValue := values[i+1].([]byte)
0000000000000000000000000000000000000000;;			if !okKey || !okValue {
0000000000000000000000000000000000000000;;				return nil, errors.New("redigo: ScanMap key not a bulk string value")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			m[string(key)] = string(value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntMap is a helper that converts an array of strings (alternating key, value)
0000000000000000000000000000000000000000;;	// into a map[string]int. The HGETALL commands return replies in this format.
0000000000000000000000000000000000000000;;	// Requires an even number of values in result.
0000000000000000000000000000000000000000;;	func IntMap(result interface{}, err error) (map[string]int, error) {
0000000000000000000000000000000000000000;;		values, err := Values(result, err)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(values)%2 != 0 {
0000000000000000000000000000000000000000;;			return nil, errors.New("redigo: IntMap expects even number of values result")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := make(map[string]int, len(values)/2)
0000000000000000000000000000000000000000;;		for i := 0; i < len(values); i += 2 {
0000000000000000000000000000000000000000;;			key, ok := values[i].([]byte)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, errors.New("redigo: ScanMap key not a bulk string value")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			value, err := Int(values[i+1], nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			m[string(key)] = value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Map is a helper that converts an array of strings (alternating key, value)
0000000000000000000000000000000000000000;;	// into a map[string]int64. The HGETALL commands return replies in this format.
0000000000000000000000000000000000000000;;	// Requires an even number of values in result.
0000000000000000000000000000000000000000;;	func Int64Map(result interface{}, err error) (map[string]int64, error) {
0000000000000000000000000000000000000000;;		values, err := Values(result, err)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(values)%2 != 0 {
0000000000000000000000000000000000000000;;			return nil, errors.New("redigo: Int64Map expects even number of values result")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := make(map[string]int64, len(values)/2)
0000000000000000000000000000000000000000;;		for i := 0; i < len(values); i += 2 {
0000000000000000000000000000000000000000;;			key, ok := values[i].([]byte)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, errors.New("redigo: ScanMap key not a bulk string value")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			value, err := Int64(values[i+1], nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			m[string(key)] = value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m, nil
0000000000000000000000000000000000000000;;	}
