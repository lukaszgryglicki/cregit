0000000000000000000000000000000000000000;;	// Copyright 2012 Gary Burd
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License"): you may
0000000000000000000000000000000000000000;;	// not use this file except in compliance with the License. You may obtain
0000000000000000000000000000000000000000;;	// a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
0000000000000000000000000000000000000000;;	// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
0000000000000000000000000000000000000000;;	// License for the specific language governing permissions and limitations
0000000000000000000000000000000000000000;;	// under the License.
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/garyburd/redigo/redis/redis.go[Godeps/_workspace/src/github.com/garyburd/redigo/redis/redis.go][vendor/github.com/garyburd/redigo/redis/redis.go];	
0000000000000000000000000000000000000000;;	package redis
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error represents an error returned in a command reply.
0000000000000000000000000000000000000000;;	type Error string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (err Error) Error() string { return string(err) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Conn represents a connection to a Redis server.
0000000000000000000000000000000000000000;;	type Conn interface {
0000000000000000000000000000000000000000;;		// Close closes the connection.
0000000000000000000000000000000000000000;;		Close() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Err returns a non-nil value if the connection is broken. The returned
0000000000000000000000000000000000000000;;		// value is either the first non-nil value returned from the underlying
0000000000000000000000000000000000000000;;		// network connection or a protocol parsing error. Applications should
0000000000000000000000000000000000000000;;		// close broken connections.
0000000000000000000000000000000000000000;;		Err() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Do sends a command to the server and returns the received reply.
0000000000000000000000000000000000000000;;		Do(commandName string, args ...interface{}) (reply interface{}, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Send writes the command to the client's output buffer.
0000000000000000000000000000000000000000;;		Send(commandName string, args ...interface{}) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flush flushes the output buffer to the Redis server.
0000000000000000000000000000000000000000;;		Flush() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Receive receives a single reply from the Redis server
0000000000000000000000000000000000000000;;		Receive() (reply interface{}, err error)
0000000000000000000000000000000000000000;;	}
