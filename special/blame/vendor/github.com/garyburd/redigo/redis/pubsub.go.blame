0000000000000000000000000000000000000000;;	// Copyright 2012 Gary Burd
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License"): you may
0000000000000000000000000000000000000000;;	// not use this file except in compliance with the License. You may obtain
0000000000000000000000000000000000000000;;	// a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
0000000000000000000000000000000000000000;;	// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
0000000000000000000000000000000000000000;;	// License for the specific language governing permissions and limitations
0000000000000000000000000000000000000000;;	// under the License.
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/garyburd/redigo/redis/pubsub.go[Godeps/_workspace/src/github.com/garyburd/redigo/redis/pubsub.go][vendor/github.com/garyburd/redigo/redis/pubsub.go];	
0000000000000000000000000000000000000000;;	package redis
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Subscription represents a subscribe or unsubscribe notification.
0000000000000000000000000000000000000000;;	type Subscription struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kind is "subscribe", "unsubscribe", "psubscribe" or "punsubscribe"
0000000000000000000000000000000000000000;;		Kind string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The channel that was changed.
0000000000000000000000000000000000000000;;		Channel string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current number of subscriptions for connection.
0000000000000000000000000000000000000000;;		Count int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message represents a message notification.
0000000000000000000000000000000000000000;;	type Message struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The originating channel.
0000000000000000000000000000000000000000;;		Channel string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The message data.
0000000000000000000000000000000000000000;;		Data []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PMessage represents a pmessage notification.
0000000000000000000000000000000000000000;;	type PMessage struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The matched pattern.
0000000000000000000000000000000000000000;;		Pattern string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The originating channel.
0000000000000000000000000000000000000000;;		Channel string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The message data.
0000000000000000000000000000000000000000;;		Data []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pong represents a pubsub pong notification.
0000000000000000000000000000000000000000;;	type Pong struct {
0000000000000000000000000000000000000000;;		Data string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PubSubConn wraps a Conn with convenience methods for subscribers.
0000000000000000000000000000000000000000;;	type PubSubConn struct {
0000000000000000000000000000000000000000;;		Conn Conn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Close closes the connection.
0000000000000000000000000000000000000000;;	func (c PubSubConn) Close() error {
0000000000000000000000000000000000000000;;		return c.Conn.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Subscribe subscribes the connection to the specified channels.
0000000000000000000000000000000000000000;;	func (c PubSubConn) Subscribe(channel ...interface{}) error {
0000000000000000000000000000000000000000;;		c.Conn.Send("SUBSCRIBE", channel...)
0000000000000000000000000000000000000000;;		return c.Conn.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PSubscribe subscribes the connection to the given patterns.
0000000000000000000000000000000000000000;;	func (c PubSubConn) PSubscribe(channel ...interface{}) error {
0000000000000000000000000000000000000000;;		c.Conn.Send("PSUBSCRIBE", channel...)
0000000000000000000000000000000000000000;;		return c.Conn.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unsubscribe unsubscribes the connection from the given channels, or from all
0000000000000000000000000000000000000000;;	// of them if none is given.
0000000000000000000000000000000000000000;;	func (c PubSubConn) Unsubscribe(channel ...interface{}) error {
0000000000000000000000000000000000000000;;		c.Conn.Send("UNSUBSCRIBE", channel...)
0000000000000000000000000000000000000000;;		return c.Conn.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PUnsubscribe unsubscribes the connection from the given patterns, or from all
0000000000000000000000000000000000000000;;	// of them if none is given.
0000000000000000000000000000000000000000;;	func (c PubSubConn) PUnsubscribe(channel ...interface{}) error {
0000000000000000000000000000000000000000;;		c.Conn.Send("PUNSUBSCRIBE", channel...)
0000000000000000000000000000000000000000;;		return c.Conn.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ping sends a PING to the server with the specified data.
0000000000000000000000000000000000000000;;	func (c PubSubConn) Ping(data string) error {
0000000000000000000000000000000000000000;;		c.Conn.Send("PING", data)
0000000000000000000000000000000000000000;;		return c.Conn.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Receive returns a pushed message as a Subscription, Message, PMessage, Pong
0000000000000000000000000000000000000000;;	// or error. The return value is intended to be used directly in a type switch
0000000000000000000000000000000000000000;;	// as illustrated in the PubSubConn example.
0000000000000000000000000000000000000000;;	func (c PubSubConn) Receive() interface{} {
0000000000000000000000000000000000000000;;		reply, err := Values(c.Conn.Receive())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var kind string
0000000000000000000000000000000000000000;;		reply, err = Scan(reply, &kind)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch kind {
0000000000000000000000000000000000000000;;		case "message":
0000000000000000000000000000000000000000;;			var m Message
0000000000000000000000000000000000000000;;			if _, err := Scan(reply, &m.Channel, &m.Data); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m
0000000000000000000000000000000000000000;;		case "pmessage":
0000000000000000000000000000000000000000;;			var pm PMessage
0000000000000000000000000000000000000000;;			if _, err := Scan(reply, &pm.Pattern, &pm.Channel, &pm.Data); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return pm
0000000000000000000000000000000000000000;;		case "subscribe", "psubscribe", "unsubscribe", "punsubscribe":
0000000000000000000000000000000000000000;;			s := Subscription{Kind: kind}
0000000000000000000000000000000000000000;;			if _, err := Scan(reply, &s.Channel, &s.Count); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		case "pong":
0000000000000000000000000000000000000000;;			var p Pong
0000000000000000000000000000000000000000;;			if _, err := Scan(reply, &p.Data); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return p
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors.New("redigo: unknown pubsub notification")
0000000000000000000000000000000000000000;;	}
