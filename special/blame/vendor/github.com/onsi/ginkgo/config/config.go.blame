0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Ginkgo accepts a number of configuration options.
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/config/config.go[Godeps/_workspace/src/github.com/onsi/ginkgo/config/config.go][vendor/github.com/onsi/ginkgo/config/config.go];	
0000000000000000000000000000000000000000;;	These are documented [here](http://onsi.github.io/ginkgo/#the_ginkgo_cli)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can also learn more via
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ginkgo help
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	or (I kid you not):
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go test -asdf
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const VERSION = "1.2.0"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GinkgoConfigType struct {
0000000000000000000000000000000000000000;;		RandomSeed         int64
0000000000000000000000000000000000000000;;		RandomizeAllSpecs  bool
0000000000000000000000000000000000000000;;		RegexScansFilePath bool
0000000000000000000000000000000000000000;;		FocusString        string
0000000000000000000000000000000000000000;;		SkipString         string
0000000000000000000000000000000000000000;;		SkipMeasurements   bool
0000000000000000000000000000000000000000;;		FailOnPending      bool
0000000000000000000000000000000000000000;;		FailFast           bool
0000000000000000000000000000000000000000;;		FlakeAttempts      int
0000000000000000000000000000000000000000;;		EmitSpecProgress   bool
0000000000000000000000000000000000000000;;		DryRun             bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ParallelNode  int
0000000000000000000000000000000000000000;;		ParallelTotal int
0000000000000000000000000000000000000000;;		SyncHost      string
0000000000000000000000000000000000000000;;		StreamHost    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var GinkgoConfig = GinkgoConfigType{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefaultReporterConfigType struct {
0000000000000000000000000000000000000000;;		NoColor           bool
0000000000000000000000000000000000000000;;		SlowSpecThreshold float64
0000000000000000000000000000000000000000;;		NoisyPendings     bool
0000000000000000000000000000000000000000;;		Succinct          bool
0000000000000000000000000000000000000000;;		Verbose           bool
0000000000000000000000000000000000000000;;		FullTrace         bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var DefaultReporterConfig = DefaultReporterConfigType{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func processPrefix(prefix string) string {
0000000000000000000000000000000000000000;;		if prefix != "" {
0000000000000000000000000000000000000000;;			prefix = prefix + "."
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return prefix
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Flags(flagSet *flag.FlagSet, prefix string, includeParallelFlags bool) {
0000000000000000000000000000000000000000;;		prefix = processPrefix(prefix)
0000000000000000000000000000000000000000;;		flagSet.Int64Var(&(GinkgoConfig.RandomSeed), prefix+"seed", time.Now().Unix(), "The seed used to randomize the spec suite.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.RandomizeAllSpecs), prefix+"randomizeAllSpecs", false, "If set, ginkgo will randomize all specs together.  By default, ginkgo only randomizes the top level Describe/Context groups.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.SkipMeasurements), prefix+"skipMeasurements", false, "If set, ginkgo will skip any measurement specs.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.FailOnPending), prefix+"failOnPending", false, "If set, ginkgo will mark the test suite as failed if any specs are pending.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.FailFast), prefix+"failFast", false, "If set, ginkgo will stop running a test suite after a failure occurs.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.DryRun), prefix+"dryRun", false, "If set, ginkgo will walk the test hierarchy without actually running anything.  Best paired with -v.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flagSet.StringVar(&(GinkgoConfig.FocusString), prefix+"focus", "", "If set, ginkgo will only run specs that match this regular expression.")
0000000000000000000000000000000000000000;;		flagSet.StringVar(&(GinkgoConfig.SkipString), prefix+"skip", "", "If set, ginkgo will only run specs that do not match this regular expression.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.RegexScansFilePath), prefix+"regexScansFilePath", false, "If set, ginkgo regex matching also will look at the file path (code location).")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flagSet.IntVar(&(GinkgoConfig.FlakeAttempts), prefix+"flakeAttempts", 1, "Make up to this many attempts to run each spec. Please note that if any of the attempts succeed, the suite will not be failed. But any failures will still be recorded.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(GinkgoConfig.EmitSpecProgress), prefix+"progress", false, "If set, ginkgo will emit progress information as each spec runs to the GinkgoWriter.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if includeParallelFlags {
0000000000000000000000000000000000000000;;			flagSet.IntVar(&(GinkgoConfig.ParallelNode), prefix+"parallel.node", 1, "This worker node's (one-indexed) node number.  For running specs in parallel.")
0000000000000000000000000000000000000000;;			flagSet.IntVar(&(GinkgoConfig.ParallelTotal), prefix+"parallel.total", 1, "The total number of worker nodes.  For running specs in parallel.")
0000000000000000000000000000000000000000;;			flagSet.StringVar(&(GinkgoConfig.SyncHost), prefix+"parallel.synchost", "", "The address for the server that will synchronize the running nodes.")
0000000000000000000000000000000000000000;;			flagSet.StringVar(&(GinkgoConfig.StreamHost), prefix+"parallel.streamhost", "", "The address for the server that the running nodes should stream data to.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(DefaultReporterConfig.NoColor), prefix+"noColor", false, "If set, suppress color output in default reporter.")
0000000000000000000000000000000000000000;;		flagSet.Float64Var(&(DefaultReporterConfig.SlowSpecThreshold), prefix+"slowSpecThreshold", 5.0, "(in seconds) Specs that take longer to run than this threshold are flagged as slow by the default reporter.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(DefaultReporterConfig.NoisyPendings), prefix+"noisyPendings", true, "If set, default reporter will shout about pending tests.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(DefaultReporterConfig.Verbose), prefix+"v", false, "If set, default reporter print out all specs as they begin.")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(DefaultReporterConfig.Succinct), prefix+"succinct", false, "If set, default reporter prints out a very succinct report")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&(DefaultReporterConfig.FullTrace), prefix+"trace", false, "If set, default reporter prints out the full stack trace when a failure occurs")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildFlagArgs(prefix string, ginkgo GinkgoConfigType, reporter DefaultReporterConfigType) []string {
0000000000000000000000000000000000000000;;		prefix = processPrefix(prefix)
0000000000000000000000000000000000000000;;		result := make([]string, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.RandomSeed > 0 {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sseed=%d", prefix, ginkgo.RandomSeed))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.RandomizeAllSpecs {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%srandomizeAllSpecs", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.SkipMeasurements {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sskipMeasurements", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.FailOnPending {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sfailOnPending", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.FailFast {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sfailFast", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.DryRun {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sdryRun", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.FocusString != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sfocus=%s", prefix, ginkgo.FocusString))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.SkipString != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sskip=%s", prefix, ginkgo.SkipString))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.FlakeAttempts > 1 {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sflakeAttempts=%d", prefix, ginkgo.FlakeAttempts))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.EmitSpecProgress {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sprogress", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.ParallelNode != 0 {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sparallel.node=%d", prefix, ginkgo.ParallelNode))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.ParallelTotal != 0 {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sparallel.total=%d", prefix, ginkgo.ParallelTotal))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.StreamHost != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sparallel.streamhost=%s", prefix, ginkgo.StreamHost))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.SyncHost != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sparallel.synchost=%s", prefix, ginkgo.SyncHost))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ginkgo.RegexScansFilePath {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sregexScansFilePath", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reporter.NoColor {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%snoColor", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reporter.SlowSpecThreshold > 0 {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sslowSpecThreshold=%.5f", prefix, reporter.SlowSpecThreshold))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reporter.NoisyPendings {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%snoisyPendings=false", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reporter.Verbose {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%sv", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reporter.Succinct {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%ssuccinct", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reporter.FullTrace {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--%strace", prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
