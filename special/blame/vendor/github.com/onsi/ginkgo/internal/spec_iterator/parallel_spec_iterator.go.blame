0000000000000000000000000000000000000000;;	package spec_iterator
cd0e559c9b88b264cf05e191e83a6e1007e0a01d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/internal/spec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParallelIterator struct {
0000000000000000000000000000000000000000;;		specs  []*spec.Spec
0000000000000000000000000000000000000000;;		host   string
0000000000000000000000000000000000000000;;		client *http.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewParallelIterator(specs []*spec.Spec, host string) *ParallelIterator {
0000000000000000000000000000000000000000;;		return &ParallelIterator{
0000000000000000000000000000000000000000;;			specs:  specs,
0000000000000000000000000000000000000000;;			host:   host,
0000000000000000000000000000000000000000;;			client: &http.Client{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ParallelIterator) Next() (*spec.Spec, error) {
0000000000000000000000000000000000000000;;		resp, err := s.client.Get(s.host + "/counter")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			return nil, errors.New(fmt.Sprintf("unexpected status code %d", resp.StatusCode))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var counter Counter
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.Body).Decode(&counter)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if counter.Index >= len(s.specs) {
0000000000000000000000000000000000000000;;			return nil, ErrClosed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s.specs[counter.Index], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ParallelIterator) NumberOfSpecsPriorToIteration() int {
0000000000000000000000000000000000000000;;		return len(s.specs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ParallelIterator) NumberOfSpecsToProcessIfKnown() (int, bool) {
0000000000000000000000000000000000000000;;		return -1, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ParallelIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool) {
0000000000000000000000000000000000000000;;		return -1, false
0000000000000000000000000000000000000000;;	}
