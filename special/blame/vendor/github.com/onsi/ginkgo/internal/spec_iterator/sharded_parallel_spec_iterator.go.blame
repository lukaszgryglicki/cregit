0000000000000000000000000000000000000000;;	package spec_iterator
cd0e559c9b88b264cf05e191e83a6e1007e0a01d;;	
0000000000000000000000000000000000000000;;	import "github.com/onsi/ginkgo/internal/spec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ShardedParallelIterator struct {
0000000000000000000000000000000000000000;;		specs    []*spec.Spec
0000000000000000000000000000000000000000;;		index    int
0000000000000000000000000000000000000000;;		maxIndex int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewShardedParallelIterator(specs []*spec.Spec, total int, node int) *ShardedParallelIterator {
0000000000000000000000000000000000000000;;		startIndex, count := ParallelizedIndexRange(len(specs), total, node)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &ShardedParallelIterator{
0000000000000000000000000000000000000000;;			specs:    specs,
0000000000000000000000000000000000000000;;			index:    startIndex,
0000000000000000000000000000000000000000;;			maxIndex: startIndex + count,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ShardedParallelIterator) Next() (*spec.Spec, error) {
0000000000000000000000000000000000000000;;		if s.index >= s.maxIndex {
0000000000000000000000000000000000000000;;			return nil, ErrClosed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := s.specs[s.index]
0000000000000000000000000000000000000000;;		s.index += 1
0000000000000000000000000000000000000000;;		return spec, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ShardedParallelIterator) NumberOfSpecsPriorToIteration() int {
0000000000000000000000000000000000000000;;		return len(s.specs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ShardedParallelIterator) NumberOfSpecsToProcessIfKnown() (int, bool) {
0000000000000000000000000000000000000000;;		return s.maxIndex - s.index, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ShardedParallelIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		for i := s.index; i < s.maxIndex; i += 1 {
0000000000000000000000000000000000000000;;			if !s.specs[i].Skipped() && !s.specs[i].Pending() {
0000000000000000000000000000000000000000;;				count += 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return count, true
0000000000000000000000000000000000000000;;	}
