0000000000000000000000000000000000000000;;	package spec_iterator
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/spec/index_computer.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/spec/index_computer.go][vendor/github.com/onsi/ginkgo/internal/spec_iterator/index_computer.go];	
0000000000000000000000000000000000000000;;	func ParallelizedIndexRange(length int, parallelTotal int, parallelNode int) (startIndex int, count int) {
0000000000000000000000000000000000000000;;		if length == 0 {
0000000000000000000000000000000000000000;;			return 0, 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We have more nodes than tests. Trivial case.
0000000000000000000000000000000000000000;;		if parallelTotal >= length {
0000000000000000000000000000000000000000;;			if parallelNode > length {
0000000000000000000000000000000000000000;;				return 0, 0
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return parallelNode - 1, 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is the minimum amount of tests that a node will be required to run
0000000000000000000000000000000000000000;;		minTestsPerNode := length / parallelTotal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is the maximum amount of tests that a node will be required to run
0000000000000000000000000000000000000000;;		// The algorithm guarantees that this would be equal to at least the minimum amount
0000000000000000000000000000000000000000;;		// and at most one more
0000000000000000000000000000000000000000;;		maxTestsPerNode := minTestsPerNode
0000000000000000000000000000000000000000;;		if length%parallelTotal != 0 {
0000000000000000000000000000000000000000;;			maxTestsPerNode++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of nodes that will have to run the maximum amount of tests per node
0000000000000000000000000000000000000000;;		numMaxLoadNodes := length % parallelTotal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of nodes that precede the current node and will have to run the maximum amount of tests per node
0000000000000000000000000000000000000000;;		var numPrecedingMaxLoadNodes int
0000000000000000000000000000000000000000;;		if parallelNode > numMaxLoadNodes {
0000000000000000000000000000000000000000;;			numPrecedingMaxLoadNodes = numMaxLoadNodes
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			numPrecedingMaxLoadNodes = parallelNode - 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of nodes that precede the current node and will have to run the minimum amount of tests per node
0000000000000000000000000000000000000000;;		var numPrecedingMinLoadNodes int
0000000000000000000000000000000000000000;;		if parallelNode <= numMaxLoadNodes {
0000000000000000000000000000000000000000;;			numPrecedingMinLoadNodes = 0
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			numPrecedingMinLoadNodes = parallelNode - numMaxLoadNodes - 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Evaluate the test start index and number of tests to run
0000000000000000000000000000000000000000;;		startIndex = numPrecedingMaxLoadNodes*maxTestsPerNode + numPrecedingMinLoadNodes*minTestsPerNode
0000000000000000000000000000000000000000;;		if parallelNode > numMaxLoadNodes {
0000000000000000000000000000000000000000;;			count = minTestsPerNode
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			count = maxTestsPerNode
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
