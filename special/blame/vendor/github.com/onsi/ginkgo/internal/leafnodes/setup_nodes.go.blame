0000000000000000000000000000000000000000;;	package leafnodes
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/leafnodes/setup_nodes.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/leafnodes/setup_nodes.go][vendor/github.com/onsi/ginkgo/internal/leafnodes/setup_nodes.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/internal/failer"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetupNode struct {
0000000000000000000000000000000000000000;;		runner *runner
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *SetupNode) Run() (outcome types.SpecState, failure types.SpecFailure) {
0000000000000000000000000000000000000000;;		return node.runner.run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *SetupNode) Type() types.SpecComponentType {
0000000000000000000000000000000000000000;;		return node.runner.nodeType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *SetupNode) CodeLocation() types.CodeLocation {
0000000000000000000000000000000000000000;;		return node.runner.codeLocation
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int) *SetupNode {
0000000000000000000000000000000000000000;;		return &SetupNode{
0000000000000000000000000000000000000000;;			runner: newRunner(body, codeLocation, timeout, failer, types.SpecComponentTypeBeforeEach, componentIndex),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int) *SetupNode {
0000000000000000000000000000000000000000;;		return &SetupNode{
0000000000000000000000000000000000000000;;			runner: newRunner(body, codeLocation, timeout, failer, types.SpecComponentTypeAfterEach, componentIndex),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewJustBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int) *SetupNode {
0000000000000000000000000000000000000000;;		return &SetupNode{
0000000000000000000000000000000000000000;;			runner: newRunner(body, codeLocation, timeout, failer, types.SpecComponentTypeJustBeforeEach, componentIndex),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
