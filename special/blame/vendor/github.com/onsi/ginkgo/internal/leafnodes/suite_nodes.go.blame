0000000000000000000000000000000000000000;;	package leafnodes
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/leafnodes/suite_nodes.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/leafnodes/suite_nodes.go][vendor/github.com/onsi/ginkgo/internal/leafnodes/suite_nodes.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/internal/failer"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuiteNode interface {
0000000000000000000000000000000000000000;;		Run(parallelNode int, parallelTotal int, syncHost string) bool
0000000000000000000000000000000000000000;;		Passed() bool
0000000000000000000000000000000000000000;;		Summary() *types.SetupSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type simpleSuiteNode struct {
0000000000000000000000000000000000000000;;		runner  *runner
0000000000000000000000000000000000000000;;		outcome types.SpecState
0000000000000000000000000000000000000000;;		failure types.SpecFailure
0000000000000000000000000000000000000000;;		runTime time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *simpleSuiteNode) Run(parallelNode int, parallelTotal int, syncHost string) bool {
0000000000000000000000000000000000000000;;		t := time.Now()
0000000000000000000000000000000000000000;;		node.outcome, node.failure = node.runner.run()
0000000000000000000000000000000000000000;;		node.runTime = time.Since(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return node.outcome == types.SpecStatePassed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *simpleSuiteNode) Passed() bool {
0000000000000000000000000000000000000000;;		return node.outcome == types.SpecStatePassed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *simpleSuiteNode) Summary() *types.SetupSummary {
0000000000000000000000000000000000000000;;		return &types.SetupSummary{
0000000000000000000000000000000000000000;;			ComponentType: node.runner.nodeType,
0000000000000000000000000000000000000000;;			CodeLocation:  node.runner.codeLocation,
0000000000000000000000000000000000000000;;			State:         node.outcome,
0000000000000000000000000000000000000000;;			RunTime:       node.runTime,
0000000000000000000000000000000000000000;;			Failure:       node.failure,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBeforeSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer) SuiteNode {
0000000000000000000000000000000000000000;;		return &simpleSuiteNode{
0000000000000000000000000000000000000000;;			runner: newRunner(body, codeLocation, timeout, failer, types.SpecComponentTypeBeforeSuite, 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAfterSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer) SuiteNode {
0000000000000000000000000000000000000000;;		return &simpleSuiteNode{
0000000000000000000000000000000000000000;;			runner: newRunner(body, codeLocation, timeout, failer, types.SpecComponentTypeAfterSuite, 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
