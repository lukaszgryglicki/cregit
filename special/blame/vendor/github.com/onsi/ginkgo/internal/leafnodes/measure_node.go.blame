0000000000000000000000000000000000000000;;	package leafnodes
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/leafnodes/measure_node.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/leafnodes/measure_node.go][vendor/github.com/onsi/ginkgo/internal/leafnodes/measure_node.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/internal/failer"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MeasureNode struct {
0000000000000000000000000000000000000000;;		runner *runner
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		text        string
0000000000000000000000000000000000000000;;		flag        types.FlagType
0000000000000000000000000000000000000000;;		samples     int
0000000000000000000000000000000000000000;;		benchmarker *benchmarker
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMeasureNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int, failer *failer.Failer, componentIndex int) *MeasureNode {
0000000000000000000000000000000000000000;;		benchmarker := newBenchmarker()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrappedBody := func() {
0000000000000000000000000000000000000000;;			reflect.ValueOf(body).Call([]reflect.Value{reflect.ValueOf(benchmarker)})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &MeasureNode{
0000000000000000000000000000000000000000;;			runner: newRunner(wrappedBody, codeLocation, 0, failer, types.SpecComponentTypeMeasure, componentIndex),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			text:        text,
0000000000000000000000000000000000000000;;			flag:        flag,
0000000000000000000000000000000000000000;;			samples:     samples,
0000000000000000000000000000000000000000;;			benchmarker: benchmarker,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) Run() (outcome types.SpecState, failure types.SpecFailure) {
0000000000000000000000000000000000000000;;		return node.runner.run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) MeasurementsReport() map[string]*types.SpecMeasurement {
0000000000000000000000000000000000000000;;		return node.benchmarker.measurementsReport()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) Type() types.SpecComponentType {
0000000000000000000000000000000000000000;;		return types.SpecComponentTypeMeasure
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) Text() string {
0000000000000000000000000000000000000000;;		return node.text
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) Flag() types.FlagType {
0000000000000000000000000000000000000000;;		return node.flag
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) CodeLocation() types.CodeLocation {
0000000000000000000000000000000000000000;;		return node.runner.codeLocation
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *MeasureNode) Samples() int {
0000000000000000000000000000000000000000;;		return node.samples
0000000000000000000000000000000000000000;;	}
