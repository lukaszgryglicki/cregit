0000000000000000000000000000000000000000;;	package containernode
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/containernode/container_node.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/containernode/container_node.go][vendor/github.com/onsi/ginkgo/internal/containernode/container_node.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/internal/leafnodes"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type subjectOrContainerNode struct {
0000000000000000000000000000000000000000;;		containerNode *ContainerNode
0000000000000000000000000000000000000000;;		subjectNode   leafnodes.SubjectNode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n subjectOrContainerNode) text() string {
0000000000000000000000000000000000000000;;		if n.containerNode != nil {
0000000000000000000000000000000000000000;;			return n.containerNode.Text()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return n.subjectNode.Text()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CollatedNodes struct {
0000000000000000000000000000000000000000;;		Containers []*ContainerNode
0000000000000000000000000000000000000000;;		Subject    leafnodes.SubjectNode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerNode struct {
0000000000000000000000000000000000000000;;		text         string
0000000000000000000000000000000000000000;;		flag         types.FlagType
0000000000000000000000000000000000000000;;		codeLocation types.CodeLocation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		setupNodes               []leafnodes.BasicNode
0000000000000000000000000000000000000000;;		subjectAndContainerNodes []subjectOrContainerNode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(text string, flag types.FlagType, codeLocation types.CodeLocation) *ContainerNode {
0000000000000000000000000000000000000000;;		return &ContainerNode{
0000000000000000000000000000000000000000;;			text:         text,
0000000000000000000000000000000000000000;;			flag:         flag,
0000000000000000000000000000000000000000;;			codeLocation: codeLocation,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (container *ContainerNode) Shuffle(r *rand.Rand) {
0000000000000000000000000000000000000000;;		sort.Sort(container)
0000000000000000000000000000000000000000;;		permutation := r.Perm(len(container.subjectAndContainerNodes))
0000000000000000000000000000000000000000;;		shuffledNodes := make([]subjectOrContainerNode, len(container.subjectAndContainerNodes))
0000000000000000000000000000000000000000;;		for i, j := range permutation {
0000000000000000000000000000000000000000;;			shuffledNodes[i] = container.subjectAndContainerNodes[j]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		container.subjectAndContainerNodes = shuffledNodes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) BackPropagateProgrammaticFocus() bool {
0000000000000000000000000000000000000000;;		if node.flag == types.FlagTypePending {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		shouldUnfocus := false
0000000000000000000000000000000000000000;;		for _, subjectOrContainerNode := range node.subjectAndContainerNodes {
0000000000000000000000000000000000000000;;			if subjectOrContainerNode.containerNode != nil {
0000000000000000000000000000000000000000;;				shouldUnfocus = subjectOrContainerNode.containerNode.BackPropagateProgrammaticFocus() || shouldUnfocus
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				shouldUnfocus = (subjectOrContainerNode.subjectNode.Flag() == types.FlagTypeFocused) || shouldUnfocus
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if shouldUnfocus {
0000000000000000000000000000000000000000;;			if node.flag == types.FlagTypeFocused {
0000000000000000000000000000000000000000;;				node.flag = types.FlagTypeNone
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return node.flag == types.FlagTypeFocused
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) Collate() []CollatedNodes {
0000000000000000000000000000000000000000;;		return node.collate([]*ContainerNode{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) collate(enclosingContainers []*ContainerNode) []CollatedNodes {
0000000000000000000000000000000000000000;;		collated := make([]CollatedNodes, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		containers := make([]*ContainerNode, len(enclosingContainers))
0000000000000000000000000000000000000000;;		copy(containers, enclosingContainers)
0000000000000000000000000000000000000000;;		containers = append(containers, node)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, subjectOrContainer := range node.subjectAndContainerNodes {
0000000000000000000000000000000000000000;;			if subjectOrContainer.containerNode != nil {
0000000000000000000000000000000000000000;;				collated = append(collated, subjectOrContainer.containerNode.collate(containers)...)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				collated = append(collated, CollatedNodes{
0000000000000000000000000000000000000000;;					Containers: containers,
0000000000000000000000000000000000000000;;					Subject:    subjectOrContainer.subjectNode,
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return collated
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) PushContainerNode(container *ContainerNode) {
0000000000000000000000000000000000000000;;		node.subjectAndContainerNodes = append(node.subjectAndContainerNodes, subjectOrContainerNode{containerNode: container})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) PushSubjectNode(subject leafnodes.SubjectNode) {
0000000000000000000000000000000000000000;;		node.subjectAndContainerNodes = append(node.subjectAndContainerNodes, subjectOrContainerNode{subjectNode: subject})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) PushSetupNode(setupNode leafnodes.BasicNode) {
0000000000000000000000000000000000000000;;		node.setupNodes = append(node.setupNodes, setupNode)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) SetupNodesOfType(nodeType types.SpecComponentType) []leafnodes.BasicNode {
0000000000000000000000000000000000000000;;		nodes := []leafnodes.BasicNode{}
0000000000000000000000000000000000000000;;		for _, setupNode := range node.setupNodes {
0000000000000000000000000000000000000000;;			if setupNode.Type() == nodeType {
0000000000000000000000000000000000000000;;				nodes = append(nodes, setupNode)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nodes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) Text() string {
0000000000000000000000000000000000000000;;		return node.text
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) CodeLocation() types.CodeLocation {
0000000000000000000000000000000000000000;;		return node.codeLocation
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) Flag() types.FlagType {
0000000000000000000000000000000000000000;;		return node.flag
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sort.Interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) Len() int {
0000000000000000000000000000000000000000;;		return len(node.subjectAndContainerNodes)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return node.subjectAndContainerNodes[i].text() < node.subjectAndContainerNodes[j].text()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (node *ContainerNode) Swap(i, j int) {
0000000000000000000000000000000000000000;;		node.subjectAndContainerNodes[i], node.subjectAndContainerNodes[j] = node.subjectAndContainerNodes[j], node.subjectAndContainerNodes[i]
0000000000000000000000000000000000000000;;	}
