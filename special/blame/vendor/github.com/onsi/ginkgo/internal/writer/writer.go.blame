0000000000000000000000000000000000000000;;	package writer
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/writer/writer.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/writer/writer.go][vendor/github.com/onsi/ginkgo/internal/writer/writer.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WriterInterface interface {
0000000000000000000000000000000000000000;;		io.Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Truncate()
0000000000000000000000000000000000000000;;		DumpOut()
0000000000000000000000000000000000000000;;		DumpOutWithHeader(header string)
0000000000000000000000000000000000000000;;		Bytes() []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Writer struct {
0000000000000000000000000000000000000000;;		buffer    *bytes.Buffer
0000000000000000000000000000000000000000;;		outWriter io.Writer
0000000000000000000000000000000000000000;;		lock      *sync.Mutex
0000000000000000000000000000000000000000;;		stream    bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(outWriter io.Writer) *Writer {
0000000000000000000000000000000000000000;;		return &Writer{
0000000000000000000000000000000000000000;;			buffer:    &bytes.Buffer{},
0000000000000000000000000000000000000000;;			lock:      &sync.Mutex{},
0000000000000000000000000000000000000000;;			outWriter: outWriter,
0000000000000000000000000000000000000000;;			stream:    true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) SetStream(stream bool) {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;		w.stream = stream
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Write(b []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n, err = w.buffer.Write(b)
0000000000000000000000000000000000000000;;		if w.stream {
0000000000000000000000000000000000000000;;			return w.outWriter.Write(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Truncate() {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;		w.buffer.Reset()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) DumpOut() {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;		if !w.stream {
0000000000000000000000000000000000000000;;			w.buffer.WriteTo(w.outWriter)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Bytes() []byte {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;		b := w.buffer.Bytes()
0000000000000000000000000000000000000000;;		copied := make([]byte, len(b))
0000000000000000000000000000000000000000;;		copy(copied, b)
0000000000000000000000000000000000000000;;		return copied
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) DumpOutWithHeader(header string) {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;		if !w.stream && w.buffer.Len() > 0 {
0000000000000000000000000000000000000000;;			w.outWriter.Write([]byte(header))
0000000000000000000000000000000000000000;;			w.buffer.WriteTo(w.outWriter)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
