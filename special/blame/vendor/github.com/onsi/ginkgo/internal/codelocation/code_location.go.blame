0000000000000000000000000000000000000000;;	package codelocation
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/codelocation/code_location.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/codelocation/code_location.go][vendor/github.com/onsi/ginkgo/internal/codelocation/code_location.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"runtime/debug"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(skip int) types.CodeLocation {
0000000000000000000000000000000000000000;;		_, file, line, _ := runtime.Caller(skip + 1)
0000000000000000000000000000000000000000;;		stackTrace := PruneStack(string(debug.Stack()), skip)
0000000000000000000000000000000000000000;;		return types.CodeLocation{FileName: file, LineNumber: line, FullStackTrace: stackTrace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PruneStack(fullStackTrace string, skip int) string {
0000000000000000000000000000000000000000;;		stack := strings.Split(fullStackTrace, "\n")
0000000000000000000000000000000000000000;;		if len(stack) > 2*(skip+1) {
0000000000000000000000000000000000000000;;			stack = stack[2*(skip+1):]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		prunedStack := []string{}
0000000000000000000000000000000000000000;;		re := regexp.MustCompile(`\/ginkgo\/|\/pkg\/testing\/|\/pkg\/runtime\/`)
0000000000000000000000000000000000000000;;		for i := 0; i < len(stack)/2; i++ {
0000000000000000000000000000000000000000;;			if !re.Match([]byte(stack[i*2])) {
0000000000000000000000000000000000000000;;				prunedStack = append(prunedStack, stack[i*2])
0000000000000000000000000000000000000000;;				prunedStack = append(prunedStack, stack[i*2+1])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(prunedStack, "\n")
0000000000000000000000000000000000000000;;	}
