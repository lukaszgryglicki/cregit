0000000000000000000000000000000000000000;;	package remote
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/remote/forwarding_reporter.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/remote/forwarding_reporter.go][vendor/github.com/onsi/ginkgo/internal/remote/forwarding_reporter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//An interface to net/http's client to allow the injection of fakes under test
0000000000000000000000000000000000000000;;	type Poster interface {
0000000000000000000000000000000000000000;;		Post(url string, bodyType string, body io.Reader) (resp *http.Response, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	The ForwardingReporter is a Ginkgo reporter that forwards information to
0000000000000000000000000000000000000000;;	a Ginkgo remote server.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When streaming parallel test output, this repoter is automatically installed by Ginkgo.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is accomplished by passing in the GINKGO_REMOTE_REPORTING_SERVER environment variable to `go test`, the Ginkgo test runner
0000000000000000000000000000000000000000;;	detects this environment variable (which should contain the host of the server) and automatically installs a ForwardingReporter
0000000000000000000000000000000000000000;;	in place of Ginkgo's DefaultReporter.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ForwardingReporter struct {
0000000000000000000000000000000000000000;;		serverHost        string
0000000000000000000000000000000000000000;;		poster            Poster
0000000000000000000000000000000000000000;;		outputInterceptor OutputInterceptor
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewForwardingReporter(serverHost string, poster Poster, outputInterceptor OutputInterceptor) *ForwardingReporter {
0000000000000000000000000000000000000000;;		return &ForwardingReporter{
0000000000000000000000000000000000000000;;			serverHost:        serverHost,
0000000000000000000000000000000000000000;;			poster:            poster,
0000000000000000000000000000000000000000;;			outputInterceptor: outputInterceptor,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) post(path string, data interface{}) {
0000000000000000000000000000000000000000;;		encoded, _ := json.Marshal(data)
0000000000000000000000000000000000000000;;		buffer := bytes.NewBuffer(encoded)
0000000000000000000000000000000000000000;;		reporter.poster.Post(reporter.serverHost+path, "application/json", buffer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) SpecSuiteWillBegin(conf config.GinkgoConfigType, summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		data := struct {
0000000000000000000000000000000000000000;;			Config  config.GinkgoConfigType `json:"config"`
0000000000000000000000000000000000000000;;			Summary *types.SuiteSummary     `json:"suite-summary"`
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			conf,
0000000000000000000000000000000000000000;;			summary,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reporter.outputInterceptor.StartInterceptingOutput()
0000000000000000000000000000000000000000;;		reporter.post("/SpecSuiteWillBegin", data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		output, _ := reporter.outputInterceptor.StopInterceptingAndReturnOutput()
0000000000000000000000000000000000000000;;		reporter.outputInterceptor.StartInterceptingOutput()
0000000000000000000000000000000000000000;;		setupSummary.CapturedOutput = output
0000000000000000000000000000000000000000;;		reporter.post("/BeforeSuiteDidRun", setupSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) SpecWillRun(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		reporter.post("/SpecWillRun", specSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) SpecDidComplete(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		output, _ := reporter.outputInterceptor.StopInterceptingAndReturnOutput()
0000000000000000000000000000000000000000;;		reporter.outputInterceptor.StartInterceptingOutput()
0000000000000000000000000000000000000000;;		specSummary.CapturedOutput = output
0000000000000000000000000000000000000000;;		reporter.post("/SpecDidComplete", specSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		output, _ := reporter.outputInterceptor.StopInterceptingAndReturnOutput()
0000000000000000000000000000000000000000;;		reporter.outputInterceptor.StartInterceptingOutput()
0000000000000000000000000000000000000000;;		setupSummary.CapturedOutput = output
0000000000000000000000000000000000000000;;		reporter.post("/AfterSuiteDidRun", setupSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *ForwardingReporter) SpecSuiteDidEnd(summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		reporter.outputInterceptor.StopInterceptingAndReturnOutput()
0000000000000000000000000000000000000000;;		reporter.post("/SpecSuiteDidEnd", summary)
0000000000000000000000000000000000000000;;	}
