0000000000000000000000000000000000000000;;	/*
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/internal/remote/aggregator.go[Godeps/_workspace/src/github.com/onsi/ginkgo/internal/remote/aggregator.go][vendor/github.com/onsi/ginkgo/internal/remote/aggregator.go];	
0000000000000000000000000000000000000000;;	Aggregator is a reporter used by the Ginkgo CLI to aggregate and present parallel test output
0000000000000000000000000000000000000000;;	coherently as tests complete.  You shouldn't need to use this in your code.  To run tests in parallel:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ginkgo -nodes=N
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	where N is the number of nodes you desire.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package remote
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/reporters/stenographer"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configAndSuite struct {
0000000000000000000000000000000000000000;;		config  config.GinkgoConfigType
0000000000000000000000000000000000000000;;		summary *types.SuiteSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Aggregator struct {
0000000000000000000000000000000000000000;;		nodeCount    int
0000000000000000000000000000000000000000;;		config       config.DefaultReporterConfigType
0000000000000000000000000000000000000000;;		stenographer stenographer.Stenographer
0000000000000000000000000000000000000000;;		result       chan bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		suiteBeginnings           chan configAndSuite
0000000000000000000000000000000000000000;;		aggregatedSuiteBeginnings []configAndSuite
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		beforeSuites           chan *types.SetupSummary
0000000000000000000000000000000000000000;;		aggregatedBeforeSuites []*types.SetupSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		afterSuites           chan *types.SetupSummary
0000000000000000000000000000000000000000;;		aggregatedAfterSuites []*types.SetupSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specCompletions chan *types.SpecSummary
0000000000000000000000000000000000000000;;		completedSpecs  []*types.SpecSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		suiteEndings           chan *types.SuiteSummary
0000000000000000000000000000000000000000;;		aggregatedSuiteEndings []*types.SuiteSummary
0000000000000000000000000000000000000000;;		specs                  []*types.SpecSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startTime time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAggregator(nodeCount int, result chan bool, config config.DefaultReporterConfigType, stenographer stenographer.Stenographer) *Aggregator {
0000000000000000000000000000000000000000;;		aggregator := &Aggregator{
0000000000000000000000000000000000000000;;			nodeCount:    nodeCount,
0000000000000000000000000000000000000000;;			result:       result,
0000000000000000000000000000000000000000;;			config:       config,
0000000000000000000000000000000000000000;;			stenographer: stenographer,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			suiteBeginnings: make(chan configAndSuite, 0),
0000000000000000000000000000000000000000;;			beforeSuites:    make(chan *types.SetupSummary, 0),
0000000000000000000000000000000000000000;;			afterSuites:     make(chan *types.SetupSummary, 0),
0000000000000000000000000000000000000000;;			specCompletions: make(chan *types.SpecSummary, 0),
0000000000000000000000000000000000000000;;			suiteEndings:    make(chan *types.SuiteSummary, 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go aggregator.mux()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return aggregator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		aggregator.suiteBeginnings <- configAndSuite{config, summary}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) BeforeSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		aggregator.beforeSuites <- setupSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) AfterSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		aggregator.afterSuites <- setupSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) SpecWillRun(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		//noop
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) SpecDidComplete(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		aggregator.specCompletions <- specSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) SpecSuiteDidEnd(summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		aggregator.suiteEndings <- summary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) mux() {
0000000000000000000000000000000000000000;;	loop:
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case configAndSuite := <-aggregator.suiteBeginnings:
0000000000000000000000000000000000000000;;				aggregator.registerSuiteBeginning(configAndSuite)
0000000000000000000000000000000000000000;;			case setupSummary := <-aggregator.beforeSuites:
0000000000000000000000000000000000000000;;				aggregator.registerBeforeSuite(setupSummary)
0000000000000000000000000000000000000000;;			case setupSummary := <-aggregator.afterSuites:
0000000000000000000000000000000000000000;;				aggregator.registerAfterSuite(setupSummary)
0000000000000000000000000000000000000000;;			case specSummary := <-aggregator.specCompletions:
0000000000000000000000000000000000000000;;				aggregator.registerSpecCompletion(specSummary)
0000000000000000000000000000000000000000;;			case suite := <-aggregator.suiteEndings:
0000000000000000000000000000000000000000;;				finished, passed := aggregator.registerSuiteEnding(suite)
0000000000000000000000000000000000000000;;				if finished {
0000000000000000000000000000000000000000;;					aggregator.result <- passed
0000000000000000000000000000000000000000;;					break loop
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) registerSuiteBeginning(configAndSuite configAndSuite) {
0000000000000000000000000000000000000000;;		aggregator.aggregatedSuiteBeginnings = append(aggregator.aggregatedSuiteBeginnings, configAndSuite)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(aggregator.aggregatedSuiteBeginnings) == 1 {
0000000000000000000000000000000000000000;;			aggregator.startTime = time.Now()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(aggregator.aggregatedSuiteBeginnings) != aggregator.nodeCount {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceSuite(configAndSuite.summary.SuiteDescription, configAndSuite.config.RandomSeed, configAndSuite.config.RandomizeAllSpecs, aggregator.config.Succinct)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		totalNumberOfSpecs := 0
0000000000000000000000000000000000000000;;		if len(aggregator.aggregatedSuiteBeginnings) > 0 {
0000000000000000000000000000000000000000;;			totalNumberOfSpecs = configAndSuite.summary.NumberOfSpecsBeforeParallelization
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceTotalNumberOfSpecs(totalNumberOfSpecs, aggregator.config.Succinct)
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceAggregatedParallelRun(aggregator.nodeCount, aggregator.config.Succinct)
0000000000000000000000000000000000000000;;		aggregator.flushCompletedSpecs()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) registerBeforeSuite(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		aggregator.aggregatedBeforeSuites = append(aggregator.aggregatedBeforeSuites, setupSummary)
0000000000000000000000000000000000000000;;		aggregator.flushCompletedSpecs()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) registerAfterSuite(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		aggregator.aggregatedAfterSuites = append(aggregator.aggregatedAfterSuites, setupSummary)
0000000000000000000000000000000000000000;;		aggregator.flushCompletedSpecs()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) registerSpecCompletion(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		aggregator.completedSpecs = append(aggregator.completedSpecs, specSummary)
0000000000000000000000000000000000000000;;		aggregator.specs = append(aggregator.specs, specSummary)
0000000000000000000000000000000000000000;;		aggregator.flushCompletedSpecs()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) flushCompletedSpecs() {
0000000000000000000000000000000000000000;;		if len(aggregator.aggregatedSuiteBeginnings) != aggregator.nodeCount {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, setupSummary := range aggregator.aggregatedBeforeSuites {
0000000000000000000000000000000000000000;;			aggregator.announceBeforeSuite(setupSummary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, specSummary := range aggregator.completedSpecs {
0000000000000000000000000000000000000000;;			aggregator.announceSpec(specSummary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, setupSummary := range aggregator.aggregatedAfterSuites {
0000000000000000000000000000000000000000;;			aggregator.announceAfterSuite(setupSummary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregator.aggregatedBeforeSuites = []*types.SetupSummary{}
0000000000000000000000000000000000000000;;		aggregator.completedSpecs = []*types.SpecSummary{}
0000000000000000000000000000000000000000;;		aggregator.aggregatedAfterSuites = []*types.SetupSummary{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) announceBeforeSuite(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceCapturedOutput(setupSummary.CapturedOutput)
0000000000000000000000000000000000000000;;		if setupSummary.State != types.SpecStatePassed {
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceBeforeSuiteFailure(setupSummary, aggregator.config.Succinct, aggregator.config.FullTrace)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) announceAfterSuite(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceCapturedOutput(setupSummary.CapturedOutput)
0000000000000000000000000000000000000000;;		if setupSummary.State != types.SpecStatePassed {
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceAfterSuiteFailure(setupSummary, aggregator.config.Succinct, aggregator.config.FullTrace)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) announceSpec(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		if aggregator.config.Verbose && specSummary.State != types.SpecStatePending && specSummary.State != types.SpecStateSkipped {
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceSpecWillRun(specSummary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceCapturedOutput(specSummary.CapturedOutput)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch specSummary.State {
0000000000000000000000000000000000000000;;		case types.SpecStatePassed:
0000000000000000000000000000000000000000;;			if specSummary.IsMeasurement {
0000000000000000000000000000000000000000;;				aggregator.stenographer.AnnounceSuccesfulMeasurement(specSummary, aggregator.config.Succinct)
0000000000000000000000000000000000000000;;			} else if specSummary.RunTime.Seconds() >= aggregator.config.SlowSpecThreshold {
0000000000000000000000000000000000000000;;				aggregator.stenographer.AnnounceSuccesfulSlowSpec(specSummary, aggregator.config.Succinct)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				aggregator.stenographer.AnnounceSuccesfulSpec(specSummary)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case types.SpecStatePending:
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnouncePendingSpec(specSummary, aggregator.config.NoisyPendings && !aggregator.config.Succinct)
0000000000000000000000000000000000000000;;		case types.SpecStateSkipped:
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceSkippedSpec(specSummary, aggregator.config.Succinct, aggregator.config.FullTrace)
0000000000000000000000000000000000000000;;		case types.SpecStateTimedOut:
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceSpecTimedOut(specSummary, aggregator.config.Succinct, aggregator.config.FullTrace)
0000000000000000000000000000000000000000;;		case types.SpecStatePanicked:
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceSpecPanicked(specSummary, aggregator.config.Succinct, aggregator.config.FullTrace)
0000000000000000000000000000000000000000;;		case types.SpecStateFailed:
0000000000000000000000000000000000000000;;			aggregator.stenographer.AnnounceSpecFailed(specSummary, aggregator.config.Succinct, aggregator.config.FullTrace)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aggregator *Aggregator) registerSuiteEnding(suite *types.SuiteSummary) (finished bool, passed bool) {
0000000000000000000000000000000000000000;;		aggregator.aggregatedSuiteEndings = append(aggregator.aggregatedSuiteEndings, suite)
0000000000000000000000000000000000000000;;		if len(aggregator.aggregatedSuiteEndings) < aggregator.nodeCount {
0000000000000000000000000000000000000000;;			return false, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregatedSuiteSummary := &types.SuiteSummary{}
0000000000000000000000000000000000000000;;		aggregatedSuiteSummary.SuiteSucceeded = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, suiteSummary := range aggregator.aggregatedSuiteEndings {
0000000000000000000000000000000000000000;;			if suiteSummary.SuiteSucceeded == false {
0000000000000000000000000000000000000000;;				aggregatedSuiteSummary.SuiteSucceeded = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfSpecsThatWillBeRun += suiteSummary.NumberOfSpecsThatWillBeRun
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfTotalSpecs += suiteSummary.NumberOfTotalSpecs
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfPassedSpecs += suiteSummary.NumberOfPassedSpecs
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfFailedSpecs += suiteSummary.NumberOfFailedSpecs
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfPendingSpecs += suiteSummary.NumberOfPendingSpecs
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfSkippedSpecs += suiteSummary.NumberOfSkippedSpecs
0000000000000000000000000000000000000000;;			aggregatedSuiteSummary.NumberOfFlakedSpecs += suiteSummary.NumberOfFlakedSpecs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregatedSuiteSummary.RunTime = time.Since(aggregator.startTime)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aggregator.stenographer.SummarizeFailures(aggregator.specs)
0000000000000000000000000000000000000000;;		aggregator.stenographer.AnnounceSpecRunCompletion(aggregatedSuiteSummary, aggregator.config.Succinct)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true, aggregatedSuiteSummary.SuiteSucceeded
0000000000000000000000000000000000000000;;	}
