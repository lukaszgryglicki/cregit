0000000000000000000000000000000000000000;;	package colorable
e07e695c44b94a0d579e53cb32d7781780627e96;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NonColorable struct {
0000000000000000000000000000000000000000;;		out     io.Writer
0000000000000000000000000000000000000000;;		lastbuf bytes.Buffer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNonColorable(w io.Writer) io.Writer {
0000000000000000000000000000000000000000;;		return &NonColorable{out: w}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *NonColorable) Write(data []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		er := bytes.NewBuffer(data)
0000000000000000000000000000000000000000;;	loop:
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			c1, _, err := er.ReadRune()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				break loop
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c1 != 0x1b {
0000000000000000000000000000000000000000;;				fmt.Fprint(w.out, string(c1))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c2, _, err := er.ReadRune()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				w.lastbuf.WriteRune(c1)
0000000000000000000000000000000000000000;;				break loop
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if c2 != 0x5b {
0000000000000000000000000000000000000000;;				w.lastbuf.WriteRune(c1)
0000000000000000000000000000000000000000;;				w.lastbuf.WriteRune(c2)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var buf bytes.Buffer
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				c, _, err := er.ReadRune()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					w.lastbuf.WriteRune(c1)
0000000000000000000000000000000000000000;;					w.lastbuf.WriteRune(c2)
0000000000000000000000000000000000000000;;					w.lastbuf.Write(buf.Bytes())
0000000000000000000000000000000000000000;;					break loop
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || c == '@' {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				buf.Write([]byte(string(c)))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(data) - w.lastbuf.Len(), nil
0000000000000000000000000000000000000000;;	}
