0000000000000000000000000000000000000000;;	package stenographer
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/stenographer/fake_stenographer.go[Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/stenographer/fake_stenographer.go][vendor/github.com/onsi/ginkgo/reporters/stenographer/fake_stenographer.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeStenographerCall(method string, args ...interface{}) FakeStenographerCall {
0000000000000000000000000000000000000000;;		return FakeStenographerCall{
0000000000000000000000000000000000000000;;			Method: method,
0000000000000000000000000000000000000000;;			Args:   args,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeStenographer struct {
0000000000000000000000000000000000000000;;		calls []FakeStenographerCall
0000000000000000000000000000000000000000;;		lock  *sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeStenographerCall struct {
0000000000000000000000000000000000000000;;		Method string
0000000000000000000000000000000000000000;;		Args   []interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeStenographer() *FakeStenographer {
0000000000000000000000000000000000000000;;		stenographer := &FakeStenographer{
0000000000000000000000000000000000000000;;			lock: &sync.Mutex{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stenographer.Reset()
0000000000000000000000000000000000000000;;		return stenographer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) Calls() []FakeStenographerCall {
0000000000000000000000000000000000000000;;		stenographer.lock.Lock()
0000000000000000000000000000000000000000;;		defer stenographer.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return stenographer.calls
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) Reset() {
0000000000000000000000000000000000000000;;		stenographer.lock.Lock()
0000000000000000000000000000000000000000;;		defer stenographer.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stenographer.calls = make([]FakeStenographerCall, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) CallsTo(method string) []FakeStenographerCall {
0000000000000000000000000000000000000000;;		stenographer.lock.Lock()
0000000000000000000000000000000000000000;;		defer stenographer.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		results := make([]FakeStenographerCall, 0)
0000000000000000000000000000000000000000;;		for _, call := range stenographer.calls {
0000000000000000000000000000000000000000;;			if call.Method == method {
0000000000000000000000000000000000000000;;				results = append(results, call)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return results
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) registerCall(method string, args ...interface{}) {
0000000000000000000000000000000000000000;;		stenographer.lock.Lock()
0000000000000000000000000000000000000000;;		defer stenographer.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stenographer.calls = append(stenographer.calls, NewFakeStenographerCall(method, args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSuite(description string, randomSeed int64, randomizingAll bool, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSuite", description, randomSeed, randomizingAll, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceAggregatedParallelRun(nodes int, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceAggregatedParallelRun", nodes, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceParallelRun(node int, nodes int, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceParallelRun", node, nodes, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceNumberOfSpecs(specsToRun int, total int, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceNumberOfSpecs", specsToRun, total, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceTotalNumberOfSpecs(total int, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceTotalNumberOfSpecs", total, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSpecRunCompletion(summary *types.SuiteSummary, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSpecRunCompletion", summary, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSpecWillRun(spec *types.SpecSummary) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSpecWillRun", spec)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceBeforeSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceBeforeSuiteFailure", summary, succinct, fullTrace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceAfterSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceAfterSuiteFailure", summary, succinct, fullTrace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceCapturedOutput(output string) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceCapturedOutput", output)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSuccesfulSpec(spec *types.SpecSummary) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSuccesfulSpec", spec)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSuccesfulSlowSpec(spec *types.SpecSummary, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSuccesfulSlowSpec", spec, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSuccesfulMeasurement(spec *types.SpecSummary, succinct bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSuccesfulMeasurement", spec, succinct)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnouncePendingSpec(spec *types.SpecSummary, noisy bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnouncePendingSpec", spec, noisy)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSkippedSpec(spec *types.SpecSummary, succinct bool, fullTrace bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSkippedSpec", spec, succinct, fullTrace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSpecTimedOut(spec *types.SpecSummary, succinct bool, fullTrace bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSpecTimedOut", spec, succinct, fullTrace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSpecPanicked(spec *types.SpecSummary, succinct bool, fullTrace bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSpecPanicked", spec, succinct, fullTrace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) AnnounceSpecFailed(spec *types.SpecSummary, succinct bool, fullTrace bool) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("AnnounceSpecFailed", spec, succinct, fullTrace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (stenographer *FakeStenographer) SummarizeFailures(summaries []*types.SpecSummary) {
0000000000000000000000000000000000000000;;		stenographer.registerCall("SummarizeFailures", summaries)
0000000000000000000000000000000000000000;;	}
