0000000000000000000000000000000000000000;;	package stenographer
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/stenographer/console_logging.go[Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/stenographer/console_logging.go][vendor/github.com/onsi/ginkgo/reporters/stenographer/console_logging.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) colorize(colorCode string, format string, args ...interface{}) string {
0000000000000000000000000000000000000000;;		var out string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(args) > 0 {
0000000000000000000000000000000000000000;;			out = fmt.Sprintf(format, args...)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out = format
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.color {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%s%s%s", colorCode, out, defaultStyle)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return out
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) printBanner(text string, bannerCharacter string) {
0000000000000000000000000000000000000000;;		fmt.Fprintln(s.w, text)
0000000000000000000000000000000000000000;;		fmt.Fprintln(s.w, strings.Repeat(bannerCharacter, len(text)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) printNewLine() {
0000000000000000000000000000000000000000;;		fmt.Fprintln(s.w, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) printDelimiter() {
0000000000000000000000000000000000000000;;		fmt.Fprintln(s.w, s.colorize(grayColor, "%s", strings.Repeat("-", 30)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) print(indentation int, format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		fmt.Fprint(s.w, s.indent(indentation, format, args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) println(indentation int, format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		fmt.Fprintln(s.w, s.indent(indentation, format, args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *consoleStenographer) indent(indentation int, format string, args ...interface{}) string {
0000000000000000000000000000000000000000;;		var text string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(args) > 0 {
0000000000000000000000000000000000000000;;			text = fmt.Sprintf(format, args...)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			text = format
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stringArray := strings.Split(text, "\n")
0000000000000000000000000000000000000000;;		padding := ""
0000000000000000000000000000000000000000;;		if indentation >= 0 {
0000000000000000000000000000000000000000;;			padding = strings.Repeat("  ", indentation)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, s := range stringArray {
0000000000000000000000000000000000000000;;			stringArray[i] = fmt.Sprintf("%s%s", padding, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strings.Join(stringArray, "\n")
0000000000000000000000000000000000000000;;	}
