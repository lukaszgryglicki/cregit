0000000000000000000000000000000000000000;;	/*
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/teamcity_reporter.go[Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/teamcity_reporter.go][vendor/github.com/onsi/ginkgo/reporters/teamcity_reporter.go];	
0000000000000000000000000000000000000000;;	TeamCity Reporter for Ginkgo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Makes use of TeamCity's support for Service Messages
0000000000000000000000000000000000000000;;	http://confluence.jetbrains.com/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingTests
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package reporters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		messageId = "##teamcity"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TeamCityReporter struct {
0000000000000000000000000000000000000000;;		writer        io.Writer
0000000000000000000000000000000000000000;;		testSuiteName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTeamCityReporter(writer io.Writer) *TeamCityReporter {
0000000000000000000000000000000000000000;;		return &TeamCityReporter{
0000000000000000000000000000000000000000;;			writer: writer,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		reporter.testSuiteName = escape(summary.SuiteDescription)
0000000000000000000000000000000000000000;;		fmt.Fprintf(reporter.writer, "%s[testSuiteStarted name='%s']", messageId, reporter.testSuiteName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		reporter.handleSetupSummary("BeforeSuite", setupSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		reporter.handleSetupSummary("AfterSuite", setupSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) handleSetupSummary(name string, setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		if setupSummary.State != types.SpecStatePassed {
0000000000000000000000000000000000000000;;			testName := escape(name)
0000000000000000000000000000000000000000;;			fmt.Fprintf(reporter.writer, "%s[testStarted name='%s']", messageId, testName)
0000000000000000000000000000000000000000;;			message := escape(setupSummary.Failure.ComponentCodeLocation.String())
0000000000000000000000000000000000000000;;			details := escape(setupSummary.Failure.Message)
0000000000000000000000000000000000000000;;			fmt.Fprintf(reporter.writer, "%s[testFailed name='%s' message='%s' details='%s']", messageId, testName, message, details)
0000000000000000000000000000000000000000;;			durationInMilliseconds := setupSummary.RunTime.Seconds() * 1000
0000000000000000000000000000000000000000;;			fmt.Fprintf(reporter.writer, "%s[testFinished name='%s' duration='%v']", messageId, testName, durationInMilliseconds)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) SpecWillRun(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		testName := escape(strings.Join(specSummary.ComponentTexts[1:], " "))
0000000000000000000000000000000000000000;;		fmt.Fprintf(reporter.writer, "%s[testStarted name='%s']", messageId, testName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) SpecDidComplete(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		testName := escape(strings.Join(specSummary.ComponentTexts[1:], " "))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if specSummary.State == types.SpecStateFailed || specSummary.State == types.SpecStateTimedOut || specSummary.State == types.SpecStatePanicked {
0000000000000000000000000000000000000000;;			message := escape(specSummary.Failure.ComponentCodeLocation.String())
0000000000000000000000000000000000000000;;			details := escape(specSummary.Failure.Message)
0000000000000000000000000000000000000000;;			fmt.Fprintf(reporter.writer, "%s[testFailed name='%s' message='%s' details='%s']", messageId, testName, message, details)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if specSummary.State == types.SpecStateSkipped || specSummary.State == types.SpecStatePending {
0000000000000000000000000000000000000000;;			fmt.Fprintf(reporter.writer, "%s[testIgnored name='%s']", messageId, testName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		durationInMilliseconds := specSummary.RunTime.Seconds() * 1000
0000000000000000000000000000000000000000;;		fmt.Fprintf(reporter.writer, "%s[testFinished name='%s' duration='%v']", messageId, testName, durationInMilliseconds)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *TeamCityReporter) SpecSuiteDidEnd(summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		fmt.Fprintf(reporter.writer, "%s[testSuiteFinished name='%s']", messageId, reporter.testSuiteName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func escape(output string) string {
0000000000000000000000000000000000000000;;		output = strings.Replace(output, "|", "||", -1)
0000000000000000000000000000000000000000;;		output = strings.Replace(output, "'", "|'", -1)
0000000000000000000000000000000000000000;;		output = strings.Replace(output, "\n", "|n", -1)
0000000000000000000000000000000000000000;;		output = strings.Replace(output, "\r", "|r", -1)
0000000000000000000000000000000000000000;;		output = strings.Replace(output, "[", "|[", -1)
0000000000000000000000000000000000000000;;		output = strings.Replace(output, "]", "|]", -1)
0000000000000000000000000000000000000000;;		return output
0000000000000000000000000000000000000000;;	}
