0000000000000000000000000000000000000000;;	/*
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/junit_reporter.go[Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/junit_reporter.go][vendor/github.com/onsi/ginkgo/reporters/junit_reporter.go];	
0000000000000000000000000000000000000000;;	JUnit XML Reporter for Ginkgo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For usage instructions: http://onsi.github.io/ginkgo/#generating_junit_xml_output
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package reporters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JUnitTestSuite struct {
0000000000000000000000000000000000000000;;		XMLName   xml.Name        `xml:"testsuite"`
0000000000000000000000000000000000000000;;		TestCases []JUnitTestCase `xml:"testcase"`
0000000000000000000000000000000000000000;;		Tests     int             `xml:"tests,attr"`
0000000000000000000000000000000000000000;;		Failures  int             `xml:"failures,attr"`
0000000000000000000000000000000000000000;;		Time      float64         `xml:"time,attr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JUnitTestCase struct {
0000000000000000000000000000000000000000;;		Name           string               `xml:"name,attr"`
0000000000000000000000000000000000000000;;		ClassName      string               `xml:"classname,attr"`
0000000000000000000000000000000000000000;;		FailureMessage *JUnitFailureMessage `xml:"failure,omitempty"`
0000000000000000000000000000000000000000;;		Skipped        *JUnitSkipped        `xml:"skipped,omitempty"`
0000000000000000000000000000000000000000;;		Time           float64              `xml:"time,attr"`
0000000000000000000000000000000000000000;;		SystemOut      string               `xml:"system-out,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JUnitFailureMessage struct {
0000000000000000000000000000000000000000;;		Type    string `xml:"type,attr"`
0000000000000000000000000000000000000000;;		Message string `xml:",chardata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JUnitSkipped struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"skipped"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JUnitReporter struct {
0000000000000000000000000000000000000000;;		suite         JUnitTestSuite
0000000000000000000000000000000000000000;;		filename      string
0000000000000000000000000000000000000000;;		testSuiteName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//NewJUnitReporter creates a new JUnit XML reporter.  The XML will be stored in the passed in filename.
0000000000000000000000000000000000000000;;	func NewJUnitReporter(filename string) *JUnitReporter {
0000000000000000000000000000000000000000;;		return &JUnitReporter{
0000000000000000000000000000000000000000;;			filename: filename,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		reporter.suite = JUnitTestSuite{
0000000000000000000000000000000000000000;;			TestCases: []JUnitTestCase{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reporter.testSuiteName = summary.SuiteDescription
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) SpecWillRun(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		reporter.handleSetupSummary("BeforeSuite", setupSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		reporter.handleSetupSummary("AfterSuite", setupSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func failureMessage(failure types.SpecFailure) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s\n%s\n%s", failure.ComponentCodeLocation.String(), failure.Message, failure.Location.String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) handleSetupSummary(name string, setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		if setupSummary.State != types.SpecStatePassed {
0000000000000000000000000000000000000000;;			testCase := JUnitTestCase{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				ClassName: reporter.testSuiteName,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testCase.FailureMessage = &JUnitFailureMessage{
0000000000000000000000000000000000000000;;				Type:    reporter.failureTypeForState(setupSummary.State),
0000000000000000000000000000000000000000;;				Message: failureMessage(setupSummary.Failure),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			testCase.SystemOut = setupSummary.CapturedOutput
0000000000000000000000000000000000000000;;			testCase.Time = setupSummary.RunTime.Seconds()
0000000000000000000000000000000000000000;;			reporter.suite.TestCases = append(reporter.suite.TestCases, testCase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) SpecDidComplete(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		testCase := JUnitTestCase{
0000000000000000000000000000000000000000;;			Name:      strings.Join(specSummary.ComponentTexts[1:], " "),
0000000000000000000000000000000000000000;;			ClassName: reporter.testSuiteName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if specSummary.State == types.SpecStateFailed || specSummary.State == types.SpecStateTimedOut || specSummary.State == types.SpecStatePanicked {
0000000000000000000000000000000000000000;;			testCase.FailureMessage = &JUnitFailureMessage{
0000000000000000000000000000000000000000;;				Type:    reporter.failureTypeForState(specSummary.State),
0000000000000000000000000000000000000000;;				Message: failureMessage(specSummary.Failure),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			testCase.SystemOut = specSummary.CapturedOutput
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if specSummary.State == types.SpecStateSkipped || specSummary.State == types.SpecStatePending {
0000000000000000000000000000000000000000;;			testCase.Skipped = &JUnitSkipped{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testCase.Time = specSummary.RunTime.Seconds()
0000000000000000000000000000000000000000;;		reporter.suite.TestCases = append(reporter.suite.TestCases, testCase)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) SpecSuiteDidEnd(summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		reporter.suite.Tests = summary.NumberOfSpecsThatWillBeRun
0000000000000000000000000000000000000000;;		reporter.suite.Time = summary.RunTime.Seconds()
0000000000000000000000000000000000000000;;		reporter.suite.Failures = summary.NumberOfFailedSpecs
0000000000000000000000000000000000000000;;		file, err := os.Create(reporter.filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Failed to create JUnit report file: %s\n\t%s", reporter.filename, err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;		file.WriteString(xml.Header)
0000000000000000000000000000000000000000;;		encoder := xml.NewEncoder(file)
0000000000000000000000000000000000000000;;		encoder.Indent("  ", "    ")
0000000000000000000000000000000000000000;;		err = encoder.Encode(reporter.suite)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Failed to generate JUnit report\n\t%s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (reporter *JUnitReporter) failureTypeForState(state types.SpecState) string {
0000000000000000000000000000000000000000;;		switch state {
0000000000000000000000000000000000000000;;		case types.SpecStateFailed:
0000000000000000000000000000000000000000;;			return "Failure"
0000000000000000000000000000000000000000;;		case types.SpecStateTimedOut:
0000000000000000000000000000000000000000;;			return "Timeout"
0000000000000000000000000000000000000000;;		case types.SpecStatePanicked:
0000000000000000000000000000000000000000;;			return "Panic"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
