0000000000000000000000000000000000000000;;	package reporters
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/fake_reporter.go[Godeps/_workspace/src/github.com/onsi/ginkgo/reporters/fake_reporter.go][vendor/github.com/onsi/ginkgo/reporters/fake_reporter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//FakeReporter is useful for testing purposes
0000000000000000000000000000000000000000;;	type FakeReporter struct {
0000000000000000000000000000000000000000;;		Config config.GinkgoConfigType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeginSummary         *types.SuiteSummary
0000000000000000000000000000000000000000;;		BeforeSuiteSummary   *types.SetupSummary
0000000000000000000000000000000000000000;;		SpecWillRunSummaries []*types.SpecSummary
0000000000000000000000000000000000000000;;		SpecSummaries        []*types.SpecSummary
0000000000000000000000000000000000000000;;		AfterSuiteSummary    *types.SetupSummary
0000000000000000000000000000000000000000;;		EndSummary           *types.SuiteSummary
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SpecWillRunStub     func(specSummary *types.SpecSummary)
0000000000000000000000000000000000000000;;		SpecDidCompleteStub func(specSummary *types.SpecSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeReporter() *FakeReporter {
0000000000000000000000000000000000000000;;		return &FakeReporter{
0000000000000000000000000000000000000000;;			SpecWillRunSummaries: make([]*types.SpecSummary, 0),
0000000000000000000000000000000000000000;;			SpecSummaries:        make([]*types.SpecSummary, 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeR *FakeReporter) SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		fakeR.Config = config
0000000000000000000000000000000000000000;;		fakeR.BeginSummary = summary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeR *FakeReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		fakeR.BeforeSuiteSummary = setupSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeR *FakeReporter) SpecWillRun(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		if fakeR.SpecWillRunStub != nil {
0000000000000000000000000000000000000000;;			fakeR.SpecWillRunStub(specSummary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeR.SpecWillRunSummaries = append(fakeR.SpecWillRunSummaries, specSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeR *FakeReporter) SpecDidComplete(specSummary *types.SpecSummary) {
0000000000000000000000000000000000000000;;		if fakeR.SpecDidCompleteStub != nil {
0000000000000000000000000000000000000000;;			fakeR.SpecDidCompleteStub(specSummary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeR.SpecSummaries = append(fakeR.SpecSummaries, specSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeR *FakeReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary) {
0000000000000000000000000000000000000000;;		fakeR.AfterSuiteSummary = setupSummary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeR *FakeReporter) SpecSuiteDidEnd(summary *types.SuiteSummary) {
0000000000000000000000000000000000000000;;		fakeR.EndSummary = summary
0000000000000000000000000000000000000000;;	}
