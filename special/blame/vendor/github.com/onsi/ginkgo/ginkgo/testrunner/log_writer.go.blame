0000000000000000000000000000000000000000;;	package testrunner
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/testrunner/log_writer.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/testrunner/log_writer.go][vendor/github.com/onsi/ginkgo/ginkgo/testrunner/log_writer.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type logWriter struct {
0000000000000000000000000000000000000000;;		buffer *bytes.Buffer
0000000000000000000000000000000000000000;;		lock   *sync.Mutex
0000000000000000000000000000000000000000;;		log    *log.Logger
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLogWriter(target io.Writer, node int) *logWriter {
0000000000000000000000000000000000000000;;		return &logWriter{
0000000000000000000000000000000000000000;;			buffer: &bytes.Buffer{},
0000000000000000000000000000000000000000;;			lock:   &sync.Mutex{},
0000000000000000000000000000000000000000;;			log:    log.New(target, fmt.Sprintf("[%d] ", node), 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *logWriter) Write(data []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.buffer.Write(data)
0000000000000000000000000000000000000000;;		contents := w.buffer.String()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lines := strings.Split(contents, "\n")
0000000000000000000000000000000000000000;;		for _, line := range lines[0 : len(lines)-1] {
0000000000000000000000000000000000000000;;			w.log.Println(line)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.buffer.Reset()
0000000000000000000000000000000000000000;;		w.buffer.Write([]byte(lines[len(lines)-1]))
0000000000000000000000000000000000000000;;		return len(data), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *logWriter) Close() error {
0000000000000000000000000000000000000000;;		w.lock.Lock()
0000000000000000000000000000000000000000;;		defer w.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if w.buffer.Len() > 0 {
0000000000000000000000000000000000000000;;			w.log.Println(w.buffer.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
