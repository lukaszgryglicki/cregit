0000000000000000000000000000000000000000;;	package convert
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert/testing_t_rewriter.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert/testing_t_rewriter.go][vendor/github.com/onsi/ginkgo/ginkgo/convert/testing_t_rewriter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"go/ast"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Rewrites any other top level funcs that receive a *testing.T param
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func rewriteOtherFuncsToUseGinkgoT(declarations []ast.Decl) {
0000000000000000000000000000000000000000;;		for _, decl := range declarations {
0000000000000000000000000000000000000000;;			decl, ok := decl.(*ast.FuncDecl)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, param := range decl.Type.Params.List {
0000000000000000000000000000000000000000;;				starExpr, ok := param.Type.(*ast.StarExpr)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				selectorExpr, ok := starExpr.X.(*ast.SelectorExpr)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				xIdent, ok := selectorExpr.X.(*ast.Ident)
0000000000000000000000000000000000000000;;				if !ok || xIdent.Name != "testing" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if selectorExpr.Sel.Name != "T" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				param.Type = newGinkgoTInterface()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Walks all of the nodes in the file, replacing *testing.T in struct
0000000000000000000000000000000000000000;;	 * and func literal nodes. eg:
0000000000000000000000000000000000000000;;	 *   type foo struct { *testing.T }
0000000000000000000000000000000000000000;;	 *   var bar = func(t *testing.T) { }
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func walkNodesInRootNodeReplacingTestingT(rootNode *ast.File) {
0000000000000000000000000000000000000000;;		ast.Inspect(rootNode, func(node ast.Node) bool {
0000000000000000000000000000000000000000;;			if node == nil {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch node := node.(type) {
0000000000000000000000000000000000000000;;			case *ast.StructType:
0000000000000000000000000000000000000000;;				replaceTestingTsInStructType(node)
0000000000000000000000000000000000000000;;			case *ast.FuncLit:
0000000000000000000000000000000000000000;;				replaceTypeDeclTestingTsInFuncLiteral(node)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * replaces named *testing.T inside a composite literal
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func replaceNamedTestingTsInKeyValueExpression(kve *ast.KeyValueExpr, testingT string) {
0000000000000000000000000000000000000000;;		ident, ok := kve.Value.(*ast.Ident)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ident.Name == testingT {
0000000000000000000000000000000000000000;;			kve.Value = newGinkgoTFromIdent(ident)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * replaces *testing.T params in a func literal with GinkgoT
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func replaceTypeDeclTestingTsInFuncLiteral(functionLiteral *ast.FuncLit) {
0000000000000000000000000000000000000000;;		for _, arg := range functionLiteral.Type.Params.List {
0000000000000000000000000000000000000000;;			starExpr, ok := arg.Type.(*ast.StarExpr)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			selectorExpr, ok := starExpr.X.(*ast.SelectorExpr)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			target, ok := selectorExpr.X.(*ast.Ident)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if target.Name == "testing" && selectorExpr.Sel.Name == "T" {
0000000000000000000000000000000000000000;;				arg.Type = newGinkgoTInterface()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Replaces *testing.T types inside of a struct declaration with a GinkgoT
0000000000000000000000000000000000000000;;	 * eg: type foo struct { *testing.T }
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func replaceTestingTsInStructType(structType *ast.StructType) {
0000000000000000000000000000000000000000;;		for _, field := range structType.Fields.List {
0000000000000000000000000000000000000000;;			starExpr, ok := field.Type.(*ast.StarExpr)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			selectorExpr, ok := starExpr.X.(*ast.SelectorExpr)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			xIdent, ok := selectorExpr.X.(*ast.Ident)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if xIdent.Name == "testing" && selectorExpr.Sel.Name == "T" {
0000000000000000000000000000000000000000;;				field.Type = newGinkgoTInterface()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
