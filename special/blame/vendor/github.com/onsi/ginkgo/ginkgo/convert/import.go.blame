0000000000000000000000000000000000000000;;	package convert
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert/import.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert/import.go][vendor/github.com/onsi/ginkgo/ginkgo/convert/import.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/ast"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Given the root node of an AST, returns the node containing the
0000000000000000000000000000000000000000;;	 * import statements for the file.
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func importsForRootNode(rootNode *ast.File) (imports *ast.GenDecl, err error) {
0000000000000000000000000000000000000000;;		for _, declaration := range rootNode.Decls {
0000000000000000000000000000000000000000;;			decl, ok := declaration.(*ast.GenDecl)
0000000000000000000000000000000000000000;;			if !ok || len(decl.Specs) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, ok = decl.Specs[0].(*ast.ImportSpec)
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				imports = decl
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = errors.New(fmt.Sprintf("Could not find imports for root node:\n\t%#v\n", rootNode))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Removes "testing" import, if present
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func removeTestingImport(rootNode *ast.File) {
0000000000000000000000000000000000000000;;		importDecl, err := importsForRootNode(rootNode)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var index int
0000000000000000000000000000000000000000;;		for i, importSpec := range importDecl.Specs {
0000000000000000000000000000000000000000;;			importSpec := importSpec.(*ast.ImportSpec)
0000000000000000000000000000000000000000;;			if importSpec.Path.Value == "\"testing\"" {
0000000000000000000000000000000000000000;;				index = i
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		importDecl.Specs = append(importDecl.Specs[:index], importDecl.Specs[index+1:]...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Adds import statements for onsi/ginkgo, if missing
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func addGinkgoImports(rootNode *ast.File) {
0000000000000000000000000000000000000000;;		importDecl, err := importsForRootNode(rootNode)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(importDecl.Specs) == 0 {
0000000000000000000000000000000000000000;;			// TODO: might need to create a import decl here
0000000000000000000000000000000000000000;;			panic("unimplemented : expected to find an imports block")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		needsGinkgo := true
0000000000000000000000000000000000000000;;		for _, importSpec := range importDecl.Specs {
0000000000000000000000000000000000000000;;			importSpec, ok := importSpec.(*ast.ImportSpec)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if importSpec.Path.Value == "\"github.com/onsi/ginkgo\"" {
0000000000000000000000000000000000000000;;				needsGinkgo = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if needsGinkgo {
0000000000000000000000000000000000000000;;			importDecl.Specs = append(importDecl.Specs, createImport(".", "\"github.com/onsi/ginkgo\""))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * convenience function to create an import statement
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func createImport(name, path string) *ast.ImportSpec {
0000000000000000000000000000000000000000;;		return &ast.ImportSpec{
0000000000000000000000000000000000000000;;			Name: &ast.Ident{Name: name},
0000000000000000000000000000000000000000;;			Path: &ast.BasicLit{Kind: 9, Value: path},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
