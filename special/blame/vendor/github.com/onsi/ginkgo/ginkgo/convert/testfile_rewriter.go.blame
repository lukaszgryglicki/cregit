0000000000000000000000000000000000000000;;	package convert
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert/testfile_rewriter.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert/testfile_rewriter.go][vendor/github.com/onsi/ginkgo/ginkgo/convert/testfile_rewriter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/ast"
0000000000000000000000000000000000000000;;		"go/format"
0000000000000000000000000000000000000000;;		"go/parser"
0000000000000000000000000000000000000000;;		"go/token"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Given a file path, rewrites any tests in the Ginkgo format.
0000000000000000000000000000000000000000;;	 * First, we parse the AST, and update the imports declaration.
0000000000000000000000000000000000000000;;	 * Then, we walk the first child elements in the file, returning tests to rewrite.
0000000000000000000000000000000000000000;;	 * A top level init func is declared, with a single Describe func inside.
0000000000000000000000000000000000000000;;	 * Then the test functions to rewrite are inserted as It statements inside the Describe.
0000000000000000000000000000000000000000;;	 * Finally we walk the rest of the file, replacing other usages of *testing.T
0000000000000000000000000000000000000000;;	 * Once that is complete, we write the AST back out again to its file.
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func rewriteTestsInFile(pathToFile string) {
0000000000000000000000000000000000000000;;		fileSet := token.NewFileSet()
0000000000000000000000000000000000000000;;		rootNode, err := parser.ParseFile(fileSet, pathToFile, nil, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Error parsing test file '%s':\n%s\n", pathToFile, err.Error()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addGinkgoImports(rootNode)
0000000000000000000000000000000000000000;;		removeTestingImport(rootNode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		varUnderscoreBlock := createVarUnderscoreBlock()
0000000000000000000000000000000000000000;;		describeBlock := createDescribeBlock()
0000000000000000000000000000000000000000;;		varUnderscoreBlock.Values = []ast.Expr{describeBlock}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, testFunc := range findTestFuncs(rootNode) {
0000000000000000000000000000000000000000;;			rewriteTestFuncAsItStatement(testFunc, rootNode, describeBlock)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		underscoreDecl := &ast.GenDecl{
0000000000000000000000000000000000000000;;			Tok:    85, // gah, magick numbers are needed to make this work
0000000000000000000000000000000000000000;;			TokPos: 14, // this tricks Go into writing "var _ = Describe"
0000000000000000000000000000000000000000;;			Specs:  []ast.Spec{varUnderscoreBlock},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imports := rootNode.Decls[0]
0000000000000000000000000000000000000000;;		tail := rootNode.Decls[1:]
0000000000000000000000000000000000000000;;		rootNode.Decls = append(append([]ast.Decl{imports}, underscoreDecl), tail...)
0000000000000000000000000000000000000000;;		rewriteOtherFuncsToUseGinkgoT(rootNode.Decls)
0000000000000000000000000000000000000000;;		walkNodesInRootNodeReplacingTestingT(rootNode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buffer bytes.Buffer
0000000000000000000000000000000000000000;;		if err = format.Node(&buffer, fileSet, rootNode); err != nil {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Error formatting ast node after rewriting tests.\n%s\n", err.Error()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fileInfo, err := os.Stat(pathToFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Error stat'ing file: %s\n", pathToFile))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ioutil.WriteFile(pathToFile, buffer.Bytes(), fileInfo.Mode())
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Given a test func named TestDoesSomethingNeat, rewrites it as
0000000000000000000000000000000000000000;;	 * It("does something neat", func() { __test_body_here__ }) and adds it
0000000000000000000000000000000000000000;;	 * to the Describe's list of statements
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func rewriteTestFuncAsItStatement(testFunc *ast.FuncDecl, rootNode *ast.File, describe *ast.CallExpr) {
0000000000000000000000000000000000000000;;		var funcIndex int = -1
0000000000000000000000000000000000000000;;		for index, child := range rootNode.Decls {
0000000000000000000000000000000000000000;;			if child == testFunc {
0000000000000000000000000000000000000000;;				funcIndex = index
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if funcIndex < 0 {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Assert failed: Error finding index for test node %s\n", testFunc.Name.Name))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var block *ast.BlockStmt = blockStatementFromDescribe(describe)
0000000000000000000000000000000000000000;;		block.List = append(block.List, createItStatementForTestFunc(testFunc))
0000000000000000000000000000000000000000;;		replaceTestingTsWithGinkgoT(block, namedTestingTArg(testFunc))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// remove the old test func from the root node's declarations
0000000000000000000000000000000000000000;;		rootNode.Decls = append(rootNode.Decls[:funcIndex], rootNode.Decls[funcIndex+1:]...)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * walks nodes inside of a test func's statements and replaces the usage of
0000000000000000000000000000000000000000;;	 * it's named *testing.T param with GinkgoT's
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func replaceTestingTsWithGinkgoT(statementsBlock *ast.BlockStmt, testingT string) {
0000000000000000000000000000000000000000;;		ast.Inspect(statementsBlock, func(node ast.Node) bool {
0000000000000000000000000000000000000000;;			if node == nil {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			keyValueExpr, ok := node.(*ast.KeyValueExpr)
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				replaceNamedTestingTsInKeyValueExpression(keyValueExpr, testingT)
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			funcLiteral, ok := node.(*ast.FuncLit)
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				replaceTypeDeclTestingTsInFuncLiteral(funcLiteral)
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			callExpr, ok := node.(*ast.CallExpr)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			replaceTestingTsInArgsLists(callExpr, testingT)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			funCall, ok := callExpr.Fun.(*ast.SelectorExpr)
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				replaceTestingTsMethodCalls(funCall, testingT)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * rewrite t.Fail() or any other *testing.T method by replacing with T().Fail()
0000000000000000000000000000000000000000;;	 * This function receives a selector expression (eg: t.Fail()) and
0000000000000000000000000000000000000000;;	 * the name of the *testing.T param from the function declaration. Rewrites the
0000000000000000000000000000000000000000;;	 * selector expression in place if the target was a *testing.T
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func replaceTestingTsMethodCalls(selectorExpr *ast.SelectorExpr, testingT string) {
0000000000000000000000000000000000000000;;		ident, ok := selectorExpr.X.(*ast.Ident)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ident.Name == testingT {
0000000000000000000000000000000000000000;;			selectorExpr.X = newGinkgoTFromIdent(ident)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * replaces usages of a named *testing.T param inside of a call expression
0000000000000000000000000000000000000000;;	 * with a new GinkgoT object
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	func replaceTestingTsInArgsLists(callExpr *ast.CallExpr, testingT string) {
0000000000000000000000000000000000000000;;		for index, arg := range callExpr.Args {
0000000000000000000000000000000000000000;;			ident, ok := arg.(*ast.Ident)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if ident.Name == testingT {
0000000000000000000000000000000000000000;;				callExpr.Args[index] = newGinkgoTFromIdent(ident)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
