0000000000000000000000000000000000000000;;	package main
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/nodot_command.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/nodot_command.go][vendor/github.com/onsi/ginkgo/ginkgo/nodot_command.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/nodot"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildNodotCommand() *Command {
0000000000000000000000000000000000000000;;		return &Command{
0000000000000000000000000000000000000000;;			Name:         "nodot",
0000000000000000000000000000000000000000;;			FlagSet:      flag.NewFlagSet("bootstrap", flag.ExitOnError),
0000000000000000000000000000000000000000;;			UsageCommand: "ginkgo nodot",
0000000000000000000000000000000000000000;;			Usage: []string{
0000000000000000000000000000000000000000;;				"Update the nodot declarations in your test suite",
0000000000000000000000000000000000000000;;				"Any missing declarations (from, say, a recently added matcher) will be added to your bootstrap file.",
0000000000000000000000000000000000000000;;				"If you've renamed a declaration, that name will be honored and not overwritten.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Command: updateNodot,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func updateNodot(args []string, additionalArgs []string) {
0000000000000000000000000000000000000000;;		suiteFile, perm := findSuiteFile()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(suiteFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			complainAndQuit("Failed to update nodot declarations: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		content, err := nodot.ApplyNoDot(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			complainAndQuit("Failed to update nodot declarations: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ioutil.WriteFile(suiteFile, content, perm)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		goFmt(suiteFile)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findSuiteFile() (string, os.FileMode) {
0000000000000000000000000000000000000000;;		workingDir, err := os.Getwd()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			complainAndQuit("Could not find suite file for nodot: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		files, err := ioutil.ReadDir(workingDir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			complainAndQuit("Could not find suite file for nodot: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		re := regexp.MustCompile(`RunSpecs\(|RunSpecsWithDefaultAndCustomReporters\(|RunSpecsWithCustomReporters\(`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, file := range files {
0000000000000000000000000000000000000000;;			if file.IsDir() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			path := filepath.Join(workingDir, file.Name())
0000000000000000000000000000000000000000;;			f, err := os.Open(path)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				complainAndQuit("Could not find suite file for nodot: " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if re.MatchReader(bufio.NewReader(f)) {
0000000000000000000000000000000000000000;;				return path, file.Mode()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		complainAndQuit("Could not find a suite file for nodot: you need a bootstrap file that call's Ginkgo's RunSpecs() command.\nTry running ginkgo bootstrap first.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", 0
0000000000000000000000000000000000000000;;	}
