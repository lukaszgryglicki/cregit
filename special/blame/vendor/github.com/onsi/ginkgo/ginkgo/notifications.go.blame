0000000000000000000000000000000000000000;;	package main
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/notifications.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/notifications.go][vendor/github.com/onsi/ginkgo/ginkgo/notifications.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/testsuite"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Notifier struct {
0000000000000000000000000000000000000000;;		commandFlags *RunWatchAndBuildCommandFlags
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNotifier(commandFlags *RunWatchAndBuildCommandFlags) *Notifier {
0000000000000000000000000000000000000000;;		return &Notifier{
0000000000000000000000000000000000000000;;			commandFlags: commandFlags,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *Notifier) VerifyNotificationsAreAvailable() {
0000000000000000000000000000000000000000;;		if n.commandFlags.Notify {
0000000000000000000000000000000000000000;;			onLinux := (runtime.GOOS == "linux")
0000000000000000000000000000000000000000;;			onOSX := (runtime.GOOS == "darwin")
0000000000000000000000000000000000000000;;			if onOSX {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				_, err := exec.LookPath("terminal-notifier")
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					fmt.Printf(`--notify requires terminal-notifier, which you don't seem to have installed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	OSX:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To remedy this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    brew install terminal-notifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To learn more about terminal-notifier:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    https://github.com/alloy/terminal-notifier
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;					os.Exit(1)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			} else if onLinux {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				_, err := exec.LookPath("notify-send")
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					fmt.Printf(`--notify requires terminal-notifier or notify-send, which you don't seem to have installed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Linux:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Download and install notify-send for your distribution
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;					os.Exit(1)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *Notifier) SendSuiteCompletionNotification(suite testsuite.TestSuite, suitePassed bool) {
0000000000000000000000000000000000000000;;		if suitePassed {
0000000000000000000000000000000000000000;;			n.SendNotification("Ginkgo [PASS]", fmt.Sprintf(`Test suite for "%s" passed.`, suite.PackageName))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			n.SendNotification("Ginkgo [FAIL]", fmt.Sprintf(`Test suite for "%s" failed.`, suite.PackageName))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *Notifier) SendNotification(title string, subtitle string) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if n.commandFlags.Notify {
0000000000000000000000000000000000000000;;			onLinux := (runtime.GOOS == "linux")
0000000000000000000000000000000000000000;;			onOSX := (runtime.GOOS == "darwin")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if onOSX {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				_, err := exec.LookPath("terminal-notifier")
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					args := []string{"-title", title, "-subtitle", subtitle, "-group", "com.onsi.ginkgo"}
0000000000000000000000000000000000000000;;					terminal := os.Getenv("TERM_PROGRAM")
0000000000000000000000000000000000000000;;					if terminal == "iTerm.app" {
0000000000000000000000000000000000000000;;						args = append(args, "-activate", "com.googlecode.iterm2")
0000000000000000000000000000000000000000;;					} else if terminal == "Apple_Terminal" {
0000000000000000000000000000000000000000;;						args = append(args, "-activate", "com.apple.Terminal")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					exec.Command("terminal-notifier", args...).Run()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			} else if onLinux {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				_, err := exec.LookPath("notify-send")
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					args := []string{"-a", "ginkgo", title, subtitle}
0000000000000000000000000000000000000000;;					exec.Command("notify-send", args...).Run()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *Notifier) RunCommand(suite testsuite.TestSuite, suitePassed bool) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		command := n.commandFlags.AfterSuiteHook
0000000000000000000000000000000000000000;;		if command != "" {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Allow for string replacement to pass input to the command
0000000000000000000000000000000000000000;;			passed := "[FAIL]"
0000000000000000000000000000000000000000;;			if suitePassed {
0000000000000000000000000000000000000000;;				passed = "[PASS]"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			command = strings.Replace(command, "(ginkgo-suite-passed)", passed, -1)
0000000000000000000000000000000000000000;;			command = strings.Replace(command, "(ginkgo-suite-name)", suite.PackageName, -1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Must break command into parts
0000000000000000000000000000000000000000;;			splitArgs := regexp.MustCompile(`'.+'|".+"|\S+`)
0000000000000000000000000000000000000000;;			parts := splitArgs.FindAllString(command, -1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			output, err := exec.Command(parts[0], parts[1:]...).CombinedOutput()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Println("Post-suite command failed:")
0000000000000000000000000000000000000000;;				if config.DefaultReporterConfig.NoColor {
0000000000000000000000000000000000000000;;					fmt.Printf("\t%s\n", output)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fmt.Printf("\t%s%s%s\n", redColor, string(output), defaultStyle)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				n.SendNotification("Ginkgo [ERROR]", fmt.Sprintf(`After suite command "%s" failed`, n.commandFlags.AfterSuiteHook))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Println("Post-suite command succeeded:")
0000000000000000000000000000000000000000;;				if config.DefaultReporterConfig.NoColor {
0000000000000000000000000000000000000000;;					fmt.Printf("\t%s\n", output)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fmt.Printf("\t%s%s%s\n", greenColor, string(output), defaultStyle)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
