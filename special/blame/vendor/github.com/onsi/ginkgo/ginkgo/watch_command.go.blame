0000000000000000000000000000000000000000;;	package main
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch_command.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch_command.go][vendor/github.com/onsi/ginkgo/ginkgo/watch_command.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/interrupthandler"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/testrunner"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/testsuite"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/watch"
0000000000000000000000000000000000000000;;		colorable "github.com/onsi/ginkgo/reporters/stenographer/support/go-colorable"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildWatchCommand() *Command {
0000000000000000000000000000000000000000;;		commandFlags := NewWatchCommandFlags(flag.NewFlagSet("watch", flag.ExitOnError))
0000000000000000000000000000000000000000;;		interruptHandler := interrupthandler.NewInterruptHandler()
0000000000000000000000000000000000000000;;		notifier := NewNotifier(commandFlags)
0000000000000000000000000000000000000000;;		watcher := &SpecWatcher{
0000000000000000000000000000000000000000;;			commandFlags:     commandFlags,
0000000000000000000000000000000000000000;;			notifier:         notifier,
0000000000000000000000000000000000000000;;			interruptHandler: interruptHandler,
0000000000000000000000000000000000000000;;			suiteRunner:      NewSuiteRunner(notifier, interruptHandler),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Command{
0000000000000000000000000000000000000000;;			Name:         "watch",
0000000000000000000000000000000000000000;;			FlagSet:      commandFlags.FlagSet,
0000000000000000000000000000000000000000;;			UsageCommand: "ginkgo watch <FLAGS> <PACKAGES> -- <PASS-THROUGHS>",
0000000000000000000000000000000000000000;;			Usage: []string{
0000000000000000000000000000000000000000;;				"Watches the tests in the passed in <PACKAGES> and runs them when changes occur.",
0000000000000000000000000000000000000000;;				"Any arguments after -- will be passed to the test.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Command:                   watcher.WatchSpecs,
0000000000000000000000000000000000000000;;			SuppressFlagDocumentation: true,
0000000000000000000000000000000000000000;;			FlagDocSubstitute: []string{
0000000000000000000000000000000000000000;;				"Accepts all the flags that the ginkgo command accepts except for --keepGoing and --untilItFails",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SpecWatcher struct {
0000000000000000000000000000000000000000;;		commandFlags     *RunWatchAndBuildCommandFlags
0000000000000000000000000000000000000000;;		notifier         *Notifier
0000000000000000000000000000000000000000;;		interruptHandler *interrupthandler.InterruptHandler
0000000000000000000000000000000000000000;;		suiteRunner      *SuiteRunner
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *SpecWatcher) WatchSpecs(args []string, additionalArgs []string) {
0000000000000000000000000000000000000000;;		w.commandFlags.computeNodes()
0000000000000000000000000000000000000000;;		w.notifier.VerifyNotificationsAreAvailable()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.WatchSuites(args, additionalArgs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *SpecWatcher) runnersForSuites(suites []testsuite.TestSuite, additionalArgs []string) []*testrunner.TestRunner {
0000000000000000000000000000000000000000;;		runners := []*testrunner.TestRunner{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, suite := range suites {
0000000000000000000000000000000000000000;;			runners = append(runners, testrunner.New(suite, w.commandFlags.NumCPU, w.commandFlags.ParallelStream, w.commandFlags.GoOpts, additionalArgs))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return runners
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *SpecWatcher) WatchSuites(args []string, additionalArgs []string) {
0000000000000000000000000000000000000000;;		suites, _ := findSuites(args, w.commandFlags.Recurse, w.commandFlags.SkipPackage, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(suites) == 0 {
0000000000000000000000000000000000000000;;			complainAndQuit("Found no test suites")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("Identified %d test %s.  Locating dependencies to a depth of %d (this may take a while)...\n", len(suites), pluralizedWord("suite", "suites", len(suites)), w.commandFlags.Depth)
0000000000000000000000000000000000000000;;		deltaTracker := watch.NewDeltaTracker(w.commandFlags.Depth)
0000000000000000000000000000000000000000;;		delta, errors := deltaTracker.Delta(suites)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("Watching %d %s:\n", len(delta.NewSuites), pluralizedWord("suite", "suites", len(delta.NewSuites)))
0000000000000000000000000000000000000000;;		for _, suite := range delta.NewSuites {
0000000000000000000000000000000000000000;;			fmt.Println("  " + suite.Description())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for suite, err := range errors {
0000000000000000000000000000000000000000;;			fmt.Printf("Failed to watch %s: %s\n", suite.PackageName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(suites) == 1 {
0000000000000000000000000000000000000000;;			runners := w.runnersForSuites(suites, additionalArgs)
0000000000000000000000000000000000000000;;			w.suiteRunner.RunSuites(runners, w.commandFlags.NumCompilers, true, nil)
0000000000000000000000000000000000000000;;			runners[0].CleanUp()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ticker := time.NewTicker(time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-ticker.C:
0000000000000000000000000000000000000000;;				suites, _ := findSuites(args, w.commandFlags.Recurse, w.commandFlags.SkipPackage, false)
0000000000000000000000000000000000000000;;				delta, _ := deltaTracker.Delta(suites)
0000000000000000000000000000000000000000;;				coloredStream := colorable.NewColorableStdout()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				suitesToRun := []testsuite.TestSuite{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if len(delta.NewSuites) > 0 {
0000000000000000000000000000000000000000;;					fmt.Fprintf(coloredStream, greenColor+"Detected %d new %s:\n"+defaultStyle, len(delta.NewSuites), pluralizedWord("suite", "suites", len(delta.NewSuites)))
0000000000000000000000000000000000000000;;					for _, suite := range delta.NewSuites {
0000000000000000000000000000000000000000;;						suitesToRun = append(suitesToRun, suite.Suite)
0000000000000000000000000000000000000000;;						fmt.Fprintln(coloredStream, "  "+suite.Description())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				modifiedSuites := delta.ModifiedSuites()
0000000000000000000000000000000000000000;;				if len(modifiedSuites) > 0 {
0000000000000000000000000000000000000000;;					fmt.Fprintln(coloredStream, greenColor+"\nDetected changes in:"+defaultStyle)
0000000000000000000000000000000000000000;;					for _, pkg := range delta.ModifiedPackages {
0000000000000000000000000000000000000000;;						fmt.Fprintln(coloredStream, "  "+pkg)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					fmt.Fprintf(coloredStream, greenColor+"Will run %d %s:\n"+defaultStyle, len(modifiedSuites), pluralizedWord("suite", "suites", len(modifiedSuites)))
0000000000000000000000000000000000000000;;					for _, suite := range modifiedSuites {
0000000000000000000000000000000000000000;;						suitesToRun = append(suitesToRun, suite.Suite)
0000000000000000000000000000000000000000;;						fmt.Fprintln(coloredStream, "  "+suite.Description())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					fmt.Fprintln(coloredStream, "")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if len(suitesToRun) > 0 {
0000000000000000000000000000000000000000;;					w.UpdateSeed()
0000000000000000000000000000000000000000;;					w.ComputeSuccinctMode(len(suitesToRun))
0000000000000000000000000000000000000000;;					runners := w.runnersForSuites(suitesToRun, additionalArgs)
0000000000000000000000000000000000000000;;					result, _ := w.suiteRunner.RunSuites(runners, w.commandFlags.NumCompilers, true, func(suite testsuite.TestSuite) {
0000000000000000000000000000000000000000;;						deltaTracker.WillRun(suite)
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;					for _, runner := range runners {
0000000000000000000000000000000000000000;;						runner.CleanUp()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !w.interruptHandler.WasInterrupted() {
0000000000000000000000000000000000000000;;						color := redColor
0000000000000000000000000000000000000000;;						if result.Passed {
0000000000000000000000000000000000000000;;							color = greenColor
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						fmt.Fprintln(coloredStream, color+"\nDone.  Resuming watch..."+defaultStyle)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case <-w.interruptHandler.C:
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *SpecWatcher) ComputeSuccinctMode(numSuites int) {
0000000000000000000000000000000000000000;;		if config.DefaultReporterConfig.Verbose {
0000000000000000000000000000000000000000;;			config.DefaultReporterConfig.Succinct = false
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if w.commandFlags.wasSet("succinct") {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if numSuites == 1 {
0000000000000000000000000000000000000000;;			config.DefaultReporterConfig.Succinct = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if numSuites > 1 {
0000000000000000000000000000000000000000;;			config.DefaultReporterConfig.Succinct = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *SpecWatcher) UpdateSeed() {
0000000000000000000000000000000000000000;;		if !w.commandFlags.wasSet("seed") {
0000000000000000000000000000000000000000;;			config.GinkgoConfig.RandomSeed = time.Now().Unix()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
