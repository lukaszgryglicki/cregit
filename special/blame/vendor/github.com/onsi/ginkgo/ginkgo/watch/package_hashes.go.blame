0000000000000000000000000000000000000000;;	package watch
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch/package_hashes.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch/package_hashes.go][vendor/github.com/onsi/ginkgo/ginkgo/watch/package_hashes.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PackageHashes struct {
0000000000000000000000000000000000000000;;		PackageHashes map[string]*PackageHash
0000000000000000000000000000000000000000;;		usedPaths     map[string]bool
0000000000000000000000000000000000000000;;		lock          *sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPackageHashes() *PackageHashes {
0000000000000000000000000000000000000000;;		return &PackageHashes{
0000000000000000000000000000000000000000;;			PackageHashes: map[string]*PackageHash{},
0000000000000000000000000000000000000000;;			usedPaths:     nil,
0000000000000000000000000000000000000000;;			lock:          &sync.Mutex{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageHashes) CheckForChanges() []string {
0000000000000000000000000000000000000000;;		p.lock.Lock()
0000000000000000000000000000000000000000;;		defer p.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		modified := []string{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, packageHash := range p.PackageHashes {
0000000000000000000000000000000000000000;;			if packageHash.CheckForChanges() {
0000000000000000000000000000000000000000;;				modified = append(modified, packageHash.path)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return modified
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageHashes) Add(path string) *PackageHash {
0000000000000000000000000000000000000000;;		p.lock.Lock()
0000000000000000000000000000000000000000;;		defer p.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		path, _ = filepath.Abs(path)
0000000000000000000000000000000000000000;;		_, ok := p.PackageHashes[path]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			p.PackageHashes[path] = NewPackageHash(path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if p.usedPaths != nil {
0000000000000000000000000000000000000000;;			p.usedPaths[path] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.PackageHashes[path]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageHashes) Get(path string) *PackageHash {
0000000000000000000000000000000000000000;;		p.lock.Lock()
0000000000000000000000000000000000000000;;		defer p.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		path, _ = filepath.Abs(path)
0000000000000000000000000000000000000000;;		if p.usedPaths != nil {
0000000000000000000000000000000000000000;;			p.usedPaths[path] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.PackageHashes[path]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageHashes) StartTrackingUsage() {
0000000000000000000000000000000000000000;;		p.lock.Lock()
0000000000000000000000000000000000000000;;		defer p.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.usedPaths = map[string]bool{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageHashes) StopTrackingUsageAndPrune() {
0000000000000000000000000000000000000000;;		p.lock.Lock()
0000000000000000000000000000000000000000;;		defer p.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for path := range p.PackageHashes {
0000000000000000000000000000000000000000;;			if !p.usedPaths[path] {
0000000000000000000000000000000000000000;;				delete(p.PackageHashes, path)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.usedPaths = nil
0000000000000000000000000000000000000000;;	}
