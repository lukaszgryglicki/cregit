0000000000000000000000000000000000000000;;	package watch
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch/suite.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch/suite.go][vendor/github.com/onsi/ginkgo/ginkgo/watch/suite.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/testsuite"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Suite struct {
0000000000000000000000000000000000000000;;		Suite        testsuite.TestSuite
0000000000000000000000000000000000000000;;		RunTime      time.Time
0000000000000000000000000000000000000000;;		Dependencies Dependencies
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sharedPackageHashes *PackageHashes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSuite(suite testsuite.TestSuite, maxDepth int, sharedPackageHashes *PackageHashes) (*Suite, error) {
0000000000000000000000000000000000000000;;		deps, err := NewDependencies(suite.Path, maxDepth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sharedPackageHashes.Add(suite.Path)
0000000000000000000000000000000000000000;;		for dep := range deps.Dependencies() {
0000000000000000000000000000000000000000;;			sharedPackageHashes.Add(dep)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Suite{
0000000000000000000000000000000000000000;;			Suite:        suite,
0000000000000000000000000000000000000000;;			Dependencies: deps,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sharedPackageHashes: sharedPackageHashes,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Suite) Delta() float64 {
0000000000000000000000000000000000000000;;		delta := s.delta(s.Suite.Path, true, 0) * 1000
0000000000000000000000000000000000000000;;		for dep, depth := range s.Dependencies.Dependencies() {
0000000000000000000000000000000000000000;;			delta += s.delta(dep, false, depth)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Suite) MarkAsRunAndRecomputedDependencies(maxDepth int) error {
0000000000000000000000000000000000000000;;		s.RunTime = time.Now()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deps, err := NewDependencies(s.Suite.Path, maxDepth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.sharedPackageHashes.Add(s.Suite.Path)
0000000000000000000000000000000000000000;;		for dep := range deps.Dependencies() {
0000000000000000000000000000000000000000;;			s.sharedPackageHashes.Add(dep)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Dependencies = deps
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Suite) Description() string {
0000000000000000000000000000000000000000;;		numDeps := len(s.Dependencies.Dependencies())
0000000000000000000000000000000000000000;;		pluralizer := "ies"
0000000000000000000000000000000000000000;;		if numDeps == 1 {
0000000000000000000000000000000000000000;;			pluralizer = "y"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s [%d dependenc%s]", s.Suite.Path, numDeps, pluralizer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Suite) delta(packagePath string, includeTests bool, depth int) float64 {
0000000000000000000000000000000000000000;;		return math.Max(float64(s.dt(packagePath, includeTests)), 0) / float64(depth+1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Suite) dt(packagePath string, includeTests bool) time.Duration {
0000000000000000000000000000000000000000;;		packageHash := s.sharedPackageHashes.Get(packagePath)
0000000000000000000000000000000000000000;;		var modifiedTime time.Time
0000000000000000000000000000000000000000;;		if includeTests {
0000000000000000000000000000000000000000;;			modifiedTime = packageHash.TestModifiedTime
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			modifiedTime = packageHash.CodeModifiedTime
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return modifiedTime.Sub(s.RunTime)
0000000000000000000000000000000000000000;;	}
