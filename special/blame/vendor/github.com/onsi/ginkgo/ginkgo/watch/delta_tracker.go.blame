0000000000000000000000000000000000000000;;	package watch
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch/delta_tracker.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/watch/delta_tracker.go][vendor/github.com/onsi/ginkgo/ginkgo/watch/delta_tracker.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/testsuite"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SuiteErrors map[testsuite.TestSuite]error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeltaTracker struct {
0000000000000000000000000000000000000000;;		maxDepth      int
0000000000000000000000000000000000000000;;		suites        map[string]*Suite
0000000000000000000000000000000000000000;;		packageHashes *PackageHashes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDeltaTracker(maxDepth int) *DeltaTracker {
0000000000000000000000000000000000000000;;		return &DeltaTracker{
0000000000000000000000000000000000000000;;			maxDepth:      maxDepth,
0000000000000000000000000000000000000000;;			packageHashes: NewPackageHashes(),
0000000000000000000000000000000000000000;;			suites:        map[string]*Suite{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DeltaTracker) Delta(suites []testsuite.TestSuite) (delta Delta, errors SuiteErrors) {
0000000000000000000000000000000000000000;;		errors = SuiteErrors{}
0000000000000000000000000000000000000000;;		delta.ModifiedPackages = d.packageHashes.CheckForChanges()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		providedSuitePaths := map[string]bool{}
0000000000000000000000000000000000000000;;		for _, suite := range suites {
0000000000000000000000000000000000000000;;			providedSuitePaths[suite.Path] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.packageHashes.StartTrackingUsage()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, suite := range d.suites {
0000000000000000000000000000000000000000;;			if providedSuitePaths[suite.Suite.Path] {
0000000000000000000000000000000000000000;;				if suite.Delta() > 0 {
0000000000000000000000000000000000000000;;					delta.modifiedSuites = append(delta.modifiedSuites, suite)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				delta.RemovedSuites = append(delta.RemovedSuites, suite)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.packageHashes.StopTrackingUsageAndPrune()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, suite := range suites {
0000000000000000000000000000000000000000;;			_, ok := d.suites[suite.Path]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				s, err := NewSuite(suite, d.maxDepth, d.packageHashes)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					errors[suite] = err
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				d.suites[suite.Path] = s
0000000000000000000000000000000000000000;;				delta.NewSuites = append(delta.NewSuites, s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return delta, errors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DeltaTracker) WillRun(suite testsuite.TestSuite) error {
0000000000000000000000000000000000000000;;		s, ok := d.suites[suite.Path]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unknown suite %s", suite.Path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s.MarkAsRunAndRecomputedDependencies(d.maxDepth)
0000000000000000000000000000000000000000;;	}
