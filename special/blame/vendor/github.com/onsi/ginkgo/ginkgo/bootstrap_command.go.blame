0000000000000000000000000000000000000000;;	package main
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/bootstrap_command.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/bootstrap_command.go][vendor/github.com/onsi/ginkgo/ginkgo/bootstrap_command.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"go/build"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/nodot"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildBootstrapCommand() *Command {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			agouti, noDot, internal bool
0000000000000000000000000000000000000000;;			customBootstrapFile     string
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		flagSet := flag.NewFlagSet("bootstrap", flag.ExitOnError)
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&agouti, "agouti", false, "If set, bootstrap will generate a bootstrap file for writing Agouti tests")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&noDot, "nodot", false, "If set, bootstrap will generate a bootstrap file that does not . import ginkgo and gomega")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&internal, "internal", false, "If set, generate will generate a test file that uses the regular package name")
0000000000000000000000000000000000000000;;		flagSet.StringVar(&customBootstrapFile, "template", "", "If specified, generate will use the contents of the file passed as the bootstrap template")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Command{
0000000000000000000000000000000000000000;;			Name:         "bootstrap",
0000000000000000000000000000000000000000;;			FlagSet:      flagSet,
0000000000000000000000000000000000000000;;			UsageCommand: "ginkgo bootstrap <FLAGS>",
0000000000000000000000000000000000000000;;			Usage: []string{
0000000000000000000000000000000000000000;;				"Bootstrap a test suite for the current package",
0000000000000000000000000000000000000000;;				"Accepts the following flags:",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Command: func(args []string, additionalArgs []string) {
0000000000000000000000000000000000000000;;				generateBootstrap(agouti, noDot, internal, customBootstrapFile)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var bootstrapText = `package {{.Package}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		{{.GinkgoImport}}
0000000000000000000000000000000000000000;;		{{.GomegaImport}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test{{.FormattedName}}(t *testing.T) {
0000000000000000000000000000000000000000;;		RegisterFailHandler(Fail)
0000000000000000000000000000000000000000;;		RunSpecs(t, "{{.FormattedName}} Suite")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var agoutiBootstrapText = `package {{.Package}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		{{.GinkgoImport}}
0000000000000000000000000000000000000000;;		{{.GomegaImport}}
0000000000000000000000000000000000000000;;		"github.com/sclevine/agouti"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test{{.FormattedName}}(t *testing.T) {
0000000000000000000000000000000000000000;;		RegisterFailHandler(Fail)
0000000000000000000000000000000000000000;;		RunSpecs(t, "{{.FormattedName}} Suite")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var agoutiDriver *agouti.WebDriver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = BeforeSuite(func() {
0000000000000000000000000000000000000000;;		// Choose a WebDriver:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		agoutiDriver = agouti.PhantomJS()
0000000000000000000000000000000000000000;;		// agoutiDriver = agouti.Selenium()
0000000000000000000000000000000000000000;;		// agoutiDriver = agouti.ChromeDriver()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expect(agoutiDriver.Start()).To(Succeed())
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = AfterSuite(func() {
0000000000000000000000000000000000000000;;		Expect(agoutiDriver.Stop()).To(Succeed())
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type bootstrapData struct {
0000000000000000000000000000000000000000;;		Package       string
0000000000000000000000000000000000000000;;		FormattedName string
0000000000000000000000000000000000000000;;		GinkgoImport  string
0000000000000000000000000000000000000000;;		GomegaImport  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPackageAndFormattedName() (string, string, string) {
0000000000000000000000000000000000000000;;		path, err := os.Getwd()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			complainAndQuit("Could not get current working directory: \n" + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dirName := strings.Replace(filepath.Base(path), "-", "_", -1)
0000000000000000000000000000000000000000;;		dirName = strings.Replace(dirName, " ", "_", -1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pkg, err := build.ImportDir(path, 0)
0000000000000000000000000000000000000000;;		packageName := pkg.Name
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			packageName = dirName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		formattedName := prettifyPackageName(filepath.Base(path))
0000000000000000000000000000000000000000;;		return packageName, dirName, formattedName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func prettifyPackageName(name string) string {
0000000000000000000000000000000000000000;;		name = strings.Replace(name, "-", " ", -1)
0000000000000000000000000000000000000000;;		name = strings.Replace(name, "_", " ", -1)
0000000000000000000000000000000000000000;;		name = strings.Title(name)
0000000000000000000000000000000000000000;;		name = strings.Replace(name, " ", "", -1)
0000000000000000000000000000000000000000;;		return name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func determinePackageName(name string, internal bool) string {
0000000000000000000000000000000000000000;;		if internal {
0000000000000000000000000000000000000000;;			return name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return name + "_test"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fileExists(path string) bool {
0000000000000000000000000000000000000000;;		_, err := os.Stat(path)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateBootstrap(agouti, noDot, internal bool, customBootstrapFile string) {
0000000000000000000000000000000000000000;;		packageName, bootstrapFilePrefix, formattedName := getPackageAndFormattedName()
0000000000000000000000000000000000000000;;		data := bootstrapData{
0000000000000000000000000000000000000000;;			Package:       determinePackageName(packageName, internal),
0000000000000000000000000000000000000000;;			FormattedName: formattedName,
0000000000000000000000000000000000000000;;			GinkgoImport:  `. "github.com/onsi/ginkgo"`,
0000000000000000000000000000000000000000;;			GomegaImport:  `. "github.com/onsi/gomega"`,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if noDot {
0000000000000000000000000000000000000000;;			data.GinkgoImport = `"github.com/onsi/ginkgo"`
0000000000000000000000000000000000000000;;			data.GomegaImport = `"github.com/onsi/gomega"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		targetFile := fmt.Sprintf("%s_suite_test.go", bootstrapFilePrefix)
0000000000000000000000000000000000000000;;		if fileExists(targetFile) {
0000000000000000000000000000000000000000;;			fmt.Printf("%s already exists.\n\n", targetFile)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			fmt.Printf("Generating ginkgo test suite bootstrap for %s in:\n\t%s\n", packageName, targetFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, err := os.Create(targetFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			complainAndQuit("Could not create file: " + err.Error())
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var templateText string
0000000000000000000000000000000000000000;;		if customBootstrapFile != "" {
0000000000000000000000000000000000000000;;			tpl, err := ioutil.ReadFile(customBootstrapFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			templateText = string(tpl)
0000000000000000000000000000000000000000;;		} else if agouti {
0000000000000000000000000000000000000000;;			templateText = agoutiBootstrapText
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			templateText = bootstrapText
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bootstrapTemplate, err := template.New("bootstrap").Parse(templateText)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		bootstrapTemplate.Execute(buf, data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if noDot {
0000000000000000000000000000000000000000;;			contents, err := nodot.ApplyNoDot(buf.Bytes())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				complainAndQuit("Failed to import nodot declarations: " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Println("To update the nodot declarations in the future, switch to this directory and run:\n\tginkgo nodot")
0000000000000000000000000000000000000000;;			buf = bytes.NewBuffer(contents)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf.WriteTo(f)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		goFmt(targetFile)
0000000000000000000000000000000000000000;;	}
