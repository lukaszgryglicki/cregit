0000000000000000000000000000000000000000;;	package main
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert_command.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/convert_command.go][vendor/github.com/onsi/ginkgo/ginkgo/convert_command.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/ginkgo/convert"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildConvertCommand() *Command {
0000000000000000000000000000000000000000;;		return &Command{
0000000000000000000000000000000000000000;;			Name:         "convert",
0000000000000000000000000000000000000000;;			FlagSet:      flag.NewFlagSet("convert", flag.ExitOnError),
0000000000000000000000000000000000000000;;			UsageCommand: "ginkgo convert /path/to/package",
0000000000000000000000000000000000000000;;			Usage: []string{
0000000000000000000000000000000000000000;;				"Convert the package at the passed in path from an XUnit-style test to a Ginkgo-style test",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Command: convertPackage,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func convertPackage(args []string, additionalArgs []string) {
0000000000000000000000000000000000000000;;		if len(args) != 1 {
0000000000000000000000000000000000000000;;			println(fmt.Sprintf("usage: ginkgo convert /path/to/your/package"))
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			err := recover()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				switch err := err.(type) {
0000000000000000000000000000000000000000;;				case error:
0000000000000000000000000000000000000000;;					println(err.Error())
0000000000000000000000000000000000000000;;				case string:
0000000000000000000000000000000000000000;;					println(err)
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					println(fmt.Sprintf("unexpected error: %#v", err))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				os.Exit(1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		convert.RewritePackage(args[0])
0000000000000000000000000000000000000000;;	}
