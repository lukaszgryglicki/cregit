0000000000000000000000000000000000000000;;	package main
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/generate_command.go[Godeps/_workspace/src/github.com/onsi/ginkgo/ginkgo/generate_command.go][vendor/github.com/onsi/ginkgo/ginkgo/generate_command.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildGenerateCommand() *Command {
0000000000000000000000000000000000000000;;		var agouti, noDot, internal bool
0000000000000000000000000000000000000000;;		flagSet := flag.NewFlagSet("generate", flag.ExitOnError)
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&agouti, "agouti", false, "If set, generate will generate a test file for writing Agouti tests")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&noDot, "nodot", false, "If set, generate will generate a test file that does not . import ginkgo and gomega")
0000000000000000000000000000000000000000;;		flagSet.BoolVar(&internal, "internal", false, "If set, generate will generate a test file that uses the regular package name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Command{
0000000000000000000000000000000000000000;;			Name:         "generate",
0000000000000000000000000000000000000000;;			FlagSet:      flagSet,
0000000000000000000000000000000000000000;;			UsageCommand: "ginkgo generate <filename(s)>",
0000000000000000000000000000000000000000;;			Usage: []string{
0000000000000000000000000000000000000000;;				"Generate a test file named filename_test.go",
0000000000000000000000000000000000000000;;				"If the optional <filenames> argument is omitted, a file named after the package in the current directory will be created.",
0000000000000000000000000000000000000000;;				"Accepts the following flags:",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Command: func(args []string, additionalArgs []string) {
0000000000000000000000000000000000000000;;				generateSpec(args, agouti, noDot, internal)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var specText = `package {{.Package}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		{{if .DotImportPackage}}. "{{.PackageImportPath}}"{{end}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{{if .IncludeImports}}. "github.com/onsi/ginkgo"{{end}}
0000000000000000000000000000000000000000;;		{{if .IncludeImports}}. "github.com/onsi/gomega"{{end}}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = Describe("{{.Subject}}", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var agoutiSpecText = `package {{.Package}}_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		{{if .DotImportPackage}}. "{{.PackageImportPath}}"{{end}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{{if .IncludeImports}}. "github.com/onsi/ginkgo"{{end}}
0000000000000000000000000000000000000000;;		{{if .IncludeImports}}. "github.com/onsi/gomega"{{end}}
0000000000000000000000000000000000000000;;		. "github.com/sclevine/agouti/matchers"
0000000000000000000000000000000000000000;;		"github.com/sclevine/agouti"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = Describe("{{.Subject}}", func() {
0000000000000000000000000000000000000000;;		var page *agouti.Page
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			page, err = agoutiDriver.NewPage()
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AfterEach(func() {
0000000000000000000000000000000000000000;;			Expect(page.Destroy()).To(Succeed())
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type specData struct {
0000000000000000000000000000000000000000;;		Package           string
0000000000000000000000000000000000000000;;		Subject           string
0000000000000000000000000000000000000000;;		PackageImportPath string
0000000000000000000000000000000000000000;;		IncludeImports    bool
0000000000000000000000000000000000000000;;		DotImportPackage  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateSpec(args []string, agouti, noDot, internal bool) {
0000000000000000000000000000000000000000;;		if len(args) == 0 {
0000000000000000000000000000000000000000;;			err := generateSpecForSubject("", agouti, noDot, internal)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Println(err.Error())
0000000000000000000000000000000000000000;;				fmt.Println("")
0000000000000000000000000000000000000000;;				os.Exit(1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Println("")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var failed bool
0000000000000000000000000000000000000000;;		for _, arg := range args {
0000000000000000000000000000000000000000;;			err := generateSpecForSubject(arg, agouti, noDot, internal)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				failed = true
0000000000000000000000000000000000000000;;				fmt.Println(err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println("")
0000000000000000000000000000000000000000;;		if failed {
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateSpecForSubject(subject string, agouti, noDot, internal bool) error {
0000000000000000000000000000000000000000;;		packageName, specFilePrefix, formattedName := getPackageAndFormattedName()
0000000000000000000000000000000000000000;;		if subject != "" {
0000000000000000000000000000000000000000;;			subject = strings.Split(subject, ".go")[0]
0000000000000000000000000000000000000000;;			subject = strings.Split(subject, "_test")[0]
0000000000000000000000000000000000000000;;			specFilePrefix = subject
0000000000000000000000000000000000000000;;			formattedName = prettifyPackageName(subject)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data := specData{
0000000000000000000000000000000000000000;;			Package:           determinePackageName(packageName, internal),
0000000000000000000000000000000000000000;;			Subject:           formattedName,
0000000000000000000000000000000000000000;;			PackageImportPath: getPackageImportPath(),
0000000000000000000000000000000000000000;;			IncludeImports:    !noDot,
0000000000000000000000000000000000000000;;			DotImportPackage:  !internal,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		targetFile := fmt.Sprintf("%s_test.go", specFilePrefix)
0000000000000000000000000000000000000000;;		if fileExists(targetFile) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%s already exists.", targetFile)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			fmt.Printf("Generating ginkgo test for %s in:\n  %s\n", data.Subject, targetFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, err := os.Create(targetFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var templateText string
0000000000000000000000000000000000000000;;		if agouti {
0000000000000000000000000000000000000000;;			templateText = agoutiSpecText
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			templateText = specText
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specTemplate, err := template.New("spec").Parse(templateText)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specTemplate.Execute(f, data)
0000000000000000000000000000000000000000;;		goFmt(targetFile)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPackageImportPath() string {
0000000000000000000000000000000000000000;;		workingDir, err := os.Getwd()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sep := string(filepath.Separator)
0000000000000000000000000000000000000000;;		paths := strings.Split(workingDir, sep+"src"+sep)
0000000000000000000000000000000000000000;;		if len(paths) == 1 {
0000000000000000000000000000000000000000;;			fmt.Printf("\nCouldn't identify package import path.\n\n\tginkgo generate\n\nMust be run within a package directory under $GOPATH/src/...\nYou're going to have to change UNKNOWN_PACKAGE_PATH in the generated file...\n\n")
0000000000000000000000000000000000000000;;			return "UNKNOWN_PACKAGE_PATH"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filepath.ToSlash(paths[len(paths)-1])
0000000000000000000000000000000000000000;;	}
