0000000000000000000000000000000000000000;;	package matchers
6fbb4e2d06136859d549eaad7d91c4718cc836bc;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"gopkg.in/yaml.v2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MatchYAMLMatcher struct {
0000000000000000000000000000000000000000;;		YAMLToMatch interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchYAMLMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		actualString, expectedString, err := matcher.toStrings(actual)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var aval interface{}
0000000000000000000000000000000000000000;;		var eval interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := yaml.Unmarshal([]byte(actualString), &aval); err != nil {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Actual '%s' should be valid YAML, but it is not.\nUnderlying error:%s", actualString, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := yaml.Unmarshal([]byte(expectedString), &eval); err != nil {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected '%s' should be valid YAML, but it is not.\nUnderlying error:%s", expectedString, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(aval, eval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchYAMLMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		actualString, expectedString, _ := matcher.toNormalisedStrings(actual)
0000000000000000000000000000000000000000;;		return format.Message(actualString, "to match YAML of", expectedString)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchYAMLMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		actualString, expectedString, _ := matcher.toNormalisedStrings(actual)
0000000000000000000000000000000000000000;;		return format.Message(actualString, "not to match YAML of", expectedString)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchYAMLMatcher) toNormalisedStrings(actual interface{}) (actualFormatted, expectedFormatted string, err error) {
0000000000000000000000000000000000000000;;		actualString, expectedString, err := matcher.toStrings(actual)
0000000000000000000000000000000000000000;;		return normalise(actualString), normalise(expectedString), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func normalise(input string) string {
0000000000000000000000000000000000000000;;		var val interface{}
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal([]byte(input), &val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err) // guarded by Match
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := yaml.Marshal(val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err) // guarded by Unmarshal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.TrimSpace(string(output))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchYAMLMatcher) toStrings(actual interface{}) (actualFormatted, expectedFormatted string, err error) {
0000000000000000000000000000000000000000;;		actualString, ok := toString(actual)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("MatchYAMLMatcher matcher requires a string, stringer, or []byte.  Got actual:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedString, ok := toString(matcher.YAMLToMatch)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("MatchYAMLMatcher matcher requires a string, stringer, or []byte.  Got expected:\n%s", format.Object(matcher.YAMLToMatch, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return actualString, expectedString, nil
0000000000000000000000000000000000000000;;	}
