0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/assignable_to_type_of_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/assignable_to_type_of_matcher.go][vendor/github.com/onsi/gomega/matchers/assignable_to_type_of_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssignableToTypeOfMatcher struct {
0000000000000000000000000000000000000000;;		Expected interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *AssignableToTypeOfMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if actual == nil || matcher.Expected == nil {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Refusing to compare <nil> to <nil>.\nBe explicit and use BeNil() instead.  This is to avoid mistakes where both sides of an assertion are erroneously uninitialized.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualType := reflect.TypeOf(actual)
0000000000000000000000000000000000000000;;		expectedType := reflect.TypeOf(matcher.Expected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return actualType.AssignableTo(expectedType), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *AssignableToTypeOfMatcher) FailureMessage(actual interface{}) string {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("to be assignable to the type: %T", matcher.Expected))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *AssignableToTypeOfMatcher) NegatedFailureMessage(actual interface{}) string {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("not to be assignable to the type: %T", matcher.Expected))
0000000000000000000000000000000000000000;;	}
