0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_numerically_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_numerically_matcher.go][vendor/github.com/onsi/gomega/matchers/be_numerically_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BeNumericallyMatcher struct {
0000000000000000000000000000000000000000;;		Comparator string
0000000000000000000000000000000000000000;;		CompareTo  []interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeNumericallyMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("to be %s", matcher.Comparator), matcher.CompareTo[0])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeNumericallyMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("not to be %s", matcher.Comparator), matcher.CompareTo[0])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeNumericallyMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if len(matcher.CompareTo) == 0 || len(matcher.CompareTo) > 2 {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("BeNumerically requires 1 or 2 CompareTo arguments.  Got:\n%s", format.Object(matcher.CompareTo, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !isNumber(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected a number.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !isNumber(matcher.CompareTo[0]) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected a number.  Got:\n%s", format.Object(matcher.CompareTo[0], 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(matcher.CompareTo) == 2 && !isNumber(matcher.CompareTo[1]) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected a number.  Got:\n%s", format.Object(matcher.CompareTo[0], 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch matcher.Comparator {
0000000000000000000000000000000000000000;;		case "==", "~", ">", ">=", "<", "<=":
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Unknown comparator: %s", matcher.Comparator)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isFloat(actual) || isFloat(matcher.CompareTo[0]) {
0000000000000000000000000000000000000000;;			var secondOperand float64 = 1e-8
0000000000000000000000000000000000000000;;			if len(matcher.CompareTo) == 2 {
0000000000000000000000000000000000000000;;				secondOperand = toFloat(matcher.CompareTo[1])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			success = matcher.matchFloats(toFloat(actual), toFloat(matcher.CompareTo[0]), secondOperand)
0000000000000000000000000000000000000000;;		} else if isInteger(actual) {
0000000000000000000000000000000000000000;;			var secondOperand int64 = 0
0000000000000000000000000000000000000000;;			if len(matcher.CompareTo) == 2 {
0000000000000000000000000000000000000000;;				secondOperand = toInteger(matcher.CompareTo[1])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			success = matcher.matchIntegers(toInteger(actual), toInteger(matcher.CompareTo[0]), secondOperand)
0000000000000000000000000000000000000000;;		} else if isUnsignedInteger(actual) {
0000000000000000000000000000000000000000;;			var secondOperand uint64 = 0
0000000000000000000000000000000000000000;;			if len(matcher.CompareTo) == 2 {
0000000000000000000000000000000000000000;;				secondOperand = toUnsignedInteger(matcher.CompareTo[1])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			success = matcher.matchUnsignedIntegers(toUnsignedInteger(actual), toUnsignedInteger(matcher.CompareTo[0]), secondOperand)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Failed to compare:\n%s\n%s:\n%s", format.Object(actual, 1), matcher.Comparator, format.Object(matcher.CompareTo[0], 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return success, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeNumericallyMatcher) matchIntegers(actual, compareTo, threshold int64) (success bool) {
0000000000000000000000000000000000000000;;		switch matcher.Comparator {
0000000000000000000000000000000000000000;;		case "==", "~":
0000000000000000000000000000000000000000;;			diff := actual - compareTo
0000000000000000000000000000000000000000;;			return -threshold <= diff && diff <= threshold
0000000000000000000000000000000000000000;;		case ">":
0000000000000000000000000000000000000000;;			return (actual > compareTo)
0000000000000000000000000000000000000000;;		case ">=":
0000000000000000000000000000000000000000;;			return (actual >= compareTo)
0000000000000000000000000000000000000000;;		case "<":
0000000000000000000000000000000000000000;;			return (actual < compareTo)
0000000000000000000000000000000000000000;;		case "<=":
0000000000000000000000000000000000000000;;			return (actual <= compareTo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeNumericallyMatcher) matchUnsignedIntegers(actual, compareTo, threshold uint64) (success bool) {
0000000000000000000000000000000000000000;;		switch matcher.Comparator {
0000000000000000000000000000000000000000;;		case "==", "~":
0000000000000000000000000000000000000000;;			if actual < compareTo {
0000000000000000000000000000000000000000;;				actual, compareTo = compareTo, actual
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return actual-compareTo <= threshold
0000000000000000000000000000000000000000;;		case ">":
0000000000000000000000000000000000000000;;			return (actual > compareTo)
0000000000000000000000000000000000000000;;		case ">=":
0000000000000000000000000000000000000000;;			return (actual >= compareTo)
0000000000000000000000000000000000000000;;		case "<":
0000000000000000000000000000000000000000;;			return (actual < compareTo)
0000000000000000000000000000000000000000;;		case "<=":
0000000000000000000000000000000000000000;;			return (actual <= compareTo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeNumericallyMatcher) matchFloats(actual, compareTo, threshold float64) (success bool) {
0000000000000000000000000000000000000000;;		switch matcher.Comparator {
0000000000000000000000000000000000000000;;		case "~":
0000000000000000000000000000000000000000;;			return math.Abs(actual-compareTo) <= threshold
0000000000000000000000000000000000000000;;		case "==":
0000000000000000000000000000000000000000;;			return (actual == compareTo)
0000000000000000000000000000000000000000;;		case ">":
0000000000000000000000000000000000000000;;			return (actual > compareTo)
0000000000000000000000000000000000000000;;		case ">=":
0000000000000000000000000000000000000000;;			return (actual >= compareTo)
0000000000000000000000000000000000000000;;		case "<":
0000000000000000000000000000000000000000;;			return (actual < compareTo)
0000000000000000000000000000000000000000;;		case "<=":
0000000000000000000000000000000000000000;;			return (actual <= compareTo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
