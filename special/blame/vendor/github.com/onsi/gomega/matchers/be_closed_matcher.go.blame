0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_closed_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_closed_matcher.go][vendor/github.com/onsi/gomega/matchers/be_closed_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BeClosedMatcher struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeClosedMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if !isChan(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("BeClosed matcher expects a channel.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		channelType := reflect.TypeOf(actual)
0000000000000000000000000000000000000000;;		channelValue := reflect.ValueOf(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if channelType.ChanDir() == reflect.SendDir {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("BeClosed matcher cannot determine if a send-only channel is closed or open.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		winnerIndex, _, open := reflect.Select([]reflect.SelectCase{
0000000000000000000000000000000000000000;;			reflect.SelectCase{Dir: reflect.SelectRecv, Chan: channelValue},
0000000000000000000000000000000000000000;;			reflect.SelectCase{Dir: reflect.SelectDefault},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var closed bool
0000000000000000000000000000000000000000;;		if winnerIndex == 0 {
0000000000000000000000000000000000000000;;			closed = !open
0000000000000000000000000000000000000000;;		} else if winnerIndex == 1 {
0000000000000000000000000000000000000000;;			closed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return closed, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeClosedMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "to be closed")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeClosedMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "to be open")
0000000000000000000000000000000000000000;;	}
