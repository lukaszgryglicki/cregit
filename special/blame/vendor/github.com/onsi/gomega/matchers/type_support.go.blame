0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Gomega matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/type_support.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/type_support.go][vendor/github.com/onsi/gomega/matchers/type_support.go];	
0000000000000000000000000000000000000000;;	This package implements the Gomega matchers and does not typically need to be imported.
0000000000000000000000000000000000000000;;	See the docs for Gomega for documentation on the matchers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	http://onsi.github.io/gomega/
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package matchers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type omegaMatcher interface {
0000000000000000000000000000000000000000;;		Match(actual interface{}) (success bool, err error)
0000000000000000000000000000000000000000;;		FailureMessage(actual interface{}) (message string)
0000000000000000000000000000000000000000;;		NegatedFailureMessage(actual interface{}) (message string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isBool(a interface{}) bool {
0000000000000000000000000000000000000000;;		return reflect.TypeOf(a).Kind() == reflect.Bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isNumber(a interface{}) bool {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kind := reflect.TypeOf(a).Kind()
0000000000000000000000000000000000000000;;		return reflect.Int <= kind && kind <= reflect.Float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isInteger(a interface{}) bool {
0000000000000000000000000000000000000000;;		kind := reflect.TypeOf(a).Kind()
0000000000000000000000000000000000000000;;		return reflect.Int <= kind && kind <= reflect.Int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isUnsignedInteger(a interface{}) bool {
0000000000000000000000000000000000000000;;		kind := reflect.TypeOf(a).Kind()
0000000000000000000000000000000000000000;;		return reflect.Uint <= kind && kind <= reflect.Uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isFloat(a interface{}) bool {
0000000000000000000000000000000000000000;;		kind := reflect.TypeOf(a).Kind()
0000000000000000000000000000000000000000;;		return reflect.Float32 <= kind && kind <= reflect.Float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toInteger(a interface{}) int64 {
0000000000000000000000000000000000000000;;		if isInteger(a) {
0000000000000000000000000000000000000000;;			return reflect.ValueOf(a).Int()
0000000000000000000000000000000000000000;;		} else if isUnsignedInteger(a) {
0000000000000000000000000000000000000000;;			return int64(reflect.ValueOf(a).Uint())
0000000000000000000000000000000000000000;;		} else if isFloat(a) {
0000000000000000000000000000000000000000;;			return int64(reflect.ValueOf(a).Float())
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Expected a number!  Got <%T> %#v", a, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toUnsignedInteger(a interface{}) uint64 {
0000000000000000000000000000000000000000;;		if isInteger(a) {
0000000000000000000000000000000000000000;;			return uint64(reflect.ValueOf(a).Int())
0000000000000000000000000000000000000000;;		} else if isUnsignedInteger(a) {
0000000000000000000000000000000000000000;;			return reflect.ValueOf(a).Uint()
0000000000000000000000000000000000000000;;		} else if isFloat(a) {
0000000000000000000000000000000000000000;;			return uint64(reflect.ValueOf(a).Float())
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Expected a number!  Got <%T> %#v", a, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toFloat(a interface{}) float64 {
0000000000000000000000000000000000000000;;		if isInteger(a) {
0000000000000000000000000000000000000000;;			return float64(reflect.ValueOf(a).Int())
0000000000000000000000000000000000000000;;		} else if isUnsignedInteger(a) {
0000000000000000000000000000000000000000;;			return float64(reflect.ValueOf(a).Uint())
0000000000000000000000000000000000000000;;		} else if isFloat(a) {
0000000000000000000000000000000000000000;;			return reflect.ValueOf(a).Float()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Expected a number!  Got <%T> %#v", a, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isError(a interface{}) bool {
0000000000000000000000000000000000000000;;		_, ok := a.(error)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isChan(a interface{}) bool {
0000000000000000000000000000000000000000;;		if isNil(a) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return reflect.TypeOf(a).Kind() == reflect.Chan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isMap(a interface{}) bool {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return reflect.TypeOf(a).Kind() == reflect.Map
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isArrayOrSlice(a interface{}) bool {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reflect.TypeOf(a).Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array, reflect.Slice:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isString(a interface{}) bool {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return reflect.TypeOf(a).Kind() == reflect.String
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toString(a interface{}) (string, bool) {
0000000000000000000000000000000000000000;;		aString, isString := a.(string)
0000000000000000000000000000000000000000;;		if isString {
0000000000000000000000000000000000000000;;			return aString, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aBytes, isBytes := a.([]byte)
0000000000000000000000000000000000000000;;		if isBytes {
0000000000000000000000000000000000000000;;			return string(aBytes), true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aStringer, isStringer := a.(fmt.Stringer)
0000000000000000000000000000000000000000;;		if isStringer {
0000000000000000000000000000000000000000;;			return aStringer.String(), true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lengthOf(a interface{}) (int, bool) {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reflect.TypeOf(a).Kind() {
0000000000000000000000000000000000000000;;		case reflect.Map, reflect.Array, reflect.String, reflect.Chan, reflect.Slice:
0000000000000000000000000000000000000000;;			return reflect.ValueOf(a).Len(), true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func capOf(a interface{}) (int, bool) {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch reflect.TypeOf(a).Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array, reflect.Chan, reflect.Slice:
0000000000000000000000000000000000000000;;			return reflect.ValueOf(a).Cap(), true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isNil(a interface{}) bool {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch reflect.TypeOf(a).Kind() {
0000000000000000000000000000000000000000;;		case reflect.Chan, reflect.Func, reflect.Interface, reflect.Map, reflect.Ptr, reflect.Slice:
0000000000000000000000000000000000000000;;			return reflect.ValueOf(a).IsNil()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
