0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/equal_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/equal_matcher.go][vendor/github.com/onsi/gomega/matchers/equal_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EqualMatcher struct {
0000000000000000000000000000000000000000;;		Expected interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *EqualMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if actual == nil && matcher.Expected == nil {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Refusing to compare <nil> to <nil>.\nBe explicit and use BeNil() instead.  This is to avoid mistakes where both sides of an assertion are erroneously uninitialized.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(actual, matcher.Expected), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *EqualMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "to equal", matcher.Expected)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *EqualMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "not to equal", matcher.Expected)
0000000000000000000000000000000000000000;;	}
