0000000000000000000000000000000000000000;;	package matchers
bd1ba01e8c3d94f344e03c9790e8df7c23a617c8;Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_a_regular_file.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_a_regular_file.go][vendor/github.com/onsi/gomega/matchers/be_a_regular_file.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type notARegularFileError struct {
0000000000000000000000000000000000000000;;		os.FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t notARegularFileError) Error() string {
0000000000000000000000000000000000000000;;		fileInfo := os.FileInfo(t)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case fileInfo.IsDir():
0000000000000000000000000000000000000000;;			return "file is a directory"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("file mode is: %s", fileInfo.Mode().String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BeARegularFileMatcher struct {
0000000000000000000000000000000000000000;;		expected interface{}
0000000000000000000000000000000000000000;;		err      error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeARegularFileMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		actualFilename, ok := actual.(string)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("BeARegularFileMatcher matcher expects a file path")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fileInfo, err := os.Stat(actualFilename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			matcher.err = err
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !fileInfo.Mode().IsRegular() {
0000000000000000000000000000000000000000;;			matcher.err = notARegularFileError{fileInfo}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeARegularFileMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("to be a regular file: %s", matcher.err))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeARegularFileMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("not be a regular file"))
0000000000000000000000000000000000000000;;	}
