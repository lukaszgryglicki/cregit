0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/contain_substring_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/contain_substring_matcher.go][vendor/github.com/onsi/gomega/matchers/contain_substring_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainSubstringMatcher struct {
0000000000000000000000000000000000000000;;		Substr string
0000000000000000000000000000000000000000;;		Args   []interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *ContainSubstringMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		actualString, ok := toString(actual)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("ContainSubstring matcher requires a string or stringer.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strings.Contains(actualString, matcher.stringToMatch()), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *ContainSubstringMatcher) stringToMatch() string {
0000000000000000000000000000000000000000;;		stringToMatch := matcher.Substr
0000000000000000000000000000000000000000;;		if len(matcher.Args) > 0 {
0000000000000000000000000000000000000000;;			stringToMatch = fmt.Sprintf(matcher.Substr, matcher.Args...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return stringToMatch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *ContainSubstringMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "to contain substring", matcher.stringToMatch())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *ContainSubstringMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "not to contain substring", matcher.stringToMatch())
0000000000000000000000000000000000000000;;	}
