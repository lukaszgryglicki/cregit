0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_key_with_value_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_key_with_value_matcher.go][vendor/github.com/onsi/gomega/matchers/have_key_with_value_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaveKeyWithValueMatcher struct {
0000000000000000000000000000000000000000;;		Key   interface{}
0000000000000000000000000000000000000000;;		Value interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveKeyWithValueMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if !isMap(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("HaveKeyWithValue matcher expects a map.  Got:%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyMatcher, keyIsMatcher := matcher.Key.(omegaMatcher)
0000000000000000000000000000000000000000;;		if !keyIsMatcher {
0000000000000000000000000000000000000000;;			keyMatcher = &EqualMatcher{Expected: matcher.Key}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		valueMatcher, valueIsMatcher := matcher.Value.(omegaMatcher)
0000000000000000000000000000000000000000;;		if !valueIsMatcher {
0000000000000000000000000000000000000000;;			valueMatcher = &EqualMatcher{Expected: matcher.Value}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keys := reflect.ValueOf(actual).MapKeys()
0000000000000000000000000000000000000000;;		for i := 0; i < len(keys); i++ {
0000000000000000000000000000000000000000;;			success, err := keyMatcher.Match(keys[i].Interface())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, fmt.Errorf("HaveKeyWithValue's key matcher failed with:\n%s%s", format.Indent, err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if success {
0000000000000000000000000000000000000000;;				actualValue := reflect.ValueOf(actual).MapIndex(keys[i])
0000000000000000000000000000000000000000;;				success, err := valueMatcher.Match(actualValue.Interface())
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return false, fmt.Errorf("HaveKeyWithValue's value matcher failed with:\n%s%s", format.Indent, err.Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return success, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveKeyWithValueMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		str := "to have {key: value}"
0000000000000000000000000000000000000000;;		if _, ok := matcher.Key.(omegaMatcher); ok {
0000000000000000000000000000000000000000;;			str += " matching"
0000000000000000000000000000000000000000;;		} else if _, ok := matcher.Value.(omegaMatcher); ok {
0000000000000000000000000000000000000000;;			str += " matching"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expect := make(map[interface{}]interface{}, 1)
0000000000000000000000000000000000000000;;		expect[matcher.Key] = matcher.Value
0000000000000000000000000000000000000000;;		return format.Message(actual, str, expect)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveKeyWithValueMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		kStr := "not to have key"
0000000000000000000000000000000000000000;;		if _, ok := matcher.Key.(omegaMatcher); ok {
0000000000000000000000000000000000000000;;			kStr = "not to have key matching"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vStr := "or that key's value not be"
0000000000000000000000000000000000000000;;		if _, ok := matcher.Value.(omegaMatcher); ok {
0000000000000000000000000000000000000000;;			vStr = "or to have that key's value not matching"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return format.Message(actual, kStr, matcher.Key, vStr, matcher.Value)
0000000000000000000000000000000000000000;;	}
