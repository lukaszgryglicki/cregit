0000000000000000000000000000000000000000;;	package matchers
bd1ba01e8c3d94f344e03c9790e8df7c23a617c8;Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_cap_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_cap_matcher.go][vendor/github.com/onsi/gomega/matchers/have_cap_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaveCapMatcher struct {
0000000000000000000000000000000000000000;;		Count int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveCapMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		length, ok := capOf(actual)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("HaveCap matcher expects a array/channel/slice.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return length == matcher.Count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveCapMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Expected\n%s\nto have capacity %d", format.Object(actual, 1), matcher.Count)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveCapMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Expected\n%s\nnot to have capacity %d", format.Object(actual, 1), matcher.Count)
0000000000000000000000000000000000000000;;	}
