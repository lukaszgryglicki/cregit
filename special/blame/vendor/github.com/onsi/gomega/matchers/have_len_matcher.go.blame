0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_len_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_len_matcher.go][vendor/github.com/onsi/gomega/matchers/have_len_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaveLenMatcher struct {
0000000000000000000000000000000000000000;;		Count int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveLenMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		length, ok := lengthOf(actual)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("HaveLen matcher expects a string/array/map/channel/slice.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return length == matcher.Count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveLenMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Expected\n%s\nto have length %d", format.Object(actual, 1), matcher.Count)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveLenMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Expected\n%s\nnot to have length %d", format.Object(actual, 1), matcher.Count)
0000000000000000000000000000000000000000;;	}
