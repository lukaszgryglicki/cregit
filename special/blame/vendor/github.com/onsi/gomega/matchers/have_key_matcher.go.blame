0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_key_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/have_key_matcher.go][vendor/github.com/onsi/gomega/matchers/have_key_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaveKeyMatcher struct {
0000000000000000000000000000000000000000;;		Key interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveKeyMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if !isMap(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("HaveKey matcher expects a map.  Got:%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyMatcher, keyIsMatcher := matcher.Key.(omegaMatcher)
0000000000000000000000000000000000000000;;		if !keyIsMatcher {
0000000000000000000000000000000000000000;;			keyMatcher = &EqualMatcher{Expected: matcher.Key}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keys := reflect.ValueOf(actual).MapKeys()
0000000000000000000000000000000000000000;;		for i := 0; i < len(keys); i++ {
0000000000000000000000000000000000000000;;			success, err := keyMatcher.Match(keys[i].Interface())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, fmt.Errorf("HaveKey's key matcher failed with:\n%s%s", format.Indent, err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if success {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveKeyMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		switch matcher.Key.(type) {
0000000000000000000000000000000000000000;;		case omegaMatcher:
0000000000000000000000000000000000000000;;			return format.Message(actual, "to have key matching", matcher.Key)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return format.Message(actual, "to have key", matcher.Key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *HaveKeyMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		switch matcher.Key.(type) {
0000000000000000000000000000000000000000;;		case omegaMatcher:
0000000000000000000000000000000000000000;;			return format.Message(actual, "not to have key matching", matcher.Key)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return format.Message(actual, "not to have key", matcher.Key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
