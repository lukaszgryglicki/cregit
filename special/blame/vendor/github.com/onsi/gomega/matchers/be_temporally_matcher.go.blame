0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_temporally_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/be_temporally_matcher.go][vendor/github.com/onsi/gomega/matchers/be_temporally_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BeTemporallyMatcher struct {
0000000000000000000000000000000000000000;;		Comparator string
0000000000000000000000000000000000000000;;		CompareTo  time.Time
0000000000000000000000000000000000000000;;		Threshold  []time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeTemporallyMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("to be %s", matcher.Comparator), matcher.CompareTo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeTemporallyMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, fmt.Sprintf("not to be %s", matcher.Comparator), matcher.CompareTo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeTemporallyMatcher) Match(actual interface{}) (bool, error) {
0000000000000000000000000000000000000000;;		// predicate to test for time.Time type
0000000000000000000000000000000000000000;;		isTime := func(t interface{}) bool {
0000000000000000000000000000000000000000;;			_, ok := t.(time.Time)
0000000000000000000000000000000000000000;;			return ok
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !isTime(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected a time.Time.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch matcher.Comparator {
0000000000000000000000000000000000000000;;		case "==", "~", ">", ">=", "<", "<=":
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Unknown comparator: %s", matcher.Comparator)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var threshold = time.Millisecond
0000000000000000000000000000000000000000;;		if len(matcher.Threshold) == 1 {
0000000000000000000000000000000000000000;;			threshold = matcher.Threshold[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return matcher.matchTimes(actual.(time.Time), matcher.CompareTo, threshold), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *BeTemporallyMatcher) matchTimes(actual, compareTo time.Time, threshold time.Duration) (success bool) {
0000000000000000000000000000000000000000;;		switch matcher.Comparator {
0000000000000000000000000000000000000000;;		case "==":
0000000000000000000000000000000000000000;;			return actual.Equal(compareTo)
0000000000000000000000000000000000000000;;		case "~":
0000000000000000000000000000000000000000;;			diff := actual.Sub(compareTo)
0000000000000000000000000000000000000000;;			return -threshold <= diff && diff <= threshold
0000000000000000000000000000000000000000;;		case ">":
0000000000000000000000000000000000000000;;			return actual.After(compareTo)
0000000000000000000000000000000000000000;;		case ">=":
0000000000000000000000000000000000000000;;			return !actual.Before(compareTo)
0000000000000000000000000000000000000000;;		case "<":
0000000000000000000000000000000000000000;;			return actual.Before(compareTo)
0000000000000000000000000000000000000000;;		case "<=":
0000000000000000000000000000000000000000;;			return !actual.After(compareTo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
