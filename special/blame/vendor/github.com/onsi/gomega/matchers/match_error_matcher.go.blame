0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/match_error_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/match_error_matcher.go][vendor/github.com/onsi/gomega/matchers/match_error_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MatchErrorMatcher struct {
0000000000000000000000000000000000000000;;		Expected interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchErrorMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		if isNil(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected an error, got nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !isError(actual) {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Expected an error.  Got:\n%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualErr := actual.(error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isString(matcher.Expected) {
0000000000000000000000000000000000000000;;			return reflect.DeepEqual(actualErr.Error(), matcher.Expected), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isError(matcher.Expected) {
0000000000000000000000000000000000000000;;			return reflect.DeepEqual(actualErr, matcher.Expected), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var subMatcher omegaMatcher
0000000000000000000000000000000000000000;;		var hasSubMatcher bool
0000000000000000000000000000000000000000;;		if matcher.Expected != nil {
0000000000000000000000000000000000000000;;			subMatcher, hasSubMatcher = (matcher.Expected).(omegaMatcher)
0000000000000000000000000000000000000000;;			if hasSubMatcher {
0000000000000000000000000000000000000000;;				return subMatcher.Match(actualErr.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, fmt.Errorf("MatchError must be passed an error, string, or Matcher that can match on strings.  Got:\n%s", format.Object(matcher.Expected, 1))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchErrorMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "to match error", matcher.Expected)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchErrorMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "not to match error", matcher.Expected)
0000000000000000000000000000000000000000;;	}
