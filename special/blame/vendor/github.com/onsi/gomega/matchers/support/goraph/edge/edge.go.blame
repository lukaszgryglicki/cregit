0000000000000000000000000000000000000000;;	package edge
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/support/goraph/edge/edge.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/support/goraph/edge/edge.go][vendor/github.com/onsi/gomega/matchers/support/goraph/edge/edge.go];	
0000000000000000000000000000000000000000;;	import . "github.com/onsi/gomega/matchers/support/goraph/node"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Edge struct {
0000000000000000000000000000000000000000;;		Node1 Node
0000000000000000000000000000000000000000;;		Node2 Node
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EdgeSet []Edge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ec EdgeSet) Free(node Node) bool {
0000000000000000000000000000000000000000;;		for _, e := range ec {
0000000000000000000000000000000000000000;;			if e.Node1 == node || e.Node2 == node {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ec EdgeSet) Contains(edge Edge) bool {
0000000000000000000000000000000000000000;;		for _, e := range ec {
0000000000000000000000000000000000000000;;			if e == edge {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ec EdgeSet) FindByNodes(node1, node2 Node) (Edge, bool) {
0000000000000000000000000000000000000000;;		for _, e := range ec {
0000000000000000000000000000000000000000;;			if (e.Node1 == node1 && e.Node2 == node2) || (e.Node1 == node2 && e.Node2 == node1) {
0000000000000000000000000000000000000000;;				return e, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Edge{}, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ec EdgeSet) SymmetricDifference(ec2 EdgeSet) EdgeSet {
0000000000000000000000000000000000000000;;		edgesToInclude := make(map[Edge]bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, e := range ec {
0000000000000000000000000000000000000000;;			edgesToInclude[e] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, e := range ec2 {
0000000000000000000000000000000000000000;;			edgesToInclude[e] = !edgesToInclude[e]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := EdgeSet{}
0000000000000000000000000000000000000000;;		for e, include := range edgesToInclude {
0000000000000000000000000000000000000000;;			if include {
0000000000000000000000000000000000000000;;				result = append(result, e)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
