0000000000000000000000000000000000000000;;	package matchers
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/matchers/match_regexp_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/matchers/match_regexp_matcher.go][vendor/github.com/onsi/gomega/matchers/match_regexp_matcher.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MatchRegexpMatcher struct {
0000000000000000000000000000000000000000;;		Regexp string
0000000000000000000000000000000000000000;;		Args   []interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchRegexpMatcher) Match(actual interface{}) (success bool, err error) {
0000000000000000000000000000000000000000;;		actualString, ok := toString(actual)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("RegExp matcher requires a string or stringer.\nGot:%s", format.Object(actual, 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		match, err := regexp.Match(matcher.regexp(), []byte(actualString))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("RegExp match failed to compile with error:\n\t%s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return match, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchRegexpMatcher) FailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "to match regular expression", matcher.regexp())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchRegexpMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return format.Message(actual, "not to match regular expression", matcher.regexp())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (matcher *MatchRegexpMatcher) regexp() string {
0000000000000000000000000000000000000000;;		re := matcher.Regexp
0000000000000000000000000000000000000000;;		if len(matcher.Args) > 0 {
0000000000000000000000000000000000000000;;			re = fmt.Sprintf(matcher.Regexp, matcher.Args...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return re
0000000000000000000000000000000000000000;;	}
