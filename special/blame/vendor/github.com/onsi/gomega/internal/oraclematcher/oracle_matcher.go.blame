0000000000000000000000000000000000000000;;	package oraclematcher
bd1ba01e8c3d94f344e03c9790e8df7c23a617c8;Godeps/_workspace/src/github.com/onsi/gomega/internal/oraclematcher/oracle_matcher.go[Godeps/_workspace/src/github.com/onsi/gomega/internal/oraclematcher/oracle_matcher.go][vendor/github.com/onsi/gomega/internal/oraclematcher/oracle_matcher.go];	
0000000000000000000000000000000000000000;;	import "github.com/onsi/gomega/types"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	GomegaMatchers that also match the OracleMatcher interface can convey information about
0000000000000000000000000000000000000000;;	whether or not their result will change upon future attempts.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This allows `Eventually` and `Consistently` to short circuit if success becomes impossible.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For example, a process' exit code can never change.  So, gexec's Exit matcher returns `true`
0000000000000000000000000000000000000000;;	for `MatchMayChangeInTheFuture` until the process exits, at which point it returns `false` forevermore.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	type OracleMatcher interface {
0000000000000000000000000000000000000000;;		MatchMayChangeInTheFuture(actual interface{}) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MatchMayChangeInTheFuture(matcher types.GomegaMatcher, value interface{}) bool {
0000000000000000000000000000000000000000;;		oracleMatcher, ok := matcher.(OracleMatcher)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return oracleMatcher.MatchMayChangeInTheFuture(value)
0000000000000000000000000000000000000000;;	}
