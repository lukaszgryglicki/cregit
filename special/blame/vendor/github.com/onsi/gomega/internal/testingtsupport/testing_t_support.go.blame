0000000000000000000000000000000000000000;;	package testingtsupport
b73404a9ae80480b33bb3fbee1057ced8f9e176a;Godeps/_workspace/src/github.com/onsi/gomega/internal/testingtsupport/testing_t_support.go[Godeps/_workspace/src/github.com/onsi/gomega/internal/testingtsupport/testing_t_support.go][vendor/github.com/onsi/gomega/internal/testingtsupport/testing_t_support.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"runtime/debug"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type gomegaTestingT interface {
0000000000000000000000000000000000000000;;		Errorf(format string, args ...interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildTestingTGomegaFailHandler(t gomegaTestingT) types.GomegaFailHandler {
0000000000000000000000000000000000000000;;		return func(message string, callerSkip ...int) {
0000000000000000000000000000000000000000;;			skip := 1
0000000000000000000000000000000000000000;;			if len(callerSkip) > 0 {
0000000000000000000000000000000000000000;;				skip = callerSkip[0]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			stackTrace := pruneStack(string(debug.Stack()), skip)
0000000000000000000000000000000000000000;;			t.Errorf("\n%s\n%s", stackTrace, message)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pruneStack(fullStackTrace string, skip int) string {
0000000000000000000000000000000000000000;;		stack := strings.Split(fullStackTrace, "\n")
0000000000000000000000000000000000000000;;		if len(stack) > 2*(skip+1) {
0000000000000000000000000000000000000000;;			stack = stack[2*(skip+1):]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		prunedStack := []string{}
0000000000000000000000000000000000000000;;		re := regexp.MustCompile(`\/ginkgo\/|\/pkg\/testing\/|\/pkg\/runtime\/`)
0000000000000000000000000000000000000000;;		for i := 0; i < len(stack)/2; i++ {
0000000000000000000000000000000000000000;;			if !re.Match([]byte(stack[i*2])) {
0000000000000000000000000000000000000000;;				prunedStack = append(prunedStack, stack[i*2])
0000000000000000000000000000000000000000;;				prunedStack = append(prunedStack, stack[i*2+1])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(prunedStack, "\n")
0000000000000000000000000000000000000000;;	}
