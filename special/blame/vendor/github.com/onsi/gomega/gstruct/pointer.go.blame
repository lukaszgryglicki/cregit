0000000000000000000000000000000000000000;;	package gstruct
7a151748afd13eeb120eb98ff0e07bc6fb6c69b7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/format"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//PointTo applies the given matcher to the value pointed to by actual. It fails if the pointer is
0000000000000000000000000000000000000000;;	//nil.
0000000000000000000000000000000000000000;;	//  actual := 5
0000000000000000000000000000000000000000;;	//  Expect(&actual).To(PointTo(Equal(5)))
0000000000000000000000000000000000000000;;	func PointTo(matcher types.GomegaMatcher) types.GomegaMatcher {
0000000000000000000000000000000000000000;;		return &PointerMatcher{
0000000000000000000000000000000000000000;;			Matcher: matcher,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PointerMatcher struct {
0000000000000000000000000000000000000000;;		Matcher types.GomegaMatcher
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Failure message.
0000000000000000000000000000000000000000;;		failure string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *PointerMatcher) Match(actual interface{}) (bool, error) {
0000000000000000000000000000000000000000;;		val := reflect.ValueOf(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// return error if actual type is not a pointer
0000000000000000000000000000000000000000;;		if val.Kind() != reflect.Ptr {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("PointerMatcher expects a pointer but we have '%s'", val.Kind())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !val.IsValid() || val.IsNil() {
0000000000000000000000000000000000000000;;			m.failure = format.Message(actual, "not to be <nil>")
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Forward the value.
0000000000000000000000000000000000000000;;		elem := val.Elem().Interface()
0000000000000000000000000000000000000000;;		match, err := m.Matcher.Match(elem)
0000000000000000000000000000000000000000;;		if !match {
0000000000000000000000000000000000000000;;			m.failure = m.Matcher.FailureMessage(elem)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return match, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *PointerMatcher) FailureMessage(_ interface{}) (message string) {
0000000000000000000000000000000000000000;;		return m.failure
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *PointerMatcher) NegatedFailureMessage(actual interface{}) (message string) {
0000000000000000000000000000000000000000;;		return m.Matcher.NegatedFailureMessage(actual)
0000000000000000000000000000000000000000;;	}
