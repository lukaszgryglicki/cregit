0000000000000000000000000000000000000000;;	package libcontainer
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/factory.go[Godeps/_workspace/src/github.com/docker/libcontainer/factory.go][vendor/github.com/opencontainers/runc/libcontainer/factory.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Factory interface {
0000000000000000000000000000000000000000;;		// Creates a new container with the given id and starts the initial process inside it.
0000000000000000000000000000000000000000;;		// id must be a string containing only letters, digits and underscores and must contain
0000000000000000000000000000000000000000;;		// between 1 and 1024 characters, inclusive.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The id must not already be in use by an existing container. Containers created using
0000000000000000000000000000000000000000;;		// a factory with the same path (and file system) must have distinct ids.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Returns the new container with a running process.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// IdInUse - id is already in use by a container
0000000000000000000000000000000000000000;;		// InvalidIdFormat - id has incorrect format
0000000000000000000000000000000000000000;;		// ConfigInvalid - config is invalid
0000000000000000000000000000000000000000;;		// Systemerror - System error
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// On error, any partially created container parts are cleaned up (the operation is atomic).
0000000000000000000000000000000000000000;;		Create(id string, config *configs.Config) (Container, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Load takes an ID for an existing container and returns the container information
0000000000000000000000000000000000000000;;		// from the state.  This presents a read only view of the container.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// Path does not exist
0000000000000000000000000000000000000000;;		// Container is stopped
0000000000000000000000000000000000000000;;		// System error
0000000000000000000000000000000000000000;;		Load(id string) (Container, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StartInitialization is an internal API to libcontainer used during the reexec of the
0000000000000000000000000000000000000000;;		// container.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Errors:
0000000000000000000000000000000000000000;;		// Pipe connection error
0000000000000000000000000000000000000000;;		// System error
0000000000000000000000000000000000000000;;		StartInitialization() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type returns info string about factory type (e.g. lxc, libcontainer...)
0000000000000000000000000000000000000000;;		Type() string
0000000000000000000000000000000000000000;;	}
