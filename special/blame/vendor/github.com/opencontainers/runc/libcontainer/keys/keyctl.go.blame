0000000000000000000000000000000000000000;;	// +build linux
f9f039b88d1d3e9fa1e8f809a98da66c12706194;;	
0000000000000000000000000000000000000000;;	package keys
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const KEYCTL_JOIN_SESSION_KEYRING = 1
0000000000000000000000000000000000000000;;	const KEYCTL_SETPERM = 5
0000000000000000000000000000000000000000;;	const KEYCTL_DESCRIBE = 6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KeySerial uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func JoinSessionKeyring(name string) (KeySerial, error) {
0000000000000000000000000000000000000000;;		var _name *byte
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(name) > 0 {
0000000000000000000000000000000000000000;;			_name, err = syscall.BytePtrFromString(name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return KeySerial(0), err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sessKeyId, _, errn := syscall.Syscall(syscall.SYS_KEYCTL, KEYCTL_JOIN_SESSION_KEYRING, uintptr(unsafe.Pointer(_name)), 0)
0000000000000000000000000000000000000000;;		if errn != 0 {
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("could not create session key: %v", errn)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return KeySerial(sessKeyId), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModKeyringPerm modifies permissions on a keyring by reading the current permissions,
0000000000000000000000000000000000000000;;	// anding the bits with the given mask (clearing permissions) and setting
0000000000000000000000000000000000000000;;	// additional permission bits
0000000000000000000000000000000000000000;;	func ModKeyringPerm(ringId KeySerial, mask, setbits uint32) error {
0000000000000000000000000000000000000000;;		dest := make([]byte, 1024)
0000000000000000000000000000000000000000;;		destBytes := unsafe.Pointer(&dest[0])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_KEYCTL, uintptr(KEYCTL_DESCRIBE), uintptr(ringId), uintptr(destBytes), uintptr(len(dest)), 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res := strings.Split(string(dest), ";")
0000000000000000000000000000000000000000;;		if len(res) < 5 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Destination buffer for key description is too small")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// parse permissions
0000000000000000000000000000000000000000;;		perm64, err := strconv.ParseUint(res[3], 16, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		perm := (uint32(perm64) & mask) | setbits
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall(syscall.SYS_KEYCTL, uintptr(KEYCTL_SETPERM), uintptr(ringId), uintptr(perm)); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
