0000000000000000000000000000000000000000;;	// +build linux
387c5391f1ede5bc68630622494ee305c01f96bb;Godeps/_workspace/src/github.com/opencontainers/runc/libcontainer/state_linux.go[Godeps/_workspace/src/github.com/opencontainers/runc/libcontainer/state_linux.go][vendor/github.com/opencontainers/runc/libcontainer/state_linux.go];	
0000000000000000000000000000000000000000;;	package libcontainer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Sirupsen/logrus"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/utils"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStateTransitionError(from, to containerState) error {
0000000000000000000000000000000000000000;;		return &stateTransitionError{
0000000000000000000000000000000000000000;;			From: from.status().String(),
0000000000000000000000000000000000000000;;			To:   to.status().String(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stateTransitionError is returned when an invalid state transition happens from one
0000000000000000000000000000000000000000;;	// state to another.
0000000000000000000000000000000000000000;;	type stateTransitionError struct {
0000000000000000000000000000000000000000;;		From string
0000000000000000000000000000000000000000;;		To   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *stateTransitionError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("invalid state transition from %s to %s", s.From, s.To)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type containerState interface {
0000000000000000000000000000000000000000;;		transition(containerState) error
0000000000000000000000000000000000000000;;		destroy() error
0000000000000000000000000000000000000000;;		status() Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func destroy(c *linuxContainer) error {
0000000000000000000000000000000000000000;;		if !c.config.Namespaces.Contains(configs.NEWPID) {
0000000000000000000000000000000000000000;;			if err := killCgroupProcesses(c.cgroupManager); err != nil {
0000000000000000000000000000000000000000;;				logrus.Warn(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := c.cgroupManager.Destroy()
0000000000000000000000000000000000000000;;		if rerr := os.RemoveAll(c.root); err == nil {
0000000000000000000000000000000000000000;;			err = rerr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.initProcess = nil
0000000000000000000000000000000000000000;;		if herr := runPoststopHooks(c); err == nil {
0000000000000000000000000000000000000000;;			err = herr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.state = &stoppedState{c: c}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func runPoststopHooks(c *linuxContainer) error {
0000000000000000000000000000000000000000;;		if c.config.Hooks != nil {
0000000000000000000000000000000000000000;;			s := configs.HookState{
0000000000000000000000000000000000000000;;				Version:    c.config.Version,
0000000000000000000000000000000000000000;;				ID:         c.id,
0000000000000000000000000000000000000000;;				Root:       c.config.Rootfs,
0000000000000000000000000000000000000000;;				BundlePath: utils.SearchLabels(c.config.Labels, "bundle"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, hook := range c.config.Hooks.Poststop {
0000000000000000000000000000000000000000;;				if err := hook.Run(s); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stoppedState represents a container is a stopped/destroyed state.
0000000000000000000000000000000000000000;;	type stoppedState struct {
0000000000000000000000000000000000000000;;		c *linuxContainer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *stoppedState) status() Status {
0000000000000000000000000000000000000000;;		return Stopped
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *stoppedState) transition(s containerState) error {
0000000000000000000000000000000000000000;;		switch s.(type) {
0000000000000000000000000000000000000000;;		case *runningState:
0000000000000000000000000000000000000000;;			b.c.state = s
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *restoredState:
0000000000000000000000000000000000000000;;			b.c.state = s
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *stoppedState:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newStateTransitionError(b, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *stoppedState) destroy() error {
0000000000000000000000000000000000000000;;		return destroy(b.c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// runningState represents a container that is currently running.
0000000000000000000000000000000000000000;;	type runningState struct {
0000000000000000000000000000000000000000;;		c *linuxContainer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *runningState) status() Status {
0000000000000000000000000000000000000000;;		return Running
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *runningState) transition(s containerState) error {
0000000000000000000000000000000000000000;;		switch s.(type) {
0000000000000000000000000000000000000000;;		case *stoppedState:
0000000000000000000000000000000000000000;;			t, err := r.c.runType()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if t == Running {
0000000000000000000000000000000000000000;;				return newGenericError(fmt.Errorf("container still running"), ContainerNotStopped)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r.c.state = s
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *pausedState:
0000000000000000000000000000000000000000;;			r.c.state = s
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *runningState:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newStateTransitionError(r, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *runningState) destroy() error {
0000000000000000000000000000000000000000;;		t, err := r.c.runType()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t == Running {
0000000000000000000000000000000000000000;;			return newGenericError(fmt.Errorf("container is not destroyed"), ContainerNotStopped)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return destroy(r.c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type createdState struct {
0000000000000000000000000000000000000000;;		c *linuxContainer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *createdState) status() Status {
0000000000000000000000000000000000000000;;		return Created
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *createdState) transition(s containerState) error {
0000000000000000000000000000000000000000;;		switch s.(type) {
0000000000000000000000000000000000000000;;		case *runningState, *pausedState, *stoppedState:
0000000000000000000000000000000000000000;;			i.c.state = s
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *createdState:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newStateTransitionError(i, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *createdState) destroy() error {
0000000000000000000000000000000000000000;;		i.c.initProcess.signal(syscall.SIGKILL)
0000000000000000000000000000000000000000;;		return destroy(i.c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// pausedState represents a container that is currently pause.  It cannot be destroyed in a
0000000000000000000000000000000000000000;;	// paused state and must transition back to running first.
0000000000000000000000000000000000000000;;	type pausedState struct {
0000000000000000000000000000000000000000;;		c *linuxContainer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *pausedState) status() Status {
0000000000000000000000000000000000000000;;		return Paused
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *pausedState) transition(s containerState) error {
0000000000000000000000000000000000000000;;		switch s.(type) {
0000000000000000000000000000000000000000;;		case *runningState, *stoppedState:
0000000000000000000000000000000000000000;;			p.c.state = s
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *pausedState:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newStateTransitionError(p, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *pausedState) destroy() error {
0000000000000000000000000000000000000000;;		t, err := p.c.runType()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t != Running && t != Created {
0000000000000000000000000000000000000000;;			if err := p.c.cgroupManager.Freeze(configs.Thawed); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return destroy(p.c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newGenericError(fmt.Errorf("container is paused"), ContainerPaused)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// restoredState is the same as the running state but also has accociated checkpoint
0000000000000000000000000000000000000000;;	// information that maybe need destroyed when the container is stopped and destroy is called.
0000000000000000000000000000000000000000;;	type restoredState struct {
0000000000000000000000000000000000000000;;		imageDir string
0000000000000000000000000000000000000000;;		c        *linuxContainer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *restoredState) status() Status {
0000000000000000000000000000000000000000;;		return Running
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *restoredState) transition(s containerState) error {
0000000000000000000000000000000000000000;;		switch s.(type) {
0000000000000000000000000000000000000000;;		case *stoppedState:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case *runningState:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newStateTransitionError(r, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *restoredState) destroy() error {
0000000000000000000000000000000000000000;;		if _, err := os.Stat(filepath.Join(r.c.root, "checkpoint")); err != nil {
0000000000000000000000000000000000000000;;			if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return destroy(r.c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// loadedState is used whenever a container is restored, loaded, or setting additional
0000000000000000000000000000000000000000;;	// processes inside and it should not be destroyed when it is exiting.
0000000000000000000000000000000000000000;;	type loadedState struct {
0000000000000000000000000000000000000000;;		c *linuxContainer
0000000000000000000000000000000000000000;;		s Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *loadedState) status() Status {
0000000000000000000000000000000000000000;;		return n.s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *loadedState) transition(s containerState) error {
0000000000000000000000000000000000000000;;		n.c.state = s
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *loadedState) destroy() error {
0000000000000000000000000000000000000000;;		if err := n.c.refreshState(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n.c.state.destroy()
0000000000000000000000000000000000000000;;	}
