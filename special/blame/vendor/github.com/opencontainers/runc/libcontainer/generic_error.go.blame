0000000000000000000000000000000000000000;;	package libcontainer
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/docker/libcontainer/generic_error.go[Godeps/_workspace/src/github.com/docker/libcontainer/generic_error.go][vendor/github.com/opencontainers/runc/libcontainer/generic_error.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/stacktrace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type syncType uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		procReady syncType = iota
0000000000000000000000000000000000000000;;		procError
0000000000000000000000000000000000000000;;		procRun
0000000000000000000000000000000000000000;;		procHooks
0000000000000000000000000000000000000000;;		procResume
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type syncT struct {
0000000000000000000000000000000000000000;;		Type syncType `json:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errorTemplate = template.Must(template.New("error").Parse(`Timestamp: {{.Timestamp}}
0000000000000000000000000000000000000000;;	Code: {{.ECode}}
0000000000000000000000000000000000000000;;	{{if .Message }}
0000000000000000000000000000000000000000;;	Message: {{.Message}}
0000000000000000000000000000000000000000;;	{{end}}
0000000000000000000000000000000000000000;;	Frames:{{range $i, $frame := .Stack.Frames}}
0000000000000000000000000000000000000000;;	---
0000000000000000000000000000000000000000;;	{{$i}}: {{$frame.Function}}
0000000000000000000000000000000000000000;;	Package: {{$frame.Package}}
0000000000000000000000000000000000000000;;	File: {{$frame.File}}@{{$frame.Line}}{{end}}
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newGenericError(err error, c ErrorCode) Error {
0000000000000000000000000000000000000000;;		if le, ok := err.(Error); ok {
0000000000000000000000000000000000000000;;			return le
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gerr := &genericError{
0000000000000000000000000000000000000000;;			Timestamp: time.Now(),
0000000000000000000000000000000000000000;;			Err:       err,
0000000000000000000000000000000000000000;;			ECode:     c,
0000000000000000000000000000000000000000;;			Stack:     stacktrace.Capture(1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			gerr.Message = err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gerr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSystemError(err error) Error {
0000000000000000000000000000000000000000;;		return createSystemError(err, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSystemErrorWithCausef(err error, cause string, v ...interface{}) Error {
0000000000000000000000000000000000000000;;		return createSystemError(err, fmt.Sprintf(cause, v...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSystemErrorWithCause(err error, cause string) Error {
0000000000000000000000000000000000000000;;		return createSystemError(err, cause)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createSystemError creates the specified error with the correct number of
0000000000000000000000000000000000000000;;	// stack frames skipped. This is only to be called by the other functions for
0000000000000000000000000000000000000000;;	// formatting the error.
0000000000000000000000000000000000000000;;	func createSystemError(err error, cause string) Error {
0000000000000000000000000000000000000000;;		gerr := &genericError{
0000000000000000000000000000000000000000;;			Timestamp: time.Now(),
0000000000000000000000000000000000000000;;			Err:       err,
0000000000000000000000000000000000000000;;			ECode:     SystemError,
0000000000000000000000000000000000000000;;			Cause:     cause,
0000000000000000000000000000000000000000;;			Stack:     stacktrace.Capture(2),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			gerr.Message = err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gerr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type genericError struct {
0000000000000000000000000000000000000000;;		Timestamp time.Time
0000000000000000000000000000000000000000;;		ECode     ErrorCode
0000000000000000000000000000000000000000;;		Err       error `json:"-"`
0000000000000000000000000000000000000000;;		Cause     string
0000000000000000000000000000000000000000;;		Message   string
0000000000000000000000000000000000000000;;		Stack     stacktrace.Stacktrace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *genericError) Error() string {
0000000000000000000000000000000000000000;;		if e.Cause == "" {
0000000000000000000000000000000000000000;;			return e.Message
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		frame := e.Stack.Frames[0]
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s:%d: %s caused %q", frame.File, frame.Line, e.Cause, e.Message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *genericError) Code() ErrorCode {
0000000000000000000000000000000000000000;;		return e.ECode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *genericError) Detail(w io.Writer) error {
0000000000000000000000000000000000000000;;		return errorTemplate.Execute(w, e)
0000000000000000000000000000000000000000;;	}
