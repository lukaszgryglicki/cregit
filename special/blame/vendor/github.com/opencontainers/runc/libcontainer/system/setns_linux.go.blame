0000000000000000000000000000000000000000;;	package system
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/system/setns_linux.go[Godeps/_workspace/src/github.com/docker/libcontainer/system/setns_linux.go][vendor/github.com/opencontainers/runc/libcontainer/system/setns_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Via http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7b21fddd087678a70ad64afc0f632e0f1071b092
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We need different setns values for the different platforms and arch
0000000000000000000000000000000000000000;;	// We are declaring the macro here because the SETNS syscall does not exist in th stdlib
0000000000000000000000000000000000000000;;	var setNsMap = map[string]uintptr{
0000000000000000000000000000000000000000;;		"linux/386":     346,
0000000000000000000000000000000000000000;;		"linux/arm64":   268,
0000000000000000000000000000000000000000;;		"linux/amd64":   308,
0000000000000000000000000000000000000000;;		"linux/arm":     375,
0000000000000000000000000000000000000000;;		"linux/ppc":     350,
0000000000000000000000000000000000000000;;		"linux/ppc64":   350,
0000000000000000000000000000000000000000;;		"linux/ppc64le": 350,
0000000000000000000000000000000000000000;;		"linux/s390x":   339,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var sysSetns = setNsMap[fmt.Sprintf("%s/%s", runtime.GOOS, runtime.GOARCH)]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SysSetns() uint32 {
0000000000000000000000000000000000000000;;		return uint32(sysSetns)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setns(fd uintptr, flags uintptr) error {
0000000000000000000000000000000000000000;;		ns, exists := setNsMap[fmt.Sprintf("%s/%s", runtime.GOOS, runtime.GOARCH)]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unsupported platform %s/%s", runtime.GOOS, runtime.GOARCH)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, err := syscall.RawSyscall(ns, fd, flags, 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
