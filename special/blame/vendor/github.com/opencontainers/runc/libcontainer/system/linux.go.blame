0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/system/linux.go[Godeps/_workspace/src/github.com/docker/libcontainer/system/linux.go][vendor/github.com/opencontainers/runc/libcontainer/system/linux.go];	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If arg2 is nonzero, set the "child subreaper" attribute of the
0000000000000000000000000000000000000000;;	// calling process; if arg2 is zero, unset the attribute.  When a
0000000000000000000000000000000000000000;;	// process is marked as a child subreaper, all of the children
0000000000000000000000000000000000000000;;	// that it creates, and their descendants, will be marked as
0000000000000000000000000000000000000000;;	// having a subreaper.  In effect, a subreaper fulfills the role
0000000000000000000000000000000000000000;;	// of init(1) for its descendant processes.  Upon termination of
0000000000000000000000000000000000000000;;	// a process that is orphaned (i.e., its immediate parent has
0000000000000000000000000000000000000000;;	// already terminated) and marked as having a subreaper, the
0000000000000000000000000000000000000000;;	// nearest still living ancestor subreaper will receive a SIGCHLD
0000000000000000000000000000000000000000;;	// signal and be able to wait(2) on the process to discover its
0000000000000000000000000000000000000000;;	// termination status.
0000000000000000000000000000000000000000;;	const PR_SET_CHILD_SUBREAPER = 36
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParentDeathSignal int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ParentDeathSignal) Restore() error {
0000000000000000000000000000000000000000;;		if p == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		current, err := GetParentDeathSignal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p == current {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.Set()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ParentDeathSignal) Set() error {
0000000000000000000000000000000000000000;;		return SetParentDeathSignal(uintptr(p))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Execv(cmd string, args []string, env []string) error {
0000000000000000000000000000000000000000;;		name, err := exec.LookPath(cmd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return syscall.Exec(name, args, env)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Prlimit(pid, resource int, limit syscall.Rlimit) error {
0000000000000000000000000000000000000000;;		_, _, err := syscall.RawSyscall6(syscall.SYS_PRLIMIT64, uintptr(pid), uintptr(resource), uintptr(unsafe.Pointer(&limit)), uintptr(unsafe.Pointer(&limit)), 0, 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetParentDeathSignal(sig uintptr) error {
0000000000000000000000000000000000000000;;		if _, _, err := syscall.RawSyscall(syscall.SYS_PRCTL, syscall.PR_SET_PDEATHSIG, sig, 0); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetParentDeathSignal() (ParentDeathSignal, error) {
0000000000000000000000000000000000000000;;		var sig int
0000000000000000000000000000000000000000;;		_, _, err := syscall.RawSyscall(syscall.SYS_PRCTL, syscall.PR_GET_PDEATHSIG, uintptr(unsafe.Pointer(&sig)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ParentDeathSignal(sig), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetKeepCaps() error {
0000000000000000000000000000000000000000;;		if _, _, err := syscall.RawSyscall(syscall.SYS_PRCTL, syscall.PR_SET_KEEPCAPS, 1, 0); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ClearKeepCaps() error {
0000000000000000000000000000000000000000;;		if _, _, err := syscall.RawSyscall(syscall.SYS_PRCTL, syscall.PR_SET_KEEPCAPS, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setctty() error {
0000000000000000000000000000000000000000;;		if _, _, err := syscall.RawSyscall(syscall.SYS_IOCTL, 0, uintptr(syscall.TIOCSCTTY), 0); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunningInUserNS detects whether we are currently running in a user namespace.
0000000000000000000000000000000000000000;;	// Copied from github.com/lxc/lxd/shared/util.go
0000000000000000000000000000000000000000;;	func RunningInUserNS() bool {
0000000000000000000000000000000000000000;;		file, err := os.Open("/proc/self/uid_map")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// This kernel-provided file only exists if user namespaces are supported
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bufio.NewReader(file)
0000000000000000000000000000000000000000;;		l, _, err := buf.ReadLine()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		line := string(l)
0000000000000000000000000000000000000000;;		var a, b, c int64
0000000000000000000000000000000000000000;;		fmt.Sscanf(line, "%d %d %d", &a, &b, &c)
0000000000000000000000000000000000000000;;		/*
0000000000000000000000000000000000000000;;		 * We assume we are in the initial user namespace if we have a full
0000000000000000000000000000000000000000;;		 * range - 4294967295 uids starting at uid 0.
0000000000000000000000000000000000000000;;		 */
0000000000000000000000000000000000000000;;		if a == 0 && b == 0 && c == 4294967295 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubreaper sets the value i as the subreaper setting for the calling process
0000000000000000000000000000000000000000;;	func SetSubreaper(i int) error {
0000000000000000000000000000000000000000;;		return Prctl(PR_SET_CHILD_SUBREAPER, uintptr(i), 0, 0, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Prctl(option int, arg2, arg3, arg4, arg5 uintptr) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := syscall.Syscall6(syscall.SYS_PRCTL, uintptr(option), arg2, arg3, arg4, arg5, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
