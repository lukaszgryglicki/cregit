0000000000000000000000000000000000000000;;	// +build !selinux !linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/label/label.go[Godeps/_workspace/src/github.com/docker/libcontainer/label/label.go][vendor/github.com/opencontainers/runc/libcontainer/label/label.go];	
0000000000000000000000000000000000000000;;	package label
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitLabels returns the process label and file labels to be used within
0000000000000000000000000000000000000000;;	// the container.  A list of options can be passed into this function to alter
0000000000000000000000000000000000000000;;	// the labels.
0000000000000000000000000000000000000000;;	func InitLabels(options []string) (string, string, error) {
0000000000000000000000000000000000000000;;		return "", "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetROMountLabel() string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GenLabels(options string) (string, string, error) {
0000000000000000000000000000000000000000;;		return "", "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FormatMountLabel(src string, mountLabel string) string {
0000000000000000000000000000000000000000;;		return src
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetProcessLabel(processLabel string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetFileLabel(path string) (string, error) {
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetFileLabel(path string, fileLabel string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetFileCreateLabel(fileLabel string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Relabel(path string, fileLabel string, shared bool) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetPidLabel(pid int) (string, error) {
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Init() {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReserveLabel(label string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func UnreserveLabel(label string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DupSecOpt takes a process label and returns security options that
0000000000000000000000000000000000000000;;	// can be used to set duplicate labels on future container processes
0000000000000000000000000000000000000000;;	func DupSecOpt(src string) []string {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableSecOpt returns a security opt that can disable labeling
0000000000000000000000000000000000000000;;	// support for future container processes
0000000000000000000000000000000000000000;;	func DisableSecOpt() []string {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate checks that the label does not include unexpected options
0000000000000000000000000000000000000000;;	func Validate(label string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RelabelNeeded checks whether the user requested a relabel
0000000000000000000000000000000000000000;;	func RelabelNeeded(label string) bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsShared checks that the label includes a "shared" mark
0000000000000000000000000000000000000000;;	func IsShared(label string) bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
