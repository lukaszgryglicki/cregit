0000000000000000000000000000000000000000;;	package libcontainer
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/process.go[Godeps/_workspace/src/github.com/docker/libcontainer/process.go][vendor/github.com/opencontainers/runc/libcontainer/process.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type processOperations interface {
0000000000000000000000000000000000000000;;		wait() (*os.ProcessState, error)
0000000000000000000000000000000000000000;;		signal(sig os.Signal) error
0000000000000000000000000000000000000000;;		pid() int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Process specifies the configuration and IO for a process inside
0000000000000000000000000000000000000000;;	// a container.
0000000000000000000000000000000000000000;;	type Process struct {
0000000000000000000000000000000000000000;;		// The command to be run followed by any arguments.
0000000000000000000000000000000000000000;;		Args []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Env specifies the environment variables for the process.
0000000000000000000000000000000000000000;;		Env []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User will set the uid and gid of the executing process running inside the container
0000000000000000000000000000000000000000;;		// local to the container's user and group configuration.
0000000000000000000000000000000000000000;;		User string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AdditionalGroups specifies the gids that should be added to supplementary groups
0000000000000000000000000000000000000000;;		// in addition to those that the user belongs to.
0000000000000000000000000000000000000000;;		AdditionalGroups []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cwd will change the processes current working directory inside the container's rootfs.
0000000000000000000000000000000000000000;;		Cwd string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stdin is a pointer to a reader which provides the standard input stream.
0000000000000000000000000000000000000000;;		Stdin io.Reader
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stdout is a pointer to a writer which receives the standard output stream.
0000000000000000000000000000000000000000;;		Stdout io.Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stderr is a pointer to a writer which receives the standard error stream.
0000000000000000000000000000000000000000;;		Stderr io.Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExtraFiles specifies additional open files to be inherited by the container
0000000000000000000000000000000000000000;;		ExtraFiles []*os.File
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// consolePath is the path to the console allocated to the container.
0000000000000000000000000000000000000000;;		consolePath string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Capabilities specify the capabilities to keep when executing the process inside the container
0000000000000000000000000000000000000000;;		// All capabilities not specified will be dropped from the processes capability mask
0000000000000000000000000000000000000000;;		Capabilities []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AppArmorProfile specifies the profile to apply to the process and is
0000000000000000000000000000000000000000;;		// changed at the time the process is execed
0000000000000000000000000000000000000000;;		AppArmorProfile string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Label specifies the label to apply to the process.  It is commonly used by selinux
0000000000000000000000000000000000000000;;		Label string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NoNewPrivileges controls whether processes can gain additional privileges.
0000000000000000000000000000000000000000;;		NoNewPrivileges *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rlimits specifies the resource limits, such as max open files, to set in the container
0000000000000000000000000000000000000000;;		// If Rlimits are not set, the container will inherit rlimits from the parent process
0000000000000000000000000000000000000000;;		Rlimits []configs.Rlimit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ops processOperations
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Wait waits for the process to exit.
0000000000000000000000000000000000000000;;	// Wait releases any resources associated with the Process
0000000000000000000000000000000000000000;;	func (p Process) Wait() (*os.ProcessState, error) {
0000000000000000000000000000000000000000;;		if p.ops == nil {
0000000000000000000000000000000000000000;;			return nil, newGenericError(fmt.Errorf("invalid process"), NoProcessOps)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.ops.wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pid returns the process ID
0000000000000000000000000000000000000000;;	func (p Process) Pid() (int, error) {
0000000000000000000000000000000000000000;;		// math.MinInt32 is returned here, because it's invalid value
0000000000000000000000000000000000000000;;		// for the kill() system call.
0000000000000000000000000000000000000000;;		if p.ops == nil {
0000000000000000000000000000000000000000;;			return math.MinInt32, newGenericError(fmt.Errorf("invalid process"), NoProcessOps)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.ops.pid(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Signal sends a signal to the Process.
0000000000000000000000000000000000000000;;	func (p Process) Signal(sig os.Signal) error {
0000000000000000000000000000000000000000;;		if p.ops == nil {
0000000000000000000000000000000000000000;;			return newGenericError(fmt.Errorf("invalid process"), NoProcessOps)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.ops.signal(sig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IO holds the process's STDIO
0000000000000000000000000000000000000000;;	type IO struct {
0000000000000000000000000000000000000000;;		Stdin  io.WriteCloser
0000000000000000000000000000000000000000;;		Stdout io.ReadCloser
0000000000000000000000000000000000000000;;		Stderr io.ReadCloser
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewConsole creates new console for process and returns it
0000000000000000000000000000000000000000;;	func (p *Process) NewConsole(rootuid, rootgid int) (Console, error) {
0000000000000000000000000000000000000000;;		console, err := NewConsole(rootuid, rootgid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.consolePath = console.Path()
0000000000000000000000000000000000000000;;		return console, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConsoleFromPath sets the process's console with the path provided
0000000000000000000000000000000000000000;;	func (p *Process) ConsoleFromPath(path string) error {
0000000000000000000000000000000000000000;;		if p.consolePath != "" {
0000000000000000000000000000000000000000;;			return newGenericError(fmt.Errorf("console path already exists for process"), ConsoleExists)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.consolePath = path
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
