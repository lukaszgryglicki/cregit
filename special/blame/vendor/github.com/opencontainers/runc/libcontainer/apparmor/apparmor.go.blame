0000000000000000000000000000000000000000;;	// +build apparmor,linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/apparmor/apparmor.go[Godeps/_workspace/src/github.com/docker/libcontainer/apparmor/apparmor.go][vendor/github.com/opencontainers/runc/libcontainer/apparmor/apparmor.go];	
0000000000000000000000000000000000000000;;	package apparmor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// #cgo LDFLAGS: -lapparmor
0000000000000000000000000000000000000000;;	// #include <sys/apparmor.h>
0000000000000000000000000000000000000000;;	// #include <stdlib.h>
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEnabled returns true if apparmor is enabled for the host.
0000000000000000000000000000000000000000;;	func IsEnabled() bool {
0000000000000000000000000000000000000000;;		if _, err := os.Stat("/sys/kernel/security/apparmor"); err == nil && os.Getenv("container") == "" {
0000000000000000000000000000000000000000;;			if _, err = os.Stat("/sbin/apparmor_parser"); err == nil {
0000000000000000000000000000000000000000;;				buf, err := ioutil.ReadFile("/sys/module/apparmor/parameters/enabled")
0000000000000000000000000000000000000000;;				return err == nil && len(buf) > 1 && buf[0] == 'Y'
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplyProfile will apply the profile with the specified name to the process after
0000000000000000000000000000000000000000;;	// the next exec.
0000000000000000000000000000000000000000;;	func ApplyProfile(name string) error {
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cName := C.CString(name)
0000000000000000000000000000000000000000;;		defer C.free(unsafe.Pointer(cName))
0000000000000000000000000000000000000000;;		if _, err := C.aa_change_onexec(cName); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("apparmor failed to apply profile: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
