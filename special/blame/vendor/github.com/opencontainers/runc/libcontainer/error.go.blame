0000000000000000000000000000000000000000;;	package libcontainer
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/error.go[Godeps/_workspace/src/github.com/docker/libcontainer/error.go][vendor/github.com/opencontainers/runc/libcontainer/error.go];	
0000000000000000000000000000000000000000;;	import "io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrorCode is the API error code type.
0000000000000000000000000000000000000000;;	type ErrorCode int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// API error codes.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Factory errors
0000000000000000000000000000000000000000;;		IdInUse ErrorCode = iota
0000000000000000000000000000000000000000;;		InvalidIdFormat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Container errors
0000000000000000000000000000000000000000;;		ContainerNotExists
0000000000000000000000000000000000000000;;		ContainerPaused
0000000000000000000000000000000000000000;;		ContainerNotStopped
0000000000000000000000000000000000000000;;		ContainerNotRunning
0000000000000000000000000000000000000000;;		ContainerNotPaused
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Process errors
0000000000000000000000000000000000000000;;		NoProcessOps
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Common errors
0000000000000000000000000000000000000000;;		ConfigInvalid
0000000000000000000000000000000000000000;;		ConsoleExists
0000000000000000000000000000000000000000;;		SystemError
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ErrorCode) String() string {
0000000000000000000000000000000000000000;;		switch c {
0000000000000000000000000000000000000000;;		case IdInUse:
0000000000000000000000000000000000000000;;			return "Id already in use"
0000000000000000000000000000000000000000;;		case InvalidIdFormat:
0000000000000000000000000000000000000000;;			return "Invalid format"
0000000000000000000000000000000000000000;;		case ContainerPaused:
0000000000000000000000000000000000000000;;			return "Container paused"
0000000000000000000000000000000000000000;;		case ConfigInvalid:
0000000000000000000000000000000000000000;;			return "Invalid configuration"
0000000000000000000000000000000000000000;;		case SystemError:
0000000000000000000000000000000000000000;;			return "System error"
0000000000000000000000000000000000000000;;		case ContainerNotExists:
0000000000000000000000000000000000000000;;			return "Container does not exist"
0000000000000000000000000000000000000000;;		case ContainerNotStopped:
0000000000000000000000000000000000000000;;			return "Container is not stopped"
0000000000000000000000000000000000000000;;		case ContainerNotRunning:
0000000000000000000000000000000000000000;;			return "Container is not running"
0000000000000000000000000000000000000000;;		case ConsoleExists:
0000000000000000000000000000000000000000;;			return "Console exists for process"
0000000000000000000000000000000000000000;;		case ContainerNotPaused:
0000000000000000000000000000000000000000;;			return "Container is not paused"
0000000000000000000000000000000000000000;;		case NoProcessOps:
0000000000000000000000000000000000000000;;			return "No process operations"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "Unknown error"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error is the API error type.
0000000000000000000000000000000000000000;;	type Error interface {
0000000000000000000000000000000000000000;;		error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns a verbose string including the error message
0000000000000000000000000000000000000000;;		// and a representation of the stack trace suitable for
0000000000000000000000000000000000000000;;		// printing.
0000000000000000000000000000000000000000;;		Detail(w io.Writer) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the error code for this error.
0000000000000000000000000000000000000000;;		Code() ErrorCode
0000000000000000000000000000000000000000;;	}
