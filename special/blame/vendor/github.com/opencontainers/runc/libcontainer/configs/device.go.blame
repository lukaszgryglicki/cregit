0000000000000000000000000000000000000000;;	package configs
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/docker/libcontainer/configs/device.go[Godeps/_workspace/src/github.com/docker/libcontainer/configs/device.go][vendor/github.com/opencontainers/runc/libcontainer/configs/device.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Wildcard = -1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO Windows: This can be factored out in the future
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Device struct {
0000000000000000000000000000000000000000;;		// Device type, block, char, etc.
0000000000000000000000000000000000000000;;		Type rune `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Path to the device.
0000000000000000000000000000000000000000;;		Path string `json:"path"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Major is the device's major number.
0000000000000000000000000000000000000000;;		Major int64 `json:"major"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Minor is the device's minor number.
0000000000000000000000000000000000000000;;		Minor int64 `json:"minor"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cgroup permissions format, rwm.
0000000000000000000000000000000000000000;;		Permissions string `json:"permissions"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FileMode permission bits for the device.
0000000000000000000000000000000000000000;;		FileMode os.FileMode `json:"file_mode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Uid of the device.
0000000000000000000000000000000000000000;;		Uid uint32 `json:"uid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Gid of the device.
0000000000000000000000000000000000000000;;		Gid uint32 `json:"gid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Write the file to the allowed list
0000000000000000000000000000000000000000;;		Allow bool `json:"allow"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *Device) CgroupString() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%c %s:%s %s", d.Type, deviceNumberString(d.Major), deviceNumberString(d.Minor), d.Permissions)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *Device) Mkdev() int {
0000000000000000000000000000000000000000;;		return int((d.Major << 8) | (d.Minor & 0xff) | ((d.Minor & 0xfff00) << 12))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// deviceNumberString converts the device number to a string return result.
0000000000000000000000000000000000000000;;	func deviceNumberString(number int64) string {
0000000000000000000000000000000000000000;;		if number == Wildcard {
0000000000000000000000000000000000000000;;			return "*"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprint(number)
0000000000000000000000000000000000000000;;	}
