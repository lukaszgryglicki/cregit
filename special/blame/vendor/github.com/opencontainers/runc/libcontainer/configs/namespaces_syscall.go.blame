0000000000000000000000000000000000000000;;	// +build linux
99954112f88fa3ef5104dbddc2d5ae623bd781d9;Godeps/_workspace/src/github.com/docker/libcontainer/configs/namespaces_syscall.go[Godeps/_workspace/src/github.com/docker/libcontainer/configs/namespaces_syscall.go][vendor/github.com/opencontainers/runc/libcontainer/configs/namespaces_syscall.go];	
0000000000000000000000000000000000000000;;	package configs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *Namespace) Syscall() int {
0000000000000000000000000000000000000000;;		return namespaceInfo[n.Type]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var namespaceInfo = map[NamespaceType]int{
0000000000000000000000000000000000000000;;		NEWNET:  syscall.CLONE_NEWNET,
0000000000000000000000000000000000000000;;		NEWNS:   syscall.CLONE_NEWNS,
0000000000000000000000000000000000000000;;		NEWUSER: syscall.CLONE_NEWUSER,
0000000000000000000000000000000000000000;;		NEWIPC:  syscall.CLONE_NEWIPC,
0000000000000000000000000000000000000000;;		NEWUTS:  syscall.CLONE_NEWUTS,
0000000000000000000000000000000000000000;;		NEWPID:  syscall.CLONE_NEWPID,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloneFlags parses the container's Namespaces options to set the correct
0000000000000000000000000000000000000000;;	// flags on clone, unshare. This function returns flags only for new namespaces.
0000000000000000000000000000000000000000;;	func (n *Namespaces) CloneFlags() uintptr {
0000000000000000000000000000000000000000;;		var flag int
0000000000000000000000000000000000000000;;		for _, v := range *n {
0000000000000000000000000000000000000000;;			if v.Path != "" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			flag |= namespaceInfo[v.Type]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uintptr(flag)
0000000000000000000000000000000000000000;;	}
