0000000000000000000000000000000000000000;;	package configs
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/opencontainers/runc/libcontainer/configs/blkio_device.go[Godeps/_workspace/src/github.com/opencontainers/runc/libcontainer/configs/blkio_device.go][vendor/github.com/opencontainers/runc/libcontainer/configs/blkio_device.go];	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// blockIODevice holds major:minor format supported in blkio cgroup
0000000000000000000000000000000000000000;;	type blockIODevice struct {
0000000000000000000000000000000000000000;;		// Major is the device's major number
0000000000000000000000000000000000000000;;		Major int64 `json:"major"`
0000000000000000000000000000000000000000;;		// Minor is the device's minor number
0000000000000000000000000000000000000000;;		Minor int64 `json:"minor"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WeightDevice struct holds a `major:minor weight`|`major:minor leaf_weight` pair
0000000000000000000000000000000000000000;;	type WeightDevice struct {
0000000000000000000000000000000000000000;;		blockIODevice
0000000000000000000000000000000000000000;;		// Weight is the bandwidth rate for the device, range is from 10 to 1000
0000000000000000000000000000000000000000;;		Weight uint16 `json:"weight"`
0000000000000000000000000000000000000000;;		// LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, range is from 10 to 1000, cfq scheduler only
0000000000000000000000000000000000000000;;		LeafWeight uint16 `json:"leafWeight"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewWeightDevice returns a configured WeightDevice pointer
0000000000000000000000000000000000000000;;	func NewWeightDevice(major, minor int64, weight, leafWeight uint16) *WeightDevice {
0000000000000000000000000000000000000000;;		wd := &WeightDevice{}
0000000000000000000000000000000000000000;;		wd.Major = major
0000000000000000000000000000000000000000;;		wd.Minor = minor
0000000000000000000000000000000000000000;;		wd.Weight = weight
0000000000000000000000000000000000000000;;		wd.LeafWeight = leafWeight
0000000000000000000000000000000000000000;;		return wd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WeightString formats the struct to be writable to the cgroup specific file
0000000000000000000000000000000000000000;;	func (wd *WeightDevice) WeightString() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d:%d %d", wd.Major, wd.Minor, wd.Weight)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LeafWeightString formats the struct to be writable to the cgroup specific file
0000000000000000000000000000000000000000;;	func (wd *WeightDevice) LeafWeightString() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d:%d %d", wd.Major, wd.Minor, wd.LeafWeight)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ThrottleDevice struct holds a `major:minor rate_per_second` pair
0000000000000000000000000000000000000000;;	type ThrottleDevice struct {
0000000000000000000000000000000000000000;;		blockIODevice
0000000000000000000000000000000000000000;;		// Rate is the IO rate limit per cgroup per device
0000000000000000000000000000000000000000;;		Rate uint64 `json:"rate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewThrottleDevice returns a configured ThrottleDevice pointer
0000000000000000000000000000000000000000;;	func NewThrottleDevice(major, minor int64, rate uint64) *ThrottleDevice {
0000000000000000000000000000000000000000;;		td := &ThrottleDevice{}
0000000000000000000000000000000000000000;;		td.Major = major
0000000000000000000000000000000000000000;;		td.Minor = minor
0000000000000000000000000000000000000000;;		td.Rate = rate
0000000000000000000000000000000000000000;;		return td
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String formats the struct to be writable to the cgroup specific file
0000000000000000000000000000000000000000;;	func (td *ThrottleDevice) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d:%d %d", td.Major, td.Minor, td.Rate)
0000000000000000000000000000000000000000;;	}
