0000000000000000000000000000000000000000;;	// +build freebsd linux
d130243057bea8ebcfa3fdfcb8c3aeaf4ca246bf;Godeps/_workspace/src/github.com/docker/libcontainer/configs/config_unix.go[Godeps/_workspace/src/github.com/docker/libcontainer/configs/config_unix.go][vendor/github.com/opencontainers/runc/libcontainer/configs/config_unix.go];	
0000000000000000000000000000000000000000;;	package configs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HostUID gets the root uid for the process on host which could be non-zero
0000000000000000000000000000000000000000;;	// when user namespaces are enabled.
0000000000000000000000000000000000000000;;	func (c Config) HostUID() (int, error) {
0000000000000000000000000000000000000000;;		if c.Namespaces.Contains(NEWUSER) {
0000000000000000000000000000000000000000;;			if c.UidMappings == nil {
0000000000000000000000000000000000000000;;				return -1, fmt.Errorf("User namespaces enabled, but no user mappings found.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			id, found := c.hostIDFromMapping(0, c.UidMappings)
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return -1, fmt.Errorf("User namespaces enabled, but no root user mapping found.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Return default root uid 0
0000000000000000000000000000000000000000;;		return 0, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HostGID gets the root gid for the process on host which could be non-zero
0000000000000000000000000000000000000000;;	// when user namespaces are enabled.
0000000000000000000000000000000000000000;;	func (c Config) HostGID() (int, error) {
0000000000000000000000000000000000000000;;		if c.Namespaces.Contains(NEWUSER) {
0000000000000000000000000000000000000000;;			if c.GidMappings == nil {
0000000000000000000000000000000000000000;;				return -1, fmt.Errorf("User namespaces enabled, but no gid mappings found.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			id, found := c.hostIDFromMapping(0, c.GidMappings)
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return -1, fmt.Errorf("User namespaces enabled, but no root group mapping found.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return id, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Return default root gid 0
0000000000000000000000000000000000000000;;		return 0, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Utility function that gets a host ID for a container ID from user namespace map
0000000000000000000000000000000000000000;;	// if that ID is present in the map.
0000000000000000000000000000000000000000;;	func (c Config) hostIDFromMapping(containerID int, uMap []IDMap) (int, bool) {
0000000000000000000000000000000000000000;;		for _, m := range uMap {
0000000000000000000000000000000000000000;;			if (containerID >= m.ContainerID) && (containerID <= (m.ContainerID + m.Size - 1)) {
0000000000000000000000000000000000000000;;				hostID := m.HostID + (containerID - m.ContainerID)
0000000000000000000000000000000000000000;;				return hostID, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return -1, false
0000000000000000000000000000000000000000;;	}
