0000000000000000000000000000000000000000;;	package configs
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/docker/libcontainer/configs/network.go[Godeps/_workspace/src/github.com/docker/libcontainer/configs/network.go][vendor/github.com/opencontainers/runc/libcontainer/configs/network.go];	
0000000000000000000000000000000000000000;;	// Network defines configuration for a container's networking stack
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The network configuration can be omitted from a container causing the
0000000000000000000000000000000000000000;;	// container to be setup with the host's networking stack
0000000000000000000000000000000000000000;;	type Network struct {
0000000000000000000000000000000000000000;;		// Type sets the networks type, commonly veth and loopback
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of the network interface
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The bridge to use.
0000000000000000000000000000000000000000;;		Bridge string `json:"bridge"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MacAddress contains the MAC address to set on the network interface
0000000000000000000000000000000000000000;;		MacAddress string `json:"mac_address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Address contains the IPv4 and mask to set on the network interface
0000000000000000000000000000000000000000;;		Address string `json:"address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Gateway sets the gateway address that is used as the default for the interface
0000000000000000000000000000000000000000;;		Gateway string `json:"gateway"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IPv6Address contains the IPv6 and mask to set on the network interface
0000000000000000000000000000000000000000;;		IPv6Address string `json:"ipv6_address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IPv6Gateway sets the ipv6 gateway address that is used as the default for the interface
0000000000000000000000000000000000000000;;		IPv6Gateway string `json:"ipv6_gateway"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mtu sets the mtu value for the interface and will be mirrored on both the host and
0000000000000000000000000000000000000000;;		// container's interfaces if a pair is created, specifically in the case of type veth
0000000000000000000000000000000000000000;;		// Note: This does not apply to loopback interfaces.
0000000000000000000000000000000000000000;;		Mtu int `json:"mtu"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TxQueueLen sets the tx_queuelen value for the interface and will be mirrored on both the host and
0000000000000000000000000000000000000000;;		// container's interfaces if a pair is created, specifically in the case of type veth
0000000000000000000000000000000000000000;;		// Note: This does not apply to loopback interfaces.
0000000000000000000000000000000000000000;;		TxQueueLen int `json:"txqueuelen"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HostInterfaceName is a unique name of a veth pair that resides on in the host interface of the
0000000000000000000000000000000000000000;;		// container.
0000000000000000000000000000000000000000;;		HostInterfaceName string `json:"host_interface_name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HairpinMode specifies if hairpin NAT should be enabled on the virtual interface
0000000000000000000000000000000000000000;;		// bridge port in the case of type veth
0000000000000000000000000000000000000000;;		// Note: This is unsupported on some systems.
0000000000000000000000000000000000000000;;		// Note: This does not apply to loopback interfaces.
0000000000000000000000000000000000000000;;		HairpinMode bool `json:"hairpin_mode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Routes can be specified to create entries in the route table as the container is started
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// All of destination, source, and gateway should be either IPv4 or IPv6.
0000000000000000000000000000000000000000;;	// One of the three options must be present, and omitted entries will use their
0000000000000000000000000000000000000000;;	// IP family default for the route table.  For IPv4 for example, setting the
0000000000000000000000000000000000000000;;	// gateway to 1.2.3.4 and the interface to eth0 will set up a standard
0000000000000000000000000000000000000000;;	// destination of 0.0.0.0(or *) when viewed in the route table.
0000000000000000000000000000000000000000;;	type Route struct {
0000000000000000000000000000000000000000;;		// Sets the destination and mask, should be a CIDR.  Accepts IPv4 and IPv6
0000000000000000000000000000000000000000;;		Destination string `json:"destination"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sets the source and mask, should be a CIDR.  Accepts IPv4 and IPv6
0000000000000000000000000000000000000000;;		Source string `json:"source"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sets the gateway.  Accepts IPv4 and IPv6
0000000000000000000000000000000000000000;;		Gateway string `json:"gateway"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device to set this route up for, for example: eth0
0000000000000000000000000000000000000000;;		InterfaceName string `json:"interface_name"`
0000000000000000000000000000000000000000;;	}
