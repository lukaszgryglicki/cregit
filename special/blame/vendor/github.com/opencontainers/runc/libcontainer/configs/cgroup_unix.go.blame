0000000000000000000000000000000000000000;;	// +build linux freebsd
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/docker/libcontainer/configs/cgroup.go[Godeps/_workspace/src/github.com/docker/libcontainer/configs/cgroup.go][vendor/github.com/opencontainers/runc/libcontainer/configs/cgroup_unix.go];	
0000000000000000000000000000000000000000;;	package configs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FreezerState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Undefined FreezerState = ""
0000000000000000000000000000000000000000;;		Frozen    FreezerState = "FROZEN"
0000000000000000000000000000000000000000;;		Thawed    FreezerState = "THAWED"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cgroup struct {
0000000000000000000000000000000000000000;;		// Deprecated, use Path instead
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// name of parent of cgroup or slice
0000000000000000000000000000000000000000;;		// Deprecated, use Path instead
0000000000000000000000000000000000000000;;		Parent string `json:"parent,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Path specifies the path to cgroups that are created and/or joined by the container.
0000000000000000000000000000000000000000;;		// The path is assumed to be relative to the host system cgroup mountpoint.
0000000000000000000000000000000000000000;;		Path string `json:"path"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ScopePrefix describes prefix for the scope name
0000000000000000000000000000000000000000;;		ScopePrefix string `json:"scope_prefix"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Paths represent the absolute cgroups paths to join.
0000000000000000000000000000000000000000;;		// This takes precedence over Path.
0000000000000000000000000000000000000000;;		Paths map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resources contains various cgroups settings to apply
0000000000000000000000000000000000000000;;		*Resources
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Resources struct {
0000000000000000000000000000000000000000;;		// If this is true allow access to any kind of device within the container.  If false, allow access only to devices explicitly listed in the allowed_devices list.
0000000000000000000000000000000000000000;;		// Deprecated
0000000000000000000000000000000000000000;;		AllowAllDevices *bool `json:"allow_all_devices,omitempty"`
0000000000000000000000000000000000000000;;		// Deprecated
0000000000000000000000000000000000000000;;		AllowedDevices []*Device `json:"allowed_devices,omitempty"`
0000000000000000000000000000000000000000;;		// Deprecated
0000000000000000000000000000000000000000;;		DeniedDevices []*Device `json:"denied_devices,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Devices []*Device `json:"devices"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Memory limit (in bytes)
0000000000000000000000000000000000000000;;		Memory int64 `json:"memory"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Memory reservation or soft_limit (in bytes)
0000000000000000000000000000000000000000;;		MemoryReservation int64 `json:"memory_reservation"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Total memory usage (memory + swap); set `-1` to enable unlimited swap
0000000000000000000000000000000000000000;;		MemorySwap int64 `json:"memory_swap"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kernel memory limit (in bytes)
0000000000000000000000000000000000000000;;		KernelMemory int64 `json:"kernel_memory"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kernel memory limit for TCP use (in bytes)
0000000000000000000000000000000000000000;;		KernelMemoryTCP int64 `json:"kernel_memory_tcp"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CPU shares (relative weight vs. other containers)
0000000000000000000000000000000000000000;;		CpuShares int64 `json:"cpu_shares"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
0000000000000000000000000000000000000000;;		CpuQuota int64 `json:"cpu_quota"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CPU period to be used for hardcapping (in usecs). 0 to use system default.
0000000000000000000000000000000000000000;;		CpuPeriod int64 `json:"cpu_period"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// How many time CPU will use in realtime scheduling (in usecs).
0000000000000000000000000000000000000000;;		CpuRtRuntime int64 `json:"cpu_rt_quota"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CPU period to be used for realtime scheduling (in usecs).
0000000000000000000000000000000000000000;;		CpuRtPeriod int64 `json:"cpu_rt_period"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CPU to use
0000000000000000000000000000000000000000;;		CpusetCpus string `json:"cpuset_cpus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MEM to use
0000000000000000000000000000000000000000;;		CpusetMems string `json:"cpuset_mems"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Process limit; set <= `0' to disable limit.
0000000000000000000000000000000000000000;;		PidsLimit int64 `json:"pids_limit"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies per cgroup weight, range is from 10 to 1000.
0000000000000000000000000000000000000000;;		BlkioWeight uint16 `json:"blkio_weight"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, range is from 10 to 1000, cfq scheduler only
0000000000000000000000000000000000000000;;		BlkioLeafWeight uint16 `json:"blkio_leaf_weight"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weight per cgroup per device, can override BlkioWeight.
0000000000000000000000000000000000000000;;		BlkioWeightDevice []*WeightDevice `json:"blkio_weight_device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IO read rate limit per cgroup per device, bytes per second.
0000000000000000000000000000000000000000;;		BlkioThrottleReadBpsDevice []*ThrottleDevice `json:"blkio_throttle_read_bps_device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IO write rate limit per cgroup per device, bytes per second.
0000000000000000000000000000000000000000;;		BlkioThrottleWriteBpsDevice []*ThrottleDevice `json:"blkio_throttle_write_bps_device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IO read rate limit per cgroup per device, IO per second.
0000000000000000000000000000000000000000;;		BlkioThrottleReadIOPSDevice []*ThrottleDevice `json:"blkio_throttle_read_iops_device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IO write rate limit per cgroup per device, IO per second.
0000000000000000000000000000000000000000;;		BlkioThrottleWriteIOPSDevice []*ThrottleDevice `json:"blkio_throttle_write_iops_device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set the freeze value for the process
0000000000000000000000000000000000000000;;		Freezer FreezerState `json:"freezer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Hugetlb limit (in bytes)
0000000000000000000000000000000000000000;;		HugetlbLimit []*HugepageLimit `json:"hugetlb_limit"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Whether to disable OOM Killer
0000000000000000000000000000000000000000;;		OomKillDisable bool `json:"oom_kill_disable"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Tuning swappiness behaviour per cgroup
0000000000000000000000000000000000000000;;		MemorySwappiness *int64 `json:"memory_swappiness"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set priority of network traffic for container
0000000000000000000000000000000000000000;;		NetPrioIfpriomap []*IfPrioMap `json:"net_prio_ifpriomap"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set class identifier for container's network packets
0000000000000000000000000000000000000000;;		NetClsClassid uint32 `json:"net_cls_classid_u"`
0000000000000000000000000000000000000000;;	}
