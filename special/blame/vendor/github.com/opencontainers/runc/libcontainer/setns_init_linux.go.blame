0000000000000000000000000000000000000000;;	// +build linux
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/docker/libcontainer/setns_init_linux.go[Godeps/_workspace/src/github.com/docker/libcontainer/setns_init_linux.go][vendor/github.com/opencontainers/runc/libcontainer/setns_init_linux.go];	
0000000000000000000000000000000000000000;;	package libcontainer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/apparmor"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/keys"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/label"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/seccomp"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/system"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// linuxSetnsInit performs the container's initialization for running a new process
0000000000000000000000000000000000000000;;	// inside an existing container.
0000000000000000000000000000000000000000;;	type linuxSetnsInit struct {
0000000000000000000000000000000000000000;;		config *initConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *linuxSetnsInit) getSessionRingName() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("_ses.%s", l.config.ContainerId)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *linuxSetnsInit) Init() error {
0000000000000000000000000000000000000000;;		if !l.config.Config.NoNewKeyring {
0000000000000000000000000000000000000000;;			// do not inherit the parent's session keyring
0000000000000000000000000000000000000000;;			if _, err := keys.JoinSessionKeyring(l.getSessionRingName()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.config.NoNewPrivileges {
0000000000000000000000000000000000000000;;			if err := system.Prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.config.Config.Seccomp != nil {
0000000000000000000000000000000000000000;;			if err := seccomp.InitSeccomp(l.config.Config.Seccomp); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := finalizeNamespace(l.config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := apparmor.ApplyProfile(l.config.AppArmorProfile); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())
0000000000000000000000000000000000000000;;	}
