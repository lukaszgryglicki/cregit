0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/cgroups.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/cgroups.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/cgroups.go];	
0000000000000000000000000000000000000000;;	package cgroups
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Manager interface {
0000000000000000000000000000000000000000;;		// Applies cgroup configuration to the process with the specified pid
0000000000000000000000000000000000000000;;		Apply(pid int) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the PIDs inside the cgroup set
0000000000000000000000000000000000000000;;		GetPids() ([]int, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the PIDs inside the cgroup set & all sub-cgroups
0000000000000000000000000000000000000000;;		GetAllPids() ([]int, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns statistics for the cgroup set
0000000000000000000000000000000000000000;;		GetStats() (*Stats, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Toggles the freezer cgroup according with specified state
0000000000000000000000000000000000000000;;		Freeze(state configs.FreezerState) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Destroys the cgroup set
0000000000000000000000000000000000000000;;		Destroy() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NewCgroupManager() and LoadCgroupManager() require following attributes:
0000000000000000000000000000000000000000;;		// 	Paths   map[string]string
0000000000000000000000000000000000000000;;		// 	Cgroups *cgroups.Cgroup
0000000000000000000000000000000000000000;;		// Paths maps cgroup subsystem to path at which it is mounted.
0000000000000000000000000000000000000000;;		// Cgroups specifies specific cgroup settings for the various subsystems
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns cgroup paths to save in a state file and to be able to
0000000000000000000000000000000000000000;;		// restore the object later.
0000000000000000000000000000000000000000;;		GetPaths() map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sets the cgroup as configured.
0000000000000000000000000000000000000000;;		Set(container *configs.Config) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotFoundError struct {
0000000000000000000000000000000000000000;;		Subsystem string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *NotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("mountpoint for %s not found", e.Subsystem)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNotFoundError(sub string) error {
0000000000000000000000000000000000000000;;		return &NotFoundError{
0000000000000000000000000000000000000000;;			Subsystem: sub,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsNotFound(err error) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, ok := err.(*NotFoundError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
