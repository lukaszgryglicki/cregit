0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/utils.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/utils.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/utils.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNotValidFormat = errors.New("line is not a valid key value format")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Saturates negative values at zero and returns a uint64.
0000000000000000000000000000000000000000;;	// Due to kernel bugs, some of the memory cgroup stats can be negative.
0000000000000000000000000000000000000000;;	func parseUint(s string, base, bitSize int) (uint64, error) {
0000000000000000000000000000000000000000;;		value, err := strconv.ParseUint(s, base, bitSize)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			intValue, intErr := strconv.ParseInt(s, base, bitSize)
0000000000000000000000000000000000000000;;			// 1. Handle negative values greater than MinInt64 (and)
0000000000000000000000000000000000000000;;			// 2. Handle negative values lesser than MinInt64
0000000000000000000000000000000000000000;;			if intErr == nil && intValue < 0 {
0000000000000000000000000000000000000000;;				return 0, nil
0000000000000000000000000000000000000000;;			} else if intErr != nil && intErr.(*strconv.NumError).Err == strconv.ErrRange && intValue < 0 {
0000000000000000000000000000000000000000;;				return 0, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return value, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return value, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parses a cgroup param and returns as name, value
0000000000000000000000000000000000000000;;	//  i.e. "io_service_bytes 1234" will return as io_service_bytes, 1234
0000000000000000000000000000000000000000;;	func getCgroupParamKeyValue(t string) (string, uint64, error) {
0000000000000000000000000000000000000000;;		parts := strings.Fields(t)
0000000000000000000000000000000000000000;;		switch len(parts) {
0000000000000000000000000000000000000000;;		case 2:
0000000000000000000000000000000000000000;;			value, err := parseUint(parts[1], 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", 0, fmt.Errorf("unable to convert param value (%q) to uint64: %v", parts[1], err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return parts[0], value, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", 0, ErrNotValidFormat
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a single uint64 value from the specified cgroup file.
0000000000000000000000000000000000000000;;	func getCgroupParamUint(cgroupPath, cgroupFile string) (uint64, error) {
0000000000000000000000000000000000000000;;		fileName := filepath.Join(cgroupPath, cgroupFile)
0000000000000000000000000000000000000000;;		contents, err := ioutil.ReadFile(fileName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := parseUint(strings.TrimSpace(string(contents)), 10, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return res, fmt.Errorf("unable to parse %q as a uint from Cgroup file %q", string(contents), fileName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a string value from the specified cgroup file
0000000000000000000000000000000000000000;;	func getCgroupParamString(cgroupPath, cgroupFile string) (string, error) {
0000000000000000000000000000000000000000;;		contents, err := ioutil.ReadFile(filepath.Join(cgroupPath, cgroupFile))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strings.TrimSpace(string(contents)), nil
0000000000000000000000000000000000000000;;	}
