0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/devices.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/devices.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/devices.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/cgroups"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/system"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DevicesGroup struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DevicesGroup) Name() string {
0000000000000000000000000000000000000000;;		return "devices"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DevicesGroup) Apply(d *cgroupData) error {
0000000000000000000000000000000000000000;;		_, err := d.join("devices")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// We will return error even it's `not found` error, devices
0000000000000000000000000000000000000000;;			// cgroup is hard requirement for container's security.
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DevicesGroup) Set(path string, cgroup *configs.Cgroup) error {
0000000000000000000000000000000000000000;;		if system.RunningInUserNS() {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		devices := cgroup.Resources.Devices
0000000000000000000000000000000000000000;;		if len(devices) > 0 {
0000000000000000000000000000000000000000;;			for _, dev := range devices {
0000000000000000000000000000000000000000;;				file := "devices.deny"
0000000000000000000000000000000000000000;;				if dev.Allow {
0000000000000000000000000000000000000000;;					file = "devices.allow"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := writeFile(path, file, dev.CgroupString()); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cgroup.Resources.AllowAllDevices != nil {
0000000000000000000000000000000000000000;;			if *cgroup.Resources.AllowAllDevices == false {
0000000000000000000000000000000000000000;;				if err := writeFile(path, "devices.deny", "a"); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, dev := range cgroup.Resources.AllowedDevices {
0000000000000000000000000000000000000000;;					if err := writeFile(path, "devices.allow", dev.CgroupString()); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := writeFile(path, "devices.allow", "a"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, dev := range cgroup.Resources.DeniedDevices {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "devices.deny", dev.CgroupString()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DevicesGroup) Remove(d *cgroupData) error {
0000000000000000000000000000000000000000;;		return removePath(d.path("devices"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DevicesGroup) GetStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
