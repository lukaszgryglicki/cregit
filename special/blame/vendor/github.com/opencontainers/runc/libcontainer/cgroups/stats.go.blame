0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/stats.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/stats.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/stats.go];	
0000000000000000000000000000000000000000;;	package cgroups
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ThrottlingData struct {
0000000000000000000000000000000000000000;;		// Number of periods with throttling active
0000000000000000000000000000000000000000;;		Periods uint64 `json:"periods,omitempty"`
0000000000000000000000000000000000000000;;		// Number of periods when the container hit its throttling limit.
0000000000000000000000000000000000000000;;		ThrottledPeriods uint64 `json:"throttled_periods,omitempty"`
0000000000000000000000000000000000000000;;		// Aggregate time the container was throttled for in nanoseconds.
0000000000000000000000000000000000000000;;		ThrottledTime uint64 `json:"throttled_time,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CpuUsage denotes the usage of a CPU.
0000000000000000000000000000000000000000;;	// All CPU stats are aggregate since container inception.
0000000000000000000000000000000000000000;;	type CpuUsage struct {
0000000000000000000000000000000000000000;;		// Total CPU time consumed.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		TotalUsage uint64 `json:"total_usage,omitempty"`
0000000000000000000000000000000000000000;;		// Total CPU time consumed per core.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		PercpuUsage []uint64 `json:"percpu_usage,omitempty"`
0000000000000000000000000000000000000000;;		// Time spent by tasks of the cgroup in kernel mode.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		UsageInKernelmode uint64 `json:"usage_in_kernelmode"`
0000000000000000000000000000000000000000;;		// Time spent by tasks of the cgroup in user mode.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		UsageInUsermode uint64 `json:"usage_in_usermode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuStats struct {
0000000000000000000000000000000000000000;;		CpuUsage       CpuUsage       `json:"cpu_usage,omitempty"`
0000000000000000000000000000000000000000;;		ThrottlingData ThrottlingData `json:"throttling_data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemoryData struct {
0000000000000000000000000000000000000000;;		Usage    uint64 `json:"usage,omitempty"`
0000000000000000000000000000000000000000;;		MaxUsage uint64 `json:"max_usage,omitempty"`
0000000000000000000000000000000000000000;;		Failcnt  uint64 `json:"failcnt"`
0000000000000000000000000000000000000000;;		Limit    uint64 `json:"limit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemoryStats struct {
0000000000000000000000000000000000000000;;		// memory used for cache
0000000000000000000000000000000000000000;;		Cache uint64 `json:"cache,omitempty"`
0000000000000000000000000000000000000000;;		// usage of memory
0000000000000000000000000000000000000000;;		Usage MemoryData `json:"usage,omitempty"`
0000000000000000000000000000000000000000;;		// usage of memory + swap
0000000000000000000000000000000000000000;;		SwapUsage MemoryData `json:"swap_usage,omitempty"`
0000000000000000000000000000000000000000;;		// usage of kernel memory
0000000000000000000000000000000000000000;;		KernelUsage MemoryData `json:"kernel_usage,omitempty"`
0000000000000000000000000000000000000000;;		// usage of kernel TCP memory
0000000000000000000000000000000000000000;;		KernelTCPUsage MemoryData `json:"kernel_tcp_usage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Stats map[string]uint64 `json:"stats,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PidsStats struct {
0000000000000000000000000000000000000000;;		// number of pids in the cgroup
0000000000000000000000000000000000000000;;		Current uint64 `json:"current,omitempty"`
0000000000000000000000000000000000000000;;		// active pids hard limit
0000000000000000000000000000000000000000;;		Limit uint64 `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BlkioStatEntry struct {
0000000000000000000000000000000000000000;;		Major uint64 `json:"major,omitempty"`
0000000000000000000000000000000000000000;;		Minor uint64 `json:"minor,omitempty"`
0000000000000000000000000000000000000000;;		Op    string `json:"op,omitempty"`
0000000000000000000000000000000000000000;;		Value uint64 `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BlkioStats struct {
0000000000000000000000000000000000000000;;		// number of bytes tranferred to and from the block device
0000000000000000000000000000000000000000;;		IoServiceBytesRecursive []BlkioStatEntry `json:"io_service_bytes_recursive,omitempty"`
0000000000000000000000000000000000000000;;		IoServicedRecursive     []BlkioStatEntry `json:"io_serviced_recursive,omitempty"`
0000000000000000000000000000000000000000;;		IoQueuedRecursive       []BlkioStatEntry `json:"io_queue_recursive,omitempty"`
0000000000000000000000000000000000000000;;		IoServiceTimeRecursive  []BlkioStatEntry `json:"io_service_time_recursive,omitempty"`
0000000000000000000000000000000000000000;;		IoWaitTimeRecursive     []BlkioStatEntry `json:"io_wait_time_recursive,omitempty"`
0000000000000000000000000000000000000000;;		IoMergedRecursive       []BlkioStatEntry `json:"io_merged_recursive,omitempty"`
0000000000000000000000000000000000000000;;		IoTimeRecursive         []BlkioStatEntry `json:"io_time_recursive,omitempty"`
0000000000000000000000000000000000000000;;		SectorsRecursive        []BlkioStatEntry `json:"sectors_recursive,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HugetlbStats struct {
0000000000000000000000000000000000000000;;		// current res_counter usage for hugetlb
0000000000000000000000000000000000000000;;		Usage uint64 `json:"usage,omitempty"`
0000000000000000000000000000000000000000;;		// maximum usage ever recorded.
0000000000000000000000000000000000000000;;		MaxUsage uint64 `json:"max_usage,omitempty"`
0000000000000000000000000000000000000000;;		// number of times hugetlb usage allocation failure.
0000000000000000000000000000000000000000;;		Failcnt uint64 `json:"failcnt"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stats struct {
0000000000000000000000000000000000000000;;		CpuStats    CpuStats    `json:"cpu_stats,omitempty"`
0000000000000000000000000000000000000000;;		MemoryStats MemoryStats `json:"memory_stats,omitempty"`
0000000000000000000000000000000000000000;;		PidsStats   PidsStats   `json:"pids_stats,omitempty"`
0000000000000000000000000000000000000000;;		BlkioStats  BlkioStats  `json:"blkio_stats,omitempty"`
0000000000000000000000000000000000000000;;		// the map is in the format "size of hugepage: stats of the hugepage"
0000000000000000000000000000000000000000;;		HugetlbStats map[string]HugetlbStats `json:"hugetlb_stats,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStats() *Stats {
0000000000000000000000000000000000000000;;		memoryStats := MemoryStats{Stats: make(map[string]uint64)}
0000000000000000000000000000000000000000;;		hugetlbStats := make(map[string]HugetlbStats)
0000000000000000000000000000000000000000;;		return &Stats{MemoryStats: memoryStats, HugetlbStats: hugetlbStats}
0000000000000000000000000000000000000000;;	}
