0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/cpuacct.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/cpuacct.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/cpuacct.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/cgroups"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/system"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		cgroupCpuacctStat   = "cpuacct.stat"
0000000000000000000000000000000000000000;;		nanosecondsInSecond = 1000000000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clockTicks = uint64(system.GetClockTicks())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuacctGroup struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CpuacctGroup) Name() string {
0000000000000000000000000000000000000000;;		return "cpuacct"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CpuacctGroup) Apply(d *cgroupData) error {
0000000000000000000000000000000000000000;;		// we just want to join this group even though we don't set anything
0000000000000000000000000000000000000000;;		if _, err := d.join("cpuacct"); err != nil && !cgroups.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CpuacctGroup) Set(path string, cgroup *configs.Cgroup) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CpuacctGroup) Remove(d *cgroupData) error {
0000000000000000000000000000000000000000;;		return removePath(d.path("cpuacct"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CpuacctGroup) GetStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		userModeUsage, kernelModeUsage, err := getCpuUsageBreakdown(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		totalUsage, err := getCgroupParamUint(path, "cpuacct.usage")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		percpuUsage, err := getPercpuUsage(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stats.CpuStats.CpuUsage.TotalUsage = totalUsage
0000000000000000000000000000000000000000;;		stats.CpuStats.CpuUsage.PercpuUsage = percpuUsage
0000000000000000000000000000000000000000;;		stats.CpuStats.CpuUsage.UsageInUsermode = userModeUsage
0000000000000000000000000000000000000000;;		stats.CpuStats.CpuUsage.UsageInKernelmode = kernelModeUsage
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns user and kernel usage breakdown in nanoseconds.
0000000000000000000000000000000000000000;;	func getCpuUsageBreakdown(path string) (uint64, uint64, error) {
0000000000000000000000000000000000000000;;		userModeUsage := uint64(0)
0000000000000000000000000000000000000000;;		kernelModeUsage := uint64(0)
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			userField   = "user"
0000000000000000000000000000000000000000;;			systemField = "system"
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expected format:
0000000000000000000000000000000000000000;;		// user <usage in ticks>
0000000000000000000000000000000000000000;;		// system <usage in ticks>
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(filepath.Join(path, cgroupCpuacctStat))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fields := strings.Fields(string(data))
0000000000000000000000000000000000000000;;		if len(fields) != 4 {
0000000000000000000000000000000000000000;;			return 0, 0, fmt.Errorf("failure - %s is expected to have 4 fields", filepath.Join(path, cgroupCpuacctStat))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fields[0] != userField {
0000000000000000000000000000000000000000;;			return 0, 0, fmt.Errorf("unexpected field %q in %q, expected %q", fields[0], cgroupCpuacctStat, userField)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fields[2] != systemField {
0000000000000000000000000000000000000000;;			return 0, 0, fmt.Errorf("unexpected field %q in %q, expected %q", fields[2], cgroupCpuacctStat, systemField)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if userModeUsage, err = strconv.ParseUint(fields[1], 10, 64); err != nil {
0000000000000000000000000000000000000000;;			return 0, 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if kernelModeUsage, err = strconv.ParseUint(fields[3], 10, 64); err != nil {
0000000000000000000000000000000000000000;;			return 0, 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return (userModeUsage * nanosecondsInSecond) / clockTicks, (kernelModeUsage * nanosecondsInSecond) / clockTicks, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPercpuUsage(path string) ([]uint64, error) {
0000000000000000000000000000000000000000;;		percpuUsage := []uint64{}
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(filepath.Join(path, "cpuacct.usage_percpu"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return percpuUsage, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, value := range strings.Fields(string(data)) {
0000000000000000000000000000000000000000;;			value, err := strconv.ParseUint(value, 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return percpuUsage, fmt.Errorf("Unable to convert param value to uint64: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			percpuUsage = append(percpuUsage, value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return percpuUsage, nil
0000000000000000000000000000000000000000;;	}
