0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/blkio.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/blkio.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/blkio.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/cgroups"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BlkioGroup struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *BlkioGroup) Name() string {
0000000000000000000000000000000000000000;;		return "blkio"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *BlkioGroup) Apply(d *cgroupData) error {
0000000000000000000000000000000000000000;;		_, err := d.join("blkio")
0000000000000000000000000000000000000000;;		if err != nil && !cgroups.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *BlkioGroup) Set(path string, cgroup *configs.Cgroup) error {
0000000000000000000000000000000000000000;;		if cgroup.Resources.BlkioWeight != 0 {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.weight", strconv.FormatUint(uint64(cgroup.Resources.BlkioWeight), 10)); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cgroup.Resources.BlkioLeafWeight != 0 {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.leaf_weight", strconv.FormatUint(uint64(cgroup.Resources.BlkioLeafWeight), 10)); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, wd := range cgroup.Resources.BlkioWeightDevice {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.weight_device", wd.WeightString()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.leaf_weight_device", wd.LeafWeightString()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, td := range cgroup.Resources.BlkioThrottleReadBpsDevice {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.throttle.read_bps_device", td.String()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, td := range cgroup.Resources.BlkioThrottleWriteBpsDevice {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.throttle.write_bps_device", td.String()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, td := range cgroup.Resources.BlkioThrottleReadIOPSDevice {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.throttle.read_iops_device", td.String()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, td := range cgroup.Resources.BlkioThrottleWriteIOPSDevice {
0000000000000000000000000000000000000000;;			if err := writeFile(path, "blkio.throttle.write_iops_device", td.String()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *BlkioGroup) Remove(d *cgroupData) error {
0000000000000000000000000000000000000000;;		return removePath(d.path("blkio"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	examples:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    blkio.sectors
0000000000000000000000000000000000000000;;	    8:0 6792
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    blkio.io_service_bytes
0000000000000000000000000000000000000000;;	    8:0 Read 1282048
0000000000000000000000000000000000000000;;	    8:0 Write 2195456
0000000000000000000000000000000000000000;;	    8:0 Sync 2195456
0000000000000000000000000000000000000000;;	    8:0 Async 1282048
0000000000000000000000000000000000000000;;	    8:0 Total 3477504
0000000000000000000000000000000000000000;;	    Total 3477504
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    blkio.io_serviced
0000000000000000000000000000000000000000;;	    8:0 Read 124
0000000000000000000000000000000000000000;;	    8:0 Write 104
0000000000000000000000000000000000000000;;	    8:0 Sync 104
0000000000000000000000000000000000000000;;	    8:0 Async 124
0000000000000000000000000000000000000000;;	    8:0 Total 228
0000000000000000000000000000000000000000;;	    Total 228
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    blkio.io_queued
0000000000000000000000000000000000000000;;	    8:0 Read 0
0000000000000000000000000000000000000000;;	    8:0 Write 0
0000000000000000000000000000000000000000;;	    8:0 Sync 0
0000000000000000000000000000000000000000;;	    8:0 Async 0
0000000000000000000000000000000000000000;;	    8:0 Total 0
0000000000000000000000000000000000000000;;	    Total 0
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func splitBlkioStatLine(r rune) bool {
0000000000000000000000000000000000000000;;		return r == ' ' || r == ':'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getBlkioStat(path string) ([]cgroups.BlkioStatEntry, error) {
0000000000000000000000000000000000000000;;		var blkioStats []cgroups.BlkioStatEntry
0000000000000000000000000000000000000000;;		f, err := os.Open(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				return blkioStats, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sc := bufio.NewScanner(f)
0000000000000000000000000000000000000000;;		for sc.Scan() {
0000000000000000000000000000000000000000;;			// format: dev type amount
0000000000000000000000000000000000000000;;			fields := strings.FieldsFunc(sc.Text(), splitBlkioStatLine)
0000000000000000000000000000000000000000;;			if len(fields) < 3 {
0000000000000000000000000000000000000000;;				if len(fields) == 2 && fields[0] == "Total" {
0000000000000000000000000000000000000000;;					// skip total line
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Invalid line found while parsing %s: %s", path, sc.Text())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			v, err := strconv.ParseUint(fields[0], 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			major := v
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			v, err = strconv.ParseUint(fields[1], 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			minor := v
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			op := ""
0000000000000000000000000000000000000000;;			valueField := 2
0000000000000000000000000000000000000000;;			if len(fields) == 4 {
0000000000000000000000000000000000000000;;				op = fields[2]
0000000000000000000000000000000000000000;;				valueField = 3
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v, err = strconv.ParseUint(fields[valueField], 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			blkioStats = append(blkioStats, cgroups.BlkioStatEntry{Major: major, Minor: minor, Op: op, Value: v})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return blkioStats, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *BlkioGroup) GetStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		// Try to read CFQ stats available on all CFQ enabled kernels first
0000000000000000000000000000000000000000;;		if blkioStats, err := getBlkioStat(filepath.Join(path, "blkio.io_serviced_recursive")); err == nil && blkioStats != nil {
0000000000000000000000000000000000000000;;			return getCFQStats(path, stats)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return getStats(path, stats) // Use generic stats as fallback
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getCFQStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		var blkioStats []cgroups.BlkioStatEntry
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.sectors_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.SectorsRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.io_service_bytes_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoServiceBytesRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.io_serviced_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoServicedRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.io_queued_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoQueuedRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.io_service_time_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoServiceTimeRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.io_wait_time_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoWaitTimeRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.io_merged_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoMergedRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.time_recursive")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoTimeRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		var blkioStats []cgroups.BlkioStatEntry
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.throttle.io_service_bytes")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoServiceBytesRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if blkioStats, err = getBlkioStat(filepath.Join(path, "blkio.throttle.io_serviced")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.BlkioStats.IoServicedRecursive = blkioStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
