0000000000000000000000000000000000000000;;	// +build linux
387c5391f1ede5bc68630622494ee305c01f96bb;Godeps/_workspace/src/github.com/opencontainers/runc/libcontainer/cgroups/fs/pids.go[Godeps/_workspace/src/github.com/opencontainers/runc/libcontainer/cgroups/fs/pids.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/pids.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/cgroups"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PidsGroup struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PidsGroup) Name() string {
0000000000000000000000000000000000000000;;		return "pids"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PidsGroup) Apply(d *cgroupData) error {
0000000000000000000000000000000000000000;;		_, err := d.join("pids")
0000000000000000000000000000000000000000;;		if err != nil && !cgroups.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PidsGroup) Set(path string, cgroup *configs.Cgroup) error {
0000000000000000000000000000000000000000;;		if cgroup.Resources.PidsLimit != 0 {
0000000000000000000000000000000000000000;;			// "max" is the fallback value.
0000000000000000000000000000000000000000;;			limit := "max"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if cgroup.Resources.PidsLimit > 0 {
0000000000000000000000000000000000000000;;				limit = strconv.FormatInt(cgroup.Resources.PidsLimit, 10)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := writeFile(path, "pids.max", limit); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PidsGroup) Remove(d *cgroupData) error {
0000000000000000000000000000000000000000;;		return removePath(d.path("pids"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PidsGroup) GetStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		current, err := getCgroupParamUint(path, "pids.current")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to parse pids.current - %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		maxString, err := getCgroupParamString(path, "pids.max")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to parse pids.max - %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Default if pids.max == "max" is 0 -- which represents "no limit".
0000000000000000000000000000000000000000;;		var max uint64
0000000000000000000000000000000000000000;;		if maxString != "max" {
0000000000000000000000000000000000000000;;			max, err = parseUint(maxString, 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to parse pids.max - unable to parse %q as a uint from Cgroup file %q", maxString, filepath.Join(path, "pids.max"))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stats.PidsStats.Current = current
0000000000000000000000000000000000000000;;		stats.PidsStats.Limit = max
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
