0000000000000000000000000000000000000000;;	// +build linux
99954112f88fa3ef5104dbddc2d5ae623bd781d9;Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/hugetlb.go[Godeps/_workspace/src/github.com/docker/libcontainer/cgroups/fs/hugetlb.go][vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/hugetlb.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/cgroups"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HugetlbGroup struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HugetlbGroup) Name() string {
0000000000000000000000000000000000000000;;		return "hugetlb"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HugetlbGroup) Apply(d *cgroupData) error {
0000000000000000000000000000000000000000;;		_, err := d.join("hugetlb")
0000000000000000000000000000000000000000;;		if err != nil && !cgroups.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HugetlbGroup) Set(path string, cgroup *configs.Cgroup) error {
0000000000000000000000000000000000000000;;		for _, hugetlb := range cgroup.Resources.HugetlbLimit {
0000000000000000000000000000000000000000;;			if err := writeFile(path, strings.Join([]string{"hugetlb", hugetlb.Pagesize, "limit_in_bytes"}, "."), strconv.FormatUint(hugetlb.Limit, 10)); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HugetlbGroup) Remove(d *cgroupData) error {
0000000000000000000000000000000000000000;;		return removePath(d.path("hugetlb"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HugetlbGroup) GetStats(path string, stats *cgroups.Stats) error {
0000000000000000000000000000000000000000;;		hugetlbStats := cgroups.HugetlbStats{}
0000000000000000000000000000000000000000;;		for _, pageSize := range HugePageSizes {
0000000000000000000000000000000000000000;;			usage := strings.Join([]string{"hugetlb", pageSize, "usage_in_bytes"}, ".")
0000000000000000000000000000000000000000;;			value, err := getCgroupParamUint(path, usage)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to parse %s - %v", usage, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hugetlbStats.Usage = value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			maxUsage := strings.Join([]string{"hugetlb", pageSize, "max_usage_in_bytes"}, ".")
0000000000000000000000000000000000000000;;			value, err = getCgroupParamUint(path, maxUsage)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to parse %s - %v", maxUsage, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hugetlbStats.MaxUsage = value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			failcnt := strings.Join([]string{"hugetlb", pageSize, "failcnt"}, ".")
0000000000000000000000000000000000000000;;			value, err = getCgroupParamUint(path, failcnt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to parse %s - %v", failcnt, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hugetlbStats.Failcnt = value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stats.HugetlbStats[pageSize] = hugetlbStats
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
