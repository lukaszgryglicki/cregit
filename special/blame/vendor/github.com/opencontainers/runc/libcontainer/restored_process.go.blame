0000000000000000000000000000000000000000;;	// +build linux
d130243057bea8ebcfa3fdfcb8c3aeaf4ca246bf;Godeps/_workspace/src/github.com/docker/libcontainer/restored_process.go[Godeps/_workspace/src/github.com/docker/libcontainer/restored_process.go][vendor/github.com/opencontainers/runc/libcontainer/restored_process.go];	
0000000000000000000000000000000000000000;;	package libcontainer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/system"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRestoredProcess(pid int, fds []string) (*restoredProcess, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			err error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		proc, err := os.FindProcess(pid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		started, err := system.GetProcessStartTime(pid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &restoredProcess{
0000000000000000000000000000000000000000;;			proc:             proc,
0000000000000000000000000000000000000000;;			processStartTime: started,
0000000000000000000000000000000000000000;;			fds:              fds,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type restoredProcess struct {
0000000000000000000000000000000000000000;;		proc             *os.Process
0000000000000000000000000000000000000000;;		processStartTime string
0000000000000000000000000000000000000000;;		fds              []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) start() error {
0000000000000000000000000000000000000000;;		return newGenericError(fmt.Errorf("restored process cannot be started"), SystemError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) pid() int {
0000000000000000000000000000000000000000;;		return p.proc.Pid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) terminate() error {
0000000000000000000000000000000000000000;;		err := p.proc.Kill()
0000000000000000000000000000000000000000;;		if _, werr := p.wait(); err == nil {
0000000000000000000000000000000000000000;;			err = werr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) wait() (*os.ProcessState, error) {
0000000000000000000000000000000000000000;;		// TODO: how do we wait on the actual process?
0000000000000000000000000000000000000000;;		// maybe use --exec-cmd in criu
0000000000000000000000000000000000000000;;		st, err := p.proc.Wait()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return st, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) startTime() (string, error) {
0000000000000000000000000000000000000000;;		return p.processStartTime, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) signal(s os.Signal) error {
0000000000000000000000000000000000000000;;		return p.proc.Signal(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) externalDescriptors() []string {
0000000000000000000000000000000000000000;;		return p.fds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *restoredProcess) setExternalDescriptors(newFds []string) {
0000000000000000000000000000000000000000;;		p.fds = newFds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nonChildProcess represents a process where the calling process is not
0000000000000000000000000000000000000000;;	// the parent process.  This process is created when a factory loads a container from
0000000000000000000000000000000000000000;;	// a persisted state.
0000000000000000000000000000000000000000;;	type nonChildProcess struct {
0000000000000000000000000000000000000000;;		processPid       int
0000000000000000000000000000000000000000;;		processStartTime string
0000000000000000000000000000000000000000;;		fds              []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) start() error {
0000000000000000000000000000000000000000;;		return newGenericError(fmt.Errorf("restored process cannot be started"), SystemError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) pid() int {
0000000000000000000000000000000000000000;;		return p.processPid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) terminate() error {
0000000000000000000000000000000000000000;;		return newGenericError(fmt.Errorf("restored process cannot be terminated"), SystemError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) wait() (*os.ProcessState, error) {
0000000000000000000000000000000000000000;;		return nil, newGenericError(fmt.Errorf("restored process cannot be waited on"), SystemError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) startTime() (string, error) {
0000000000000000000000000000000000000000;;		return p.processStartTime, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) signal(s os.Signal) error {
0000000000000000000000000000000000000000;;		proc, err := os.FindProcess(p.processPid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return proc.Signal(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) externalDescriptors() []string {
0000000000000000000000000000000000000000;;		return p.fds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *nonChildProcess) setExternalDescriptors(newFds []string) {
0000000000000000000000000000000000000000;;		p.fds = newFds
0000000000000000000000000000000000000000;;	}
