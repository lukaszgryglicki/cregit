0000000000000000000000000000000000000000;;	// Package libcontainer provides a native Go implementation for creating containers
0000000000000000000000000000000000000000;;	// with namespaces, cgroups, capabilities, and filesystem access controls.
0000000000000000000000000000000000000000;;	// It allows you to manage the lifecycle of the container performing additional operations
0000000000000000000000000000000000000000;;	// after the container is created.
0000000000000000000000000000000000000000;;	package libcontainer
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/libcontainer/container.go[Godeps/_workspace/src/github.com/docker/libcontainer/container.go][vendor/github.com/opencontainers/runc/libcontainer/container.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/configs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Status is the status of a container.
0000000000000000000000000000000000000000;;	type Status int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Created is the status that denotes the container exists but has not been run yet.
0000000000000000000000000000000000000000;;		Created Status = iota
0000000000000000000000000000000000000000;;		// Running is the status that denotes the container exists and is running.
0000000000000000000000000000000000000000;;		Running
0000000000000000000000000000000000000000;;		// Pausing is the status that denotes the container exists, it is in the process of being paused.
0000000000000000000000000000000000000000;;		Pausing
0000000000000000000000000000000000000000;;		// Paused is the status that denotes the container exists, but all its processes are paused.
0000000000000000000000000000000000000000;;		Paused
0000000000000000000000000000000000000000;;		// Stopped is the status that denotes the container does not have a created or running process.
0000000000000000000000000000000000000000;;		Stopped
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Status) String() string {
0000000000000000000000000000000000000000;;		switch s {
0000000000000000000000000000000000000000;;		case Created:
0000000000000000000000000000000000000000;;			return "created"
0000000000000000000000000000000000000000;;		case Running:
0000000000000000000000000000000000000000;;			return "running"
0000000000000000000000000000000000000000;;		case Pausing:
0000000000000000000000000000000000000000;;			return "pausing"
0000000000000000000000000000000000000000;;		case Paused:
0000000000000000000000000000000000000000;;			return "paused"
0000000000000000000000000000000000000000;;		case Stopped:
0000000000000000000000000000000000000000;;			return "stopped"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "unknown"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BaseState represents the platform agnostic pieces relating to a
0000000000000000000000000000000000000000;;	// running container's state
0000000000000000000000000000000000000000;;	type BaseState struct {
0000000000000000000000000000000000000000;;		// ID is the container ID.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InitProcessPid is the init process id in the parent namespace.
0000000000000000000000000000000000000000;;		InitProcessPid int `json:"init_process_pid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InitProcessStartTime is the init process start time in clock cycles since boot time.
0000000000000000000000000000000000000000;;		InitProcessStartTime string `json:"init_process_start"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Created is the unix timestamp for the creation time of the container in UTC
0000000000000000000000000000000000000000;;		Created time.Time `json:"created"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Config is the container's configuration.
0000000000000000000000000000000000000000;;		Config configs.Config `json:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BaseContainer is a libcontainer container object.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Each container is thread-safe within the same process. Since a container can
0000000000000000000000000000000000000000;;	// be destroyed by a separate process, any function may return that the container
0000000000000000000000000000000000000000;;	// was not found. BaseContainer includes methods that are platform agnostic.
0000000000000000000000000000000000000000;;	type BaseContainer interface {
0000000000000000000000000000000000000000;;		// Returns the ID of the container
0000000000000000000000000000000000000000;;		ID() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the current status of the container.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// ContainerNotExists - Container no longer exists,
0000000000000000000000000000000000000000;;		// Systemerror - System error.
0000000000000000000000000000000000000000;;		Status() (Status, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// State returns the current container's state information.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		State() (*State, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the current config of the container.
0000000000000000000000000000000000000000;;		Config() configs.Config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the PIDs inside this container. The PIDs are in the namespace of the calling process.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// ContainerNotExists - Container no longer exists,
0000000000000000000000000000000000000000;;		// Systemerror - System error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Some of the returned PIDs may no longer refer to processes in the Container, unless
0000000000000000000000000000000000000000;;		// the Container state is PAUSED in which case every PID in the slice is valid.
0000000000000000000000000000000000000000;;		Processes() ([]int, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns statistics for the container.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// ContainerNotExists - Container no longer exists,
0000000000000000000000000000000000000000;;		// Systemerror - System error.
0000000000000000000000000000000000000000;;		Stats() (*Stats, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set resources of container as configured
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// We can use this to change resources when containers are running.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		Set(config configs.Config) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start a process inside the container. Returns error if process fails to
0000000000000000000000000000000000000000;;		// start. You can track process lifecycle with passed Process structure.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// ContainerNotExists - Container no longer exists,
0000000000000000000000000000000000000000;;		// ConfigInvalid - config is invalid,
0000000000000000000000000000000000000000;;		// ContainerPaused - Container is paused,
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		Start(process *Process) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run immediately starts the process inside the conatiner.  Returns error if process
0000000000000000000000000000000000000000;;		// fails to start.  It does not block waiting for the exec fifo  after start returns but
0000000000000000000000000000000000000000;;		// opens the fifo after start returns.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// ContainerNotExists - Container no longer exists,
0000000000000000000000000000000000000000;;		// ConfigInvalid - config is invalid,
0000000000000000000000000000000000000000;;		// ContainerPaused - Container is paused,
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		Run(process *Process) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Destroys the container after killing all running processes.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Any event registrations are removed before the container is destroyed.
0000000000000000000000000000000000000000;;		// No error is returned if the container is already destroyed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		Destroy() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Signal sends the provided signal code to the container's initial process.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		Signal(s os.Signal) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Exec signals the container to exec the users process at the end of the init.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// errors:
0000000000000000000000000000000000000000;;		// SystemError - System error.
0000000000000000000000000000000000000000;;		Exec() error
0000000000000000000000000000000000000000;;	}
