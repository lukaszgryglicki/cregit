0000000000000000000000000000000000000000;;	package stacktrace
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/docker/libcontainer/stacktrace/frame.go[Godeps/_workspace/src/github.com/docker/libcontainer/stacktrace/frame.go][vendor/github.com/opencontainers/runc/libcontainer/stacktrace/frame.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFrame returns a new stack frame for the provided information
0000000000000000000000000000000000000000;;	func NewFrame(pc uintptr, file string, line int) Frame {
0000000000000000000000000000000000000000;;		fn := runtime.FuncForPC(pc)
0000000000000000000000000000000000000000;;		if fn == nil {
0000000000000000000000000000000000000000;;			return Frame{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pack, name := parseFunctionName(fn.Name())
0000000000000000000000000000000000000000;;		return Frame{
0000000000000000000000000000000000000000;;			Line:     line,
0000000000000000000000000000000000000000;;			File:     filepath.Base(file),
0000000000000000000000000000000000000000;;			Package:  pack,
0000000000000000000000000000000000000000;;			Function: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseFunctionName(name string) (string, string) {
0000000000000000000000000000000000000000;;		i := strings.LastIndex(name, ".")
0000000000000000000000000000000000000000;;		if i == -1 {
0000000000000000000000000000000000000000;;			return "", name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return name[:i], name[i+1:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Frame contains all the information for a stack frame within a go program
0000000000000000000000000000000000000000;;	type Frame struct {
0000000000000000000000000000000000000000;;		File     string
0000000000000000000000000000000000000000;;		Function string
0000000000000000000000000000000000000000;;		Package  string
0000000000000000000000000000000000000000;;		Line     int
0000000000000000000000000000000000000000;;	}
