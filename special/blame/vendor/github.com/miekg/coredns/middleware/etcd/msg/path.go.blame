0000000000000000000000000000000000000000;;	package msg
b79311728c00c3c2b5b40b134fcc82ec5fa0079a;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/miekg/dns"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Path converts a domainname to an etcd path. If s looks like service.staging.skydns.local.,
0000000000000000000000000000000000000000;;	// the resulting key will be /skydns/local/skydns/staging/service .
0000000000000000000000000000000000000000;;	func Path(s, prefix string) string {
0000000000000000000000000000000000000000;;		l := dns.SplitDomainName(s)
0000000000000000000000000000000000000000;;		for i, j := 0, len(l)-1; i < j; i, j = i+1, j-1 {
0000000000000000000000000000000000000000;;			l[i], l[j] = l[j], l[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return path.Join(append([]string{"/" + prefix + "/"}, l...)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Domain is the opposite of Path.
0000000000000000000000000000000000000000;;	func Domain(s string) string {
0000000000000000000000000000000000000000;;		l := strings.Split(s, "/")
0000000000000000000000000000000000000000;;		// start with 1, to strip /skydns
0000000000000000000000000000000000000000;;		for i, j := 1, len(l)-1; i < j; i, j = i+1, j-1 {
0000000000000000000000000000000000000000;;			l[i], l[j] = l[j], l[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dns.Fqdn(strings.Join(l[1:len(l)-1], "."))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathWithWildcard ascts as Path, but if a name contains wildcards (* or any), the name will be
0000000000000000000000000000000000000000;;	// chopped of before the (first) wildcard, and we do a highler evel search and
0000000000000000000000000000000000000000;;	// later find the matching names.  So service.*.skydns.local, will look for all
0000000000000000000000000000000000000000;;	// services under skydns.local and will later check for names that match
0000000000000000000000000000000000000000;;	// service.*.skydns.local.  If a wildcard is found the returned bool is true.
0000000000000000000000000000000000000000;;	func PathWithWildcard(s, prefix string) (string, bool) {
0000000000000000000000000000000000000000;;		l := dns.SplitDomainName(s)
0000000000000000000000000000000000000000;;		for i, j := 0, len(l)-1; i < j; i, j = i+1, j-1 {
0000000000000000000000000000000000000000;;			l[i], l[j] = l[j], l[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, k := range l {
0000000000000000000000000000000000000000;;			if k == "*" || k == "any" {
0000000000000000000000000000000000000000;;				return path.Join(append([]string{"/" + prefix + "/"}, l[:i]...)...), true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return path.Join(append([]string{"/" + prefix + "/"}, l...)...), false
0000000000000000000000000000000000000000;;	}
