0000000000000000000000000000000000000000;;	package dns
b9f13aaa534682ec2030ddaa4366d37857ab7cbb;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NumField returns the number of rdata fields r has.
0000000000000000000000000000000000000000;;	func NumField(r RR) int {
0000000000000000000000000000000000000000;;		return reflect.ValueOf(r).Elem().NumField() - 1 // Remove RR_Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Field returns the rdata field i as a string. Fields are indexed starting from 1.
0000000000000000000000000000000000000000;;	// RR types that holds slice data, for instance the NSEC type bitmap will return a single
0000000000000000000000000000000000000000;;	// string where the types are concatenated using a space.
0000000000000000000000000000000000000000;;	// Accessing non existing fields will cause a panic.
0000000000000000000000000000000000000000;;	func Field(r RR, i int) string {
0000000000000000000000000000000000000000;;		if i == 0 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d := reflect.ValueOf(r).Elem().Field(i)
0000000000000000000000000000000000000000;;		switch k := d.Kind(); k {
0000000000000000000000000000000000000000;;		case reflect.String:
0000000000000000000000000000000000000000;;			return d.String()
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return strconv.FormatInt(d.Int(), 10)
0000000000000000000000000000000000000000;;		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
0000000000000000000000000000000000000000;;			return strconv.FormatUint(d.Uint(), 10)
0000000000000000000000000000000000000000;;		case reflect.Slice:
0000000000000000000000000000000000000000;;			switch reflect.ValueOf(r).Elem().Type().Field(i).Tag {
0000000000000000000000000000000000000000;;			case `dns:"a"`:
0000000000000000000000000000000000000000;;				// TODO(miek): Hmm store this as 16 bytes
0000000000000000000000000000000000000000;;				if d.Len() < net.IPv6len {
0000000000000000000000000000000000000000;;					return net.IPv4(byte(d.Index(0).Uint()),
0000000000000000000000000000000000000000;;						byte(d.Index(1).Uint()),
0000000000000000000000000000000000000000;;						byte(d.Index(2).Uint()),
0000000000000000000000000000000000000000;;						byte(d.Index(3).Uint())).String()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return net.IPv4(byte(d.Index(12).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(13).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(14).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(15).Uint())).String()
0000000000000000000000000000000000000000;;			case `dns:"aaaa"`:
0000000000000000000000000000000000000000;;				return net.IP{
0000000000000000000000000000000000000000;;					byte(d.Index(0).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(1).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(2).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(3).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(4).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(5).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(6).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(7).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(8).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(9).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(10).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(11).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(12).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(13).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(14).Uint()),
0000000000000000000000000000000000000000;;					byte(d.Index(15).Uint()),
0000000000000000000000000000000000000000;;				}.String()
0000000000000000000000000000000000000000;;			case `dns:"nsec"`:
0000000000000000000000000000000000000000;;				if d.Len() == 0 {
0000000000000000000000000000000000000000;;					return ""
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s := Type(d.Index(0).Uint()).String()
0000000000000000000000000000000000000000;;				for i := 1; i < d.Len(); i++ {
0000000000000000000000000000000000000000;;					s += " " + Type(d.Index(i).Uint()).String()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return s
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				// if it does not have a tag its a string slice
0000000000000000000000000000000000000000;;				fallthrough
0000000000000000000000000000000000000000;;			case `dns:"txt"`:
0000000000000000000000000000000000000000;;				if d.Len() == 0 {
0000000000000000000000000000000000000000;;					return ""
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s := d.Index(0).String()
0000000000000000000000000000000000000000;;				for i := 1; i < d.Len(); i++ {
0000000000000000000000000000000000000000;;					s += " " + d.Index(i).String()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return s
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
