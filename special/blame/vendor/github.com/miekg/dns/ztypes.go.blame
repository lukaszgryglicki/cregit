0000000000000000000000000000000000000000;;	// *** DO NOT MODIFY ***
0000000000000000000000000000000000000000;;	// AUTOGENERATED BY go generate from type_generate.go
b9f13aaa534682ec2030ddaa4366d37857ab7cbb;;	
0000000000000000000000000000000000000000;;	package dns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TypeToRR is a map of constructors for each RR type.
0000000000000000000000000000000000000000;;	var TypeToRR = map[uint16]func() RR{
0000000000000000000000000000000000000000;;		TypeA:          func() RR { return new(A) },
0000000000000000000000000000000000000000;;		TypeAAAA:       func() RR { return new(AAAA) },
0000000000000000000000000000000000000000;;		TypeAFSDB:      func() RR { return new(AFSDB) },
0000000000000000000000000000000000000000;;		TypeANY:        func() RR { return new(ANY) },
0000000000000000000000000000000000000000;;		TypeCAA:        func() RR { return new(CAA) },
0000000000000000000000000000000000000000;;		TypeCDNSKEY:    func() RR { return new(CDNSKEY) },
0000000000000000000000000000000000000000;;		TypeCDS:        func() RR { return new(CDS) },
0000000000000000000000000000000000000000;;		TypeCERT:       func() RR { return new(CERT) },
0000000000000000000000000000000000000000;;		TypeCNAME:      func() RR { return new(CNAME) },
0000000000000000000000000000000000000000;;		TypeDHCID:      func() RR { return new(DHCID) },
0000000000000000000000000000000000000000;;		TypeDLV:        func() RR { return new(DLV) },
0000000000000000000000000000000000000000;;		TypeDNAME:      func() RR { return new(DNAME) },
0000000000000000000000000000000000000000;;		TypeDNSKEY:     func() RR { return new(DNSKEY) },
0000000000000000000000000000000000000000;;		TypeDS:         func() RR { return new(DS) },
0000000000000000000000000000000000000000;;		TypeEID:        func() RR { return new(EID) },
0000000000000000000000000000000000000000;;		TypeEUI48:      func() RR { return new(EUI48) },
0000000000000000000000000000000000000000;;		TypeEUI64:      func() RR { return new(EUI64) },
0000000000000000000000000000000000000000;;		TypeGID:        func() RR { return new(GID) },
0000000000000000000000000000000000000000;;		TypeGPOS:       func() RR { return new(GPOS) },
0000000000000000000000000000000000000000;;		TypeHINFO:      func() RR { return new(HINFO) },
0000000000000000000000000000000000000000;;		TypeHIP:        func() RR { return new(HIP) },
0000000000000000000000000000000000000000;;		TypeKEY:        func() RR { return new(KEY) },
0000000000000000000000000000000000000000;;		TypeKX:         func() RR { return new(KX) },
0000000000000000000000000000000000000000;;		TypeL32:        func() RR { return new(L32) },
0000000000000000000000000000000000000000;;		TypeL64:        func() RR { return new(L64) },
0000000000000000000000000000000000000000;;		TypeLOC:        func() RR { return new(LOC) },
0000000000000000000000000000000000000000;;		TypeLP:         func() RR { return new(LP) },
0000000000000000000000000000000000000000;;		TypeMB:         func() RR { return new(MB) },
0000000000000000000000000000000000000000;;		TypeMD:         func() RR { return new(MD) },
0000000000000000000000000000000000000000;;		TypeMF:         func() RR { return new(MF) },
0000000000000000000000000000000000000000;;		TypeMG:         func() RR { return new(MG) },
0000000000000000000000000000000000000000;;		TypeMINFO:      func() RR { return new(MINFO) },
0000000000000000000000000000000000000000;;		TypeMR:         func() RR { return new(MR) },
0000000000000000000000000000000000000000;;		TypeMX:         func() RR { return new(MX) },
0000000000000000000000000000000000000000;;		TypeNAPTR:      func() RR { return new(NAPTR) },
0000000000000000000000000000000000000000;;		TypeNID:        func() RR { return new(NID) },
0000000000000000000000000000000000000000;;		TypeNIMLOC:     func() RR { return new(NIMLOC) },
0000000000000000000000000000000000000000;;		TypeNINFO:      func() RR { return new(NINFO) },
0000000000000000000000000000000000000000;;		TypeNS:         func() RR { return new(NS) },
0000000000000000000000000000000000000000;;		TypeNSAPPTR:    func() RR { return new(NSAPPTR) },
0000000000000000000000000000000000000000;;		TypeNSEC:       func() RR { return new(NSEC) },
0000000000000000000000000000000000000000;;		TypeNSEC3:      func() RR { return new(NSEC3) },
0000000000000000000000000000000000000000;;		TypeNSEC3PARAM: func() RR { return new(NSEC3PARAM) },
0000000000000000000000000000000000000000;;		TypeOPENPGPKEY: func() RR { return new(OPENPGPKEY) },
0000000000000000000000000000000000000000;;		TypeOPT:        func() RR { return new(OPT) },
0000000000000000000000000000000000000000;;		TypePTR:        func() RR { return new(PTR) },
0000000000000000000000000000000000000000;;		TypePX:         func() RR { return new(PX) },
0000000000000000000000000000000000000000;;		TypeRKEY:       func() RR { return new(RKEY) },
0000000000000000000000000000000000000000;;		TypeRP:         func() RR { return new(RP) },
0000000000000000000000000000000000000000;;		TypeRRSIG:      func() RR { return new(RRSIG) },
0000000000000000000000000000000000000000;;		TypeRT:         func() RR { return new(RT) },
0000000000000000000000000000000000000000;;		TypeSIG:        func() RR { return new(SIG) },
0000000000000000000000000000000000000000;;		TypeSOA:        func() RR { return new(SOA) },
0000000000000000000000000000000000000000;;		TypeSPF:        func() RR { return new(SPF) },
0000000000000000000000000000000000000000;;		TypeSRV:        func() RR { return new(SRV) },
0000000000000000000000000000000000000000;;		TypeSSHFP:      func() RR { return new(SSHFP) },
0000000000000000000000000000000000000000;;		TypeTA:         func() RR { return new(TA) },
0000000000000000000000000000000000000000;;		TypeTALINK:     func() RR { return new(TALINK) },
0000000000000000000000000000000000000000;;		TypeTKEY:       func() RR { return new(TKEY) },
0000000000000000000000000000000000000000;;		TypeTLSA:       func() RR { return new(TLSA) },
0000000000000000000000000000000000000000;;		TypeTSIG:       func() RR { return new(TSIG) },
0000000000000000000000000000000000000000;;		TypeTXT:        func() RR { return new(TXT) },
0000000000000000000000000000000000000000;;		TypeUID:        func() RR { return new(UID) },
0000000000000000000000000000000000000000;;		TypeUINFO:      func() RR { return new(UINFO) },
0000000000000000000000000000000000000000;;		TypeURI:        func() RR { return new(URI) },
0000000000000000000000000000000000000000;;		TypeX25:        func() RR { return new(X25) },
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TypeToString is a map of strings for each RR type.
0000000000000000000000000000000000000000;;	var TypeToString = map[uint16]string{
0000000000000000000000000000000000000000;;		TypeA:          "A",
0000000000000000000000000000000000000000;;		TypeAAAA:       "AAAA",
0000000000000000000000000000000000000000;;		TypeAFSDB:      "AFSDB",
0000000000000000000000000000000000000000;;		TypeANY:        "ANY",
0000000000000000000000000000000000000000;;		TypeATMA:       "ATMA",
0000000000000000000000000000000000000000;;		TypeAXFR:       "AXFR",
0000000000000000000000000000000000000000;;		TypeCAA:        "CAA",
0000000000000000000000000000000000000000;;		TypeCDNSKEY:    "CDNSKEY",
0000000000000000000000000000000000000000;;		TypeCDS:        "CDS",
0000000000000000000000000000000000000000;;		TypeCERT:       "CERT",
0000000000000000000000000000000000000000;;		TypeCNAME:      "CNAME",
0000000000000000000000000000000000000000;;		TypeDHCID:      "DHCID",
0000000000000000000000000000000000000000;;		TypeDLV:        "DLV",
0000000000000000000000000000000000000000;;		TypeDNAME:      "DNAME",
0000000000000000000000000000000000000000;;		TypeDNSKEY:     "DNSKEY",
0000000000000000000000000000000000000000;;		TypeDS:         "DS",
0000000000000000000000000000000000000000;;		TypeEID:        "EID",
0000000000000000000000000000000000000000;;		TypeEUI48:      "EUI48",
0000000000000000000000000000000000000000;;		TypeEUI64:      "EUI64",
0000000000000000000000000000000000000000;;		TypeGID:        "GID",
0000000000000000000000000000000000000000;;		TypeGPOS:       "GPOS",
0000000000000000000000000000000000000000;;		TypeHINFO:      "HINFO",
0000000000000000000000000000000000000000;;		TypeHIP:        "HIP",
0000000000000000000000000000000000000000;;		TypeISDN:       "ISDN",
0000000000000000000000000000000000000000;;		TypeIXFR:       "IXFR",
0000000000000000000000000000000000000000;;		TypeKEY:        "KEY",
0000000000000000000000000000000000000000;;		TypeKX:         "KX",
0000000000000000000000000000000000000000;;		TypeL32:        "L32",
0000000000000000000000000000000000000000;;		TypeL64:        "L64",
0000000000000000000000000000000000000000;;		TypeLOC:        "LOC",
0000000000000000000000000000000000000000;;		TypeLP:         "LP",
0000000000000000000000000000000000000000;;		TypeMAILA:      "MAILA",
0000000000000000000000000000000000000000;;		TypeMAILB:      "MAILB",
0000000000000000000000000000000000000000;;		TypeMB:         "MB",
0000000000000000000000000000000000000000;;		TypeMD:         "MD",
0000000000000000000000000000000000000000;;		TypeMF:         "MF",
0000000000000000000000000000000000000000;;		TypeMG:         "MG",
0000000000000000000000000000000000000000;;		TypeMINFO:      "MINFO",
0000000000000000000000000000000000000000;;		TypeMR:         "MR",
0000000000000000000000000000000000000000;;		TypeMX:         "MX",
0000000000000000000000000000000000000000;;		TypeNAPTR:      "NAPTR",
0000000000000000000000000000000000000000;;		TypeNID:        "NID",
0000000000000000000000000000000000000000;;		TypeNIMLOC:     "NIMLOC",
0000000000000000000000000000000000000000;;		TypeNINFO:      "NINFO",
0000000000000000000000000000000000000000;;		TypeNS:         "NS",
0000000000000000000000000000000000000000;;		TypeNSEC:       "NSEC",
0000000000000000000000000000000000000000;;		TypeNSEC3:      "NSEC3",
0000000000000000000000000000000000000000;;		TypeNSEC3PARAM: "NSEC3PARAM",
0000000000000000000000000000000000000000;;		TypeNULL:       "NULL",
0000000000000000000000000000000000000000;;		TypeNXT:        "NXT",
0000000000000000000000000000000000000000;;		TypeNone:       "None",
0000000000000000000000000000000000000000;;		TypeOPENPGPKEY: "OPENPGPKEY",
0000000000000000000000000000000000000000;;		TypeOPT:        "OPT",
0000000000000000000000000000000000000000;;		TypePTR:        "PTR",
0000000000000000000000000000000000000000;;		TypePX:         "PX",
0000000000000000000000000000000000000000;;		TypeRKEY:       "RKEY",
0000000000000000000000000000000000000000;;		TypeRP:         "RP",
0000000000000000000000000000000000000000;;		TypeRRSIG:      "RRSIG",
0000000000000000000000000000000000000000;;		TypeRT:         "RT",
0000000000000000000000000000000000000000;;		TypeReserved:   "Reserved",
0000000000000000000000000000000000000000;;		TypeSIG:        "SIG",
0000000000000000000000000000000000000000;;		TypeSOA:        "SOA",
0000000000000000000000000000000000000000;;		TypeSPF:        "SPF",
0000000000000000000000000000000000000000;;		TypeSRV:        "SRV",
0000000000000000000000000000000000000000;;		TypeSSHFP:      "SSHFP",
0000000000000000000000000000000000000000;;		TypeTA:         "TA",
0000000000000000000000000000000000000000;;		TypeTALINK:     "TALINK",
0000000000000000000000000000000000000000;;		TypeTKEY:       "TKEY",
0000000000000000000000000000000000000000;;		TypeTLSA:       "TLSA",
0000000000000000000000000000000000000000;;		TypeTSIG:       "TSIG",
0000000000000000000000000000000000000000;;		TypeTXT:        "TXT",
0000000000000000000000000000000000000000;;		TypeUID:        "UID",
0000000000000000000000000000000000000000;;		TypeUINFO:      "UINFO",
0000000000000000000000000000000000000000;;		TypeUNSPEC:     "UNSPEC",
0000000000000000000000000000000000000000;;		TypeURI:        "URI",
0000000000000000000000000000000000000000;;		TypeX25:        "X25",
0000000000000000000000000000000000000000;;		TypeNSAPPTR:    "NSAP-PTR",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header() functions
0000000000000000000000000000000000000000;;	func (rr *A) Header() *RR_Header          { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *AAAA) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *AFSDB) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *ANY) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *CAA) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *CDNSKEY) Header() *RR_Header    { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *CDS) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *CERT) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *CNAME) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *DHCID) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *DLV) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *DNAME) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *DNSKEY) Header() *RR_Header     { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *DS) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *EID) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *EUI48) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *EUI64) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *GID) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *GPOS) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *HINFO) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *HIP) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *KEY) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *KX) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *L32) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *L64) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *LOC) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *LP) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MB) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MD) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MF) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MG) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MINFO) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MR) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *MX) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NAPTR) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NID) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NIMLOC) Header() *RR_Header     { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NINFO) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NS) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NSAPPTR) Header() *RR_Header    { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NSEC) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NSEC3) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *NSEC3PARAM) Header() *RR_Header { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *OPENPGPKEY) Header() *RR_Header { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *OPT) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *PTR) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *PX) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *RFC3597) Header() *RR_Header    { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *RKEY) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *RP) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *RRSIG) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *RT) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *SIG) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *SOA) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *SPF) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *SRV) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *SSHFP) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *TA) Header() *RR_Header         { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *TALINK) Header() *RR_Header     { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *TKEY) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *TLSA) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *TSIG) Header() *RR_Header       { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *TXT) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *UID) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *UINFO) Header() *RR_Header      { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *URI) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	func (rr *X25) Header() *RR_Header        { return &rr.Hdr }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// len() functions
0000000000000000000000000000000000000000;;	func (rr *A) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += net.IPv4len // A
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *AAAA) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += net.IPv6len // AAAA
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *AFSDB) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Subtype
0000000000000000000000000000000000000000;;		l += len(rr.Hostname) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *ANY) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *CAA) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 1 // Flag
0000000000000000000000000000000000000000;;		l += len(rr.Tag) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Value)
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *CERT) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Type
0000000000000000000000000000000000000000;;		l += 2 // KeyTag
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.Certificate))
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *CNAME) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Target) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DHCID) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.Digest))
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DNAME) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Target) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DNSKEY) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Flags
0000000000000000000000000000000000000000;;		l += 1 // Protocol
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.PublicKey))
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DS) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // KeyTag
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += 1 // DigestType
0000000000000000000000000000000000000000;;		l += len(rr.Digest)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *EID) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Endpoint)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *EUI48) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 6 // Address
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *EUI64) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 8 // Address
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *GID) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 4 // Gid
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *GPOS) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Longitude) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Latitude) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Altitude) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *HINFO) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Cpu) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Os) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *HIP) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 1 // HitLength
0000000000000000000000000000000000000000;;		l += 1 // PublicKeyAlgorithm
0000000000000000000000000000000000000000;;		l += 2 // PublicKeyLength
0000000000000000000000000000000000000000;;		l += len(rr.Hit)/2 + 1
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.PublicKey))
0000000000000000000000000000000000000000;;		for _, x := range rr.RendezvousServers {
0000000000000000000000000000000000000000;;			l += len(x) + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *KX) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += len(rr.Exchanger) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *L32) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2           // Preference
0000000000000000000000000000000000000000;;		l += net.IPv4len // Locator32
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *L64) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += 8 // Locator64
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *LOC) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 1 // Version
0000000000000000000000000000000000000000;;		l += 1 // Size
0000000000000000000000000000000000000000;;		l += 1 // HorizPre
0000000000000000000000000000000000000000;;		l += 1 // VertPre
0000000000000000000000000000000000000000;;		l += 4 // Latitude
0000000000000000000000000000000000000000;;		l += 4 // Longitude
0000000000000000000000000000000000000000;;		l += 4 // Altitude
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *LP) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += len(rr.Fqdn) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MB) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Mb) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MD) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Md) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MF) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Mf) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MG) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Mg) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MINFO) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Rmail) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Email) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MR) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Mr) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MX) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += len(rr.Mx) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NAPTR) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Order
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += len(rr.Flags) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Service) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Regexp) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Replacement) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NID) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += 8 // NodeID
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NIMLOC) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Locator)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NINFO) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		for _, x := range rr.ZSData {
0000000000000000000000000000000000000000;;			l += len(x) + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NS) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Ns) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NSAPPTR) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Ptr) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NSEC3PARAM) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 1 // Hash
0000000000000000000000000000000000000000;;		l += 1 // Flags
0000000000000000000000000000000000000000;;		l += 2 // Iterations
0000000000000000000000000000000000000000;;		l += 1 // SaltLength
0000000000000000000000000000000000000000;;		l += len(rr.Salt)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *OPENPGPKEY) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.PublicKey))
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *PTR) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Ptr) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *PX) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += len(rr.Map822) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Mapx400) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RFC3597) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Rdata)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RKEY) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Flags
0000000000000000000000000000000000000000;;		l += 1 // Protocol
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.PublicKey))
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RP) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Mbox) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Txt) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RRSIG) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // TypeCovered
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += 1 // Labels
0000000000000000000000000000000000000000;;		l += 4 // OrigTtl
0000000000000000000000000000000000000000;;		l += 4 // Expiration
0000000000000000000000000000000000000000;;		l += 4 // Inception
0000000000000000000000000000000000000000;;		l += 2 // KeyTag
0000000000000000000000000000000000000000;;		l += len(rr.SignerName) + 1
0000000000000000000000000000000000000000;;		l += base64.StdEncoding.DecodedLen(len(rr.Signature))
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RT) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Preference
0000000000000000000000000000000000000000;;		l += len(rr.Host) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SOA) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Ns) + 1
0000000000000000000000000000000000000000;;		l += len(rr.Mbox) + 1
0000000000000000000000000000000000000000;;		l += 4 // Serial
0000000000000000000000000000000000000000;;		l += 4 // Refresh
0000000000000000000000000000000000000000;;		l += 4 // Retry
0000000000000000000000000000000000000000;;		l += 4 // Expire
0000000000000000000000000000000000000000;;		l += 4 // Minttl
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SPF) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		for _, x := range rr.Txt {
0000000000000000000000000000000000000000;;			l += len(x) + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SRV) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Priority
0000000000000000000000000000000000000000;;		l += 2 // Weight
0000000000000000000000000000000000000000;;		l += 2 // Port
0000000000000000000000000000000000000000;;		l += len(rr.Target) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SSHFP) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += 1 // Type
0000000000000000000000000000000000000000;;		l += len(rr.FingerPrint)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TA) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // KeyTag
0000000000000000000000000000000000000000;;		l += 1 // Algorithm
0000000000000000000000000000000000000000;;		l += 1 // DigestType
0000000000000000000000000000000000000000;;		l += len(rr.Digest)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TALINK) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.PreviousName) + 1
0000000000000000000000000000000000000000;;		l += len(rr.NextName) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TKEY) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Algorithm) + 1
0000000000000000000000000000000000000000;;		l += 4 // Inception
0000000000000000000000000000000000000000;;		l += 4 // Expiration
0000000000000000000000000000000000000000;;		l += 2 // Mode
0000000000000000000000000000000000000000;;		l += 2 // Error
0000000000000000000000000000000000000000;;		l += 2 // KeySize
0000000000000000000000000000000000000000;;		l += len(rr.Key) + 1
0000000000000000000000000000000000000000;;		l += 2 // OtherLen
0000000000000000000000000000000000000000;;		l += len(rr.OtherData) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TLSA) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 1 // Usage
0000000000000000000000000000000000000000;;		l += 1 // Selector
0000000000000000000000000000000000000000;;		l += 1 // MatchingType
0000000000000000000000000000000000000000;;		l += len(rr.Certificate)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TSIG) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Algorithm) + 1
0000000000000000000000000000000000000000;;		l += 6 // TimeSigned
0000000000000000000000000000000000000000;;		l += 2 // Fudge
0000000000000000000000000000000000000000;;		l += 2 // MACSize
0000000000000000000000000000000000000000;;		l += len(rr.MAC)/2 + 1
0000000000000000000000000000000000000000;;		l += 2 // OrigId
0000000000000000000000000000000000000000;;		l += 2 // Error
0000000000000000000000000000000000000000;;		l += 2 // OtherLen
0000000000000000000000000000000000000000;;		l += len(rr.OtherData)/2 + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TXT) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		for _, x := range rr.Txt {
0000000000000000000000000000000000000000;;			l += len(x) + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *UID) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 4 // Uid
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *UINFO) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.Uinfo) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *URI) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += 2 // Priority
0000000000000000000000000000000000000000;;		l += 2 // Weight
0000000000000000000000000000000000000000;;		l += len(rr.Target)
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *X25) len() int {
0000000000000000000000000000000000000000;;		l := rr.Hdr.len()
0000000000000000000000000000000000000000;;		l += len(rr.PSDNAddress) + 1
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// copy() functions
0000000000000000000000000000000000000000;;	func (rr *A) copy() RR {
0000000000000000000000000000000000000000;;		return &A{*rr.Hdr.copyHeader(), copyIP(rr.A)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *AAAA) copy() RR {
0000000000000000000000000000000000000000;;		return &AAAA{*rr.Hdr.copyHeader(), copyIP(rr.AAAA)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *AFSDB) copy() RR {
0000000000000000000000000000000000000000;;		return &AFSDB{*rr.Hdr.copyHeader(), rr.Subtype, rr.Hostname}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *ANY) copy() RR {
0000000000000000000000000000000000000000;;		return &ANY{*rr.Hdr.copyHeader()}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *CAA) copy() RR {
0000000000000000000000000000000000000000;;		return &CAA{*rr.Hdr.copyHeader(), rr.Flag, rr.Tag, rr.Value}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *CERT) copy() RR {
0000000000000000000000000000000000000000;;		return &CERT{*rr.Hdr.copyHeader(), rr.Type, rr.KeyTag, rr.Algorithm, rr.Certificate}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *CNAME) copy() RR {
0000000000000000000000000000000000000000;;		return &CNAME{*rr.Hdr.copyHeader(), rr.Target}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DHCID) copy() RR {
0000000000000000000000000000000000000000;;		return &DHCID{*rr.Hdr.copyHeader(), rr.Digest}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DNAME) copy() RR {
0000000000000000000000000000000000000000;;		return &DNAME{*rr.Hdr.copyHeader(), rr.Target}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DNSKEY) copy() RR {
0000000000000000000000000000000000000000;;		return &DNSKEY{*rr.Hdr.copyHeader(), rr.Flags, rr.Protocol, rr.Algorithm, rr.PublicKey}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *DS) copy() RR {
0000000000000000000000000000000000000000;;		return &DS{*rr.Hdr.copyHeader(), rr.KeyTag, rr.Algorithm, rr.DigestType, rr.Digest}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *EID) copy() RR {
0000000000000000000000000000000000000000;;		return &EID{*rr.Hdr.copyHeader(), rr.Endpoint}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *EUI48) copy() RR {
0000000000000000000000000000000000000000;;		return &EUI48{*rr.Hdr.copyHeader(), rr.Address}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *EUI64) copy() RR {
0000000000000000000000000000000000000000;;		return &EUI64{*rr.Hdr.copyHeader(), rr.Address}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *GID) copy() RR {
0000000000000000000000000000000000000000;;		return &GID{*rr.Hdr.copyHeader(), rr.Gid}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *GPOS) copy() RR {
0000000000000000000000000000000000000000;;		return &GPOS{*rr.Hdr.copyHeader(), rr.Longitude, rr.Latitude, rr.Altitude}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *HINFO) copy() RR {
0000000000000000000000000000000000000000;;		return &HINFO{*rr.Hdr.copyHeader(), rr.Cpu, rr.Os}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *HIP) copy() RR {
0000000000000000000000000000000000000000;;		RendezvousServers := make([]string, len(rr.RendezvousServers))
0000000000000000000000000000000000000000;;		copy(RendezvousServers, rr.RendezvousServers)
0000000000000000000000000000000000000000;;		return &HIP{*rr.Hdr.copyHeader(), rr.HitLength, rr.PublicKeyAlgorithm, rr.PublicKeyLength, rr.Hit, rr.PublicKey, RendezvousServers}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *KX) copy() RR {
0000000000000000000000000000000000000000;;		return &KX{*rr.Hdr.copyHeader(), rr.Preference, rr.Exchanger}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *L32) copy() RR {
0000000000000000000000000000000000000000;;		return &L32{*rr.Hdr.copyHeader(), rr.Preference, copyIP(rr.Locator32)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *L64) copy() RR {
0000000000000000000000000000000000000000;;		return &L64{*rr.Hdr.copyHeader(), rr.Preference, rr.Locator64}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *LOC) copy() RR {
0000000000000000000000000000000000000000;;		return &LOC{*rr.Hdr.copyHeader(), rr.Version, rr.Size, rr.HorizPre, rr.VertPre, rr.Latitude, rr.Longitude, rr.Altitude}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *LP) copy() RR {
0000000000000000000000000000000000000000;;		return &LP{*rr.Hdr.copyHeader(), rr.Preference, rr.Fqdn}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MB) copy() RR {
0000000000000000000000000000000000000000;;		return &MB{*rr.Hdr.copyHeader(), rr.Mb}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MD) copy() RR {
0000000000000000000000000000000000000000;;		return &MD{*rr.Hdr.copyHeader(), rr.Md}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MF) copy() RR {
0000000000000000000000000000000000000000;;		return &MF{*rr.Hdr.copyHeader(), rr.Mf}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MG) copy() RR {
0000000000000000000000000000000000000000;;		return &MG{*rr.Hdr.copyHeader(), rr.Mg}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MINFO) copy() RR {
0000000000000000000000000000000000000000;;		return &MINFO{*rr.Hdr.copyHeader(), rr.Rmail, rr.Email}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MR) copy() RR {
0000000000000000000000000000000000000000;;		return &MR{*rr.Hdr.copyHeader(), rr.Mr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *MX) copy() RR {
0000000000000000000000000000000000000000;;		return &MX{*rr.Hdr.copyHeader(), rr.Preference, rr.Mx}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NAPTR) copy() RR {
0000000000000000000000000000000000000000;;		return &NAPTR{*rr.Hdr.copyHeader(), rr.Order, rr.Preference, rr.Flags, rr.Service, rr.Regexp, rr.Replacement}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NID) copy() RR {
0000000000000000000000000000000000000000;;		return &NID{*rr.Hdr.copyHeader(), rr.Preference, rr.NodeID}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NIMLOC) copy() RR {
0000000000000000000000000000000000000000;;		return &NIMLOC{*rr.Hdr.copyHeader(), rr.Locator}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NINFO) copy() RR {
0000000000000000000000000000000000000000;;		ZSData := make([]string, len(rr.ZSData))
0000000000000000000000000000000000000000;;		copy(ZSData, rr.ZSData)
0000000000000000000000000000000000000000;;		return &NINFO{*rr.Hdr.copyHeader(), ZSData}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NS) copy() RR {
0000000000000000000000000000000000000000;;		return &NS{*rr.Hdr.copyHeader(), rr.Ns}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NSAPPTR) copy() RR {
0000000000000000000000000000000000000000;;		return &NSAPPTR{*rr.Hdr.copyHeader(), rr.Ptr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NSEC) copy() RR {
0000000000000000000000000000000000000000;;		TypeBitMap := make([]uint16, len(rr.TypeBitMap))
0000000000000000000000000000000000000000;;		copy(TypeBitMap, rr.TypeBitMap)
0000000000000000000000000000000000000000;;		return &NSEC{*rr.Hdr.copyHeader(), rr.NextDomain, TypeBitMap}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NSEC3) copy() RR {
0000000000000000000000000000000000000000;;		TypeBitMap := make([]uint16, len(rr.TypeBitMap))
0000000000000000000000000000000000000000;;		copy(TypeBitMap, rr.TypeBitMap)
0000000000000000000000000000000000000000;;		return &NSEC3{*rr.Hdr.copyHeader(), rr.Hash, rr.Flags, rr.Iterations, rr.SaltLength, rr.Salt, rr.HashLength, rr.NextDomain, TypeBitMap}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *NSEC3PARAM) copy() RR {
0000000000000000000000000000000000000000;;		return &NSEC3PARAM{*rr.Hdr.copyHeader(), rr.Hash, rr.Flags, rr.Iterations, rr.SaltLength, rr.Salt}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *OPENPGPKEY) copy() RR {
0000000000000000000000000000000000000000;;		return &OPENPGPKEY{*rr.Hdr.copyHeader(), rr.PublicKey}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *OPT) copy() RR {
0000000000000000000000000000000000000000;;		Option := make([]EDNS0, len(rr.Option))
0000000000000000000000000000000000000000;;		copy(Option, rr.Option)
0000000000000000000000000000000000000000;;		return &OPT{*rr.Hdr.copyHeader(), Option}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *PTR) copy() RR {
0000000000000000000000000000000000000000;;		return &PTR{*rr.Hdr.copyHeader(), rr.Ptr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *PX) copy() RR {
0000000000000000000000000000000000000000;;		return &PX{*rr.Hdr.copyHeader(), rr.Preference, rr.Map822, rr.Mapx400}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RFC3597) copy() RR {
0000000000000000000000000000000000000000;;		return &RFC3597{*rr.Hdr.copyHeader(), rr.Rdata}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RKEY) copy() RR {
0000000000000000000000000000000000000000;;		return &RKEY{*rr.Hdr.copyHeader(), rr.Flags, rr.Protocol, rr.Algorithm, rr.PublicKey}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RP) copy() RR {
0000000000000000000000000000000000000000;;		return &RP{*rr.Hdr.copyHeader(), rr.Mbox, rr.Txt}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RRSIG) copy() RR {
0000000000000000000000000000000000000000;;		return &RRSIG{*rr.Hdr.copyHeader(), rr.TypeCovered, rr.Algorithm, rr.Labels, rr.OrigTtl, rr.Expiration, rr.Inception, rr.KeyTag, rr.SignerName, rr.Signature}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *RT) copy() RR {
0000000000000000000000000000000000000000;;		return &RT{*rr.Hdr.copyHeader(), rr.Preference, rr.Host}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SOA) copy() RR {
0000000000000000000000000000000000000000;;		return &SOA{*rr.Hdr.copyHeader(), rr.Ns, rr.Mbox, rr.Serial, rr.Refresh, rr.Retry, rr.Expire, rr.Minttl}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SPF) copy() RR {
0000000000000000000000000000000000000000;;		Txt := make([]string, len(rr.Txt))
0000000000000000000000000000000000000000;;		copy(Txt, rr.Txt)
0000000000000000000000000000000000000000;;		return &SPF{*rr.Hdr.copyHeader(), Txt}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SRV) copy() RR {
0000000000000000000000000000000000000000;;		return &SRV{*rr.Hdr.copyHeader(), rr.Priority, rr.Weight, rr.Port, rr.Target}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *SSHFP) copy() RR {
0000000000000000000000000000000000000000;;		return &SSHFP{*rr.Hdr.copyHeader(), rr.Algorithm, rr.Type, rr.FingerPrint}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TA) copy() RR {
0000000000000000000000000000000000000000;;		return &TA{*rr.Hdr.copyHeader(), rr.KeyTag, rr.Algorithm, rr.DigestType, rr.Digest}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TALINK) copy() RR {
0000000000000000000000000000000000000000;;		return &TALINK{*rr.Hdr.copyHeader(), rr.PreviousName, rr.NextName}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TKEY) copy() RR {
0000000000000000000000000000000000000000;;		return &TKEY{*rr.Hdr.copyHeader(), rr.Algorithm, rr.Inception, rr.Expiration, rr.Mode, rr.Error, rr.KeySize, rr.Key, rr.OtherLen, rr.OtherData}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TLSA) copy() RR {
0000000000000000000000000000000000000000;;		return &TLSA{*rr.Hdr.copyHeader(), rr.Usage, rr.Selector, rr.MatchingType, rr.Certificate}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TSIG) copy() RR {
0000000000000000000000000000000000000000;;		return &TSIG{*rr.Hdr.copyHeader(), rr.Algorithm, rr.TimeSigned, rr.Fudge, rr.MACSize, rr.MAC, rr.OrigId, rr.Error, rr.OtherLen, rr.OtherData}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *TXT) copy() RR {
0000000000000000000000000000000000000000;;		Txt := make([]string, len(rr.Txt))
0000000000000000000000000000000000000000;;		copy(Txt, rr.Txt)
0000000000000000000000000000000000000000;;		return &TXT{*rr.Hdr.copyHeader(), Txt}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *UID) copy() RR {
0000000000000000000000000000000000000000;;		return &UID{*rr.Hdr.copyHeader(), rr.Uid}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *UINFO) copy() RR {
0000000000000000000000000000000000000000;;		return &UINFO{*rr.Hdr.copyHeader(), rr.Uinfo}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *URI) copy() RR {
0000000000000000000000000000000000000000;;		return &URI{*rr.Hdr.copyHeader(), rr.Priority, rr.Weight, rr.Target}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (rr *X25) copy() RR {
0000000000000000000000000000000000000000;;		return &X25{*rr.Hdr.copyHeader(), rr.PSDNAddress}
0000000000000000000000000000000000000000;;	}
