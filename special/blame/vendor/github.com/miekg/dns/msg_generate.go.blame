0000000000000000000000000000000000000000;;	//+build ignore
f5d7b27a32c788d876881f6f8798fa310653e8fb;;	
0000000000000000000000000000000000000000;;	// msg_generate.go is meant to run with go generate. It will use
0000000000000000000000000000000000000000;;	// go/{importer,types} to track down all the RR struct types. Then for each type
0000000000000000000000000000000000000000;;	// it will generate pack/unpack methods based on the struct tags. The generated source is
0000000000000000000000000000000000000000;;	// written to zmsg.go, and is meant to be checked into git.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/format"
0000000000000000000000000000000000000000;;		"go/importer"
0000000000000000000000000000000000000000;;		"go/types"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var packageHdr = `
0000000000000000000000000000000000000000;;	// *** DO NOT MODIFY ***
0000000000000000000000000000000000000000;;	// AUTOGENERATED BY go generate from msg_generate.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getTypeStruct will take a type and the package scope, and return the
0000000000000000000000000000000000000000;;	// (innermost) struct if the type is considered a RR type (currently defined as
0000000000000000000000000000000000000000;;	// those structs beginning with a RR_Header, could be redefined as implementing
0000000000000000000000000000000000000000;;	// the RR interface). The bool return value indicates if embedded structs were
0000000000000000000000000000000000000000;;	// resolved.
0000000000000000000000000000000000000000;;	func getTypeStruct(t types.Type, scope *types.Scope) (*types.Struct, bool) {
0000000000000000000000000000000000000000;;		st, ok := t.Underlying().(*types.Struct)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if st.Field(0).Type() == scope.Lookup("RR_Header").Type() {
0000000000000000000000000000000000000000;;			return st, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if st.Field(0).Anonymous() {
0000000000000000000000000000000000000000;;			st, _ := getTypeStruct(st.Field(0).Type(), scope)
0000000000000000000000000000000000000000;;			return st, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		// Import and type-check the package
0000000000000000000000000000000000000000;;		pkg, err := importer.Default().Import("github.com/miekg/dns")
0000000000000000000000000000000000000000;;		fatalIfErr(err)
0000000000000000000000000000000000000000;;		scope := pkg.Scope()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Collect actual types (*X)
0000000000000000000000000000000000000000;;		var namedTypes []string
0000000000000000000000000000000000000000;;		for _, name := range scope.Names() {
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			if o == nil || !o.Exported() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if st, _ := getTypeStruct(o.Type(), scope); st == nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if name == "PrivateRR" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check if corresponding TypeX exists
0000000000000000000000000000000000000000;;			if scope.Lookup("Type"+o.Name()) == nil && o.Name() != "RFC3597" {
0000000000000000000000000000000000000000;;				log.Fatalf("Constant Type%s does not exist.", o.Name())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			namedTypes = append(namedTypes, o.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		b.WriteString(packageHdr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprint(b, "// pack*() functions\n\n")
0000000000000000000000000000000000000000;;		for _, name := range namedTypes {
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			st, _ := getTypeStruct(o.Type(), scope)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "func (rr *%s) pack(msg []byte, off int, compression map[string]int, compress bool) (int, error) {\n", name)
0000000000000000000000000000000000000000;;			fmt.Fprint(b, `off, err := rr.Hdr.pack(msg, off, compression, compress)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		return off, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	headerEnd := off
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;			for i := 1; i < st.NumFields(); i++ {
0000000000000000000000000000000000000000;;				o := func(s string) {
0000000000000000000000000000000000000000;;					fmt.Fprintf(b, s, st.Field(i).Name())
0000000000000000000000000000000000000000;;					fmt.Fprint(b, `if err != nil {
0000000000000000000000000000000000000000;;	return off, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if _, ok := st.Field(i).Type().(*types.Slice); ok {
0000000000000000000000000000000000000000;;					switch st.Tag(i) {
0000000000000000000000000000000000000000;;					case `dns:"-"`: // ignored
0000000000000000000000000000000000000000;;					case `dns:"txt"`:
0000000000000000000000000000000000000000;;						o("off, err = packStringTxt(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case `dns:"opt"`:
0000000000000000000000000000000000000000;;						o("off, err = packDataOpt(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case `dns:"nsec"`:
0000000000000000000000000000000000000000;;						o("off, err = packDataNsec(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case `dns:"domain-name"`:
0000000000000000000000000000000000000000;;						o("off, err = packDataDomainNames(rr.%s, msg, off, compression, compress)\n")
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch {
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"-"`: // ignored
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"cdomain-name"`:
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"domain-name"`:
0000000000000000000000000000000000000000;;					o("off, err = PackDomainName(rr.%s, msg, off, compression, compress)\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"a"`:
0000000000000000000000000000000000000000;;					o("off, err = packDataA(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"aaaa"`:
0000000000000000000000000000000000000000;;					o("off, err = packDataAAAA(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"uint48"`:
0000000000000000000000000000000000000000;;					o("off, err = packUint48(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"txt"`:
0000000000000000000000000000000000000000;;					o("off, err = packString(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case strings.HasPrefix(st.Tag(i), `dns:"size-base32`): // size-base32 can be packed just like base32
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"base32"`:
0000000000000000000000000000000000000000;;					o("off, err = packStringBase32(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case strings.HasPrefix(st.Tag(i), `dns:"size-base64`): // size-base64 can be packed just like base64
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"base64"`:
0000000000000000000000000000000000000000;;					o("off, err = packStringBase64(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case strings.HasPrefix(st.Tag(i), `dns:"size-hex`): // size-hex can be packed just like hex
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"hex"`:
0000000000000000000000000000000000000000;;					o("off, err = packStringHex(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"octet"`:
0000000000000000000000000000000000000000;;					o("off, err = packStringOctet(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == "":
0000000000000000000000000000000000000000;;					switch st.Field(i).Type().(*types.Basic).Kind() {
0000000000000000000000000000000000000000;;					case types.Uint8:
0000000000000000000000000000000000000000;;						o("off, err = packUint8(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case types.Uint16:
0000000000000000000000000000000000000000;;						o("off, err = packUint16(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case types.Uint32:
0000000000000000000000000000000000000000;;						o("off, err = packUint32(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case types.Uint64:
0000000000000000000000000000000000000000;;						o("off, err = packUint64(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					case types.String:
0000000000000000000000000000000000000000;;						o("off, err = packString(rr.%s, msg, off)\n")
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// We have packed everything, only now we know the rdlength of this RR
0000000000000000000000000000000000000000;;			fmt.Fprintln(b, "rr.Header().Rdlength = uint16(off- headerEnd)")
0000000000000000000000000000000000000000;;			fmt.Fprintln(b, "return off, nil }\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprint(b, "// unpack*() functions\n\n")
0000000000000000000000000000000000000000;;		for _, name := range namedTypes {
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			st, _ := getTypeStruct(o.Type(), scope)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "func unpack%s(h RR_Header, msg []byte, off int) (RR, int, error) {\n", name)
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "rr := new(%s)\n", name)
0000000000000000000000000000000000000000;;			fmt.Fprint(b, "rr.Hdr = h\n")
0000000000000000000000000000000000000000;;			fmt.Fprint(b, `if noRdata(h) {
0000000000000000000000000000000000000000;;	return rr, off, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	var err error
0000000000000000000000000000000000000000;;	rdStart := off
0000000000000000000000000000000000000000;;	_ = rdStart
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;			for i := 1; i < st.NumFields(); i++ {
0000000000000000000000000000000000000000;;				o := func(s string) {
0000000000000000000000000000000000000000;;					fmt.Fprintf(b, s, st.Field(i).Name())
0000000000000000000000000000000000000000;;					fmt.Fprint(b, `if err != nil {
0000000000000000000000000000000000000000;;	return rr, off, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// size-* are special, because they reference a struct member we should use for the length.
0000000000000000000000000000000000000000;;				if strings.HasPrefix(st.Tag(i), `dns:"size-`) {
0000000000000000000000000000000000000000;;					structMember := structMember(st.Tag(i))
0000000000000000000000000000000000000000;;					structTag := structTag(st.Tag(i))
0000000000000000000000000000000000000000;;					switch structTag {
0000000000000000000000000000000000000000;;					case "hex":
0000000000000000000000000000000000000000;;						fmt.Fprintf(b, "rr.%s, off, err = unpackStringHex(msg, off, off + int(rr.%s))\n", st.Field(i).Name(), structMember)
0000000000000000000000000000000000000000;;					case "base32":
0000000000000000000000000000000000000000;;						fmt.Fprintf(b, "rr.%s, off, err = unpackStringBase32(msg, off, off + int(rr.%s))\n", st.Field(i).Name(), structMember)
0000000000000000000000000000000000000000;;					case "base64":
0000000000000000000000000000000000000000;;						fmt.Fprintf(b, "rr.%s, off, err = unpackStringBase64(msg, off, off + int(rr.%s))\n", st.Field(i).Name(), structMember)
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					fmt.Fprint(b, `if err != nil {
0000000000000000000000000000000000000000;;	return rr, off, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if _, ok := st.Field(i).Type().(*types.Slice); ok {
0000000000000000000000000000000000000000;;					switch st.Tag(i) {
0000000000000000000000000000000000000000;;					case `dns:"-"`: // ignored
0000000000000000000000000000000000000000;;					case `dns:"txt"`:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackStringTxt(msg, off)\n")
0000000000000000000000000000000000000000;;					case `dns:"opt"`:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackDataOpt(msg, off)\n")
0000000000000000000000000000000000000000;;					case `dns:"nsec"`:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackDataNsec(msg, off)\n")
0000000000000000000000000000000000000000;;					case `dns:"domain-name"`:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackDataDomainNames(msg, off, rdStart + int(rr.Hdr.Rdlength))\n")
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch st.Tag(i) {
0000000000000000000000000000000000000000;;				case `dns:"-"`: // ignored
0000000000000000000000000000000000000000;;				case `dns:"cdomain-name"`:
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case `dns:"domain-name"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = UnpackDomainName(msg, off)\n")
0000000000000000000000000000000000000000;;				case `dns:"a"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackDataA(msg, off)\n")
0000000000000000000000000000000000000000;;				case `dns:"aaaa"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackDataAAAA(msg, off)\n")
0000000000000000000000000000000000000000;;				case `dns:"uint48"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackUint48(msg, off)\n")
0000000000000000000000000000000000000000;;				case `dns:"txt"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackString(msg, off)\n")
0000000000000000000000000000000000000000;;				case `dns:"base32"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackStringBase32(msg, off, rdStart + int(rr.Hdr.Rdlength))\n")
0000000000000000000000000000000000000000;;				case `dns:"base64"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackStringBase64(msg, off, rdStart + int(rr.Hdr.Rdlength))\n")
0000000000000000000000000000000000000000;;				case `dns:"hex"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackStringHex(msg, off, rdStart + int(rr.Hdr.Rdlength))\n")
0000000000000000000000000000000000000000;;				case `dns:"octet"`:
0000000000000000000000000000000000000000;;					o("rr.%s, off, err = unpackStringOctet(msg, off)\n")
0000000000000000000000000000000000000000;;				case "":
0000000000000000000000000000000000000000;;					switch st.Field(i).Type().(*types.Basic).Kind() {
0000000000000000000000000000000000000000;;					case types.Uint8:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackUint8(msg, off)\n")
0000000000000000000000000000000000000000;;					case types.Uint16:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackUint16(msg, off)\n")
0000000000000000000000000000000000000000;;					case types.Uint32:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackUint32(msg, off)\n")
0000000000000000000000000000000000000000;;					case types.Uint64:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackUint64(msg, off)\n")
0000000000000000000000000000000000000000;;					case types.String:
0000000000000000000000000000000000000000;;						o("rr.%s, off, err = unpackString(msg, off)\n")
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// If we've hit len(msg) we return without error.
0000000000000000000000000000000000000000;;				if i < st.NumFields()-1 {
0000000000000000000000000000000000000000;;					fmt.Fprintf(b, `if off == len(msg) {
0000000000000000000000000000000000000000;;	return rr, off, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "return rr, off, err }\n\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Generate typeToUnpack map
0000000000000000000000000000000000000000;;		fmt.Fprintln(b, "var typeToUnpack = map[uint16]func(RR_Header, []byte, int) (RR, int, error){")
0000000000000000000000000000000000000000;;		for _, name := range namedTypes {
0000000000000000000000000000000000000000;;			if name == "RFC3597" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "Type%s: unpack%s,\n", name, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Fprintln(b, "}\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// gofmt
0000000000000000000000000000000000000000;;		res, err := format.Source(b.Bytes())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			b.WriteTo(os.Stderr)
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// write result
0000000000000000000000000000000000000000;;		f, err := os.Create("zmsg.go")
0000000000000000000000000000000000000000;;		fatalIfErr(err)
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;		f.Write(res)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// structMember will take a tag like dns:"size-base32:SaltLength" and return the last part of this string.
0000000000000000000000000000000000000000;;	func structMember(s string) string {
0000000000000000000000000000000000000000;;		fields := strings.Split(s, ":")
0000000000000000000000000000000000000000;;		if len(fields) == 0 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f := fields[len(fields)-1]
0000000000000000000000000000000000000000;;		// f should have a closing "
0000000000000000000000000000000000000000;;		if len(f) > 1 {
0000000000000000000000000000000000000000;;			return f[:len(f)-1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// structTag will take a tag like dns:"size-base32:SaltLength" and return base32.
0000000000000000000000000000000000000000;;	func structTag(s string) string {
0000000000000000000000000000000000000000;;		fields := strings.Split(s, ":")
0000000000000000000000000000000000000000;;		if len(fields) < 2 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fields[1][len("\"size-"):]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fatalIfErr(err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
