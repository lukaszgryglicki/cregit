0000000000000000000000000000000000000000;;	// Copyright 2013 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
7b453296e4ade7a4f2c9d7f5717f0f864e37dcac;Godeps/_workspace/src/github.com/miekg/dns/singleinflight.go[Godeps/_workspace/src/github.com/miekg/dns/singleinflight.go][vendor/github.com/miekg/dns/singleinflight.go];	
0000000000000000000000000000000000000000;;	// Adapted for dns package usage by Miek Gieben.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "sync"
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// call is an in-flight or completed singleflight.Do call
0000000000000000000000000000000000000000;;	type call struct {
0000000000000000000000000000000000000000;;		wg   sync.WaitGroup
0000000000000000000000000000000000000000;;		val  *Msg
0000000000000000000000000000000000000000;;		rtt  time.Duration
0000000000000000000000000000000000000000;;		err  error
0000000000000000000000000000000000000000;;		dups int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// singleflight represents a class of work and forms a namespace in
0000000000000000000000000000000000000000;;	// which units of work can be executed with duplicate suppression.
0000000000000000000000000000000000000000;;	type singleflight struct {
0000000000000000000000000000000000000000;;		sync.Mutex                  // protects m
0000000000000000000000000000000000000000;;		m          map[string]*call // lazily initialized
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes and returns the results of the given function, making
0000000000000000000000000000000000000000;;	// sure that only one execution is in-flight for a given key at a
0000000000000000000000000000000000000000;;	// time. If a duplicate comes in, the duplicate caller waits for the
0000000000000000000000000000000000000000;;	// original to complete and receives the same results.
0000000000000000000000000000000000000000;;	// The return value shared indicates whether v was given to multiple callers.
0000000000000000000000000000000000000000;;	func (g *singleflight) Do(key string, fn func() (*Msg, time.Duration, error)) (v *Msg, rtt time.Duration, err error, shared bool) {
0000000000000000000000000000000000000000;;		g.Lock()
0000000000000000000000000000000000000000;;		if g.m == nil {
0000000000000000000000000000000000000000;;			g.m = make(map[string]*call)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c, ok := g.m[key]; ok {
0000000000000000000000000000000000000000;;			c.dups++
0000000000000000000000000000000000000000;;			g.Unlock()
0000000000000000000000000000000000000000;;			c.wg.Wait()
0000000000000000000000000000000000000000;;			return c.val, c.rtt, c.err, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := new(call)
0000000000000000000000000000000000000000;;		c.wg.Add(1)
0000000000000000000000000000000000000000;;		g.m[key] = c
0000000000000000000000000000000000000000;;		g.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.val, c.rtt, c.err = fn()
0000000000000000000000000000000000000000;;		c.wg.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.Lock()
0000000000000000000000000000000000000000;;		delete(g.m, key)
0000000000000000000000000000000000000000;;		g.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return c.val, c.rtt, c.err, c.dups > 0
0000000000000000000000000000000000000000;;	}
