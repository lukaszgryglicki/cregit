0000000000000000000000000000000000000000;;	package dns
7b453296e4ade7a4f2c9d7f5717f0f864e37dcac;Godeps/_workspace/src/github.com/miekg/dns/scanner.go[Godeps/_workspace/src/github.com/miekg/dns/scanner.go][vendor/github.com/miekg/dns/scanner.go];	
0000000000000000000000000000000000000000;;	// Implement a simple scanner, return a byte stream from an io reader.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"text/scanner"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type scan struct {
0000000000000000000000000000000000000000;;		src      *bufio.Reader
0000000000000000000000000000000000000000;;		position scanner.Position
0000000000000000000000000000000000000000;;		eof      bool // Have we just seen a eof
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scanInit(r io.Reader) *scan {
0000000000000000000000000000000000000000;;		s := new(scan)
0000000000000000000000000000000000000000;;		s.src = bufio.NewReader(r)
0000000000000000000000000000000000000000;;		s.position.Line = 1
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tokenText returns the next byte from the input
0000000000000000000000000000000000000000;;	func (s *scan) tokenText() (byte, error) {
0000000000000000000000000000000000000000;;		c, err := s.src.ReadByte()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return c, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// delay the newline handling until the next token is delivered,
0000000000000000000000000000000000000000;;		// fixes off-by-one errors when reporting a parse error.
0000000000000000000000000000000000000000;;		if s.eof == true {
0000000000000000000000000000000000000000;;			s.position.Line++
0000000000000000000000000000000000000000;;			s.position.Column = 0
0000000000000000000000000000000000000000;;			s.eof = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c == '\n' {
0000000000000000000000000000000000000000;;			s.eof = true
0000000000000000000000000000000000000000;;			return c, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.position.Column++
0000000000000000000000000000000000000000;;		return c, nil
0000000000000000000000000000000000000000;;	}
