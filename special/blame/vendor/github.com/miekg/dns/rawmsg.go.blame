0000000000000000000000000000000000000000;;	package dns
7b453296e4ade7a4f2c9d7f5717f0f864e37dcac;Godeps/_workspace/src/github.com/miekg/dns/rawmsg.go[Godeps/_workspace/src/github.com/miekg/dns/rawmsg.go][vendor/github.com/miekg/dns/rawmsg.go];	
0000000000000000000000000000000000000000;;	import "encoding/binary"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rawSetRdlength sets the rdlength in the header of
0000000000000000000000000000000000000000;;	// the RR. The offset 'off' must be positioned at the
0000000000000000000000000000000000000000;;	// start of the header of the RR, 'end' must be the
0000000000000000000000000000000000000000;;	// end of the RR.
0000000000000000000000000000000000000000;;	func rawSetRdlength(msg []byte, off, end int) bool {
0000000000000000000000000000000000000000;;		l := len(msg)
0000000000000000000000000000000000000000;;	Loop:
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			if off+1 > l {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c := int(msg[off])
0000000000000000000000000000000000000000;;			off++
0000000000000000000000000000000000000000;;			switch c & 0xC0 {
0000000000000000000000000000000000000000;;			case 0x00:
0000000000000000000000000000000000000000;;				if c == 0x00 {
0000000000000000000000000000000000000000;;					// End of the domainname
0000000000000000000000000000000000000000;;					break Loop
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if off+c > l {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				off += c
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case 0xC0:
0000000000000000000000000000000000000000;;				// pointer, next byte included, ends domainname
0000000000000000000000000000000000000000;;				off++
0000000000000000000000000000000000000000;;				break Loop
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The domainname has been seen, we at the start of the fixed part in the header.
0000000000000000000000000000000000000000;;		// Type is 2 bytes, class is 2 bytes, ttl 4 and then 2 bytes for the length.
0000000000000000000000000000000000000000;;		off += 2 + 2 + 4
0000000000000000000000000000000000000000;;		if off+2 > l {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		//off+1 is the end of the header, 'end' is the end of the rr
0000000000000000000000000000000000000000;;		//so 'end' - 'off+2' is the length of the rdata
0000000000000000000000000000000000000000;;		rdatalen := end - (off + 2)
0000000000000000000000000000000000000000;;		if rdatalen > 0xFFFF {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint16(msg[off:], uint16(rdatalen))
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
