0000000000000000000000000000000000000000;;	package dns
b9f13aaa534682ec2030ddaa4366d37857ab7cbb;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setUDPSocketOptions(conn *net.UDPConn) error { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SessionUDP holds the remote address and the associated
0000000000000000000000000000000000000000;;	// out-of-band data.
0000000000000000000000000000000000000000;;	type SessionUDP struct {
0000000000000000000000000000000000000000;;		raddr   *net.UDPAddr
0000000000000000000000000000000000000000;;		context []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoteAddr returns the remote network address.
0000000000000000000000000000000000000000;;	func (s *SessionUDP) RemoteAddr() net.Addr { return s.raddr }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadFromSessionUDP acts just like net.UDPConn.ReadFrom(), but returns a session object instead of a
0000000000000000000000000000000000000000;;	// net.UDPAddr.
0000000000000000000000000000000000000000;;	func ReadFromSessionUDP(conn *net.UDPConn, b []byte) (int, *SessionUDP, error) {
0000000000000000000000000000000000000000;;		oob := make([]byte, 40)
0000000000000000000000000000000000000000;;		n, oobn, _, raddr, err := conn.ReadMsgUDP(b, oob)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return n, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n, &SessionUDP{raddr, oob[:oobn]}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteToSessionUDP acts just like net.UDPConn.WritetTo(), but uses a *SessionUDP instead of a net.Addr.
0000000000000000000000000000000000000000;;	func WriteToSessionUDP(conn *net.UDPConn, b []byte, session *SessionUDP) (int, error) {
0000000000000000000000000000000000000000;;		n, _, err := conn.WriteMsgUDP(b, session.context, session.raddr)
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
