0000000000000000000000000000000000000000;;	// +build windows
7b453296e4ade7a4f2c9d7f5717f0f864e37dcac;Godeps/_workspace/src/github.com/miekg/dns/udp_windows.go[Godeps/_workspace/src/github.com/miekg/dns/udp_windows.go][vendor/github.com/miekg/dns/udp_windows.go];	
0000000000000000000000000000000000000000;;	package dns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionUDP struct {
0000000000000000000000000000000000000000;;		raddr *net.UDPAddr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadFromSessionUDP acts just like net.UDPConn.ReadFrom(), but returns a session object instead of a
0000000000000000000000000000000000000000;;	// net.UDPAddr.
0000000000000000000000000000000000000000;;	func ReadFromSessionUDP(conn *net.UDPConn, b []byte) (int, *SessionUDP, error) {
0000000000000000000000000000000000000000;;		n, raddr, err := conn.ReadFrom(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return n, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		session := &SessionUDP{raddr.(*net.UDPAddr)}
0000000000000000000000000000000000000000;;		return n, session, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteToSessionUDP acts just like net.UDPConn.WritetTo(), but uses a *SessionUDP instead of a net.Addr.
0000000000000000000000000000000000000000;;	func WriteToSessionUDP(conn *net.UDPConn, b []byte, session *SessionUDP) (int, error) {
0000000000000000000000000000000000000000;;		n, err := conn.WriteTo(b, session.raddr)
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SessionUDP) RemoteAddr() net.Addr { return s.raddr }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setUDPSocketOptions sets the UDP socket options.
0000000000000000000000000000000000000000;;	// This function is implemented on a per platform basis. See udp_*.go for more details
0000000000000000000000000000000000000000;;	func setUDPSocketOptions(conn *net.UDPConn) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
