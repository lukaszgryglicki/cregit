0000000000000000000000000000000000000000;;	//+build ignore
b9f13aaa534682ec2030ddaa4366d37857ab7cbb;;	
0000000000000000000000000000000000000000;;	// types_generate.go is meant to run with go generate. It will use
0000000000000000000000000000000000000000;;	// go/{importer,types} to track down all the RR struct types. Then for each type
0000000000000000000000000000000000000000;;	// it will generate conversion tables (TypeToRR and TypeToString) and banal
0000000000000000000000000000000000000000;;	// methods (len, Header, copy) based on the struct tags. The generated source is
0000000000000000000000000000000000000000;;	// written to ztypes.go, and is meant to be checked into git.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/format"
0000000000000000000000000000000000000000;;		"go/importer"
0000000000000000000000000000000000000000;;		"go/types"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var skipLen = map[string]struct{}{
0000000000000000000000000000000000000000;;		"NSEC":  {},
0000000000000000000000000000000000000000;;		"NSEC3": {},
0000000000000000000000000000000000000000;;		"OPT":   {},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var packageHdr = `
0000000000000000000000000000000000000000;;	// *** DO NOT MODIFY ***
0000000000000000000000000000000000000000;;	// AUTOGENERATED BY go generate from type_generate.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var TypeToRR = template.Must(template.New("TypeToRR").Parse(`
0000000000000000000000000000000000000000;;	// TypeToRR is a map of constructors for each RR type.
0000000000000000000000000000000000000000;;	var TypeToRR = map[uint16]func() RR{
0000000000000000000000000000000000000000;;	{{range .}}{{if ne . "RFC3597"}}  Type{{.}}:  func() RR { return new({{.}}) },
0000000000000000000000000000000000000000;;	{{end}}{{end}}                    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeToString = template.Must(template.New("typeToString").Parse(`
0000000000000000000000000000000000000000;;	// TypeToString is a map of strings for each RR type.
0000000000000000000000000000000000000000;;	var TypeToString = map[uint16]string{
0000000000000000000000000000000000000000;;	{{range .}}{{if ne . "NSAPPTR"}}  Type{{.}}: "{{.}}",
0000000000000000000000000000000000000000;;	{{end}}{{end}}                    TypeNSAPPTR:    "NSAP-PTR",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var headerFunc = template.Must(template.New("headerFunc").Parse(`
0000000000000000000000000000000000000000;;	// Header() functions
0000000000000000000000000000000000000000;;	{{range .}}  func (rr *{{.}}) Header() *RR_Header { return &rr.Hdr }
0000000000000000000000000000000000000000;;	{{end}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getTypeStruct will take a type and the package scope, and return the
0000000000000000000000000000000000000000;;	// (innermost) struct if the type is considered a RR type (currently defined as
0000000000000000000000000000000000000000;;	// those structs beginning with a RR_Header, could be redefined as implementing
0000000000000000000000000000000000000000;;	// the RR interface). The bool return value indicates if embedded structs were
0000000000000000000000000000000000000000;;	// resolved.
0000000000000000000000000000000000000000;;	func getTypeStruct(t types.Type, scope *types.Scope) (*types.Struct, bool) {
0000000000000000000000000000000000000000;;		st, ok := t.Underlying().(*types.Struct)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if st.Field(0).Type() == scope.Lookup("RR_Header").Type() {
0000000000000000000000000000000000000000;;			return st, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if st.Field(0).Anonymous() {
0000000000000000000000000000000000000000;;			st, _ := getTypeStruct(st.Field(0).Type(), scope)
0000000000000000000000000000000000000000;;			return st, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		// Import and type-check the package
0000000000000000000000000000000000000000;;		pkg, err := importer.Default().Import("github.com/miekg/dns")
0000000000000000000000000000000000000000;;		fatalIfErr(err)
0000000000000000000000000000000000000000;;		scope := pkg.Scope()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Collect constants like TypeX
0000000000000000000000000000000000000000;;		var numberedTypes []string
0000000000000000000000000000000000000000;;		for _, name := range scope.Names() {
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			if o == nil || !o.Exported() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b, ok := o.Type().(*types.Basic)
0000000000000000000000000000000000000000;;			if !ok || b.Kind() != types.Uint16 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !strings.HasPrefix(o.Name(), "Type") {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			name := strings.TrimPrefix(o.Name(), "Type")
0000000000000000000000000000000000000000;;			if name == "PrivateRR" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			numberedTypes = append(numberedTypes, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Collect actual types (*X)
0000000000000000000000000000000000000000;;		var namedTypes []string
0000000000000000000000000000000000000000;;		for _, name := range scope.Names() {
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			if o == nil || !o.Exported() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if st, _ := getTypeStruct(o.Type(), scope); st == nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if name == "PrivateRR" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check if corresponding TypeX exists
0000000000000000000000000000000000000000;;			if scope.Lookup("Type"+o.Name()) == nil && o.Name() != "RFC3597" {
0000000000000000000000000000000000000000;;				log.Fatalf("Constant Type%s does not exist.", o.Name())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			namedTypes = append(namedTypes, o.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		b.WriteString(packageHdr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate TypeToRR
0000000000000000000000000000000000000000;;		fatalIfErr(TypeToRR.Execute(b, namedTypes))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate typeToString
0000000000000000000000000000000000000000;;		fatalIfErr(typeToString.Execute(b, numberedTypes))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate headerFunc
0000000000000000000000000000000000000000;;		fatalIfErr(headerFunc.Execute(b, namedTypes))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate len()
0000000000000000000000000000000000000000;;		fmt.Fprint(b, "// len() functions\n")
0000000000000000000000000000000000000000;;		for _, name := range namedTypes {
0000000000000000000000000000000000000000;;			if _, ok := skipLen[name]; ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			st, isEmbedded := getTypeStruct(o.Type(), scope)
0000000000000000000000000000000000000000;;			if isEmbedded {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "func (rr *%s) len() int {\n", name)
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "l := rr.Hdr.len()\n")
0000000000000000000000000000000000000000;;			for i := 1; i < st.NumFields(); i++ {
0000000000000000000000000000000000000000;;				o := func(s string) { fmt.Fprintf(b, s, st.Field(i).Name()) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if _, ok := st.Field(i).Type().(*types.Slice); ok {
0000000000000000000000000000000000000000;;					switch st.Tag(i) {
0000000000000000000000000000000000000000;;					case `dns:"-"`:
0000000000000000000000000000000000000000;;						// ignored
0000000000000000000000000000000000000000;;					case `dns:"cdomain-name"`, `dns:"domain-name"`, `dns:"txt"`:
0000000000000000000000000000000000000000;;						o("for _, x := range rr.%s { l += len(x) + 1 }\n")
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch {
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"-"`:
0000000000000000000000000000000000000000;;					// ignored
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"cdomain-name"`, st.Tag(i) == `dns:"domain-name"`:
0000000000000000000000000000000000000000;;					o("l += len(rr.%s) + 1\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"octet"`:
0000000000000000000000000000000000000000;;					o("l += len(rr.%s)\n")
0000000000000000000000000000000000000000;;				case strings.HasPrefix(st.Tag(i), `dns:"size-base64`):
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"base64"`:
0000000000000000000000000000000000000000;;					o("l += base64.StdEncoding.DecodedLen(len(rr.%s))\n")
0000000000000000000000000000000000000000;;				case strings.HasPrefix(st.Tag(i), `dns:"size-hex`):
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"hex"`:
0000000000000000000000000000000000000000;;					o("l += len(rr.%s)/2 + 1\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"a"`:
0000000000000000000000000000000000000000;;					o("l += net.IPv4len // %s\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"aaaa"`:
0000000000000000000000000000000000000000;;					o("l += net.IPv6len // %s\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"txt"`:
0000000000000000000000000000000000000000;;					o("for _, t := range rr.%s { l += len(t) + 1 }\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == `dns:"uint48"`:
0000000000000000000000000000000000000000;;					o("l += 6 // %s\n")
0000000000000000000000000000000000000000;;				case st.Tag(i) == "":
0000000000000000000000000000000000000000;;					switch st.Field(i).Type().(*types.Basic).Kind() {
0000000000000000000000000000000000000000;;					case types.Uint8:
0000000000000000000000000000000000000000;;						o("l += 1 // %s\n")
0000000000000000000000000000000000000000;;					case types.Uint16:
0000000000000000000000000000000000000000;;						o("l += 2 // %s\n")
0000000000000000000000000000000000000000;;					case types.Uint32:
0000000000000000000000000000000000000000;;						o("l += 4 // %s\n")
0000000000000000000000000000000000000000;;					case types.Uint64:
0000000000000000000000000000000000000000;;						o("l += 8 // %s\n")
0000000000000000000000000000000000000000;;					case types.String:
0000000000000000000000000000000000000000;;						o("l += len(rr.%s) + 1\n")
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						log.Fatalln(name, st.Field(i).Name())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "return l }\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate copy()
0000000000000000000000000000000000000000;;		fmt.Fprint(b, "// copy() functions\n")
0000000000000000000000000000000000000000;;		for _, name := range namedTypes {
0000000000000000000000000000000000000000;;			o := scope.Lookup(name)
0000000000000000000000000000000000000000;;			st, isEmbedded := getTypeStruct(o.Type(), scope)
0000000000000000000000000000000000000000;;			if isEmbedded {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "func (rr *%s) copy() RR {\n", name)
0000000000000000000000000000000000000000;;			fields := []string{"*rr.Hdr.copyHeader()"}
0000000000000000000000000000000000000000;;			for i := 1; i < st.NumFields(); i++ {
0000000000000000000000000000000000000000;;				f := st.Field(i).Name()
0000000000000000000000000000000000000000;;				if sl, ok := st.Field(i).Type().(*types.Slice); ok {
0000000000000000000000000000000000000000;;					t := sl.Underlying().String()
0000000000000000000000000000000000000000;;					t = strings.TrimPrefix(t, "[]")
0000000000000000000000000000000000000000;;					if strings.Contains(t, ".") {
0000000000000000000000000000000000000000;;						splits := strings.Split(t, ".")
0000000000000000000000000000000000000000;;						t = splits[len(splits)-1]
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					fmt.Fprintf(b, "%s := make([]%s, len(rr.%s)); copy(%s, rr.%s)\n",
0000000000000000000000000000000000000000;;						f, t, f, f, f)
0000000000000000000000000000000000000000;;					fields = append(fields, f)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if st.Field(i).Type().String() == "net.IP" {
0000000000000000000000000000000000000000;;					fields = append(fields, "copyIP(rr."+f+")")
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fields = append(fields, "rr."+f)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "return &%s{%s}\n", name, strings.Join(fields, ","))
0000000000000000000000000000000000000000;;			fmt.Fprintf(b, "}\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// gofmt
0000000000000000000000000000000000000000;;		res, err := format.Source(b.Bytes())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			b.WriteTo(os.Stderr)
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// write result
0000000000000000000000000000000000000000;;		f, err := os.Create("ztypes.go")
0000000000000000000000000000000000000000;;		fatalIfErr(err)
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;		f.Write(res)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fatalIfErr(err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
