0000000000000000000000000000000000000000;;	package dns
7b453296e4ade7a4f2c9d7f5717f0f864e37dcac;Godeps/_workspace/src/github.com/miekg/dns/update.go[Godeps/_workspace/src/github.com/miekg/dns/update.go][vendor/github.com/miekg/dns/update.go];	
0000000000000000000000000000000000000000;;	// NameUsed sets the RRs in the prereq section to
0000000000000000000000000000000000000000;;	// "Name is in use" RRs. RFC 2136 section 2.4.4.
0000000000000000000000000000000000000000;;	func (u *Msg) NameUsed(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Answer == nil {
0000000000000000000000000000000000000000;;			u.Answer = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			u.Answer = append(u.Answer, &ANY{Hdr: RR_Header{Name: r.Header().Name, Ttl: 0, Rrtype: TypeANY, Class: ClassANY}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NameNotUsed sets the RRs in the prereq section to
0000000000000000000000000000000000000000;;	// "Name is in not use" RRs. RFC 2136 section 2.4.5.
0000000000000000000000000000000000000000;;	func (u *Msg) NameNotUsed(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Answer == nil {
0000000000000000000000000000000000000000;;			u.Answer = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			u.Answer = append(u.Answer, &ANY{Hdr: RR_Header{Name: r.Header().Name, Ttl: 0, Rrtype: TypeANY, Class: ClassNONE}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used sets the RRs in the prereq section to
0000000000000000000000000000000000000000;;	// "RRset exists (value dependent -- with rdata)" RRs. RFC 2136 section 2.4.2.
0000000000000000000000000000000000000000;;	func (u *Msg) Used(rr []RR) {
0000000000000000000000000000000000000000;;		if len(u.Question) == 0 {
0000000000000000000000000000000000000000;;			panic("dns: empty question section")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if u.Answer == nil {
0000000000000000000000000000000000000000;;			u.Answer = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			r.Header().Class = u.Question[0].Qclass
0000000000000000000000000000000000000000;;			u.Answer = append(u.Answer, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RRsetUsed sets the RRs in the prereq section to
0000000000000000000000000000000000000000;;	// "RRset exists (value independent -- no rdata)" RRs. RFC 2136 section 2.4.1.
0000000000000000000000000000000000000000;;	func (u *Msg) RRsetUsed(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Answer == nil {
0000000000000000000000000000000000000000;;			u.Answer = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			u.Answer = append(u.Answer, &ANY{Hdr: RR_Header{Name: r.Header().Name, Ttl: 0, Rrtype: r.Header().Rrtype, Class: ClassANY}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RRsetNotUsed sets the RRs in the prereq section to
0000000000000000000000000000000000000000;;	// "RRset does not exist" RRs. RFC 2136 section 2.4.3.
0000000000000000000000000000000000000000;;	func (u *Msg) RRsetNotUsed(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Answer == nil {
0000000000000000000000000000000000000000;;			u.Answer = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			u.Answer = append(u.Answer, &ANY{Hdr: RR_Header{Name: r.Header().Name, Ttl: 0, Rrtype: r.Header().Rrtype, Class: ClassNONE}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Insert creates a dynamic update packet that adds an complete RRset, see RFC 2136 section 2.5.1.
0000000000000000000000000000000000000000;;	func (u *Msg) Insert(rr []RR) {
0000000000000000000000000000000000000000;;		if len(u.Question) == 0 {
0000000000000000000000000000000000000000;;			panic("dns: empty question section")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if u.Ns == nil {
0000000000000000000000000000000000000000;;			u.Ns = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			r.Header().Class = u.Question[0].Qclass
0000000000000000000000000000000000000000;;			u.Ns = append(u.Ns, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveRRset creates a dynamic update packet that deletes an RRset, see RFC 2136 section 2.5.2.
0000000000000000000000000000000000000000;;	func (u *Msg) RemoveRRset(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Ns == nil {
0000000000000000000000000000000000000000;;			u.Ns = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			u.Ns = append(u.Ns, &ANY{Hdr: RR_Header{Name: r.Header().Name, Ttl: 0, Rrtype: r.Header().Rrtype, Class: ClassANY}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveName creates a dynamic update packet that deletes all RRsets of a name, see RFC 2136 section 2.5.3
0000000000000000000000000000000000000000;;	func (u *Msg) RemoveName(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Ns == nil {
0000000000000000000000000000000000000000;;			u.Ns = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			u.Ns = append(u.Ns, &ANY{Hdr: RR_Header{Name: r.Header().Name, Ttl: 0, Rrtype: TypeANY, Class: ClassANY}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove creates a dynamic update packet deletes RR from a RRSset, see RFC 2136 section 2.5.4
0000000000000000000000000000000000000000;;	func (u *Msg) Remove(rr []RR) {
0000000000000000000000000000000000000000;;		if u.Ns == nil {
0000000000000000000000000000000000000000;;			u.Ns = make([]RR, 0, len(rr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range rr {
0000000000000000000000000000000000000000;;			r.Header().Class = ClassNONE
0000000000000000000000000000000000000000;;			r.Header().Ttl = 0
0000000000000000000000000000000000000000;;			u.Ns = append(u.Ns, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
