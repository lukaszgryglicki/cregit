0000000000000000000000000000000000000000;;	// +build windows
0000000000000000000000000000000000000000;;	// +build !go1.4
e9f59de9ed6d7861afb265b2d9f70141da10e884;Godeps/_workspace/src/github.com/inconshreveable/mousetrap/trap_windows.go[Godeps/_workspace/src/github.com/inconshreveable/mousetrap/trap_windows.go][vendor/github.com/inconshreveable/mousetrap/trap_windows.go];	
0000000000000000000000000000000000000000;;	package mousetrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// defined by the Win32 API
0000000000000000000000000000000000000000;;		th32cs_snapprocess uintptr = 0x2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		kernel                   = syscall.MustLoadDLL("kernel32.dll")
0000000000000000000000000000000000000000;;		CreateToolhelp32Snapshot = kernel.MustFindProc("CreateToolhelp32Snapshot")
0000000000000000000000000000000000000000;;		Process32First           = kernel.MustFindProc("Process32FirstW")
0000000000000000000000000000000000000000;;		Process32Next            = kernel.MustFindProc("Process32NextW")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProcessEntry32 structure defined by the Win32 API
0000000000000000000000000000000000000000;;	type processEntry32 struct {
0000000000000000000000000000000000000000;;		dwSize              uint32
0000000000000000000000000000000000000000;;		cntUsage            uint32
0000000000000000000000000000000000000000;;		th32ProcessID       uint32
0000000000000000000000000000000000000000;;		th32DefaultHeapID   int
0000000000000000000000000000000000000000;;		th32ModuleID        uint32
0000000000000000000000000000000000000000;;		cntThreads          uint32
0000000000000000000000000000000000000000;;		th32ParentProcessID uint32
0000000000000000000000000000000000000000;;		pcPriClassBase      int32
0000000000000000000000000000000000000000;;		dwFlags             uint32
0000000000000000000000000000000000000000;;		szExeFile           [syscall.MAX_PATH]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getProcessEntry(pid int) (pe *processEntry32, err error) {
0000000000000000000000000000000000000000;;		snapshot, _, e1 := CreateToolhelp32Snapshot.Call(th32cs_snapprocess, uintptr(0))
0000000000000000000000000000000000000000;;		if snapshot == uintptr(syscall.InvalidHandle) {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("CreateToolhelp32Snapshot: %v", e1)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer syscall.CloseHandle(syscall.Handle(snapshot))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var processEntry processEntry32
0000000000000000000000000000000000000000;;		processEntry.dwSize = uint32(unsafe.Sizeof(processEntry))
0000000000000000000000000000000000000000;;		ok, _, e1 := Process32First.Call(snapshot, uintptr(unsafe.Pointer(&processEntry)))
0000000000000000000000000000000000000000;;		if ok == 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Process32First: %v", e1)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			if processEntry.th32ProcessID == uint32(pid) {
0000000000000000000000000000000000000000;;				pe = &processEntry
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ok, _, e1 = Process32Next.Call(snapshot, uintptr(unsafe.Pointer(&processEntry)))
0000000000000000000000000000000000000000;;			if ok == 0 {
0000000000000000000000000000000000000000;;				err = fmt.Errorf("Process32Next: %v", e1)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getppid() (pid int, err error) {
0000000000000000000000000000000000000000;;		pe, err := getProcessEntry(os.Getpid())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pid = int(pe.th32ParentProcessID)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartedByExplorer returns true if the program was invoked by the user double-clicking
0000000000000000000000000000000000000000;;	// on the executable from explorer.exe
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It is conservative and returns false if any of the internal calls fail.
0000000000000000000000000000000000000000;;	// It does not guarantee that the program was run from a terminal. It only can tell you
0000000000000000000000000000000000000000;;	// whether it was launched from explorer.exe
0000000000000000000000000000000000000000;;	func StartedByExplorer() bool {
0000000000000000000000000000000000000000;;		ppid, err := getppid()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pe, err := getProcessEntry(ppid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name := syscall.UTF16ToString(pe.szExeFile[:])
0000000000000000000000000000000000000000;;		return name == "explorer.exe"
0000000000000000000000000000000000000000;;	}
