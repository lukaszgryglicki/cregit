0000000000000000000000000000000000000000;;	// Package jwriter contains a JSON writer.
0000000000000000000000000000000000000000;;	package jwriter
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/buffer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Writer is a JSON writer.
0000000000000000000000000000000000000000;;	type Writer struct {
0000000000000000000000000000000000000000;;		Error  error
0000000000000000000000000000000000000000;;		Buffer buffer.Buffer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Size returns the size of the data that was written out.
0000000000000000000000000000000000000000;;	func (w *Writer) Size() int {
0000000000000000000000000000000000000000;;		return w.Buffer.Size()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DumpTo outputs the data to given io.Writer, resetting the buffer.
0000000000000000000000000000000000000000;;	func (w *Writer) DumpTo(out io.Writer) (written int, err error) {
0000000000000000000000000000000000000000;;		return w.Buffer.DumpTo(out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BuildBytes returns writer data as a single byte slice.
0000000000000000000000000000000000000000;;	func (w *Writer) BuildBytes() ([]byte, error) {
0000000000000000000000000000000000000000;;		if w.Error != nil {
0000000000000000000000000000000000000000;;			return nil, w.Error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return w.Buffer.BuildBytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RawByte appends raw binary data to the buffer.
0000000000000000000000000000000000000000;;	func (w *Writer) RawByte(c byte) {
0000000000000000000000000000000000000000;;		w.Buffer.AppendByte(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RawByte appends raw binary data to the buffer.
0000000000000000000000000000000000000000;;	func (w *Writer) RawString(s string) {
0000000000000000000000000000000000000000;;		w.Buffer.AppendString(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RawByte appends raw binary data to the buffer or sets the error if it is given. Useful for
0000000000000000000000000000000000000000;;	// calling with results of MarshalJSON-like functions.
0000000000000000000000000000000000000000;;	func (w *Writer) Raw(data []byte, err error) {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case w.Error != nil:
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case err != nil:
0000000000000000000000000000000000000000;;			w.Error = err
0000000000000000000000000000000000000000;;		case len(data) > 0:
0000000000000000000000000000000000000000;;			w.Buffer.AppendBytes(data)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			w.RawString("null")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint8(n uint8) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(3)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint16(n uint16) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(5)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint32(n uint32) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint(n uint) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(20)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint64(n uint64) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(20)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, n, 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int8(n int8) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(4)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int16(n int16) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(6)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int32(n int32) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(11)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int(n int) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(21)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int64(n int64) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(21)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, n, 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint8Str(n uint8) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(3)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint16Str(n uint16) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(5)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint32Str(n uint32) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) UintStr(n uint) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(20)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, uint64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Uint64Str(n uint64) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(20)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendUint(w.Buffer.Buf, n, 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int8Str(n int8) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(4)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int16Str(n int16) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(6)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int32Str(n int32) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(11)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) IntStr(n int) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(21)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, int64(n), 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Int64Str(n int64) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(21)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendInt(w.Buffer.Buf, n, 10)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = append(w.Buffer.Buf, '"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Float32(n float32) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(20)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendFloat(w.Buffer.Buf, float64(n), 'g', -1, 32)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Float64(n float64) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(20)
0000000000000000000000000000000000000000;;		w.Buffer.Buf = strconv.AppendFloat(w.Buffer.Buf, n, 'g', -1, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) Bool(v bool) {
0000000000000000000000000000000000000000;;		w.Buffer.EnsureSpace(5)
0000000000000000000000000000000000000000;;		if v {
0000000000000000000000000000000000000000;;			w.Buffer.Buf = append(w.Buffer.Buf, "true"...)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			w.Buffer.Buf = append(w.Buffer.Buf, "false"...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const chars = "0123456789abcdef"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *Writer) String(s string) {
0000000000000000000000000000000000000000;;		w.Buffer.AppendByte('"')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Portions of the string that contain no escapes are appended as
0000000000000000000000000000000000000000;;		// byte slices.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p := 0 // last non-escape symbol
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < len(s); {
0000000000000000000000000000000000000000;;			// single-with character
0000000000000000000000000000000000000000;;			if c := s[i]; c < utf8.RuneSelf {
0000000000000000000000000000000000000000;;				var escape byte
0000000000000000000000000000000000000000;;				switch c {
0000000000000000000000000000000000000000;;				case '\t':
0000000000000000000000000000000000000000;;					escape = 't'
0000000000000000000000000000000000000000;;				case '\r':
0000000000000000000000000000000000000000;;					escape = 'r'
0000000000000000000000000000000000000000;;				case '\n':
0000000000000000000000000000000000000000;;					escape = 'n'
0000000000000000000000000000000000000000;;				case '\\':
0000000000000000000000000000000000000000;;					escape = '\\'
0000000000000000000000000000000000000000;;				case '"':
0000000000000000000000000000000000000000;;					escape = '"'
0000000000000000000000000000000000000000;;				case '<', '>':
0000000000000000000000000000000000000000;;					// do nothing
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					if c >= 0x20 {
0000000000000000000000000000000000000000;;						// no escaping is required
0000000000000000000000000000000000000000;;						i++
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if escape != 0 {
0000000000000000000000000000000000000000;;					w.Buffer.AppendString(s[p:i])
0000000000000000000000000000000000000000;;					w.Buffer.AppendByte('\\')
0000000000000000000000000000000000000000;;					w.Buffer.AppendByte(escape)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					w.Buffer.AppendString(s[p:i])
0000000000000000000000000000000000000000;;					w.Buffer.AppendString(`\u00`)
0000000000000000000000000000000000000000;;					w.Buffer.AppendByte(chars[c>>4])
0000000000000000000000000000000000000000;;					w.Buffer.AppendByte(chars[c&0xf])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;				p = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// broken utf
0000000000000000000000000000000000000000;;			runeValue, runeWidth := utf8.DecodeRuneInString(s[i:])
0000000000000000000000000000000000000000;;			if runeValue == utf8.RuneError && runeWidth == 1 {
0000000000000000000000000000000000000000;;				w.Buffer.AppendString(s[p:i])
0000000000000000000000000000000000000000;;				w.Buffer.AppendString(`\ufffd`)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;				p = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// jsonp stuff - tab separator and line separator
0000000000000000000000000000000000000000;;			if runeValue == '\u2028' || runeValue == '\u2029' {
0000000000000000000000000000000000000000;;				w.Buffer.AppendString(s[p:i])
0000000000000000000000000000000000000000;;				w.Buffer.AppendString(`\u202`)
0000000000000000000000000000000000000000;;				w.Buffer.AppendByte(chars[runeValue&0xf])
0000000000000000000000000000000000000000;;				i += runeWidth
0000000000000000000000000000000000000000;;				p = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			i += runeWidth
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.Buffer.AppendString(s[p:])
0000000000000000000000000000000000000000;;		w.Buffer.AppendByte('"')
0000000000000000000000000000000000000000;;	}
