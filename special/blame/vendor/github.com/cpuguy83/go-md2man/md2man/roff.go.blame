0000000000000000000000000000000000000000;;	package md2man
50f9755c60b2914e7a0c6daa6fbd3a38d2cab61c;Godeps/_workspace/src/github.com/cpuguy83/go-md2man/mangen/mangen.go[Godeps/_workspace/src/github.com/cpuguy83/go-md2man/mangen/mangen.go][vendor/github.com/cpuguy83/go-md2man/md2man/roff.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"html"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/russross/blackfriday"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type roffRenderer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RoffRenderer(flags int) blackfriday.Renderer {
0000000000000000000000000000000000000000;;		return &roffRenderer{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) GetFlags() int {
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) TitleBlock(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.WriteString(".TH ")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		splitText := bytes.Split(text, []byte("\n"))
0000000000000000000000000000000000000000;;		for i, line := range splitText {
0000000000000000000000000000000000000000;;			line = bytes.TrimPrefix(line, []byte("% "))
0000000000000000000000000000000000000000;;			if i == 0 {
0000000000000000000000000000000000000000;;				line = bytes.Replace(line, []byte("("), []byte("\" \""), 1)
0000000000000000000000000000000000000000;;				line = bytes.Replace(line, []byte(")"), []byte("\" \""), 1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			line = append([]byte("\""), line...)
0000000000000000000000000000000000000000;;			line = append(line, []byte("\" ")...)
0000000000000000000000000000000000000000;;			out.Write(line)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out.WriteString(" \"\"\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) BlockCode(out *bytes.Buffer, text []byte, lang string) {
0000000000000000000000000000000000000000;;		out.WriteString("\n.PP\n.RS\n\n.nf\n")
0000000000000000000000000000000000000000;;		escapeSpecialChars(out, text)
0000000000000000000000000000000000000000;;		out.WriteString("\n.fi\n.RE\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) BlockQuote(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.WriteString("\n.PP\n.RS\n")
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString("\n.RE\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) BlockHtml(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Header(out *bytes.Buffer, text func() bool, level int, id string) {
0000000000000000000000000000000000000000;;		marker := out.Len()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case marker == 0:
0000000000000000000000000000000000000000;;			// This is the doc header
0000000000000000000000000000000000000000;;			out.WriteString(".TH ")
0000000000000000000000000000000000000000;;		case level == 1:
0000000000000000000000000000000000000000;;			out.WriteString("\n\n.SH ")
0000000000000000000000000000000000000000;;		case level == 2:
0000000000000000000000000000000000000000;;			out.WriteString("\n.SH ")
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			out.WriteString("\n.SS ")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !text() {
0000000000000000000000000000000000000000;;			out.Truncate(marker)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) HRule(out *bytes.Buffer) {
0000000000000000000000000000000000000000;;		out.WriteString("\n.ti 0\n\\l'\\n(.lu'\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) List(out *bytes.Buffer, text func() bool, flags int) {
0000000000000000000000000000000000000000;;		marker := out.Len()
0000000000000000000000000000000000000000;;		out.WriteString(".IP ")
0000000000000000000000000000000000000000;;		if flags&blackfriday.LIST_TYPE_ORDERED != 0 {
0000000000000000000000000000000000000000;;			out.WriteString("\\(bu 2")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			out.WriteString("\\n+[step" + string(flags) + "]")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.WriteString("\n")
0000000000000000000000000000000000000000;;		if !text() {
0000000000000000000000000000000000000000;;			out.Truncate(marker)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) ListItem(out *bytes.Buffer, text []byte, flags int) {
0000000000000000000000000000000000000000;;		out.WriteString("\n\\item ")
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Paragraph(out *bytes.Buffer, text func() bool) {
0000000000000000000000000000000000000000;;		marker := out.Len()
0000000000000000000000000000000000000000;;		out.WriteString("\n.PP\n")
0000000000000000000000000000000000000000;;		if !text() {
0000000000000000000000000000000000000000;;			out.Truncate(marker)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if marker != 0 {
0000000000000000000000000000000000000000;;			out.WriteString("\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: This might now work
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Table(out *bytes.Buffer, header []byte, body []byte, columnData []int) {
0000000000000000000000000000000000000000;;		out.WriteString(".TS\nallbox;\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out.Write(header)
0000000000000000000000000000000000000000;;		out.Write(body)
0000000000000000000000000000000000000000;;		out.WriteString("\n.TE\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) TableRow(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		if out.Len() > 0 {
0000000000000000000000000000000000000000;;			out.WriteString("\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString("\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) TableHeaderCell(out *bytes.Buffer, text []byte, align int) {
0000000000000000000000000000000000000000;;		if out.Len() > 0 {
0000000000000000000000000000000000000000;;			out.WriteString(" ")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString(" ")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: This is probably broken
0000000000000000000000000000000000000000;;	func (r *roffRenderer) TableCell(out *bytes.Buffer, text []byte, align int) {
0000000000000000000000000000000000000000;;		if out.Len() > 0 {
0000000000000000000000000000000000000000;;			out.WriteString("\t")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString("\t")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Footnotes(out *bytes.Buffer, text func() bool) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) FootnoteItem(out *bytes.Buffer, name, text []byte, flags int) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) AutoLink(out *bytes.Buffer, link []byte, kind int) {
0000000000000000000000000000000000000000;;		out.WriteString("\n\\[la]")
0000000000000000000000000000000000000000;;		out.Write(link)
0000000000000000000000000000000000000000;;		out.WriteString("\\[ra]")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) CodeSpan(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.WriteString("\\fB\\fC")
0000000000000000000000000000000000000000;;		escapeSpecialChars(out, text)
0000000000000000000000000000000000000000;;		out.WriteString("\\fR")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) DoubleEmphasis(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.WriteString("\\fB")
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString("\\fP")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Emphasis(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.WriteString("\\fI")
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString("\\fP")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Image(out *bytes.Buffer, link []byte, title []byte, alt []byte) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) LineBreak(out *bytes.Buffer) {
0000000000000000000000000000000000000000;;		out.WriteString("\n.br\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Link(out *bytes.Buffer, link []byte, title []byte, content []byte) {
0000000000000000000000000000000000000000;;		r.AutoLink(out, link, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) RawHtmlTag(out *bytes.Buffer, tag []byte) {
0000000000000000000000000000000000000000;;		out.Write(tag)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) TripleEmphasis(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		out.WriteString("\\s+2")
0000000000000000000000000000000000000000;;		out.Write(text)
0000000000000000000000000000000000000000;;		out.WriteString("\\s-2")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) StrikeThrough(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) FootnoteRef(out *bytes.Buffer, ref []byte, id int) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) Entity(out *bytes.Buffer, entity []byte) {
0000000000000000000000000000000000000000;;		out.WriteString(html.UnescapeString(string(entity)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func processFooterText(text []byte) []byte {
0000000000000000000000000000000000000000;;		text = bytes.TrimPrefix(text, []byte("% "))
0000000000000000000000000000000000000000;;		newText := []byte{}
0000000000000000000000000000000000000000;;		textArr := strings.Split(string(text), ") ")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, w := range textArr {
0000000000000000000000000000000000000000;;			if i == 0 {
0000000000000000000000000000000000000000;;				w = strings.Replace(w, "(", "\" \"", 1)
0000000000000000000000000000000000000000;;				w = fmt.Sprintf("\"%s\"", w)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				w = fmt.Sprintf(" \"%s\"", w)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newText = append(newText, []byte(w)...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newText = append(newText, []byte(" \"\"")...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newText
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) NormalText(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		escapeSpecialChars(out, text)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) DocumentHeader(out *bytes.Buffer) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *roffRenderer) DocumentFooter(out *bytes.Buffer) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func needsBackslash(c byte) bool {
0000000000000000000000000000000000000000;;		for _, r := range []byte("-_&\\~") {
0000000000000000000000000000000000000000;;			if c == r {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func escapeSpecialChars(out *bytes.Buffer, text []byte) {
0000000000000000000000000000000000000000;;		for i := 0; i < len(text); i++ {
0000000000000000000000000000000000000000;;			// directly copy normal characters
0000000000000000000000000000000000000000;;			org := i
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i < len(text) && !needsBackslash(text[i]) {
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if i > org {
0000000000000000000000000000000000000000;;				out.Write(text[org:i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// escape a character
0000000000000000000000000000000000000000;;			if i >= len(text) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out.WriteByte('\\')
0000000000000000000000000000000000000000;;			out.WriteByte(text[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
