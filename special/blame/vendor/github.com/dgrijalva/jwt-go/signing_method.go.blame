0000000000000000000000000000000000000000;;	package jwt
60d7e7a19c23729a8887eaae029559136e0e6b02;Godeps/_workspace/src/github.com/dgrijalva/jwt-go/signing_method.go[Godeps/_workspace/src/github.com/dgrijalva/jwt-go/signing_method.go][vendor/github.com/dgrijalva/jwt-go/signing_method.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var signingMethods = map[string]func() SigningMethod{}
0000000000000000000000000000000000000000;;	var signingMethodLock = new(sync.RWMutex)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement SigningMethod to add new methods for signing or verifying tokens.
0000000000000000000000000000000000000000;;	type SigningMethod interface {
0000000000000000000000000000000000000000;;		Verify(signingString, signature string, key interface{}) error // Returns nil if signature is valid
0000000000000000000000000000000000000000;;		Sign(signingString string, key interface{}) (string, error)    // Returns encoded signature or error
0000000000000000000000000000000000000000;;		Alg() string                                                   // returns the alg identifier for this method (example: 'HS256')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register the "alg" name and a factory function for signing method.
0000000000000000000000000000000000000000;;	// This is typically done during init() in the method's implementation
0000000000000000000000000000000000000000;;	func RegisterSigningMethod(alg string, f func() SigningMethod) {
0000000000000000000000000000000000000000;;		signingMethodLock.Lock()
0000000000000000000000000000000000000000;;		defer signingMethodLock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signingMethods[alg] = f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get a signing method from an "alg" string
0000000000000000000000000000000000000000;;	func GetSigningMethod(alg string) (method SigningMethod) {
0000000000000000000000000000000000000000;;		signingMethodLock.RLock()
0000000000000000000000000000000000000000;;		defer signingMethodLock.RUnlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if methodF, ok := signingMethods[alg]; ok {
0000000000000000000000000000000000000000;;			method = methodF()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
