0000000000000000000000000000000000000000;;	// +build go1.4
ba6ffe25891a71ddd84e82b77bc1c495ddcacd73;;	
0000000000000000000000000000000000000000;;	package jwt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto"
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"crypto/rsa"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements the RSAPSS family of signing methods signing methods
0000000000000000000000000000000000000000;;	type SigningMethodRSAPSS struct {
0000000000000000000000000000000000000000;;		*SigningMethodRSA
0000000000000000000000000000000000000000;;		Options *rsa.PSSOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Specific instances for RS/PS and company
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		SigningMethodPS256 *SigningMethodRSAPSS
0000000000000000000000000000000000000000;;		SigningMethodPS384 *SigningMethodRSAPSS
0000000000000000000000000000000000000000;;		SigningMethodPS512 *SigningMethodRSAPSS
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// PS256
0000000000000000000000000000000000000000;;		SigningMethodPS256 = &SigningMethodRSAPSS{
0000000000000000000000000000000000000000;;			&SigningMethodRSA{
0000000000000000000000000000000000000000;;				Name: "PS256",
0000000000000000000000000000000000000000;;				Hash: crypto.SHA256,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&rsa.PSSOptions{
0000000000000000000000000000000000000000;;				SaltLength: rsa.PSSSaltLengthAuto,
0000000000000000000000000000000000000000;;				Hash:       crypto.SHA256,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodPS256.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodPS256
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PS384
0000000000000000000000000000000000000000;;		SigningMethodPS384 = &SigningMethodRSAPSS{
0000000000000000000000000000000000000000;;			&SigningMethodRSA{
0000000000000000000000000000000000000000;;				Name: "PS384",
0000000000000000000000000000000000000000;;				Hash: crypto.SHA384,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&rsa.PSSOptions{
0000000000000000000000000000000000000000;;				SaltLength: rsa.PSSSaltLengthAuto,
0000000000000000000000000000000000000000;;				Hash:       crypto.SHA384,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodPS384.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodPS384
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PS512
0000000000000000000000000000000000000000;;		SigningMethodPS512 = &SigningMethodRSAPSS{
0000000000000000000000000000000000000000;;			&SigningMethodRSA{
0000000000000000000000000000000000000000;;				Name: "PS512",
0000000000000000000000000000000000000000;;				Hash: crypto.SHA512,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&rsa.PSSOptions{
0000000000000000000000000000000000000000;;				SaltLength: rsa.PSSSaltLengthAuto,
0000000000000000000000000000000000000000;;				Hash:       crypto.SHA512,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodPS512.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodPS512
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements the Verify method from SigningMethod
0000000000000000000000000000000000000000;;	// For this verify method, key must be an rsa.PublicKey struct
0000000000000000000000000000000000000000;;	func (m *SigningMethodRSAPSS) Verify(signingString, signature string, key interface{}) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Decode the signature
0000000000000000000000000000000000000000;;		var sig []byte
0000000000000000000000000000000000000000;;		if sig, err = DecodeSegment(signature); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var rsaKey *rsa.PublicKey
0000000000000000000000000000000000000000;;		switch k := key.(type) {
0000000000000000000000000000000000000000;;		case *rsa.PublicKey:
0000000000000000000000000000000000000000;;			rsaKey = k
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return ErrInvalidKey
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create hasher
0000000000000000000000000000000000000000;;		if !m.Hash.Available() {
0000000000000000000000000000000000000000;;			return ErrHashUnavailable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hasher := m.Hash.New()
0000000000000000000000000000000000000000;;		hasher.Write([]byte(signingString))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return rsa.VerifyPSS(rsaKey, m.Hash, hasher.Sum(nil), sig, m.Options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements the Sign method from SigningMethod
0000000000000000000000000000000000000000;;	// For this signing method, key must be an rsa.PrivateKey struct
0000000000000000000000000000000000000000;;	func (m *SigningMethodRSAPSS) Sign(signingString string, key interface{}) (string, error) {
0000000000000000000000000000000000000000;;		var rsaKey *rsa.PrivateKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch k := key.(type) {
0000000000000000000000000000000000000000;;		case *rsa.PrivateKey:
0000000000000000000000000000000000000000;;			rsaKey = k
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", ErrInvalidKeyType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the hasher
0000000000000000000000000000000000000000;;		if !m.Hash.Available() {
0000000000000000000000000000000000000000;;			return "", ErrHashUnavailable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hasher := m.Hash.New()
0000000000000000000000000000000000000000;;		hasher.Write([]byte(signingString))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sign the string and return the encoded bytes
0000000000000000000000000000000000000000;;		if sigBytes, err := rsa.SignPSS(rand.Reader, rsaKey, m.Hash, hasher.Sum(nil), m.Options); err == nil {
0000000000000000000000000000000000000000;;			return EncodeSegment(sigBytes), nil
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
