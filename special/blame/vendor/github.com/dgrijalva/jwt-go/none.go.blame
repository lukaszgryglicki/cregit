0000000000000000000000000000000000000000;;	package jwt
ba6ffe25891a71ddd84e82b77bc1c495ddcacd73;;	
0000000000000000000000000000000000000000;;	// Implements the none signing method.  This is required by the spec
0000000000000000000000000000000000000000;;	// but you probably should never use it.
0000000000000000000000000000000000000000;;	var SigningMethodNone *signingMethodNone
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const UnsafeAllowNoneSignatureType unsafeNoneMagicConstant = "none signing method allowed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var NoneSignatureTypeDisallowedError error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type signingMethodNone struct{}
0000000000000000000000000000000000000000;;	type unsafeNoneMagicConstant string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		SigningMethodNone = &signingMethodNone{}
0000000000000000000000000000000000000000;;		NoneSignatureTypeDisallowedError = NewValidationError("'none' signature type is not allowed", ValidationErrorSignatureInvalid)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodNone.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodNone
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *signingMethodNone) Alg() string {
0000000000000000000000000000000000000000;;		return "none"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Only allow 'none' alg type if UnsafeAllowNoneSignatureType is specified as the key
0000000000000000000000000000000000000000;;	func (m *signingMethodNone) Verify(signingString, signature string, key interface{}) (err error) {
0000000000000000000000000000000000000000;;		// Key must be UnsafeAllowNoneSignatureType to prevent accidentally
0000000000000000000000000000000000000000;;		// accepting 'none' signing method
0000000000000000000000000000000000000000;;		if _, ok := key.(unsafeNoneMagicConstant); !ok {
0000000000000000000000000000000000000000;;			return NoneSignatureTypeDisallowedError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If signing method is none, signature must be an empty string
0000000000000000000000000000000000000000;;		if signature != "" {
0000000000000000000000000000000000000000;;			return NewValidationError(
0000000000000000000000000000000000000000;;				"'none' signing method with non-empty signature",
0000000000000000000000000000000000000000;;				ValidationErrorSignatureInvalid,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Accept 'none' signing method.
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Only allow 'none' signing if UnsafeAllowNoneSignatureType is specified as the key
0000000000000000000000000000000000000000;;	func (m *signingMethodNone) Sign(signingString string, key interface{}) (string, error) {
0000000000000000000000000000000000000000;;		if _, ok := key.(unsafeNoneMagicConstant); ok {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", NoneSignatureTypeDisallowedError
0000000000000000000000000000000000000000;;	}
