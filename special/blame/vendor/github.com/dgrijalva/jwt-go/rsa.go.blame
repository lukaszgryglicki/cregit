0000000000000000000000000000000000000000;;	package jwt
60d7e7a19c23729a8887eaae029559136e0e6b02;Godeps/_workspace/src/github.com/dgrijalva/jwt-go/rsa.go[Godeps/_workspace/src/github.com/dgrijalva/jwt-go/rsa.go][vendor/github.com/dgrijalva/jwt-go/rsa.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto"
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"crypto/rsa"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements the RSA family of signing methods signing methods
0000000000000000000000000000000000000000;;	type SigningMethodRSA struct {
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		Hash crypto.Hash
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Specific instances for RS256 and company
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		SigningMethodRS256 *SigningMethodRSA
0000000000000000000000000000000000000000;;		SigningMethodRS384 *SigningMethodRSA
0000000000000000000000000000000000000000;;		SigningMethodRS512 *SigningMethodRSA
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// RS256
0000000000000000000000000000000000000000;;		SigningMethodRS256 = &SigningMethodRSA{"RS256", crypto.SHA256}
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodRS256.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodRS256
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RS384
0000000000000000000000000000000000000000;;		SigningMethodRS384 = &SigningMethodRSA{"RS384", crypto.SHA384}
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodRS384.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodRS384
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RS512
0000000000000000000000000000000000000000;;		SigningMethodRS512 = &SigningMethodRSA{"RS512", crypto.SHA512}
0000000000000000000000000000000000000000;;		RegisterSigningMethod(SigningMethodRS512.Alg(), func() SigningMethod {
0000000000000000000000000000000000000000;;			return SigningMethodRS512
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *SigningMethodRSA) Alg() string {
0000000000000000000000000000000000000000;;		return m.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements the Verify method from SigningMethod
0000000000000000000000000000000000000000;;	// For this signing method, must be an rsa.PublicKey structure.
0000000000000000000000000000000000000000;;	func (m *SigningMethodRSA) Verify(signingString, signature string, key interface{}) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Decode the signature
0000000000000000000000000000000000000000;;		var sig []byte
0000000000000000000000000000000000000000;;		if sig, err = DecodeSegment(signature); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var rsaKey *rsa.PublicKey
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if rsaKey, ok = key.(*rsa.PublicKey); !ok {
0000000000000000000000000000000000000000;;			return ErrInvalidKeyType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create hasher
0000000000000000000000000000000000000000;;		if !m.Hash.Available() {
0000000000000000000000000000000000000000;;			return ErrHashUnavailable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hasher := m.Hash.New()
0000000000000000000000000000000000000000;;		hasher.Write([]byte(signingString))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify the signature
0000000000000000000000000000000000000000;;		return rsa.VerifyPKCS1v15(rsaKey, m.Hash, hasher.Sum(nil), sig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements the Sign method from SigningMethod
0000000000000000000000000000000000000000;;	// For this signing method, must be an rsa.PrivateKey structure.
0000000000000000000000000000000000000000;;	func (m *SigningMethodRSA) Sign(signingString string, key interface{}) (string, error) {
0000000000000000000000000000000000000000;;		var rsaKey *rsa.PrivateKey
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate type of key
0000000000000000000000000000000000000000;;		if rsaKey, ok = key.(*rsa.PrivateKey); !ok {
0000000000000000000000000000000000000000;;			return "", ErrInvalidKey
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the hasher
0000000000000000000000000000000000000000;;		if !m.Hash.Available() {
0000000000000000000000000000000000000000;;			return "", ErrHashUnavailable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hasher := m.Hash.New()
0000000000000000000000000000000000000000;;		hasher.Write([]byte(signingString))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sign the string and return the encoded bytes
0000000000000000000000000000000000000000;;		if sigBytes, err := rsa.SignPKCS1v15(rand.Reader, rsaKey, m.Hash, hasher.Sum(nil)); err == nil {
0000000000000000000000000000000000000000;;			return EncodeSegment(sigBytes), nil
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
