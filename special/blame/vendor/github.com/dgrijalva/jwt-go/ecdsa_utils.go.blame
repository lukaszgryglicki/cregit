0000000000000000000000000000000000000000;;	package jwt
ba6ffe25891a71ddd84e82b77bc1c495ddcacd73;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/ecdsa"
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"encoding/pem"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNotECPublicKey  = errors.New("Key is not a valid ECDSA public key")
0000000000000000000000000000000000000000;;		ErrNotECPrivateKey = errors.New("Key is not a valid ECDSA private key")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse PEM encoded Elliptic Curve Private Key Structure
0000000000000000000000000000000000000000;;	func ParseECPrivateKeyFromPEM(key []byte) (*ecdsa.PrivateKey, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse PEM block
0000000000000000000000000000000000000000;;		var block *pem.Block
0000000000000000000000000000000000000000;;		if block, _ = pem.Decode(key); block == nil {
0000000000000000000000000000000000000000;;			return nil, ErrKeyMustBePEMEncoded
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse the key
0000000000000000000000000000000000000000;;		var parsedKey interface{}
0000000000000000000000000000000000000000;;		if parsedKey, err = x509.ParseECPrivateKey(block.Bytes); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var pkey *ecdsa.PrivateKey
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;		if pkey, ok = parsedKey.(*ecdsa.PrivateKey); !ok {
0000000000000000000000000000000000000000;;			return nil, ErrNotECPrivateKey
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pkey, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse PEM encoded PKCS1 or PKCS8 public key
0000000000000000000000000000000000000000;;	func ParseECPublicKeyFromPEM(key []byte) (*ecdsa.PublicKey, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse PEM block
0000000000000000000000000000000000000000;;		var block *pem.Block
0000000000000000000000000000000000000000;;		if block, _ = pem.Decode(key); block == nil {
0000000000000000000000000000000000000000;;			return nil, ErrKeyMustBePEMEncoded
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse the key
0000000000000000000000000000000000000000;;		var parsedKey interface{}
0000000000000000000000000000000000000000;;		if parsedKey, err = x509.ParsePKIXPublicKey(block.Bytes); err != nil {
0000000000000000000000000000000000000000;;			if cert, err := x509.ParseCertificate(block.Bytes); err == nil {
0000000000000000000000000000000000000000;;				parsedKey = cert.PublicKey
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var pkey *ecdsa.PublicKey
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;		if pkey, ok = parsedKey.(*ecdsa.PublicKey); !ok {
0000000000000000000000000000000000000000;;			return nil, ErrNotECPublicKey
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pkey, nil
0000000000000000000000000000000000000000;;	}
