0000000000000000000000000000000000000000;;	package jwt
60d7e7a19c23729a8887eaae029559136e0e6b02;Godeps/_workspace/src/github.com/dgrijalva/jwt-go/errors.go[Godeps/_workspace/src/github.com/dgrijalva/jwt-go/errors.go][vendor/github.com/dgrijalva/jwt-go/errors.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error constants
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrInvalidKey      = errors.New("key is invalid")
0000000000000000000000000000000000000000;;		ErrInvalidKeyType  = errors.New("key is of invalid type")
0000000000000000000000000000000000000000;;		ErrHashUnavailable = errors.New("the requested hash function is unavailable")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The errors that might occur when parsing and validating a token
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ValidationErrorMalformed        uint32 = 1 << iota // Token is malformed
0000000000000000000000000000000000000000;;		ValidationErrorUnverifiable                        // Token could not be verified because of signing problems
0000000000000000000000000000000000000000;;		ValidationErrorSignatureInvalid                    // Signature validation failed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Standard Claim validation errors
0000000000000000000000000000000000000000;;		ValidationErrorAudience      // AUD validation failed
0000000000000000000000000000000000000000;;		ValidationErrorExpired       // EXP validation failed
0000000000000000000000000000000000000000;;		ValidationErrorIssuedAt      // IAT validation failed
0000000000000000000000000000000000000000;;		ValidationErrorIssuer        // ISS validation failed
0000000000000000000000000000000000000000;;		ValidationErrorNotValidYet   // NBF validation failed
0000000000000000000000000000000000000000;;		ValidationErrorId            // JTI validation failed
0000000000000000000000000000000000000000;;		ValidationErrorClaimsInvalid // Generic claims validation error
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Helper for constructing a ValidationError with a string error message
0000000000000000000000000000000000000000;;	func NewValidationError(errorText string, errorFlags uint32) *ValidationError {
0000000000000000000000000000000000000000;;		return &ValidationError{
0000000000000000000000000000000000000000;;			text:   errorText,
0000000000000000000000000000000000000000;;			Errors: errorFlags,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The error from Parse if token is not valid
0000000000000000000000000000000000000000;;	type ValidationError struct {
0000000000000000000000000000000000000000;;		Inner  error  // stores the error returned by external dependencies, i.e.: KeyFunc
0000000000000000000000000000000000000000;;		Errors uint32 // bitfield.  see ValidationError... constants
0000000000000000000000000000000000000000;;		text   string // errors that do not have a valid error just have text
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validation error is an error type
0000000000000000000000000000000000000000;;	func (e ValidationError) Error() string {
0000000000000000000000000000000000000000;;		if e.Inner != nil {
0000000000000000000000000000000000000000;;			return e.Inner.Error()
0000000000000000000000000000000000000000;;		} else if e.text != "" {
0000000000000000000000000000000000000000;;			return e.text
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return "token is invalid"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.Inner.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// No errors
0000000000000000000000000000000000000000;;	func (e *ValidationError) valid() bool {
0000000000000000000000000000000000000000;;		if e.Errors > 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
