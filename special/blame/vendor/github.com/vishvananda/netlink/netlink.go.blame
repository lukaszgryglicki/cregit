0000000000000000000000000000000000000000;;	// Package netlink provides a simple library for netlink. Netlink is
0000000000000000000000000000000000000000;;	// the interface a user-space program in linux uses to communicate with
0000000000000000000000000000000000000000;;	// the kernel. It can be used to add and remove interfaces, set up ip
0000000000000000000000000000000000000000;;	// addresses and routes, and confiugre ipsec. Netlink communication
0000000000000000000000000000000000000000;;	// requires elevated privileges, so in most cases this code needs to
0000000000000000000000000000000000000000;;	// be run as root. The low level primitives for netlink are contained
0000000000000000000000000000000000000000;;	// in the nl subpackage. This package attempts to provide a high-level
0000000000000000000000000000000000000000;;	// interface that is loosly modeled on the iproute2 cli.
0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/netlink.go[Godeps/_workspace/src/github.com/vishvananda/netlink/netlink.go][vendor/github.com/vishvananda/netlink/netlink.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vishvananda/netlink/nl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Family type definitions
0000000000000000000000000000000000000000;;		FAMILY_ALL = nl.FAMILY_ALL
0000000000000000000000000000000000000000;;		FAMILY_V4  = nl.FAMILY_V4
0000000000000000000000000000000000000000;;		FAMILY_V6  = nl.FAMILY_V6
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseIPNet parses a string in ip/net format and returns a net.IPNet.
0000000000000000000000000000000000000000;;	// This is valuable because addresses in netlink are often IPNets and
0000000000000000000000000000000000000000;;	// ParseCIDR returns an IPNet with the IP part set to the base IP of the
0000000000000000000000000000000000000000;;	// range.
0000000000000000000000000000000000000000;;	func ParseIPNet(s string) (*net.IPNet, error) {
0000000000000000000000000000000000000000;;		ip, ipNet, err := net.ParseCIDR(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &net.IPNet{IP: ip, Mask: ipNet.Mask}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIPNet generates an IPNet from an ip address using a netmask of 32.
0000000000000000000000000000000000000000;;	func NewIPNet(ip net.IP) *net.IPNet {
0000000000000000000000000000000000000000;;		return &net.IPNet{IP: ip, Mask: net.CIDRMask(32, 32)}
0000000000000000000000000000000000000000;;	}
