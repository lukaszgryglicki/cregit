0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/route_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/route_linux.go][vendor/github.com/vishvananda/netlink/route_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vishvananda/netlink/nl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RtAttr is shared so it is in netlink_linux.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteAdd will add a route to the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip route add $route`
0000000000000000000000000000000000000000;;	func RouteAdd(route *Route) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_NEWROUTE, syscall.NLM_F_CREATE|syscall.NLM_F_EXCL|syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;		return routeHandle(route, req, nl.NewRtMsg())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteAdd will delete a route from the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip route del $route`
0000000000000000000000000000000000000000;;	func RouteDel(route *Route) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_DELROUTE, syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;		return routeHandle(route, req, nl.NewRtDelMsg())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func routeHandle(route *Route, req *nl.NetlinkRequest, msg *nl.RtMsg) error {
0000000000000000000000000000000000000000;;		if (route.Dst == nil || route.Dst.IP == nil) && route.Src == nil && route.Gw == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("one of Dst.IP, Src, or Gw must not be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg.Scope = uint8(route.Scope)
0000000000000000000000000000000000000000;;		family := -1
0000000000000000000000000000000000000000;;		var rtAttrs []*nl.RtAttr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if route.Dst != nil && route.Dst.IP != nil {
0000000000000000000000000000000000000000;;			dstLen, _ := route.Dst.Mask.Size()
0000000000000000000000000000000000000000;;			msg.Dst_len = uint8(dstLen)
0000000000000000000000000000000000000000;;			dstFamily := nl.GetIPFamily(route.Dst.IP)
0000000000000000000000000000000000000000;;			family = dstFamily
0000000000000000000000000000000000000000;;			var dstData []byte
0000000000000000000000000000000000000000;;			if dstFamily == FAMILY_V4 {
0000000000000000000000000000000000000000;;				dstData = route.Dst.IP.To4()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				dstData = route.Dst.IP.To16()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rtAttrs = append(rtAttrs, nl.NewRtAttr(syscall.RTA_DST, dstData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if route.Src != nil {
0000000000000000000000000000000000000000;;			srcFamily := nl.GetIPFamily(route.Src)
0000000000000000000000000000000000000000;;			if family != -1 && family != srcFamily {
0000000000000000000000000000000000000000;;				return fmt.Errorf("source and destination ip are not the same IP family")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			family = srcFamily
0000000000000000000000000000000000000000;;			var srcData []byte
0000000000000000000000000000000000000000;;			if srcFamily == FAMILY_V4 {
0000000000000000000000000000000000000000;;				srcData = route.Src.To4()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				srcData = route.Src.To16()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// The commonly used src ip for routes is actually PREFSRC
0000000000000000000000000000000000000000;;			rtAttrs = append(rtAttrs, nl.NewRtAttr(syscall.RTA_PREFSRC, srcData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if route.Gw != nil {
0000000000000000000000000000000000000000;;			gwFamily := nl.GetIPFamily(route.Gw)
0000000000000000000000000000000000000000;;			if family != -1 && family != gwFamily {
0000000000000000000000000000000000000000;;				return fmt.Errorf("gateway, source, and destination ip are not the same IP family")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			family = gwFamily
0000000000000000000000000000000000000000;;			var gwData []byte
0000000000000000000000000000000000000000;;			if gwFamily == FAMILY_V4 {
0000000000000000000000000000000000000000;;				gwData = route.Gw.To4()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				gwData = route.Gw.To16()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rtAttrs = append(rtAttrs, nl.NewRtAttr(syscall.RTA_GATEWAY, gwData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg.Family = uint8(family)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;		for _, attr := range rtAttrs {
0000000000000000000000000000000000000000;;			req.AddData(attr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			b      = make([]byte, 4)
0000000000000000000000000000000000000000;;			native = nl.NativeEndian()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		native.PutUint32(b, uint32(route.LinkIndex))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req.AddData(nl.NewRtAttr(syscall.RTA_OIF, b))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := req.Execute(syscall.NETLINK_ROUTE, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteList gets a list of routes in the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip route show`.
0000000000000000000000000000000000000000;;	// The list can be filtered by link and ip family.
0000000000000000000000000000000000000000;;	func RouteList(link Link, family int) ([]Route, error) {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_GETROUTE, syscall.NLM_F_DUMP)
0000000000000000000000000000000000000000;;		msg := nl.NewIfInfomsg(family)
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msgs, err := req.Execute(syscall.NETLINK_ROUTE, syscall.RTM_NEWROUTE)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		index := 0
0000000000000000000000000000000000000000;;		if link != nil {
0000000000000000000000000000000000000000;;			base := link.Attrs()
0000000000000000000000000000000000000000;;			ensureIndex(base)
0000000000000000000000000000000000000000;;			index = base.Index
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		native := nl.NativeEndian()
0000000000000000000000000000000000000000;;		var res []Route
0000000000000000000000000000000000000000;;	MsgLoop:
0000000000000000000000000000000000000000;;		for _, m := range msgs {
0000000000000000000000000000000000000000;;			msg := nl.DeserializeRtMsg(m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if msg.Flags&syscall.RTM_F_CLONED != 0 {
0000000000000000000000000000000000000000;;				// Ignore cloned routes
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if msg.Table != syscall.RT_TABLE_MAIN {
0000000000000000000000000000000000000000;;				// Ignore non-main tables
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			attrs, err := nl.ParseRouteAttr(m[msg.Len():])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			route := Route{Scope: Scope(msg.Scope)}
0000000000000000000000000000000000000000;;			for _, attr := range attrs {
0000000000000000000000000000000000000000;;				switch attr.Attr.Type {
0000000000000000000000000000000000000000;;				case syscall.RTA_GATEWAY:
0000000000000000000000000000000000000000;;					route.Gw = net.IP(attr.Value)
0000000000000000000000000000000000000000;;				case syscall.RTA_PREFSRC:
0000000000000000000000000000000000000000;;					route.Src = net.IP(attr.Value)
0000000000000000000000000000000000000000;;				case syscall.RTA_DST:
0000000000000000000000000000000000000000;;					route.Dst = &net.IPNet{
0000000000000000000000000000000000000000;;						IP:   attr.Value,
0000000000000000000000000000000000000000;;						Mask: net.CIDRMask(int(msg.Dst_len), 8*len(attr.Value)),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case syscall.RTA_OIF:
0000000000000000000000000000000000000000;;					routeIndex := int(native.Uint32(attr.Value[0:4]))
0000000000000000000000000000000000000000;;					if link != nil && routeIndex != index {
0000000000000000000000000000000000000000;;						// Ignore routes from other interfaces
0000000000000000000000000000000000000000;;						continue MsgLoop
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					route.LinkIndex = routeIndex
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			res = append(res, route)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteGet gets a route to a specific destination from the host system.
0000000000000000000000000000000000000000;;	// Equivalent to: 'ip route get'.
0000000000000000000000000000000000000000;;	func RouteGet(destination net.IP) ([]Route, error) {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_GETROUTE, syscall.NLM_F_REQUEST)
0000000000000000000000000000000000000000;;		family := nl.GetIPFamily(destination)
0000000000000000000000000000000000000000;;		var destinationData []byte
0000000000000000000000000000000000000000;;		var bitlen uint8
0000000000000000000000000000000000000000;;		if family == FAMILY_V4 {
0000000000000000000000000000000000000000;;			destinationData = destination.To4()
0000000000000000000000000000000000000000;;			bitlen = 32
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			destinationData = destination.To16()
0000000000000000000000000000000000000000;;			bitlen = 128
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		msg := &nl.RtMsg{}
0000000000000000000000000000000000000000;;		msg.Family = uint8(family)
0000000000000000000000000000000000000000;;		msg.Dst_len = bitlen
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rtaDst := nl.NewRtAttr(syscall.RTA_DST, destinationData)
0000000000000000000000000000000000000000;;		req.AddData(rtaDst)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msgs, err := req.Execute(syscall.NETLINK_ROUTE, syscall.RTM_NEWROUTE)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		native := nl.NativeEndian()
0000000000000000000000000000000000000000;;		var res []Route
0000000000000000000000000000000000000000;;		for _, m := range msgs {
0000000000000000000000000000000000000000;;			msg := nl.DeserializeRtMsg(m)
0000000000000000000000000000000000000000;;			attrs, err := nl.ParseRouteAttr(m[msg.Len():])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			route := Route{}
0000000000000000000000000000000000000000;;			for _, attr := range attrs {
0000000000000000000000000000000000000000;;				switch attr.Attr.Type {
0000000000000000000000000000000000000000;;				case syscall.RTA_GATEWAY:
0000000000000000000000000000000000000000;;					route.Gw = net.IP(attr.Value)
0000000000000000000000000000000000000000;;				case syscall.RTA_PREFSRC:
0000000000000000000000000000000000000000;;					route.Src = net.IP(attr.Value)
0000000000000000000000000000000000000000;;				case syscall.RTA_DST:
0000000000000000000000000000000000000000;;					route.Dst = &net.IPNet{
0000000000000000000000000000000000000000;;						IP:   attr.Value,
0000000000000000000000000000000000000000;;						Mask: net.CIDRMask(int(msg.Dst_len), 8*len(attr.Value)),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case syscall.RTA_OIF:
0000000000000000000000000000000000000000;;					routeIndex := int(native.Uint32(attr.Value[0:4]))
0000000000000000000000000000000000000000;;					route.LinkIndex = routeIndex
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			res = append(res, route)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
