0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/link.go[Godeps/_workspace/src/github.com/vishvananda/netlink/link.go][vendor/github.com/vishvananda/netlink/link.go];	
0000000000000000000000000000000000000000;;	import "net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Link represents a link device from netlink. Shared link attributes
0000000000000000000000000000000000000000;;	// like name may be retrieved using the Attrs() method. Unique data
0000000000000000000000000000000000000000;;	// can be retrieved by casting the object to the proper type.
0000000000000000000000000000000000000000;;	type Link interface {
0000000000000000000000000000000000000000;;		Attrs() *LinkAttrs
0000000000000000000000000000000000000000;;		Type() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		NsPid int
0000000000000000000000000000000000000000;;		NsFd  int
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LinkAttrs represents data shared by most link types
0000000000000000000000000000000000000000;;	type LinkAttrs struct {
0000000000000000000000000000000000000000;;		Index        int
0000000000000000000000000000000000000000;;		MTU          int
0000000000000000000000000000000000000000;;		TxQLen       int // Transmit Queue Length
0000000000000000000000000000000000000000;;		Name         string
0000000000000000000000000000000000000000;;		HardwareAddr net.HardwareAddr
0000000000000000000000000000000000000000;;		Flags        net.Flags
0000000000000000000000000000000000000000;;		ParentIndex  int         // index of the parent link device
0000000000000000000000000000000000000000;;		MasterIndex  int         // must be the index of a bridge
0000000000000000000000000000000000000000;;		Namespace    interface{} // nil | NsPid | NsFd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLinkAttrs returns LinkAttrs structure filled with default values
0000000000000000000000000000000000000000;;	func NewLinkAttrs() LinkAttrs {
0000000000000000000000000000000000000000;;		return LinkAttrs{
0000000000000000000000000000000000000000;;			TxQLen: -1,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Device links cannot be created via netlink. These links
0000000000000000000000000000000000000000;;	// are links created by udev like 'lo' and 'etho0'
0000000000000000000000000000000000000000;;	type Device struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (device *Device) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &device.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (device *Device) Type() string {
0000000000000000000000000000000000000000;;		return "device"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dummy links are dummy ethernet devices
0000000000000000000000000000000000000000;;	type Dummy struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dummy *Dummy) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &dummy.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dummy *Dummy) Type() string {
0000000000000000000000000000000000000000;;		return "dummy"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ifb links are advanced dummy devices for packet filtering
0000000000000000000000000000000000000000;;	type Ifb struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ifb *Ifb) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &ifb.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ifb *Ifb) Type() string {
0000000000000000000000000000000000000000;;		return "ifb"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bridge links are simple linux bridges
0000000000000000000000000000000000000000;;	type Bridge struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (bridge *Bridge) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &bridge.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (bridge *Bridge) Type() string {
0000000000000000000000000000000000000000;;		return "bridge"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Vlan links have ParentIndex set in their Attrs()
0000000000000000000000000000000000000000;;	type Vlan struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;		VlanId int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (vlan *Vlan) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &vlan.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (vlan *Vlan) Type() string {
0000000000000000000000000000000000000000;;		return "vlan"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MacvlanMode uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		MACVLAN_MODE_DEFAULT MacvlanMode = iota
0000000000000000000000000000000000000000;;		MACVLAN_MODE_PRIVATE
0000000000000000000000000000000000000000;;		MACVLAN_MODE_VEPA
0000000000000000000000000000000000000000;;		MACVLAN_MODE_BRIDGE
0000000000000000000000000000000000000000;;		MACVLAN_MODE_PASSTHRU
0000000000000000000000000000000000000000;;		MACVLAN_MODE_SOURCE
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Macvlan links have ParentIndex set in their Attrs()
0000000000000000000000000000000000000000;;	type Macvlan struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;		Mode MacvlanMode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (macvlan *Macvlan) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &macvlan.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (macvlan *Macvlan) Type() string {
0000000000000000000000000000000000000000;;		return "macvlan"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Macvtap - macvtap is a virtual interfaces based on macvlan
0000000000000000000000000000000000000000;;	type Macvtap struct {
0000000000000000000000000000000000000000;;		Macvlan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (macvtap Macvtap) Type() string {
0000000000000000000000000000000000000000;;		return "macvtap"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Veth devices must specify PeerName on create
0000000000000000000000000000000000000000;;	type Veth struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;		PeerName string // veth on create only
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (veth *Veth) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &veth.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (veth *Veth) Type() string {
0000000000000000000000000000000000000000;;		return "veth"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenericLink links represent types that are not currently understood
0000000000000000000000000000000000000000;;	// by this netlink library.
0000000000000000000000000000000000000000;;	type GenericLink struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;		LinkType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (generic *GenericLink) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &generic.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (generic *GenericLink) Type() string {
0000000000000000000000000000000000000000;;		return generic.LinkType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Vxlan struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;		VxlanId      int
0000000000000000000000000000000000000000;;		VtepDevIndex int
0000000000000000000000000000000000000000;;		SrcAddr      net.IP
0000000000000000000000000000000000000000;;		Group        net.IP
0000000000000000000000000000000000000000;;		TTL          int
0000000000000000000000000000000000000000;;		TOS          int
0000000000000000000000000000000000000000;;		Learning     bool
0000000000000000000000000000000000000000;;		Proxy        bool
0000000000000000000000000000000000000000;;		RSC          bool
0000000000000000000000000000000000000000;;		L2miss       bool
0000000000000000000000000000000000000000;;		L3miss       bool
0000000000000000000000000000000000000000;;		NoAge        bool
0000000000000000000000000000000000000000;;		GBP          bool
0000000000000000000000000000000000000000;;		Age          int
0000000000000000000000000000000000000000;;		Limit        int
0000000000000000000000000000000000000000;;		Port         int
0000000000000000000000000000000000000000;;		PortLow      int
0000000000000000000000000000000000000000;;		PortHigh     int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (vxlan *Vxlan) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &vxlan.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (vxlan *Vxlan) Type() string {
0000000000000000000000000000000000000000;;		return "vxlan"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPVlanMode uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IPVLAN_MODE_L2 IPVlanMode = iota
0000000000000000000000000000000000000000;;		IPVLAN_MODE_L3
0000000000000000000000000000000000000000;;		IPVLAN_MODE_MAX
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPVlan struct {
0000000000000000000000000000000000000000;;		LinkAttrs
0000000000000000000000000000000000000000;;		Mode IPVlanMode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ipvlan *IPVlan) Attrs() *LinkAttrs {
0000000000000000000000000000000000000000;;		return &ipvlan.LinkAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ipvlan *IPVlan) Type() string {
0000000000000000000000000000000000000000;;		return "ipvlan"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// iproute2 supported devices;
0000000000000000000000000000000000000000;;	// vlan | veth | vcan | dummy | ifb | macvlan | macvtap |
0000000000000000000000000000000000000000;;	// bridge | bond | ipoib | ip6tnl | ipip | sit | vxlan |
0000000000000000000000000000000000000000;;	// gre | gretap | ip6gre | ip6gretap | vti | nlmon |
0000000000000000000000000000000000000000;;	// bond_slave | ipvlan
