0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/xfrm_policy.go[Godeps/_workspace/src/github.com/vishvananda/netlink/xfrm_policy.go][vendor/github.com/vishvananda/netlink/xfrm_policy.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dir is an enum representing an ipsec template direction.
0000000000000000000000000000000000000000;;	type Dir uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		XFRM_DIR_IN Dir = iota
0000000000000000000000000000000000000000;;		XFRM_DIR_OUT
0000000000000000000000000000000000000000;;		XFRM_DIR_FWD
0000000000000000000000000000000000000000;;		XFRM_SOCKET_IN
0000000000000000000000000000000000000000;;		XFRM_SOCKET_OUT
0000000000000000000000000000000000000000;;		XFRM_SOCKET_FWD
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Dir) String() string {
0000000000000000000000000000000000000000;;		switch d {
0000000000000000000000000000000000000000;;		case XFRM_DIR_IN:
0000000000000000000000000000000000000000;;			return "dir in"
0000000000000000000000000000000000000000;;		case XFRM_DIR_OUT:
0000000000000000000000000000000000000000;;			return "dir out"
0000000000000000000000000000000000000000;;		case XFRM_DIR_FWD:
0000000000000000000000000000000000000000;;			return "dir fwd"
0000000000000000000000000000000000000000;;		case XFRM_SOCKET_IN:
0000000000000000000000000000000000000000;;			return "socket in"
0000000000000000000000000000000000000000;;		case XFRM_SOCKET_OUT:
0000000000000000000000000000000000000000;;			return "socket out"
0000000000000000000000000000000000000000;;		case XFRM_SOCKET_FWD:
0000000000000000000000000000000000000000;;			return "socket fwd"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("socket %d", d-XFRM_SOCKET_IN)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XfrmPolicyTmpl encapsulates a rule for the base addresses of an ipsec
0000000000000000000000000000000000000000;;	// policy. These rules are matched with XfrmState to determine encryption
0000000000000000000000000000000000000000;;	// and authentication algorithms.
0000000000000000000000000000000000000000;;	type XfrmPolicyTmpl struct {
0000000000000000000000000000000000000000;;		Dst   net.IP
0000000000000000000000000000000000000000;;		Src   net.IP
0000000000000000000000000000000000000000;;		Proto Proto
0000000000000000000000000000000000000000;;		Mode  Mode
0000000000000000000000000000000000000000;;		Reqid int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XfrmPolicy represents an ipsec policy. It represents the overlay network
0000000000000000000000000000000000000000;;	// and has a list of XfrmPolicyTmpls representing the base addresses of
0000000000000000000000000000000000000000;;	// the policy.
0000000000000000000000000000000000000000;;	type XfrmPolicy struct {
0000000000000000000000000000000000000000;;		Dst      *net.IPNet
0000000000000000000000000000000000000000;;		Src      *net.IPNet
0000000000000000000000000000000000000000;;		Dir      Dir
0000000000000000000000000000000000000000;;		Priority int
0000000000000000000000000000000000000000;;		Index    int
0000000000000000000000000000000000000000;;		Tmpls    []XfrmPolicyTmpl
0000000000000000000000000000000000000000;;	}
