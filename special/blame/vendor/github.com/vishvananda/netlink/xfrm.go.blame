0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/xfrm.go[Godeps/_workspace/src/github.com/vishvananda/netlink/xfrm.go][vendor/github.com/vishvananda/netlink/xfrm.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Proto is an enum representing an ipsec protocol.
0000000000000000000000000000000000000000;;	type Proto uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		XFRM_PROTO_ROUTE2    Proto = syscall.IPPROTO_ROUTING
0000000000000000000000000000000000000000;;		XFRM_PROTO_ESP       Proto = syscall.IPPROTO_ESP
0000000000000000000000000000000000000000;;		XFRM_PROTO_AH        Proto = syscall.IPPROTO_AH
0000000000000000000000000000000000000000;;		XFRM_PROTO_HAO       Proto = syscall.IPPROTO_DSTOPTS
0000000000000000000000000000000000000000;;		XFRM_PROTO_COMP      Proto = syscall.IPPROTO_COMP
0000000000000000000000000000000000000000;;		XFRM_PROTO_IPSEC_ANY Proto = syscall.IPPROTO_RAW
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Proto) String() string {
0000000000000000000000000000000000000000;;		switch p {
0000000000000000000000000000000000000000;;		case XFRM_PROTO_ROUTE2:
0000000000000000000000000000000000000000;;			return "route2"
0000000000000000000000000000000000000000;;		case XFRM_PROTO_ESP:
0000000000000000000000000000000000000000;;			return "esp"
0000000000000000000000000000000000000000;;		case XFRM_PROTO_AH:
0000000000000000000000000000000000000000;;			return "ah"
0000000000000000000000000000000000000000;;		case XFRM_PROTO_HAO:
0000000000000000000000000000000000000000;;			return "hao"
0000000000000000000000000000000000000000;;		case XFRM_PROTO_COMP:
0000000000000000000000000000000000000000;;			return "comp"
0000000000000000000000000000000000000000;;		case XFRM_PROTO_IPSEC_ANY:
0000000000000000000000000000000000000000;;			return "ipsec-any"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d", p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mode is an enum representing an ipsec transport.
0000000000000000000000000000000000000000;;	type Mode uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		XFRM_MODE_TRANSPORT Mode = iota
0000000000000000000000000000000000000000;;		XFRM_MODE_TUNNEL
0000000000000000000000000000000000000000;;		XFRM_MODE_ROUTEOPTIMIZATION
0000000000000000000000000000000000000000;;		XFRM_MODE_IN_TRIGGER
0000000000000000000000000000000000000000;;		XFRM_MODE_BEET
0000000000000000000000000000000000000000;;		XFRM_MODE_MAX
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m Mode) String() string {
0000000000000000000000000000000000000000;;		switch m {
0000000000000000000000000000000000000000;;		case XFRM_MODE_TRANSPORT:
0000000000000000000000000000000000000000;;			return "transport"
0000000000000000000000000000000000000000;;		case XFRM_MODE_TUNNEL:
0000000000000000000000000000000000000000;;			return "tunnel"
0000000000000000000000000000000000000000;;		case XFRM_MODE_ROUTEOPTIMIZATION:
0000000000000000000000000000000000000000;;			return "ro"
0000000000000000000000000000000000000000;;		case XFRM_MODE_IN_TRIGGER:
0000000000000000000000000000000000000000;;			return "in_trigger"
0000000000000000000000000000000000000000;;		case XFRM_MODE_BEET:
0000000000000000000000000000000000000000;;			return "beet"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d", m)
0000000000000000000000000000000000000000;;	}
