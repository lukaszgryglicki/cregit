0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/filter_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/filter_linux.go][vendor/github.com/vishvananda/netlink/filter_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vishvananda/netlink/nl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterDel will delete a filter from the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `tc filter del $filter`
0000000000000000000000000000000000000000;;	func FilterDel(filter Filter) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_DELTFILTER, syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;		base := filter.Attrs()
0000000000000000000000000000000000000000;;		msg := &nl.TcMsg{
0000000000000000000000000000000000000000;;			Family:  nl.FAMILY_ALL,
0000000000000000000000000000000000000000;;			Ifindex: int32(base.LinkIndex),
0000000000000000000000000000000000000000;;			Handle:  base.Handle,
0000000000000000000000000000000000000000;;			Parent:  base.Parent,
0000000000000000000000000000000000000000;;			Info:    MakeHandle(base.Priority, nl.Swap16(base.Protocol)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := req.Execute(syscall.NETLINK_ROUTE, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterAdd will add a filter to the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `tc filter add $filter`
0000000000000000000000000000000000000000;;	func FilterAdd(filter Filter) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_NEWTFILTER, syscall.NLM_F_CREATE|syscall.NLM_F_EXCL|syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;		base := filter.Attrs()
0000000000000000000000000000000000000000;;		msg := &nl.TcMsg{
0000000000000000000000000000000000000000;;			Family:  nl.FAMILY_ALL,
0000000000000000000000000000000000000000;;			Ifindex: int32(base.LinkIndex),
0000000000000000000000000000000000000000;;			Handle:  base.Handle,
0000000000000000000000000000000000000000;;			Parent:  base.Parent,
0000000000000000000000000000000000000000;;			Info:    MakeHandle(base.Priority, nl.Swap16(base.Protocol)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;		req.AddData(nl.NewRtAttr(nl.TCA_KIND, nl.ZeroTerminated(filter.Type())))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options := nl.NewRtAttr(nl.TCA_OPTIONS, nil)
0000000000000000000000000000000000000000;;		if u32, ok := filter.(*U32); ok {
0000000000000000000000000000000000000000;;			// match all
0000000000000000000000000000000000000000;;			sel := nl.TcU32Sel{
0000000000000000000000000000000000000000;;				Nkeys: 1,
0000000000000000000000000000000000000000;;				Flags: nl.TC_U32_TERMINAL,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sel.Keys = append(sel.Keys, nl.TcU32Key{})
0000000000000000000000000000000000000000;;			nl.NewRtAttrChild(options, nl.TCA_U32_SEL, sel.Serialize())
0000000000000000000000000000000000000000;;			actions := nl.NewRtAttrChild(options, nl.TCA_U32_ACT, nil)
0000000000000000000000000000000000000000;;			table := nl.NewRtAttrChild(actions, nl.TCA_ACT_TAB, nil)
0000000000000000000000000000000000000000;;			nl.NewRtAttrChild(table, nl.TCA_KIND, nl.ZeroTerminated("mirred"))
0000000000000000000000000000000000000000;;			// redirect to other interface
0000000000000000000000000000000000000000;;			mir := nl.TcMirred{
0000000000000000000000000000000000000000;;				Action:  nl.TC_ACT_STOLEN,
0000000000000000000000000000000000000000;;				Eaction: nl.TCA_EGRESS_REDIR,
0000000000000000000000000000000000000000;;				Ifindex: uint32(u32.RedirIndex),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			aopts := nl.NewRtAttrChild(table, nl.TCA_OPTIONS, nil)
0000000000000000000000000000000000000000;;			nl.NewRtAttrChild(aopts, nl.TCA_MIRRED_PARMS, mir.Serialize())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.AddData(options)
0000000000000000000000000000000000000000;;		_, err := req.Execute(syscall.NETLINK_ROUTE, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterList gets a list of filters in the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `tc filter show`.
0000000000000000000000000000000000000000;;	// Generally retunrs nothing if link and parent are not specified.
0000000000000000000000000000000000000000;;	func FilterList(link Link, parent uint32) ([]Filter, error) {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_GETTFILTER, syscall.NLM_F_DUMP)
0000000000000000000000000000000000000000;;		msg := &nl.TcMsg{
0000000000000000000000000000000000000000;;			Family: nl.FAMILY_ALL,
0000000000000000000000000000000000000000;;			Parent: parent,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if link != nil {
0000000000000000000000000000000000000000;;			base := link.Attrs()
0000000000000000000000000000000000000000;;			ensureIndex(base)
0000000000000000000000000000000000000000;;			msg.Ifindex = int32(base.Index)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msgs, err := req.Execute(syscall.NETLINK_ROUTE, syscall.RTM_NEWTFILTER)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var res []Filter
0000000000000000000000000000000000000000;;		for _, m := range msgs {
0000000000000000000000000000000000000000;;			msg := nl.DeserializeTcMsg(m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			attrs, err := nl.ParseRouteAttr(m[msg.Len():])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			base := FilterAttrs{
0000000000000000000000000000000000000000;;				LinkIndex: int(msg.Ifindex),
0000000000000000000000000000000000000000;;				Handle:    msg.Handle,
0000000000000000000000000000000000000000;;				Parent:    msg.Parent,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			base.Priority, base.Protocol = MajorMinor(msg.Info)
0000000000000000000000000000000000000000;;			base.Protocol = nl.Swap16(base.Protocol)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var filter Filter
0000000000000000000000000000000000000000;;			filterType := ""
0000000000000000000000000000000000000000;;			detailed := false
0000000000000000000000000000000000000000;;			for _, attr := range attrs {
0000000000000000000000000000000000000000;;				switch attr.Attr.Type {
0000000000000000000000000000000000000000;;				case nl.TCA_KIND:
0000000000000000000000000000000000000000;;					filterType = string(attr.Value[:len(attr.Value)-1])
0000000000000000000000000000000000000000;;					switch filterType {
0000000000000000000000000000000000000000;;					case "u32":
0000000000000000000000000000000000000000;;						filter = &U32{}
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						filter = &GenericFilter{FilterType: filterType}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case nl.TCA_OPTIONS:
0000000000000000000000000000000000000000;;					switch filterType {
0000000000000000000000000000000000000000;;					case "u32":
0000000000000000000000000000000000000000;;						data, err := nl.ParseRouteAttr(attr.Value)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							return nil, err
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						detailed, err = parseU32Data(filter, data)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							return nil, err
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// only return the detailed version of the filter
0000000000000000000000000000000000000000;;			if detailed {
0000000000000000000000000000000000000000;;				*filter.Attrs() = base
0000000000000000000000000000000000000000;;				res = append(res, filter)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseU32Data(filter Filter, data []syscall.NetlinkRouteAttr) (bool, error) {
0000000000000000000000000000000000000000;;		native = nl.NativeEndian()
0000000000000000000000000000000000000000;;		u32 := filter.(*U32)
0000000000000000000000000000000000000000;;		detailed := false
0000000000000000000000000000000000000000;;		for _, datum := range data {
0000000000000000000000000000000000000000;;			switch datum.Attr.Type {
0000000000000000000000000000000000000000;;			case nl.TCA_U32_SEL:
0000000000000000000000000000000000000000;;				detailed = true
0000000000000000000000000000000000000000;;				sel := nl.DeserializeTcU32Sel(datum.Value)
0000000000000000000000000000000000000000;;				// only parse if we have a very basic redirect
0000000000000000000000000000000000000000;;				if sel.Flags&nl.TC_U32_TERMINAL == 0 || sel.Nkeys != 1 {
0000000000000000000000000000000000000000;;					return detailed, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case nl.TCA_U32_ACT:
0000000000000000000000000000000000000000;;				table, err := nl.ParseRouteAttr(datum.Value)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return detailed, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(table) != 1 || table[0].Attr.Type != nl.TCA_ACT_TAB {
0000000000000000000000000000000000000000;;					return detailed, fmt.Errorf("Action table not formed properly")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				aattrs, err := nl.ParseRouteAttr(table[0].Value)
0000000000000000000000000000000000000000;;				for _, aattr := range aattrs {
0000000000000000000000000000000000000000;;					switch aattr.Attr.Type {
0000000000000000000000000000000000000000;;					case nl.TCA_KIND:
0000000000000000000000000000000000000000;;						actionType := string(aattr.Value[:len(aattr.Value)-1])
0000000000000000000000000000000000000000;;						// only parse if the action is mirred
0000000000000000000000000000000000000000;;						if actionType != "mirred" {
0000000000000000000000000000000000000000;;							return detailed, nil
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case nl.TCA_OPTIONS:
0000000000000000000000000000000000000000;;						adata, err := nl.ParseRouteAttr(aattr.Value)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							return detailed, err
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						for _, adatum := range adata {
0000000000000000000000000000000000000000;;							switch adatum.Attr.Type {
0000000000000000000000000000000000000000;;							case nl.TCA_MIRRED_PARMS:
0000000000000000000000000000000000000000;;								mir := nl.DeserializeTcMirred(adatum.Value)
0000000000000000000000000000000000000000;;								u32.RedirIndex = int(mir.Ifindex)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return detailed, nil
0000000000000000000000000000000000000000;;	}
