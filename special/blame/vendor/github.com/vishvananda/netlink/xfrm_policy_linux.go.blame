0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/xfrm_policy_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/xfrm_policy_linux.go][vendor/github.com/vishvananda/netlink/xfrm_policy_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vishvananda/netlink/nl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func selFromPolicy(sel *nl.XfrmSelector, policy *XfrmPolicy) {
0000000000000000000000000000000000000000;;		sel.Family = uint16(nl.GetIPFamily(policy.Dst.IP))
0000000000000000000000000000000000000000;;		sel.Daddr.FromIP(policy.Dst.IP)
0000000000000000000000000000000000000000;;		sel.Saddr.FromIP(policy.Src.IP)
0000000000000000000000000000000000000000;;		prefixlenD, _ := policy.Dst.Mask.Size()
0000000000000000000000000000000000000000;;		sel.PrefixlenD = uint8(prefixlenD)
0000000000000000000000000000000000000000;;		prefixlenS, _ := policy.Src.Mask.Size()
0000000000000000000000000000000000000000;;		sel.PrefixlenS = uint8(prefixlenS)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XfrmPolicyAdd will add an xfrm policy to the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip xfrm policy add $policy`
0000000000000000000000000000000000000000;;	func XfrmPolicyAdd(policy *XfrmPolicy) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(nl.XFRM_MSG_NEWPOLICY, syscall.NLM_F_CREATE|syscall.NLM_F_EXCL|syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := &nl.XfrmUserpolicyInfo{}
0000000000000000000000000000000000000000;;		selFromPolicy(&msg.Sel, policy)
0000000000000000000000000000000000000000;;		msg.Priority = uint32(policy.Priority)
0000000000000000000000000000000000000000;;		msg.Index = uint32(policy.Index)
0000000000000000000000000000000000000000;;		msg.Dir = uint8(policy.Dir)
0000000000000000000000000000000000000000;;		msg.Lft.SoftByteLimit = nl.XFRM_INF
0000000000000000000000000000000000000000;;		msg.Lft.HardByteLimit = nl.XFRM_INF
0000000000000000000000000000000000000000;;		msg.Lft.SoftPacketLimit = nl.XFRM_INF
0000000000000000000000000000000000000000;;		msg.Lft.HardPacketLimit = nl.XFRM_INF
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tmplData := make([]byte, nl.SizeofXfrmUserTmpl*len(policy.Tmpls))
0000000000000000000000000000000000000000;;		for i, tmpl := range policy.Tmpls {
0000000000000000000000000000000000000000;;			start := i * nl.SizeofXfrmUserTmpl
0000000000000000000000000000000000000000;;			userTmpl := nl.DeserializeXfrmUserTmpl(tmplData[start : start+nl.SizeofXfrmUserTmpl])
0000000000000000000000000000000000000000;;			userTmpl.XfrmId.Daddr.FromIP(tmpl.Dst)
0000000000000000000000000000000000000000;;			userTmpl.Saddr.FromIP(tmpl.Src)
0000000000000000000000000000000000000000;;			userTmpl.XfrmId.Proto = uint8(tmpl.Proto)
0000000000000000000000000000000000000000;;			userTmpl.Mode = uint8(tmpl.Mode)
0000000000000000000000000000000000000000;;			userTmpl.Reqid = uint32(tmpl.Reqid)
0000000000000000000000000000000000000000;;			userTmpl.Aalgos = ^uint32(0)
0000000000000000000000000000000000000000;;			userTmpl.Ealgos = ^uint32(0)
0000000000000000000000000000000000000000;;			userTmpl.Calgos = ^uint32(0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(tmplData) > 0 {
0000000000000000000000000000000000000000;;			tmpls := nl.NewRtAttr(nl.XFRMA_TMPL, tmplData)
0000000000000000000000000000000000000000;;			req.AddData(tmpls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := req.Execute(syscall.NETLINK_XFRM, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XfrmPolicyDel will delete an xfrm policy from the system. Note that
0000000000000000000000000000000000000000;;	// the Tmpls are ignored when matching the policy to delete.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip xfrm policy del $policy`
0000000000000000000000000000000000000000;;	func XfrmPolicyDel(policy *XfrmPolicy) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(nl.XFRM_MSG_DELPOLICY, syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := &nl.XfrmUserpolicyId{}
0000000000000000000000000000000000000000;;		selFromPolicy(&msg.Sel, policy)
0000000000000000000000000000000000000000;;		msg.Index = uint32(policy.Index)
0000000000000000000000000000000000000000;;		msg.Dir = uint8(policy.Dir)
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := req.Execute(syscall.NETLINK_XFRM, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XfrmPolicyList gets a list of xfrm policies in the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip xfrm policy show`.
0000000000000000000000000000000000000000;;	// The list can be filtered by ip family.
0000000000000000000000000000000000000000;;	func XfrmPolicyList(family int) ([]XfrmPolicy, error) {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(nl.XFRM_MSG_GETPOLICY, syscall.NLM_F_DUMP)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := nl.NewIfInfomsg(family)
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msgs, err := req.Execute(syscall.NETLINK_XFRM, nl.XFRM_MSG_NEWPOLICY)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var res []XfrmPolicy
0000000000000000000000000000000000000000;;		for _, m := range msgs {
0000000000000000000000000000000000000000;;			msg := nl.DeserializeXfrmUserpolicyInfo(m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if family != FAMILY_ALL && family != int(msg.Sel.Family) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var policy XfrmPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			policy.Dst = msg.Sel.Daddr.ToIPNet(msg.Sel.PrefixlenD)
0000000000000000000000000000000000000000;;			policy.Src = msg.Sel.Saddr.ToIPNet(msg.Sel.PrefixlenS)
0000000000000000000000000000000000000000;;			policy.Priority = int(msg.Priority)
0000000000000000000000000000000000000000;;			policy.Index = int(msg.Index)
0000000000000000000000000000000000000000;;			policy.Dir = Dir(msg.Dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			attrs, err := nl.ParseRouteAttr(m[msg.Len():])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, attr := range attrs {
0000000000000000000000000000000000000000;;				switch attr.Attr.Type {
0000000000000000000000000000000000000000;;				case nl.XFRMA_TMPL:
0000000000000000000000000000000000000000;;					max := len(attr.Value)
0000000000000000000000000000000000000000;;					for i := 0; i < max; i += nl.SizeofXfrmUserTmpl {
0000000000000000000000000000000000000000;;						var resTmpl XfrmPolicyTmpl
0000000000000000000000000000000000000000;;						tmpl := nl.DeserializeXfrmUserTmpl(attr.Value[i : i+nl.SizeofXfrmUserTmpl])
0000000000000000000000000000000000000000;;						resTmpl.Dst = tmpl.XfrmId.Daddr.ToIP()
0000000000000000000000000000000000000000;;						resTmpl.Src = tmpl.Saddr.ToIP()
0000000000000000000000000000000000000000;;						resTmpl.Proto = Proto(tmpl.XfrmId.Proto)
0000000000000000000000000000000000000000;;						resTmpl.Mode = Mode(tmpl.Mode)
0000000000000000000000000000000000000000;;						resTmpl.Reqid = int(tmpl.Reqid)
0000000000000000000000000000000000000000;;						policy.Tmpls = append(policy.Tmpls, resTmpl)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			res = append(res, policy)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
