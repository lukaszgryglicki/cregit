0000000000000000000000000000000000000000;;	package nl
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/nl/xfrm_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/nl/xfrm_linux.go][vendor/github.com/vishvananda/netlink/nl/xfrm_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Infinity for packet and byte counts
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		XFRM_INF = ^uint64(0)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message Types
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		XFRM_MSG_BASE        = 0x10
0000000000000000000000000000000000000000;;		XFRM_MSG_NEWSA       = 0x10
0000000000000000000000000000000000000000;;		XFRM_MSG_DELSA       = 0x11
0000000000000000000000000000000000000000;;		XFRM_MSG_GETSA       = 0x12
0000000000000000000000000000000000000000;;		XFRM_MSG_NEWPOLICY   = 0x13
0000000000000000000000000000000000000000;;		XFRM_MSG_DELPOLICY   = 0x14
0000000000000000000000000000000000000000;;		XFRM_MSG_GETPOLICY   = 0x15
0000000000000000000000000000000000000000;;		XFRM_MSG_ALLOCSPI    = 0x16
0000000000000000000000000000000000000000;;		XFRM_MSG_ACQUIRE     = 0x17
0000000000000000000000000000000000000000;;		XFRM_MSG_EXPIRE      = 0x18
0000000000000000000000000000000000000000;;		XFRM_MSG_UPDPOLICY   = 0x19
0000000000000000000000000000000000000000;;		XFRM_MSG_UPDSA       = 0x1a
0000000000000000000000000000000000000000;;		XFRM_MSG_POLEXPIRE   = 0x1b
0000000000000000000000000000000000000000;;		XFRM_MSG_FLUSHSA     = 0x1c
0000000000000000000000000000000000000000;;		XFRM_MSG_FLUSHPOLICY = 0x1d
0000000000000000000000000000000000000000;;		XFRM_MSG_NEWAE       = 0x1e
0000000000000000000000000000000000000000;;		XFRM_MSG_GETAE       = 0x1f
0000000000000000000000000000000000000000;;		XFRM_MSG_REPORT      = 0x20
0000000000000000000000000000000000000000;;		XFRM_MSG_MIGRATE     = 0x21
0000000000000000000000000000000000000000;;		XFRM_MSG_NEWSADINFO  = 0x22
0000000000000000000000000000000000000000;;		XFRM_MSG_GETSADINFO  = 0x23
0000000000000000000000000000000000000000;;		XFRM_MSG_NEWSPDINFO  = 0x24
0000000000000000000000000000000000000000;;		XFRM_MSG_GETSPDINFO  = 0x25
0000000000000000000000000000000000000000;;		XFRM_MSG_MAPPING     = 0x26
0000000000000000000000000000000000000000;;		XFRM_MSG_MAX         = 0x26
0000000000000000000000000000000000000000;;		XFRM_NR_MSGTYPES     = 0x17
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attribute types
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		/* Netlink message attributes.  */
0000000000000000000000000000000000000000;;		XFRMA_UNSPEC         = 0x00
0000000000000000000000000000000000000000;;		XFRMA_ALG_AUTH       = 0x01 /* struct xfrm_algo */
0000000000000000000000000000000000000000;;		XFRMA_ALG_CRYPT      = 0x02 /* struct xfrm_algo */
0000000000000000000000000000000000000000;;		XFRMA_ALG_COMP       = 0x03 /* struct xfrm_algo */
0000000000000000000000000000000000000000;;		XFRMA_ENCAP          = 0x04 /* struct xfrm_algo + struct xfrm_encap_tmpl */
0000000000000000000000000000000000000000;;		XFRMA_TMPL           = 0x05 /* 1 or more struct xfrm_user_tmpl */
0000000000000000000000000000000000000000;;		XFRMA_SA             = 0x06 /* struct xfrm_usersa_info  */
0000000000000000000000000000000000000000;;		XFRMA_POLICY         = 0x07 /* struct xfrm_userpolicy_info */
0000000000000000000000000000000000000000;;		XFRMA_SEC_CTX        = 0x08 /* struct xfrm_sec_ctx */
0000000000000000000000000000000000000000;;		XFRMA_LTIME_VAL      = 0x09
0000000000000000000000000000000000000000;;		XFRMA_REPLAY_VAL     = 0x0a
0000000000000000000000000000000000000000;;		XFRMA_REPLAY_THRESH  = 0x0b
0000000000000000000000000000000000000000;;		XFRMA_ETIMER_THRESH  = 0x0c
0000000000000000000000000000000000000000;;		XFRMA_SRCADDR        = 0x0d /* xfrm_address_t */
0000000000000000000000000000000000000000;;		XFRMA_COADDR         = 0x0e /* xfrm_address_t */
0000000000000000000000000000000000000000;;		XFRMA_LASTUSED       = 0x0f /* unsigned long  */
0000000000000000000000000000000000000000;;		XFRMA_POLICY_TYPE    = 0x10 /* struct xfrm_userpolicy_type */
0000000000000000000000000000000000000000;;		XFRMA_MIGRATE        = 0x11
0000000000000000000000000000000000000000;;		XFRMA_ALG_AEAD       = 0x12 /* struct xfrm_algo_aead */
0000000000000000000000000000000000000000;;		XFRMA_KMADDRESS      = 0x13 /* struct xfrm_user_kmaddress */
0000000000000000000000000000000000000000;;		XFRMA_ALG_AUTH_TRUNC = 0x14 /* struct xfrm_algo_auth */
0000000000000000000000000000000000000000;;		XFRMA_MARK           = 0x15 /* struct xfrm_mark */
0000000000000000000000000000000000000000;;		XFRMA_TFCPAD         = 0x16 /* __u32 */
0000000000000000000000000000000000000000;;		XFRMA_REPLAY_ESN_VAL = 0x17 /* struct xfrm_replay_esn */
0000000000000000000000000000000000000000;;		XFRMA_SA_EXTRA_FLAGS = 0x18 /* __u32 */
0000000000000000000000000000000000000000;;		XFRMA_MAX            = 0x18
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofXfrmAddress     = 0x10
0000000000000000000000000000000000000000;;		SizeofXfrmSelector    = 0x38
0000000000000000000000000000000000000000;;		SizeofXfrmLifetimeCfg = 0x40
0000000000000000000000000000000000000000;;		SizeofXfrmLifetimeCur = 0x20
0000000000000000000000000000000000000000;;		SizeofXfrmId          = 0x18
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// typedef union {
0000000000000000000000000000000000000000;;	//   __be32    a4;
0000000000000000000000000000000000000000;;	//   __be32    a6[4];
0000000000000000000000000000000000000000;;	// } xfrm_address_t;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmAddress [SizeofXfrmAddress]byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *XfrmAddress) ToIP() net.IP {
0000000000000000000000000000000000000000;;		var empty = [12]byte{}
0000000000000000000000000000000000000000;;		ip := make(net.IP, net.IPv6len)
0000000000000000000000000000000000000000;;		if bytes.Equal(x[4:16], empty[:]) {
0000000000000000000000000000000000000000;;			ip[10] = 0xff
0000000000000000000000000000000000000000;;			ip[11] = 0xff
0000000000000000000000000000000000000000;;			copy(ip[12:16], x[0:4])
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			copy(ip[:], x[:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ip
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *XfrmAddress) ToIPNet(prefixlen uint8) *net.IPNet {
0000000000000000000000000000000000000000;;		ip := x.ToIP()
0000000000000000000000000000000000000000;;		if GetIPFamily(ip) == FAMILY_V4 {
0000000000000000000000000000000000000000;;			return &net.IPNet{IP: ip, Mask: net.CIDRMask(int(prefixlen), 32)}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &net.IPNet{IP: ip, Mask: net.CIDRMask(int(prefixlen), 128)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *XfrmAddress) FromIP(ip net.IP) {
0000000000000000000000000000000000000000;;		var empty = [16]byte{}
0000000000000000000000000000000000000000;;		if len(ip) < net.IPv4len {
0000000000000000000000000000000000000000;;			copy(x[4:16], empty[:])
0000000000000000000000000000000000000000;;		} else if GetIPFamily(ip) == FAMILY_V4 {
0000000000000000000000000000000000000000;;			copy(x[0:4], ip.To4()[0:4])
0000000000000000000000000000000000000000;;			copy(x[4:16], empty[:12])
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			copy(x[0:16], ip.To16()[0:16])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmAddress(b []byte) *XfrmAddress {
0000000000000000000000000000000000000000;;		return (*XfrmAddress)(unsafe.Pointer(&b[0:SizeofXfrmAddress][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *XfrmAddress) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmAddress]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_selector {
0000000000000000000000000000000000000000;;	//   xfrm_address_t  daddr;
0000000000000000000000000000000000000000;;	//   xfrm_address_t  saddr;
0000000000000000000000000000000000000000;;	//   __be16  dport;
0000000000000000000000000000000000000000;;	//   __be16  dport_mask;
0000000000000000000000000000000000000000;;	//   __be16  sport;
0000000000000000000000000000000000000000;;	//   __be16  sport_mask;
0000000000000000000000000000000000000000;;	//   __u16 family;
0000000000000000000000000000000000000000;;	//   __u8  prefixlen_d;
0000000000000000000000000000000000000000;;	//   __u8  prefixlen_s;
0000000000000000000000000000000000000000;;	//   __u8  proto;
0000000000000000000000000000000000000000;;	//   int ifindex;
0000000000000000000000000000000000000000;;	//   __kernel_uid32_t  user;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmSelector struct {
0000000000000000000000000000000000000000;;		Daddr      XfrmAddress
0000000000000000000000000000000000000000;;		Saddr      XfrmAddress
0000000000000000000000000000000000000000;;		Dport      uint16 // big endian
0000000000000000000000000000000000000000;;		DportMask  uint16 // big endian
0000000000000000000000000000000000000000;;		Sport      uint16 // big endian
0000000000000000000000000000000000000000;;		SportMask  uint16 // big endian
0000000000000000000000000000000000000000;;		Family     uint16
0000000000000000000000000000000000000000;;		PrefixlenD uint8
0000000000000000000000000000000000000000;;		PrefixlenS uint8
0000000000000000000000000000000000000000;;		Proto      uint8
0000000000000000000000000000000000000000;;		Pad        [3]byte
0000000000000000000000000000000000000000;;		Ifindex    int32
0000000000000000000000000000000000000000;;		User       uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmSelector) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmSelector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmSelector(b []byte) *XfrmSelector {
0000000000000000000000000000000000000000;;		return (*XfrmSelector)(unsafe.Pointer(&b[0:SizeofXfrmSelector][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmSelector) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmSelector]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_lifetime_cfg {
0000000000000000000000000000000000000000;;	//   __u64 soft_byte_limit;
0000000000000000000000000000000000000000;;	//   __u64 hard_byte_limit;
0000000000000000000000000000000000000000;;	//   __u64 soft_packet_limit;
0000000000000000000000000000000000000000;;	//   __u64 hard_packet_limit;
0000000000000000000000000000000000000000;;	//   __u64 soft_add_expires_seconds;
0000000000000000000000000000000000000000;;	//   __u64 hard_add_expires_seconds;
0000000000000000000000000000000000000000;;	//   __u64 soft_use_expires_seconds;
0000000000000000000000000000000000000000;;	//   __u64 hard_use_expires_seconds;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmLifetimeCfg struct {
0000000000000000000000000000000000000000;;		SoftByteLimit         uint64
0000000000000000000000000000000000000000;;		HardByteLimit         uint64
0000000000000000000000000000000000000000;;		SoftPacketLimit       uint64
0000000000000000000000000000000000000000;;		HardPacketLimit       uint64
0000000000000000000000000000000000000000;;		SoftAddExpiresSeconds uint64
0000000000000000000000000000000000000000;;		HardAddExpiresSeconds uint64
0000000000000000000000000000000000000000;;		SoftUseExpiresSeconds uint64
0000000000000000000000000000000000000000;;		HardUseExpiresSeconds uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmLifetimeCfg) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmLifetimeCfg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmLifetimeCfg(b []byte) *XfrmLifetimeCfg {
0000000000000000000000000000000000000000;;		return (*XfrmLifetimeCfg)(unsafe.Pointer(&b[0:SizeofXfrmLifetimeCfg][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmLifetimeCfg) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmLifetimeCfg]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_lifetime_cur {
0000000000000000000000000000000000000000;;	//   __u64 bytes;
0000000000000000000000000000000000000000;;	//   __u64 packets;
0000000000000000000000000000000000000000;;	//   __u64 add_time;
0000000000000000000000000000000000000000;;	//   __u64 use_time;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmLifetimeCur struct {
0000000000000000000000000000000000000000;;		Bytes   uint64
0000000000000000000000000000000000000000;;		Packets uint64
0000000000000000000000000000000000000000;;		AddTime uint64
0000000000000000000000000000000000000000;;		UseTime uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmLifetimeCur) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmLifetimeCur
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmLifetimeCur(b []byte) *XfrmLifetimeCur {
0000000000000000000000000000000000000000;;		return (*XfrmLifetimeCur)(unsafe.Pointer(&b[0:SizeofXfrmLifetimeCur][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmLifetimeCur) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmLifetimeCur]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_id {
0000000000000000000000000000000000000000;;	//   xfrm_address_t  daddr;
0000000000000000000000000000000000000000;;	//   __be32    spi;
0000000000000000000000000000000000000000;;	//   __u8    proto;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmId struct {
0000000000000000000000000000000000000000;;		Daddr XfrmAddress
0000000000000000000000000000000000000000;;		Spi   uint32 // big endian
0000000000000000000000000000000000000000;;		Proto uint8
0000000000000000000000000000000000000000;;		Pad   [3]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmId) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmId
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmId(b []byte) *XfrmId {
0000000000000000000000000000000000000000;;		return (*XfrmId)(unsafe.Pointer(&b[0:SizeofXfrmId][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmId) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmId]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
