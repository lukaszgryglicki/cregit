0000000000000000000000000000000000000000;;	package nl
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/nl/tc_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/nl/tc_linux.go][vendor/github.com/vishvananda/netlink/nl/tc_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message types
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_UNSPEC = iota
0000000000000000000000000000000000000000;;		TCA_KIND
0000000000000000000000000000000000000000;;		TCA_OPTIONS
0000000000000000000000000000000000000000;;		TCA_STATS
0000000000000000000000000000000000000000;;		TCA_XSTATS
0000000000000000000000000000000000000000;;		TCA_RATE
0000000000000000000000000000000000000000;;		TCA_FCNT
0000000000000000000000000000000000000000;;		TCA_STATS2
0000000000000000000000000000000000000000;;		TCA_STAB
0000000000000000000000000000000000000000;;		TCA_MAX = TCA_STAB
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_ACT_TAB = 1
0000000000000000000000000000000000000000;;		TCAA_MAX    = 1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_PRIO_UNSPEC = iota
0000000000000000000000000000000000000000;;		TCA_PRIO_MQ
0000000000000000000000000000000000000000;;		TCA_PRIO_MAX = TCA_PRIO_MQ
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofTcMsg       = 0x14
0000000000000000000000000000000000000000;;		SizeofTcActionMsg = 0x04
0000000000000000000000000000000000000000;;		SizeofTcPrioMap   = 0x14
0000000000000000000000000000000000000000;;		SizeofTcRateSpec  = 0x0c
0000000000000000000000000000000000000000;;		SizeofTcTbfQopt   = 2*SizeofTcRateSpec + 0x0c
0000000000000000000000000000000000000000;;		SizeofTcU32Key    = 0x10
0000000000000000000000000000000000000000;;		SizeofTcU32Sel    = 0x10 // without keys
0000000000000000000000000000000000000000;;		SizeofTcMirred    = 0x1c
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tcmsg {
0000000000000000000000000000000000000000;;	//   unsigned char tcm_family;
0000000000000000000000000000000000000000;;	//   unsigned char tcm__pad1;
0000000000000000000000000000000000000000;;	//   unsigned short  tcm__pad2;
0000000000000000000000000000000000000000;;	//   int   tcm_ifindex;
0000000000000000000000000000000000000000;;	//   __u32   tcm_handle;
0000000000000000000000000000000000000000;;	//   __u32   tcm_parent;
0000000000000000000000000000000000000000;;	//   __u32   tcm_info;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcMsg struct {
0000000000000000000000000000000000000000;;		Family  uint8
0000000000000000000000000000000000000000;;		Pad     [3]byte
0000000000000000000000000000000000000000;;		Ifindex int32
0000000000000000000000000000000000000000;;		Handle  uint32
0000000000000000000000000000000000000000;;		Parent  uint32
0000000000000000000000000000000000000000;;		Info    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcMsg) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcMsg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcMsg(b []byte) *TcMsg {
0000000000000000000000000000000000000000;;		return (*TcMsg)(unsafe.Pointer(&b[0:SizeofTcMsg][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcMsg) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcMsg]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tcamsg {
0000000000000000000000000000000000000000;;	//   unsigned char tca_family;
0000000000000000000000000000000000000000;;	//   unsigned char tca__pad1;
0000000000000000000000000000000000000000;;	//   unsigned short  tca__pad2;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcActionMsg struct {
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;		Pad    [3]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcActionMsg) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcActionMsg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcActionMsg(b []byte) *TcActionMsg {
0000000000000000000000000000000000000000;;		return (*TcActionMsg)(unsafe.Pointer(&b[0:SizeofTcActionMsg][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcActionMsg) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcActionMsg]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TC_PRIO_MAX = 15
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tc_prio_qopt {
0000000000000000000000000000000000000000;;	// 	int bands;      /* Number of bands */
0000000000000000000000000000000000000000;;	// 	__u8  priomap[TC_PRIO_MAX+1]; /* Map: logical priority -> PRIO band */
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcPrioMap struct {
0000000000000000000000000000000000000000;;		Bands   int32
0000000000000000000000000000000000000000;;		Priomap [TC_PRIO_MAX + 1]uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcPrioMap) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcPrioMap
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcPrioMap(b []byte) *TcPrioMap {
0000000000000000000000000000000000000000;;		return (*TcPrioMap)(unsafe.Pointer(&b[0:SizeofTcPrioMap][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcPrioMap) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcPrioMap]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_TBF_UNSPEC = iota
0000000000000000000000000000000000000000;;		TCA_TBF_PARMS
0000000000000000000000000000000000000000;;		TCA_TBF_RTAB
0000000000000000000000000000000000000000;;		TCA_TBF_PTAB
0000000000000000000000000000000000000000;;		TCA_TBF_RATE64
0000000000000000000000000000000000000000;;		TCA_TBF_PRATE64
0000000000000000000000000000000000000000;;		TCA_TBF_BURST
0000000000000000000000000000000000000000;;		TCA_TBF_PBURST
0000000000000000000000000000000000000000;;		TCA_TBF_MAX = TCA_TBF_PBURST
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tc_ratespec {
0000000000000000000000000000000000000000;;	//   unsigned char cell_log;
0000000000000000000000000000000000000000;;	//   __u8    linklayer; /* lower 4 bits */
0000000000000000000000000000000000000000;;	//   unsigned short  overhead;
0000000000000000000000000000000000000000;;	//   short   cell_align;
0000000000000000000000000000000000000000;;	//   unsigned short  mpu;
0000000000000000000000000000000000000000;;	//   __u32   rate;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcRateSpec struct {
0000000000000000000000000000000000000000;;		CellLog   uint8
0000000000000000000000000000000000000000;;		Linklayer uint8
0000000000000000000000000000000000000000;;		Overhead  uint16
0000000000000000000000000000000000000000;;		CellAlign int16
0000000000000000000000000000000000000000;;		Mpu       uint16
0000000000000000000000000000000000000000;;		Rate      uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcRateSpec) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcRateSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcRateSpec(b []byte) *TcRateSpec {
0000000000000000000000000000000000000000;;		return (*TcRateSpec)(unsafe.Pointer(&b[0:SizeofTcRateSpec][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcRateSpec) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcRateSpec]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tc_tbf_qopt {
0000000000000000000000000000000000000000;;	//   struct tc_ratespec rate;
0000000000000000000000000000000000000000;;	//   struct tc_ratespec peakrate;
0000000000000000000000000000000000000000;;	//   __u32   limit;
0000000000000000000000000000000000000000;;	//   __u32   buffer;
0000000000000000000000000000000000000000;;	//   __u32   mtu;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcTbfQopt struct {
0000000000000000000000000000000000000000;;		Rate     TcRateSpec
0000000000000000000000000000000000000000;;		Peakrate TcRateSpec
0000000000000000000000000000000000000000;;		Limit    uint32
0000000000000000000000000000000000000000;;		Buffer   uint32
0000000000000000000000000000000000000000;;		Mtu      uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcTbfQopt) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcTbfQopt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcTbfQopt(b []byte) *TcTbfQopt {
0000000000000000000000000000000000000000;;		return (*TcTbfQopt)(unsafe.Pointer(&b[0:SizeofTcTbfQopt][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcTbfQopt) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcTbfQopt]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_U32_UNSPEC = iota
0000000000000000000000000000000000000000;;		TCA_U32_CLASSID
0000000000000000000000000000000000000000;;		TCA_U32_HASH
0000000000000000000000000000000000000000;;		TCA_U32_LINK
0000000000000000000000000000000000000000;;		TCA_U32_DIVISOR
0000000000000000000000000000000000000000;;		TCA_U32_SEL
0000000000000000000000000000000000000000;;		TCA_U32_POLICE
0000000000000000000000000000000000000000;;		TCA_U32_ACT
0000000000000000000000000000000000000000;;		TCA_U32_INDEV
0000000000000000000000000000000000000000;;		TCA_U32_PCNT
0000000000000000000000000000000000000000;;		TCA_U32_MARK
0000000000000000000000000000000000000000;;		TCA_U32_MAX = TCA_U32_MARK
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tc_u32_key {
0000000000000000000000000000000000000000;;	//   __be32    mask;
0000000000000000000000000000000000000000;;	//   __be32    val;
0000000000000000000000000000000000000000;;	//   int   off;
0000000000000000000000000000000000000000;;	//   int   offmask;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcU32Key struct {
0000000000000000000000000000000000000000;;		Mask    uint32 // big endian
0000000000000000000000000000000000000000;;		Val     uint32 // big endian
0000000000000000000000000000000000000000;;		Off     int32
0000000000000000000000000000000000000000;;		OffMask int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcU32Key) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcU32Key
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcU32Key(b []byte) *TcU32Key {
0000000000000000000000000000000000000000;;		return (*TcU32Key)(unsafe.Pointer(&b[0:SizeofTcU32Key][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcU32Key) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcU32Key]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct tc_u32_sel {
0000000000000000000000000000000000000000;;	//   unsigned char   flags;
0000000000000000000000000000000000000000;;	//   unsigned char   offshift;
0000000000000000000000000000000000000000;;	//   unsigned char   nkeys;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   __be16      offmask;
0000000000000000000000000000000000000000;;	//   __u16     off;
0000000000000000000000000000000000000000;;	//   short     offoff;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   short     hoff;
0000000000000000000000000000000000000000;;	//   __be32      hmask;
0000000000000000000000000000000000000000;;	//   struct tc_u32_key keys[0];
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TC_U32_TERMINAL  = 1 << iota
0000000000000000000000000000000000000000;;		TC_U32_OFFSET    = 1 << iota
0000000000000000000000000000000000000000;;		TC_U32_VAROFFSET = 1 << iota
0000000000000000000000000000000000000000;;		TC_U32_EAT       = 1 << iota
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcU32Sel struct {
0000000000000000000000000000000000000000;;		Flags    uint8
0000000000000000000000000000000000000000;;		Offshift uint8
0000000000000000000000000000000000000000;;		Nkeys    uint8
0000000000000000000000000000000000000000;;		Pad      uint8
0000000000000000000000000000000000000000;;		Offmask  uint16 // big endian
0000000000000000000000000000000000000000;;		Off      uint16
0000000000000000000000000000000000000000;;		Offoff   int16
0000000000000000000000000000000000000000;;		Hoff     int16
0000000000000000000000000000000000000000;;		Hmask    uint32 // big endian
0000000000000000000000000000000000000000;;		Keys     []TcU32Key
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcU32Sel) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcU32Sel + int(msg.Nkeys)*SizeofTcU32Key
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcU32Sel(b []byte) *TcU32Sel {
0000000000000000000000000000000000000000;;		x := &TcU32Sel{}
0000000000000000000000000000000000000000;;		copy((*(*[SizeofTcU32Sel]byte)(unsafe.Pointer(x)))[:], b)
0000000000000000000000000000000000000000;;		next := SizeofTcU32Sel
0000000000000000000000000000000000000000;;		var i uint8
0000000000000000000000000000000000000000;;		for i = 0; i < x.Nkeys; i++ {
0000000000000000000000000000000000000000;;			x.Keys = append(x.Keys, *DeserializeTcU32Key(b[next:]))
0000000000000000000000000000000000000000;;			next += SizeofTcU32Key
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcU32Sel) Serialize() []byte {
0000000000000000000000000000000000000000;;		// This can't just unsafe.cast because it must iterate through keys.
0000000000000000000000000000000000000000;;		buf := make([]byte, x.Len())
0000000000000000000000000000000000000000;;		copy(buf, (*(*[SizeofTcU32Sel]byte)(unsafe.Pointer(x)))[:])
0000000000000000000000000000000000000000;;		next := SizeofTcU32Sel
0000000000000000000000000000000000000000;;		for _, key := range x.Keys {
0000000000000000000000000000000000000000;;			keyBuf := key.Serialize()
0000000000000000000000000000000000000000;;			copy(buf[next:], keyBuf)
0000000000000000000000000000000000000000;;			next += SizeofTcU32Key
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_ACT_MIRRED = 8
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_MIRRED_UNSPEC = iota
0000000000000000000000000000000000000000;;		TCA_MIRRED_TM
0000000000000000000000000000000000000000;;		TCA_MIRRED_PARMS
0000000000000000000000000000000000000000;;		TCA_MIRRED_MAX = TCA_MIRRED_PARMS
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TCA_EGRESS_REDIR   = 1 /* packet redirect to EGRESS*/
0000000000000000000000000000000000000000;;		TCA_EGRESS_MIRROR  = 2 /* mirror packet to EGRESS */
0000000000000000000000000000000000000000;;		TCA_INGRESS_REDIR  = 3 /* packet redirect to INGRESS*/
0000000000000000000000000000000000000000;;		TCA_INGRESS_MIRROR = 4 /* mirror packet to INGRESS */
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TC_ACT_UNSPEC     = int32(-1)
0000000000000000000000000000000000000000;;		TC_ACT_OK         = 0
0000000000000000000000000000000000000000;;		TC_ACT_RECLASSIFY = 1
0000000000000000000000000000000000000000;;		TC_ACT_SHOT       = 2
0000000000000000000000000000000000000000;;		TC_ACT_PIPE       = 3
0000000000000000000000000000000000000000;;		TC_ACT_STOLEN     = 4
0000000000000000000000000000000000000000;;		TC_ACT_QUEUED     = 5
0000000000000000000000000000000000000000;;		TC_ACT_REPEAT     = 6
0000000000000000000000000000000000000000;;		TC_ACT_JUMP       = 0x10000000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// #define tc_gen \
0000000000000000000000000000000000000000;;	//   __u32                 index; \
0000000000000000000000000000000000000000;;	//   __u32                 capab; \
0000000000000000000000000000000000000000;;	//   int                   action; \
0000000000000000000000000000000000000000;;	//   int                   refcnt; \
0000000000000000000000000000000000000000;;	//   int                   bindcnt
0000000000000000000000000000000000000000;;	// struct tc_mirred {
0000000000000000000000000000000000000000;;	// 	tc_gen;
0000000000000000000000000000000000000000;;	// 	int                     eaction;   /* one of IN/EGRESS_MIRROR/REDIR */
0000000000000000000000000000000000000000;;	// 	__u32                   ifindex;  /* ifindex of egress port */
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcMirred struct {
0000000000000000000000000000000000000000;;		Index   uint32
0000000000000000000000000000000000000000;;		Capab   uint32
0000000000000000000000000000000000000000;;		Action  int32
0000000000000000000000000000000000000000;;		Refcnt  int32
0000000000000000000000000000000000000000;;		Bindcnt int32
0000000000000000000000000000000000000000;;		Eaction int32
0000000000000000000000000000000000000000;;		Ifindex uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *TcMirred) Len() int {
0000000000000000000000000000000000000000;;		return SizeofTcMirred
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeTcMirred(b []byte) *TcMirred {
0000000000000000000000000000000000000000;;		return (*TcMirred)(unsafe.Pointer(&b[0:SizeofTcMirred][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x *TcMirred) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofTcMirred]byte)(unsafe.Pointer(x)))[:]
0000000000000000000000000000000000000000;;	}
