0000000000000000000000000000000000000000;;	package nl
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/nl/xfrm_state_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/nl/xfrm_state_linux.go][vendor/github.com/vishvananda/netlink/nl/xfrm_state_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofXfrmUsersaId   = 0x18
0000000000000000000000000000000000000000;;		SizeofXfrmStats      = 0x0c
0000000000000000000000000000000000000000;;		SizeofXfrmUsersaInfo = 0xe0
0000000000000000000000000000000000000000;;		SizeofXfrmAlgo       = 0x44
0000000000000000000000000000000000000000;;		SizeofXfrmAlgoAuth   = 0x48
0000000000000000000000000000000000000000;;		SizeofXfrmEncapTmpl  = 0x18
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_usersa_id {
0000000000000000000000000000000000000000;;	//   xfrm_address_t      daddr;
0000000000000000000000000000000000000000;;	//   __be32        spi;
0000000000000000000000000000000000000000;;	//   __u16       family;
0000000000000000000000000000000000000000;;	//   __u8        proto;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmUsersaId struct {
0000000000000000000000000000000000000000;;		Daddr  XfrmAddress
0000000000000000000000000000000000000000;;		Spi    uint32 // big endian
0000000000000000000000000000000000000000;;		Family uint16
0000000000000000000000000000000000000000;;		Proto  uint8
0000000000000000000000000000000000000000;;		Pad    byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmUsersaId) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmUsersaId
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmUsersaId(b []byte) *XfrmUsersaId {
0000000000000000000000000000000000000000;;		return (*XfrmUsersaId)(unsafe.Pointer(&b[0:SizeofXfrmUsersaId][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmUsersaId) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmUsersaId]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_stats {
0000000000000000000000000000000000000000;;	//   __u32 replay_window;
0000000000000000000000000000000000000000;;	//   __u32 replay;
0000000000000000000000000000000000000000;;	//   __u32 integrity_failed;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmStats struct {
0000000000000000000000000000000000000000;;		ReplayWindow    uint32
0000000000000000000000000000000000000000;;		Replay          uint32
0000000000000000000000000000000000000000;;		IntegrityFailed uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmStats) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmStats
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmStats(b []byte) *XfrmStats {
0000000000000000000000000000000000000000;;		return (*XfrmStats)(unsafe.Pointer(&b[0:SizeofXfrmStats][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmStats) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmStats]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_usersa_info {
0000000000000000000000000000000000000000;;	//   struct xfrm_selector    sel;
0000000000000000000000000000000000000000;;	//   struct xfrm_id      id;
0000000000000000000000000000000000000000;;	//   xfrm_address_t      saddr;
0000000000000000000000000000000000000000;;	//   struct xfrm_lifetime_cfg  lft;
0000000000000000000000000000000000000000;;	//   struct xfrm_lifetime_cur  curlft;
0000000000000000000000000000000000000000;;	//   struct xfrm_stats   stats;
0000000000000000000000000000000000000000;;	//   __u32       seq;
0000000000000000000000000000000000000000;;	//   __u32       reqid;
0000000000000000000000000000000000000000;;	//   __u16       family;
0000000000000000000000000000000000000000;;	//   __u8        mode;   /* XFRM_MODE_xxx */
0000000000000000000000000000000000000000;;	//   __u8        replay_window;
0000000000000000000000000000000000000000;;	//   __u8        flags;
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_NOECN  1
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_DECAP_DSCP 2
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_NOPMTUDISC 4
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_WILDRECV 8
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_ICMP   16
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_AF_UNSPEC  32
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_ALIGN4 64
0000000000000000000000000000000000000000;;	// #define XFRM_STATE_ESN    128
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// #define XFRM_SA_XFLAG_DONT_ENCAP_DSCP 1
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmUsersaInfo struct {
0000000000000000000000000000000000000000;;		Sel          XfrmSelector
0000000000000000000000000000000000000000;;		Id           XfrmId
0000000000000000000000000000000000000000;;		Saddr        XfrmAddress
0000000000000000000000000000000000000000;;		Lft          XfrmLifetimeCfg
0000000000000000000000000000000000000000;;		Curlft       XfrmLifetimeCur
0000000000000000000000000000000000000000;;		Stats        XfrmStats
0000000000000000000000000000000000000000;;		Seq          uint32
0000000000000000000000000000000000000000;;		Reqid        uint32
0000000000000000000000000000000000000000;;		Family       uint16
0000000000000000000000000000000000000000;;		Mode         uint8
0000000000000000000000000000000000000000;;		ReplayWindow uint8
0000000000000000000000000000000000000000;;		Flags        uint8
0000000000000000000000000000000000000000;;		Pad          [7]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmUsersaInfo) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmUsersaInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmUsersaInfo(b []byte) *XfrmUsersaInfo {
0000000000000000000000000000000000000000;;		return (*XfrmUsersaInfo)(unsafe.Pointer(&b[0:SizeofXfrmUsersaInfo][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmUsersaInfo) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmUsersaInfo]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_algo {
0000000000000000000000000000000000000000;;	//   char    alg_name[64];
0000000000000000000000000000000000000000;;	//   unsigned int  alg_key_len;    /* in bits */
0000000000000000000000000000000000000000;;	//   char    alg_key[0];
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmAlgo struct {
0000000000000000000000000000000000000000;;		AlgName   [64]byte
0000000000000000000000000000000000000000;;		AlgKeyLen uint32
0000000000000000000000000000000000000000;;		AlgKey    []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmAlgo) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmAlgo + int(msg.AlgKeyLen/8)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmAlgo(b []byte) *XfrmAlgo {
0000000000000000000000000000000000000000;;		ret := XfrmAlgo{}
0000000000000000000000000000000000000000;;		copy(ret.AlgName[:], b[0:64])
0000000000000000000000000000000000000000;;		ret.AlgKeyLen = *(*uint32)(unsafe.Pointer(&b[64]))
0000000000000000000000000000000000000000;;		ret.AlgKey = b[68:ret.Len()]
0000000000000000000000000000000000000000;;		return &ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmAlgo) Serialize() []byte {
0000000000000000000000000000000000000000;;		b := make([]byte, msg.Len())
0000000000000000000000000000000000000000;;		copy(b[0:64], msg.AlgName[:])
0000000000000000000000000000000000000000;;		copy(b[64:68], (*(*[4]byte)(unsafe.Pointer(&msg.AlgKeyLen)))[:])
0000000000000000000000000000000000000000;;		copy(b[68:msg.Len()], msg.AlgKey[:])
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_algo_auth {
0000000000000000000000000000000000000000;;	//   char    alg_name[64];
0000000000000000000000000000000000000000;;	//   unsigned int  alg_key_len;    /* in bits */
0000000000000000000000000000000000000000;;	//   unsigned int  alg_trunc_len;  /* in bits */
0000000000000000000000000000000000000000;;	//   char    alg_key[0];
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmAlgoAuth struct {
0000000000000000000000000000000000000000;;		AlgName     [64]byte
0000000000000000000000000000000000000000;;		AlgKeyLen   uint32
0000000000000000000000000000000000000000;;		AlgTruncLen uint32
0000000000000000000000000000000000000000;;		AlgKey      []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmAlgoAuth) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmAlgoAuth + int(msg.AlgKeyLen/8)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmAlgoAuth(b []byte) *XfrmAlgoAuth {
0000000000000000000000000000000000000000;;		ret := XfrmAlgoAuth{}
0000000000000000000000000000000000000000;;		copy(ret.AlgName[:], b[0:64])
0000000000000000000000000000000000000000;;		ret.AlgKeyLen = *(*uint32)(unsafe.Pointer(&b[64]))
0000000000000000000000000000000000000000;;		ret.AlgTruncLen = *(*uint32)(unsafe.Pointer(&b[68]))
0000000000000000000000000000000000000000;;		ret.AlgKey = b[72:ret.Len()]
0000000000000000000000000000000000000000;;		return &ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmAlgoAuth) Serialize() []byte {
0000000000000000000000000000000000000000;;		b := make([]byte, msg.Len())
0000000000000000000000000000000000000000;;		copy(b[0:64], msg.AlgName[:])
0000000000000000000000000000000000000000;;		copy(b[64:68], (*(*[4]byte)(unsafe.Pointer(&msg.AlgKeyLen)))[:])
0000000000000000000000000000000000000000;;		copy(b[68:72], (*(*[4]byte)(unsafe.Pointer(&msg.AlgTruncLen)))[:])
0000000000000000000000000000000000000000;;		copy(b[72:msg.Len()], msg.AlgKey[:])
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_algo_aead {
0000000000000000000000000000000000000000;;	//   char    alg_name[64];
0000000000000000000000000000000000000000;;	//   unsigned int  alg_key_len;  /* in bits */
0000000000000000000000000000000000000000;;	//   unsigned int  alg_icv_len;  /* in bits */
0000000000000000000000000000000000000000;;	//   char    alg_key[0];
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// struct xfrm_encap_tmpl {
0000000000000000000000000000000000000000;;	//   __u16   encap_type;
0000000000000000000000000000000000000000;;	//   __be16    encap_sport;
0000000000000000000000000000000000000000;;	//   __be16    encap_dport;
0000000000000000000000000000000000000000;;	//   xfrm_address_t  encap_oa;
0000000000000000000000000000000000000000;;	// };
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type XfrmEncapTmpl struct {
0000000000000000000000000000000000000000;;		EncapType  uint16
0000000000000000000000000000000000000000;;		EncapSport uint16 // big endian
0000000000000000000000000000000000000000;;		EncapDport uint16 // big endian
0000000000000000000000000000000000000000;;		Pad        [2]byte
0000000000000000000000000000000000000000;;		EncapOa    XfrmAddress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmEncapTmpl) Len() int {
0000000000000000000000000000000000000000;;		return SizeofXfrmEncapTmpl
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeserializeXfrmEncapTmpl(b []byte) *XfrmEncapTmpl {
0000000000000000000000000000000000000000;;		return (*XfrmEncapTmpl)(unsafe.Pointer(&b[0:SizeofXfrmEncapTmpl][0]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msg *XfrmEncapTmpl) Serialize() []byte {
0000000000000000000000000000000000000000;;		return (*(*[SizeofXfrmEncapTmpl]byte)(unsafe.Pointer(msg)))[:]
0000000000000000000000000000000000000000;;	}
