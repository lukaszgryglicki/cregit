0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/protinfo_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/protinfo_linux.go][vendor/github.com/vishvananda/netlink/protinfo_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vishvananda/netlink/nl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LinkGetProtinfo(link Link) (Protinfo, error) {
0000000000000000000000000000000000000000;;		base := link.Attrs()
0000000000000000000000000000000000000000;;		ensureIndex(base)
0000000000000000000000000000000000000000;;		var pi Protinfo
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_GETLINK, syscall.NLM_F_DUMP)
0000000000000000000000000000000000000000;;		msg := nl.NewIfInfomsg(syscall.AF_BRIDGE)
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;		msgs, err := req.Execute(syscall.NETLINK_ROUTE, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pi, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, m := range msgs {
0000000000000000000000000000000000000000;;			ans := nl.DeserializeIfInfomsg(m)
0000000000000000000000000000000000000000;;			if int(ans.Index) != base.Index {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			attrs, err := nl.ParseRouteAttr(m[ans.Len():])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pi, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, attr := range attrs {
0000000000000000000000000000000000000000;;				if attr.Attr.Type != syscall.IFLA_PROTINFO|syscall.NLA_F_NESTED {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				infos, err := nl.ParseRouteAttr(attr.Value)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return pi, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var pi Protinfo
0000000000000000000000000000000000000000;;				for _, info := range infos {
0000000000000000000000000000000000000000;;					switch info.Attr.Type {
0000000000000000000000000000000000000000;;					case nl.IFLA_BRPORT_MODE:
0000000000000000000000000000000000000000;;						pi.Hairpin = byteToBool(info.Value[0])
0000000000000000000000000000000000000000;;					case nl.IFLA_BRPORT_GUARD:
0000000000000000000000000000000000000000;;						pi.Guard = byteToBool(info.Value[0])
0000000000000000000000000000000000000000;;					case nl.IFLA_BRPORT_FAST_LEAVE:
0000000000000000000000000000000000000000;;						pi.FastLeave = byteToBool(info.Value[0])
0000000000000000000000000000000000000000;;					case nl.IFLA_BRPORT_PROTECT:
0000000000000000000000000000000000000000;;						pi.RootBlock = byteToBool(info.Value[0])
0000000000000000000000000000000000000000;;					case nl.IFLA_BRPORT_LEARNING:
0000000000000000000000000000000000000000;;						pi.Learning = byteToBool(info.Value[0])
0000000000000000000000000000000000000000;;					case nl.IFLA_BRPORT_UNICAST_FLOOD:
0000000000000000000000000000000000000000;;						pi.Flood = byteToBool(info.Value[0])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return pi, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pi, fmt.Errorf("Device with index %d not found", base.Index)
0000000000000000000000000000000000000000;;	}
