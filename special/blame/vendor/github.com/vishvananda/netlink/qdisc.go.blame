0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/qdisc.go[Godeps/_workspace/src/github.com/vishvananda/netlink/qdisc.go][vendor/github.com/vishvananda/netlink/qdisc.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HANDLE_NONE      = 0
0000000000000000000000000000000000000000;;		HANDLE_INGRESS   = 0xFFFFFFF1
0000000000000000000000000000000000000000;;		HANDLE_ROOT      = 0xFFFFFFFF
0000000000000000000000000000000000000000;;		PRIORITY_MAP_LEN = 16
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Qdisc interface {
0000000000000000000000000000000000000000;;		Attrs() *QdiscAttrs
0000000000000000000000000000000000000000;;		Type() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Qdisc represents a netlink qdisc. A qdisc is associated with a link,
0000000000000000000000000000000000000000;;	// has a handle, a parent and a refcnt. The root qdisc of a device should
0000000000000000000000000000000000000000;;	// have parent == HANDLE_ROOT.
0000000000000000000000000000000000000000;;	type QdiscAttrs struct {
0000000000000000000000000000000000000000;;		LinkIndex int
0000000000000000000000000000000000000000;;		Handle    uint32
0000000000000000000000000000000000000000;;		Parent    uint32
0000000000000000000000000000000000000000;;		Refcnt    uint32 // read only
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q QdiscAttrs) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("{LinkIndex: %d, Handle: %s, Parent: %s, Refcnt: %s}", q.LinkIndex, HandleStr(q.Handle), HandleStr(q.Parent), q.Refcnt)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MakeHandle(major, minor uint16) uint32 {
0000000000000000000000000000000000000000;;		return (uint32(major) << 16) | uint32(minor)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MajorMinor(handle uint32) (uint16, uint16) {
0000000000000000000000000000000000000000;;		return uint16((handle & 0xFFFF0000) >> 16), uint16(handle & 0x0000FFFFF)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func HandleStr(handle uint32) string {
0000000000000000000000000000000000000000;;		switch handle {
0000000000000000000000000000000000000000;;		case HANDLE_NONE:
0000000000000000000000000000000000000000;;			return "none"
0000000000000000000000000000000000000000;;		case HANDLE_INGRESS:
0000000000000000000000000000000000000000;;			return "ingress"
0000000000000000000000000000000000000000;;		case HANDLE_ROOT:
0000000000000000000000000000000000000000;;			return "root"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			major, minor := MajorMinor(handle)
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%x:%x", major, minor)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PfifoFast is the default qdisc created by the kernel if one has not
0000000000000000000000000000000000000000;;	// been defined for the interface
0000000000000000000000000000000000000000;;	type PfifoFast struct {
0000000000000000000000000000000000000000;;		QdiscAttrs
0000000000000000000000000000000000000000;;		Bands       uint8
0000000000000000000000000000000000000000;;		PriorityMap [PRIORITY_MAP_LEN]uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *PfifoFast) Attrs() *QdiscAttrs {
0000000000000000000000000000000000000000;;		return &qdisc.QdiscAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *PfifoFast) Type() string {
0000000000000000000000000000000000000000;;		return "pfifo_fast"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Prio is a basic qdisc that works just like PfifoFast
0000000000000000000000000000000000000000;;	type Prio struct {
0000000000000000000000000000000000000000;;		QdiscAttrs
0000000000000000000000000000000000000000;;		Bands       uint8
0000000000000000000000000000000000000000;;		PriorityMap [PRIORITY_MAP_LEN]uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPrio(attrs QdiscAttrs) *Prio {
0000000000000000000000000000000000000000;;		return &Prio{
0000000000000000000000000000000000000000;;			QdiscAttrs:  attrs,
0000000000000000000000000000000000000000;;			Bands:       3,
0000000000000000000000000000000000000000;;			PriorityMap: [PRIORITY_MAP_LEN]uint8{1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *Prio) Attrs() *QdiscAttrs {
0000000000000000000000000000000000000000;;		return &qdisc.QdiscAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *Prio) Type() string {
0000000000000000000000000000000000000000;;		return "prio"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tbf is a classful qdisc that rate limits based on tokens
0000000000000000000000000000000000000000;;	type Tbf struct {
0000000000000000000000000000000000000000;;		QdiscAttrs
0000000000000000000000000000000000000000;;		// TODO: handle 64bit rate properly
0000000000000000000000000000000000000000;;		Rate   uint64
0000000000000000000000000000000000000000;;		Limit  uint32
0000000000000000000000000000000000000000;;		Buffer uint32
0000000000000000000000000000000000000000;;		// TODO: handle other settings
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *Tbf) Attrs() *QdiscAttrs {
0000000000000000000000000000000000000000;;		return &qdisc.QdiscAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *Tbf) Type() string {
0000000000000000000000000000000000000000;;		return "tbf"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ingress is a qdisc for adding ingress filters
0000000000000000000000000000000000000000;;	type Ingress struct {
0000000000000000000000000000000000000000;;		QdiscAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *Ingress) Attrs() *QdiscAttrs {
0000000000000000000000000000000000000000;;		return &qdisc.QdiscAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *Ingress) Type() string {
0000000000000000000000000000000000000000;;		return "ingress"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenericQdisc qdiscs represent types that are not currently understood
0000000000000000000000000000000000000000;;	// by this netlink library.
0000000000000000000000000000000000000000;;	type GenericQdisc struct {
0000000000000000000000000000000000000000;;		QdiscAttrs
0000000000000000000000000000000000000000;;		QdiscType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *GenericQdisc) Attrs() *QdiscAttrs {
0000000000000000000000000000000000000000;;		return &qdisc.QdiscAttrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (qdisc *GenericQdisc) Type() string {
0000000000000000000000000000000000000000;;		return qdisc.QdiscType
0000000000000000000000000000000000000000;;	}
