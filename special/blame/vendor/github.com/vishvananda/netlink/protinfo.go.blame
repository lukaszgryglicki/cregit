0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/protinfo.go[Godeps/_workspace/src/github.com/vishvananda/netlink/protinfo.go][vendor/github.com/vishvananda/netlink/protinfo.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Protinfo represents bridge flags from netlink.
0000000000000000000000000000000000000000;;	type Protinfo struct {
0000000000000000000000000000000000000000;;		Hairpin   bool
0000000000000000000000000000000000000000;;		Guard     bool
0000000000000000000000000000000000000000;;		FastLeave bool
0000000000000000000000000000000000000000;;		RootBlock bool
0000000000000000000000000000000000000000;;		Learning  bool
0000000000000000000000000000000000000000;;		Flood     bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns a list of enabled flags
0000000000000000000000000000000000000000;;	func (prot *Protinfo) String() string {
0000000000000000000000000000000000000000;;		var boolStrings []string
0000000000000000000000000000000000000000;;		if prot.Hairpin {
0000000000000000000000000000000000000000;;			boolStrings = append(boolStrings, "Hairpin")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if prot.Guard {
0000000000000000000000000000000000000000;;			boolStrings = append(boolStrings, "Guard")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if prot.FastLeave {
0000000000000000000000000000000000000000;;			boolStrings = append(boolStrings, "FastLeave")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if prot.RootBlock {
0000000000000000000000000000000000000000;;			boolStrings = append(boolStrings, "RootBlock")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if prot.Learning {
0000000000000000000000000000000000000000;;			boolStrings = append(boolStrings, "Learning")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if prot.Flood {
0000000000000000000000000000000000000000;;			boolStrings = append(boolStrings, "Flood")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(boolStrings, " ")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func boolToByte(x bool) []byte {
0000000000000000000000000000000000000000;;		if x {
0000000000000000000000000000000000000000;;			return []byte{1}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []byte{0}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func byteToBool(x byte) bool {
0000000000000000000000000000000000000000;;		if uint8(x) != 0 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
