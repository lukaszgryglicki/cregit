0000000000000000000000000000000000000000;;	# netlink - netlink library for go #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/vishvananda/netlink.png?branch=master)](https://travis-ci.org/vishvananda/netlink) [![GoDoc](https://godoc.org/github.com/vishvananda/netlink?status.svg)](https://godoc.org/github.com/vishvananda/netlink)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The netlink package provides a simple netlink library for go. Netlink
0000000000000000000000000000000000000000;;	is the interface a user-space program in linux uses to communicate with
0000000000000000000000000000000000000000;;	the kernel. It can be used to add and remove interfaces, set ip addresses
0000000000000000000000000000000000000000;;	and routes, and configure ipsec. Netlink communication requires elevated
0000000000000000000000000000000000000000;;	privileges, so in most cases this code needs to be run as root. Since
0000000000000000000000000000000000000000;;	low-level netlink messages are inscrutable at best, the library attempts
0000000000000000000000000000000000000000;;	to provide an api that is loosely modeled on the CLI provied by iproute2.
0000000000000000000000000000000000000000;;	Actions like `ip link add` will be accomplished via a similarly named
0000000000000000000000000000000000000000;;	function like AddLink(). This library began its life as a fork of the
0000000000000000000000000000000000000000;;	netlink functionality in
0000000000000000000000000000000000000000;;	[docker/libcontainer](https://github.com/docker/libcontainer) but was
0000000000000000000000000000000000000000;;	heavily rewritten to improve testability, performance, and to add new
0000000000000000000000000000000000000000;;	functionality like ipsec xfrm handling.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Local Build and Test ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can use go get command:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get github.com/vishvananda/netlink
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Testing dependencies:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get github.com/vishvananda/netns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Testing (requires root):
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    sudo -E go test github.com/vishvananda/netlink
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Examples ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Add a new bridge and add eth1 into it:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	    "net"
0000000000000000000000000000000000000000;;	    "github.com/vishvananda/netlink"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;	    la := netlink.NewLinkAttrs()
0000000000000000000000000000000000000000;;	    la.Name = "foo"
0000000000000000000000000000000000000000;;	    mybridge := &netlink.Bridge{la}}
0000000000000000000000000000000000000000;;	    _ := netlink.LinkAdd(mybridge)
0000000000000000000000000000000000000000;;	    eth1, _ := netlink.LinkByName("eth1")
0000000000000000000000000000000000000000;;	    netlink.LinkSetMaster(eth1, mybridge)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Note `NewLinkAttrs` constructor, it sets default values in structure. For now
0000000000000000000000000000000000000000;;	it sets only `TxQLen` to `-1`, so kernel will set default by itself. If you're
0000000000000000000000000000000000000000;;	using simple initialization(`LinkAttrs{Name: "foo"}`) `TxQLen` will be set to
0000000000000000000000000000000000000000;;	`0` unless you specify it like `LinkAttrs{Name: "foo", TxQLen: 1000}`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Add a new ip address to loopback:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	    "net"
0000000000000000000000000000000000000000;;	    "github.com/vishvananda/netlink"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;	    lo, _ := netlink.LinkByName("lo")
0000000000000000000000000000000000000000;;	    addr, _ := netlink.ParseAddr("169.254.169.254/32")
0000000000000000000000000000000000000000;;	    netlink.AddrAdd(lo, addr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Future Work ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Many pieces of netlink are not yet fully supported in the high-level
0000000000000000000000000000000000000000;;	interface. Aspects of virtually all of the high-level objects don't exist.
0000000000000000000000000000000000000000;;	Many of the underlying primitives are there, so its a matter of putting
0000000000000000000000000000000000000000;;	the right fields into the high-level objects and making sure that they
0000000000000000000000000000000000000000;;	are serialized and deserialized correctly in the Add and List methods.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	There are also a few pieces of low level netlink functionality that still
0000000000000000000000000000000000000000;;	need to be implemented. Routing rules are not in place and some of the
0000000000000000000000000000000000000000;;	more advanced link types. Hopefully there is decent structure and testing
0000000000000000000000000000000000000000;;	in place to make these fairly straightforward to add.
