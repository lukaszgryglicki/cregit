0000000000000000000000000000000000000000;;	package netlink
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/vishvananda/netlink/addr_linux.go[Godeps/_workspace/src/github.com/vishvananda/netlink/addr_linux.go][vendor/github.com/vishvananda/netlink/addr_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vishvananda/netlink/nl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddrAdd will add an IP address to a link device.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip addr add $addr dev $link`
0000000000000000000000000000000000000000;;	func AddrAdd(link Link, addr *Addr) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_NEWADDR, syscall.NLM_F_CREATE|syscall.NLM_F_EXCL|syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;		return addrHandle(link, addr, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddrDel will delete an IP address from a link device.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip addr del $addr dev $link`
0000000000000000000000000000000000000000;;	func AddrDel(link Link, addr *Addr) error {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_DELADDR, syscall.NLM_F_ACK)
0000000000000000000000000000000000000000;;		return addrHandle(link, addr, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addrHandle(link Link, addr *Addr, req *nl.NetlinkRequest) error {
0000000000000000000000000000000000000000;;		base := link.Attrs()
0000000000000000000000000000000000000000;;		if addr.Label != "" && !strings.HasPrefix(addr.Label, base.Name) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("label must begin with interface name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ensureIndex(base)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		family := nl.GetIPFamily(addr.IP)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := nl.NewIfAddrmsg(family)
0000000000000000000000000000000000000000;;		msg.Index = uint32(base.Index)
0000000000000000000000000000000000000000;;		prefixlen, _ := addr.Mask.Size()
0000000000000000000000000000000000000000;;		msg.Prefixlen = uint8(prefixlen)
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var addrData []byte
0000000000000000000000000000000000000000;;		if family == FAMILY_V4 {
0000000000000000000000000000000000000000;;			addrData = addr.IP.To4()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			addrData = addr.IP.To16()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		localData := nl.NewRtAttr(syscall.IFA_LOCAL, addrData)
0000000000000000000000000000000000000000;;		req.AddData(localData)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addressData := nl.NewRtAttr(syscall.IFA_ADDRESS, addrData)
0000000000000000000000000000000000000000;;		req.AddData(addressData)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if addr.Label != "" {
0000000000000000000000000000000000000000;;			labelData := nl.NewRtAttr(syscall.IFA_LABEL, nl.ZeroTerminated(addr.Label))
0000000000000000000000000000000000000000;;			req.AddData(labelData)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := req.Execute(syscall.NETLINK_ROUTE, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddrList gets a list of IP addresses in the system.
0000000000000000000000000000000000000000;;	// Equivalent to: `ip addr show`.
0000000000000000000000000000000000000000;;	// The list can be filtered by link and ip family.
0000000000000000000000000000000000000000;;	func AddrList(link Link, family int) ([]Addr, error) {
0000000000000000000000000000000000000000;;		req := nl.NewNetlinkRequest(syscall.RTM_GETADDR, syscall.NLM_F_DUMP)
0000000000000000000000000000000000000000;;		msg := nl.NewIfInfomsg(family)
0000000000000000000000000000000000000000;;		req.AddData(msg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msgs, err := req.Execute(syscall.NETLINK_ROUTE, syscall.RTM_NEWADDR)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		index := 0
0000000000000000000000000000000000000000;;		if link != nil {
0000000000000000000000000000000000000000;;			base := link.Attrs()
0000000000000000000000000000000000000000;;			ensureIndex(base)
0000000000000000000000000000000000000000;;			index = base.Index
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var res []Addr
0000000000000000000000000000000000000000;;		for _, m := range msgs {
0000000000000000000000000000000000000000;;			msg := nl.DeserializeIfAddrmsg(m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if link != nil && msg.Index != uint32(index) {
0000000000000000000000000000000000000000;;				// Ignore messages from other interfaces
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			attrs, err := nl.ParseRouteAttr(m[msg.Len():])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var local, dst *net.IPNet
0000000000000000000000000000000000000000;;			var addr Addr
0000000000000000000000000000000000000000;;			for _, attr := range attrs {
0000000000000000000000000000000000000000;;				switch attr.Attr.Type {
0000000000000000000000000000000000000000;;				case syscall.IFA_ADDRESS:
0000000000000000000000000000000000000000;;					dst = &net.IPNet{
0000000000000000000000000000000000000000;;						IP:   attr.Value,
0000000000000000000000000000000000000000;;						Mask: net.CIDRMask(int(msg.Prefixlen), 8*len(attr.Value)),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case syscall.IFA_LOCAL:
0000000000000000000000000000000000000000;;					local = &net.IPNet{
0000000000000000000000000000000000000000;;						IP:   attr.Value,
0000000000000000000000000000000000000000;;						Mask: net.CIDRMask(int(msg.Prefixlen), 8*len(attr.Value)),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case syscall.IFA_LABEL:
0000000000000000000000000000000000000000;;					addr.Label = string(attr.Value[:len(attr.Value)-1])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// IFA_LOCAL should be there but if not, fall back to IFA_ADDRESS
0000000000000000000000000000000000000000;;			if local != nil {
0000000000000000000000000000000000000000;;				addr.IPNet = local
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				addr.IPNet = dst
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			res = append(res, addr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
