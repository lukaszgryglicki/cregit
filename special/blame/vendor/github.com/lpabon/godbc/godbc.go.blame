0000000000000000000000000000000000000000;;	//+build !prod
4f4f87343f0629f7e0147e976fa9be85e68cda09;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2014 The godbc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Design-by-Contract for Go
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Design by Contract is a programming methodology
0000000000000000000000000000000000000000;;	// which binds the caller and the function called to a
0000000000000000000000000000000000000000;;	// contract. The contract is represented using Hoare Triple:
0000000000000000000000000000000000000000;;	//      {P} C {Q}
0000000000000000000000000000000000000000;;	// where {P} is the precondition before executing command C,
0000000000000000000000000000000000000000;;	// and {Q} is the postcondition.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See Also
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// * http://en.wikipedia.org/wiki/Design_by_contract
0000000000000000000000000000000000000000;;	// * http://en.wikipedia.org/wiki/Hoare_logic
0000000000000000000000000000000000000000;;	// * http://dlang.org/dbc.html
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Godbc is enabled by default, but can be disabled for production
0000000000000000000000000000000000000000;;	// builds by using the tag 'prod' in builds and tests as follows:
0000000000000000000000000000000000000000;;	//		go build -tags 'prod'
0000000000000000000000000000000000000000;;	// or
0000000000000000000000000000000000000000;;	// 		go test -tags 'prod'
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package godbc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvariantSimpleTester is an interface which provides a receiver to
0000000000000000000000000000000000000000;;	// test the object
0000000000000000000000000000000000000000;;	type InvariantSimpleTester interface {
0000000000000000000000000000000000000000;;		Invariant() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvariantTester is an interface which provides not only an Invariant(),
0000000000000000000000000000000000000000;;	// but also a receiver to print the structure
0000000000000000000000000000000000000000;;	type InvariantTester interface {
0000000000000000000000000000000000000000;;		InvariantSimpleTester
0000000000000000000000000000000000000000;;		String() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dbc_panic prints to the screen information of the failure followed
0000000000000000000000000000000000000000;;	// by a call to panic()
0000000000000000000000000000000000000000;;	func dbc_panic(dbc_func_name string, b bool, message ...interface{}) {
0000000000000000000000000000000000000000;;		if !b {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get caller information which is the caller
0000000000000000000000000000000000000000;;			// of the caller of this function
0000000000000000000000000000000000000000;;			pc, file, line, _ := runtime.Caller(2)
0000000000000000000000000000000000000000;;			caller_func_info := runtime.FuncForPC(pc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			error_string := fmt.Sprintf("%s:\n\r\tfunc (%s) 0x%x\n\r\tFile %s:%d",
0000000000000000000000000000000000000000;;				dbc_func_name,
0000000000000000000000000000000000000000;;				caller_func_info.Name(),
0000000000000000000000000000000000000000;;				pc,
0000000000000000000000000000000000000000;;				file,
0000000000000000000000000000000000000000;;				line)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(message) > 0 {
0000000000000000000000000000000000000000;;				error_string += fmt.Sprintf("\n\r\tInfo: %+v", message)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := errors.New(error_string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Finally panic
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Require checks that the preconditions are satisfied before
0000000000000000000000000000000000000000;;	// executing the function
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example Code
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 		func Divide(a, b int) int {
0000000000000000000000000000000000000000;;	//			godbc.Require(b != 0)
0000000000000000000000000000000000000000;;	//			return a/b
0000000000000000000000000000000000000000;;	// 		}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func Require(b bool, message ...interface{}) {
0000000000000000000000000000000000000000;;		dbc_panic("REQUIRE", b, message...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure checks the postconditions are satisfied before returning
0000000000000000000000000000000000000000;;	// to the caller.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example Code
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//		type Data struct {
0000000000000000000000000000000000000000;;	//			a int
0000000000000000000000000000000000000000;;	//		}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 		func (*d Data) Set(a int) {
0000000000000000000000000000000000000000;;	//			d.a = a
0000000000000000000000000000000000000000;;	//			godbc.Ensure(d.a == a)
0000000000000000000000000000000000000000;;	// 		}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func Ensure(b bool, message ...interface{}) {
0000000000000000000000000000000000000000;;		dbc_panic("ENSURE", b, message...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check provides a simple assert
0000000000000000000000000000000000000000;;	func Check(b bool, message ...interface{}) {
0000000000000000000000000000000000000000;;		dbc_panic("CHECK", b, message...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvariantSimple calls the objects Invariant() receiver to test
0000000000000000000000000000000000000000;;	// the object for correctness.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The caller object must provide an object that supports the
0000000000000000000000000000000000000000;;	// interface InvariantSimpleTester and does not need to provide
0000000000000000000000000000000000000000;;	// a String() receiver
0000000000000000000000000000000000000000;;	func InvariantSimple(obj InvariantSimpleTester, message ...interface{}) {
0000000000000000000000000000000000000000;;		dbc_panic("INVARIANT", obj.Invariant(), message...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Invariant calls the objects Invariant() receiver to test
0000000000000000000000000000000000000000;;	// the object for correctness.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The caller object must provide an object that supports the
0000000000000000000000000000000000000000;;	// interface InvariantTester
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To see an example, please take a look at the godbc_test.go
0000000000000000000000000000000000000000;;	func Invariant(obj InvariantTester, message ...interface{}) {
0000000000000000000000000000000000000000;;		m := append(message, obj)
0000000000000000000000000000000000000000;;		dbc_panic("INVARIANT", obj.Invariant(), m)
0000000000000000000000000000000000000000;;	}
