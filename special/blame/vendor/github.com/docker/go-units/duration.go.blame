0000000000000000000000000000000000000000;;	// Package units provides helper function to parse and print size and time units
0000000000000000000000000000000000000000;;	// in human-readable format.
0000000000000000000000000000000000000000;;	package units
89bc075ca22301fc4fe03dcaa8c8fcf6f0b87b87;Godeps/_workspace/src/github.com/docker/go-units/duration.go[Godeps/_workspace/src/github.com/docker/go-units/duration.go][vendor/github.com/docker/go-units/duration.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HumanDuration returns a human-readable approximation of a duration
0000000000000000000000000000000000000000;;	// (eg. "About a minute", "4 hours ago", etc.).
0000000000000000000000000000000000000000;;	func HumanDuration(d time.Duration) string {
0000000000000000000000000000000000000000;;		if seconds := int(d.Seconds()); seconds < 1 {
0000000000000000000000000000000000000000;;			return "Less than a second"
0000000000000000000000000000000000000000;;		} else if seconds == 1 {
0000000000000000000000000000000000000000;;			return "1 second"
0000000000000000000000000000000000000000;;		} else if seconds < 60 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%d seconds", seconds)
0000000000000000000000000000000000000000;;		} else if minutes := int(d.Minutes()); minutes == 1 {
0000000000000000000000000000000000000000;;			return "About a minute"
0000000000000000000000000000000000000000;;		} else if minutes < 46 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%d minutes", minutes)
0000000000000000000000000000000000000000;;		} else if hours := int(d.Hours() + 0.5); hours == 1 {
0000000000000000000000000000000000000000;;			return "About an hour"
0000000000000000000000000000000000000000;;		} else if hours < 48 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%d hours", hours)
0000000000000000000000000000000000000000;;		} else if hours < 24*7*2 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%d days", hours/24)
0000000000000000000000000000000000000000;;		} else if hours < 24*30*2 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%d weeks", hours/24/7)
0000000000000000000000000000000000000000;;		} else if hours < 24*365*2 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%d months", hours/24/30)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d years", int(d.Hours())/24/365)
0000000000000000000000000000000000000000;;	}
