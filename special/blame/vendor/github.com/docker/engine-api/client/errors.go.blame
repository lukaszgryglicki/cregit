0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/errors.go[Godeps/_workspace/src/github.com/docker/engine-api/client/errors.go][vendor/github.com/docker/engine-api/client/errors.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrConnectionFailed is an error raised when the connection between the client and the server failed.
0000000000000000000000000000000000000000;;	var ErrConnectionFailed = errors.New("Cannot connect to the Docker daemon. Is the docker daemon running on this host?")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// imageNotFoundError implements an error returned when an image is not in the docker host.
0000000000000000000000000000000000000000;;	type imageNotFoundError struct {
0000000000000000000000000000000000000000;;		imageID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns a string representation of an imageNotFoundError
0000000000000000000000000000000000000000;;	func (i imageNotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Error: No such image: %s", i.imageID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrImageNotFound returns true if the error is caused
0000000000000000000000000000000000000000;;	// when an image is not found in the docker host.
0000000000000000000000000000000000000000;;	func IsErrImageNotFound(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(imageNotFoundError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// containerNotFoundError implements an error returned when a container is not in the docker host.
0000000000000000000000000000000000000000;;	type containerNotFoundError struct {
0000000000000000000000000000000000000000;;		containerID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns a string representation of a containerNotFoundError
0000000000000000000000000000000000000000;;	func (e containerNotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Error: No such container: %s", e.containerID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrContainerNotFound returns true if the error is caused
0000000000000000000000000000000000000000;;	// when a container is not found in the docker host.
0000000000000000000000000000000000000000;;	func IsErrContainerNotFound(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(containerNotFoundError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// networkNotFoundError implements an error returned when a network is not in the docker host.
0000000000000000000000000000000000000000;;	type networkNotFoundError struct {
0000000000000000000000000000000000000000;;		networkID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns a string representation of a networkNotFoundError
0000000000000000000000000000000000000000;;	func (e networkNotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Error: No such network: %s", e.networkID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrNetworkNotFound returns true if the error is caused
0000000000000000000000000000000000000000;;	// when a network is not found in the docker host.
0000000000000000000000000000000000000000;;	func IsErrNetworkNotFound(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(networkNotFoundError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// volumeNotFoundError implements an error returned when a volume is not in the docker host.
0000000000000000000000000000000000000000;;	type volumeNotFoundError struct {
0000000000000000000000000000000000000000;;		volumeID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns a string representation of a networkNotFoundError
0000000000000000000000000000000000000000;;	func (e volumeNotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Error: No such volume: %s", e.volumeID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrVolumeNotFound returns true if the error is caused
0000000000000000000000000000000000000000;;	// when a volume is not found in the docker host.
0000000000000000000000000000000000000000;;	func IsErrVolumeNotFound(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(volumeNotFoundError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// unauthorizedError represents an authorization error in a remote registry.
0000000000000000000000000000000000000000;;	type unauthorizedError struct {
0000000000000000000000000000000000000000;;		cause error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns a string representation of an unauthorizedError
0000000000000000000000000000000000000000;;	func (u unauthorizedError) Error() string {
0000000000000000000000000000000000000000;;		return u.cause.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrUnauthorized returns true if the error is caused
0000000000000000000000000000000000000000;;	// when a remote registry authentication fails
0000000000000000000000000000000000000000;;	func IsErrUnauthorized(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(unauthorizedError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
