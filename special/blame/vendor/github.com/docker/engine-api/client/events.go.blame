0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/events.go[Godeps/_workspace/src/github.com/docker/engine-api/client/events.go][vendor/github.com/docker/engine-api/client/events.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		timetypes "github.com/docker/engine-api/types/time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Events returns a stream of events in the daemon in a ReadCloser.
0000000000000000000000000000000000000000;;	// It's up to the caller to close the stream.
0000000000000000000000000000000000000000;;	func (cli *Client) Events(ctx context.Context, options types.EventsOptions) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		ref := time.Now()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Since != "" {
0000000000000000000000000000000000000000;;			ts, err := timetypes.GetTimestamp(options.Since, ref)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query.Set("since", ts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.Until != "" {
0000000000000000000000000000000000000000;;			ts, err := timetypes.GetTimestamp(options.Until, ref)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query.Set("until", ts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.Filters.Len() > 0 {
0000000000000000000000000000000000000000;;			filterJSON, err := filters.ToParam(options.Filters)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query.Set("filters", filterJSON)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverResponse, err := cli.get(ctx, "/events", query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return serverResponse.body, nil
0000000000000000000000000000000000000000;;	}
