0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_load.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_load.go][vendor/github.com/docker/engine-api/client/image_load.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageLoad loads an image in the docker host from the client host.
0000000000000000000000000000000000000000;;	// It's up to the caller to close the io.ReadCloser in the
0000000000000000000000000000000000000000;;	// ImageLoadResponse returned by this function.
0000000000000000000000000000000000000000;;	func (cli *Client) ImageLoad(ctx context.Context, input io.Reader, quiet bool) (types.ImageLoadResponse, error) {
0000000000000000000000000000000000000000;;		v := url.Values{}
0000000000000000000000000000000000000000;;		v.Set("quiet", "0")
0000000000000000000000000000000000000000;;		if quiet {
0000000000000000000000000000000000000000;;			v.Set("quiet", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers := map[string][]string{"Content-Type": {"application/x-tar"}}
0000000000000000000000000000000000000000;;		resp, err := cli.postRaw(ctx, "/images/load", v, input, headers)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return types.ImageLoadResponse{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return types.ImageLoadResponse{
0000000000000000000000000000000000000000;;			Body: resp.body,
0000000000000000000000000000000000000000;;			JSON: resp.header.Get("Content-Type") == "application/json",
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
