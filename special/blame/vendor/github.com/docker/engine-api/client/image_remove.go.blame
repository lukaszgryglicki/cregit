0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_remove.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_remove.go][vendor/github.com/docker/engine-api/client/image_remove.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageRemove removes an image from the docker host.
0000000000000000000000000000000000000000;;	func (cli *Client) ImageRemove(ctx context.Context, imageID string, options types.ImageRemoveOptions) ([]types.ImageDelete, error) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Force {
0000000000000000000000000000000000000000;;			query.Set("force", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !options.PruneChildren {
0000000000000000000000000000000000000000;;			query.Set("noprune", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.delete(ctx, "/images/"+imageID, query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var dels []types.ImageDelete
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&dels)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return dels, err
0000000000000000000000000000000000000000;;	}
