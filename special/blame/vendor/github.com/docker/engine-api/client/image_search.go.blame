0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_search.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_search.go][vendor/github.com/docker/engine-api/client/image_search.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/registry"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageSearch makes the docker host to search by a term in a remote registry.
0000000000000000000000000000000000000000;;	// The list of results is not sorted in any fashion.
0000000000000000000000000000000000000000;;	func (cli *Client) ImageSearch(ctx context.Context, term string, options types.ImageSearchOptions) ([]registry.SearchResult, error) {
0000000000000000000000000000000000000000;;		var results []registry.SearchResult
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("term", term)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Filters.Len() > 0 {
0000000000000000000000000000000000000000;;			filterJSON, err := filters.ToParam(options.Filters)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return results, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query.Set("filters", filterJSON)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.tryImageSearch(ctx, query, options.RegistryAuth)
0000000000000000000000000000000000000000;;		if resp.statusCode == http.StatusUnauthorized {
0000000000000000000000000000000000000000;;			newAuthHeader, privilegeErr := options.PrivilegeFunc()
0000000000000000000000000000000000000000;;			if privilegeErr != nil {
0000000000000000000000000000000000000000;;				return results, privilegeErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp, err = cli.tryImageSearch(ctx, query, newAuthHeader)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return results, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&results)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return results, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cli *Client) tryImageSearch(ctx context.Context, query url.Values, registryAuth string) (*serverResponse, error) {
0000000000000000000000000000000000000000;;		headers := map[string][]string{"X-Registry-Auth": {registryAuth}}
0000000000000000000000000000000000000000;;		return cli.get(ctx, "/images/search", query, headers)
0000000000000000000000000000000000000000;;	}
