0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_list.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_list.go][vendor/github.com/docker/engine-api/client/image_list.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageList returns a list of images in the docker host.
0000000000000000000000000000000000000000;;	func (cli *Client) ImageList(ctx context.Context, options types.ImageListOptions) ([]types.Image, error) {
0000000000000000000000000000000000000000;;		var images []types.Image
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Filters.Len() > 0 {
0000000000000000000000000000000000000000;;			filterJSON, err := filters.ToParam(options.Filters)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return images, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query.Set("filters", filterJSON)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.MatchName != "" {
0000000000000000000000000000000000000000;;			// FIXME rename this parameter, to not be confused with the filters flag
0000000000000000000000000000000000000000;;			query.Set("filter", options.MatchName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.All {
0000000000000000000000000000000000000000;;			query.Set("all", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverResp, err := cli.get(ctx, "/images/json", query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return images, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.NewDecoder(serverResp.body).Decode(&images)
0000000000000000000000000000000000000000;;		ensureReaderClosed(serverResp)
0000000000000000000000000000000000000000;;		return images, err
0000000000000000000000000000000000000000;;	}
