0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_wait.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_wait.go][vendor/github.com/docker/engine-api/client/container_wait.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerWait pauses execution until a container exits.
0000000000000000000000000000000000000000;;	// It returns the API status code as response of its readiness.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerWait(ctx context.Context, containerID string) (int, error) {
0000000000000000000000000000000000000000;;		resp, err := cli.post(ctx, "/containers/"+containerID+"/wait", nil, nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var res types.ContainerWaitResponse
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.body).Decode(&res); err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.StatusCode, nil
0000000000000000000000000000000000000000;;	}
