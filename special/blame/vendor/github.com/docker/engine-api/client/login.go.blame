0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/login.go[Godeps/_workspace/src/github.com/docker/engine-api/client/login.go][vendor/github.com/docker/engine-api/client/login.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryLogin authenticates the docker server with a given docker registry.
0000000000000000000000000000000000000000;;	// It returns UnauthorizerError when the authentication fails.
0000000000000000000000000000000000000000;;	func (cli *Client) RegistryLogin(ctx context.Context, auth types.AuthConfig) (types.AuthResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := cli.post(ctx, "/auth", url.Values{}, auth, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp != nil && resp.statusCode == http.StatusUnauthorized {
0000000000000000000000000000000000000000;;			return types.AuthResponse{}, unauthorizedError{err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return types.AuthResponse{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response types.AuthResponse
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&response)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return response, err
0000000000000000000000000000000000000000;;	}
