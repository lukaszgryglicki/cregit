0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_create.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_create.go][vendor/github.com/docker/engine-api/client/container_create.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/container"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/network"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configWrapper struct {
0000000000000000000000000000000000000000;;		*container.Config
0000000000000000000000000000000000000000;;		HostConfig       *container.HostConfig
0000000000000000000000000000000000000000;;		NetworkingConfig *network.NetworkingConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerCreate creates a new container based in the given configuration.
0000000000000000000000000000000000000000;;	// It can be associated with a name, but it's not mandatory.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, containerName string) (types.ContainerCreateResponse, error) {
0000000000000000000000000000000000000000;;		var response types.ContainerCreateResponse
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if containerName != "" {
0000000000000000000000000000000000000000;;			query.Set("name", containerName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body := configWrapper{
0000000000000000000000000000000000000000;;			Config:           config,
0000000000000000000000000000000000000000;;			HostConfig:       hostConfig,
0000000000000000000000000000000000000000;;			NetworkingConfig: networkingConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverResp, err := cli.post(ctx, "/containers/create", query, body, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if serverResp != nil && serverResp.statusCode == 404 && strings.Contains(err.Error(), "No such image") {
0000000000000000000000000000000000000000;;				return response, imageNotFoundError{config.Image}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return response, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.NewDecoder(serverResp.body).Decode(&response)
0000000000000000000000000000000000000000;;		ensureReaderClosed(serverResp)
0000000000000000000000000000000000000000;;		return response, err
0000000000000000000000000000000000000000;;	}
