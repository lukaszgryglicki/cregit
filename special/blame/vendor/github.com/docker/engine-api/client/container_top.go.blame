0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_top.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_top.go][vendor/github.com/docker/engine-api/client/container_top.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerTop shows process information from within a container.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerTop(ctx context.Context, containerID string, arguments []string) (types.ContainerProcessList, error) {
0000000000000000000000000000000000000000;;		var response types.ContainerProcessList
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if len(arguments) > 0 {
0000000000000000000000000000000000000000;;			query.Set("ps_args", strings.Join(arguments, " "))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.get(ctx, "/containers/"+containerID+"/top", query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return response, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&response)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return response, err
0000000000000000000000000000000000000000;;	}
