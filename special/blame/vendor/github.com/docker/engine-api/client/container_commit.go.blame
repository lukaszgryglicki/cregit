0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_commit.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_commit.go][vendor/github.com/docker/engine-api/client/container_commit.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		distreference "github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/reference"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerCommit applies changes into a container and creates a new tagged image.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerCommit(ctx context.Context, container string, options types.ContainerCommitOptions) (types.ContainerCommitResponse, error) {
0000000000000000000000000000000000000000;;		var repository, tag string
0000000000000000000000000000000000000000;;		if options.Reference != "" {
0000000000000000000000000000000000000000;;			distributionRef, err := distreference.ParseNamed(options.Reference)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return types.ContainerCommitResponse{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, isCanonical := distributionRef.(distreference.Canonical); isCanonical {
0000000000000000000000000000000000000000;;				return types.ContainerCommitResponse{}, errors.New("refusing to create a tag with a digest reference")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			tag = reference.GetTagFromNamedRef(distributionRef)
0000000000000000000000000000000000000000;;			repository = distributionRef.Name()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("container", container)
0000000000000000000000000000000000000000;;		query.Set("repo", repository)
0000000000000000000000000000000000000000;;		query.Set("tag", tag)
0000000000000000000000000000000000000000;;		query.Set("comment", options.Comment)
0000000000000000000000000000000000000000;;		query.Set("author", options.Author)
0000000000000000000000000000000000000000;;		for _, change := range options.Changes {
0000000000000000000000000000000000000000;;			query.Add("changes", change)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.Pause != true {
0000000000000000000000000000000000000000;;			query.Set("pause", "0")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response types.ContainerCommitResponse
0000000000000000000000000000000000000000;;		resp, err := cli.post(ctx, "/commit", query, options.Config, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return response, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&response)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return response, err
0000000000000000000000000000000000000000;;	}
