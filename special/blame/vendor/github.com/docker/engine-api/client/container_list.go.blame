0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_list.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_list.go][vendor/github.com/docker/engine-api/client/container_list.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerList returns the list of containers in the docker host.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerList(ctx context.Context, options types.ContainerListOptions) ([]types.Container, error) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.All {
0000000000000000000000000000000000000000;;			query.Set("all", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Limit != -1 {
0000000000000000000000000000000000000000;;			query.Set("limit", strconv.Itoa(options.Limit))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Since != "" {
0000000000000000000000000000000000000000;;			query.Set("since", options.Since)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Before != "" {
0000000000000000000000000000000000000000;;			query.Set("before", options.Before)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Size {
0000000000000000000000000000000000000000;;			query.Set("size", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Filter.Len() > 0 {
0000000000000000000000000000000000000000;;			filterJSON, err := filters.ToParamWithVersion(cli.version, options.Filter)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			query.Set("filters", filterJSON)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.get(ctx, "/containers/json", query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var containers []types.Container
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&containers)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return containers, err
0000000000000000000000000000000000000000;;	}
