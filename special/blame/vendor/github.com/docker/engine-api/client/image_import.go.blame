0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_import.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_import.go][vendor/github.com/docker/engine-api/client/image_import.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageImport creates a new image based in the source options.
0000000000000000000000000000000000000000;;	// It returns the JSON content in the response body.
0000000000000000000000000000000000000000;;	func (cli *Client) ImageImport(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		if ref != "" {
0000000000000000000000000000000000000000;;			//Check if the given image name can be resolved
0000000000000000000000000000000000000000;;			if _, err := reference.ParseNamed(ref); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("fromSrc", source.SourceName)
0000000000000000000000000000000000000000;;		query.Set("repo", ref)
0000000000000000000000000000000000000000;;		query.Set("tag", options.Tag)
0000000000000000000000000000000000000000;;		query.Set("message", options.Message)
0000000000000000000000000000000000000000;;		for _, change := range options.Changes {
0000000000000000000000000000000000000000;;			query.Add("changes", change)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.postRaw(ctx, "/images/create", query, source.Source, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp.body, nil
0000000000000000000000000000000000000000;;	}
