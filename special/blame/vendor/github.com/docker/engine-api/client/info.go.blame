0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/info.go[Godeps/_workspace/src/github.com/docker/engine-api/client/info.go][vendor/github.com/docker/engine-api/client/info.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Info returns information about the docker server.
0000000000000000000000000000000000000000;;	func (cli *Client) Info(ctx context.Context) (types.Info, error) {
0000000000000000000000000000000000000000;;		var info types.Info
0000000000000000000000000000000000000000;;		serverResp, err := cli.get(ctx, "/info", url.Values{}, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return info, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer ensureReaderClosed(serverResp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(serverResp.body).Decode(&info); err != nil {
0000000000000000000000000000000000000000;;			return info, fmt.Errorf("Error reading remote info: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return info, nil
0000000000000000000000000000000000000000;;	}
