0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_attach.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_attach.go][vendor/github.com/docker/engine-api/client/container_attach.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerAttach attaches a connection to a container in the server.
0000000000000000000000000000000000000000;;	// It returns a types.HijackedConnection with the hijacked connection
0000000000000000000000000000000000000000;;	// and the a reader to get output. It's up to the called to close
0000000000000000000000000000000000000000;;	// the hijacked connection by calling types.HijackedResponse.Close.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerAttach(ctx context.Context, container string, options types.ContainerAttachOptions) (types.HijackedResponse, error) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if options.Stream {
0000000000000000000000000000000000000000;;			query.Set("stream", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.Stdin {
0000000000000000000000000000000000000000;;			query.Set("stdin", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.Stdout {
0000000000000000000000000000000000000000;;			query.Set("stdout", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.Stderr {
0000000000000000000000000000000000000000;;			query.Set("stderr", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.DetachKeys != "" {
0000000000000000000000000000000000000000;;			query.Set("detachKeys", options.DetachKeys)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers := map[string][]string{"Content-Type": {"text/plain"}}
0000000000000000000000000000000000000000;;		return cli.postHijacked(ctx, "/containers/"+container+"/attach", query, nil, headers)
0000000000000000000000000000000000000000;;	}
