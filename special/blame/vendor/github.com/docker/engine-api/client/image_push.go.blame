0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_push.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_push.go][vendor/github.com/docker/engine-api/client/image_push.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		distreference "github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImagePush requests the docker host to push an image to a remote registry.
0000000000000000000000000000000000000000;;	// It executes the privileged function if the operation is unauthorized
0000000000000000000000000000000000000000;;	// and it tries one more time.
0000000000000000000000000000000000000000;;	// It's up to the caller to handle the io.ReadCloser and close it properly.
0000000000000000000000000000000000000000;;	func (cli *Client) ImagePush(ctx context.Context, ref string, options types.ImagePushOptions) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		distributionRef, err := distreference.ParseNamed(ref)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, isCanonical := distributionRef.(distreference.Canonical); isCanonical {
0000000000000000000000000000000000000000;;			return nil, errors.New("cannot push a digest reference")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var tag = ""
0000000000000000000000000000000000000000;;		if nameTaggedRef, isNamedTagged := distributionRef.(distreference.NamedTagged); isNamedTagged {
0000000000000000000000000000000000000000;;			tag = nameTaggedRef.Tag()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("tag", tag)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.tryImagePush(ctx, distributionRef.Name(), query, options.RegistryAuth)
0000000000000000000000000000000000000000;;		if resp.statusCode == http.StatusUnauthorized {
0000000000000000000000000000000000000000;;			newAuthHeader, privilegeErr := options.PrivilegeFunc()
0000000000000000000000000000000000000000;;			if privilegeErr != nil {
0000000000000000000000000000000000000000;;				return nil, privilegeErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp, err = cli.tryImagePush(ctx, distributionRef.Name(), query, newAuthHeader)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp.body, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cli *Client) tryImagePush(ctx context.Context, imageID string, query url.Values, registryAuth string) (*serverResponse, error) {
0000000000000000000000000000000000000000;;		headers := map[string][]string{"X-Registry-Auth": {registryAuth}}
0000000000000000000000000000000000000000;;		return cli.post(ctx, "/images/"+imageID+"/push", query, nil, headers)
0000000000000000000000000000000000000000;;	}
