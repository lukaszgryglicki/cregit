0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_inspect.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_inspect.go][vendor/github.com/docker/engine-api/client/container_inspect.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerInspect returns the container information.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerInspect(ctx context.Context, containerID string) (types.ContainerJSON, error) {
0000000000000000000000000000000000000000;;		serverResp, err := cli.get(ctx, "/containers/"+containerID+"/json", nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if serverResp.statusCode == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return types.ContainerJSON{}, containerNotFoundError{containerID}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return types.ContainerJSON{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response types.ContainerJSON
0000000000000000000000000000000000000000;;		err = json.NewDecoder(serverResp.body).Decode(&response)
0000000000000000000000000000000000000000;;		ensureReaderClosed(serverResp)
0000000000000000000000000000000000000000;;		return response, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerInspectWithRaw returns the container information and it's raw representation.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerInspectWithRaw(ctx context.Context, containerID string, getSize bool) (types.ContainerJSON, []byte, error) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if getSize {
0000000000000000000000000000000000000000;;			query.Set("size", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serverResp, err := cli.get(ctx, "/containers/"+containerID+"/json", query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if serverResp.statusCode == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return types.ContainerJSON{}, nil, containerNotFoundError{containerID}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return types.ContainerJSON{}, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer ensureReaderClosed(serverResp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, err := ioutil.ReadAll(serverResp.body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return types.ContainerJSON{}, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response types.ContainerJSON
0000000000000000000000000000000000000000;;		rdr := bytes.NewReader(body)
0000000000000000000000000000000000000000;;		err = json.NewDecoder(rdr).Decode(&response)
0000000000000000000000000000000000000000;;		return response, body, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cli *Client) containerInspectWithResponse(ctx context.Context, containerID string, query url.Values) (types.ContainerJSON, *serverResponse, error) {
0000000000000000000000000000000000000000;;		serverResp, err := cli.get(ctx, "/containers/"+containerID+"/json", nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return types.ContainerJSON{}, serverResp, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response types.ContainerJSON
0000000000000000000000000000000000000000;;		err = json.NewDecoder(serverResp.body).Decode(&response)
0000000000000000000000000000000000000000;;		return response, serverResp, err
0000000000000000000000000000000000000000;;	}
