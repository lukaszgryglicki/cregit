0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_tag.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_tag.go][vendor/github.com/docker/engine-api/client/image_tag.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		distreference "github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/reference"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageTag tags an image in the docker host
0000000000000000000000000000000000000000;;	func (cli *Client) ImageTag(ctx context.Context, imageID, ref string, options types.ImageTagOptions) error {
0000000000000000000000000000000000000000;;		distributionRef, err := distreference.ParseNamed(ref)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Error parsing reference: %q is not a valid repository/tag", ref)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, isCanonical := distributionRef.(distreference.Canonical); isCanonical {
0000000000000000000000000000000000000000;;			return errors.New("refusing to create a tag with a digest reference")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tag := reference.GetTagFromNamedRef(distributionRef)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("repo", distributionRef.Name())
0000000000000000000000000000000000000000;;		query.Set("tag", tag)
0000000000000000000000000000000000000000;;		if options.Force {
0000000000000000000000000000000000000000;;			query.Set("force", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.post(ctx, "/images/"+imageID+"/tag", query, nil, nil)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
