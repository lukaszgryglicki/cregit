0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/network_inspect.go[Godeps/_workspace/src/github.com/docker/engine-api/client/network_inspect.go][vendor/github.com/docker/engine-api/client/network_inspect.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkInspect returns the information for a specific network configured in the docker host.
0000000000000000000000000000000000000000;;	func (cli *Client) NetworkInspect(ctx context.Context, networkID string) (types.NetworkResource, error) {
0000000000000000000000000000000000000000;;		var networkResource types.NetworkResource
0000000000000000000000000000000000000000;;		resp, err := cli.get(ctx, "/networks/"+networkID, nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if resp.statusCode == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return networkResource, networkNotFoundError{networkID}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return networkResource, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.body).Decode(&networkResource)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return networkResource, err
0000000000000000000000000000000000000000;;	}
