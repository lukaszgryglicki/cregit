0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/client.go[Godeps/_workspace/src/github.com/docker/engine-api/client/client.go][vendor/github.com/docker/engine-api/client/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/client/transport"
0000000000000000000000000000000000000000;;		"github.com/docker/go-connections/tlsconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Client is the API client that performs all operations
0000000000000000000000000000000000000000;;	// against a docker server.
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		// proto holds the client protocol i.e. unix.
0000000000000000000000000000000000000000;;		proto string
0000000000000000000000000000000000000000;;		// addr holds the client address.
0000000000000000000000000000000000000000;;		addr string
0000000000000000000000000000000000000000;;		// basePath holds the path to prepend to the requests.
0000000000000000000000000000000000000000;;		basePath string
0000000000000000000000000000000000000000;;		// transport is the interface to send request with, it implements transport.Client.
0000000000000000000000000000000000000000;;		transport transport.Client
0000000000000000000000000000000000000000;;		// version of the server to talk to.
0000000000000000000000000000000000000000;;		version string
0000000000000000000000000000000000000000;;		// custom http headers configured by users.
0000000000000000000000000000000000000000;;		customHTTPHeaders map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEnvClient initializes a new API client based on environment variables.
0000000000000000000000000000000000000000;;	// Use DOCKER_HOST to set the url to the docker server.
0000000000000000000000000000000000000000;;	// Use DOCKER_API_VERSION to set the version of the API to reach, leave empty for latest.
0000000000000000000000000000000000000000;;	// Use DOCKER_CERT_PATH to load the tls certificates from.
0000000000000000000000000000000000000000;;	// Use DOCKER_TLS_VERIFY to enable or disable TLS verification, off by default.
0000000000000000000000000000000000000000;;	func NewEnvClient() (*Client, error) {
0000000000000000000000000000000000000000;;		var client *http.Client
0000000000000000000000000000000000000000;;		if dockerCertPath := os.Getenv("DOCKER_CERT_PATH"); dockerCertPath != "" {
0000000000000000000000000000000000000000;;			options := tlsconfig.Options{
0000000000000000000000000000000000000000;;				CAFile:             filepath.Join(dockerCertPath, "ca.pem"),
0000000000000000000000000000000000000000;;				CertFile:           filepath.Join(dockerCertPath, "cert.pem"),
0000000000000000000000000000000000000000;;				KeyFile:            filepath.Join(dockerCertPath, "key.pem"),
0000000000000000000000000000000000000000;;				InsecureSkipVerify: os.Getenv("DOCKER_TLS_VERIFY") == "",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tlsc, err := tlsconfig.Client(options)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			client = &http.Client{
0000000000000000000000000000000000000000;;				Transport: &http.Transport{
0000000000000000000000000000000000000000;;					TLSClientConfig: tlsc,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		host := os.Getenv("DOCKER_HOST")
0000000000000000000000000000000000000000;;		if host == "" {
0000000000000000000000000000000000000000;;			host = DefaultDockerHost
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewClient(host, os.Getenv("DOCKER_API_VERSION"), client, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient initializes a new API client for the given host and API version.
0000000000000000000000000000000000000000;;	// It won't send any version information if the version number is empty.
0000000000000000000000000000000000000000;;	// It uses the given http client as transport.
0000000000000000000000000000000000000000;;	// It also initializes the custom http headers to add to each request.
0000000000000000000000000000000000000000;;	func NewClient(host string, version string, client *http.Client, httpHeaders map[string]string) (*Client, error) {
0000000000000000000000000000000000000000;;		proto, addr, basePath, err := ParseHost(host)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		transport, err := transport.NewTransportWithHTTP(proto, addr, client)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Client{
0000000000000000000000000000000000000000;;			proto:             proto,
0000000000000000000000000000000000000000;;			addr:              addr,
0000000000000000000000000000000000000000;;			basePath:          basePath,
0000000000000000000000000000000000000000;;			transport:         transport,
0000000000000000000000000000000000000000;;			version:           version,
0000000000000000000000000000000000000000;;			customHTTPHeaders: httpHeaders,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getAPIPath returns the versioned request path to call the api.
0000000000000000000000000000000000000000;;	// It appends the query parameters to the path if they are not empty.
0000000000000000000000000000000000000000;;	func (cli *Client) getAPIPath(p string, query url.Values) string {
0000000000000000000000000000000000000000;;		var apiPath string
0000000000000000000000000000000000000000;;		if cli.version != "" {
0000000000000000000000000000000000000000;;			v := strings.TrimPrefix(cli.version, "v")
0000000000000000000000000000000000000000;;			apiPath = fmt.Sprintf("%s/v%s%s", cli.basePath, v, p)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			apiPath = fmt.Sprintf("%s%s", cli.basePath, p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := &url.URL{
0000000000000000000000000000000000000000;;			Path: apiPath,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(query) > 0 {
0000000000000000000000000000000000000000;;			u.RawQuery = query.Encode()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClientVersion returns the version string associated with this
0000000000000000000000000000000000000000;;	// instance of the Client. Note that this value can be changed
0000000000000000000000000000000000000000;;	// via the DOCKER_API_VERSION env var.
0000000000000000000000000000000000000000;;	func (cli *Client) ClientVersion() string {
0000000000000000000000000000000000000000;;		return cli.version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateClientVersion updates the version string associated with this
0000000000000000000000000000000000000000;;	// instance of the Client.
0000000000000000000000000000000000000000;;	func (cli *Client) UpdateClientVersion(v string) {
0000000000000000000000000000000000000000;;		cli.version = v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseHost verifies that the given host strings is valid.
0000000000000000000000000000000000000000;;	func ParseHost(host string) (string, string, string, error) {
0000000000000000000000000000000000000000;;		protoAddrParts := strings.SplitN(host, "://", 2)
0000000000000000000000000000000000000000;;		if len(protoAddrParts) == 1 {
0000000000000000000000000000000000000000;;			return "", "", "", fmt.Errorf("unable to parse docker host `%s`", host)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var basePath string
0000000000000000000000000000000000000000;;		proto, addr := protoAddrParts[0], protoAddrParts[1]
0000000000000000000000000000000000000000;;		if proto == "tcp" {
0000000000000000000000000000000000000000;;			parsed, err := url.Parse("tcp://" + addr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", "", "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			addr = parsed.Host
0000000000000000000000000000000000000000;;			basePath = parsed.Path
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return proto, addr, basePath, nil
0000000000000000000000000000000000000000;;	}
