0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_remove.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_remove.go][vendor/github.com/docker/engine-api/client/container_remove.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerRemove kills and removes a container from the docker host.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerRemove(ctx context.Context, containerID string, options types.ContainerRemoveOptions) error {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if options.RemoveVolumes {
0000000000000000000000000000000000000000;;			query.Set("v", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.RemoveLinks {
0000000000000000000000000000000000000000;;			query.Set("link", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Force {
0000000000000000000000000000000000000000;;			query.Set("force", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.delete(ctx, "/containers/"+containerID, query, nil)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
