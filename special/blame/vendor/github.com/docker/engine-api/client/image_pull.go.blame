0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_pull.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_pull.go][vendor/github.com/docker/engine-api/client/image_pull.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/reference"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImagePull requests the docker host to pull an image from a remote registry.
0000000000000000000000000000000000000000;;	// It executes the privileged function if the operation is unauthorized
0000000000000000000000000000000000000000;;	// and it tries one more time.
0000000000000000000000000000000000000000;;	// It's up to the caller to handle the io.ReadCloser and close it properly.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// FIXME(vdemeester): there is currently used in a few way in docker/docker
0000000000000000000000000000000000000000;;	// - if not in trusted content, ref is used to pass the whole reference, and tag is empty
0000000000000000000000000000000000000000;;	// - if in trusted content, ref is used to pass the reference name, and tag for the digest
0000000000000000000000000000000000000000;;	func (cli *Client) ImagePull(ctx context.Context, ref string, options types.ImagePullOptions) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		repository, tag, err := reference.Parse(ref)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("fromImage", repository)
0000000000000000000000000000000000000000;;		if tag != "" && !options.All {
0000000000000000000000000000000000000000;;			query.Set("tag", tag)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.tryImageCreate(ctx, query, options.RegistryAuth)
0000000000000000000000000000000000000000;;		if resp.statusCode == http.StatusUnauthorized && options.PrivilegeFunc != nil {
0000000000000000000000000000000000000000;;			newAuthHeader, privilegeErr := options.PrivilegeFunc()
0000000000000000000000000000000000000000;;			if privilegeErr != nil {
0000000000000000000000000000000000000000;;				return nil, privilegeErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp, err = cli.tryImageCreate(ctx, query, newAuthHeader)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp.body, nil
0000000000000000000000000000000000000000;;	}
