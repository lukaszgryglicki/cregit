0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/image_create.go[Godeps/_workspace/src/github.com/docker/engine-api/client/image_create.go][vendor/github.com/docker/engine-api/client/image_create.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/reference"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageCreate creates a new image based in the parent options.
0000000000000000000000000000000000000000;;	// It returns the JSON content in the response body.
0000000000000000000000000000000000000000;;	func (cli *Client) ImageCreate(ctx context.Context, parentReference string, options types.ImageCreateOptions) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		repository, tag, err := reference.Parse(parentReference)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("fromImage", repository)
0000000000000000000000000000000000000000;;		query.Set("tag", tag)
0000000000000000000000000000000000000000;;		resp, err := cli.tryImageCreate(ctx, query, options.RegistryAuth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp.body, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cli *Client) tryImageCreate(ctx context.Context, query url.Values, registryAuth string) (*serverResponse, error) {
0000000000000000000000000000000000000000;;		headers := map[string][]string{"X-Registry-Auth": {registryAuth}}
0000000000000000000000000000000000000000;;		return cli.post(ctx, "/images/create", query, nil, headers)
0000000000000000000000000000000000000000;;	}
