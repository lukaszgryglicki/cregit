0000000000000000000000000000000000000000;;	package transport
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/transport/client.go[Godeps/_workspace/src/github.com/docker/engine-api/client/transport/client.go][vendor/github.com/docker/engine-api/client/transport/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sender is an interface that clients must implement
0000000000000000000000000000000000000000;;	// to be able to send requests to a remote connection.
0000000000000000000000000000000000000000;;	type Sender interface {
0000000000000000000000000000000000000000;;		// Do sends request to a remote endpoint.
0000000000000000000000000000000000000000;;		Do(*http.Request) (*http.Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Client is an interface that abstracts all remote connections.
0000000000000000000000000000000000000000;;	type Client interface {
0000000000000000000000000000000000000000;;		Sender
0000000000000000000000000000000000000000;;		// Secure tells whether the connection is secure or not.
0000000000000000000000000000000000000000;;		Secure() bool
0000000000000000000000000000000000000000;;		// Scheme returns the connection protocol the client uses.
0000000000000000000000000000000000000000;;		Scheme() string
0000000000000000000000000000000000000000;;		// TLSConfig returns any TLS configuration the client uses.
0000000000000000000000000000000000000000;;		TLSConfig() *tls.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tlsInfo returns information about the TLS configuration.
0000000000000000000000000000000000000000;;	type tlsInfo struct {
0000000000000000000000000000000000000000;;		tlsConfig *tls.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TLSConfig returns the TLS configuration.
0000000000000000000000000000000000000000;;	func (t *tlsInfo) TLSConfig() *tls.Config {
0000000000000000000000000000000000000000;;		return t.tlsConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scheme returns protocol scheme to use.
0000000000000000000000000000000000000000;;	func (t *tlsInfo) Scheme() string {
0000000000000000000000000000000000000000;;		if t.tlsConfig != nil {
0000000000000000000000000000000000000000;;			return "https"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "http"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Secure returns true if there is a TLS configuration.
0000000000000000000000000000000000000000;;	func (t *tlsInfo) Secure() bool {
0000000000000000000000000000000000000000;;		return t.tlsConfig != nil
0000000000000000000000000000000000000000;;	}
