0000000000000000000000000000000000000000;;	// Package transport provides function to send request to remote endpoints.
0000000000000000000000000000000000000000;;	package transport
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/transport/transport.go[Godeps/_workspace/src/github.com/docker/engine-api/client/transport/transport.go][vendor/github.com/docker/engine-api/client/transport/transport.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/go-connections/sockets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// apiTransport holds information about the http transport to connect with the API.
0000000000000000000000000000000000000000;;	type apiTransport struct {
0000000000000000000000000000000000000000;;		*http.Client
0000000000000000000000000000000000000000;;		*tlsInfo
0000000000000000000000000000000000000000;;		transport *http.Transport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTransportWithHTTP creates a new transport based on the provided proto, address and http client.
0000000000000000000000000000000000000000;;	// It uses Docker's default http transport configuration if the client is nil.
0000000000000000000000000000000000000000;;	// It does not modify the client's transport if it's not nil.
0000000000000000000000000000000000000000;;	func NewTransportWithHTTP(proto, addr string, client *http.Client) (Client, error) {
0000000000000000000000000000000000000000;;		var transport *http.Transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if client != nil {
0000000000000000000000000000000000000000;;			tr, ok := client.Transport.(*http.Transport)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unable to verify TLS configuration, invalid transport %v", client.Transport)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			transport = tr
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			transport = defaultTransport(proto, addr)
0000000000000000000000000000000000000000;;			client = &http.Client{
0000000000000000000000000000000000000000;;				Transport: transport,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &apiTransport{
0000000000000000000000000000000000000000;;			Client:    client,
0000000000000000000000000000000000000000;;			tlsInfo:   &tlsInfo{transport.TLSClientConfig},
0000000000000000000000000000000000000000;;			transport: transport,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelRequest stops a request execution.
0000000000000000000000000000000000000000;;	func (a *apiTransport) CancelRequest(req *http.Request) {
0000000000000000000000000000000000000000;;		a.transport.CancelRequest(req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultTransport creates a new http.Transport with Docker's
0000000000000000000000000000000000000000;;	// default transport configuration.
0000000000000000000000000000000000000000;;	func defaultTransport(proto, addr string) *http.Transport {
0000000000000000000000000000000000000000;;		tr := new(http.Transport)
0000000000000000000000000000000000000000;;		sockets.ConfigureTransport(tr, proto, addr)
0000000000000000000000000000000000000000;;		return tr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Client = &apiTransport{}
