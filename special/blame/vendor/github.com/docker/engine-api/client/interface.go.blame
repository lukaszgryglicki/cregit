0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/interface.go[Godeps/_workspace/src/github.com/docker/engine-api/client/interface.go][vendor/github.com/docker/engine-api/client/interface.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/container"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/network"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/registry"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIClient is an interface that clients that talk with a docker server must implement.
0000000000000000000000000000000000000000;;	type APIClient interface {
0000000000000000000000000000000000000000;;		ClientVersion() string
0000000000000000000000000000000000000000;;		ContainerAttach(ctx context.Context, container string, options types.ContainerAttachOptions) (types.HijackedResponse, error)
0000000000000000000000000000000000000000;;		ContainerCommit(ctx context.Context, container string, options types.ContainerCommitOptions) (types.ContainerCommitResponse, error)
0000000000000000000000000000000000000000;;		ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, containerName string) (types.ContainerCreateResponse, error)
0000000000000000000000000000000000000000;;		ContainerDiff(ctx context.Context, container string) ([]types.ContainerChange, error)
0000000000000000000000000000000000000000;;		ContainerExecAttach(ctx context.Context, execID string, config types.ExecConfig) (types.HijackedResponse, error)
0000000000000000000000000000000000000000;;		ContainerExecCreate(ctx context.Context, container string, config types.ExecConfig) (types.ContainerExecCreateResponse, error)
0000000000000000000000000000000000000000;;		ContainerExecInspect(ctx context.Context, execID string) (types.ContainerExecInspect, error)
0000000000000000000000000000000000000000;;		ContainerExecResize(ctx context.Context, execID string, options types.ResizeOptions) error
0000000000000000000000000000000000000000;;		ContainerExecStart(ctx context.Context, execID string, config types.ExecStartCheck) error
0000000000000000000000000000000000000000;;		ContainerExport(ctx context.Context, container string) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ContainerInspect(ctx context.Context, container string) (types.ContainerJSON, error)
0000000000000000000000000000000000000000;;		ContainerInspectWithRaw(ctx context.Context, container string, getSize bool) (types.ContainerJSON, []byte, error)
0000000000000000000000000000000000000000;;		ContainerKill(ctx context.Context, container, signal string) error
0000000000000000000000000000000000000000;;		ContainerList(ctx context.Context, options types.ContainerListOptions) ([]types.Container, error)
0000000000000000000000000000000000000000;;		ContainerLogs(ctx context.Context, container string, options types.ContainerLogsOptions) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ContainerPause(ctx context.Context, container string) error
0000000000000000000000000000000000000000;;		ContainerRemove(ctx context.Context, container string, options types.ContainerRemoveOptions) error
0000000000000000000000000000000000000000;;		ContainerRename(ctx context.Context, container, newContainerName string) error
0000000000000000000000000000000000000000;;		ContainerResize(ctx context.Context, container string, options types.ResizeOptions) error
0000000000000000000000000000000000000000;;		ContainerRestart(ctx context.Context, container string, timeout int) error
0000000000000000000000000000000000000000;;		ContainerStatPath(ctx context.Context, container, path string) (types.ContainerPathStat, error)
0000000000000000000000000000000000000000;;		ContainerStats(ctx context.Context, container string, stream bool) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ContainerStart(ctx context.Context, container string) error
0000000000000000000000000000000000000000;;		ContainerStop(ctx context.Context, container string, timeout int) error
0000000000000000000000000000000000000000;;		ContainerTop(ctx context.Context, container string, arguments []string) (types.ContainerProcessList, error)
0000000000000000000000000000000000000000;;		ContainerUnpause(ctx context.Context, container string) error
0000000000000000000000000000000000000000;;		ContainerUpdate(ctx context.Context, container string, updateConfig container.UpdateConfig) error
0000000000000000000000000000000000000000;;		ContainerWait(ctx context.Context, container string) (int, error)
0000000000000000000000000000000000000000;;		CopyFromContainer(ctx context.Context, container, srcPath string) (io.ReadCloser, types.ContainerPathStat, error)
0000000000000000000000000000000000000000;;		CopyToContainer(ctx context.Context, container, path string, content io.Reader, options types.CopyToContainerOptions) error
0000000000000000000000000000000000000000;;		Events(ctx context.Context, options types.EventsOptions) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ImageBuild(ctx context.Context, context io.Reader, options types.ImageBuildOptions) (types.ImageBuildResponse, error)
0000000000000000000000000000000000000000;;		ImageCreate(ctx context.Context, parentReference string, options types.ImageCreateOptions) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ImageHistory(ctx context.Context, image string) ([]types.ImageHistory, error)
0000000000000000000000000000000000000000;;		ImageImport(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ImageInspectWithRaw(ctx context.Context, image string, getSize bool) (types.ImageInspect, []byte, error)
0000000000000000000000000000000000000000;;		ImageList(ctx context.Context, options types.ImageListOptions) ([]types.Image, error)
0000000000000000000000000000000000000000;;		ImageLoad(ctx context.Context, input io.Reader, quiet bool) (types.ImageLoadResponse, error)
0000000000000000000000000000000000000000;;		ImagePull(ctx context.Context, ref string, options types.ImagePullOptions) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ImagePush(ctx context.Context, ref string, options types.ImagePushOptions) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ImageRemove(ctx context.Context, image string, options types.ImageRemoveOptions) ([]types.ImageDelete, error)
0000000000000000000000000000000000000000;;		ImageSearch(ctx context.Context, term string, options types.ImageSearchOptions) ([]registry.SearchResult, error)
0000000000000000000000000000000000000000;;		ImageSave(ctx context.Context, images []string) (io.ReadCloser, error)
0000000000000000000000000000000000000000;;		ImageTag(ctx context.Context, image, ref string, options types.ImageTagOptions) error
0000000000000000000000000000000000000000;;		Info(ctx context.Context) (types.Info, error)
0000000000000000000000000000000000000000;;		NetworkConnect(ctx context.Context, networkID, container string, config *network.EndpointSettings) error
0000000000000000000000000000000000000000;;		NetworkCreate(ctx context.Context, name string, options types.NetworkCreate) (types.NetworkCreateResponse, error)
0000000000000000000000000000000000000000;;		NetworkDisconnect(ctx context.Context, networkID, container string, force bool) error
0000000000000000000000000000000000000000;;		NetworkInspect(ctx context.Context, networkID string) (types.NetworkResource, error)
0000000000000000000000000000000000000000;;		NetworkList(ctx context.Context, options types.NetworkListOptions) ([]types.NetworkResource, error)
0000000000000000000000000000000000000000;;		NetworkRemove(ctx context.Context, networkID string) error
0000000000000000000000000000000000000000;;		RegistryLogin(ctx context.Context, auth types.AuthConfig) (types.AuthResponse, error)
0000000000000000000000000000000000000000;;		ServerVersion(ctx context.Context) (types.Version, error)
0000000000000000000000000000000000000000;;		UpdateClientVersion(v string)
0000000000000000000000000000000000000000;;		VolumeCreate(ctx context.Context, options types.VolumeCreateRequest) (types.Volume, error)
0000000000000000000000000000000000000000;;		VolumeInspect(ctx context.Context, volumeID string) (types.Volume, error)
0000000000000000000000000000000000000000;;		VolumeList(ctx context.Context, filter filters.Args) (types.VolumesListResponse, error)
0000000000000000000000000000000000000000;;		VolumeRemove(ctx context.Context, volumeID string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure that Client always implements APIClient.
0000000000000000000000000000000000000000;;	var _ APIClient = &Client{}
