0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/network_create.go[Godeps/_workspace/src/github.com/docker/engine-api/client/network_create.go][vendor/github.com/docker/engine-api/client/network_create.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkCreate creates a new network in the docker host.
0000000000000000000000000000000000000000;;	func (cli *Client) NetworkCreate(ctx context.Context, name string, options types.NetworkCreate) (types.NetworkCreateResponse, error) {
0000000000000000000000000000000000000000;;		networkCreateRequest := types.NetworkCreateRequest{
0000000000000000000000000000000000000000;;			NetworkCreate: options,
0000000000000000000000000000000000000000;;			Name:          name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var response types.NetworkCreateResponse
0000000000000000000000000000000000000000;;		serverResp, err := cli.post(ctx, "/networks/create", nil, networkCreateRequest, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return response, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json.NewDecoder(serverResp.body).Decode(&response)
0000000000000000000000000000000000000000;;		ensureReaderClosed(serverResp)
0000000000000000000000000000000000000000;;		return response, err
0000000000000000000000000000000000000000;;	}
