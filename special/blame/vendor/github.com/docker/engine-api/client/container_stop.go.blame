0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_stop.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_stop.go][vendor/github.com/docker/engine-api/client/container_stop.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerStop stops a container without terminating the process.
0000000000000000000000000000000000000000;;	// The process is blocked until the container stops or the timeout expires.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerStop(ctx context.Context, containerID string, timeout int) error {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		query.Set("t", strconv.Itoa(timeout))
0000000000000000000000000000000000000000;;		resp, err := cli.post(ctx, "/containers/"+containerID+"/stop", query, nil, nil)
0000000000000000000000000000000000000000;;		ensureReaderClosed(resp)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
