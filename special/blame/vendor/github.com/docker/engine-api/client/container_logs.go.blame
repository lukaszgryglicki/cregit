0000000000000000000000000000000000000000;;	package client
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/client/container_logs.go[Godeps/_workspace/src/github.com/docker/engine-api/client/container_logs.go][vendor/github.com/docker/engine-api/client/container_logs.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		timetypes "github.com/docker/engine-api/types/time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerLogs returns the logs generated by a container in an io.ReadCloser.
0000000000000000000000000000000000000000;;	// It's up to the caller to close the stream.
0000000000000000000000000000000000000000;;	func (cli *Client) ContainerLogs(ctx context.Context, container string, options types.ContainerLogsOptions) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if options.ShowStdout {
0000000000000000000000000000000000000000;;			query.Set("stdout", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.ShowStderr {
0000000000000000000000000000000000000000;;			query.Set("stderr", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Since != "" {
0000000000000000000000000000000000000000;;			ts, err := timetypes.GetTimestamp(options.Since, time.Now())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query.Set("since", ts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Timestamps {
0000000000000000000000000000000000000000;;			query.Set("timestamps", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Details {
0000000000000000000000000000000000000000;;			query.Set("details", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.Follow {
0000000000000000000000000000000000000000;;			query.Set("follow", "1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		query.Set("tail", options.Tail)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := cli.get(ctx, "/containers/"+container+"/logs", query, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp.body, nil
0000000000000000000000000000000000000000;;	}
