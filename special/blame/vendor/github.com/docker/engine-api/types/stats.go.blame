0000000000000000000000000000000000000000;;	// Package types is used for API stability in the types and response to the
0000000000000000000000000000000000000000;;	// consumers of the API stats endpoint.
0000000000000000000000000000000000000000;;	package types
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/stats.go[Godeps/_workspace/src/github.com/docker/engine-api/types/stats.go][vendor/github.com/docker/engine-api/types/stats.go];	
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ThrottlingData stores CPU throttling stats of one running container
0000000000000000000000000000000000000000;;	type ThrottlingData struct {
0000000000000000000000000000000000000000;;		// Number of periods with throttling active
0000000000000000000000000000000000000000;;		Periods uint64 `json:"periods"`
0000000000000000000000000000000000000000;;		// Number of periods when the container hits its throttling limit.
0000000000000000000000000000000000000000;;		ThrottledPeriods uint64 `json:"throttled_periods"`
0000000000000000000000000000000000000000;;		// Aggregate time the container was throttled for in nanoseconds.
0000000000000000000000000000000000000000;;		ThrottledTime uint64 `json:"throttled_time"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CPUUsage stores All CPU stats aggregated since container inception.
0000000000000000000000000000000000000000;;	type CPUUsage struct {
0000000000000000000000000000000000000000;;		// Total CPU time consumed.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		TotalUsage uint64 `json:"total_usage"`
0000000000000000000000000000000000000000;;		// Total CPU time consumed per core.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		PercpuUsage []uint64 `json:"percpu_usage"`
0000000000000000000000000000000000000000;;		// Time spent by tasks of the cgroup in kernel mode.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		UsageInKernelmode uint64 `json:"usage_in_kernelmode"`
0000000000000000000000000000000000000000;;		// Time spent by tasks of the cgroup in user mode.
0000000000000000000000000000000000000000;;		// Units: nanoseconds.
0000000000000000000000000000000000000000;;		UsageInUsermode uint64 `json:"usage_in_usermode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CPUStats aggregates and wraps all CPU related info of container
0000000000000000000000000000000000000000;;	type CPUStats struct {
0000000000000000000000000000000000000000;;		CPUUsage       CPUUsage       `json:"cpu_usage"`
0000000000000000000000000000000000000000;;		SystemUsage    uint64         `json:"system_cpu_usage"`
0000000000000000000000000000000000000000;;		ThrottlingData ThrottlingData `json:"throttling_data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemoryStats aggregates All memory stats since container inception
0000000000000000000000000000000000000000;;	type MemoryStats struct {
0000000000000000000000000000000000000000;;		// current res_counter usage for memory
0000000000000000000000000000000000000000;;		Usage uint64 `json:"usage"`
0000000000000000000000000000000000000000;;		// maximum usage ever recorded.
0000000000000000000000000000000000000000;;		MaxUsage uint64 `json:"max_usage"`
0000000000000000000000000000000000000000;;		// TODO(vishh): Export these as stronger types.
0000000000000000000000000000000000000000;;		// all the stats exported via memory.stat.
0000000000000000000000000000000000000000;;		Stats map[string]uint64 `json:"stats"`
0000000000000000000000000000000000000000;;		// number of times memory usage hits limits.
0000000000000000000000000000000000000000;;		Failcnt uint64 `json:"failcnt"`
0000000000000000000000000000000000000000;;		Limit   uint64 `json:"limit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlkioStatEntry is one small entity to store a piece of Blkio stats
0000000000000000000000000000000000000000;;	// TODO Windows: This can be factored out
0000000000000000000000000000000000000000;;	type BlkioStatEntry struct {
0000000000000000000000000000000000000000;;		Major uint64 `json:"major"`
0000000000000000000000000000000000000000;;		Minor uint64 `json:"minor"`
0000000000000000000000000000000000000000;;		Op    string `json:"op"`
0000000000000000000000000000000000000000;;		Value uint64 `json:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlkioStats stores All IO service stats for data read and write
0000000000000000000000000000000000000000;;	// TODO Windows: This can be factored out
0000000000000000000000000000000000000000;;	type BlkioStats struct {
0000000000000000000000000000000000000000;;		// number of bytes transferred to and from the block device
0000000000000000000000000000000000000000;;		IoServiceBytesRecursive []BlkioStatEntry `json:"io_service_bytes_recursive"`
0000000000000000000000000000000000000000;;		IoServicedRecursive     []BlkioStatEntry `json:"io_serviced_recursive"`
0000000000000000000000000000000000000000;;		IoQueuedRecursive       []BlkioStatEntry `json:"io_queue_recursive"`
0000000000000000000000000000000000000000;;		IoServiceTimeRecursive  []BlkioStatEntry `json:"io_service_time_recursive"`
0000000000000000000000000000000000000000;;		IoWaitTimeRecursive     []BlkioStatEntry `json:"io_wait_time_recursive"`
0000000000000000000000000000000000000000;;		IoMergedRecursive       []BlkioStatEntry `json:"io_merged_recursive"`
0000000000000000000000000000000000000000;;		IoTimeRecursive         []BlkioStatEntry `json:"io_time_recursive"`
0000000000000000000000000000000000000000;;		SectorsRecursive        []BlkioStatEntry `json:"sectors_recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkStats aggregates All network stats of one container
0000000000000000000000000000000000000000;;	// TODO Windows: This will require refactoring
0000000000000000000000000000000000000000;;	type NetworkStats struct {
0000000000000000000000000000000000000000;;		RxBytes   uint64 `json:"rx_bytes"`
0000000000000000000000000000000000000000;;		RxPackets uint64 `json:"rx_packets"`
0000000000000000000000000000000000000000;;		RxErrors  uint64 `json:"rx_errors"`
0000000000000000000000000000000000000000;;		RxDropped uint64 `json:"rx_dropped"`
0000000000000000000000000000000000000000;;		TxBytes   uint64 `json:"tx_bytes"`
0000000000000000000000000000000000000000;;		TxPackets uint64 `json:"tx_packets"`
0000000000000000000000000000000000000000;;		TxErrors  uint64 `json:"tx_errors"`
0000000000000000000000000000000000000000;;		TxDropped uint64 `json:"tx_dropped"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PidsStats contains the stats of a container's pids
0000000000000000000000000000000000000000;;	type PidsStats struct {
0000000000000000000000000000000000000000;;		// Current is the number of pids in the cgroup
0000000000000000000000000000000000000000;;		Current uint64 `json:"current,omitempty"`
0000000000000000000000000000000000000000;;		// Limit is the hard limit on the number of pids in the cgroup.
0000000000000000000000000000000000000000;;		// A "Limit" of 0 means that there is no limit.
0000000000000000000000000000000000000000;;		Limit uint64 `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stats is Ultimate struct aggregating all types of stats of one container
0000000000000000000000000000000000000000;;	type Stats struct {
0000000000000000000000000000000000000000;;		Read        time.Time   `json:"read"`
0000000000000000000000000000000000000000;;		PreCPUStats CPUStats    `json:"precpu_stats,omitempty"`
0000000000000000000000000000000000000000;;		CPUStats    CPUStats    `json:"cpu_stats,omitempty"`
0000000000000000000000000000000000000000;;		MemoryStats MemoryStats `json:"memory_stats,omitempty"`
0000000000000000000000000000000000000000;;		BlkioStats  BlkioStats  `json:"blkio_stats,omitempty"`
0000000000000000000000000000000000000000;;		PidsStats   PidsStats   `json:"pids_stats,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatsJSON is newly used Networks
0000000000000000000000000000000000000000;;	type StatsJSON struct {
0000000000000000000000000000000000000000;;		Stats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Networks request version >=1.21
0000000000000000000000000000000000000000;;		Networks map[string]NetworkStats `json:"networks,omitempty"`
0000000000000000000000000000000000000000;;	}
