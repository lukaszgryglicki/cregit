0000000000000000000000000000000000000000;;	package types
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/seccomp.go[Godeps/_workspace/src/github.com/docker/engine-api/types/seccomp.go][vendor/github.com/docker/engine-api/types/seccomp.go];	
0000000000000000000000000000000000000000;;	// Seccomp represents the config for a seccomp profile for syscall restriction.
0000000000000000000000000000000000000000;;	type Seccomp struct {
0000000000000000000000000000000000000000;;		DefaultAction Action     `json:"defaultAction"`
0000000000000000000000000000000000000000;;		Architectures []Arch     `json:"architectures"`
0000000000000000000000000000000000000000;;		Syscalls      []*Syscall `json:"syscalls"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Arch used for additional architectures
0000000000000000000000000000000000000000;;	type Arch string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Additional architectures permitted to be used for system calls
0000000000000000000000000000000000000000;;	// By default only the native architecture of the kernel is permitted
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ArchX86         Arch = "SCMP_ARCH_X86"
0000000000000000000000000000000000000000;;		ArchX86_64      Arch = "SCMP_ARCH_X86_64"
0000000000000000000000000000000000000000;;		ArchX32         Arch = "SCMP_ARCH_X32"
0000000000000000000000000000000000000000;;		ArchARM         Arch = "SCMP_ARCH_ARM"
0000000000000000000000000000000000000000;;		ArchAARCH64     Arch = "SCMP_ARCH_AARCH64"
0000000000000000000000000000000000000000;;		ArchMIPS        Arch = "SCMP_ARCH_MIPS"
0000000000000000000000000000000000000000;;		ArchMIPS64      Arch = "SCMP_ARCH_MIPS64"
0000000000000000000000000000000000000000;;		ArchMIPS64N32   Arch = "SCMP_ARCH_MIPS64N32"
0000000000000000000000000000000000000000;;		ArchMIPSEL      Arch = "SCMP_ARCH_MIPSEL"
0000000000000000000000000000000000000000;;		ArchMIPSEL64    Arch = "SCMP_ARCH_MIPSEL64"
0000000000000000000000000000000000000000;;		ArchMIPSEL64N32 Arch = "SCMP_ARCH_MIPSEL64N32"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Action taken upon Seccomp rule match
0000000000000000000000000000000000000000;;	type Action string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define actions for Seccomp rules
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ActKill  Action = "SCMP_ACT_KILL"
0000000000000000000000000000000000000000;;		ActTrap  Action = "SCMP_ACT_TRAP"
0000000000000000000000000000000000000000;;		ActErrno Action = "SCMP_ACT_ERRNO"
0000000000000000000000000000000000000000;;		ActTrace Action = "SCMP_ACT_TRACE"
0000000000000000000000000000000000000000;;		ActAllow Action = "SCMP_ACT_ALLOW"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operator used to match syscall arguments in Seccomp
0000000000000000000000000000000000000000;;	type Operator string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define operators for syscall arguments in Seccomp
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		OpNotEqual     Operator = "SCMP_CMP_NE"
0000000000000000000000000000000000000000;;		OpLessThan     Operator = "SCMP_CMP_LT"
0000000000000000000000000000000000000000;;		OpLessEqual    Operator = "SCMP_CMP_LE"
0000000000000000000000000000000000000000;;		OpEqualTo      Operator = "SCMP_CMP_EQ"
0000000000000000000000000000000000000000;;		OpGreaterEqual Operator = "SCMP_CMP_GE"
0000000000000000000000000000000000000000;;		OpGreaterThan  Operator = "SCMP_CMP_GT"
0000000000000000000000000000000000000000;;		OpMaskedEqual  Operator = "SCMP_CMP_MASKED_EQ"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Arg used for matching specific syscall arguments in Seccomp
0000000000000000000000000000000000000000;;	type Arg struct {
0000000000000000000000000000000000000000;;		Index    uint     `json:"index"`
0000000000000000000000000000000000000000;;		Value    uint64   `json:"value"`
0000000000000000000000000000000000000000;;		ValueTwo uint64   `json:"valueTwo"`
0000000000000000000000000000000000000000;;		Op       Operator `json:"op"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Syscall is used to match a syscall in Seccomp
0000000000000000000000000000000000000000;;	type Syscall struct {
0000000000000000000000000000000000000000;;		Name   string `json:"name"`
0000000000000000000000000000000000000000;;		Action Action `json:"action"`
0000000000000000000000000000000000000000;;		Args   []*Arg `json:"args"`
0000000000000000000000000000000000000000;;	}
