0000000000000000000000000000000000000000;;	package registry
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/registry/registry.go[Godeps/_workspace/src/github.com/docker/engine-api/types/registry/registry.go][vendor/github.com/docker/engine-api/types/registry/registry.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceConfig stores daemon registry services configuration.
0000000000000000000000000000000000000000;;	type ServiceConfig struct {
0000000000000000000000000000000000000000;;		InsecureRegistryCIDRs []*NetIPNet           `json:"InsecureRegistryCIDRs"`
0000000000000000000000000000000000000000;;		IndexConfigs          map[string]*IndexInfo `json:"IndexConfigs"`
0000000000000000000000000000000000000000;;		Mirrors               []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetIPNet is the net.IPNet type, which can be marshalled and
0000000000000000000000000000000000000000;;	// unmarshalled to JSON
0000000000000000000000000000000000000000;;	type NetIPNet net.IPNet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON returns the JSON representation of the IPNet
0000000000000000000000000000000000000000;;	func (ipnet *NetIPNet) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal((*net.IPNet)(ipnet).String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON sets the IPNet from a byte array of JSON
0000000000000000000000000000000000000000;;	func (ipnet *NetIPNet) UnmarshalJSON(b []byte) (err error) {
0000000000000000000000000000000000000000;;		var ipnetStr string
0000000000000000000000000000000000000000;;		if err = json.Unmarshal(b, &ipnetStr); err == nil {
0000000000000000000000000000000000000000;;			var cidr *net.IPNet
0000000000000000000000000000000000000000;;			if _, cidr, err = net.ParseCIDR(ipnetStr); err == nil {
0000000000000000000000000000000000000000;;				*ipnet = NetIPNet(*cidr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IndexInfo contains information about a registry
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// RepositoryInfo Examples:
0000000000000000000000000000000000000000;;	// {
0000000000000000000000000000000000000000;;	//   "Index" : {
0000000000000000000000000000000000000000;;	//     "Name" : "docker.io",
0000000000000000000000000000000000000000;;	//     "Mirrors" : ["https://registry-2.docker.io/v1/", "https://registry-3.docker.io/v1/"],
0000000000000000000000000000000000000000;;	//     "Secure" : true,
0000000000000000000000000000000000000000;;	//     "Official" : true,
0000000000000000000000000000000000000000;;	//   },
0000000000000000000000000000000000000000;;	//   "RemoteName" : "library/debian",
0000000000000000000000000000000000000000;;	//   "LocalName" : "debian",
0000000000000000000000000000000000000000;;	//   "CanonicalName" : "docker.io/debian"
0000000000000000000000000000000000000000;;	//   "Official" : true,
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// {
0000000000000000000000000000000000000000;;	//   "Index" : {
0000000000000000000000000000000000000000;;	//     "Name" : "127.0.0.1:5000",
0000000000000000000000000000000000000000;;	//     "Mirrors" : [],
0000000000000000000000000000000000000000;;	//     "Secure" : false,
0000000000000000000000000000000000000000;;	//     "Official" : false,
0000000000000000000000000000000000000000;;	//   },
0000000000000000000000000000000000000000;;	//   "RemoteName" : "user/repo",
0000000000000000000000000000000000000000;;	//   "LocalName" : "127.0.0.1:5000/user/repo",
0000000000000000000000000000000000000000;;	//   "CanonicalName" : "127.0.0.1:5000/user/repo",
0000000000000000000000000000000000000000;;	//   "Official" : false,
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	type IndexInfo struct {
0000000000000000000000000000000000000000;;		// Name is the name of the registry, such as "docker.io"
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// Mirrors is a list of mirrors, expressed as URIs
0000000000000000000000000000000000000000;;		Mirrors []string
0000000000000000000000000000000000000000;;		// Secure is set to false if the registry is part of the list of
0000000000000000000000000000000000000000;;		// insecure registries. Insecure registries accept HTTP and/or accept
0000000000000000000000000000000000000000;;		// HTTPS with certificates from unknown CAs.
0000000000000000000000000000000000000000;;		Secure bool
0000000000000000000000000000000000000000;;		// Official indicates whether this is an official registry
0000000000000000000000000000000000000000;;		Official bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SearchResult describes a search result returned from a registry
0000000000000000000000000000000000000000;;	type SearchResult struct {
0000000000000000000000000000000000000000;;		// StarCount indicates the number of stars this repository has
0000000000000000000000000000000000000000;;		StarCount int `json:"star_count"`
0000000000000000000000000000000000000000;;		// IsOfficial is true if the result is from an official repository.
0000000000000000000000000000000000000000;;		IsOfficial bool `json:"is_official"`
0000000000000000000000000000000000000000;;		// Name is the name of the repository
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// IsAutomated indicates whether the result is automated
0000000000000000000000000000000000000000;;		IsAutomated bool `json:"is_automated"`
0000000000000000000000000000000000000000;;		// Description is a textual description of the repository
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SearchResults lists a collection search results returned from a registry
0000000000000000000000000000000000000000;;	type SearchResults struct {
0000000000000000000000000000000000000000;;		// Query contains the query string that generated the search results
0000000000000000000000000000000000000000;;		Query string `json:"query"`
0000000000000000000000000000000000000000;;		// NumResults indicates the number of results the query returned
0000000000000000000000000000000000000000;;		NumResults int `json:"num_results"`
0000000000000000000000000000000000000000;;		// Results is a slice containing the actual results for the search
0000000000000000000000000000000000000000;;		Results []SearchResult `json:"results"`
0000000000000000000000000000000000000000;;	}
