0000000000000000000000000000000000000000;;	package types
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/client.go[Godeps/_workspace/src/github.com/docker/engine-api/types/client.go][vendor/github.com/docker/engine-api/types/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/container"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/filters"
0000000000000000000000000000000000000000;;		"github.com/docker/go-units"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerAttachOptions holds parameters to attach to a container.
0000000000000000000000000000000000000000;;	type ContainerAttachOptions struct {
0000000000000000000000000000000000000000;;		Stream     bool
0000000000000000000000000000000000000000;;		Stdin      bool
0000000000000000000000000000000000000000;;		Stdout     bool
0000000000000000000000000000000000000000;;		Stderr     bool
0000000000000000000000000000000000000000;;		DetachKeys string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerCommitOptions holds parameters to commit changes into a container.
0000000000000000000000000000000000000000;;	type ContainerCommitOptions struct {
0000000000000000000000000000000000000000;;		Reference string
0000000000000000000000000000000000000000;;		Comment   string
0000000000000000000000000000000000000000;;		Author    string
0000000000000000000000000000000000000000;;		Changes   []string
0000000000000000000000000000000000000000;;		Pause     bool
0000000000000000000000000000000000000000;;		Config    *container.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerExecInspect holds information returned by exec inspect.
0000000000000000000000000000000000000000;;	type ContainerExecInspect struct {
0000000000000000000000000000000000000000;;		ExecID      string
0000000000000000000000000000000000000000;;		ContainerID string
0000000000000000000000000000000000000000;;		Running     bool
0000000000000000000000000000000000000000;;		ExitCode    int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerListOptions holds parameters to list containers with.
0000000000000000000000000000000000000000;;	type ContainerListOptions struct {
0000000000000000000000000000000000000000;;		Quiet  bool
0000000000000000000000000000000000000000;;		Size   bool
0000000000000000000000000000000000000000;;		All    bool
0000000000000000000000000000000000000000;;		Latest bool
0000000000000000000000000000000000000000;;		Since  string
0000000000000000000000000000000000000000;;		Before string
0000000000000000000000000000000000000000;;		Limit  int
0000000000000000000000000000000000000000;;		Filter filters.Args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerLogsOptions holds parameters to filter logs with.
0000000000000000000000000000000000000000;;	type ContainerLogsOptions struct {
0000000000000000000000000000000000000000;;		ShowStdout bool
0000000000000000000000000000000000000000;;		ShowStderr bool
0000000000000000000000000000000000000000;;		Since      string
0000000000000000000000000000000000000000;;		Timestamps bool
0000000000000000000000000000000000000000;;		Follow     bool
0000000000000000000000000000000000000000;;		Tail       string
0000000000000000000000000000000000000000;;		Details    bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerRemoveOptions holds parameters to remove containers.
0000000000000000000000000000000000000000;;	type ContainerRemoveOptions struct {
0000000000000000000000000000000000000000;;		RemoveVolumes bool
0000000000000000000000000000000000000000;;		RemoveLinks   bool
0000000000000000000000000000000000000000;;		Force         bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopyToContainerOptions holds information
0000000000000000000000000000000000000000;;	// about files to copy into a container
0000000000000000000000000000000000000000;;	type CopyToContainerOptions struct {
0000000000000000000000000000000000000000;;		AllowOverwriteDirWithFile bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EventsOptions hold parameters to filter events with.
0000000000000000000000000000000000000000;;	type EventsOptions struct {
0000000000000000000000000000000000000000;;		Since   string
0000000000000000000000000000000000000000;;		Until   string
0000000000000000000000000000000000000000;;		Filters filters.Args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkListOptions holds parameters to filter the list of networks with.
0000000000000000000000000000000000000000;;	type NetworkListOptions struct {
0000000000000000000000000000000000000000;;		Filters filters.Args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HijackedResponse holds connection information for a hijacked request.
0000000000000000000000000000000000000000;;	type HijackedResponse struct {
0000000000000000000000000000000000000000;;		Conn   net.Conn
0000000000000000000000000000000000000000;;		Reader *bufio.Reader
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Close closes the hijacked connection and reader.
0000000000000000000000000000000000000000;;	func (h *HijackedResponse) Close() {
0000000000000000000000000000000000000000;;		h.Conn.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloseWriter is an interface that implements structs
0000000000000000000000000000000000000000;;	// that close input streams to prevent from writing.
0000000000000000000000000000000000000000;;	type CloseWriter interface {
0000000000000000000000000000000000000000;;		CloseWrite() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloseWrite closes a readWriter for writing.
0000000000000000000000000000000000000000;;	func (h *HijackedResponse) CloseWrite() error {
0000000000000000000000000000000000000000;;		if conn, ok := h.Conn.(CloseWriter); ok {
0000000000000000000000000000000000000000;;			return conn.CloseWrite()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageBuildOptions holds the information
0000000000000000000000000000000000000000;;	// necessary to build images.
0000000000000000000000000000000000000000;;	type ImageBuildOptions struct {
0000000000000000000000000000000000000000;;		Tags           []string
0000000000000000000000000000000000000000;;		SuppressOutput bool
0000000000000000000000000000000000000000;;		RemoteContext  string
0000000000000000000000000000000000000000;;		NoCache        bool
0000000000000000000000000000000000000000;;		Remove         bool
0000000000000000000000000000000000000000;;		ForceRemove    bool
0000000000000000000000000000000000000000;;		PullParent     bool
0000000000000000000000000000000000000000;;		Isolation      container.Isolation
0000000000000000000000000000000000000000;;		CPUSetCPUs     string
0000000000000000000000000000000000000000;;		CPUSetMems     string
0000000000000000000000000000000000000000;;		CPUShares      int64
0000000000000000000000000000000000000000;;		CPUQuota       int64
0000000000000000000000000000000000000000;;		CPUPeriod      int64
0000000000000000000000000000000000000000;;		Memory         int64
0000000000000000000000000000000000000000;;		MemorySwap     int64
0000000000000000000000000000000000000000;;		CgroupParent   string
0000000000000000000000000000000000000000;;		ShmSize        int64
0000000000000000000000000000000000000000;;		Dockerfile     string
0000000000000000000000000000000000000000;;		Ulimits        []*units.Ulimit
0000000000000000000000000000000000000000;;		BuildArgs      map[string]string
0000000000000000000000000000000000000000;;		AuthConfigs    map[string]AuthConfig
0000000000000000000000000000000000000000;;		Context        io.Reader
0000000000000000000000000000000000000000;;		Labels         map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageBuildResponse holds information
0000000000000000000000000000000000000000;;	// returned by a server after building
0000000000000000000000000000000000000000;;	// an image.
0000000000000000000000000000000000000000;;	type ImageBuildResponse struct {
0000000000000000000000000000000000000000;;		Body   io.ReadCloser
0000000000000000000000000000000000000000;;		OSType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageCreateOptions holds information to create images.
0000000000000000000000000000000000000000;;	type ImageCreateOptions struct {
0000000000000000000000000000000000000000;;		RegistryAuth string // RegistryAuth is the base64 encoded credentials for the registry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageImportSource holds source information for ImageImport
0000000000000000000000000000000000000000;;	type ImageImportSource struct {
0000000000000000000000000000000000000000;;		Source     io.Reader // Source is the data to send to the server to create this image from (mutually exclusive with SourceName)
0000000000000000000000000000000000000000;;		SourceName string    // SourceName is the name of the image to pull (mutually exclusive with Source)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageImportOptions holds information to import images from the client host.
0000000000000000000000000000000000000000;;	type ImageImportOptions struct {
0000000000000000000000000000000000000000;;		Tag     string   // Tag is the name to tag this image with. This attribute is deprecated.
0000000000000000000000000000000000000000;;		Message string   // Message is the message to tag the image with
0000000000000000000000000000000000000000;;		Changes []string // Changes are the raw changes to apply to this image
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageListOptions holds parameters to filter the list of images with.
0000000000000000000000000000000000000000;;	type ImageListOptions struct {
0000000000000000000000000000000000000000;;		MatchName string
0000000000000000000000000000000000000000;;		All       bool
0000000000000000000000000000000000000000;;		Filters   filters.Args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageLoadResponse returns information to the client about a load process.
0000000000000000000000000000000000000000;;	type ImageLoadResponse struct {
0000000000000000000000000000000000000000;;		// Body must be closed to avoid a resource leak
0000000000000000000000000000000000000000;;		Body io.ReadCloser
0000000000000000000000000000000000000000;;		JSON bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImagePullOptions holds information to pull images.
0000000000000000000000000000000000000000;;	type ImagePullOptions struct {
0000000000000000000000000000000000000000;;		All           bool
0000000000000000000000000000000000000000;;		RegistryAuth  string // RegistryAuth is the base64 encoded credentials for the registry
0000000000000000000000000000000000000000;;		PrivilegeFunc RequestPrivilegeFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestPrivilegeFunc is a function interface that
0000000000000000000000000000000000000000;;	// clients can supply to retry operations after
0000000000000000000000000000000000000000;;	// getting an authorization error.
0000000000000000000000000000000000000000;;	// This function returns the registry authentication
0000000000000000000000000000000000000000;;	// header value in base 64 format, or an error
0000000000000000000000000000000000000000;;	// if the privilege request fails.
0000000000000000000000000000000000000000;;	type RequestPrivilegeFunc func() (string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//ImagePushOptions holds information to push images.
0000000000000000000000000000000000000000;;	type ImagePushOptions ImagePullOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageRemoveOptions holds parameters to remove images.
0000000000000000000000000000000000000000;;	type ImageRemoveOptions struct {
0000000000000000000000000000000000000000;;		Force         bool
0000000000000000000000000000000000000000;;		PruneChildren bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageSearchOptions holds parameters to search images with.
0000000000000000000000000000000000000000;;	type ImageSearchOptions struct {
0000000000000000000000000000000000000000;;		RegistryAuth  string
0000000000000000000000000000000000000000;;		PrivilegeFunc RequestPrivilegeFunc
0000000000000000000000000000000000000000;;		Filters       filters.Args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageTagOptions holds parameters to tag an image
0000000000000000000000000000000000000000;;	type ImageTagOptions struct {
0000000000000000000000000000000000000000;;		Force bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResizeOptions holds parameters to resize a tty.
0000000000000000000000000000000000000000;;	// It can be used to resize container ttys and
0000000000000000000000000000000000000000;;	// exec process ttys too.
0000000000000000000000000000000000000000;;	type ResizeOptions struct {
0000000000000000000000000000000000000000;;		Height int
0000000000000000000000000000000000000000;;		Width  int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VersionResponse holds version information for the client and the server
0000000000000000000000000000000000000000;;	type VersionResponse struct {
0000000000000000000000000000000000000000;;		Client *Version
0000000000000000000000000000000000000000;;		Server *Version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerOK returns true when the client could connect to the docker server
0000000000000000000000000000000000000000;;	// and parse the information received. It returns false otherwise.
0000000000000000000000000000000000000000;;	func (v VersionResponse) ServerOK() bool {
0000000000000000000000000000000000000000;;		return v.Server != nil
0000000000000000000000000000000000000000;;	}
