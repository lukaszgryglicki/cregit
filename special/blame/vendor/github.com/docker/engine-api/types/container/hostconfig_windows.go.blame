0000000000000000000000000000000000000000;;	package container
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/container/hostconfig_windows.go[Godeps/_workspace/src/github.com/docker/engine-api/types/container/hostconfig_windows.go][vendor/github.com/docker/engine-api/types/container/hostconfig_windows.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsDefault indicates whether container uses the default network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsDefault() bool {
0000000000000000000000000000000000000000;;		return n == "default"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNone indicates whether container isn't using a network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsNone() bool {
0000000000000000000000000000000000000000;;		return n == "none"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsContainer indicates whether container uses a container network stack.
0000000000000000000000000000000000000000;;	// Returns false as windows doesn't support this mode
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsContainer() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsBridge indicates whether container uses the bridge network stack
0000000000000000000000000000000000000000;;	// in windows it is given the name NAT
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsBridge() bool {
0000000000000000000000000000000000000000;;		return n == "nat"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsHost indicates whether container uses the host network stack.
0000000000000000000000000000000000000000;;	// returns false as this is not supported by windows
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsHost() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsPrivate indicates whether container uses its private network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsPrivate() bool {
0000000000000000000000000000000000000000;;		return !(n.IsHost() || n.IsContainer())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectedContainer is the id of the container which network this container is connected to.
0000000000000000000000000000000000000000;;	// Returns blank string on windows
0000000000000000000000000000000000000000;;	func (n NetworkMode) ConnectedContainer() string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUserDefined indicates user-created network
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsUserDefined() bool {
0000000000000000000000000000000000000000;;		return !n.IsDefault() && !n.IsNone() && !n.IsBridge()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsHyperV indicates the use of a Hyper-V partition for isolation
0000000000000000000000000000000000000000;;	func (i Isolation) IsHyperV() bool {
0000000000000000000000000000000000000000;;		return strings.ToLower(string(i)) == "hyperv"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsProcess indicates the use of process isolation
0000000000000000000000000000000000000000;;	func (i Isolation) IsProcess() bool {
0000000000000000000000000000000000000000;;		return strings.ToLower(string(i)) == "process"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValid indicates if an isolation technology is valid
0000000000000000000000000000000000000000;;	func (i Isolation) IsValid() bool {
0000000000000000000000000000000000000000;;		return i.IsDefault() || i.IsHyperV() || i.IsProcess()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkName returns the name of the network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) NetworkName() string {
0000000000000000000000000000000000000000;;		if n.IsDefault() {
0000000000000000000000000000000000000000;;			return "default"
0000000000000000000000000000000000000000;;		} else if n.IsBridge() {
0000000000000000000000000000000000000000;;			return "nat"
0000000000000000000000000000000000000000;;		} else if n.IsNone() {
0000000000000000000000000000000000000000;;			return "none"
0000000000000000000000000000000000000000;;		} else if n.IsUserDefined() {
0000000000000000000000000000000000000000;;			return n.UserDefined()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//UserDefined indicates user-created network
0000000000000000000000000000000000000000;;	func (n NetworkMode) UserDefined() string {
0000000000000000000000000000000000000000;;		if n.IsUserDefined() {
0000000000000000000000000000000000000000;;			return string(n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
