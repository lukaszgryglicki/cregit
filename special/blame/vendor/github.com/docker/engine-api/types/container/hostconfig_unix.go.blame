0000000000000000000000000000000000000000;;	// +build !windows
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/container/hostconfig_unix.go[Godeps/_workspace/src/github.com/docker/engine-api/types/container/hostconfig_unix.go][vendor/github.com/docker/engine-api/types/container/hostconfig_unix.go];	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValid indicates if an isolation technology is valid
0000000000000000000000000000000000000000;;	func (i Isolation) IsValid() bool {
0000000000000000000000000000000000000000;;		return i.IsDefault()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsPrivate indicates whether container uses it's private network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsPrivate() bool {
0000000000000000000000000000000000000000;;		return !(n.IsHost() || n.IsContainer())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsDefault indicates whether container uses the default network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsDefault() bool {
0000000000000000000000000000000000000000;;		return n == "default"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkName returns the name of the network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) NetworkName() string {
0000000000000000000000000000000000000000;;		if n.IsBridge() {
0000000000000000000000000000000000000000;;			return "bridge"
0000000000000000000000000000000000000000;;		} else if n.IsHost() {
0000000000000000000000000000000000000000;;			return "host"
0000000000000000000000000000000000000000;;		} else if n.IsContainer() {
0000000000000000000000000000000000000000;;			return "container"
0000000000000000000000000000000000000000;;		} else if n.IsNone() {
0000000000000000000000000000000000000000;;			return "none"
0000000000000000000000000000000000000000;;		} else if n.IsDefault() {
0000000000000000000000000000000000000000;;			return "default"
0000000000000000000000000000000000000000;;		} else if n.IsUserDefined() {
0000000000000000000000000000000000000000;;			return n.UserDefined()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsBridge indicates whether container uses the bridge network stack
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsBridge() bool {
0000000000000000000000000000000000000000;;		return n == "bridge"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsHost indicates whether container uses the host network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsHost() bool {
0000000000000000000000000000000000000000;;		return n == "host"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsContainer indicates whether container uses a container network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsContainer() bool {
0000000000000000000000000000000000000000;;		parts := strings.SplitN(string(n), ":", 2)
0000000000000000000000000000000000000000;;		return len(parts) > 1 && parts[0] == "container"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNone indicates whether container isn't using a network stack.
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsNone() bool {
0000000000000000000000000000000000000000;;		return n == "none"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectedContainer is the id of the container which network this container is connected to.
0000000000000000000000000000000000000000;;	func (n NetworkMode) ConnectedContainer() string {
0000000000000000000000000000000000000000;;		parts := strings.SplitN(string(n), ":", 2)
0000000000000000000000000000000000000000;;		if len(parts) > 1 {
0000000000000000000000000000000000000000;;			return parts[1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUserDefined indicates user-created network
0000000000000000000000000000000000000000;;	func (n NetworkMode) IsUserDefined() bool {
0000000000000000000000000000000000000000;;		return !n.IsDefault() && !n.IsBridge() && !n.IsHost() && !n.IsNone() && !n.IsContainer()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//UserDefined indicates user-created network
0000000000000000000000000000000000000000;;	func (n NetworkMode) UserDefined() string {
0000000000000000000000000000000000000000;;		if n.IsUserDefined() {
0000000000000000000000000000000000000000;;			return string(n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
