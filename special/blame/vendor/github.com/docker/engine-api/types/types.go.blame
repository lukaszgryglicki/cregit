0000000000000000000000000000000000000000;;	package types
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/engine-api/types/types.go[Godeps/_workspace/src/github.com/docker/engine-api/types/types.go][vendor/github.com/docker/engine-api/types/types.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/container"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/network"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types/registry"
0000000000000000000000000000000000000000;;		"github.com/docker/go-connections/nat"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerCreateResponse contains the information returned to a client on the
0000000000000000000000000000000000000000;;	// creation of a new container.
0000000000000000000000000000000000000000;;	type ContainerCreateResponse struct {
0000000000000000000000000000000000000000;;		// ID is the ID of the created container.
0000000000000000000000000000000000000000;;		ID string `json:"Id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Warnings are any warnings encountered during the creation of the container.
0000000000000000000000000000000000000000;;		Warnings []string `json:"Warnings"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerExecCreateResponse contains response of Remote API:
0000000000000000000000000000000000000000;;	// POST "/containers/{name:.*}/exec"
0000000000000000000000000000000000000000;;	type ContainerExecCreateResponse struct {
0000000000000000000000000000000000000000;;		// ID is the exec ID.
0000000000000000000000000000000000000000;;		ID string `json:"Id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerUpdateResponse contains response of Remote API:
0000000000000000000000000000000000000000;;	// POST /containers/{name:.*}/update
0000000000000000000000000000000000000000;;	type ContainerUpdateResponse struct {
0000000000000000000000000000000000000000;;		// Warnings are any warnings encountered during the updating of the container.
0000000000000000000000000000000000000000;;		Warnings []string `json:"Warnings"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthResponse contains response of Remote API:
0000000000000000000000000000000000000000;;	// POST "/auth"
0000000000000000000000000000000000000000;;	type AuthResponse struct {
0000000000000000000000000000000000000000;;		// Status is the authentication status
0000000000000000000000000000000000000000;;		Status string `json:"Status"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IdentityToken is an opaque token used for authenticating
0000000000000000000000000000000000000000;;		// a user after a successful login.
0000000000000000000000000000000000000000;;		IdentityToken string `json:"IdentityToken,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerWaitResponse contains response of Remote API:
0000000000000000000000000000000000000000;;	// POST "/containers/"+containerID+"/wait"
0000000000000000000000000000000000000000;;	type ContainerWaitResponse struct {
0000000000000000000000000000000000000000;;		// StatusCode is the status code of the wait job
0000000000000000000000000000000000000000;;		StatusCode int `json:"StatusCode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerCommitResponse contains response of Remote API:
0000000000000000000000000000000000000000;;	// POST "/commit?container="+containerID
0000000000000000000000000000000000000000;;	type ContainerCommitResponse struct {
0000000000000000000000000000000000000000;;		ID string `json:"Id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerChange contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/containers/{name:.*}/changes"
0000000000000000000000000000000000000000;;	type ContainerChange struct {
0000000000000000000000000000000000000000;;		Kind int
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageHistory contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/images/{name:.*}/history"
0000000000000000000000000000000000000000;;	type ImageHistory struct {
0000000000000000000000000000000000000000;;		ID        string `json:"Id"`
0000000000000000000000000000000000000000;;		Created   int64
0000000000000000000000000000000000000000;;		CreatedBy string
0000000000000000000000000000000000000000;;		Tags      []string
0000000000000000000000000000000000000000;;		Size      int64
0000000000000000000000000000000000000000;;		Comment   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageDelete contains response of Remote API:
0000000000000000000000000000000000000000;;	// DELETE "/images/{name:.*}"
0000000000000000000000000000000000000000;;	type ImageDelete struct {
0000000000000000000000000000000000000000;;		Untagged string `json:",omitempty"`
0000000000000000000000000000000000000000;;		Deleted  string `json:",omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Image contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/images/json"
0000000000000000000000000000000000000000;;	type Image struct {
0000000000000000000000000000000000000000;;		ID          string `json:"Id"`
0000000000000000000000000000000000000000;;		ParentID    string `json:"ParentId"`
0000000000000000000000000000000000000000;;		RepoTags    []string
0000000000000000000000000000000000000000;;		RepoDigests []string
0000000000000000000000000000000000000000;;		Created     int64
0000000000000000000000000000000000000000;;		Size        int64
0000000000000000000000000000000000000000;;		VirtualSize int64
0000000000000000000000000000000000000000;;		Labels      map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GraphDriverData returns Image's graph driver config info
0000000000000000000000000000000000000000;;	// when calling inspect command
0000000000000000000000000000000000000000;;	type GraphDriverData struct {
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		Data map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RootFS returns Image's RootFS description including the layer IDs.
0000000000000000000000000000000000000000;;	type RootFS struct {
0000000000000000000000000000000000000000;;		Type      string
0000000000000000000000000000000000000000;;		Layers    []string `json:",omitempty"`
0000000000000000000000000000000000000000;;		BaseLayer string   `json:",omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageInspect contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/images/{name:.*}/json"
0000000000000000000000000000000000000000;;	type ImageInspect struct {
0000000000000000000000000000000000000000;;		ID              string `json:"Id"`
0000000000000000000000000000000000000000;;		RepoTags        []string
0000000000000000000000000000000000000000;;		RepoDigests     []string
0000000000000000000000000000000000000000;;		Parent          string
0000000000000000000000000000000000000000;;		Comment         string
0000000000000000000000000000000000000000;;		Created         string
0000000000000000000000000000000000000000;;		Container       string
0000000000000000000000000000000000000000;;		ContainerConfig *container.Config
0000000000000000000000000000000000000000;;		DockerVersion   string
0000000000000000000000000000000000000000;;		Author          string
0000000000000000000000000000000000000000;;		Config          *container.Config
0000000000000000000000000000000000000000;;		Architecture    string
0000000000000000000000000000000000000000;;		Os              string
0000000000000000000000000000000000000000;;		Size            int64
0000000000000000000000000000000000000000;;		VirtualSize     int64
0000000000000000000000000000000000000000;;		GraphDriver     GraphDriverData
0000000000000000000000000000000000000000;;		RootFS          RootFS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Port stores open ports info of container
0000000000000000000000000000000000000000;;	// e.g. {"PrivatePort": 8080, "PublicPort": 80, "Type": "tcp"}
0000000000000000000000000000000000000000;;	type Port struct {
0000000000000000000000000000000000000000;;		IP          string `json:",omitempty"`
0000000000000000000000000000000000000000;;		PrivatePort int
0000000000000000000000000000000000000000;;		PublicPort  int `json:",omitempty"`
0000000000000000000000000000000000000000;;		Type        string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Container contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET  "/containers/json"
0000000000000000000000000000000000000000;;	type Container struct {
0000000000000000000000000000000000000000;;		ID         string `json:"Id"`
0000000000000000000000000000000000000000;;		Names      []string
0000000000000000000000000000000000000000;;		Image      string
0000000000000000000000000000000000000000;;		ImageID    string
0000000000000000000000000000000000000000;;		Command    string
0000000000000000000000000000000000000000;;		Created    int64
0000000000000000000000000000000000000000;;		Ports      []Port
0000000000000000000000000000000000000000;;		SizeRw     int64 `json:",omitempty"`
0000000000000000000000000000000000000000;;		SizeRootFs int64 `json:",omitempty"`
0000000000000000000000000000000000000000;;		Labels     map[string]string
0000000000000000000000000000000000000000;;		State      string
0000000000000000000000000000000000000000;;		Status     string
0000000000000000000000000000000000000000;;		HostConfig struct {
0000000000000000000000000000000000000000;;			NetworkMode string `json:",omitempty"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		NetworkSettings *SummaryNetworkSettings
0000000000000000000000000000000000000000;;		Mounts          []MountPoint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopyConfig contains request body of Remote API:
0000000000000000000000000000000000000000;;	// POST "/containers/"+containerID+"/copy"
0000000000000000000000000000000000000000;;	type CopyConfig struct {
0000000000000000000000000000000000000000;;		Resource string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerPathStat is used to encode the header from
0000000000000000000000000000000000000000;;	// GET "/containers/{name:.*}/archive"
0000000000000000000000000000000000000000;;	// "Name" is the file or directory name.
0000000000000000000000000000000000000000;;	type ContainerPathStat struct {
0000000000000000000000000000000000000000;;		Name       string      `json:"name"`
0000000000000000000000000000000000000000;;		Size       int64       `json:"size"`
0000000000000000000000000000000000000000;;		Mode       os.FileMode `json:"mode"`
0000000000000000000000000000000000000000;;		Mtime      time.Time   `json:"mtime"`
0000000000000000000000000000000000000000;;		LinkTarget string      `json:"linkTarget"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerProcessList contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/containers/{name:.*}/top"
0000000000000000000000000000000000000000;;	type ContainerProcessList struct {
0000000000000000000000000000000000000000;;		Processes [][]string
0000000000000000000000000000000000000000;;		Titles    []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/version"
0000000000000000000000000000000000000000;;	type Version struct {
0000000000000000000000000000000000000000;;		Version       string
0000000000000000000000000000000000000000;;		APIVersion    string `json:"ApiVersion"`
0000000000000000000000000000000000000000;;		GitCommit     string
0000000000000000000000000000000000000000;;		GoVersion     string
0000000000000000000000000000000000000000;;		Os            string
0000000000000000000000000000000000000000;;		Arch          string
0000000000000000000000000000000000000000;;		KernelVersion string `json:",omitempty"`
0000000000000000000000000000000000000000;;		Experimental  bool   `json:",omitempty"`
0000000000000000000000000000000000000000;;		BuildTime     string `json:",omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Info contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/info"
0000000000000000000000000000000000000000;;	type Info struct {
0000000000000000000000000000000000000000;;		ID                 string
0000000000000000000000000000000000000000;;		Containers         int
0000000000000000000000000000000000000000;;		ContainersRunning  int
0000000000000000000000000000000000000000;;		ContainersPaused   int
0000000000000000000000000000000000000000;;		ContainersStopped  int
0000000000000000000000000000000000000000;;		Images             int
0000000000000000000000000000000000000000;;		Driver             string
0000000000000000000000000000000000000000;;		DriverStatus       [][2]string
0000000000000000000000000000000000000000;;		SystemStatus       [][2]string
0000000000000000000000000000000000000000;;		Plugins            PluginsInfo
0000000000000000000000000000000000000000;;		MemoryLimit        bool
0000000000000000000000000000000000000000;;		SwapLimit          bool
0000000000000000000000000000000000000000;;		KernelMemory       bool
0000000000000000000000000000000000000000;;		CPUCfsPeriod       bool `json:"CpuCfsPeriod"`
0000000000000000000000000000000000000000;;		CPUCfsQuota        bool `json:"CpuCfsQuota"`
0000000000000000000000000000000000000000;;		CPUShares          bool
0000000000000000000000000000000000000000;;		CPUSet             bool
0000000000000000000000000000000000000000;;		IPv4Forwarding     bool
0000000000000000000000000000000000000000;;		BridgeNfIptables   bool
0000000000000000000000000000000000000000;;		BridgeNfIP6tables  bool `json:"BridgeNfIp6tables"`
0000000000000000000000000000000000000000;;		Debug              bool
0000000000000000000000000000000000000000;;		NFd                int
0000000000000000000000000000000000000000;;		OomKillDisable     bool
0000000000000000000000000000000000000000;;		NGoroutines        int
0000000000000000000000000000000000000000;;		SystemTime         string
0000000000000000000000000000000000000000;;		ExecutionDriver    string
0000000000000000000000000000000000000000;;		LoggingDriver      string
0000000000000000000000000000000000000000;;		CgroupDriver       string
0000000000000000000000000000000000000000;;		NEventsListener    int
0000000000000000000000000000000000000000;;		KernelVersion      string
0000000000000000000000000000000000000000;;		OperatingSystem    string
0000000000000000000000000000000000000000;;		OSType             string
0000000000000000000000000000000000000000;;		Architecture       string
0000000000000000000000000000000000000000;;		IndexServerAddress string
0000000000000000000000000000000000000000;;		RegistryConfig     *registry.ServiceConfig
0000000000000000000000000000000000000000;;		NCPU               int
0000000000000000000000000000000000000000;;		MemTotal           int64
0000000000000000000000000000000000000000;;		DockerRootDir      string
0000000000000000000000000000000000000000;;		HTTPProxy          string `json:"HttpProxy"`
0000000000000000000000000000000000000000;;		HTTPSProxy         string `json:"HttpsProxy"`
0000000000000000000000000000000000000000;;		NoProxy            string
0000000000000000000000000000000000000000;;		Name               string
0000000000000000000000000000000000000000;;		Labels             []string
0000000000000000000000000000000000000000;;		ExperimentalBuild  bool
0000000000000000000000000000000000000000;;		ServerVersion      string
0000000000000000000000000000000000000000;;		ClusterStore       string
0000000000000000000000000000000000000000;;		ClusterAdvertise   string
0000000000000000000000000000000000000000;;		SecurityOptions    []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginsInfo is a temp struct holding Plugins name
0000000000000000000000000000000000000000;;	// registered with docker daemon. It is used by Info struct
0000000000000000000000000000000000000000;;	type PluginsInfo struct {
0000000000000000000000000000000000000000;;		// List of Volume plugins registered
0000000000000000000000000000000000000000;;		Volume []string
0000000000000000000000000000000000000000;;		// List of Network plugins registered
0000000000000000000000000000000000000000;;		Network []string
0000000000000000000000000000000000000000;;		// List of Authorization plugins registered
0000000000000000000000000000000000000000;;		Authorization []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExecStartCheck is a temp struct used by execStart
0000000000000000000000000000000000000000;;	// Config fields is part of ExecConfig in runconfig package
0000000000000000000000000000000000000000;;	type ExecStartCheck struct {
0000000000000000000000000000000000000000;;		// ExecStart will first check if it's detached
0000000000000000000000000000000000000000;;		Detach bool
0000000000000000000000000000000000000000;;		// Check if there's a tty
0000000000000000000000000000000000000000;;		Tty bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerState stores container's running state
0000000000000000000000000000000000000000;;	// it's part of ContainerJSONBase and will return by "inspect" command
0000000000000000000000000000000000000000;;	type ContainerState struct {
0000000000000000000000000000000000000000;;		Status     string
0000000000000000000000000000000000000000;;		Running    bool
0000000000000000000000000000000000000000;;		Paused     bool
0000000000000000000000000000000000000000;;		Restarting bool
0000000000000000000000000000000000000000;;		OOMKilled  bool
0000000000000000000000000000000000000000;;		Dead       bool
0000000000000000000000000000000000000000;;		Pid        int
0000000000000000000000000000000000000000;;		ExitCode   int
0000000000000000000000000000000000000000;;		Error      string
0000000000000000000000000000000000000000;;		StartedAt  string
0000000000000000000000000000000000000000;;		FinishedAt string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerNode stores information about the node that a container
0000000000000000000000000000000000000000;;	// is running on.  It's only available in Docker Swarm
0000000000000000000000000000000000000000;;	type ContainerNode struct {
0000000000000000000000000000000000000000;;		ID        string
0000000000000000000000000000000000000000;;		IPAddress string `json:"IP"`
0000000000000000000000000000000000000000;;		Addr      string
0000000000000000000000000000000000000000;;		Name      string
0000000000000000000000000000000000000000;;		Cpus      int
0000000000000000000000000000000000000000;;		Memory    int
0000000000000000000000000000000000000000;;		Labels    map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerJSONBase contains response of Remote API:
0000000000000000000000000000000000000000;;	// GET "/containers/{name:.*}/json"
0000000000000000000000000000000000000000;;	type ContainerJSONBase struct {
0000000000000000000000000000000000000000;;		ID              string `json:"Id"`
0000000000000000000000000000000000000000;;		Created         string
0000000000000000000000000000000000000000;;		Path            string
0000000000000000000000000000000000000000;;		Args            []string
0000000000000000000000000000000000000000;;		State           *ContainerState
0000000000000000000000000000000000000000;;		Image           string
0000000000000000000000000000000000000000;;		ResolvConfPath  string
0000000000000000000000000000000000000000;;		HostnamePath    string
0000000000000000000000000000000000000000;;		HostsPath       string
0000000000000000000000000000000000000000;;		LogPath         string
0000000000000000000000000000000000000000;;		Node            *ContainerNode `json:",omitempty"`
0000000000000000000000000000000000000000;;		Name            string
0000000000000000000000000000000000000000;;		RestartCount    int
0000000000000000000000000000000000000000;;		Driver          string
0000000000000000000000000000000000000000;;		MountLabel      string
0000000000000000000000000000000000000000;;		ProcessLabel    string
0000000000000000000000000000000000000000;;		AppArmorProfile string
0000000000000000000000000000000000000000;;		ExecIDs         []string
0000000000000000000000000000000000000000;;		HostConfig      *container.HostConfig
0000000000000000000000000000000000000000;;		GraphDriver     GraphDriverData
0000000000000000000000000000000000000000;;		SizeRw          *int64 `json:",omitempty"`
0000000000000000000000000000000000000000;;		SizeRootFs      *int64 `json:",omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerJSON is newly used struct along with MountPoint
0000000000000000000000000000000000000000;;	type ContainerJSON struct {
0000000000000000000000000000000000000000;;		*ContainerJSONBase
0000000000000000000000000000000000000000;;		Mounts          []MountPoint
0000000000000000000000000000000000000000;;		Config          *container.Config
0000000000000000000000000000000000000000;;		NetworkSettings *NetworkSettings
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkSettings exposes the network settings in the api
0000000000000000000000000000000000000000;;	type NetworkSettings struct {
0000000000000000000000000000000000000000;;		NetworkSettingsBase
0000000000000000000000000000000000000000;;		DefaultNetworkSettings
0000000000000000000000000000000000000000;;		Networks map[string]*network.EndpointSettings
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SummaryNetworkSettings provides a summary of container's networks
0000000000000000000000000000000000000000;;	// in /containers/json
0000000000000000000000000000000000000000;;	type SummaryNetworkSettings struct {
0000000000000000000000000000000000000000;;		Networks map[string]*network.EndpointSettings
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkSettingsBase holds basic information about networks
0000000000000000000000000000000000000000;;	type NetworkSettingsBase struct {
0000000000000000000000000000000000000000;;		Bridge                 string
0000000000000000000000000000000000000000;;		SandboxID              string
0000000000000000000000000000000000000000;;		HairpinMode            bool
0000000000000000000000000000000000000000;;		LinkLocalIPv6Address   string
0000000000000000000000000000000000000000;;		LinkLocalIPv6PrefixLen int
0000000000000000000000000000000000000000;;		Ports                  nat.PortMap
0000000000000000000000000000000000000000;;		SandboxKey             string
0000000000000000000000000000000000000000;;		SecondaryIPAddresses   []network.Address
0000000000000000000000000000000000000000;;		SecondaryIPv6Addresses []network.Address
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultNetworkSettings holds network information
0000000000000000000000000000000000000000;;	// during the 2 release deprecation period.
0000000000000000000000000000000000000000;;	// It will be removed in Docker 1.11.
0000000000000000000000000000000000000000;;	type DefaultNetworkSettings struct {
0000000000000000000000000000000000000000;;		EndpointID          string
0000000000000000000000000000000000000000;;		Gateway             string
0000000000000000000000000000000000000000;;		GlobalIPv6Address   string
0000000000000000000000000000000000000000;;		GlobalIPv6PrefixLen int
0000000000000000000000000000000000000000;;		IPAddress           string
0000000000000000000000000000000000000000;;		IPPrefixLen         int
0000000000000000000000000000000000000000;;		IPv6Gateway         string
0000000000000000000000000000000000000000;;		MacAddress          string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MountPoint represents a mount point configuration inside the container.
0000000000000000000000000000000000000000;;	type MountPoint struct {
0000000000000000000000000000000000000000;;		Name        string `json:",omitempty"`
0000000000000000000000000000000000000000;;		Source      string
0000000000000000000000000000000000000000;;		Destination string
0000000000000000000000000000000000000000;;		Driver      string `json:",omitempty"`
0000000000000000000000000000000000000000;;		Mode        string
0000000000000000000000000000000000000000;;		RW          bool
0000000000000000000000000000000000000000;;		Propagation string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume represents the configuration of a volume for the remote API
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;		Name       string                 // Name is the name of the volume
0000000000000000000000000000000000000000;;		Driver     string                 // Driver is the Driver name used to create the volume
0000000000000000000000000000000000000000;;		Mountpoint string                 // Mountpoint is the location on disk of the volume
0000000000000000000000000000000000000000;;		Status     map[string]interface{} `json:",omitempty"` // Status provides low-level status information about the volume
0000000000000000000000000000000000000000;;		Labels     map[string]string      // Labels is metadata specific to the volume
0000000000000000000000000000000000000000;;		Scope      string                 // Scope describes the level at which the volume exists (e.g. `global` for cluster-wide or `local` for machine level)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumesListResponse contains the response for the remote API:
0000000000000000000000000000000000000000;;	// GET "/volumes"
0000000000000000000000000000000000000000;;	type VolumesListResponse struct {
0000000000000000000000000000000000000000;;		Volumes  []*Volume // Volumes is the list of volumes being returned
0000000000000000000000000000000000000000;;		Warnings []string  // Warnings is a list of warnings that occurred when getting the list from the volume drivers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeCreateRequest contains the response for the remote API:
0000000000000000000000000000000000000000;;	// POST "/volumes/create"
0000000000000000000000000000000000000000;;	type VolumeCreateRequest struct {
0000000000000000000000000000000000000000;;		Name       string            // Name is the requested name of the volume
0000000000000000000000000000000000000000;;		Driver     string            // Driver is the name of the driver that should be used to create the volume
0000000000000000000000000000000000000000;;		DriverOpts map[string]string // DriverOpts holds the driver specific options to use for when creating the volume.
0000000000000000000000000000000000000000;;		Labels     map[string]string // Labels holds metadata specific to the volume being created.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkResource is the body of the "get network" http response message
0000000000000000000000000000000000000000;;	type NetworkResource struct {
0000000000000000000000000000000000000000;;		Name       string
0000000000000000000000000000000000000000;;		ID         string `json:"Id"`
0000000000000000000000000000000000000000;;		Scope      string
0000000000000000000000000000000000000000;;		Driver     string
0000000000000000000000000000000000000000;;		EnableIPv6 bool
0000000000000000000000000000000000000000;;		IPAM       network.IPAM
0000000000000000000000000000000000000000;;		Internal   bool
0000000000000000000000000000000000000000;;		Containers map[string]EndpointResource
0000000000000000000000000000000000000000;;		Options    map[string]string
0000000000000000000000000000000000000000;;		Labels     map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EndpointResource contains network resources allocated and used for a container in a network
0000000000000000000000000000000000000000;;	type EndpointResource struct {
0000000000000000000000000000000000000000;;		Name        string
0000000000000000000000000000000000000000;;		EndpointID  string
0000000000000000000000000000000000000000;;		MacAddress  string
0000000000000000000000000000000000000000;;		IPv4Address string
0000000000000000000000000000000000000000;;		IPv6Address string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkCreate is the expected body of the "create network" http request message
0000000000000000000000000000000000000000;;	type NetworkCreate struct {
0000000000000000000000000000000000000000;;		CheckDuplicate bool
0000000000000000000000000000000000000000;;		Driver         string
0000000000000000000000000000000000000000;;		EnableIPv6     bool
0000000000000000000000000000000000000000;;		IPAM           network.IPAM
0000000000000000000000000000000000000000;;		Internal       bool
0000000000000000000000000000000000000000;;		Options        map[string]string
0000000000000000000000000000000000000000;;		Labels         map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkCreateRequest is the request message sent to the server for network create call.
0000000000000000000000000000000000000000;;	type NetworkCreateRequest struct {
0000000000000000000000000000000000000000;;		NetworkCreate
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkCreateResponse is the response message sent by the server for network create call
0000000000000000000000000000000000000000;;	type NetworkCreateResponse struct {
0000000000000000000000000000000000000000;;		ID      string `json:"Id"`
0000000000000000000000000000000000000000;;		Warning string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkConnect represents the data to be used to connect a container to the network
0000000000000000000000000000000000000000;;	type NetworkConnect struct {
0000000000000000000000000000000000000000;;		Container      string
0000000000000000000000000000000000000000;;		EndpointConfig *network.EndpointSettings `json:",omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkDisconnect represents the data to be used to disconnect a container from the network
0000000000000000000000000000000000000000;;	type NetworkDisconnect struct {
0000000000000000000000000000000000000000;;		Container string
0000000000000000000000000000000000000000;;		Force     bool
0000000000000000000000000000000000000000;;	}
