0000000000000000000000000000000000000000;;	package versions
2b223807a9109ddb7b5f4fb3b8d16248dd5b8b7c;Godeps/_workspace/src/github.com/docker/engine-api/types/versions/compare.go[Godeps/_workspace/src/github.com/docker/engine-api/types/versions/compare.go][vendor/github.com/docker/engine-api/types/versions/compare.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// compare compares two version strings
0000000000000000000000000000000000000000;;	// returns -1 if v1 < v2, 1 if v1 > v2, 0 otherwise.
0000000000000000000000000000000000000000;;	func compare(v1, v2 string) int {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			currTab  = strings.Split(v1, ".")
0000000000000000000000000000000000000000;;			otherTab = strings.Split(v2, ".")
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		max := len(currTab)
0000000000000000000000000000000000000000;;		if len(otherTab) > max {
0000000000000000000000000000000000000000;;			max = len(otherTab)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < max; i++ {
0000000000000000000000000000000000000000;;			var currInt, otherInt int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(currTab) > i {
0000000000000000000000000000000000000000;;				currInt, _ = strconv.Atoi(currTab[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(otherTab) > i {
0000000000000000000000000000000000000000;;				otherInt, _ = strconv.Atoi(otherTab[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if currInt > otherInt {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if otherInt > currInt {
0000000000000000000000000000000000000000;;				return -1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LessThan checks if a version is less than another
0000000000000000000000000000000000000000;;	func LessThan(v, other string) bool {
0000000000000000000000000000000000000000;;		return compare(v, other) == -1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LessThanOrEqualTo checks if a version is less than or equal to another
0000000000000000000000000000000000000000;;	func LessThanOrEqualTo(v, other string) bool {
0000000000000000000000000000000000000000;;		return compare(v, other) <= 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GreaterThan checks if a version is greater than another
0000000000000000000000000000000000000000;;	func GreaterThan(v, other string) bool {
0000000000000000000000000000000000000000;;		return compare(v, other) == 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GreaterThanOrEqualTo checks if a version is greater than or equal to another
0000000000000000000000000000000000000000;;	func GreaterThanOrEqualTo(v, other string) bool {
0000000000000000000000000000000000000000;;		return compare(v, other) >= 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equal checks if a version is equal to another
0000000000000000000000000000000000000000;;	func Equal(v, other string) bool {
0000000000000000000000000000000000000000;;		return compare(v, other) == 0
0000000000000000000000000000000000000000;;	}
