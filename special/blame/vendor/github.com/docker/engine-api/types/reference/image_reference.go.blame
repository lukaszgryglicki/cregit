0000000000000000000000000000000000000000;;	package reference
2b223807a9109ddb7b5f4fb3b8d16248dd5b8b7c;Godeps/_workspace/src/github.com/docker/engine-api/types/reference/image_reference.go[Godeps/_workspace/src/github.com/docker/engine-api/types/reference/image_reference.go][vendor/github.com/docker/engine-api/types/reference/image_reference.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		distreference "github.com/docker/distribution/reference"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse parses the given references and returns the repository and
0000000000000000000000000000000000000000;;	// tag (if present) from it. If there is an error during parsing, it will
0000000000000000000000000000000000000000;;	// return an error.
0000000000000000000000000000000000000000;;	func Parse(ref string) (string, string, error) {
0000000000000000000000000000000000000000;;		distributionRef, err := distreference.ParseNamed(ref)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tag := GetTagFromNamedRef(distributionRef)
0000000000000000000000000000000000000000;;		return distributionRef.Name(), tag, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTagFromNamedRef returns a tag from the specified reference.
0000000000000000000000000000000000000000;;	// This function is necessary as long as the docker "server" api makes the distinction between repository
0000000000000000000000000000000000000000;;	// and tags.
0000000000000000000000000000000000000000;;	func GetTagFromNamedRef(ref distreference.Named) string {
0000000000000000000000000000000000000000;;		var tag string
0000000000000000000000000000000000000000;;		switch x := ref.(type) {
0000000000000000000000000000000000000000;;		case distreference.Digested:
0000000000000000000000000000000000000000;;			tag = x.Digest().String()
0000000000000000000000000000000000000000;;		case distreference.NamedTagged:
0000000000000000000000000000000000000000;;			tag = x.Tag()
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			tag = "latest"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tag
0000000000000000000000000000000000000000;;	}
