0000000000000000000000000000000000000000;;	package spdystream
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/docker/spdystream/handlers.go[Godeps/_workspace/src/github.com/docker/spdystream/handlers.go][vendor/github.com/docker/spdystream/handlers.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MirrorStreamHandler mirrors all streams.
0000000000000000000000000000000000000000;;	func MirrorStreamHandler(stream *Stream) {
0000000000000000000000000000000000000000;;		replyErr := stream.SendReply(http.Header{}, false)
0000000000000000000000000000000000000000;;		if replyErr != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			io.Copy(stream, stream)
0000000000000000000000000000000000000000;;			stream.Close()
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				header, receiveErr := stream.ReceiveHeader()
0000000000000000000000000000000000000000;;				if receiveErr != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sendErr := stream.SendHeader(header, false)
0000000000000000000000000000000000000000;;				if sendErr != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoopStreamHandler does nothing when stream connects, most
0000000000000000000000000000000000000000;;	// likely used with RejectAuthHandler which will not allow any
0000000000000000000000000000000000000000;;	// streams to make it to the stream handler.
0000000000000000000000000000000000000000;;	func NoOpStreamHandler(stream *Stream) {
0000000000000000000000000000000000000000;;		stream.SendReply(http.Header{}, false)
0000000000000000000000000000000000000000;;	}
