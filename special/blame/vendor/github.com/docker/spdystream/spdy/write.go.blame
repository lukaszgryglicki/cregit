0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1d0fae6481d99ffc5bb4650837b76151bf731a37;Godeps/_workspace/src/github.com/docker/spdystream/spdy/write.go[Godeps/_workspace/src/github.com/docker/spdystream/spdy/write.go][vendor/github.com/docker/spdystream/spdy/write.go];	
0000000000000000000000000000000000000000;;	package spdy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *SynStreamFrame) write(f *Framer) error {
0000000000000000000000000000000000000000;;		return f.writeSynStreamFrame(frame)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *SynReplyFrame) write(f *Framer) error {
0000000000000000000000000000000000000000;;		return f.writeSynReplyFrame(frame)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *RstStreamFrame) write(f *Framer) (err error) {
0000000000000000000000000000000000000000;;		if frame.StreamId == 0 {
0000000000000000000000000000000000000000;;			return &Error{ZeroStreamId, 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeRstStream
0000000000000000000000000000000000000000;;		frame.CFHeader.Flags = 0
0000000000000000000000000000000000000000;;		frame.CFHeader.length = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.StreamId); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if frame.Status == 0 {
0000000000000000000000000000000000000000;;			return &Error{InvalidControlFrame, frame.StreamId}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.Status); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *SettingsFrame) write(f *Framer) (err error) {
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeSettings
0000000000000000000000000000000000000000;;		frame.CFHeader.length = uint32(len(frame.FlagIdValues)*8 + 4)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, uint32(len(frame.FlagIdValues))); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, flagIdValue := range frame.FlagIdValues {
0000000000000000000000000000000000000000;;			flagId := uint32(flagIdValue.Flag)<<24 | uint32(flagIdValue.Id)
0000000000000000000000000000000000000000;;			if err = binary.Write(f.w, binary.BigEndian, flagId); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = binary.Write(f.w, binary.BigEndian, flagIdValue.Value); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *PingFrame) write(f *Framer) (err error) {
0000000000000000000000000000000000000000;;		if frame.Id == 0 {
0000000000000000000000000000000000000000;;			return &Error{ZeroStreamId, 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypePing
0000000000000000000000000000000000000000;;		frame.CFHeader.Flags = 0
0000000000000000000000000000000000000000;;		frame.CFHeader.length = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.Id); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *GoAwayFrame) write(f *Framer) (err error) {
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeGoAway
0000000000000000000000000000000000000000;;		frame.CFHeader.Flags = 0
0000000000000000000000000000000000000000;;		frame.CFHeader.length = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.LastGoodStreamId); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.Status); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *HeadersFrame) write(f *Framer) error {
0000000000000000000000000000000000000000;;		return f.writeHeadersFrame(frame)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *WindowUpdateFrame) write(f *Framer) (err error) {
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeWindowUpdate
0000000000000000000000000000000000000000;;		frame.CFHeader.Flags = 0
0000000000000000000000000000000000000000;;		frame.CFHeader.length = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.StreamId); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.DeltaWindowSize); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (frame *DataFrame) write(f *Framer) error {
0000000000000000000000000000000000000000;;		return f.writeDataFrame(frame)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteFrame writes a frame.
0000000000000000000000000000000000000000;;	func (f *Framer) WriteFrame(frame Frame) error {
0000000000000000000000000000000000000000;;		return frame.write(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeControlFrameHeader(w io.Writer, h ControlFrameHeader) error {
0000000000000000000000000000000000000000;;		if err := binary.Write(w, binary.BigEndian, 0x8000|h.version); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := binary.Write(w, binary.BigEndian, h.frameType); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		flagsAndLength := uint32(h.Flags)<<24 | h.length
0000000000000000000000000000000000000000;;		if err := binary.Write(w, binary.BigEndian, flagsAndLength); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeHeaderValueBlock(w io.Writer, h http.Header) (n int, err error) {
0000000000000000000000000000000000000000;;		n = 0
0000000000000000000000000000000000000000;;		if err = binary.Write(w, binary.BigEndian, uint32(len(h))); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n += 2
0000000000000000000000000000000000000000;;		for name, values := range h {
0000000000000000000000000000000000000000;;			if err = binary.Write(w, binary.BigEndian, uint32(len(name))); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			n += 2
0000000000000000000000000000000000000000;;			name = strings.ToLower(name)
0000000000000000000000000000000000000000;;			if _, err = io.WriteString(w, name); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			n += len(name)
0000000000000000000000000000000000000000;;			v := strings.Join(values, headerValueSeparator)
0000000000000000000000000000000000000000;;			if err = binary.Write(w, binary.BigEndian, uint32(len(v))); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			n += 2
0000000000000000000000000000000000000000;;			if _, err = io.WriteString(w, v); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			n += len(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *Framer) writeSynStreamFrame(frame *SynStreamFrame) (err error) {
0000000000000000000000000000000000000000;;		if frame.StreamId == 0 {
0000000000000000000000000000000000000000;;			return &Error{ZeroStreamId, 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Marshal the headers.
0000000000000000000000000000000000000000;;		var writer io.Writer = f.headerBuf
0000000000000000000000000000000000000000;;		if !f.headerCompressionDisabled {
0000000000000000000000000000000000000000;;			writer = f.headerCompressor
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = writeHeaderValueBlock(writer, frame.Headers); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !f.headerCompressionDisabled {
0000000000000000000000000000000000000000;;			f.headerCompressor.Flush()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set ControlFrameHeader.
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeSynStream
0000000000000000000000000000000000000000;;		frame.CFHeader.length = uint32(len(f.headerBuf.Bytes()) + 10)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.StreamId); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.AssociatedToStreamId); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.Priority<<5); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.Slot); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = f.w.Write(f.headerBuf.Bytes()); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.headerBuf.Reset()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *Framer) writeSynReplyFrame(frame *SynReplyFrame) (err error) {
0000000000000000000000000000000000000000;;		if frame.StreamId == 0 {
0000000000000000000000000000000000000000;;			return &Error{ZeroStreamId, 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Marshal the headers.
0000000000000000000000000000000000000000;;		var writer io.Writer = f.headerBuf
0000000000000000000000000000000000000000;;		if !f.headerCompressionDisabled {
0000000000000000000000000000000000000000;;			writer = f.headerCompressor
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = writeHeaderValueBlock(writer, frame.Headers); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !f.headerCompressionDisabled {
0000000000000000000000000000000000000000;;			f.headerCompressor.Flush()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set ControlFrameHeader.
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeSynReply
0000000000000000000000000000000000000000;;		frame.CFHeader.length = uint32(len(f.headerBuf.Bytes()) + 4)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.StreamId); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = f.w.Write(f.headerBuf.Bytes()); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.headerBuf.Reset()
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *Framer) writeHeadersFrame(frame *HeadersFrame) (err error) {
0000000000000000000000000000000000000000;;		if frame.StreamId == 0 {
0000000000000000000000000000000000000000;;			return &Error{ZeroStreamId, 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Marshal the headers.
0000000000000000000000000000000000000000;;		var writer io.Writer = f.headerBuf
0000000000000000000000000000000000000000;;		if !f.headerCompressionDisabled {
0000000000000000000000000000000000000000;;			writer = f.headerCompressor
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = writeHeaderValueBlock(writer, frame.Headers); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !f.headerCompressionDisabled {
0000000000000000000000000000000000000000;;			f.headerCompressor.Flush()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set ControlFrameHeader.
0000000000000000000000000000000000000000;;		frame.CFHeader.version = Version
0000000000000000000000000000000000000000;;		frame.CFHeader.frameType = TypeHeaders
0000000000000000000000000000000000000000;;		frame.CFHeader.length = uint32(len(f.headerBuf.Bytes()) + 4)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = writeControlFrameHeader(f.w, frame.CFHeader); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.StreamId); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = f.w.Write(f.headerBuf.Bytes()); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.headerBuf.Reset()
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *Framer) writeDataFrame(frame *DataFrame) (err error) {
0000000000000000000000000000000000000000;;		if frame.StreamId == 0 {
0000000000000000000000000000000000000000;;			return &Error{ZeroStreamId, 0}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if frame.StreamId&0x80000000 != 0 || len(frame.Data) > MaxDataLength {
0000000000000000000000000000000000000000;;			return &Error{InvalidDataFrame, frame.StreamId}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serialize frame to Writer.
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, frame.StreamId); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		flagsAndLength := uint32(frame.Flags)<<24 | uint32(len(frame.Data))
0000000000000000000000000000000000000000;;		if err = binary.Write(f.w, binary.BigEndian, flagsAndLength); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = f.w.Write(frame.Data); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
