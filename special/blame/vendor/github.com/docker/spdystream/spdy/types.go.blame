0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1d0fae6481d99ffc5bb4650837b76151bf731a37;Godeps/_workspace/src/github.com/docker/spdystream/spdy/types.go[Godeps/_workspace/src/github.com/docker/spdystream/spdy/types.go][vendor/github.com/docker/spdystream/spdy/types.go];	
0000000000000000000000000000000000000000;;	// Package spdy implements the SPDY protocol (currently SPDY/3), described in
0000000000000000000000000000000000000000;;	// http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3.
0000000000000000000000000000000000000000;;	package spdy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"compress/zlib"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version is the protocol version number that this package implements.
0000000000000000000000000000000000000000;;	const Version = 3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControlFrameType stores the type field in a control frame header.
0000000000000000000000000000000000000000;;	type ControlFrameType uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TypeSynStream    ControlFrameType = 0x0001
0000000000000000000000000000000000000000;;		TypeSynReply                      = 0x0002
0000000000000000000000000000000000000000;;		TypeRstStream                     = 0x0003
0000000000000000000000000000000000000000;;		TypeSettings                      = 0x0004
0000000000000000000000000000000000000000;;		TypePing                          = 0x0006
0000000000000000000000000000000000000000;;		TypeGoAway                        = 0x0007
0000000000000000000000000000000000000000;;		TypeHeaders                       = 0x0008
0000000000000000000000000000000000000000;;		TypeWindowUpdate                  = 0x0009
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControlFlags are the flags that can be set on a control frame.
0000000000000000000000000000000000000000;;	type ControlFlags uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ControlFlagFin                   ControlFlags = 0x01
0000000000000000000000000000000000000000;;		ControlFlagUnidirectional                     = 0x02
0000000000000000000000000000000000000000;;		ControlFlagSettingsClearSettings              = 0x01
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataFlags are the flags that can be set on a data frame.
0000000000000000000000000000000000000000;;	type DataFlags uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DataFlagFin DataFlags = 0x01
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MaxDataLength is the maximum number of bytes that can be stored in one frame.
0000000000000000000000000000000000000000;;	const MaxDataLength = 1<<24 - 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// headerValueSepator separates multiple header values.
0000000000000000000000000000000000000000;;	const headerValueSeparator = "\x00"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Frame is a single SPDY frame in its unpacked in-memory representation. Use
0000000000000000000000000000000000000000;;	// Framer to read and write it.
0000000000000000000000000000000000000000;;	type Frame interface {
0000000000000000000000000000000000000000;;		write(f *Framer) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControlFrameHeader contains all the fields in a control frame header,
0000000000000000000000000000000000000000;;	// in its unpacked in-memory representation.
0000000000000000000000000000000000000000;;	type ControlFrameHeader struct {
0000000000000000000000000000000000000000;;		// Note, high bit is the "Control" bit.
0000000000000000000000000000000000000000;;		version   uint16 // spdy version number
0000000000000000000000000000000000000000;;		frameType ControlFrameType
0000000000000000000000000000000000000000;;		Flags     ControlFlags
0000000000000000000000000000000000000000;;		length    uint32 // length of data field
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type controlFrame interface {
0000000000000000000000000000000000000000;;		Frame
0000000000000000000000000000000000000000;;		read(h ControlFrameHeader, f *Framer) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamId represents a 31-bit value identifying the stream.
0000000000000000000000000000000000000000;;	type StreamId uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SynStreamFrame is the unpacked, in-memory representation of a SYN_STREAM
0000000000000000000000000000000000000000;;	// frame.
0000000000000000000000000000000000000000;;	type SynStreamFrame struct {
0000000000000000000000000000000000000000;;		CFHeader             ControlFrameHeader
0000000000000000000000000000000000000000;;		StreamId             StreamId
0000000000000000000000000000000000000000;;		AssociatedToStreamId StreamId // stream id for a stream which this stream is associated to
0000000000000000000000000000000000000000;;		Priority             uint8    // priority of this frame (3-bit)
0000000000000000000000000000000000000000;;		Slot                 uint8    // index in the server's credential vector of the client certificate
0000000000000000000000000000000000000000;;		Headers              http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SynReplyFrame is the unpacked, in-memory representation of a SYN_REPLY frame.
0000000000000000000000000000000000000000;;	type SynReplyFrame struct {
0000000000000000000000000000000000000000;;		CFHeader ControlFrameHeader
0000000000000000000000000000000000000000;;		StreamId StreamId
0000000000000000000000000000000000000000;;		Headers  http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RstStreamStatus represents the status that led to a RST_STREAM.
0000000000000000000000000000000000000000;;	type RstStreamStatus uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ProtocolError RstStreamStatus = iota + 1
0000000000000000000000000000000000000000;;		InvalidStream
0000000000000000000000000000000000000000;;		RefusedStream
0000000000000000000000000000000000000000;;		UnsupportedVersion
0000000000000000000000000000000000000000;;		Cancel
0000000000000000000000000000000000000000;;		InternalError
0000000000000000000000000000000000000000;;		FlowControlError
0000000000000000000000000000000000000000;;		StreamInUse
0000000000000000000000000000000000000000;;		StreamAlreadyClosed
0000000000000000000000000000000000000000;;		InvalidCredentials
0000000000000000000000000000000000000000;;		FrameTooLarge
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RstStreamFrame is the unpacked, in-memory representation of a RST_STREAM
0000000000000000000000000000000000000000;;	// frame.
0000000000000000000000000000000000000000;;	type RstStreamFrame struct {
0000000000000000000000000000000000000000;;		CFHeader ControlFrameHeader
0000000000000000000000000000000000000000;;		StreamId StreamId
0000000000000000000000000000000000000000;;		Status   RstStreamStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SettingsFlag represents a flag in a SETTINGS frame.
0000000000000000000000000000000000000000;;	type SettingsFlag uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FlagSettingsPersistValue SettingsFlag = 0x1
0000000000000000000000000000000000000000;;		FlagSettingsPersisted                 = 0x2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SettingsFlag represents the id of an id/value pair in a SETTINGS frame.
0000000000000000000000000000000000000000;;	type SettingsId uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SettingsUploadBandwidth SettingsId = iota + 1
0000000000000000000000000000000000000000;;		SettingsDownloadBandwidth
0000000000000000000000000000000000000000;;		SettingsRoundTripTime
0000000000000000000000000000000000000000;;		SettingsMaxConcurrentStreams
0000000000000000000000000000000000000000;;		SettingsCurrentCwnd
0000000000000000000000000000000000000000;;		SettingsDownloadRetransRate
0000000000000000000000000000000000000000;;		SettingsInitialWindowSize
0000000000000000000000000000000000000000;;		SettingsClientCretificateVectorSize
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SettingsFlagIdValue is the unpacked, in-memory representation of the
0000000000000000000000000000000000000000;;	// combined flag/id/value for a setting in a SETTINGS frame.
0000000000000000000000000000000000000000;;	type SettingsFlagIdValue struct {
0000000000000000000000000000000000000000;;		Flag  SettingsFlag
0000000000000000000000000000000000000000;;		Id    SettingsId
0000000000000000000000000000000000000000;;		Value uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SettingsFrame is the unpacked, in-memory representation of a SPDY
0000000000000000000000000000000000000000;;	// SETTINGS frame.
0000000000000000000000000000000000000000;;	type SettingsFrame struct {
0000000000000000000000000000000000000000;;		CFHeader     ControlFrameHeader
0000000000000000000000000000000000000000;;		FlagIdValues []SettingsFlagIdValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PingFrame is the unpacked, in-memory representation of a PING frame.
0000000000000000000000000000000000000000;;	type PingFrame struct {
0000000000000000000000000000000000000000;;		CFHeader ControlFrameHeader
0000000000000000000000000000000000000000;;		Id       uint32 // unique id for this ping, from server is even, from client is odd.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoAwayStatus represents the status in a GoAwayFrame.
0000000000000000000000000000000000000000;;	type GoAwayStatus uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GoAwayOK GoAwayStatus = iota
0000000000000000000000000000000000000000;;		GoAwayProtocolError
0000000000000000000000000000000000000000;;		GoAwayInternalError
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoAwayFrame is the unpacked, in-memory representation of a GOAWAY frame.
0000000000000000000000000000000000000000;;	type GoAwayFrame struct {
0000000000000000000000000000000000000000;;		CFHeader         ControlFrameHeader
0000000000000000000000000000000000000000;;		LastGoodStreamId StreamId // last stream id which was accepted by sender
0000000000000000000000000000000000000000;;		Status           GoAwayStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HeadersFrame is the unpacked, in-memory representation of a HEADERS frame.
0000000000000000000000000000000000000000;;	type HeadersFrame struct {
0000000000000000000000000000000000000000;;		CFHeader ControlFrameHeader
0000000000000000000000000000000000000000;;		StreamId StreamId
0000000000000000000000000000000000000000;;		Headers  http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WindowUpdateFrame is the unpacked, in-memory representation of a
0000000000000000000000000000000000000000;;	// WINDOW_UPDATE frame.
0000000000000000000000000000000000000000;;	type WindowUpdateFrame struct {
0000000000000000000000000000000000000000;;		CFHeader        ControlFrameHeader
0000000000000000000000000000000000000000;;		StreamId        StreamId
0000000000000000000000000000000000000000;;		DeltaWindowSize uint32 // additional number of bytes to existing window size
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Implement credential frame and related methods.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataFrame is the unpacked, in-memory representation of a DATA frame.
0000000000000000000000000000000000000000;;	type DataFrame struct {
0000000000000000000000000000000000000000;;		// Note, high bit is the "Control" bit. Should be 0 for data frames.
0000000000000000000000000000000000000000;;		StreamId StreamId
0000000000000000000000000000000000000000;;		Flags    DataFlags
0000000000000000000000000000000000000000;;		Data     []byte // payload data of this frame
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A SPDY specific error.
0000000000000000000000000000000000000000;;	type ErrorCode string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		UnlowercasedHeaderName     ErrorCode = "header was not lowercased"
0000000000000000000000000000000000000000;;		DuplicateHeaders                     = "multiple headers with same name"
0000000000000000000000000000000000000000;;		WrongCompressedPayloadSize           = "compressed payload size was incorrect"
0000000000000000000000000000000000000000;;		UnknownFrameType                     = "unknown frame type"
0000000000000000000000000000000000000000;;		InvalidControlFrame                  = "invalid control frame"
0000000000000000000000000000000000000000;;		InvalidDataFrame                     = "invalid data frame"
0000000000000000000000000000000000000000;;		InvalidHeaderPresent                 = "frame contained invalid header"
0000000000000000000000000000000000000000;;		ZeroStreamId                         = "stream id zero is disallowed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error contains both the type of error and additional values. StreamId is 0
0000000000000000000000000000000000000000;;	// if Error is not associated with a stream.
0000000000000000000000000000000000000000;;	type Error struct {
0000000000000000000000000000000000000000;;		Err      ErrorCode
0000000000000000000000000000000000000000;;		StreamId StreamId
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Error) Error() string {
0000000000000000000000000000000000000000;;		return string(e.Err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var invalidReqHeaders = map[string]bool{
0000000000000000000000000000000000000000;;		"Connection":        true,
0000000000000000000000000000000000000000;;		"Host":              true,
0000000000000000000000000000000000000000;;		"Keep-Alive":        true,
0000000000000000000000000000000000000000;;		"Proxy-Connection":  true,
0000000000000000000000000000000000000000;;		"Transfer-Encoding": true,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var invalidRespHeaders = map[string]bool{
0000000000000000000000000000000000000000;;		"Connection":        true,
0000000000000000000000000000000000000000;;		"Keep-Alive":        true,
0000000000000000000000000000000000000000;;		"Proxy-Connection":  true,
0000000000000000000000000000000000000000;;		"Transfer-Encoding": true,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Framer handles serializing/deserializing SPDY frames, including compressing/
0000000000000000000000000000000000000000;;	// decompressing payloads.
0000000000000000000000000000000000000000;;	type Framer struct {
0000000000000000000000000000000000000000;;		headerCompressionDisabled bool
0000000000000000000000000000000000000000;;		w                         io.Writer
0000000000000000000000000000000000000000;;		headerBuf                 *bytes.Buffer
0000000000000000000000000000000000000000;;		headerCompressor          *zlib.Writer
0000000000000000000000000000000000000000;;		r                         io.Reader
0000000000000000000000000000000000000000;;		headerReader              io.LimitedReader
0000000000000000000000000000000000000000;;		headerDecompressor        io.ReadCloser
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFramer allocates a new Framer for a given SPDY connection, represented by
0000000000000000000000000000000000000000;;	// a io.Writer and io.Reader. Note that Framer will read and write individual fields
0000000000000000000000000000000000000000;;	// from/to the Reader and Writer, so the caller should pass in an appropriately
0000000000000000000000000000000000000000;;	// buffered implementation to optimize performance.
0000000000000000000000000000000000000000;;	func NewFramer(w io.Writer, r io.Reader) (*Framer, error) {
0000000000000000000000000000000000000000;;		compressBuf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		compressor, err := zlib.NewWriterLevelDict(compressBuf, zlib.BestCompression, []byte(headerDictionary))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framer := &Framer{
0000000000000000000000000000000000000000;;			w:                w,
0000000000000000000000000000000000000000;;			headerBuf:        compressBuf,
0000000000000000000000000000000000000000;;			headerCompressor: compressor,
0000000000000000000000000000000000000000;;			r:                r,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return framer, nil
0000000000000000000000000000000000000000;;	}
