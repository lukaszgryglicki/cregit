0000000000000000000000000000000000000000;;	package spdystream
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/docker/spdystream/priority.go[Godeps/_workspace/src/github.com/docker/spdystream/priority.go][vendor/github.com/docker/spdystream/priority.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"container/heap"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/spdystream/spdy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type prioritizedFrame struct {
0000000000000000000000000000000000000000;;		frame    spdy.Frame
0000000000000000000000000000000000000000;;		priority uint8
0000000000000000000000000000000000000000;;		insertId uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type frameQueue []*prioritizedFrame
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fq frameQueue) Len() int {
0000000000000000000000000000000000000000;;		return len(fq)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fq frameQueue) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if fq[i].priority == fq[j].priority {
0000000000000000000000000000000000000000;;			return fq[i].insertId < fq[j].insertId
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fq[i].priority < fq[j].priority
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fq frameQueue) Swap(i, j int) {
0000000000000000000000000000000000000000;;		fq[i], fq[j] = fq[j], fq[i]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fq *frameQueue) Push(x interface{}) {
0000000000000000000000000000000000000000;;		*fq = append(*fq, x.(*prioritizedFrame))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fq *frameQueue) Pop() interface{} {
0000000000000000000000000000000000000000;;		old := *fq
0000000000000000000000000000000000000000;;		n := len(old)
0000000000000000000000000000000000000000;;		*fq = old[0 : n-1]
0000000000000000000000000000000000000000;;		return old[n-1]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PriorityFrameQueue struct {
0000000000000000000000000000000000000000;;		queue        *frameQueue
0000000000000000000000000000000000000000;;		c            *sync.Cond
0000000000000000000000000000000000000000;;		size         int
0000000000000000000000000000000000000000;;		nextInsertId uint64
0000000000000000000000000000000000000000;;		drain        bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPriorityFrameQueue(size int) *PriorityFrameQueue {
0000000000000000000000000000000000000000;;		queue := make(frameQueue, 0, size)
0000000000000000000000000000000000000000;;		heap.Init(&queue)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &PriorityFrameQueue{
0000000000000000000000000000000000000000;;			queue: &queue,
0000000000000000000000000000000000000000;;			size:  size,
0000000000000000000000000000000000000000;;			c:     sync.NewCond(&sync.Mutex{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *PriorityFrameQueue) Push(frame spdy.Frame, priority uint8) {
0000000000000000000000000000000000000000;;		q.c.L.Lock()
0000000000000000000000000000000000000000;;		defer q.c.L.Unlock()
0000000000000000000000000000000000000000;;		for q.queue.Len() >= q.size {
0000000000000000000000000000000000000000;;			q.c.Wait()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pFrame := &prioritizedFrame{
0000000000000000000000000000000000000000;;			frame:    frame,
0000000000000000000000000000000000000000;;			priority: priority,
0000000000000000000000000000000000000000;;			insertId: q.nextInsertId,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		q.nextInsertId = q.nextInsertId + 1
0000000000000000000000000000000000000000;;		heap.Push(q.queue, pFrame)
0000000000000000000000000000000000000000;;		q.c.Signal()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *PriorityFrameQueue) Pop() spdy.Frame {
0000000000000000000000000000000000000000;;		q.c.L.Lock()
0000000000000000000000000000000000000000;;		defer q.c.L.Unlock()
0000000000000000000000000000000000000000;;		for q.queue.Len() == 0 {
0000000000000000000000000000000000000000;;			if q.drain {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			q.c.Wait()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		frame := heap.Pop(q.queue).(*prioritizedFrame).frame
0000000000000000000000000000000000000000;;		q.c.Signal()
0000000000000000000000000000000000000000;;		return frame
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *PriorityFrameQueue) Drain() {
0000000000000000000000000000000000000000;;		q.c.L.Lock()
0000000000000000000000000000000000000000;;		defer q.c.L.Unlock()
0000000000000000000000000000000000000000;;		q.drain = true
0000000000000000000000000000000000000000;;		q.c.Broadcast()
0000000000000000000000000000000000000000;;	}
