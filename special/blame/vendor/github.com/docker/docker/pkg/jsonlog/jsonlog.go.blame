0000000000000000000000000000000000000000;;	package jsonlog
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLog represents a log message, typically a single entry from a given log stream.
0000000000000000000000000000000000000000;;	// JSONLogs can be easily serialized to and from JSON and support custom formatting.
0000000000000000000000000000000000000000;;	type JSONLog struct {
0000000000000000000000000000000000000000;;		// Log is the log message
0000000000000000000000000000000000000000;;		Log string `json:"log,omitempty"`
0000000000000000000000000000000000000000;;		// Stream is the log source
0000000000000000000000000000000000000000;;		Stream string `json:"stream,omitempty"`
0000000000000000000000000000000000000000;;		// Created is the created timestamp of log
0000000000000000000000000000000000000000;;		Created time.Time `json:"time"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Format returns the log formatted according to format
0000000000000000000000000000000000000000;;	// If format is nil, returns the log message
0000000000000000000000000000000000000000;;	// If format is json, returns the log marshaled in json format
0000000000000000000000000000000000000000;;	// By default, returns the log with the log time formatted according to format.
0000000000000000000000000000000000000000;;	func (jl *JSONLog) Format(format string) (string, error) {
0000000000000000000000000000000000000000;;		if format == "" {
0000000000000000000000000000000000000000;;			return jl.Log, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if format == "json" {
0000000000000000000000000000000000000000;;			m, err := json.Marshal(jl)
0000000000000000000000000000000000000000;;			return string(m), err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s %s", jl.Created.Format(format), jl.Log), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reset resets the log to nil.
0000000000000000000000000000000000000000;;	func (jl *JSONLog) Reset() {
0000000000000000000000000000000000000000;;		jl.Log = ""
0000000000000000000000000000000000000000;;		jl.Stream = ""
0000000000000000000000000000000000000000;;		jl.Created = time.Time{}
0000000000000000000000000000000000000000;;	}
