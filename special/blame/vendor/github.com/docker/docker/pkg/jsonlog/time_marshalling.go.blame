0000000000000000000000000000000000000000;;	// Package jsonlog provides helper functions to parse and print time (time.Time) as JSON.
0000000000000000000000000000000000000000;;	package jsonlog
2958e5670c297c4a2f8bd1a097998d33b7997d2e;Godeps/_workspace/src/github.com/docker/docker/pkg/timeutils/json.go[Godeps/_workspace/src/github.com/docker/docker/pkg/timeutils/json.go][vendor/github.com/docker/docker/pkg/jsonlog/time_marshalling.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RFC3339NanoFixed is our own version of RFC339Nano because we want one
0000000000000000000000000000000000000000;;		// that pads the nano seconds part with zeros to ensure
0000000000000000000000000000000000000000;;		// the timestamps are aligned in the logs.
0000000000000000000000000000000000000000;;		RFC3339NanoFixed = "2006-01-02T15:04:05.000000000Z07:00"
0000000000000000000000000000000000000000;;		// JSONFormat is the format used by FastMarshalJSON
0000000000000000000000000000000000000000;;		JSONFormat = `"` + time.RFC3339Nano + `"`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FastTimeMarshalJSON avoids one of the extra allocations that
0000000000000000000000000000000000000000;;	// time.MarshalJSON is making.
0000000000000000000000000000000000000000;;	func FastTimeMarshalJSON(t time.Time) (string, error) {
0000000000000000000000000000000000000000;;		if y := t.Year(); y < 0 || y >= 10000 {
0000000000000000000000000000000000000000;;			// RFC 3339 is clear that years are 4 digits exactly.
0000000000000000000000000000000000000000;;			// See golang.org/issue/4556#c15 for more discussion.
0000000000000000000000000000000000000000;;			return "", errors.New("time.MarshalJSON: year outside of range [0,9999]")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return t.Format(JSONFormat), nil
0000000000000000000000000000000000000000;;	}
