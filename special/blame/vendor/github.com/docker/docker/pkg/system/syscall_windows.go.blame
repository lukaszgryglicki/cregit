0000000000000000000000000000000000000000;;	package system
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OSVersion is a wrapper for Windows version information
0000000000000000000000000000000000000000;;	// https://msdn.microsoft.com/en-us/library/windows/desktop/ms724439(v=vs.85).aspx
0000000000000000000000000000000000000000;;	type OSVersion struct {
0000000000000000000000000000000000000000;;		Version      uint32
0000000000000000000000000000000000000000;;		MajorVersion uint8
0000000000000000000000000000000000000000;;		MinorVersion uint8
0000000000000000000000000000000000000000;;		Build        uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetOSVersion gets the operating system version on Windows. Note that
0000000000000000000000000000000000000000;;	// docker.exe must be manifested to get the correct version information.
0000000000000000000000000000000000000000;;	func GetOSVersion() (OSVersion, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		osv := OSVersion{}
0000000000000000000000000000000000000000;;		osv.Version, err = syscall.GetVersion()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return osv, fmt.Errorf("Failed to call GetVersion()")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		osv.MajorVersion = uint8(osv.Version & 0xFF)
0000000000000000000000000000000000000000;;		osv.MinorVersion = uint8(osv.Version >> 8 & 0xFF)
0000000000000000000000000000000000000000;;		osv.Build = uint16(osv.Version >> 16)
0000000000000000000000000000000000000000;;		return osv, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmount is a platform-specific helper function to call
0000000000000000000000000000000000000000;;	// the unmount syscall. Not supported on Windows
0000000000000000000000000000000000000000;;	func Unmount(dest string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CommandLineToArgv wraps the Windows syscall to turn a commandline into an argument array.
0000000000000000000000000000000000000000;;	func CommandLineToArgv(commandLine string) ([]string, error) {
0000000000000000000000000000000000000000;;		var argc int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		argsPtr, err := syscall.UTF16PtrFromString(commandLine)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		argv, err := syscall.CommandLineToArgv(argsPtr, &argc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer syscall.LocalFree(syscall.Handle(uintptr(unsafe.Pointer(argv))))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newArgs := make([]string, argc)
0000000000000000000000000000000000000000;;		for i, v := range (*argv)[:argc] {
0000000000000000000000000000000000000000;;			newArgs[i] = string(syscall.UTF16ToString((*v)[:]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newArgs, nil
0000000000000000000000000000000000000000;;	}
