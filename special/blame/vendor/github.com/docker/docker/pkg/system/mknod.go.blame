0000000000000000000000000000000000000000;;	// +build !windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mknod creates a filesystem node (file, device special file or named pipe) named path
0000000000000000000000000000000000000000;;	// with attributes specified by mode and dev.
0000000000000000000000000000000000000000;;	func Mknod(path string, mode uint32, dev int) error {
0000000000000000000000000000000000000000;;		return syscall.Mknod(path, mode, dev)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mkdev is used to build the value of linux devices (in /dev/) which specifies major
0000000000000000000000000000000000000000;;	// and minor number of the newly created device special file.
0000000000000000000000000000000000000000;;	// Linux device nodes are a bit weird due to backwards compat with 16 bit device nodes.
0000000000000000000000000000000000000000;;	// They are, from low to high: the lower 8 bits of the minor, then 12 bits of the major,
0000000000000000000000000000000000000000;;	// then the top 12 bits of the minor.
0000000000000000000000000000000000000000;;	func Mkdev(major int64, minor int64) uint32 {
0000000000000000000000000000000000000000;;		return uint32(((minor & 0xfff00) << 12) | ((major & 0xfff) << 8) | (minor & 0xff))
0000000000000000000000000000000000000000;;	}
