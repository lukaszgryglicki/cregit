0000000000000000000000000000000000000000;;	// +build windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//setCTime will set the create time on a file. On Windows, this requires
0000000000000000000000000000000000000000;;	//calling SetFileTime and explicitly including the create time.
0000000000000000000000000000000000000000;;	func setCTime(path string, ctime time.Time) error {
0000000000000000000000000000000000000000;;		ctimespec := syscall.NsecToTimespec(ctime.UnixNano())
0000000000000000000000000000000000000000;;		pathp, e := syscall.UTF16PtrFromString(path)
0000000000000000000000000000000000000000;;		if e != nil {
0000000000000000000000000000000000000000;;			return e
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		h, e := syscall.CreateFile(pathp,
0000000000000000000000000000000000000000;;			syscall.FILE_WRITE_ATTRIBUTES, syscall.FILE_SHARE_WRITE, nil,
0000000000000000000000000000000000000000;;			syscall.OPEN_EXISTING, syscall.FILE_FLAG_BACKUP_SEMANTICS, 0)
0000000000000000000000000000000000000000;;		if e != nil {
0000000000000000000000000000000000000000;;			return e
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer syscall.Close(h)
0000000000000000000000000000000000000000;;		c := syscall.NsecToFiletime(syscall.TimespecToNsec(ctimespec))
0000000000000000000000000000000000000000;;		return syscall.SetFileTime(h, &c, nil, nil)
0000000000000000000000000000000000000000;;	}
