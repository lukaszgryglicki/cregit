0000000000000000000000000000000000000000;;	package term
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/docker/docker/pkg/term/termios_darwin.go[Godeps/_workspace/src/github.com/docker/docker/pkg/term/termios_darwin.go][vendor/github.com/docker/docker/pkg/term/termios_darwin.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		getTermios = syscall.TIOCGETA
0000000000000000000000000000000000000000;;		setTermios = syscall.TIOCSETA
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Termios magic numbers, passthrough to the ones defined in syscall.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IGNBRK = syscall.IGNBRK
0000000000000000000000000000000000000000;;		PARMRK = syscall.PARMRK
0000000000000000000000000000000000000000;;		INLCR  = syscall.INLCR
0000000000000000000000000000000000000000;;		IGNCR  = syscall.IGNCR
0000000000000000000000000000000000000000;;		ECHONL = syscall.ECHONL
0000000000000000000000000000000000000000;;		CSIZE  = syscall.CSIZE
0000000000000000000000000000000000000000;;		ICRNL  = syscall.ICRNL
0000000000000000000000000000000000000000;;		ISTRIP = syscall.ISTRIP
0000000000000000000000000000000000000000;;		PARENB = syscall.PARENB
0000000000000000000000000000000000000000;;		ECHO   = syscall.ECHO
0000000000000000000000000000000000000000;;		ICANON = syscall.ICANON
0000000000000000000000000000000000000000;;		ISIG   = syscall.ISIG
0000000000000000000000000000000000000000;;		IXON   = syscall.IXON
0000000000000000000000000000000000000000;;		BRKINT = syscall.BRKINT
0000000000000000000000000000000000000000;;		INPCK  = syscall.INPCK
0000000000000000000000000000000000000000;;		OPOST  = syscall.OPOST
0000000000000000000000000000000000000000;;		CS8    = syscall.CS8
0000000000000000000000000000000000000000;;		IEXTEN = syscall.IEXTEN
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Termios is the Unix API for terminal I/O.
0000000000000000000000000000000000000000;;	type Termios struct {
0000000000000000000000000000000000000000;;		Iflag  uint64
0000000000000000000000000000000000000000;;		Oflag  uint64
0000000000000000000000000000000000000000;;		Cflag  uint64
0000000000000000000000000000000000000000;;		Lflag  uint64
0000000000000000000000000000000000000000;;		Cc     [20]byte
0000000000000000000000000000000000000000;;		Ispeed uint64
0000000000000000000000000000000000000000;;		Ospeed uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRaw put the terminal connected to the given file descriptor into raw
0000000000000000000000000000000000000000;;	// mode and returns the previous state of the terminal so that it can be
0000000000000000000000000000000000000000;;	// restored.
0000000000000000000000000000000000000000;;	func MakeRaw(fd uintptr) (*State, error) {
0000000000000000000000000000000000000000;;		var oldState State
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall(syscall.SYS_IOCTL, fd, uintptr(getTermios), uintptr(unsafe.Pointer(&oldState.termios))); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newState := oldState.termios
0000000000000000000000000000000000000000;;		newState.Iflag &^= (IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL | IXON)
0000000000000000000000000000000000000000;;		newState.Oflag &^= OPOST
0000000000000000000000000000000000000000;;		newState.Lflag &^= (ECHO | ECHONL | ICANON | ISIG | IEXTEN)
0000000000000000000000000000000000000000;;		newState.Cflag &^= (CSIZE | PARENB)
0000000000000000000000000000000000000000;;		newState.Cflag |= CS8
0000000000000000000000000000000000000000;;		newState.Cc[syscall.VMIN] = 1
0000000000000000000000000000000000000000;;		newState.Cc[syscall.VTIME] = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall(syscall.SYS_IOCTL, fd, uintptr(setTermios), uintptr(unsafe.Pointer(&newState))); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &oldState, nil
0000000000000000000000000000000000000000;;	}
