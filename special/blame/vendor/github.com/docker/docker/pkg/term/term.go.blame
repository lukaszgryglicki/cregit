0000000000000000000000000000000000000000;;	// +build !windows
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/docker/docker/pkg/term/term.go[Godeps/_workspace/src/github.com/docker/docker/pkg/term/term.go][vendor/github.com/docker/docker/pkg/term/term.go];	
0000000000000000000000000000000000000000;;	// Package term provides provides structures and helper functions to work with
0000000000000000000000000000000000000000;;	// terminal (state, sizes).
0000000000000000000000000000000000000000;;	package term
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/signal"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrInvalidState is returned if the state of the terminal is invalid.
0000000000000000000000000000000000000000;;		ErrInvalidState = errors.New("Invalid terminal state")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// State represents the state of the terminal.
0000000000000000000000000000000000000000;;	type State struct {
0000000000000000000000000000000000000000;;		termios Termios
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Winsize represents the size of the terminal window.
0000000000000000000000000000000000000000;;	type Winsize struct {
0000000000000000000000000000000000000000;;		Height uint16
0000000000000000000000000000000000000000;;		Width  uint16
0000000000000000000000000000000000000000;;		x      uint16
0000000000000000000000000000000000000000;;		y      uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StdStreams returns the standard streams (stdin, stdout, stedrr).
0000000000000000000000000000000000000000;;	func StdStreams() (stdIn io.ReadCloser, stdOut, stdErr io.Writer) {
0000000000000000000000000000000000000000;;		return os.Stdin, os.Stdout, os.Stderr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFdInfo returns the file descriptor for an os.File and indicates whether the file represents a terminal.
0000000000000000000000000000000000000000;;	func GetFdInfo(in interface{}) (uintptr, bool) {
0000000000000000000000000000000000000000;;		var inFd uintptr
0000000000000000000000000000000000000000;;		var isTerminalIn bool
0000000000000000000000000000000000000000;;		if file, ok := in.(*os.File); ok {
0000000000000000000000000000000000000000;;			inFd = file.Fd()
0000000000000000000000000000000000000000;;			isTerminalIn = IsTerminal(inFd)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return inFd, isTerminalIn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetWinsize returns the window size based on the specified file descriptor.
0000000000000000000000000000000000000000;;	func GetWinsize(fd uintptr) (*Winsize, error) {
0000000000000000000000000000000000000000;;		ws := &Winsize{}
0000000000000000000000000000000000000000;;		_, _, err := syscall.Syscall(syscall.SYS_IOCTL, fd, uintptr(syscall.TIOCGWINSZ), uintptr(unsafe.Pointer(ws)))
0000000000000000000000000000000000000000;;		// Skip errno = 0
0000000000000000000000000000000000000000;;		if err == 0 {
0000000000000000000000000000000000000000;;			return ws, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ws, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetWinsize tries to set the specified window size for the specified file descriptor.
0000000000000000000000000000000000000000;;	func SetWinsize(fd uintptr, ws *Winsize) error {
0000000000000000000000000000000000000000;;		_, _, err := syscall.Syscall(syscall.SYS_IOCTL, fd, uintptr(syscall.TIOCSWINSZ), uintptr(unsafe.Pointer(ws)))
0000000000000000000000000000000000000000;;		// Skip errno = 0
0000000000000000000000000000000000000000;;		if err == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsTerminal returns true if the given file descriptor is a terminal.
0000000000000000000000000000000000000000;;	func IsTerminal(fd uintptr) bool {
0000000000000000000000000000000000000000;;		var termios Termios
0000000000000000000000000000000000000000;;		return tcget(fd, &termios) == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RestoreTerminal restores the terminal connected to the given file descriptor
0000000000000000000000000000000000000000;;	// to a previous state.
0000000000000000000000000000000000000000;;	func RestoreTerminal(fd uintptr, state *State) error {
0000000000000000000000000000000000000000;;		if state == nil {
0000000000000000000000000000000000000000;;			return ErrInvalidState
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := tcset(fd, &state.termios); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SaveState saves the state of the terminal connected to the given file descriptor.
0000000000000000000000000000000000000000;;	func SaveState(fd uintptr) (*State, error) {
0000000000000000000000000000000000000000;;		var oldState State
0000000000000000000000000000000000000000;;		if err := tcget(fd, &oldState.termios); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &oldState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableEcho applies the specified state to the terminal connected to the file
0000000000000000000000000000000000000000;;	// descriptor, with echo disabled.
0000000000000000000000000000000000000000;;	func DisableEcho(fd uintptr, state *State) error {
0000000000000000000000000000000000000000;;		newState := state.termios
0000000000000000000000000000000000000000;;		newState.Lflag &^= syscall.ECHO
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := tcset(fd, &newState); err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		handleInterrupt(fd, state)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRawTerminal puts the terminal connected to the given file descriptor into
0000000000000000000000000000000000000000;;	// raw mode and returns the previous state.
0000000000000000000000000000000000000000;;	func SetRawTerminal(fd uintptr) (*State, error) {
0000000000000000000000000000000000000000;;		oldState, err := MakeRaw(fd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		handleInterrupt(fd, oldState)
0000000000000000000000000000000000000000;;		return oldState, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func handleInterrupt(fd uintptr, state *State) {
0000000000000000000000000000000000000000;;		sigchan := make(chan os.Signal, 1)
0000000000000000000000000000000000000000;;		signal.Notify(sigchan, os.Interrupt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			_ = <-sigchan
0000000000000000000000000000000000000000;;			RestoreTerminal(fd, state)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
