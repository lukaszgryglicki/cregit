0000000000000000000000000000000000000000;;	// +build windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ansiterm "github.com/Azure/go-ansiterm"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-ansiterm/winterm"
0000000000000000000000000000000000000000;;		"github.com/Sirupsen/logrus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var logger *logrus.Logger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ansiWriter wraps a standard output file (e.g., os.Stdout) providing ANSI sequence translation.
0000000000000000000000000000000000000000;;	type ansiWriter struct {
0000000000000000000000000000000000000000;;		file           *os.File
0000000000000000000000000000000000000000;;		fd             uintptr
0000000000000000000000000000000000000000;;		infoReset      *winterm.CONSOLE_SCREEN_BUFFER_INFO
0000000000000000000000000000000000000000;;		command        []byte
0000000000000000000000000000000000000000;;		escapeSequence []byte
0000000000000000000000000000000000000000;;		inAnsiSequence bool
0000000000000000000000000000000000000000;;		parser         *ansiterm.AnsiParser
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAnsiWriter(nFile int) *ansiWriter {
0000000000000000000000000000000000000000;;		logFile := ioutil.Discard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isDebugEnv := os.Getenv(ansiterm.LogEnv); isDebugEnv == "1" {
0000000000000000000000000000000000000000;;			logFile, _ = os.Create("ansiReaderWriter.log")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger = &logrus.Logger{
0000000000000000000000000000000000000000;;			Out:       logFile,
0000000000000000000000000000000000000000;;			Formatter: new(logrus.TextFormatter),
0000000000000000000000000000000000000000;;			Level:     logrus.DebugLevel,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file, fd := winterm.GetStdFile(nFile)
0000000000000000000000000000000000000000;;		info, err := winterm.GetConsoleScreenBufferInfo(fd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parser := ansiterm.CreateParser("Ground", winterm.CreateWinEventHandler(fd, file))
0000000000000000000000000000000000000000;;		logger.Infof("newAnsiWriter: parser %p", parser)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aw := &ansiWriter{
0000000000000000000000000000000000000000;;			file:           file,
0000000000000000000000000000000000000000;;			fd:             fd,
0000000000000000000000000000000000000000;;			infoReset:      info,
0000000000000000000000000000000000000000;;			command:        make([]byte, 0, ansiterm.ANSI_MAX_CMD_LENGTH),
0000000000000000000000000000000000000000;;			escapeSequence: []byte(ansiterm.KEY_ESC_CSI),
0000000000000000000000000000000000000000;;			parser:         parser,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger.Infof("newAnsiWriter: aw.parser %p", aw.parser)
0000000000000000000000000000000000000000;;		logger.Infof("newAnsiWriter: %v", aw)
0000000000000000000000000000000000000000;;		return aw
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aw *ansiWriter) Fd() uintptr {
0000000000000000000000000000000000000000;;		return aw.fd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write writes len(p) bytes from p to the underlying data stream.
0000000000000000000000000000000000000000;;	func (aw *ansiWriter) Write(p []byte) (total int, err error) {
0000000000000000000000000000000000000000;;		if len(p) == 0 {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger.Infof("Write: % x", p)
0000000000000000000000000000000000000000;;		logger.Infof("Write: %s", string(p))
0000000000000000000000000000000000000000;;		return aw.parser.Parse(p)
0000000000000000000000000000000000000000;;	}
