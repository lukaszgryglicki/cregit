0000000000000000000000000000000000000000;;	// +build linux,cgo
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/docker/docker/pkg/term/tc_linux_cgo.go[Godeps/_workspace/src/github.com/docker/docker/pkg/term/tc_linux_cgo.go][vendor/github.com/docker/docker/pkg/term/tc_linux_cgo.go];	
0000000000000000000000000000000000000000;;	package term
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// #include <termios.h>
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Termios is the Unix API for terminal I/O.
0000000000000000000000000000000000000000;;	// It is passthgrouh for syscall.Termios in order to make it portable with
0000000000000000000000000000000000000000;;	// other platforms where it is not available or handled differently.
0000000000000000000000000000000000000000;;	type Termios syscall.Termios
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRaw put the terminal connected to the given file descriptor into raw
0000000000000000000000000000000000000000;;	// mode and returns the previous state of the terminal so that it can be
0000000000000000000000000000000000000000;;	// restored.
0000000000000000000000000000000000000000;;	func MakeRaw(fd uintptr) (*State, error) {
0000000000000000000000000000000000000000;;		var oldState State
0000000000000000000000000000000000000000;;		if err := tcget(fd, &oldState.termios); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newState := oldState.termios
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		C.cfmakeraw((*C.struct_termios)(unsafe.Pointer(&newState)))
0000000000000000000000000000000000000000;;		if err := tcset(fd, &newState); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &oldState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tcget(fd uintptr, p *Termios) syscall.Errno {
0000000000000000000000000000000000000000;;		ret, err := C.tcgetattr(C.int(fd), (*C.struct_termios)(unsafe.Pointer(p)))
0000000000000000000000000000000000000000;;		if ret != 0 {
0000000000000000000000000000000000000000;;			return err.(syscall.Errno)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tcset(fd uintptr, p *Termios) syscall.Errno {
0000000000000000000000000000000000000000;;		ret, err := C.tcsetattr(C.int(fd), C.TCSANOW, (*C.struct_termios)(unsafe.Pointer(p)))
0000000000000000000000000000000000000000;;		if ret != 0 {
0000000000000000000000000000000000000000;;			return err.(syscall.Errno)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
