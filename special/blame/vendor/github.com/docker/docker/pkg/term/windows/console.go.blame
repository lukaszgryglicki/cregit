0000000000000000000000000000000000000000;;	// +build windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/go-ansiterm/winterm"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ansiterm "github.com/Azure/go-ansiterm"
0000000000000000000000000000000000000000;;		"github.com/Sirupsen/logrus"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConEmuStreams returns prepared versions of console streams,
0000000000000000000000000000000000000000;;	// for proper use in ConEmu terminal.
0000000000000000000000000000000000000000;;	// The ConEmu terminal emulates ANSI on output streams well by default.
0000000000000000000000000000000000000000;;	func ConEmuStreams() (stdIn io.ReadCloser, stdOut, stdErr io.Writer) {
0000000000000000000000000000000000000000;;		if IsConsole(os.Stdin.Fd()) {
0000000000000000000000000000000000000000;;			stdIn = newAnsiReader(syscall.STD_INPUT_HANDLE)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			stdIn = os.Stdin
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stdOut = os.Stdout
0000000000000000000000000000000000000000;;		stdErr = os.Stderr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// WARNING (BEGIN): sourced from newAnsiWriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logFile := ioutil.Discard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isDebugEnv := os.Getenv(ansiterm.LogEnv); isDebugEnv == "1" {
0000000000000000000000000000000000000000;;			logFile, _ = os.Create("ansiReaderWriter.log")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger = &logrus.Logger{
0000000000000000000000000000000000000000;;			Out:       logFile,
0000000000000000000000000000000000000000;;			Formatter: new(logrus.TextFormatter),
0000000000000000000000000000000000000000;;			Level:     logrus.DebugLevel,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// WARNING (END): sourced from newAnsiWriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return stdIn, stdOut, stdErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConsoleStreams returns a wrapped version for each standard stream referencing a console,
0000000000000000000000000000000000000000;;	// that handles ANSI character sequences.
0000000000000000000000000000000000000000;;	func ConsoleStreams() (stdIn io.ReadCloser, stdOut, stdErr io.Writer) {
0000000000000000000000000000000000000000;;		if IsConsole(os.Stdin.Fd()) {
0000000000000000000000000000000000000000;;			stdIn = newAnsiReader(syscall.STD_INPUT_HANDLE)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			stdIn = os.Stdin
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if IsConsole(os.Stdout.Fd()) {
0000000000000000000000000000000000000000;;			stdOut = newAnsiWriter(syscall.STD_OUTPUT_HANDLE)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			stdOut = os.Stdout
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if IsConsole(os.Stderr.Fd()) {
0000000000000000000000000000000000000000;;			stdErr = newAnsiWriter(syscall.STD_ERROR_HANDLE)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			stdErr = os.Stderr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return stdIn, stdOut, stdErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHandleInfo returns file descriptor and bool indicating whether the file is a console.
0000000000000000000000000000000000000000;;	func GetHandleInfo(in interface{}) (uintptr, bool) {
0000000000000000000000000000000000000000;;		switch t := in.(type) {
0000000000000000000000000000000000000000;;		case *ansiReader:
0000000000000000000000000000000000000000;;			return t.Fd(), true
0000000000000000000000000000000000000000;;		case *ansiWriter:
0000000000000000000000000000000000000000;;			return t.Fd(), true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var inFd uintptr
0000000000000000000000000000000000000000;;		var isTerminal bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if file, ok := in.(*os.File); ok {
0000000000000000000000000000000000000000;;			inFd = file.Fd()
0000000000000000000000000000000000000000;;			isTerminal = IsConsole(inFd)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return inFd, isTerminal
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsConsole returns true if the given file descriptor is a Windows Console.
0000000000000000000000000000000000000000;;	// The code assumes that GetConsoleMode will return an error for file descriptors that are not a console.
0000000000000000000000000000000000000000;;	func IsConsole(fd uintptr) bool {
0000000000000000000000000000000000000000;;		_, e := winterm.GetConsoleMode(fd)
0000000000000000000000000000000000000000;;		return e == nil
0000000000000000000000000000000000000000;;	}
