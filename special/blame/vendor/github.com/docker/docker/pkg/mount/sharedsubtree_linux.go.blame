0000000000000000000000000000000000000000;;	// +build linux
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/docker/pkg/mount/sharedsubtree_linux.go[Godeps/_workspace/src/github.com/docker/docker/pkg/mount/sharedsubtree_linux.go][vendor/github.com/docker/docker/pkg/mount/sharedsubtree_linux.go];	
0000000000000000000000000000000000000000;;	package mount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeShared ensures a mounted filesystem has the SHARED mount option enabled.
0000000000000000000000000000000000000000;;	// See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeShared(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "shared")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRShared ensures a mounted filesystem has the RSHARED mount option enabled.
0000000000000000000000000000000000000000;;	// See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeRShared(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "rshared")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakePrivate ensures a mounted filesystem has the PRIVATE mount option enabled.
0000000000000000000000000000000000000000;;	// See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakePrivate(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "private")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRPrivate ensures a mounted filesystem has the RPRIVATE mount option
0000000000000000000000000000000000000000;;	// enabled. See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeRPrivate(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "rprivate")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeSlave ensures a mounted filesystem has the SLAVE mount option enabled.
0000000000000000000000000000000000000000;;	// See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeSlave(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "slave")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRSlave ensures a mounted filesystem has the RSLAVE mount option enabled.
0000000000000000000000000000000000000000;;	// See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeRSlave(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "rslave")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeUnbindable ensures a mounted filesystem has the UNBINDABLE mount option
0000000000000000000000000000000000000000;;	// enabled. See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeUnbindable(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "unbindable")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRUnbindable ensures a mounted filesystem has the RUNBINDABLE mount
0000000000000000000000000000000000000000;;	// option enabled. See the supported options in flags.go for further reference.
0000000000000000000000000000000000000000;;	func MakeRUnbindable(mountPoint string) error {
0000000000000000000000000000000000000000;;		return ensureMountedAs(mountPoint, "runbindable")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ensureMountedAs(mountPoint, options string) error {
0000000000000000000000000000000000000000;;		mounted, err := Mounted(mountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !mounted {
0000000000000000000000000000000000000000;;			if err := Mount(mountPoint, mountPoint, "none", "bind,rw"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = Mounted(mountPoint); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ForceMount("", mountPoint, "none", options)
0000000000000000000000000000000000000000;;	}
