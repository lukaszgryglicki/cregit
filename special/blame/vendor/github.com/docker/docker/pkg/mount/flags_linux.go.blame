0000000000000000000000000000000000000000;;	package mount
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/docker/pkg/mount/flags_linux.go[Godeps/_workspace/src/github.com/docker/docker/pkg/mount/flags_linux.go][vendor/github.com/docker/docker/pkg/mount/flags_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RDONLY will mount the file system read-only.
0000000000000000000000000000000000000000;;		RDONLY = syscall.MS_RDONLY
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOSUID will not allow set-user-identifier or set-group-identifier bits to
0000000000000000000000000000000000000000;;		// take effect.
0000000000000000000000000000000000000000;;		NOSUID = syscall.MS_NOSUID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NODEV will not interpret character or block special devices on the file
0000000000000000000000000000000000000000;;		// system.
0000000000000000000000000000000000000000;;		NODEV = syscall.MS_NODEV
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOEXEC will not allow execution of any binaries on the mounted file system.
0000000000000000000000000000000000000000;;		NOEXEC = syscall.MS_NOEXEC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SYNCHRONOUS will allow I/O to the file system to be done synchronously.
0000000000000000000000000000000000000000;;		SYNCHRONOUS = syscall.MS_SYNCHRONOUS
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DIRSYNC will force all directory updates within the file system to be done
0000000000000000000000000000000000000000;;		// synchronously. This affects the following system calls: create, link,
0000000000000000000000000000000000000000;;		// unlink, symlink, mkdir, rmdir, mknod and rename.
0000000000000000000000000000000000000000;;		DIRSYNC = syscall.MS_DIRSYNC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// REMOUNT will attempt to remount an already-mounted file system. This is
0000000000000000000000000000000000000000;;		// commonly used to change the mount flags for a file system, especially to
0000000000000000000000000000000000000000;;		// make a readonly file system writeable. It does not change device or mount
0000000000000000000000000000000000000000;;		// point.
0000000000000000000000000000000000000000;;		REMOUNT = syscall.MS_REMOUNT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MANDLOCK will force mandatory locks on a filesystem.
0000000000000000000000000000000000000000;;		MANDLOCK = syscall.MS_MANDLOCK
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOATIME will not update the file access time when reading from a file.
0000000000000000000000000000000000000000;;		NOATIME = syscall.MS_NOATIME
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NODIRATIME will not update the directory access time.
0000000000000000000000000000000000000000;;		NODIRATIME = syscall.MS_NODIRATIME
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BIND remounts a subtree somewhere else.
0000000000000000000000000000000000000000;;		BIND = syscall.MS_BIND
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RBIND remounts a subtree and all possible submounts somewhere else.
0000000000000000000000000000000000000000;;		RBIND = syscall.MS_BIND | syscall.MS_REC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UNBINDABLE creates a mount which cannot be cloned through a bind operation.
0000000000000000000000000000000000000000;;		UNBINDABLE = syscall.MS_UNBINDABLE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RUNBINDABLE marks the entire mount tree as UNBINDABLE.
0000000000000000000000000000000000000000;;		RUNBINDABLE = syscall.MS_UNBINDABLE | syscall.MS_REC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PRIVATE creates a mount which carries no propagation abilities.
0000000000000000000000000000000000000000;;		PRIVATE = syscall.MS_PRIVATE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RPRIVATE marks the entire mount tree as PRIVATE.
0000000000000000000000000000000000000000;;		RPRIVATE = syscall.MS_PRIVATE | syscall.MS_REC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SLAVE creates a mount which receives propagation from its master, but not
0000000000000000000000000000000000000000;;		// vice versa.
0000000000000000000000000000000000000000;;		SLAVE = syscall.MS_SLAVE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RSLAVE marks the entire mount tree as SLAVE.
0000000000000000000000000000000000000000;;		RSLAVE = syscall.MS_SLAVE | syscall.MS_REC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SHARED creates a mount which provides the ability to create mirrors of
0000000000000000000000000000000000000000;;		// that mount such that mounts and unmounts within any of the mirrors
0000000000000000000000000000000000000000;;		// propagate to the other mirrors.
0000000000000000000000000000000000000000;;		SHARED = syscall.MS_SHARED
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RSHARED marks the entire mount tree as SHARED.
0000000000000000000000000000000000000000;;		RSHARED = syscall.MS_SHARED | syscall.MS_REC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RELATIME updates inode access times relative to modify or change time.
0000000000000000000000000000000000000000;;		RELATIME = syscall.MS_RELATIME
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// STRICTATIME allows to explicitly request full atime updates.  This makes
0000000000000000000000000000000000000000;;		// it possible for the kernel to default to relatime or noatime but still
0000000000000000000000000000000000000000;;		// allow userspace to override it.
0000000000000000000000000000000000000000;;		STRICTATIME = syscall.MS_STRICTATIME
0000000000000000000000000000000000000000;;	)
