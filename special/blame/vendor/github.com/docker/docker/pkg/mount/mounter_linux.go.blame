0000000000000000000000000000000000000000;;	package mount
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/docker/pkg/mount/mounter_linux.go[Godeps/_workspace/src/github.com/docker/docker/pkg/mount/mounter_linux.go][vendor/github.com/docker/docker/pkg/mount/mounter_linux.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mount(device, target, mType string, flag uintptr, data string) error {
0000000000000000000000000000000000000000;;		if err := syscall.Mount(device, target, mType, flag, data); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a bind mount or remount, remount...
0000000000000000000000000000000000000000;;		if flag&syscall.MS_BIND == syscall.MS_BIND && flag&syscall.MS_RDONLY == syscall.MS_RDONLY {
0000000000000000000000000000000000000000;;			return syscall.Mount(device, target, mType, flag|syscall.MS_REMOUNT, data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmount(target string, flag int) error {
0000000000000000000000000000000000000000;;		return syscall.Unmount(target, flag)
0000000000000000000000000000000000000000;;	}
