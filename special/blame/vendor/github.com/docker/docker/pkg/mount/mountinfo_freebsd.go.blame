0000000000000000000000000000000000000000;;	package mount
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/docker/docker/pkg/mount/mountinfo_freebsd.go[Godeps/_workspace/src/github.com/docker/docker/pkg/mount/mountinfo_freebsd.go][vendor/github.com/docker/docker/pkg/mount/mountinfo_freebsd.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/ucred.h>
0000000000000000000000000000000000000000;;	#include <sys/mount.h>
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse /proc/self/mountinfo because comparing Dev and ino does not work from
0000000000000000000000000000000000000000;;	// bind mounts.
0000000000000000000000000000000000000000;;	func parseMountTable() ([]*Info, error) {
0000000000000000000000000000000000000000;;		var rawEntries *C.struct_statfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count := int(C.getmntinfo(&rawEntries, C.MNT_WAIT))
0000000000000000000000000000000000000000;;		if count == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Failed to call getmntinfo")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var entries []C.struct_statfs
0000000000000000000000000000000000000000;;		header := (*reflect.SliceHeader)(unsafe.Pointer(&entries))
0000000000000000000000000000000000000000;;		header.Cap = count
0000000000000000000000000000000000000000;;		header.Len = count
0000000000000000000000000000000000000000;;		header.Data = uintptr(unsafe.Pointer(rawEntries))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var out []*Info
0000000000000000000000000000000000000000;;		for _, entry := range entries {
0000000000000000000000000000000000000000;;			var mountinfo Info
0000000000000000000000000000000000000000;;			mountinfo.Mountpoint = C.GoString(&entry.f_mntonname[0])
0000000000000000000000000000000000000000;;			mountinfo.Source = C.GoString(&entry.f_mntfromname[0])
0000000000000000000000000000000000000000;;			mountinfo.Fstype = C.GoString(&entry.f_fstypename[0])
0000000000000000000000000000000000000000;;			out = append(out, &mountinfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out, nil
0000000000000000000000000000000000000000;;	}
