0000000000000000000000000000000000000000;;	package digest
549dca0b4c1af0f858d69469b1e5d8de0e70e1c0;Godeps/_workspace/src/github.com/docker/distribution/digest/verifiers.go[Godeps/_workspace/src/github.com/docker/distribution/digest/verifiers.go][vendor/github.com/docker/distribution/digest/verifiers.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"hash"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifier presents a general verification interface to be used with message
0000000000000000000000000000000000000000;;	// digests and other byte stream verifications. Users instantiate a Verifier
0000000000000000000000000000000000000000;;	// from one of the various methods, write the data under test to it then check
0000000000000000000000000000000000000000;;	// the result with the Verified method.
0000000000000000000000000000000000000000;;	type Verifier interface {
0000000000000000000000000000000000000000;;		io.Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verified will return true if the content written to Verifier matches
0000000000000000000000000000000000000000;;		// the digest.
0000000000000000000000000000000000000000;;		Verified() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDigestVerifier returns a verifier that compares the written bytes
0000000000000000000000000000000000000000;;	// against a passed in digest.
0000000000000000000000000000000000000000;;	func NewDigestVerifier(d Digest) (Verifier, error) {
0000000000000000000000000000000000000000;;		if err := d.Validate(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return hashVerifier{
0000000000000000000000000000000000000000;;			hash:   d.Algorithm().Hash(),
0000000000000000000000000000000000000000;;			digest: d,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type hashVerifier struct {
0000000000000000000000000000000000000000;;		digest Digest
0000000000000000000000000000000000000000;;		hash   hash.Hash
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (hv hashVerifier) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		return hv.hash.Write(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (hv hashVerifier) Verified() bool {
0000000000000000000000000000000000000000;;		return hv.digest == NewDigest(hv.digest.Algorithm(), hv.hash)
0000000000000000000000000000000000000000;;	}
