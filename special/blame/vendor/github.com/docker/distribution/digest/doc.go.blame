0000000000000000000000000000000000000000;;	// Package digest provides a generalized type to opaquely represent message
0000000000000000000000000000000000000000;;	// digests and their operations within the registry. The Digest type is
0000000000000000000000000000000000000000;;	// designed to serve as a flexible identifier in a content-addressable system.
0000000000000000000000000000000000000000;;	// More importantly, it provides tools and wrappers to work with
0000000000000000000000000000000000000000;;	// hash.Hash-based digests with little effort.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Basics
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The format of a digest is simply a string with two parts, dubbed the
0000000000000000000000000000000000000000;;	// "algorithm" and the "digest", separated by a colon:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	<algorithm>:<digest>
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An example of a sha256 digest representation follows:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	sha256:7173b809ca12ec5dee4506cd86be934c4596dd234ee82c0662eac04a8c2c71dc
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In this case, the string "sha256" is the algorithm and the hex bytes are
0000000000000000000000000000000000000000;;	// the "digest".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Because the Digest type is simply a string, once a valid Digest is
0000000000000000000000000000000000000000;;	// obtained, comparisons are cheap, quick and simple to express with the
0000000000000000000000000000000000000000;;	// standard equality operator.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Verification
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The main benefit of using the Digest type is simple verification against a
0000000000000000000000000000000000000000;;	// given digest. The Verifier interface, modeled after the stdlib hash.Hash
0000000000000000000000000000000000000000;;	// interface, provides a common write sink for digest verification. After
0000000000000000000000000000000000000000;;	// writing is complete, calling the Verifier.Verified method will indicate
0000000000000000000000000000000000000000;;	// whether or not the stream of bytes matches the target digest.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Missing Features
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In addition to the above, we intend to add the following features to this
0000000000000000000000000000000000000000;;	// package:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 1. A Digester type that supports write sink digest calculation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 2. Suspend and resume of ongoing digest calculations to support efficient digest verification in the registry.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package digest
