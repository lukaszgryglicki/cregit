0000000000000000000000000000000000000000;;	// Package sockets provides helper functions to create and configure Unix or TCP sockets.
0000000000000000000000000000000000000000;;	package sockets
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/go-connections/sockets/sockets.go[Godeps/_workspace/src/github.com/docker/go-connections/sockets/sockets.go][vendor/github.com/docker/go-connections/sockets/sockets.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Why 32? See https://github.com/docker/docker/pull/8035.
0000000000000000000000000000000000000000;;	const defaultTimeout = 32 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfigureTransport configures the specified Transport according to the
0000000000000000000000000000000000000000;;	// specified proto and addr.
0000000000000000000000000000000000000000;;	// If the proto is unix (using a unix socket to communicate) or npipe the
0000000000000000000000000000000000000000;;	// compression is disabled.
0000000000000000000000000000000000000000;;	func ConfigureTransport(tr *http.Transport, proto, addr string) error {
0000000000000000000000000000000000000000;;		switch proto {
0000000000000000000000000000000000000000;;		case "unix":
0000000000000000000000000000000000000000;;			// No need for compression in local communications.
0000000000000000000000000000000000000000;;			tr.DisableCompression = true
0000000000000000000000000000000000000000;;			tr.Dial = func(_, _ string) (net.Conn, error) {
0000000000000000000000000000000000000000;;				return net.DialTimeout(proto, addr, defaultTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case "npipe":
0000000000000000000000000000000000000000;;			// No need for compression in local communications.
0000000000000000000000000000000000000000;;			tr.DisableCompression = true
0000000000000000000000000000000000000000;;			tr.Dial = func(_, _ string) (net.Conn, error) {
0000000000000000000000000000000000000000;;				return DialPipe(addr, defaultTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			tr.Proxy = http.ProxyFromEnvironment
0000000000000000000000000000000000000000;;			dialer, err := DialerFromEnvironment(&net.Dialer{
0000000000000000000000000000000000000000;;				Timeout: defaultTimeout,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tr.Dial = dialer.Dial
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
