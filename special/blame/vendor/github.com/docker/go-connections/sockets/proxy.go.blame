0000000000000000000000000000000000000000;;	package sockets
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/go-connections/sockets/proxy.go[Godeps/_workspace/src/github.com/docker/go-connections/sockets/proxy.go][vendor/github.com/docker/go-connections/sockets/proxy.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/proxy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetProxyEnv allows access to the uppercase and the lowercase forms of
0000000000000000000000000000000000000000;;	// proxy-related variables.  See the Go specification for details on these
0000000000000000000000000000000000000000;;	// variables. https://golang.org/pkg/net/http/
0000000000000000000000000000000000000000;;	func GetProxyEnv(key string) string {
0000000000000000000000000000000000000000;;		proxyValue := os.Getenv(strings.ToUpper(key))
0000000000000000000000000000000000000000;;		if proxyValue == "" {
0000000000000000000000000000000000000000;;			return os.Getenv(strings.ToLower(key))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return proxyValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DialerFromEnvironment takes in a "direct" *net.Dialer and returns a
0000000000000000000000000000000000000000;;	// proxy.Dialer which will route the connections through the proxy using the
0000000000000000000000000000000000000000;;	// given dialer.
0000000000000000000000000000000000000000;;	func DialerFromEnvironment(direct *net.Dialer) (proxy.Dialer, error) {
0000000000000000000000000000000000000000;;		allProxy := GetProxyEnv("all_proxy")
0000000000000000000000000000000000000000;;		if len(allProxy) == 0 {
0000000000000000000000000000000000000000;;			return direct, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		proxyURL, err := url.Parse(allProxy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return direct, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		proxyFromURL, err := proxy.FromURL(proxyURL, direct)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return direct, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noProxy := GetProxyEnv("no_proxy")
0000000000000000000000000000000000000000;;		if len(noProxy) == 0 {
0000000000000000000000000000000000000000;;			return proxyFromURL, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		perHost := proxy.NewPerHost(proxyFromURL, direct)
0000000000000000000000000000000000000000;;		perHost.AddFromString(noProxy)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return perHost, nil
0000000000000000000000000000000000000000;;	}
