0000000000000000000000000000000000000000;;	// Package sockets provides helper functions to create and configure Unix or TCP sockets.
0000000000000000000000000000000000000000;;	package sockets
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/go-connections/sockets/tcp_socket.go[Godeps/_workspace/src/github.com/docker/go-connections/sockets/tcp_socket.go][vendor/github.com/docker/go-connections/sockets/tcp_socket.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTCPSocket creates a TCP socket listener with the specified address and
0000000000000000000000000000000000000000;;	// and the specified tls configuration. If TLSConfig is set, will encapsulate the
0000000000000000000000000000000000000000;;	// TCP listener inside a TLS one.
0000000000000000000000000000000000000000;;	func NewTCPSocket(addr string, tlsConfig *tls.Config) (net.Listener, error) {
0000000000000000000000000000000000000000;;		l, err := net.Listen("tcp", addr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tlsConfig != nil {
0000000000000000000000000000000000000000;;			tlsConfig.NextProtos = []string{"http/1.1"}
0000000000000000000000000000000000000000;;			l = tls.NewListener(l, tlsConfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l, nil
0000000000000000000000000000000000000000;;	}
