0000000000000000000000000000000000000000;;	// +build linux freebsd solaris
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/docker/go-connections/sockets/unix_socket.go[Godeps/_workspace/src/github.com/docker/go-connections/sockets/unix_socket.go][vendor/github.com/docker/go-connections/sockets/unix_socket.go];	
0000000000000000000000000000000000000000;;	package sockets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Sirupsen/logrus"
0000000000000000000000000000000000000000;;		"github.com/opencontainers/runc/libcontainer/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUnixSocket creates a unix socket with the specified path and group.
0000000000000000000000000000000000000000;;	func NewUnixSocket(path, group string) (net.Listener, error) {
0000000000000000000000000000000000000000;;		if err := syscall.Unlink(path); err != nil && !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mask := syscall.Umask(0777)
0000000000000000000000000000000000000000;;		defer syscall.Umask(mask)
0000000000000000000000000000000000000000;;		l, err := net.Listen("unix", path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := setSocketGroup(path, group); err != nil {
0000000000000000000000000000000000000000;;			l.Close()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := os.Chmod(path, 0660); err != nil {
0000000000000000000000000000000000000000;;			l.Close()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setSocketGroup(path, group string) error {
0000000000000000000000000000000000000000;;		if group == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := changeGroup(path, group); err != nil {
0000000000000000000000000000000000000000;;			if group != "docker" {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			logrus.Debugf("Warning: could not change group %s to docker: %v", path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func changeGroup(path string, nameOrGid string) error {
0000000000000000000000000000000000000000;;		gid, err := lookupGidByName(nameOrGid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		logrus.Debugf("%s group found. gid: %d", nameOrGid, gid)
0000000000000000000000000000000000000000;;		return os.Chown(path, 0, gid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lookupGidByName(nameOrGid string) (int, error) {
0000000000000000000000000000000000000000;;		groupFile, err := user.GetGroupPath()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		groups, err := user.ParseGroupFileFilter(groupFile, func(g user.Group) bool {
0000000000000000000000000000000000000000;;			return g.Name == nameOrGid || strconv.Itoa(g.Gid) == nameOrGid
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if groups != nil && len(groups) > 0 {
0000000000000000000000000000000000000000;;			return groups[0].Gid, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gid, err := strconv.Atoi(nameOrGid)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			logrus.Warnf("Could not find GID %d", gid)
0000000000000000000000000000000000000000;;			return gid, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return -1, fmt.Errorf("Group %s not found", nameOrGid)
0000000000000000000000000000000000000000;;	}
