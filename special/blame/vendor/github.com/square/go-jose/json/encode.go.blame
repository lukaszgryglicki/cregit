0000000000000000000000000000000000000000;;	// Copyright 2010 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
0ba55c488eaa2bd59fa46ecc0263ca44109d2949;;	
0000000000000000000000000000000000000000;;	// Package json implements encoding and decoding of JSON objects as defined in
0000000000000000000000000000000000000000;;	// RFC 4627. The mapping between JSON objects and Go values is described
0000000000000000000000000000000000000000;;	// in the documentation for the Marshal and Unmarshal functions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See "JSON and Go" for an introduction to this package:
0000000000000000000000000000000000000000;;	// https://golang.org/doc/articles/json_and_go.html
0000000000000000000000000000000000000000;;	package json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal returns the JSON encoding of v.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Marshal traverses the value v recursively.
0000000000000000000000000000000000000000;;	// If an encountered value implements the Marshaler interface
0000000000000000000000000000000000000000;;	// and is not a nil pointer, Marshal calls its MarshalJSON method
0000000000000000000000000000000000000000;;	// to produce JSON. If no MarshalJSON method is present but the
0000000000000000000000000000000000000000;;	// value implements encoding.TextMarshaler instead, Marshal calls
0000000000000000000000000000000000000000;;	// its MarshalText method.
0000000000000000000000000000000000000000;;	// The nil pointer exception is not strictly necessary
0000000000000000000000000000000000000000;;	// but mimics a similar, necessary exception in the behavior of
0000000000000000000000000000000000000000;;	// UnmarshalJSON.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Otherwise, Marshal uses the following type-dependent default encodings:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Boolean values encode as JSON booleans.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Floating point, integer, and Number values encode as JSON numbers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// String values encode as JSON strings coerced to valid UTF-8,
0000000000000000000000000000000000000000;;	// replacing invalid bytes with the Unicode replacement rune.
0000000000000000000000000000000000000000;;	// The angle brackets "<" and ">" are escaped to "\u003c" and "\u003e"
0000000000000000000000000000000000000000;;	// to keep some browsers from misinterpreting JSON output as HTML.
0000000000000000000000000000000000000000;;	// Ampersand "&" is also escaped to "\u0026" for the same reason.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Array and slice values encode as JSON arrays, except that
0000000000000000000000000000000000000000;;	// []byte encodes as a base64-encoded string, and a nil slice
0000000000000000000000000000000000000000;;	// encodes as the null JSON object.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Struct values encode as JSON objects. Each exported struct field
0000000000000000000000000000000000000000;;	// becomes a member of the object unless
0000000000000000000000000000000000000000;;	//   - the field's tag is "-", or
0000000000000000000000000000000000000000;;	//   - the field is empty and its tag specifies the "omitempty" option.
0000000000000000000000000000000000000000;;	// The empty values are false, 0, any
0000000000000000000000000000000000000000;;	// nil pointer or interface value, and any array, slice, map, or string of
0000000000000000000000000000000000000000;;	// length zero. The object's default key string is the struct field name
0000000000000000000000000000000000000000;;	// but can be specified in the struct field's tag value. The "json" key in
0000000000000000000000000000000000000000;;	// the struct field's tag value is the key name, followed by an optional comma
0000000000000000000000000000000000000000;;	// and options. Examples:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // Field is ignored by this package.
0000000000000000000000000000000000000000;;	//   Field int `json:"-"`
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // Field appears in JSON as key "myName".
0000000000000000000000000000000000000000;;	//   Field int `json:"myName"`
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // Field appears in JSON as key "myName" and
0000000000000000000000000000000000000000;;	//   // the field is omitted from the object if its value is empty,
0000000000000000000000000000000000000000;;	//   // as defined above.
0000000000000000000000000000000000000000;;	//   Field int `json:"myName,omitempty"`
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // Field appears in JSON as key "Field" (the default), but
0000000000000000000000000000000000000000;;	//   // the field is skipped if empty.
0000000000000000000000000000000000000000;;	//   // Note the leading comma.
0000000000000000000000000000000000000000;;	//   Field int `json:",omitempty"`
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The "string" option signals that a field is stored as JSON inside a
0000000000000000000000000000000000000000;;	// JSON-encoded string. It applies only to fields of string, floating point,
0000000000000000000000000000000000000000;;	// integer, or boolean types. This extra level of encoding is sometimes used
0000000000000000000000000000000000000000;;	// when communicating with JavaScript programs:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    Int64String int64 `json:",string"`
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The key name will be used if it's a non-empty string consisting of
0000000000000000000000000000000000000000;;	// only Unicode letters, digits, dollar signs, percent signs, hyphens,
0000000000000000000000000000000000000000;;	// underscores and slashes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Anonymous struct fields are usually marshaled as if their inner exported fields
0000000000000000000000000000000000000000;;	// were fields in the outer struct, subject to the usual Go visibility rules amended
0000000000000000000000000000000000000000;;	// as described in the next paragraph.
0000000000000000000000000000000000000000;;	// An anonymous struct field with a name given in its JSON tag is treated as
0000000000000000000000000000000000000000;;	// having that name, rather than being anonymous.
0000000000000000000000000000000000000000;;	// An anonymous struct field of interface type is treated the same as having
0000000000000000000000000000000000000000;;	// that type as its name, rather than being anonymous.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Go visibility rules for struct fields are amended for JSON when
0000000000000000000000000000000000000000;;	// deciding which field to marshal or unmarshal. If there are
0000000000000000000000000000000000000000;;	// multiple fields at the same level, and that level is the least
0000000000000000000000000000000000000000;;	// nested (and would therefore be the nesting level selected by the
0000000000000000000000000000000000000000;;	// usual Go rules), the following extra rules apply:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 1) Of those fields, if any are JSON-tagged, only tagged fields are considered,
0000000000000000000000000000000000000000;;	// even if there are multiple untagged fields that would otherwise conflict.
0000000000000000000000000000000000000000;;	// 2) If there is exactly one field (tagged or not according to the first rule), that is selected.
0000000000000000000000000000000000000000;;	// 3) Otherwise there are multiple fields, and all are ignored; no error occurs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Handling of anonymous struct fields is new in Go 1.1.
0000000000000000000000000000000000000000;;	// Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of
0000000000000000000000000000000000000000;;	// an anonymous struct field in both current and earlier versions, give the field
0000000000000000000000000000000000000000;;	// a JSON tag of "-".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Map values encode as JSON objects.
0000000000000000000000000000000000000000;;	// The map's key type must be string; the map keys are used as JSON object
0000000000000000000000000000000000000000;;	// keys, subject to the UTF-8 coercion described for string values above.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Pointer values encode as the value pointed to.
0000000000000000000000000000000000000000;;	// A nil pointer encodes as the null JSON object.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Interface values encode as the value contained in the interface.
0000000000000000000000000000000000000000;;	// A nil interface value encodes as the null JSON object.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Channel, complex, and function values cannot be encoded in JSON.
0000000000000000000000000000000000000000;;	// Attempting to encode such a value causes Marshal to return
0000000000000000000000000000000000000000;;	// an UnsupportedTypeError.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// JSON cannot represent cyclic data structures and Marshal does not
0000000000000000000000000000000000000000;;	// handle them.  Passing cyclic structures to Marshal will result in
0000000000000000000000000000000000000000;;	// an infinite recursion.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func Marshal(v interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		e := &encodeState{}
0000000000000000000000000000000000000000;;		err := e.marshal(v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalIndent is like Marshal but applies Indent to format the output.
0000000000000000000000000000000000000000;;	func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {
0000000000000000000000000000000000000000;;		b, err := Marshal(v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		err = Indent(&buf, b, prefix, indent)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTMLEscape appends to dst the JSON-encoded src with <, >, &, U+2028 and U+2029
0000000000000000000000000000000000000000;;	// characters inside string literals changed to \u003c, \u003e, \u0026, \u2028, \u2029
0000000000000000000000000000000000000000;;	// so that the JSON will be safe to embed inside HTML <script> tags.
0000000000000000000000000000000000000000;;	// For historical reasons, web browsers don't honor standard HTML
0000000000000000000000000000000000000000;;	// escaping within <script> tags, so an alternative JSON encoding must
0000000000000000000000000000000000000000;;	// be used.
0000000000000000000000000000000000000000;;	func HTMLEscape(dst *bytes.Buffer, src []byte) {
0000000000000000000000000000000000000000;;		// The characters can only appear in string literals,
0000000000000000000000000000000000000000;;		// so just scan the string one byte at a time.
0000000000000000000000000000000000000000;;		start := 0
0000000000000000000000000000000000000000;;		for i, c := range src {
0000000000000000000000000000000000000000;;			if c == '<' || c == '>' || c == '&' {
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					dst.Write(src[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				dst.WriteString(`\u00`)
0000000000000000000000000000000000000000;;				dst.WriteByte(hex[c>>4])
0000000000000000000000000000000000000000;;				dst.WriteByte(hex[c&0xF])
0000000000000000000000000000000000000000;;				start = i + 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Convert U+2028 and U+2029 (E2 80 A8 and E2 80 A9).
0000000000000000000000000000000000000000;;			if c == 0xE2 && i+2 < len(src) && src[i+1] == 0x80 && src[i+2]&^1 == 0xA8 {
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					dst.Write(src[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				dst.WriteString(`\u202`)
0000000000000000000000000000000000000000;;				dst.WriteByte(hex[src[i+2]&0xF])
0000000000000000000000000000000000000000;;				start = i + 3
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if start < len(src) {
0000000000000000000000000000000000000000;;			dst.Write(src[start:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshaler is the interface implemented by objects that
0000000000000000000000000000000000000000;;	// can marshal themselves into valid JSON.
0000000000000000000000000000000000000000;;	type Marshaler interface {
0000000000000000000000000000000000000000;;		MarshalJSON() ([]byte, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An UnsupportedTypeError is returned by Marshal when attempting
0000000000000000000000000000000000000000;;	// to encode an unsupported value type.
0000000000000000000000000000000000000000;;	type UnsupportedTypeError struct {
0000000000000000000000000000000000000000;;		Type reflect.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *UnsupportedTypeError) Error() string {
0000000000000000000000000000000000000000;;		return "json: unsupported type: " + e.Type.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnsupportedValueError struct {
0000000000000000000000000000000000000000;;		Value reflect.Value
0000000000000000000000000000000000000000;;		Str   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *UnsupportedValueError) Error() string {
0000000000000000000000000000000000000000;;		return "json: unsupported value: " + e.Str
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Before Go 1.2, an InvalidUTF8Error was returned by Marshal when
0000000000000000000000000000000000000000;;	// attempting to encode a string value with invalid UTF-8 sequences.
0000000000000000000000000000000000000000;;	// As of Go 1.2, Marshal instead coerces the string to valid UTF-8 by
0000000000000000000000000000000000000000;;	// replacing invalid bytes with the Unicode replacement rune U+FFFD.
0000000000000000000000000000000000000000;;	// This error is no longer generated but is kept for backwards compatibility
0000000000000000000000000000000000000000;;	// with programs that might mention it.
0000000000000000000000000000000000000000;;	type InvalidUTF8Error struct {
0000000000000000000000000000000000000000;;		S string // the whole string value that caused the error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *InvalidUTF8Error) Error() string {
0000000000000000000000000000000000000000;;		return "json: invalid UTF-8 in string: " + strconv.Quote(e.S)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarshalerError struct {
0000000000000000000000000000000000000000;;		Type reflect.Type
0000000000000000000000000000000000000000;;		Err  error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *MarshalerError) Error() string {
0000000000000000000000000000000000000000;;		return "json: error calling MarshalJSON for type " + e.Type.String() + ": " + e.Err.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var hex = "0123456789abcdef"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An encodeState encodes JSON into a bytes.Buffer.
0000000000000000000000000000000000000000;;	type encodeState struct {
0000000000000000000000000000000000000000;;		bytes.Buffer // accumulated output
0000000000000000000000000000000000000000;;		scratch      [64]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var encodeStatePool sync.Pool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newEncodeState() *encodeState {
0000000000000000000000000000000000000000;;		if v := encodeStatePool.Get(); v != nil {
0000000000000000000000000000000000000000;;			e := v.(*encodeState)
0000000000000000000000000000000000000000;;			e.Reset()
0000000000000000000000000000000000000000;;			return e
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return new(encodeState)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *encodeState) marshal(v interface{}) (err error) {
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if r := recover(); r != nil {
0000000000000000000000000000000000000000;;				if _, ok := r.(runtime.Error); ok {
0000000000000000000000000000000000000000;;					panic(r)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if s, ok := r.(string); ok {
0000000000000000000000000000000000000000;;					panic(s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				err = r.(error)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		e.reflectValue(reflect.ValueOf(v))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *encodeState) error(err error) {
0000000000000000000000000000000000000000;;		panic(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isEmptyValue(v reflect.Value) bool {
0000000000000000000000000000000000000000;;		switch v.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array, reflect.Map, reflect.Slice, reflect.String:
0000000000000000000000000000000000000000;;			return v.Len() == 0
0000000000000000000000000000000000000000;;		case reflect.Bool:
0000000000000000000000000000000000000000;;			return !v.Bool()
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return v.Int() == 0
0000000000000000000000000000000000000000;;		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
0000000000000000000000000000000000000000;;			return v.Uint() == 0
0000000000000000000000000000000000000000;;		case reflect.Float32, reflect.Float64:
0000000000000000000000000000000000000000;;			return v.Float() == 0
0000000000000000000000000000000000000000;;		case reflect.Interface, reflect.Ptr:
0000000000000000000000000000000000000000;;			return v.IsNil()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *encodeState) reflectValue(v reflect.Value) {
0000000000000000000000000000000000000000;;		valueEncoder(v)(e, v, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type encoderFunc func(e *encodeState, v reflect.Value, quoted bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var encoderCache struct {
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		m map[reflect.Type]encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func valueEncoder(v reflect.Value) encoderFunc {
0000000000000000000000000000000000000000;;		if !v.IsValid() {
0000000000000000000000000000000000000000;;			return invalidValueEncoder
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return typeEncoder(v.Type())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func typeEncoder(t reflect.Type) encoderFunc {
0000000000000000000000000000000000000000;;		encoderCache.RLock()
0000000000000000000000000000000000000000;;		f := encoderCache.m[t]
0000000000000000000000000000000000000000;;		encoderCache.RUnlock()
0000000000000000000000000000000000000000;;		if f != nil {
0000000000000000000000000000000000000000;;			return f
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// To deal with recursive types, populate the map with an
0000000000000000000000000000000000000000;;		// indirect func before we build it. This type waits on the
0000000000000000000000000000000000000000;;		// real func (f) to be ready and then calls it.  This indirect
0000000000000000000000000000000000000000;;		// func is only used for recursive types.
0000000000000000000000000000000000000000;;		encoderCache.Lock()
0000000000000000000000000000000000000000;;		if encoderCache.m == nil {
0000000000000000000000000000000000000000;;			encoderCache.m = make(map[reflect.Type]encoderFunc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var wg sync.WaitGroup
0000000000000000000000000000000000000000;;		wg.Add(1)
0000000000000000000000000000000000000000;;		encoderCache.m[t] = func(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;			wg.Wait()
0000000000000000000000000000000000000000;;			f(e, v, quoted)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		encoderCache.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Compute fields without lock.
0000000000000000000000000000000000000000;;		// Might duplicate effort but won't hold other computations back.
0000000000000000000000000000000000000000;;		f = newTypeEncoder(t, true)
0000000000000000000000000000000000000000;;		wg.Done()
0000000000000000000000000000000000000000;;		encoderCache.Lock()
0000000000000000000000000000000000000000;;		encoderCache.m[t] = f
0000000000000000000000000000000000000000;;		encoderCache.Unlock()
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		marshalerType     = reflect.TypeOf(new(Marshaler)).Elem()
0000000000000000000000000000000000000000;;		textMarshalerType = reflect.TypeOf(new(encoding.TextMarshaler)).Elem()
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newTypeEncoder constructs an encoderFunc for a type.
0000000000000000000000000000000000000000;;	// The returned encoder only checks CanAddr when allowAddr is true.
0000000000000000000000000000000000000000;;	func newTypeEncoder(t reflect.Type, allowAddr bool) encoderFunc {
0000000000000000000000000000000000000000;;		if t.Implements(marshalerType) {
0000000000000000000000000000000000000000;;			return marshalerEncoder
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.Kind() != reflect.Ptr && allowAddr {
0000000000000000000000000000000000000000;;			if reflect.PtrTo(t).Implements(marshalerType) {
0000000000000000000000000000000000000000;;				return newCondAddrEncoder(addrMarshalerEncoder, newTypeEncoder(t, false))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if t.Implements(textMarshalerType) {
0000000000000000000000000000000000000000;;			return textMarshalerEncoder
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.Kind() != reflect.Ptr && allowAddr {
0000000000000000000000000000000000000000;;			if reflect.PtrTo(t).Implements(textMarshalerType) {
0000000000000000000000000000000000000000;;				return newCondAddrEncoder(addrTextMarshalerEncoder, newTypeEncoder(t, false))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch t.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Bool:
0000000000000000000000000000000000000000;;			return boolEncoder
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return intEncoder
0000000000000000000000000000000000000000;;		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
0000000000000000000000000000000000000000;;			return uintEncoder
0000000000000000000000000000000000000000;;		case reflect.Float32:
0000000000000000000000000000000000000000;;			return float32Encoder
0000000000000000000000000000000000000000;;		case reflect.Float64:
0000000000000000000000000000000000000000;;			return float64Encoder
0000000000000000000000000000000000000000;;		case reflect.String:
0000000000000000000000000000000000000000;;			return stringEncoder
0000000000000000000000000000000000000000;;		case reflect.Interface:
0000000000000000000000000000000000000000;;			return interfaceEncoder
0000000000000000000000000000000000000000;;		case reflect.Struct:
0000000000000000000000000000000000000000;;			return newStructEncoder(t)
0000000000000000000000000000000000000000;;		case reflect.Map:
0000000000000000000000000000000000000000;;			return newMapEncoder(t)
0000000000000000000000000000000000000000;;		case reflect.Slice:
0000000000000000000000000000000000000000;;			return newSliceEncoder(t)
0000000000000000000000000000000000000000;;		case reflect.Array:
0000000000000000000000000000000000000000;;			return newArrayEncoder(t)
0000000000000000000000000000000000000000;;		case reflect.Ptr:
0000000000000000000000000000000000000000;;			return newPtrEncoder(t)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return unsupportedTypeEncoder
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func invalidValueEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		e.WriteString("null")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalerEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if v.Kind() == reflect.Ptr && v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := v.Interface().(Marshaler)
0000000000000000000000000000000000000000;;		b, err := m.MarshalJSON()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			// copy JSON into buffer, checking validity.
0000000000000000000000000000000000000000;;			err = compact(&e.Buffer, b, true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			e.error(&MarshalerError{v.Type(), err})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addrMarshalerEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		va := v.Addr()
0000000000000000000000000000000000000000;;		if va.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := va.Interface().(Marshaler)
0000000000000000000000000000000000000000;;		b, err := m.MarshalJSON()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			// copy JSON into buffer, checking validity.
0000000000000000000000000000000000000000;;			err = compact(&e.Buffer, b, true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			e.error(&MarshalerError{v.Type(), err})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func textMarshalerEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if v.Kind() == reflect.Ptr && v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := v.Interface().(encoding.TextMarshaler)
0000000000000000000000000000000000000000;;		b, err := m.MarshalText()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			e.error(&MarshalerError{v.Type(), err})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.stringBytes(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addrTextMarshalerEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		va := v.Addr()
0000000000000000000000000000000000000000;;		if va.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := va.Interface().(encoding.TextMarshaler)
0000000000000000000000000000000000000000;;		b, err := m.MarshalText()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			e.error(&MarshalerError{v.Type(), err})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.stringBytes(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func boolEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.Bool() {
0000000000000000000000000000000000000000;;			e.WriteString("true")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			e.WriteString("false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func intEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		b := strconv.AppendInt(e.scratch[:0], v.Int(), 10)
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.Write(b)
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uintEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		b := strconv.AppendUint(e.scratch[:0], v.Uint(), 10)
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.Write(b)
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type floatEncoder int // number of bits
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (bits floatEncoder) encode(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		f := v.Float()
0000000000000000000000000000000000000000;;		if math.IsInf(f, 0) || math.IsNaN(f) {
0000000000000000000000000000000000000000;;			e.error(&UnsupportedValueError{v, strconv.FormatFloat(f, 'g', -1, int(bits))})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := strconv.AppendFloat(e.scratch[:0], f, 'g', -1, int(bits))
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.Write(b)
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			e.WriteByte('"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		float32Encoder = (floatEncoder(32)).encode
0000000000000000000000000000000000000000;;		float64Encoder = (floatEncoder(64)).encode
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if v.Type() == numberType {
0000000000000000000000000000000000000000;;			numStr := v.String()
0000000000000000000000000000000000000000;;			// In Go1.5 the empty string encodes to "0", while this is not a valid number literal
0000000000000000000000000000000000000000;;			// we keep compatibility so check validity after this.
0000000000000000000000000000000000000000;;			if numStr == "" {
0000000000000000000000000000000000000000;;				numStr = "0" // Number's zero-val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !isValidNumber(numStr) {
0000000000000000000000000000000000000000;;				e.error(fmt.Errorf("json: invalid number literal %q", numStr))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e.WriteString(numStr)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if quoted {
0000000000000000000000000000000000000000;;			sb, err := Marshal(v.String())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				e.error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e.string(string(sb))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			e.string(v.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func interfaceEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.reflectValue(v.Elem())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unsupportedTypeEncoder(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		e.error(&UnsupportedTypeError{v.Type()})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type structEncoder struct {
0000000000000000000000000000000000000000;;		fields    []field
0000000000000000000000000000000000000000;;		fieldEncs []encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (se *structEncoder) encode(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		e.WriteByte('{')
0000000000000000000000000000000000000000;;		first := true
0000000000000000000000000000000000000000;;		for i, f := range se.fields {
0000000000000000000000000000000000000000;;			fv := fieldByIndex(v, f.index)
0000000000000000000000000000000000000000;;			if !fv.IsValid() || f.omitEmpty && isEmptyValue(fv) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if first {
0000000000000000000000000000000000000000;;				first = false
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				e.WriteByte(',')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e.string(f.name)
0000000000000000000000000000000000000000;;			e.WriteByte(':')
0000000000000000000000000000000000000000;;			se.fieldEncs[i](e, fv, f.quoted)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte('}')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStructEncoder(t reflect.Type) encoderFunc {
0000000000000000000000000000000000000000;;		fields := cachedTypeFields(t)
0000000000000000000000000000000000000000;;		se := &structEncoder{
0000000000000000000000000000000000000000;;			fields:    fields,
0000000000000000000000000000000000000000;;			fieldEncs: make([]encoderFunc, len(fields)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, f := range fields {
0000000000000000000000000000000000000000;;			se.fieldEncs[i] = typeEncoder(typeByIndex(t, f.index))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return se.encode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mapEncoder struct {
0000000000000000000000000000000000000000;;		elemEnc encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (me *mapEncoder) encode(e *encodeState, v reflect.Value, _ bool) {
0000000000000000000000000000000000000000;;		if v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte('{')
0000000000000000000000000000000000000000;;		var sv stringValues = v.MapKeys()
0000000000000000000000000000000000000000;;		sort.Sort(sv)
0000000000000000000000000000000000000000;;		for i, k := range sv {
0000000000000000000000000000000000000000;;			if i > 0 {
0000000000000000000000000000000000000000;;				e.WriteByte(',')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e.string(k.String())
0000000000000000000000000000000000000000;;			e.WriteByte(':')
0000000000000000000000000000000000000000;;			me.elemEnc(e, v.MapIndex(k), false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte('}')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newMapEncoder(t reflect.Type) encoderFunc {
0000000000000000000000000000000000000000;;		if t.Key().Kind() != reflect.String {
0000000000000000000000000000000000000000;;			return unsupportedTypeEncoder
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		me := &mapEncoder{typeEncoder(t.Elem())}
0000000000000000000000000000000000000000;;		return me.encode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func encodeByteSlice(e *encodeState, v reflect.Value, _ bool) {
0000000000000000000000000000000000000000;;		if v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := v.Bytes()
0000000000000000000000000000000000000000;;		e.WriteByte('"')
0000000000000000000000000000000000000000;;		if len(s) < 1024 {
0000000000000000000000000000000000000000;;			// for small buffers, using Encode directly is much faster.
0000000000000000000000000000000000000000;;			dst := make([]byte, base64.StdEncoding.EncodedLen(len(s)))
0000000000000000000000000000000000000000;;			base64.StdEncoding.Encode(dst, s)
0000000000000000000000000000000000000000;;			e.Write(dst)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// for large buffers, avoid unnecessary extra temporary
0000000000000000000000000000000000000000;;			// buffer space.
0000000000000000000000000000000000000000;;			enc := base64.NewEncoder(base64.StdEncoding, e)
0000000000000000000000000000000000000000;;			enc.Write(s)
0000000000000000000000000000000000000000;;			enc.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte('"')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sliceEncoder just wraps an arrayEncoder, checking to make sure the value isn't nil.
0000000000000000000000000000000000000000;;	type sliceEncoder struct {
0000000000000000000000000000000000000000;;		arrayEnc encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (se *sliceEncoder) encode(e *encodeState, v reflect.Value, _ bool) {
0000000000000000000000000000000000000000;;		if v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		se.arrayEnc(e, v, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSliceEncoder(t reflect.Type) encoderFunc {
0000000000000000000000000000000000000000;;		// Byte slices get special treatment; arrays don't.
0000000000000000000000000000000000000000;;		if t.Elem().Kind() == reflect.Uint8 {
0000000000000000000000000000000000000000;;			return encodeByteSlice
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		enc := &sliceEncoder{newArrayEncoder(t)}
0000000000000000000000000000000000000000;;		return enc.encode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type arrayEncoder struct {
0000000000000000000000000000000000000000;;		elemEnc encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ae *arrayEncoder) encode(e *encodeState, v reflect.Value, _ bool) {
0000000000000000000000000000000000000000;;		e.WriteByte('[')
0000000000000000000000000000000000000000;;		n := v.Len()
0000000000000000000000000000000000000000;;		for i := 0; i < n; i++ {
0000000000000000000000000000000000000000;;			if i > 0 {
0000000000000000000000000000000000000000;;				e.WriteByte(',')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ae.elemEnc(e, v.Index(i), false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte(']')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newArrayEncoder(t reflect.Type) encoderFunc {
0000000000000000000000000000000000000000;;		enc := &arrayEncoder{typeEncoder(t.Elem())}
0000000000000000000000000000000000000000;;		return enc.encode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ptrEncoder struct {
0000000000000000000000000000000000000000;;		elemEnc encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pe *ptrEncoder) encode(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if v.IsNil() {
0000000000000000000000000000000000000000;;			e.WriteString("null")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pe.elemEnc(e, v.Elem(), quoted)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPtrEncoder(t reflect.Type) encoderFunc {
0000000000000000000000000000000000000000;;		enc := &ptrEncoder{typeEncoder(t.Elem())}
0000000000000000000000000000000000000000;;		return enc.encode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type condAddrEncoder struct {
0000000000000000000000000000000000000000;;		canAddrEnc, elseEnc encoderFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ce *condAddrEncoder) encode(e *encodeState, v reflect.Value, quoted bool) {
0000000000000000000000000000000000000000;;		if v.CanAddr() {
0000000000000000000000000000000000000000;;			ce.canAddrEnc(e, v, quoted)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ce.elseEnc(e, v, quoted)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newCondAddrEncoder returns an encoder that checks whether its value
0000000000000000000000000000000000000000;;	// CanAddr and delegates to canAddrEnc if so, else to elseEnc.
0000000000000000000000000000000000000000;;	func newCondAddrEncoder(canAddrEnc, elseEnc encoderFunc) encoderFunc {
0000000000000000000000000000000000000000;;		enc := &condAddrEncoder{canAddrEnc: canAddrEnc, elseEnc: elseEnc}
0000000000000000000000000000000000000000;;		return enc.encode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isValidTag(s string) bool {
0000000000000000000000000000000000000000;;		if s == "" {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range s {
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c):
0000000000000000000000000000000000000000;;				// Backslash and quote chars are reserved, but
0000000000000000000000000000000000000000;;				// otherwise any punctuation chars are allowed
0000000000000000000000000000000000000000;;				// in a tag name.
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				if !unicode.IsLetter(c) && !unicode.IsDigit(c) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fieldByIndex(v reflect.Value, index []int) reflect.Value {
0000000000000000000000000000000000000000;;		for _, i := range index {
0000000000000000000000000000000000000000;;			if v.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;				if v.IsNil() {
0000000000000000000000000000000000000000;;					return reflect.Value{}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				v = v.Elem()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v = v.Field(i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func typeByIndex(t reflect.Type, index []int) reflect.Type {
0000000000000000000000000000000000000000;;		for _, i := range index {
0000000000000000000000000000000000000000;;			if t.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;				t = t.Elem()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t = t.Field(i).Type
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stringValues is a slice of reflect.Value holding *reflect.StringValue.
0000000000000000000000000000000000000000;;	// It implements the methods to sort by string.
0000000000000000000000000000000000000000;;	type stringValues []reflect.Value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sv stringValues) Len() int           { return len(sv) }
0000000000000000000000000000000000000000;;	func (sv stringValues) Swap(i, j int)      { sv[i], sv[j] = sv[j], sv[i] }
0000000000000000000000000000000000000000;;	func (sv stringValues) Less(i, j int) bool { return sv.get(i) < sv.get(j) }
0000000000000000000000000000000000000000;;	func (sv stringValues) get(i int) string   { return sv[i].String() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE: keep in sync with stringBytes below.
0000000000000000000000000000000000000000;;	func (e *encodeState) string(s string) int {
0000000000000000000000000000000000000000;;		len0 := e.Len()
0000000000000000000000000000000000000000;;		e.WriteByte('"')
0000000000000000000000000000000000000000;;		start := 0
0000000000000000000000000000000000000000;;		for i := 0; i < len(s); {
0000000000000000000000000000000000000000;;			if b := s[i]; b < utf8.RuneSelf {
0000000000000000000000000000000000000000;;				if 0x20 <= b && b != '\\' && b != '"' && b != '<' && b != '>' && b != '&' {
0000000000000000000000000000000000000000;;					i++
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					e.WriteString(s[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch b {
0000000000000000000000000000000000000000;;				case '\\', '"':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte(b)
0000000000000000000000000000000000000000;;				case '\n':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte('n')
0000000000000000000000000000000000000000;;				case '\r':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte('r')
0000000000000000000000000000000000000000;;				case '\t':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte('t')
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					// This encodes bytes < 0x20 except for \n and \r,
0000000000000000000000000000000000000000;;					// as well as <, > and &. The latter are escaped because they
0000000000000000000000000000000000000000;;					// can lead to security holes when user-controlled strings
0000000000000000000000000000000000000000;;					// are rendered into JSON and served to some browsers.
0000000000000000000000000000000000000000;;					e.WriteString(`\u00`)
0000000000000000000000000000000000000000;;					e.WriteByte(hex[b>>4])
0000000000000000000000000000000000000000;;					e.WriteByte(hex[b&0xF])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;				start = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c, size := utf8.DecodeRuneInString(s[i:])
0000000000000000000000000000000000000000;;			if c == utf8.RuneError && size == 1 {
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					e.WriteString(s[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				e.WriteString(`\ufffd`)
0000000000000000000000000000000000000000;;				i += size
0000000000000000000000000000000000000000;;				start = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// U+2028 is LINE SEPARATOR.
0000000000000000000000000000000000000000;;			// U+2029 is PARAGRAPH SEPARATOR.
0000000000000000000000000000000000000000;;			// They are both technically valid characters in JSON strings,
0000000000000000000000000000000000000000;;			// but don't work in JSONP, which has to be evaluated as JavaScript,
0000000000000000000000000000000000000000;;			// and can lead to security holes there. It is valid JSON to
0000000000000000000000000000000000000000;;			// escape them, so we do so unconditionally.
0000000000000000000000000000000000000000;;			// See http://timelessrepo.com/json-isnt-a-javascript-subset for discussion.
0000000000000000000000000000000000000000;;			if c == '\u2028' || c == '\u2029' {
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					e.WriteString(s[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				e.WriteString(`\u202`)
0000000000000000000000000000000000000000;;				e.WriteByte(hex[c&0xF])
0000000000000000000000000000000000000000;;				i += size
0000000000000000000000000000000000000000;;				start = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			i += size
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if start < len(s) {
0000000000000000000000000000000000000000;;			e.WriteString(s[start:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte('"')
0000000000000000000000000000000000000000;;		return e.Len() - len0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE: keep in sync with string above.
0000000000000000000000000000000000000000;;	func (e *encodeState) stringBytes(s []byte) int {
0000000000000000000000000000000000000000;;		len0 := e.Len()
0000000000000000000000000000000000000000;;		e.WriteByte('"')
0000000000000000000000000000000000000000;;		start := 0
0000000000000000000000000000000000000000;;		for i := 0; i < len(s); {
0000000000000000000000000000000000000000;;			if b := s[i]; b < utf8.RuneSelf {
0000000000000000000000000000000000000000;;				if 0x20 <= b && b != '\\' && b != '"' && b != '<' && b != '>' && b != '&' {
0000000000000000000000000000000000000000;;					i++
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					e.Write(s[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch b {
0000000000000000000000000000000000000000;;				case '\\', '"':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte(b)
0000000000000000000000000000000000000000;;				case '\n':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte('n')
0000000000000000000000000000000000000000;;				case '\r':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte('r')
0000000000000000000000000000000000000000;;				case '\t':
0000000000000000000000000000000000000000;;					e.WriteByte('\\')
0000000000000000000000000000000000000000;;					e.WriteByte('t')
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					// This encodes bytes < 0x20 except for \n and \r,
0000000000000000000000000000000000000000;;					// as well as <, >, and &. The latter are escaped because they
0000000000000000000000000000000000000000;;					// can lead to security holes when user-controlled strings
0000000000000000000000000000000000000000;;					// are rendered into JSON and served to some browsers.
0000000000000000000000000000000000000000;;					e.WriteString(`\u00`)
0000000000000000000000000000000000000000;;					e.WriteByte(hex[b>>4])
0000000000000000000000000000000000000000;;					e.WriteByte(hex[b&0xF])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;				start = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c, size := utf8.DecodeRune(s[i:])
0000000000000000000000000000000000000000;;			if c == utf8.RuneError && size == 1 {
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					e.Write(s[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				e.WriteString(`\ufffd`)
0000000000000000000000000000000000000000;;				i += size
0000000000000000000000000000000000000000;;				start = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// U+2028 is LINE SEPARATOR.
0000000000000000000000000000000000000000;;			// U+2029 is PARAGRAPH SEPARATOR.
0000000000000000000000000000000000000000;;			// They are both technically valid characters in JSON strings,
0000000000000000000000000000000000000000;;			// but don't work in JSONP, which has to be evaluated as JavaScript,
0000000000000000000000000000000000000000;;			// and can lead to security holes there. It is valid JSON to
0000000000000000000000000000000000000000;;			// escape them, so we do so unconditionally.
0000000000000000000000000000000000000000;;			// See http://timelessrepo.com/json-isnt-a-javascript-subset for discussion.
0000000000000000000000000000000000000000;;			if c == '\u2028' || c == '\u2029' {
0000000000000000000000000000000000000000;;				if start < i {
0000000000000000000000000000000000000000;;					e.Write(s[start:i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				e.WriteString(`\u202`)
0000000000000000000000000000000000000000;;				e.WriteByte(hex[c&0xF])
0000000000000000000000000000000000000000;;				i += size
0000000000000000000000000000000000000000;;				start = i
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			i += size
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if start < len(s) {
0000000000000000000000000000000000000000;;			e.Write(s[start:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.WriteByte('"')
0000000000000000000000000000000000000000;;		return e.Len() - len0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A field represents a single field found in a struct.
0000000000000000000000000000000000000000;;	type field struct {
0000000000000000000000000000000000000000;;		name      string
0000000000000000000000000000000000000000;;		nameBytes []byte // []byte(name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tag       bool
0000000000000000000000000000000000000000;;		index     []int
0000000000000000000000000000000000000000;;		typ       reflect.Type
0000000000000000000000000000000000000000;;		omitEmpty bool
0000000000000000000000000000000000000000;;		quoted    bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fillField(f field) field {
0000000000000000000000000000000000000000;;		f.nameBytes = []byte(f.name)
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byName sorts field by name, breaking ties with depth,
0000000000000000000000000000000000000000;;	// then breaking ties with "name came from json tag", then
0000000000000000000000000000000000000000;;	// breaking ties with index sequence.
0000000000000000000000000000000000000000;;	type byName []field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byName) Len() int { return len(x) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byName) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byName) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if x[i].name != x[j].name {
0000000000000000000000000000000000000000;;			return x[i].name < x[j].name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(x[i].index) != len(x[j].index) {
0000000000000000000000000000000000000000;;			return len(x[i].index) < len(x[j].index)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if x[i].tag != x[j].tag {
0000000000000000000000000000000000000000;;			return x[i].tag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return byIndex(x).Less(i, j)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byIndex sorts field by index sequence.
0000000000000000000000000000000000000000;;	type byIndex []field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byIndex) Len() int { return len(x) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byIndex) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byIndex) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		for k, xik := range x[i].index {
0000000000000000000000000000000000000000;;			if k >= len(x[j].index) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if xik != x[j].index[k] {
0000000000000000000000000000000000000000;;				return xik < x[j].index[k]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(x[i].index) < len(x[j].index)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// typeFields returns a list of fields that JSON should recognize for the given type.
0000000000000000000000000000000000000000;;	// The algorithm is breadth-first search over the set of structs to include - the top struct
0000000000000000000000000000000000000000;;	// and then any reachable anonymous structs.
0000000000000000000000000000000000000000;;	func typeFields(t reflect.Type) []field {
0000000000000000000000000000000000000000;;		// Anonymous fields to explore at the current level and the next.
0000000000000000000000000000000000000000;;		current := []field{}
0000000000000000000000000000000000000000;;		next := []field{{typ: t}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Count of queued names for current level and the next.
0000000000000000000000000000000000000000;;		count := map[reflect.Type]int{}
0000000000000000000000000000000000000000;;		nextCount := map[reflect.Type]int{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Types already visited at an earlier level.
0000000000000000000000000000000000000000;;		visited := map[reflect.Type]bool{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Fields found.
0000000000000000000000000000000000000000;;		var fields []field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for len(next) > 0 {
0000000000000000000000000000000000000000;;			current, next = next, current[:0]
0000000000000000000000000000000000000000;;			count, nextCount = nextCount, map[reflect.Type]int{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, f := range current {
0000000000000000000000000000000000000000;;				if visited[f.typ] {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				visited[f.typ] = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Scan f.typ for fields to include.
0000000000000000000000000000000000000000;;				for i := 0; i < f.typ.NumField(); i++ {
0000000000000000000000000000000000000000;;					sf := f.typ.Field(i)
0000000000000000000000000000000000000000;;					if sf.PkgPath != "" && !sf.Anonymous { // unexported
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					tag := sf.Tag.Get("json")
0000000000000000000000000000000000000000;;					if tag == "-" {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					name, opts := parseTag(tag)
0000000000000000000000000000000000000000;;					if !isValidTag(name) {
0000000000000000000000000000000000000000;;						name = ""
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					index := make([]int, len(f.index)+1)
0000000000000000000000000000000000000000;;					copy(index, f.index)
0000000000000000000000000000000000000000;;					index[len(f.index)] = i
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					ft := sf.Type
0000000000000000000000000000000000000000;;					if ft.Name() == "" && ft.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;						// Follow pointer.
0000000000000000000000000000000000000000;;						ft = ft.Elem()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Only strings, floats, integers, and booleans can be quoted.
0000000000000000000000000000000000000000;;					quoted := false
0000000000000000000000000000000000000000;;					if opts.Contains("string") {
0000000000000000000000000000000000000000;;						switch ft.Kind() {
0000000000000000000000000000000000000000;;						case reflect.Bool,
0000000000000000000000000000000000000000;;							reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
0000000000000000000000000000000000000000;;							reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64,
0000000000000000000000000000000000000000;;							reflect.Float32, reflect.Float64,
0000000000000000000000000000000000000000;;							reflect.String:
0000000000000000000000000000000000000000;;							quoted = true
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Record found field and index sequence.
0000000000000000000000000000000000000000;;					if name != "" || !sf.Anonymous || ft.Kind() != reflect.Struct {
0000000000000000000000000000000000000000;;						tagged := name != ""
0000000000000000000000000000000000000000;;						if name == "" {
0000000000000000000000000000000000000000;;							name = sf.Name
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						fields = append(fields, fillField(field{
0000000000000000000000000000000000000000;;							name:      name,
0000000000000000000000000000000000000000;;							tag:       tagged,
0000000000000000000000000000000000000000;;							index:     index,
0000000000000000000000000000000000000000;;							typ:       ft,
0000000000000000000000000000000000000000;;							omitEmpty: opts.Contains("omitempty"),
0000000000000000000000000000000000000000;;							quoted:    quoted,
0000000000000000000000000000000000000000;;						}))
0000000000000000000000000000000000000000;;						if count[f.typ] > 1 {
0000000000000000000000000000000000000000;;							// If there were multiple instances, add a second,
0000000000000000000000000000000000000000;;							// so that the annihilation code will see a duplicate.
0000000000000000000000000000000000000000;;							// It only cares about the distinction between 1 or 2,
0000000000000000000000000000000000000000;;							// so don't bother generating any more copies.
0000000000000000000000000000000000000000;;							fields = append(fields, fields[len(fields)-1])
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Record new anonymous struct to explore in next round.
0000000000000000000000000000000000000000;;					nextCount[ft]++
0000000000000000000000000000000000000000;;					if nextCount[ft] == 1 {
0000000000000000000000000000000000000000;;						next = append(next, fillField(field{name: ft.Name(), index: index, typ: ft}))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sort.Sort(byName(fields))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete all fields that are hidden by the Go rules for embedded fields,
0000000000000000000000000000000000000000;;		// except that fields with JSON tags are promoted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fields are sorted in primary order of name, secondary order
0000000000000000000000000000000000000000;;		// of field index length. Loop over names; for each name, delete
0000000000000000000000000000000000000000;;		// hidden fields by choosing the one dominant field that survives.
0000000000000000000000000000000000000000;;		out := fields[:0]
0000000000000000000000000000000000000000;;		for advance, i := 0, 0; i < len(fields); i += advance {
0000000000000000000000000000000000000000;;			// One iteration per name.
0000000000000000000000000000000000000000;;			// Find the sequence of fields with the name of this first field.
0000000000000000000000000000000000000000;;			fi := fields[i]
0000000000000000000000000000000000000000;;			name := fi.name
0000000000000000000000000000000000000000;;			for advance = 1; i+advance < len(fields); advance++ {
0000000000000000000000000000000000000000;;				fj := fields[i+advance]
0000000000000000000000000000000000000000;;				if fj.name != name {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if advance == 1 { // Only one field with this name
0000000000000000000000000000000000000000;;				out = append(out, fi)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			dominant, ok := dominantField(fields[i : i+advance])
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				out = append(out, dominant)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fields = out
0000000000000000000000000000000000000000;;		sort.Sort(byIndex(fields))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fields
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dominantField looks through the fields, all of which are known to
0000000000000000000000000000000000000000;;	// have the same name, to find the single field that dominates the
0000000000000000000000000000000000000000;;	// others using Go's embedding rules, modified by the presence of
0000000000000000000000000000000000000000;;	// JSON tags. If there are multiple top-level fields, the boolean
0000000000000000000000000000000000000000;;	// will be false: This condition is an error in Go and we skip all
0000000000000000000000000000000000000000;;	// the fields.
0000000000000000000000000000000000000000;;	func dominantField(fields []field) (field, bool) {
0000000000000000000000000000000000000000;;		// The fields are sorted in increasing index-length order. The winner
0000000000000000000000000000000000000000;;		// must therefore be one with the shortest index length. Drop all
0000000000000000000000000000000000000000;;		// longer entries, which is easy: just truncate the slice.
0000000000000000000000000000000000000000;;		length := len(fields[0].index)
0000000000000000000000000000000000000000;;		tagged := -1 // Index of first tagged field.
0000000000000000000000000000000000000000;;		for i, f := range fields {
0000000000000000000000000000000000000000;;			if len(f.index) > length {
0000000000000000000000000000000000000000;;				fields = fields[:i]
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if f.tag {
0000000000000000000000000000000000000000;;				if tagged >= 0 {
0000000000000000000000000000000000000000;;					// Multiple tagged fields at the same level: conflict.
0000000000000000000000000000000000000000;;					// Return no field.
0000000000000000000000000000000000000000;;					return field{}, false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				tagged = i
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tagged >= 0 {
0000000000000000000000000000000000000000;;			return fields[tagged], true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// All remaining fields have the same length. If there's more than one,
0000000000000000000000000000000000000000;;		// we have a conflict (two fields named "X" at the same level) and we
0000000000000000000000000000000000000000;;		// return no field.
0000000000000000000000000000000000000000;;		if len(fields) > 1 {
0000000000000000000000000000000000000000;;			return field{}, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fields[0], true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var fieldCache struct {
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		m map[reflect.Type][]field
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cachedTypeFields is like typeFields but uses a cache to avoid repeated work.
0000000000000000000000000000000000000000;;	func cachedTypeFields(t reflect.Type) []field {
0000000000000000000000000000000000000000;;		fieldCache.RLock()
0000000000000000000000000000000000000000;;		f := fieldCache.m[t]
0000000000000000000000000000000000000000;;		fieldCache.RUnlock()
0000000000000000000000000000000000000000;;		if f != nil {
0000000000000000000000000000000000000000;;			return f
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Compute fields without lock.
0000000000000000000000000000000000000000;;		// Might duplicate effort but won't hold other computations back.
0000000000000000000000000000000000000000;;		f = typeFields(t)
0000000000000000000000000000000000000000;;		if f == nil {
0000000000000000000000000000000000000000;;			f = []field{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fieldCache.Lock()
0000000000000000000000000000000000000000;;		if fieldCache.m == nil {
0000000000000000000000000000000000000000;;			fieldCache.m = map[reflect.Type][]field{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fieldCache.m[t] = f
0000000000000000000000000000000000000000;;		fieldCache.Unlock()
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
