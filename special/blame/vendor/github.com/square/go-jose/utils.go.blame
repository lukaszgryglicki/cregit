0000000000000000000000000000000000000000;;	/*-
0000000000000000000000000000000000000000;;	 * Copyright 2014 Square Inc.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	 * you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	 * You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	 * distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	 * See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	 * limitations under the License.
0000000000000000000000000000000000000000;;	 */
0ba55c488eaa2bd59fa46ecc0263ca44109d2949;;	
0000000000000000000000000000000000000000;;	package jose
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"encoding/pem"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadPublicKey loads a public key from PEM/DER-encoded data.
0000000000000000000000000000000000000000;;	func LoadPublicKey(data []byte) (interface{}, error) {
0000000000000000000000000000000000000000;;		input := data
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		block, _ := pem.Decode(data)
0000000000000000000000000000000000000000;;		if block != nil {
0000000000000000000000000000000000000000;;			input = block.Bytes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Try to load SubjectPublicKeyInfo
0000000000000000000000000000000000000000;;		pub, err0 := x509.ParsePKIXPublicKey(input)
0000000000000000000000000000000000000000;;		if err0 == nil {
0000000000000000000000000000000000000000;;			return pub, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err1 := x509.ParseCertificate(input)
0000000000000000000000000000000000000000;;		if err1 == nil {
0000000000000000000000000000000000000000;;			return cert.PublicKey, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("square/go-jose: parse error, got '%s' and '%s'", err0, err1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadPrivateKey loads a private key from PEM/DER-encoded data.
0000000000000000000000000000000000000000;;	func LoadPrivateKey(data []byte) (interface{}, error) {
0000000000000000000000000000000000000000;;		input := data
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		block, _ := pem.Decode(data)
0000000000000000000000000000000000000000;;		if block != nil {
0000000000000000000000000000000000000000;;			input = block.Bytes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var priv interface{}
0000000000000000000000000000000000000000;;		priv, err0 := x509.ParsePKCS1PrivateKey(input)
0000000000000000000000000000000000000000;;		if err0 == nil {
0000000000000000000000000000000000000000;;			return priv, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		priv, err1 := x509.ParsePKCS8PrivateKey(input)
0000000000000000000000000000000000000000;;		if err1 == nil {
0000000000000000000000000000000000000000;;			return priv, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		priv, err2 := x509.ParseECPrivateKey(input)
0000000000000000000000000000000000000000;;		if err2 == nil {
0000000000000000000000000000000000000000;;			return priv, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("square/go-jose: parse error, got '%s', '%s' and '%s'", err0, err1, err2)
0000000000000000000000000000000000000000;;	}
