0000000000000000000000000000000000000000;;	/*-
0000000000000000000000000000000000000000;;	 * Copyright 2014 Square Inc.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	 * you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	 * You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	 * distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	 * See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	 * limitations under the License.
0000000000000000000000000000000000000000;;	 */
0ba55c488eaa2bd59fa46ecc0263ca44109d2949;;	
0000000000000000000000000000000000000000;;	package josecipher
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto"
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"hash"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type concatKDF struct {
0000000000000000000000000000000000000000;;		z, info []byte
0000000000000000000000000000000000000000;;		i       uint32
0000000000000000000000000000000000000000;;		cache   []byte
0000000000000000000000000000000000000000;;		hasher  hash.Hash
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewConcatKDF builds a KDF reader based on the given inputs.
0000000000000000000000000000000000000000;;	func NewConcatKDF(hash crypto.Hash, z, algID, ptyUInfo, ptyVInfo, supPubInfo, supPrivInfo []byte) io.Reader {
0000000000000000000000000000000000000000;;		buffer := make([]byte, uint64(len(algID))+uint64(len(ptyUInfo))+uint64(len(ptyVInfo))+uint64(len(supPubInfo))+uint64(len(supPrivInfo)))
0000000000000000000000000000000000000000;;		n := 0
0000000000000000000000000000000000000000;;		n += copy(buffer, algID)
0000000000000000000000000000000000000000;;		n += copy(buffer[n:], ptyUInfo)
0000000000000000000000000000000000000000;;		n += copy(buffer[n:], ptyVInfo)
0000000000000000000000000000000000000000;;		n += copy(buffer[n:], supPubInfo)
0000000000000000000000000000000000000000;;		copy(buffer[n:], supPrivInfo)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hasher := hash.New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &concatKDF{
0000000000000000000000000000000000000000;;			z:      z,
0000000000000000000000000000000000000000;;			info:   buffer,
0000000000000000000000000000000000000000;;			hasher: hasher,
0000000000000000000000000000000000000000;;			cache:  []byte{},
0000000000000000000000000000000000000000;;			i:      1,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ctx *concatKDF) Read(out []byte) (int, error) {
0000000000000000000000000000000000000000;;		copied := copy(out, ctx.cache)
0000000000000000000000000000000000000000;;		ctx.cache = ctx.cache[copied:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for copied < len(out) {
0000000000000000000000000000000000000000;;			ctx.hasher.Reset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Write on a hash.Hash never fails
0000000000000000000000000000000000000000;;			_ = binary.Write(ctx.hasher, binary.BigEndian, ctx.i)
0000000000000000000000000000000000000000;;			_, _ = ctx.hasher.Write(ctx.z)
0000000000000000000000000000000000000000;;			_, _ = ctx.hasher.Write(ctx.info)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			hash := ctx.hasher.Sum(nil)
0000000000000000000000000000000000000000;;			chunkCopied := copy(out[copied:], hash)
0000000000000000000000000000000000000000;;			copied += chunkCopied
0000000000000000000000000000000000000000;;			ctx.cache = hash[chunkCopied:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ctx.i++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return copied, nil
0000000000000000000000000000000000000000;;	}
