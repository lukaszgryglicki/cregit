0000000000000000000000000000000000000000;;	/*-
0000000000000000000000000000000000000000;;	 * Copyright 2014 Square Inc.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	 * you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	 * You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	 * distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	 * See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	 * limitations under the License.
0000000000000000000000000000000000000000;;	 */
0ba55c488eaa2bd59fa46ecc0263ca44109d2949;;	
0000000000000000000000000000000000000000;;	package jose
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"compress/flate"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"math/big"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/square/go-jose/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var stripWhitespaceRegex = regexp.MustCompile("\\s")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Url-safe base64 encode that strips padding
0000000000000000000000000000000000000000;;	func base64URLEncode(data []byte) string {
0000000000000000000000000000000000000000;;		var result = base64.URLEncoding.EncodeToString(data)
0000000000000000000000000000000000000000;;		return strings.TrimRight(result, "=")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Url-safe base64 decoder that adds padding
0000000000000000000000000000000000000000;;	func base64URLDecode(data string) ([]byte, error) {
0000000000000000000000000000000000000000;;		var missing = (4 - len(data)%4) % 4
0000000000000000000000000000000000000000;;		data += strings.Repeat("=", missing)
0000000000000000000000000000000000000000;;		return base64.URLEncoding.DecodeString(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Helper function to serialize known-good objects.
0000000000000000000000000000000000000000;;	// Precondition: value is not a nil pointer.
0000000000000000000000000000000000000000;;	func mustSerializeJSON(value interface{}) []byte {
0000000000000000000000000000000000000000;;		out, err := json.Marshal(value)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// We never want to serialize the top-level value "null," since it's not a
0000000000000000000000000000000000000000;;		// valid JOSE message. But if a caller passes in a nil pointer to this method,
0000000000000000000000000000000000000000;;		// MarshalJSON will happily serialize it as the top-level value "null". If
0000000000000000000000000000000000000000;;		// that value is then embedded in another operation, for instance by being
0000000000000000000000000000000000000000;;		// base64-encoded and fed as input to a signing algorithm
0000000000000000000000000000000000000000;;		// (https://github.com/square/go-jose/issues/22), the result will be
0000000000000000000000000000000000000000;;		// incorrect. Because this method is intended for known-good objects, and a nil
0000000000000000000000000000000000000000;;		// pointer is not a known-good object, we are free to panic in this case.
0000000000000000000000000000000000000000;;		// Note: It's not possible to directly check whether the data pointed at by an
0000000000000000000000000000000000000000;;		// interface is a nil pointer, so we do this hacky workaround.
0000000000000000000000000000000000000000;;		// https://groups.google.com/forum/#!topic/golang-nuts/wnH302gBa4I
0000000000000000000000000000000000000000;;		if string(out) == "null" {
0000000000000000000000000000000000000000;;			panic("Tried to serialize a nil pointer.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strip all newlines and whitespace
0000000000000000000000000000000000000000;;	func stripWhitespace(data string) string {
0000000000000000000000000000000000000000;;		return stripWhitespaceRegex.ReplaceAllString(data, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Perform compression based on algorithm
0000000000000000000000000000000000000000;;	func compress(algorithm CompressionAlgorithm, input []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		switch algorithm {
0000000000000000000000000000000000000000;;		case DEFLATE:
0000000000000000000000000000000000000000;;			return deflate(input)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, ErrUnsupportedAlgorithm
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Perform decompression based on algorithm
0000000000000000000000000000000000000000;;	func decompress(algorithm CompressionAlgorithm, input []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		switch algorithm {
0000000000000000000000000000000000000000;;		case DEFLATE:
0000000000000000000000000000000000000000;;			return inflate(input)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, ErrUnsupportedAlgorithm
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compress with DEFLATE
0000000000000000000000000000000000000000;;	func deflate(input []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		output := new(bytes.Buffer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Writing to byte buffer, err is always nil
0000000000000000000000000000000000000000;;		writer, _ := flate.NewWriter(output, 1)
0000000000000000000000000000000000000000;;		_, _ = io.Copy(writer, bytes.NewBuffer(input))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := writer.Close()
0000000000000000000000000000000000000000;;		return output.Bytes(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Decompress with DEFLATE
0000000000000000000000000000000000000000;;	func inflate(input []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		output := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		reader := flate.NewReader(bytes.NewBuffer(input))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := io.Copy(output, reader)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = reader.Close()
0000000000000000000000000000000000000000;;		return output.Bytes(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byteBuffer represents a slice of bytes that can be serialized to url-safe base64.
0000000000000000000000000000000000000000;;	type byteBuffer struct {
0000000000000000000000000000000000000000;;		data []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBuffer(data []byte) *byteBuffer {
0000000000000000000000000000000000000000;;		if data == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &byteBuffer{
0000000000000000000000000000000000000000;;			data: data,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFixedSizeBuffer(data []byte, length int) *byteBuffer {
0000000000000000000000000000000000000000;;		if len(data) > length {
0000000000000000000000000000000000000000;;			panic("square/go-jose: invalid call to newFixedSizeBuffer (len(data) > length)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pad := make([]byte, length-len(data))
0000000000000000000000000000000000000000;;		return newBuffer(append(pad, data...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBufferFromInt(num uint64) *byteBuffer {
0000000000000000000000000000000000000000;;		data := make([]byte, 8)
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint64(data, num)
0000000000000000000000000000000000000000;;		return newBuffer(bytes.TrimLeft(data, "\x00"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *byteBuffer) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(b.base64())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *byteBuffer) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var encoded string
0000000000000000000000000000000000000000;;		err := json.Unmarshal(data, &encoded)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if encoded == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		decoded, err := base64URLDecode(encoded)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*b = *newBuffer(decoded)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *byteBuffer) base64() string {
0000000000000000000000000000000000000000;;		return base64URLEncode(b.data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *byteBuffer) bytes() []byte {
0000000000000000000000000000000000000000;;		// Handling nil here allows us to transparently handle nil slices when serializing.
0000000000000000000000000000000000000000;;		if b == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b.data
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b byteBuffer) bigInt() *big.Int {
0000000000000000000000000000000000000000;;		return new(big.Int).SetBytes(b.data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b byteBuffer) toInt() int {
0000000000000000000000000000000000000000;;		return int(b.bigInt().Int64())
0000000000000000000000000000000000000000;;	}
