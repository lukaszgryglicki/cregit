0000000000000000000000000000000000000000;;	package sftp
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding"
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/pkg/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errShortPacket           = errors.New("packet too short")
0000000000000000000000000000000000000000;;		errUnknownExtendedPacket = errors.New("unknown extended packet")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		debugDumpTxPacket      = false
0000000000000000000000000000000000000000;;		debugDumpRxPacket      = false
0000000000000000000000000000000000000000;;		debugDumpTxPacketBytes = false
0000000000000000000000000000000000000000;;		debugDumpRxPacketBytes = false
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalUint32(b []byte, v uint32) []byte {
0000000000000000000000000000000000000000;;		return append(b, byte(v>>24), byte(v>>16), byte(v>>8), byte(v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalUint64(b []byte, v uint64) []byte {
0000000000000000000000000000000000000000;;		return marshalUint32(marshalUint32(b, uint32(v>>32)), uint32(v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalString(b []byte, v string) []byte {
0000000000000000000000000000000000000000;;		return append(marshalUint32(b, uint32(len(v))), v...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshal(b []byte, v interface{}) []byte {
0000000000000000000000000000000000000000;;		if v == nil {
0000000000000000000000000000000000000000;;			return b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch v := v.(type) {
0000000000000000000000000000000000000000;;		case uint8:
0000000000000000000000000000000000000000;;			return append(b, v)
0000000000000000000000000000000000000000;;		case uint32:
0000000000000000000000000000000000000000;;			return marshalUint32(b, v)
0000000000000000000000000000000000000000;;		case uint64:
0000000000000000000000000000000000000000;;			return marshalUint64(b, v)
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return marshalString(b, v)
0000000000000000000000000000000000000000;;		case os.FileInfo:
0000000000000000000000000000000000000000;;			return marshalFileInfo(b, v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			switch d := reflect.ValueOf(v); d.Kind() {
0000000000000000000000000000000000000000;;			case reflect.Struct:
0000000000000000000000000000000000000000;;				for i, n := 0, d.NumField(); i < n; i++ {
0000000000000000000000000000000000000000;;					b = append(marshal(b, d.Field(i).Interface()))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return b
0000000000000000000000000000000000000000;;			case reflect.Slice:
0000000000000000000000000000000000000000;;				for i, n := 0, d.Len(); i < n; i++ {
0000000000000000000000000000000000000000;;					b = append(marshal(b, d.Index(i).Interface()))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return b
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				panic(fmt.Sprintf("marshal(%#v): cannot handle type %T", v, v))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalUint32(b []byte) (uint32, []byte) {
0000000000000000000000000000000000000000;;		v := uint32(b[3]) | uint32(b[2])<<8 | uint32(b[1])<<16 | uint32(b[0])<<24
0000000000000000000000000000000000000000;;		return v, b[4:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalUint32Safe(b []byte) (uint32, []byte, error) {
0000000000000000000000000000000000000000;;		var v uint32
0000000000000000000000000000000000000000;;		if len(b) < 4 {
0000000000000000000000000000000000000000;;			return 0, nil, errShortPacket
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;		return v, b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalUint64(b []byte) (uint64, []byte) {
0000000000000000000000000000000000000000;;		h, b := unmarshalUint32(b)
0000000000000000000000000000000000000000;;		l, b := unmarshalUint32(b)
0000000000000000000000000000000000000000;;		return uint64(h)<<32 | uint64(l), b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalUint64Safe(b []byte) (uint64, []byte, error) {
0000000000000000000000000000000000000000;;		var v uint64
0000000000000000000000000000000000000000;;		if len(b) < 8 {
0000000000000000000000000000000000000000;;			return 0, nil, errShortPacket
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v, b = unmarshalUint64(b)
0000000000000000000000000000000000000000;;		return v, b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalString(b []byte) (string, []byte) {
0000000000000000000000000000000000000000;;		n, b := unmarshalUint32(b)
0000000000000000000000000000000000000000;;		return string(b[:n]), b[n:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalStringSafe(b []byte) (string, []byte, error) {
0000000000000000000000000000000000000000;;		n, b, err := unmarshalUint32Safe(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if int64(n) > int64(len(b)) {
0000000000000000000000000000000000000000;;			return "", nil, errShortPacket
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b[:n]), b[n:], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sendPacket marshals p according to RFC 4234.
0000000000000000000000000000000000000000;;	func sendPacket(w io.Writer, m encoding.BinaryMarshaler) error {
0000000000000000000000000000000000000000;;		bb, err := m.MarshalBinary()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return errors.Errorf("binary marshaller failed: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if debugDumpTxPacketBytes {
0000000000000000000000000000000000000000;;			debug("send packet: %s %d bytes %x", fxp(bb[0]), len(bb), bb[1:])
0000000000000000000000000000000000000000;;		} else if debugDumpTxPacket {
0000000000000000000000000000000000000000;;			debug("send packet: %s %d bytes", fxp(bb[0]), len(bb))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l := uint32(len(bb))
0000000000000000000000000000000000000000;;		hdr := []byte{byte(l >> 24), byte(l >> 16), byte(l >> 8), byte(l)}
0000000000000000000000000000000000000000;;		_, err = w.Write(hdr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return errors.Errorf("failed to send packet header: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = w.Write(bb)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return errors.Errorf("failed to send packet body: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recvPacket(r io.Reader) (uint8, []byte, error) {
0000000000000000000000000000000000000000;;		var b = []byte{0, 0, 0, 0}
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(r, b); err != nil {
0000000000000000000000000000000000000000;;			return 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l, _ := unmarshalUint32(b)
0000000000000000000000000000000000000000;;		b = make([]byte, l)
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(r, b); err != nil {
0000000000000000000000000000000000000000;;			debug("recv packet %d bytes: err %v", l, err)
0000000000000000000000000000000000000000;;			return 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if debugDumpRxPacketBytes {
0000000000000000000000000000000000000000;;			debug("recv packet: %s %d bytes %x", fxp(b[0]), l, b[1:])
0000000000000000000000000000000000000000;;		} else if debugDumpRxPacket {
0000000000000000000000000000000000000000;;			debug("recv packet: %s %d bytes", fxp(b[0]), l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b[0], b[1:], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type extensionPair struct {
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		Data string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalExtensionPair(b []byte) (extensionPair, []byte, error) {
0000000000000000000000000000000000000000;;		var ep extensionPair
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		ep.Name, b, err = unmarshalStringSafe(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ep, b, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ep.Data, b, err = unmarshalStringSafe(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ep, b, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ep, b, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Here starts the definition of packets along with their MarshalBinary
0000000000000000000000000000000000000000;;	// implementations.
0000000000000000000000000000000000000000;;	// Manually writing the marshalling logic wins us a lot of time and
0000000000000000000000000000000000000000;;	// allocation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxInitPacket struct {
0000000000000000000000000000000000000000;;		Version    uint32
0000000000000000000000000000000000000000;;		Extensions []extensionPair
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxInitPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 // byte + uint32
0000000000000000000000000000000000000000;;		for _, e := range p.Extensions {
0000000000000000000000000000000000000000;;			l += 4 + len(e.Name) + 4 + len(e.Data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_INIT)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Version)
0000000000000000000000000000000000000000;;		for _, e := range p.Extensions {
0000000000000000000000000000000000000000;;			b = marshalString(b, e.Name)
0000000000000000000000000000000000000000;;			b = marshalString(b, e.Data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxInitPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.Version, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for len(b) > 0 {
0000000000000000000000000000000000000000;;			var ep extensionPair
0000000000000000000000000000000000000000;;			ep, b, err = unmarshalExtensionPair(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.Extensions = append(p.Extensions, ep)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxVersionPacket struct {
0000000000000000000000000000000000000000;;		Version    uint32
0000000000000000000000000000000000000000;;		Extensions []struct {
0000000000000000000000000000000000000000;;			Name, Data string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxVersionPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 // byte + uint32
0000000000000000000000000000000000000000;;		for _, e := range p.Extensions {
0000000000000000000000000000000000000000;;			l += 4 + len(e.Name) + 4 + len(e.Data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_VERSION)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Version)
0000000000000000000000000000000000000000;;		for _, e := range p.Extensions {
0000000000000000000000000000000000000000;;			b = marshalString(b, e.Name)
0000000000000000000000000000000000000000;;			b = marshalString(b, e.Data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalIDString(packetType byte, id uint32, str string) ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(str)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, packetType)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, id)
0000000000000000000000000000000000000000;;		b = marshalString(b, str)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalIDString(b []byte, id *uint32, str *string) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		*id, b, err = unmarshalUint32Safe(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*str, b, err = unmarshalStringSafe(b)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpReaddirPacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpReaddirPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpReaddirPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_READDIR, p.ID, p.Handle)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpReaddirPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Handle)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpOpendirPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpOpendirPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpOpendirPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_OPENDIR, p.ID, p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpOpendirPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpLstatPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpLstatPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpLstatPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_LSTAT, p.ID, p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpLstatPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpStatPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpStatPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpStatPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_STAT, p.ID, p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpStatPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpFstatPacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpFstatPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpFstatPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_FSTAT, p.ID, p.Handle)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpFstatPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Handle)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpClosePacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpClosePacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpClosePacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_CLOSE, p.ID, p.Handle)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpClosePacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Handle)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpRemovePacket struct {
0000000000000000000000000000000000000000;;		ID       uint32
0000000000000000000000000000000000000000;;		Filename string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRemovePacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRemovePacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_REMOVE, p.ID, p.Filename)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpRemovePacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Filename)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpRmdirPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRmdirPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRmdirPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_RMDIR, p.ID, p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpRmdirPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpSymlinkPacket struct {
0000000000000000000000000000000000000000;;		ID         uint32
0000000000000000000000000000000000000000;;		Targetpath string
0000000000000000000000000000000000000000;;		Linkpath   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpSymlinkPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpSymlinkPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Targetpath) +
0000000000000000000000000000000000000000;;			4 + len(p.Linkpath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_SYMLINK)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Targetpath)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Linkpath)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpSymlinkPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Targetpath, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Linkpath, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpReadlinkPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpReadlinkPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpReadlinkPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_READLINK, p.ID, p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpReadlinkPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpRealpathPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRealpathPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRealpathPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return marshalIDString(ssh_FXP_REALPATH, p.ID, p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpRealpathPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		return unmarshalIDString(b, &p.ID, &p.Path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpNameAttr struct {
0000000000000000000000000000000000000000;;		Name     string
0000000000000000000000000000000000000000;;		LongName string
0000000000000000000000000000000000000000;;		Attrs    []interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpNameAttr) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		b := []byte{}
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Name)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.LongName)
0000000000000000000000000000000000000000;;		for _, attr := range p.Attrs {
0000000000000000000000000000000000000000;;			b = marshal(b, attr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpNamePacket struct {
0000000000000000000000000000000000000000;;		ID        uint32
0000000000000000000000000000000000000000;;		NameAttrs []sshFxpNameAttr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpNamePacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		b := []byte{}
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_NAME)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, uint32(len(p.NameAttrs)))
0000000000000000000000000000000000000000;;		for _, na := range p.NameAttrs {
0000000000000000000000000000000000000000;;			ab, err := na.MarshalBinary()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b = append(b, ab...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpOpenPacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Path   string
0000000000000000000000000000000000000000;;		Pflags uint32
0000000000000000000000000000000000000000;;		Flags  uint32 // ignored
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpOpenPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpOpenPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 +
0000000000000000000000000000000000000000;;			4 + len(p.Path) +
0000000000000000000000000000000000000000;;			4 + 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_OPEN)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Path)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Pflags)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Flags)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpOpenPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Path, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Pflags, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Flags, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpReadPacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;		Offset uint64
0000000000000000000000000000000000000000;;		Len    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpReadPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpReadPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Handle) +
0000000000000000000000000000000000000000;;			8 + 4 // uint64 + uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_READ)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Handle)
0000000000000000000000000000000000000000;;		b = marshalUint64(b, p.Offset)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Len)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpReadPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Handle, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Offset, b, err = unmarshalUint64Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Len, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpRenamePacket struct {
0000000000000000000000000000000000000000;;		ID      uint32
0000000000000000000000000000000000000000;;		Oldpath string
0000000000000000000000000000000000000000;;		Newpath string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRenamePacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpRenamePacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Oldpath) +
0000000000000000000000000000000000000000;;			4 + len(p.Newpath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_RENAME)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Oldpath)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Newpath)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpRenamePacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Oldpath, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Newpath, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpWritePacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;		Offset uint64
0000000000000000000000000000000000000000;;		Length uint32
0000000000000000000000000000000000000000;;		Data   []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpWritePacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpWritePacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Handle) +
0000000000000000000000000000000000000000;;			8 + 4 + // uint64 + uint32
0000000000000000000000000000000000000000;;			len(p.Data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_WRITE)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Handle)
0000000000000000000000000000000000000000;;		b = marshalUint64(b, p.Offset)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Length)
0000000000000000000000000000000000000000;;		b = append(b, p.Data...)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpWritePacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Handle, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Offset, b, err = unmarshalUint64Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Length, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if uint32(len(b)) < p.Length {
0000000000000000000000000000000000000000;;			return errShortPacket
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.Data = append([]byte{}, b[:p.Length]...)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpMkdirPacket struct {
0000000000000000000000000000000000000000;;		ID    uint32
0000000000000000000000000000000000000000;;		Path  string
0000000000000000000000000000000000000000;;		Flags uint32 // ignored
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpMkdirPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpMkdirPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Path) +
0000000000000000000000000000000000000000;;			4 // uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_MKDIR)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Path)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Flags)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpMkdirPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Path, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Flags, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpSetstatPacket struct {
0000000000000000000000000000000000000000;;		ID    uint32
0000000000000000000000000000000000000000;;		Path  string
0000000000000000000000000000000000000000;;		Flags uint32
0000000000000000000000000000000000000000;;		Attrs interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpFsetstatPacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;		Flags  uint32
0000000000000000000000000000000000000000;;		Attrs  interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpSetstatPacket) id() uint32  { return p.ID }
0000000000000000000000000000000000000000;;	func (p sshFxpFsetstatPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpSetstatPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Path) +
0000000000000000000000000000000000000000;;			4 // uint32 + uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_SETSTAT)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Path)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Flags)
0000000000000000000000000000000000000000;;		b = marshal(b, p.Attrs)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpFsetstatPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			4 + len(p.Handle) +
0000000000000000000000000000000000000000;;			4 // uint32 + uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_FSETSTAT)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Handle)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Flags)
0000000000000000000000000000000000000000;;		b = marshal(b, p.Attrs)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpSetstatPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Path, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Flags, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.Attrs = b
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpFsetstatPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Handle, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Flags, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.Attrs = b
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpHandlePacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Handle string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpHandlePacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		b := []byte{ssh_FXP_HANDLE}
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Handle)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpStatusPacket struct {
0000000000000000000000000000000000000000;;		ID uint32
0000000000000000000000000000000000000000;;		StatusError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpStatusPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		b := []byte{ssh_FXP_STATUS}
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalStatus(b, p.StatusError)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpDataPacket struct {
0000000000000000000000000000000000000000;;		ID     uint32
0000000000000000000000000000000000000000;;		Length uint32
0000000000000000000000000000000000000000;;		Data   []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpDataPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		b := []byte{ssh_FXP_DATA}
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.Length)
0000000000000000000000000000000000000000;;		b = append(b, p.Data[:p.Length]...)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpDataPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Length, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if uint32(len(b)) < p.Length {
0000000000000000000000000000000000000000;;			return errors.New("truncated packet")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.Data = make([]byte, p.Length)
0000000000000000000000000000000000000000;;		copy(p.Data, b)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpStatvfsPacket struct {
0000000000000000000000000000000000000000;;		ID   uint32
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpStatvfsPacket) id() uint32 { return p.ID }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpStatvfsPacket) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		l := 1 + 4 + // type(byte) + uint32
0000000000000000000000000000000000000000;;			len(p.Path) +
0000000000000000000000000000000000000000;;			len("statvfs@openssh.com")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := make([]byte, 0, l)
0000000000000000000000000000000000000000;;		b = append(b, ssh_FXP_EXTENDED)
0000000000000000000000000000000000000000;;		b = marshalUint32(b, p.ID)
0000000000000000000000000000000000000000;;		b = marshalString(b, "statvfs@openssh.com")
0000000000000000000000000000000000000000;;		b = marshalString(b, p.Path)
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A StatVFS contains statistics about a filesystem.
0000000000000000000000000000000000000000;;	type StatVFS struct {
0000000000000000000000000000000000000000;;		ID      uint32
0000000000000000000000000000000000000000;;		Bsize   uint64 /* file system block size */
0000000000000000000000000000000000000000;;		Frsize  uint64 /* fundamental fs block size */
0000000000000000000000000000000000000000;;		Blocks  uint64 /* number of blocks (unit f_frsize) */
0000000000000000000000000000000000000000;;		Bfree   uint64 /* free blocks in file system */
0000000000000000000000000000000000000000;;		Bavail  uint64 /* free blocks for non-root */
0000000000000000000000000000000000000000;;		Files   uint64 /* total file inodes */
0000000000000000000000000000000000000000;;		Ffree   uint64 /* free file inodes */
0000000000000000000000000000000000000000;;		Favail  uint64 /* free file inodes for to non-root */
0000000000000000000000000000000000000000;;		Fsid    uint64 /* file system id */
0000000000000000000000000000000000000000;;		Flag    uint64 /* bit mask of f_flag values */
0000000000000000000000000000000000000000;;		Namemax uint64 /* maximum filename length */
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TotalSpace calculates the amount of total space in a filesystem.
0000000000000000000000000000000000000000;;	func (p *StatVFS) TotalSpace() uint64 {
0000000000000000000000000000000000000000;;		return p.Frsize * p.Blocks
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FreeSpace calculates the amount of free space in a filesystem.
0000000000000000000000000000000000000000;;	func (p *StatVFS) FreeSpace() uint64 {
0000000000000000000000000000000000000000;;		return p.Frsize * p.Bfree
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Convert to ssh_FXP_EXTENDED_REPLY packet binary format
0000000000000000000000000000000000000000;;	func (p *StatVFS) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		buf.Write([]byte{ssh_FXP_EXTENDED_REPLY})
0000000000000000000000000000000000000000;;		err := binary.Write(&buf, binary.BigEndian, p)
0000000000000000000000000000000000000000;;		return buf.Bytes(), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpExtendedPacket struct {
0000000000000000000000000000000000000000;;		ID              uint32
0000000000000000000000000000000000000000;;		ExtendedRequest string
0000000000000000000000000000000000000000;;		SpecificPacket  interface {
0000000000000000000000000000000000000000;;			serverRespondablePacket
0000000000000000000000000000000000000000;;			readonly() bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpExtendedPacket) id() uint32     { return p.ID }
0000000000000000000000000000000000000000;;	func (p sshFxpExtendedPacket) readonly() bool { return p.SpecificPacket.readonly() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpExtendedPacket) respond(svr *Server) error {
0000000000000000000000000000000000000000;;		return p.SpecificPacket.respond(svr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *sshFxpExtendedPacket) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		bOrig := b
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.ExtendedRequest, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// specific unmarshalling
0000000000000000000000000000000000000000;;		switch p.ExtendedRequest {
0000000000000000000000000000000000000000;;		case "statvfs@openssh.com":
0000000000000000000000000000000000000000;;			p.SpecificPacket = &sshFxpExtendedPacketStatVFS{}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnknownExtendedPacket
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return p.SpecificPacket.UnmarshalBinary(bOrig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sshFxpExtendedPacketStatVFS struct {
0000000000000000000000000000000000000000;;		ID              uint32
0000000000000000000000000000000000000000;;		ExtendedRequest string
0000000000000000000000000000000000000000;;		Path            string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p sshFxpExtendedPacketStatVFS) id() uint32     { return p.ID }
0000000000000000000000000000000000000000;;	func (p sshFxpExtendedPacketStatVFS) readonly() bool { return true }
0000000000000000000000000000000000000000;;	func (p *sshFxpExtendedPacketStatVFS) UnmarshalBinary(b []byte) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if p.ID, b, err = unmarshalUint32Safe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.ExtendedRequest, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if p.Path, b, err = unmarshalStringSafe(b); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
