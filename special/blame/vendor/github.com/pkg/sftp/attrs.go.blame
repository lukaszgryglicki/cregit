0000000000000000000000000000000000000000;;	package sftp
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	// ssh_FXP_ATTRS support
0000000000000000000000000000000000000000;;	// see http://tools.ietf.org/html/draft-ietf-secsh-filexfer-02#section-5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ssh_FILEXFER_ATTR_SIZE        = 0x00000001
0000000000000000000000000000000000000000;;		ssh_FILEXFER_ATTR_UIDGID      = 0x00000002
0000000000000000000000000000000000000000;;		ssh_FILEXFER_ATTR_PERMISSIONS = 0x00000004
0000000000000000000000000000000000000000;;		ssh_FILEXFER_ATTR_ACMODTIME   = 0x00000008
0000000000000000000000000000000000000000;;		ssh_FILEXFER_ATTR_EXTENDED    = 0x80000000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fileInfo is an artificial type designed to satisfy os.FileInfo.
0000000000000000000000000000000000000000;;	type fileInfo struct {
0000000000000000000000000000000000000000;;		name  string
0000000000000000000000000000000000000000;;		size  int64
0000000000000000000000000000000000000000;;		mode  os.FileMode
0000000000000000000000000000000000000000;;		mtime time.Time
0000000000000000000000000000000000000000;;		sys   interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name returns the base name of the file.
0000000000000000000000000000000000000000;;	func (fi *fileInfo) Name() string { return fi.name }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Size returns the length in bytes for regular files; system-dependent for others.
0000000000000000000000000000000000000000;;	func (fi *fileInfo) Size() int64 { return fi.size }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mode returns file mode bits.
0000000000000000000000000000000000000000;;	func (fi *fileInfo) Mode() os.FileMode { return fi.mode }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModTime returns the last modification time of the file.
0000000000000000000000000000000000000000;;	func (fi *fileInfo) ModTime() time.Time { return fi.mtime }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsDir returns true if the file is a directory.
0000000000000000000000000000000000000000;;	func (fi *fileInfo) IsDir() bool { return fi.Mode().IsDir() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fi *fileInfo) Sys() interface{} { return fi.sys }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileStat holds the original unmarshalled values from a call to READDIR or *STAT.
0000000000000000000000000000000000000000;;	// It is exported for the purposes of accessing the raw values via os.FileInfo.Sys()
0000000000000000000000000000000000000000;;	type FileStat struct {
0000000000000000000000000000000000000000;;		Size     uint64
0000000000000000000000000000000000000000;;		Mode     uint32
0000000000000000000000000000000000000000;;		Mtime    uint32
0000000000000000000000000000000000000000;;		Atime    uint32
0000000000000000000000000000000000000000;;		UID      uint32
0000000000000000000000000000000000000000;;		GID      uint32
0000000000000000000000000000000000000000;;		Extended []StatExtended
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatExtended contains additional, extended information for a FileStat.
0000000000000000000000000000000000000000;;	type StatExtended struct {
0000000000000000000000000000000000000000;;		ExtType string
0000000000000000000000000000000000000000;;		ExtData string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fileInfoFromStat(st *FileStat, name string) os.FileInfo {
0000000000000000000000000000000000000000;;		fs := &fileInfo{
0000000000000000000000000000000000000000;;			name:  name,
0000000000000000000000000000000000000000;;			size:  int64(st.Size),
0000000000000000000000000000000000000000;;			mode:  toFileMode(st.Mode),
0000000000000000000000000000000000000000;;			mtime: time.Unix(int64(st.Mtime), 0),
0000000000000000000000000000000000000000;;			sys:   st,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fileStatFromInfo(fi os.FileInfo) (uint32, FileStat) {
0000000000000000000000000000000000000000;;		mtime := fi.ModTime().Unix()
0000000000000000000000000000000000000000;;		atime := mtime
0000000000000000000000000000000000000000;;		var flags uint32 = ssh_FILEXFER_ATTR_SIZE |
0000000000000000000000000000000000000000;;			ssh_FILEXFER_ATTR_PERMISSIONS |
0000000000000000000000000000000000000000;;			ssh_FILEXFER_ATTR_ACMODTIME
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fileStat := FileStat{
0000000000000000000000000000000000000000;;			Size:  uint64(fi.Size()),
0000000000000000000000000000000000000000;;			Mode:  fromFileMode(fi.Mode()),
0000000000000000000000000000000000000000;;			Mtime: uint32(mtime),
0000000000000000000000000000000000000000;;			Atime: uint32(atime),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// os specific file stat decoding
0000000000000000000000000000000000000000;;		fileStatFromInfoOs(fi, &flags, &fileStat)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return flags, fileStat
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalAttrs(b []byte) (*FileStat, []byte) {
0000000000000000000000000000000000000000;;		flags, b := unmarshalUint32(b)
0000000000000000000000000000000000000000;;		var fs FileStat
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_SIZE == ssh_FILEXFER_ATTR_SIZE {
0000000000000000000000000000000000000000;;			fs.Size, b = unmarshalUint64(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_UIDGID == ssh_FILEXFER_ATTR_UIDGID {
0000000000000000000000000000000000000000;;			fs.UID, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_UIDGID == ssh_FILEXFER_ATTR_UIDGID {
0000000000000000000000000000000000000000;;			fs.GID, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_PERMISSIONS == ssh_FILEXFER_ATTR_PERMISSIONS {
0000000000000000000000000000000000000000;;			fs.Mode, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_ACMODTIME == ssh_FILEXFER_ATTR_ACMODTIME {
0000000000000000000000000000000000000000;;			fs.Atime, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;			fs.Mtime, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_EXTENDED == ssh_FILEXFER_ATTR_EXTENDED {
0000000000000000000000000000000000000000;;			var count uint32
0000000000000000000000000000000000000000;;			count, b = unmarshalUint32(b)
0000000000000000000000000000000000000000;;			ext := make([]StatExtended, count, count)
0000000000000000000000000000000000000000;;			for i := uint32(0); i < count; i++ {
0000000000000000000000000000000000000000;;				var typ string
0000000000000000000000000000000000000000;;				var data string
0000000000000000000000000000000000000000;;				typ, b = unmarshalString(b)
0000000000000000000000000000000000000000;;				data, b = unmarshalString(b)
0000000000000000000000000000000000000000;;				ext[i] = StatExtended{typ, data}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fs.Extended = ext
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &fs, b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalFileInfo(b []byte, fi os.FileInfo) []byte {
0000000000000000000000000000000000000000;;		// attributes variable struct, and also variable per protocol version
0000000000000000000000000000000000000000;;		// spec version 3 attributes:
0000000000000000000000000000000000000000;;		// uint32   flags
0000000000000000000000000000000000000000;;		// uint64   size           present only if flag SSH_FILEXFER_ATTR_SIZE
0000000000000000000000000000000000000000;;		// uint32   uid            present only if flag SSH_FILEXFER_ATTR_UIDGID
0000000000000000000000000000000000000000;;		// uint32   gid            present only if flag SSH_FILEXFER_ATTR_UIDGID
0000000000000000000000000000000000000000;;		// uint32   permissions    present only if flag SSH_FILEXFER_ATTR_PERMISSIONS
0000000000000000000000000000000000000000;;		// uint32   atime          present only if flag SSH_FILEXFER_ACMODTIME
0000000000000000000000000000000000000000;;		// uint32   mtime          present only if flag SSH_FILEXFER_ACMODTIME
0000000000000000000000000000000000000000;;		// uint32   extended_count present only if flag SSH_FILEXFER_ATTR_EXTENDED
0000000000000000000000000000000000000000;;		// string   extended_type
0000000000000000000000000000000000000000;;		// string   extended_data
0000000000000000000000000000000000000000;;		// ...      more extended data (extended_type - extended_data pairs),
0000000000000000000000000000000000000000;;		// 	   so that number of pairs equals extended_count
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flags, fileStat := fileStatFromInfo(fi)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b = marshalUint32(b, flags)
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_SIZE != 0 {
0000000000000000000000000000000000000000;;			b = marshalUint64(b, fileStat.Size)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_UIDGID != 0 {
0000000000000000000000000000000000000000;;			b = marshalUint32(b, fileStat.UID)
0000000000000000000000000000000000000000;;			b = marshalUint32(b, fileStat.GID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_PERMISSIONS != 0 {
0000000000000000000000000000000000000000;;			b = marshalUint32(b, fileStat.Mode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags&ssh_FILEXFER_ATTR_ACMODTIME != 0 {
0000000000000000000000000000000000000000;;			b = marshalUint32(b, fileStat.Atime)
0000000000000000000000000000000000000000;;			b = marshalUint32(b, fileStat.Mtime)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// toFileMode converts sftp filemode bits to the os.FileMode specification
0000000000000000000000000000000000000000;;	func toFileMode(mode uint32) os.FileMode {
0000000000000000000000000000000000000000;;		var fm = os.FileMode(mode & 0777)
0000000000000000000000000000000000000000;;		switch mode & syscall.S_IFMT {
0000000000000000000000000000000000000000;;		case syscall.S_IFBLK:
0000000000000000000000000000000000000000;;			fm |= os.ModeDevice
0000000000000000000000000000000000000000;;		case syscall.S_IFCHR:
0000000000000000000000000000000000000000;;			fm |= os.ModeDevice | os.ModeCharDevice
0000000000000000000000000000000000000000;;		case syscall.S_IFDIR:
0000000000000000000000000000000000000000;;			fm |= os.ModeDir
0000000000000000000000000000000000000000;;		case syscall.S_IFIFO:
0000000000000000000000000000000000000000;;			fm |= os.ModeNamedPipe
0000000000000000000000000000000000000000;;		case syscall.S_IFLNK:
0000000000000000000000000000000000000000;;			fm |= os.ModeSymlink
0000000000000000000000000000000000000000;;		case syscall.S_IFREG:
0000000000000000000000000000000000000000;;			// nothing to do
0000000000000000000000000000000000000000;;		case syscall.S_IFSOCK:
0000000000000000000000000000000000000000;;			fm |= os.ModeSocket
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&syscall.S_ISGID != 0 {
0000000000000000000000000000000000000000;;			fm |= os.ModeSetgid
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&syscall.S_ISUID != 0 {
0000000000000000000000000000000000000000;;			fm |= os.ModeSetuid
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&syscall.S_ISVTX != 0 {
0000000000000000000000000000000000000000;;			fm |= os.ModeSticky
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fm
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fromFileMode converts from the os.FileMode specification to sftp filemode bits
0000000000000000000000000000000000000000;;	func fromFileMode(mode os.FileMode) uint32 {
0000000000000000000000000000000000000000;;		ret := uint32(0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if mode&os.ModeDevice != 0 {
0000000000000000000000000000000000000000;;			if mode&os.ModeCharDevice != 0 {
0000000000000000000000000000000000000000;;				ret |= syscall.S_IFCHR
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				ret |= syscall.S_IFBLK
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeDir != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_IFDIR
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeSymlink != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_IFLNK
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeNamedPipe != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_IFIFO
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeSetgid != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_ISGID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeSetuid != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_ISUID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeSticky != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_ISVTX
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mode&os.ModeSocket != 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_IFSOCK
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if mode&os.ModeType == 0 {
0000000000000000000000000000000000000000;;			ret |= syscall.S_IFREG
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret |= uint32(mode & os.ModePerm)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
