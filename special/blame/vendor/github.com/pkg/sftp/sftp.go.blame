0000000000000000000000000000000000000000;;	// Package sftp implements the SSH File Transfer Protocol as described in
0000000000000000000000000000000000000000;;	// https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt
0000000000000000000000000000000000000000;;	package sftp
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/pkg/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ssh_FXP_INIT           = 1
0000000000000000000000000000000000000000;;		ssh_FXP_VERSION        = 2
0000000000000000000000000000000000000000;;		ssh_FXP_OPEN           = 3
0000000000000000000000000000000000000000;;		ssh_FXP_CLOSE          = 4
0000000000000000000000000000000000000000;;		ssh_FXP_READ           = 5
0000000000000000000000000000000000000000;;		ssh_FXP_WRITE          = 6
0000000000000000000000000000000000000000;;		ssh_FXP_LSTAT          = 7
0000000000000000000000000000000000000000;;		ssh_FXP_FSTAT          = 8
0000000000000000000000000000000000000000;;		ssh_FXP_SETSTAT        = 9
0000000000000000000000000000000000000000;;		ssh_FXP_FSETSTAT       = 10
0000000000000000000000000000000000000000;;		ssh_FXP_OPENDIR        = 11
0000000000000000000000000000000000000000;;		ssh_FXP_READDIR        = 12
0000000000000000000000000000000000000000;;		ssh_FXP_REMOVE         = 13
0000000000000000000000000000000000000000;;		ssh_FXP_MKDIR          = 14
0000000000000000000000000000000000000000;;		ssh_FXP_RMDIR          = 15
0000000000000000000000000000000000000000;;		ssh_FXP_REALPATH       = 16
0000000000000000000000000000000000000000;;		ssh_FXP_STAT           = 17
0000000000000000000000000000000000000000;;		ssh_FXP_RENAME         = 18
0000000000000000000000000000000000000000;;		ssh_FXP_READLINK       = 19
0000000000000000000000000000000000000000;;		ssh_FXP_SYMLINK        = 20
0000000000000000000000000000000000000000;;		ssh_FXP_STATUS         = 101
0000000000000000000000000000000000000000;;		ssh_FXP_HANDLE         = 102
0000000000000000000000000000000000000000;;		ssh_FXP_DATA           = 103
0000000000000000000000000000000000000000;;		ssh_FXP_NAME           = 104
0000000000000000000000000000000000000000;;		ssh_FXP_ATTRS          = 105
0000000000000000000000000000000000000000;;		ssh_FXP_EXTENDED       = 200
0000000000000000000000000000000000000000;;		ssh_FXP_EXTENDED_REPLY = 201
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ssh_FX_OK                = 0
0000000000000000000000000000000000000000;;		ssh_FX_EOF               = 1
0000000000000000000000000000000000000000;;		ssh_FX_NO_SUCH_FILE      = 2
0000000000000000000000000000000000000000;;		ssh_FX_PERMISSION_DENIED = 3
0000000000000000000000000000000000000000;;		ssh_FX_FAILURE           = 4
0000000000000000000000000000000000000000;;		ssh_FX_BAD_MESSAGE       = 5
0000000000000000000000000000000000000000;;		ssh_FX_NO_CONNECTION     = 6
0000000000000000000000000000000000000000;;		ssh_FX_CONNECTION_LOST   = 7
0000000000000000000000000000000000000000;;		ssh_FX_OP_UNSUPPORTED    = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// see draft-ietf-secsh-filexfer-13
0000000000000000000000000000000000000000;;		// https://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#section-9.1
0000000000000000000000000000000000000000;;		ssh_FX_INVALID_HANDLE              = 9
0000000000000000000000000000000000000000;;		ssh_FX_NO_SUCH_PATH                = 10
0000000000000000000000000000000000000000;;		ssh_FX_FILE_ALREADY_EXISTS         = 11
0000000000000000000000000000000000000000;;		ssh_FX_WRITE_PROTECT               = 12
0000000000000000000000000000000000000000;;		ssh_FX_NO_MEDIA                    = 13
0000000000000000000000000000000000000000;;		ssh_FX_NO_SPACE_ON_FILESYSTEM      = 14
0000000000000000000000000000000000000000;;		ssh_FX_QUOTA_EXCEEDED              = 15
0000000000000000000000000000000000000000;;		ssh_FX_UNKNOWN_PRINCIPAL           = 16
0000000000000000000000000000000000000000;;		ssh_FX_LOCK_CONFLICT               = 17
0000000000000000000000000000000000000000;;		ssh_FX_DIR_NOT_EMPTY               = 18
0000000000000000000000000000000000000000;;		ssh_FX_NOT_A_DIRECTORY             = 19
0000000000000000000000000000000000000000;;		ssh_FX_INVALID_FILENAME            = 20
0000000000000000000000000000000000000000;;		ssh_FX_LINK_LOOP                   = 21
0000000000000000000000000000000000000000;;		ssh_FX_CANNOT_DELETE               = 22
0000000000000000000000000000000000000000;;		ssh_FX_INVALID_PARAMETER           = 23
0000000000000000000000000000000000000000;;		ssh_FX_FILE_IS_A_DIRECTORY         = 24
0000000000000000000000000000000000000000;;		ssh_FX_BYTE_RANGE_LOCK_CONFLICT    = 25
0000000000000000000000000000000000000000;;		ssh_FX_BYTE_RANGE_LOCK_REFUSED     = 26
0000000000000000000000000000000000000000;;		ssh_FX_DELETE_PENDING              = 27
0000000000000000000000000000000000000000;;		ssh_FX_FILE_CORRUPT                = 28
0000000000000000000000000000000000000000;;		ssh_FX_OWNER_INVALID               = 29
0000000000000000000000000000000000000000;;		ssh_FX_GROUP_INVALID               = 30
0000000000000000000000000000000000000000;;		ssh_FX_NO_MATCHING_BYTE_RANGE_LOCK = 31
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ssh_FXF_READ   = 0x00000001
0000000000000000000000000000000000000000;;		ssh_FXF_WRITE  = 0x00000002
0000000000000000000000000000000000000000;;		ssh_FXF_APPEND = 0x00000004
0000000000000000000000000000000000000000;;		ssh_FXF_CREAT  = 0x00000008
0000000000000000000000000000000000000000;;		ssh_FXF_TRUNC  = 0x00000010
0000000000000000000000000000000000000000;;		ssh_FXF_EXCL   = 0x00000020
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fxp uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f fxp) String() string {
0000000000000000000000000000000000000000;;		switch f {
0000000000000000000000000000000000000000;;		case ssh_FXP_INIT:
0000000000000000000000000000000000000000;;			return "SSH_FXP_INIT"
0000000000000000000000000000000000000000;;		case ssh_FXP_VERSION:
0000000000000000000000000000000000000000;;			return "SSH_FXP_VERSION"
0000000000000000000000000000000000000000;;		case ssh_FXP_OPEN:
0000000000000000000000000000000000000000;;			return "SSH_FXP_OPEN"
0000000000000000000000000000000000000000;;		case ssh_FXP_CLOSE:
0000000000000000000000000000000000000000;;			return "SSH_FXP_CLOSE"
0000000000000000000000000000000000000000;;		case ssh_FXP_READ:
0000000000000000000000000000000000000000;;			return "SSH_FXP_READ"
0000000000000000000000000000000000000000;;		case ssh_FXP_WRITE:
0000000000000000000000000000000000000000;;			return "SSH_FXP_WRITE"
0000000000000000000000000000000000000000;;		case ssh_FXP_LSTAT:
0000000000000000000000000000000000000000;;			return "SSH_FXP_LSTAT"
0000000000000000000000000000000000000000;;		case ssh_FXP_FSTAT:
0000000000000000000000000000000000000000;;			return "SSH_FXP_FSTAT"
0000000000000000000000000000000000000000;;		case ssh_FXP_SETSTAT:
0000000000000000000000000000000000000000;;			return "SSH_FXP_SETSTAT"
0000000000000000000000000000000000000000;;		case ssh_FXP_FSETSTAT:
0000000000000000000000000000000000000000;;			return "SSH_FXP_FSETSTAT"
0000000000000000000000000000000000000000;;		case ssh_FXP_OPENDIR:
0000000000000000000000000000000000000000;;			return "SSH_FXP_OPENDIR"
0000000000000000000000000000000000000000;;		case ssh_FXP_READDIR:
0000000000000000000000000000000000000000;;			return "SSH_FXP_READDIR"
0000000000000000000000000000000000000000;;		case ssh_FXP_REMOVE:
0000000000000000000000000000000000000000;;			return "SSH_FXP_REMOVE"
0000000000000000000000000000000000000000;;		case ssh_FXP_MKDIR:
0000000000000000000000000000000000000000;;			return "SSH_FXP_MKDIR"
0000000000000000000000000000000000000000;;		case ssh_FXP_RMDIR:
0000000000000000000000000000000000000000;;			return "SSH_FXP_RMDIR"
0000000000000000000000000000000000000000;;		case ssh_FXP_REALPATH:
0000000000000000000000000000000000000000;;			return "SSH_FXP_REALPATH"
0000000000000000000000000000000000000000;;		case ssh_FXP_STAT:
0000000000000000000000000000000000000000;;			return "SSH_FXP_STAT"
0000000000000000000000000000000000000000;;		case ssh_FXP_RENAME:
0000000000000000000000000000000000000000;;			return "SSH_FXP_RENAME"
0000000000000000000000000000000000000000;;		case ssh_FXP_READLINK:
0000000000000000000000000000000000000000;;			return "SSH_FXP_READLINK"
0000000000000000000000000000000000000000;;		case ssh_FXP_SYMLINK:
0000000000000000000000000000000000000000;;			return "SSH_FXP_SYMLINK"
0000000000000000000000000000000000000000;;		case ssh_FXP_STATUS:
0000000000000000000000000000000000000000;;			return "SSH_FXP_STATUS"
0000000000000000000000000000000000000000;;		case ssh_FXP_HANDLE:
0000000000000000000000000000000000000000;;			return "SSH_FXP_HANDLE"
0000000000000000000000000000000000000000;;		case ssh_FXP_DATA:
0000000000000000000000000000000000000000;;			return "SSH_FXP_DATA"
0000000000000000000000000000000000000000;;		case ssh_FXP_NAME:
0000000000000000000000000000000000000000;;			return "SSH_FXP_NAME"
0000000000000000000000000000000000000000;;		case ssh_FXP_ATTRS:
0000000000000000000000000000000000000000;;			return "SSH_FXP_ATTRS"
0000000000000000000000000000000000000000;;		case ssh_FXP_EXTENDED:
0000000000000000000000000000000000000000;;			return "SSH_FXP_EXTENDED"
0000000000000000000000000000000000000000;;		case ssh_FXP_EXTENDED_REPLY:
0000000000000000000000000000000000000000;;			return "SSH_FXP_EXTENDED_REPLY"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "unknown"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fx uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f fx) String() string {
0000000000000000000000000000000000000000;;		switch f {
0000000000000000000000000000000000000000;;		case ssh_FX_OK:
0000000000000000000000000000000000000000;;			return "SSH_FX_OK"
0000000000000000000000000000000000000000;;		case ssh_FX_EOF:
0000000000000000000000000000000000000000;;			return "SSH_FX_EOF"
0000000000000000000000000000000000000000;;		case ssh_FX_NO_SUCH_FILE:
0000000000000000000000000000000000000000;;			return "SSH_FX_NO_SUCH_FILE"
0000000000000000000000000000000000000000;;		case ssh_FX_PERMISSION_DENIED:
0000000000000000000000000000000000000000;;			return "SSH_FX_PERMISSION_DENIED"
0000000000000000000000000000000000000000;;		case ssh_FX_FAILURE:
0000000000000000000000000000000000000000;;			return "SSH_FX_FAILURE"
0000000000000000000000000000000000000000;;		case ssh_FX_BAD_MESSAGE:
0000000000000000000000000000000000000000;;			return "SSH_FX_BAD_MESSAGE"
0000000000000000000000000000000000000000;;		case ssh_FX_NO_CONNECTION:
0000000000000000000000000000000000000000;;			return "SSH_FX_NO_CONNECTION"
0000000000000000000000000000000000000000;;		case ssh_FX_CONNECTION_LOST:
0000000000000000000000000000000000000000;;			return "SSH_FX_CONNECTION_LOST"
0000000000000000000000000000000000000000;;		case ssh_FX_OP_UNSUPPORTED:
0000000000000000000000000000000000000000;;			return "SSH_FX_OP_UNSUPPORTED"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "unknown"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type unexpectedPacketErr struct {
0000000000000000000000000000000000000000;;		want, got uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *unexpectedPacketErr) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("sftp: unexpected packet: want %v, got %v", fxp(u.want), fxp(u.got))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unimplementedPacketErr(u uint8) error {
0000000000000000000000000000000000000000;;		return errors.Errorf("sftp: unimplemented packet type: got %v", fxp(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type unexpectedIDErr struct{ want, got uint32 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *unexpectedIDErr) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("sftp: unexpected id: want %v, got %v", u.want, u.got)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unimplementedSeekWhence(whence int) error {
0000000000000000000000000000000000000000;;		return errors.Errorf("sftp: unimplemented seek whence %v", whence)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unexpectedCount(want, got uint32) error {
0000000000000000000000000000000000000000;;		return errors.Errorf("sftp: unexpected count: want %v, got %v", want, got)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type unexpectedVersionErr struct{ want, got uint32 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *unexpectedVersionErr) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("sftp: unexpected server version: want %v, got %v", u.want, u.got)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A StatusError is returned when an SFTP operation fails, and provides
0000000000000000000000000000000000000000;;	// additional information about the failure.
0000000000000000000000000000000000000000;;	type StatusError struct {
0000000000000000000000000000000000000000;;		Code      uint32
0000000000000000000000000000000000000000;;		msg, lang string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *StatusError) Error() string { return fmt.Sprintf("sftp: %q (%v)", s.msg, fx(s.Code)) }
