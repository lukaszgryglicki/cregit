0000000000000000000000000000000000000000;;	// Copyright 2016 Frank Schroeder. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package properties
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// make this a var to overwrite it in a test
0000000000000000000000000000000000000000;;	var is32Bit = ^uint(0) == math.MaxUint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// intRangeCheck checks if the value fits into the int type and
0000000000000000000000000000000000000000;;	// panics if it does not.
0000000000000000000000000000000000000000;;	func intRangeCheck(key string, v int64) int {
0000000000000000000000000000000000000000;;		if is32Bit && (v < math.MinInt32 || v > math.MaxInt32) {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Value %d for key %s out of range", v, key))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// uintRangeCheck checks if the value fits into the uint type and
0000000000000000000000000000000000000000;;	// panics if it does not.
0000000000000000000000000000000000000000;;	func uintRangeCheck(key string, v uint64) uint {
0000000000000000000000000000000000000000;;		if is32Bit && v > math.MaxUint32 {
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Value %d for key %s out of range", v, key))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint(v)
0000000000000000000000000000000000000000;;	}
