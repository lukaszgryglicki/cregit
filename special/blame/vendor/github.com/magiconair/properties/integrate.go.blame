0000000000000000000000000000000000000000;;	// Copyright 2016 Frank Schroeder. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package properties
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "flag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MustFlag sets flags that are skipped by dst.Parse when p contains
0000000000000000000000000000000000000000;;	// the respective key for flag.Flag.Name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It's use is recommended with command line arguments as in:
0000000000000000000000000000000000000000;;	// 	flag.Parse()
0000000000000000000000000000000000000000;;	// 	p.MustFlag(flag.CommandLine)
0000000000000000000000000000000000000000;;	func (p *Properties) MustFlag(dst *flag.FlagSet) {
0000000000000000000000000000000000000000;;		m := make(map[string]*flag.Flag)
0000000000000000000000000000000000000000;;		dst.VisitAll(func(f *flag.Flag) {
0000000000000000000000000000000000000000;;			m[f.Name] = f
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		dst.Visit(func(f *flag.Flag) {
0000000000000000000000000000000000000000;;			delete(m, f.Name) // overridden
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, f := range m {
0000000000000000000000000000000000000000;;			v, ok := p.Get(name)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := f.Value.Set(v); err != nil {
0000000000000000000000000000000000000000;;				ErrorHandler(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
