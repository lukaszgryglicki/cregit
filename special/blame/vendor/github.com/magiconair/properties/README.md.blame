0000000000000000000000000000000000000000;;	Overview [![Build Status](https://travis-ci.org/magiconair/properties.svg?branch=master)](https://travis-ci.org/magiconair/properties)
0000000000000000000000000000000000000000;;	========
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Current version: 1.7.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	properties is a Go library for reading and writing properties files.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It supports reading from multiple files or URLs and Spring style recursive
0000000000000000000000000000000000000000;;	property expansion of expressions like `${key}` to their corresponding value.
0000000000000000000000000000000000000000;;	Value expressions can refer to other keys like in `${key}` or to environment
0000000000000000000000000000000000000000;;	variables like in `${USER}`.  Filenames can also contain environment variables
0000000000000000000000000000000000000000;;	like in `/home/${USER}/myapp.properties`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Properties can be decoded into structs, maps, arrays and values through
0000000000000000000000000000000000000000;;	struct tags.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Comments and the order of keys are preserved. Comments can be modified
0000000000000000000000000000000000000000;;	and can be written to the output.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The properties library supports both ISO-8859-1 and UTF-8 encoded data.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Starting from version 1.3.0 the behavior of the MustXXX() functions is
0000000000000000000000000000000000000000;;	configurable by providing a custom `ErrorHandler` function. The default has
0000000000000000000000000000000000000000;;	changed from `panic` to `log.Fatal` but this is configurable and custom
0000000000000000000000000000000000000000;;	error handling functions can be provided. See the package documentation for
0000000000000000000000000000000000000000;;	details.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Getting Started
0000000000000000000000000000000000000000;;	---------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"github.com/magiconair/properties"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		p := properties.MustLoadFile("${HOME}/config.properties", properties.UTF8)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// via getters
0000000000000000000000000000000000000000;;		host := p.MustGetString("host")
0000000000000000000000000000000000000000;;		port := p.GetInt("port", 8080)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// or via decode
0000000000000000000000000000000000000000;;		type Config struct {
0000000000000000000000000000000000000000;;			Host    string        `properties:"host"`
0000000000000000000000000000000000000000;;			Port    int           `properties:"port,default=9000"`
0000000000000000000000000000000000000000;;			Accept  []string      `properties:"accept,default=image/png;image;gif"`
0000000000000000000000000000000000000000;;			Timeout time.Duration `properties:"timeout,default=5s"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var cfg Config
0000000000000000000000000000000000000000;;		if err := p.Decode(&cfg); err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// or via flags
0000000000000000000000000000000000000000;;		p.MustFlag(flag.CommandLine)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// or via url
0000000000000000000000000000000000000000;;		p = properties.MustLoadURL("http://host/path")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Read the full documentation on [GoDoc](https://godoc.org/github.com/magiconair/properties)   [![GoDoc](https://godoc.org/github.com/magiconair/properties?status.png)](https://godoc.org/github.com/magiconair/properties)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Installation and Upgrade
0000000000000000000000000000000000000000;;	------------------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	$ go get -u github.com/magiconair/properties
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	License
0000000000000000000000000000000000000000;;	-------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	2 clause BSD license. See [LICENSE](https://github.com/magiconair/properties/blob/master/LICENSE) file for details.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ToDo
0000000000000000000000000000000000000000;;	----
0000000000000000000000000000000000000000;;	* Dump contents with passwords and secrets obscured
