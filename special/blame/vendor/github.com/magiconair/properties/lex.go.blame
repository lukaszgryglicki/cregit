0000000000000000000000000000000000000000;;	// Copyright 2016 Frank Schroeder. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Parts of the lexer are from the template/text/parser package
0000000000000000000000000000000000000000;;	// For these parts the following applies:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file of the go 1.2
0000000000000000000000000000000000000000;;	// distribution.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package properties
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// item represents a token or text string returned from the scanner.
0000000000000000000000000000000000000000;;	type item struct {
0000000000000000000000000000000000000000;;		typ itemType // The type of this item.
0000000000000000000000000000000000000000;;		pos int      // The starting position, in bytes, of this item in the input string.
0000000000000000000000000000000000000000;;		val string   // The value of this item.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i item) String() string {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case i.typ == itemEOF:
0000000000000000000000000000000000000000;;			return "EOF"
0000000000000000000000000000000000000000;;		case i.typ == itemError:
0000000000000000000000000000000000000000;;			return i.val
0000000000000000000000000000000000000000;;		case len(i.val) > 10:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%.10q...", i.val)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%q", i.val)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// itemType identifies the type of lex items.
0000000000000000000000000000000000000000;;	type itemType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		itemError itemType = iota // error occurred; value is text of error
0000000000000000000000000000000000000000;;		itemEOF
0000000000000000000000000000000000000000;;		itemKey     // a key
0000000000000000000000000000000000000000;;		itemValue   // a value
0000000000000000000000000000000000000000;;		itemComment // a comment
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defines a constant for EOF
0000000000000000000000000000000000000000;;	const eof = -1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// permitted whitespace characters space, FF and TAB
0000000000000000000000000000000000000000;;	const whitespace = " \f\t"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stateFn represents the state of the scanner as a function that returns the next state.
0000000000000000000000000000000000000000;;	type stateFn func(*lexer) stateFn
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lexer holds the state of the scanner.
0000000000000000000000000000000000000000;;	type lexer struct {
0000000000000000000000000000000000000000;;		input   string    // the string being scanned
0000000000000000000000000000000000000000;;		state   stateFn   // the next lexing function to enter
0000000000000000000000000000000000000000;;		pos     int       // current position in the input
0000000000000000000000000000000000000000;;		start   int       // start position of this item
0000000000000000000000000000000000000000;;		width   int       // width of last rune read from input
0000000000000000000000000000000000000000;;		lastPos int       // position of most recent item returned by nextItem
0000000000000000000000000000000000000000;;		runes   []rune    // scanned runes for this item
0000000000000000000000000000000000000000;;		items   chan item // channel of scanned items
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// next returns the next rune in the input.
0000000000000000000000000000000000000000;;	func (l *lexer) next() rune {
0000000000000000000000000000000000000000;;		if int(l.pos) >= len(l.input) {
0000000000000000000000000000000000000000;;			l.width = 0
0000000000000000000000000000000000000000;;			return eof
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, w := utf8.DecodeRuneInString(l.input[l.pos:])
0000000000000000000000000000000000000000;;		l.width = w
0000000000000000000000000000000000000000;;		l.pos += l.width
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// peek returns but does not consume the next rune in the input.
0000000000000000000000000000000000000000;;	func (l *lexer) peek() rune {
0000000000000000000000000000000000000000;;		r := l.next()
0000000000000000000000000000000000000000;;		l.backup()
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// backup steps back one rune. Can only be called once per call of next.
0000000000000000000000000000000000000000;;	func (l *lexer) backup() {
0000000000000000000000000000000000000000;;		l.pos -= l.width
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// emit passes an item back to the client.
0000000000000000000000000000000000000000;;	func (l *lexer) emit(t itemType) {
0000000000000000000000000000000000000000;;		item := item{t, l.start, string(l.runes)}
0000000000000000000000000000000000000000;;		l.items <- item
0000000000000000000000000000000000000000;;		l.start = l.pos
0000000000000000000000000000000000000000;;		l.runes = l.runes[:0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ignore skips over the pending input before this point.
0000000000000000000000000000000000000000;;	func (l *lexer) ignore() {
0000000000000000000000000000000000000000;;		l.start = l.pos
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// appends the rune to the current value
0000000000000000000000000000000000000000;;	func (l *lexer) appendRune(r rune) {
0000000000000000000000000000000000000000;;		l.runes = append(l.runes, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// accept consumes the next rune if it's from the valid set.
0000000000000000000000000000000000000000;;	func (l *lexer) accept(valid string) bool {
0000000000000000000000000000000000000000;;		if strings.IndexRune(valid, l.next()) >= 0 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l.backup()
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// acceptRun consumes a run of runes from the valid set.
0000000000000000000000000000000000000000;;	func (l *lexer) acceptRun(valid string) {
0000000000000000000000000000000000000000;;		for strings.IndexRune(valid, l.next()) >= 0 {
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l.backup()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// acceptRunUntil consumes a run of runes up to a terminator.
0000000000000000000000000000000000000000;;	func (l *lexer) acceptRunUntil(term rune) {
0000000000000000000000000000000000000000;;		for term != l.next() {
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l.backup()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// hasText returns true if the current parsed text is not empty.
0000000000000000000000000000000000000000;;	func (l *lexer) isNotEmpty() bool {
0000000000000000000000000000000000000000;;		return l.pos > l.start
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lineNumber reports which line we're on, based on the position of
0000000000000000000000000000000000000000;;	// the previous item returned by nextItem. Doing it this way
0000000000000000000000000000000000000000;;	// means we don't have to worry about peek double counting.
0000000000000000000000000000000000000000;;	func (l *lexer) lineNumber() int {
0000000000000000000000000000000000000000;;		return 1 + strings.Count(l.input[:l.lastPos], "\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errorf returns an error token and terminates the scan by passing
0000000000000000000000000000000000000000;;	// back a nil pointer that will be the next state, terminating l.nextItem.
0000000000000000000000000000000000000000;;	func (l *lexer) errorf(format string, args ...interface{}) stateFn {
0000000000000000000000000000000000000000;;		l.items <- item{itemError, l.start, fmt.Sprintf(format, args...)}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nextItem returns the next item from the input.
0000000000000000000000000000000000000000;;	func (l *lexer) nextItem() item {
0000000000000000000000000000000000000000;;		item := <-l.items
0000000000000000000000000000000000000000;;		l.lastPos = item.pos
0000000000000000000000000000000000000000;;		return item
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lex creates a new scanner for the input string.
0000000000000000000000000000000000000000;;	func lex(input string) *lexer {
0000000000000000000000000000000000000000;;		l := &lexer{
0000000000000000000000000000000000000000;;			input: input,
0000000000000000000000000000000000000000;;			items: make(chan item),
0000000000000000000000000000000000000000;;			runes: make([]rune, 0, 32),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go l.run()
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// run runs the state machine for the lexer.
0000000000000000000000000000000000000000;;	func (l *lexer) run() {
0000000000000000000000000000000000000000;;		for l.state = lexBeforeKey(l); l.state != nil; {
0000000000000000000000000000000000000000;;			l.state = l.state(l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// state functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lexBeforeKey scans until a key begins.
0000000000000000000000000000000000000000;;	func lexBeforeKey(l *lexer) stateFn {
0000000000000000000000000000000000000000;;		switch r := l.next(); {
0000000000000000000000000000000000000000;;		case isEOF(r):
0000000000000000000000000000000000000000;;			l.emit(itemEOF)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case isEOL(r):
0000000000000000000000000000000000000000;;			l.ignore()
0000000000000000000000000000000000000000;;			return lexBeforeKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case isComment(r):
0000000000000000000000000000000000000000;;			return lexComment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case isWhitespace(r):
0000000000000000000000000000000000000000;;			l.acceptRun(whitespace)
0000000000000000000000000000000000000000;;			l.ignore()
0000000000000000000000000000000000000000;;			return lexKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			l.backup()
0000000000000000000000000000000000000000;;			return lexKey
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lexComment scans a comment line. The comment character has already been scanned.
0000000000000000000000000000000000000000;;	func lexComment(l *lexer) stateFn {
0000000000000000000000000000000000000000;;		l.acceptRun(whitespace)
0000000000000000000000000000000000000000;;		l.ignore()
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			switch r := l.next(); {
0000000000000000000000000000000000000000;;			case isEOF(r):
0000000000000000000000000000000000000000;;				l.ignore()
0000000000000000000000000000000000000000;;				l.emit(itemEOF)
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			case isEOL(r):
0000000000000000000000000000000000000000;;				l.emit(itemComment)
0000000000000000000000000000000000000000;;				return lexBeforeKey
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				l.appendRune(r)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lexKey scans the key up to a delimiter
0000000000000000000000000000000000000000;;	func lexKey(l *lexer) stateFn {
0000000000000000000000000000000000000000;;		var r rune
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Loop:
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			switch r = l.next(); {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case isEscape(r):
0000000000000000000000000000000000000000;;				err := l.scanEscapeSequence()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return l.errorf(err.Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case isEndOfKey(r):
0000000000000000000000000000000000000000;;				l.backup()
0000000000000000000000000000000000000000;;				break Loop
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case isEOF(r):
0000000000000000000000000000000000000000;;				break Loop
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				l.appendRune(r)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(l.runes) > 0 {
0000000000000000000000000000000000000000;;			l.emit(itemKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isEOF(r) {
0000000000000000000000000000000000000000;;			l.emit(itemEOF)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return lexBeforeValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lexBeforeValue scans the delimiter between key and value.
0000000000000000000000000000000000000000;;	// Leading and trailing whitespace is ignored.
0000000000000000000000000000000000000000;;	// We expect to be just after the key.
0000000000000000000000000000000000000000;;	func lexBeforeValue(l *lexer) stateFn {
0000000000000000000000000000000000000000;;		l.acceptRun(whitespace)
0000000000000000000000000000000000000000;;		l.accept(":=")
0000000000000000000000000000000000000000;;		l.acceptRun(whitespace)
0000000000000000000000000000000000000000;;		l.ignore()
0000000000000000000000000000000000000000;;		return lexValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lexValue scans text until the end of the line. We expect to be just after the delimiter.
0000000000000000000000000000000000000000;;	func lexValue(l *lexer) stateFn {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			switch r := l.next(); {
0000000000000000000000000000000000000000;;			case isEscape(r):
0000000000000000000000000000000000000000;;				r := l.peek()
0000000000000000000000000000000000000000;;				if isEOL(r) {
0000000000000000000000000000000000000000;;					l.next()
0000000000000000000000000000000000000000;;					l.acceptRun(whitespace)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					err := l.scanEscapeSequence()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return l.errorf(err.Error())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case isEOL(r):
0000000000000000000000000000000000000000;;				l.emit(itemValue)
0000000000000000000000000000000000000000;;				l.ignore()
0000000000000000000000000000000000000000;;				return lexBeforeKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case isEOF(r):
0000000000000000000000000000000000000000;;				l.emit(itemValue)
0000000000000000000000000000000000000000;;				l.emit(itemEOF)
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				l.appendRune(r)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scanEscapeSequence scans either one of the escaped characters
0000000000000000000000000000000000000000;;	// or a unicode literal. We expect to be after the escape character.
0000000000000000000000000000000000000000;;	func (l *lexer) scanEscapeSequence() error {
0000000000000000000000000000000000000000;;		switch r := l.next(); {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case isEscapedCharacter(r):
0000000000000000000000000000000000000000;;			l.appendRune(decodeEscapedCharacter(r))
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case atUnicodeLiteral(r):
0000000000000000000000000000000000000000;;			return l.scanUnicodeLiteral()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case isEOF(r):
0000000000000000000000000000000000000000;;			return fmt.Errorf("premature EOF")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// silently drop the escape character and append the rune as is
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			l.appendRune(r)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scans a unicode literal in the form \uXXXX. We expect to be after the \u.
0000000000000000000000000000000000000000;;	func (l *lexer) scanUnicodeLiteral() error {
0000000000000000000000000000000000000000;;		// scan the digits
0000000000000000000000000000000000000000;;		d := make([]rune, 4)
0000000000000000000000000000000000000000;;		for i := 0; i < 4; i++ {
0000000000000000000000000000000000000000;;			d[i] = l.next()
0000000000000000000000000000000000000000;;			if d[i] == eof || !strings.ContainsRune("0123456789abcdefABCDEF", d[i]) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("invalid unicode literal")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// decode the digits into a rune
0000000000000000000000000000000000000000;;		r, err := strconv.ParseInt(string(d), 16, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l.appendRune(rune(r))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// decodeEscapedCharacter returns the unescaped rune. We expect to be after the escape character.
0000000000000000000000000000000000000000;;	func decodeEscapedCharacter(r rune) rune {
0000000000000000000000000000000000000000;;		switch r {
0000000000000000000000000000000000000000;;		case 'f':
0000000000000000000000000000000000000000;;			return '\f'
0000000000000000000000000000000000000000;;		case 'n':
0000000000000000000000000000000000000000;;			return '\n'
0000000000000000000000000000000000000000;;		case 'r':
0000000000000000000000000000000000000000;;			return '\r'
0000000000000000000000000000000000000000;;		case 't':
0000000000000000000000000000000000000000;;			return '\t'
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// atUnicodeLiteral reports whether we are at a unicode literal.
0000000000000000000000000000000000000000;;	// The escape character has already been consumed.
0000000000000000000000000000000000000000;;	func atUnicodeLiteral(r rune) bool {
0000000000000000000000000000000000000000;;		return r == 'u'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isComment reports whether we are at the start of a comment.
0000000000000000000000000000000000000000;;	func isComment(r rune) bool {
0000000000000000000000000000000000000000;;		return r == '#' || r == '!'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isEndOfKey reports whether the rune terminates the current key.
0000000000000000000000000000000000000000;;	func isEndOfKey(r rune) bool {
0000000000000000000000000000000000000000;;		return strings.ContainsRune(" \f\t\r\n:=", r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isEOF reports whether we are at EOF.
0000000000000000000000000000000000000000;;	func isEOF(r rune) bool {
0000000000000000000000000000000000000000;;		return r == eof
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isEOL reports whether we are at a new line character.
0000000000000000000000000000000000000000;;	func isEOL(r rune) bool {
0000000000000000000000000000000000000000;;		return r == '\n' || r == '\r'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isEscape reports whether the rune is the escape character which
0000000000000000000000000000000000000000;;	// prefixes unicode literals and other escaped characters.
0000000000000000000000000000000000000000;;	func isEscape(r rune) bool {
0000000000000000000000000000000000000000;;		return r == '\\'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isEscapedCharacter reports whether we are at one of the characters that need escaping.
0000000000000000000000000000000000000000;;	// The escape character has already been consumed.
0000000000000000000000000000000000000000;;	func isEscapedCharacter(r rune) bool {
0000000000000000000000000000000000000000;;		return strings.ContainsRune(" :=fnrt", r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isWhitespace reports whether the rune is a whitespace character.
0000000000000000000000000000000000000000;;	func isWhitespace(r rune) bool {
0000000000000000000000000000000000000000;;		return strings.ContainsRune(whitespace, r)
0000000000000000000000000000000000000000;;	}
