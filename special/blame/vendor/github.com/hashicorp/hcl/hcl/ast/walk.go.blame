0000000000000000000000000000000000000000;;	package ast
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WalkFunc describes a function to be called for each node during a Walk. The
0000000000000000000000000000000000000000;;	// returned node can be used to rewrite the AST. Walking stops the returned
0000000000000000000000000000000000000000;;	// bool is false.
0000000000000000000000000000000000000000;;	type WalkFunc func(Node) (Node, bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Walk traverses an AST in depth-first order: It starts by calling fn(node);
0000000000000000000000000000000000000000;;	// node must not be nil. If fn returns true, Walk invokes fn recursively for
0000000000000000000000000000000000000000;;	// each of the non-nil children of node, followed by a call of fn(nil). The
0000000000000000000000000000000000000000;;	// returned node of fn can be used to rewrite the passed node to fn.
0000000000000000000000000000000000000000;;	func Walk(node Node, fn WalkFunc) Node {
0000000000000000000000000000000000000000;;		rewritten, ok := fn(node)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return rewritten
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch n := node.(type) {
0000000000000000000000000000000000000000;;		case *File:
0000000000000000000000000000000000000000;;			n.Node = Walk(n.Node, fn)
0000000000000000000000000000000000000000;;		case *ObjectList:
0000000000000000000000000000000000000000;;			for i, item := range n.Items {
0000000000000000000000000000000000000000;;				n.Items[i] = Walk(item, fn).(*ObjectItem)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *ObjectKey:
0000000000000000000000000000000000000000;;			// nothing to do
0000000000000000000000000000000000000000;;		case *ObjectItem:
0000000000000000000000000000000000000000;;			for i, k := range n.Keys {
0000000000000000000000000000000000000000;;				n.Keys[i] = Walk(k, fn).(*ObjectKey)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if n.Val != nil {
0000000000000000000000000000000000000000;;				n.Val = Walk(n.Val, fn)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *LiteralType:
0000000000000000000000000000000000000000;;			// nothing to do
0000000000000000000000000000000000000000;;		case *ListType:
0000000000000000000000000000000000000000;;			for i, l := range n.List {
0000000000000000000000000000000000000000;;				n.List[i] = Walk(l, fn)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *ObjectType:
0000000000000000000000000000000000000000;;			n.List = Walk(n.List, fn).(*ObjectList)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// should we panic here?
0000000000000000000000000000000000000000;;			fmt.Printf("unknown type: %T\n", n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fn(nil)
0000000000000000000000000000000000000000;;		return rewritten
0000000000000000000000000000000000000000;;	}
