0000000000000000000000000000000000000000;;	package token
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pos describes an arbitrary source position
0000000000000000000000000000000000000000;;	// including the file, line, and column location.
0000000000000000000000000000000000000000;;	// A Position is valid if the line number is > 0.
0000000000000000000000000000000000000000;;	type Pos struct {
0000000000000000000000000000000000000000;;		Filename string // filename, if any
0000000000000000000000000000000000000000;;		Offset   int    // offset, starting at 0
0000000000000000000000000000000000000000;;		Line     int    // line number, starting at 1
0000000000000000000000000000000000000000;;		Column   int    // column number, starting at 1 (character count)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValid returns true if the position is valid.
0000000000000000000000000000000000000000;;	func (p *Pos) IsValid() bool { return p.Line > 0 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns a string in one of several forms:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	file:line:column    valid position with file name
0000000000000000000000000000000000000000;;	//	line:column         valid position without file name
0000000000000000000000000000000000000000;;	//	file                invalid position with file name
0000000000000000000000000000000000000000;;	//	-                   invalid position without file name
0000000000000000000000000000000000000000;;	func (p Pos) String() string {
0000000000000000000000000000000000000000;;		s := p.Filename
0000000000000000000000000000000000000000;;		if p.IsValid() {
0000000000000000000000000000000000000000;;			if s != "" {
0000000000000000000000000000000000000000;;				s += ":"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s += fmt.Sprintf("%d:%d", p.Line, p.Column)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s == "" {
0000000000000000000000000000000000000000;;			s = "-"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Before reports whether the position p is before u.
0000000000000000000000000000000000000000;;	func (p Pos) Before(u Pos) bool {
0000000000000000000000000000000000000000;;		return u.Offset > p.Offset || u.Line > p.Line
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// After reports whether the position p is after u.
0000000000000000000000000000000000000000;;	func (p Pos) After(u Pos) bool {
0000000000000000000000000000000000000000;;		return u.Offset < p.Offset || u.Line < p.Line
0000000000000000000000000000000000000000;;	}
