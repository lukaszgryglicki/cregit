0000000000000000000000000000000000000000;;	Simple Redis
0000000000000000000000000000000000000000;;	============
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/xyproto/simpleredis.svg?branch=master)](https://travis-ci.org/xyproto/simpleredis)
0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/github.com/xyproto/simpleredis?status.svg)](http://godoc.org/github.com/xyproto/simpleredis)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Easy way to use Redis from Go.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Online API Documentation
0000000000000000000000000000000000000000;;	------------------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[godoc.org](http://godoc.org/github.com/xyproto/simpleredis)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Features and limitations
0000000000000000000000000000000000000000;;	------------------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Supports simple use of lists, hashmaps, sets and key/values
0000000000000000000000000000000000000000;;	* Deals mainly with strings
0000000000000000000000000000000000000000;;	* Uses the [redigo](https://github.com/garyburd/redigo) package
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Example usage
0000000000000000000000000000000000000000;;	-------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	~~~go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/xyproto/simpleredis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		// Check if the redis service is up
0000000000000000000000000000000000000000;;		if err := simpleredis.TestConnection(); err != nil {
0000000000000000000000000000000000000000;;			log.Fatalln("Could not connect to Redis. Is the service up and running?")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use instead for testing if a different host/port is up.
0000000000000000000000000000000000000000;;		// simpleredis.TestConnectionHost("localhost:6379")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a connection pool, connect to the given redis server
0000000000000000000000000000000000000000;;		pool := simpleredis.NewConnectionPool()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use this for connecting to a different redis host/port
0000000000000000000000000000000000000000;;		// pool := simpleredis.NewConnectionPoolHost("localhost:6379")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For connecting to a different redis host/port, with a password
0000000000000000000000000000000000000000;;		// pool := simpleredis.NewConnectionPoolHost("password@redishost:6379")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Close the connection pool right after this function returns
0000000000000000000000000000000000000000;;		defer pool.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a list named "greetings"
0000000000000000000000000000000000000000;;		list := simpleredis.NewList(pool, "greetings")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add "hello" to the list, check if there are errors
0000000000000000000000000000000000000000;;		if list.Add("hello") != nil {
0000000000000000000000000000000000000000;;			log.Fatalln("Could not add an item to list!")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the last item of the list
0000000000000000000000000000000000000000;;		if item, err := list.GetLast(); err != nil {
0000000000000000000000000000000000000000;;			log.Fatalln("Could not fetch the last item from the list!")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			log.Println("The value of the stored item is:", item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove the list
0000000000000000000000000000000000000000;;		if list.Remove() != nil {
0000000000000000000000000000000000000000;;			log.Fatalln("Could not remove the list!")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	~~~
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Testing
0000000000000000000000000000000000000000;;	-------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Redis must be up and running locally for the `go test` tests to work.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Version, license and author
0000000000000000000000000000000000000000;;	---------------------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Version: 1.0
0000000000000000000000000000000000000000;;	* License: MIT
0000000000000000000000000000000000000000;;	* Author: Alexander F RÃ¸dseth
0000000000000000000000000000000000000000;;	
