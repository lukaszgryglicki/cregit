0000000000000000000000000000000000000000;;	// Copyright 2010 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	// +build solaris
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fsnotify
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watcher watches a set of files, delivering events to a channel.
0000000000000000000000000000000000000000;;	type Watcher struct {
0000000000000000000000000000000000000000;;		Events chan Event
0000000000000000000000000000000000000000;;		Errors chan error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewWatcher establishes a new watcher with the underlying OS and begins waiting for events.
0000000000000000000000000000000000000000;;	func NewWatcher() (*Watcher, error) {
0000000000000000000000000000000000000000;;		return nil, errors.New("FEN based watcher not yet supported for fsnotify\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Close removes all watches and closes the events channel.
0000000000000000000000000000000000000000;;	func (w *Watcher) Close() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add starts watching the named file or directory (non-recursively).
0000000000000000000000000000000000000000;;	func (w *Watcher) Add(name string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove stops watching the the named file or directory (non-recursively).
0000000000000000000000000000000000000000;;	func (w *Watcher) Remove(name string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
