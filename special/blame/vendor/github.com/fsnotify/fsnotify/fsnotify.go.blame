0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	// +build !plan9
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package fsnotify provides a platform-independent interface for file system notifications.
0000000000000000000000000000000000000000;;	package fsnotify
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Event represents a single file system notification.
0000000000000000000000000000000000000000;;	type Event struct {
0000000000000000000000000000000000000000;;		Name string // Relative path to the file or directory.
0000000000000000000000000000000000000000;;		Op   Op     // File operation that triggered the event.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Op describes a set of file operations.
0000000000000000000000000000000000000000;;	type Op uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are the generalized file operations that can trigger a notification.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Create Op = 1 << iota
0000000000000000000000000000000000000000;;		Write
0000000000000000000000000000000000000000;;		Remove
0000000000000000000000000000000000000000;;		Rename
0000000000000000000000000000000000000000;;		Chmod
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns a string representation of the event in the form
0000000000000000000000000000000000000000;;	// "file: REMOVE|WRITE|..."
0000000000000000000000000000000000000000;;	func (e Event) String() string {
0000000000000000000000000000000000000000;;		// Use a buffer for efficient string concatenation
0000000000000000000000000000000000000000;;		var buffer bytes.Buffer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e.Op&Create == Create {
0000000000000000000000000000000000000000;;			buffer.WriteString("|CREATE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Op&Remove == Remove {
0000000000000000000000000000000000000000;;			buffer.WriteString("|REMOVE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Op&Write == Write {
0000000000000000000000000000000000000000;;			buffer.WriteString("|WRITE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Op&Rename == Rename {
0000000000000000000000000000000000000000;;			buffer.WriteString("|RENAME")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Op&Chmod == Chmod {
0000000000000000000000000000000000000000;;			buffer.WriteString("|CHMOD")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If buffer remains empty, return no event names
0000000000000000000000000000000000000000;;		if buffer.Len() == 0 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%q: ", e.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Return a list of event names, with leading pipe character stripped
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%q: %s", e.Name, buffer.String()[1:])
0000000000000000000000000000000000000000;;	}
