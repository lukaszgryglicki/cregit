0000000000000000000000000000000000000000;;	// Package restxml provides RESTful XML serialization of AWS
0000000000000000000000000000000000000000;;	// requests and responses.
0000000000000000000000000000000000000000;;	package restxml
10dd25bed5ef520e7d953b5d959b6088669c4e3a;;	
0000000000000000000000000000000000000000;;	//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/input/rest-xml.json build_test.go
0000000000000000000000000000000000000000;;	//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/output/rest-xml.json unmarshal_test.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/query"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/rest"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BuildHandler is a named request handler for building restxml protocol requests
0000000000000000000000000000000000000000;;	var BuildHandler = request.NamedHandler{Name: "awssdk.restxml.Build", Fn: Build}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalHandler is a named request handler for unmarshaling restxml protocol requests
0000000000000000000000000000000000000000;;	var UnmarshalHandler = request.NamedHandler{Name: "awssdk.restxml.Unmarshal", Fn: Unmarshal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMetaHandler is a named request handler for unmarshaling restxml protocol request metadata
0000000000000000000000000000000000000000;;	var UnmarshalMetaHandler = request.NamedHandler{Name: "awssdk.restxml.UnmarshalMeta", Fn: UnmarshalMeta}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalErrorHandler is a named request handler for unmarshaling restxml protocol request errors
0000000000000000000000000000000000000000;;	var UnmarshalErrorHandler = request.NamedHandler{Name: "awssdk.restxml.UnmarshalError", Fn: UnmarshalError}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Build builds a request payload for the REST XML protocol.
0000000000000000000000000000000000000000;;	func Build(r *request.Request) {
0000000000000000000000000000000000000000;;		rest.Build(r)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
0000000000000000000000000000000000000000;;			var buf bytes.Buffer
0000000000000000000000000000000000000000;;			err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r.SetBufferBody(buf.Bytes())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal unmarshals a payload response for the REST XML protocol.
0000000000000000000000000000000000000000;;	func Unmarshal(r *request.Request) {
0000000000000000000000000000000000000000;;		if t := rest.PayloadType(r.Data); t == "structure" || t == "" {
0000000000000000000000000000000000000000;;			defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;			decoder := xml.NewDecoder(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;			err := xmlutil.UnmarshalXML(r.Data, decoder, "")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				r.Error = awserr.New("SerializationError", "failed to decode REST XML response", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			rest.Unmarshal(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMeta unmarshals response headers for the REST XML protocol.
0000000000000000000000000000000000000000;;	func UnmarshalMeta(r *request.Request) {
0000000000000000000000000000000000000000;;		rest.UnmarshalMeta(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalError unmarshals a response error for the REST XML protocol.
0000000000000000000000000000000000000000;;	func UnmarshalError(r *request.Request) {
0000000000000000000000000000000000000000;;		query.UnmarshalError(r)
0000000000000000000000000000000000000000;;	}
