0000000000000000000000000000000000000000;;	// Package jsonrpc provides JSON RPC utilities for serialization of AWS
0000000000000000000000000000000000000000;;	// requests and responses.
0000000000000000000000000000000000000000;;	package jsonrpc
837c40a351ee83c902024069c1ae048b6b398947;Godeps/_workspace/src/github.com/aws/aws-sdk-go/private/protocol/jsonrpc/jsonrpc.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/private/protocol/jsonrpc/jsonrpc.go][vendor/github.com/aws/aws-sdk-go/private/protocol/jsonrpc/jsonrpc.go];	
0000000000000000000000000000000000000000;;	//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/input/json.json build_test.go
0000000000000000000000000000000000000000;;	//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/output/json.json unmarshal_test.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/json/jsonutil"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var emptyJSON = []byte("{}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BuildHandler is a named request handler for building jsonrpc protocol requests
0000000000000000000000000000000000000000;;	var BuildHandler = request.NamedHandler{Name: "awssdk.jsonrpc.Build", Fn: Build}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalHandler is a named request handler for unmarshaling jsonrpc protocol requests
0000000000000000000000000000000000000000;;	var UnmarshalHandler = request.NamedHandler{Name: "awssdk.jsonrpc.Unmarshal", Fn: Unmarshal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMetaHandler is a named request handler for unmarshaling jsonrpc protocol request metadata
0000000000000000000000000000000000000000;;	var UnmarshalMetaHandler = request.NamedHandler{Name: "awssdk.jsonrpc.UnmarshalMeta", Fn: UnmarshalMeta}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalErrorHandler is a named request handler for unmarshaling jsonrpc protocol request errors
0000000000000000000000000000000000000000;;	var UnmarshalErrorHandler = request.NamedHandler{Name: "awssdk.jsonrpc.UnmarshalError", Fn: UnmarshalError}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Build builds a JSON payload for a JSON RPC request.
0000000000000000000000000000000000000000;;	func Build(req *request.Request) {
0000000000000000000000000000000000000000;;		var buf []byte
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if req.ParamsFilled() {
0000000000000000000000000000000000000000;;			buf, err = jsonutil.BuildJSON(req.Params)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				req.Error = awserr.New("SerializationError", "failed encoding JSON RPC request", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			buf = emptyJSON
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if req.ClientInfo.TargetPrefix != "" || string(buf) != "{}" {
0000000000000000000000000000000000000000;;			req.SetBufferBody(buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if req.ClientInfo.TargetPrefix != "" {
0000000000000000000000000000000000000000;;			target := req.ClientInfo.TargetPrefix + "." + req.Operation.Name
0000000000000000000000000000000000000000;;			req.HTTPRequest.Header.Add("X-Amz-Target", target)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if req.ClientInfo.JSONVersion != "" {
0000000000000000000000000000000000000000;;			jsonVersion := req.ClientInfo.JSONVersion
0000000000000000000000000000000000000000;;			req.HTTPRequest.Header.Add("Content-Type", "application/x-amz-json-"+jsonVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal unmarshals a response for a JSON RPC service.
0000000000000000000000000000000000000000;;	func Unmarshal(req *request.Request) {
0000000000000000000000000000000000000000;;		defer req.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;		if req.DataFilled() {
0000000000000000000000000000000000000000;;			err := jsonutil.UnmarshalJSON(req.Data, req.HTTPResponse.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				req.Error = awserr.New("SerializationError", "failed decoding JSON RPC response", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMeta unmarshals headers from a response for a JSON RPC service.
0000000000000000000000000000000000000000;;	func UnmarshalMeta(req *request.Request) {
0000000000000000000000000000000000000000;;		rest.UnmarshalMeta(req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalError unmarshals an error response for a JSON RPC service.
0000000000000000000000000000000000000000;;	func UnmarshalError(req *request.Request) {
0000000000000000000000000000000000000000;;		defer req.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;		bodyBytes, err := ioutil.ReadAll(req.HTTPResponse.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			req.Error = awserr.New("SerializationError", "failed reading JSON RPC error response", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(bodyBytes) == 0 {
0000000000000000000000000000000000000000;;			req.Error = awserr.NewRequestFailure(
0000000000000000000000000000000000000000;;				awserr.New("SerializationError", req.HTTPResponse.Status, nil),
0000000000000000000000000000000000000000;;				req.HTTPResponse.StatusCode,
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var jsonErr jsonErrorResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(bodyBytes, &jsonErr); err != nil {
0000000000000000000000000000000000000000;;			req.Error = awserr.New("SerializationError", "failed decoding JSON RPC error response", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		codes := strings.SplitN(jsonErr.Code, "#", 2)
0000000000000000000000000000000000000000;;		req.Error = awserr.NewRequestFailure(
0000000000000000000000000000000000000000;;			awserr.New(codes[len(codes)-1], jsonErr.Message, nil),
0000000000000000000000000000000000000000;;			req.HTTPResponse.StatusCode,
0000000000000000000000000000000000000000;;			req.RequestID,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type jsonErrorResponse struct {
0000000000000000000000000000000000000000;;		Code    string `json:"__type"`
0000000000000000000000000000000000000000;;		Message string `json:"message"`
0000000000000000000000000000000000000000;;	}
