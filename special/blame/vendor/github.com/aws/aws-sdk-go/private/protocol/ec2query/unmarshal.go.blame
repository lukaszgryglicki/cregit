0000000000000000000000000000000000000000;;	package ec2query
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/internal/protocol/ec2query/unmarshal.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/internal/protocol/ec2query/unmarshal.go][vendor/github.com/aws/aws-sdk-go/private/protocol/ec2query/unmarshal.go];	
0000000000000000000000000000000000000000;;	//go:generate go run -tags codegen ../../../models/protocol_tests/generate.go ../../../models/protocol_tests/output/ec2.json unmarshal_test.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalHandler is a named request handler for unmarshaling ec2query protocol requests
0000000000000000000000000000000000000000;;	var UnmarshalHandler = request.NamedHandler{Name: "awssdk.ec2query.Unmarshal", Fn: Unmarshal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMetaHandler is a named request handler for unmarshaling ec2query protocol request metadata
0000000000000000000000000000000000000000;;	var UnmarshalMetaHandler = request.NamedHandler{Name: "awssdk.ec2query.UnmarshalMeta", Fn: UnmarshalMeta}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalErrorHandler is a named request handler for unmarshaling ec2query protocol request errors
0000000000000000000000000000000000000000;;	var UnmarshalErrorHandler = request.NamedHandler{Name: "awssdk.ec2query.UnmarshalError", Fn: UnmarshalError}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal unmarshals a response body for the EC2 protocol.
0000000000000000000000000000000000000000;;	func Unmarshal(r *request.Request) {
0000000000000000000000000000000000000000;;		defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;		if r.DataFilled() {
0000000000000000000000000000000000000000;;			decoder := xml.NewDecoder(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;			err := xmlutil.UnmarshalXML(r.Data, decoder, "")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				r.Error = awserr.New("SerializationError", "failed decoding EC2 Query response", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMeta unmarshals response headers for the EC2 protocol.
0000000000000000000000000000000000000000;;	func UnmarshalMeta(r *request.Request) {
0000000000000000000000000000000000000000;;		// TODO implement unmarshaling of request IDs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type xmlErrorResponse struct {
0000000000000000000000000000000000000000;;		XMLName   xml.Name `xml:"Response"`
0000000000000000000000000000000000000000;;		Code      string   `xml:"Errors>Error>Code"`
0000000000000000000000000000000000000000;;		Message   string   `xml:"Errors>Error>Message"`
0000000000000000000000000000000000000000;;		RequestID string   `xml:"RequestID"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalError unmarshals a response error for the EC2 protocol.
0000000000000000000000000000000000000000;;	func UnmarshalError(r *request.Request) {
0000000000000000000000000000000000000000;;		defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &xmlErrorResponse{}
0000000000000000000000000000000000000000;;		err := xml.NewDecoder(r.HTTPResponse.Body).Decode(resp)
0000000000000000000000000000000000000000;;		if err != nil && err != io.EOF {
0000000000000000000000000000000000000000;;			r.Error = awserr.New("SerializationError", "failed decoding EC2 Query error response", err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r.Error = awserr.NewRequestFailure(
0000000000000000000000000000000000000000;;				awserr.New(resp.Code, resp.Message, nil),
0000000000000000000000000000000000000000;;				r.HTTPResponse.StatusCode,
0000000000000000000000000000000000000000;;				resp.RequestID,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
