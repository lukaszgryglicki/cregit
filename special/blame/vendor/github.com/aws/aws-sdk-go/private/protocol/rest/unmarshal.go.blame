0000000000000000000000000000000000000000;;	package rest
f49e160748842d0b155b75ebbab6d2b5b6b08571;Godeps/_workspace/src/github.com/aws/aws-sdk-go/internal/protocol/rest/unmarshal.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/internal/protocol/rest/unmarshal.go][vendor/github.com/aws/aws-sdk-go/private/protocol/rest/unmarshal.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalHandler is a named request handler for unmarshaling rest protocol requests
0000000000000000000000000000000000000000;;	var UnmarshalHandler = request.NamedHandler{Name: "awssdk.rest.Unmarshal", Fn: Unmarshal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMetaHandler is a named request handler for unmarshaling rest protocol request metadata
0000000000000000000000000000000000000000;;	var UnmarshalMetaHandler = request.NamedHandler{Name: "awssdk.rest.UnmarshalMeta", Fn: UnmarshalMeta}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal unmarshals the REST component of a response in a REST service.
0000000000000000000000000000000000000000;;	func Unmarshal(r *request.Request) {
0000000000000000000000000000000000000000;;		if r.DataFilled() {
0000000000000000000000000000000000000000;;			v := reflect.Indirect(reflect.ValueOf(r.Data))
0000000000000000000000000000000000000000;;			unmarshalBody(r, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMeta unmarshals the REST metadata of a response in a REST service
0000000000000000000000000000000000000000;;	func UnmarshalMeta(r *request.Request) {
0000000000000000000000000000000000000000;;		r.RequestID = r.HTTPResponse.Header.Get("X-Amzn-Requestid")
0000000000000000000000000000000000000000;;		if r.RequestID == "" {
0000000000000000000000000000000000000000;;			// Alternative version of request id in the header
0000000000000000000000000000000000000000;;			r.RequestID = r.HTTPResponse.Header.Get("X-Amz-Request-Id")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.DataFilled() {
0000000000000000000000000000000000000000;;			v := reflect.Indirect(reflect.ValueOf(r.Data))
0000000000000000000000000000000000000000;;			unmarshalLocationElements(r, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalBody(r *request.Request, v reflect.Value) {
0000000000000000000000000000000000000000;;		if field, ok := v.Type().FieldByName("_"); ok {
0000000000000000000000000000000000000000;;			if payloadName := field.Tag.Get("payload"); payloadName != "" {
0000000000000000000000000000000000000000;;				pfield, _ := v.Type().FieldByName(payloadName)
0000000000000000000000000000000000000000;;				if ptag := pfield.Tag.Get("type"); ptag != "" && ptag != "structure" {
0000000000000000000000000000000000000000;;					payload := v.FieldByName(payloadName)
0000000000000000000000000000000000000000;;					if payload.IsValid() {
0000000000000000000000000000000000000000;;						switch payload.Interface().(type) {
0000000000000000000000000000000000000000;;						case []byte:
0000000000000000000000000000000000000000;;							defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;							b, err := ioutil.ReadAll(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;							if err != nil {
0000000000000000000000000000000000000000;;								r.Error = awserr.New("SerializationError", "failed to decode REST response", err)
0000000000000000000000000000000000000000;;							} else {
0000000000000000000000000000000000000000;;								payload.Set(reflect.ValueOf(b))
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						case *string:
0000000000000000000000000000000000000000;;							defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;							b, err := ioutil.ReadAll(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;							if err != nil {
0000000000000000000000000000000000000000;;								r.Error = awserr.New("SerializationError", "failed to decode REST response", err)
0000000000000000000000000000000000000000;;							} else {
0000000000000000000000000000000000000000;;								str := string(b)
0000000000000000000000000000000000000000;;								payload.Set(reflect.ValueOf(&str))
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						default:
0000000000000000000000000000000000000000;;							switch payload.Type().String() {
0000000000000000000000000000000000000000;;							case "io.ReadCloser":
0000000000000000000000000000000000000000;;								payload.Set(reflect.ValueOf(r.HTTPResponse.Body))
0000000000000000000000000000000000000000;;							case "io.ReadSeeker":
0000000000000000000000000000000000000000;;								b, err := ioutil.ReadAll(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;								if err != nil {
0000000000000000000000000000000000000000;;									r.Error = awserr.New("SerializationError",
0000000000000000000000000000000000000000;;										"failed to read response body", err)
0000000000000000000000000000000000000000;;									return
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;								payload.Set(reflect.ValueOf(ioutil.NopCloser(bytes.NewReader(b))))
0000000000000000000000000000000000000000;;							default:
0000000000000000000000000000000000000000;;								io.Copy(ioutil.Discard, r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;								defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;								r.Error = awserr.New("SerializationError",
0000000000000000000000000000000000000000;;									"failed to decode REST response",
0000000000000000000000000000000000000000;;									fmt.Errorf("unknown payload type %s", payload.Type()))
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalLocationElements(r *request.Request, v reflect.Value) {
0000000000000000000000000000000000000000;;		for i := 0; i < v.NumField(); i++ {
0000000000000000000000000000000000000000;;			m, field := v.Field(i), v.Type().Field(i)
0000000000000000000000000000000000000000;;			if n := field.Name; n[0:1] == strings.ToLower(n[0:1]) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if m.IsValid() {
0000000000000000000000000000000000000000;;				name := field.Tag.Get("locationName")
0000000000000000000000000000000000000000;;				if name == "" {
0000000000000000000000000000000000000000;;					name = field.Name
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch field.Tag.Get("location") {
0000000000000000000000000000000000000000;;				case "statusCode":
0000000000000000000000000000000000000000;;					unmarshalStatusCode(m, r.HTTPResponse.StatusCode)
0000000000000000000000000000000000000000;;				case "header":
0000000000000000000000000000000000000000;;					err := unmarshalHeader(m, r.HTTPResponse.Header.Get(name))
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						r.Error = awserr.New("SerializationError", "failed to decode REST response", err)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case "headers":
0000000000000000000000000000000000000000;;					prefix := field.Tag.Get("locationName")
0000000000000000000000000000000000000000;;					err := unmarshalHeaderMap(m, r.HTTPResponse.Header, prefix)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						r.Error = awserr.New("SerializationError", "failed to decode REST response", err)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if r.Error != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalStatusCode(v reflect.Value, statusCode int) {
0000000000000000000000000000000000000000;;		if !v.IsValid() {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v.Interface().(type) {
0000000000000000000000000000000000000000;;		case *int64:
0000000000000000000000000000000000000000;;			s := int64(statusCode)
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalHeaderMap(r reflect.Value, headers http.Header, prefix string) error {
0000000000000000000000000000000000000000;;		switch r.Interface().(type) {
0000000000000000000000000000000000000000;;		case map[string]*string: // we only support string map value types
0000000000000000000000000000000000000000;;			out := map[string]*string{}
0000000000000000000000000000000000000000;;			for k, v := range headers {
0000000000000000000000000000000000000000;;				k = http.CanonicalHeaderKey(k)
0000000000000000000000000000000000000000;;				if strings.HasPrefix(strings.ToLower(k), strings.ToLower(prefix)) {
0000000000000000000000000000000000000000;;					out[k[len(prefix):]] = &v[0]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r.Set(reflect.ValueOf(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalHeader(v reflect.Value, header string) error {
0000000000000000000000000000000000000000;;		if !v.IsValid() || (header == "" && v.Elem().Kind() != reflect.String) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v.Interface().(type) {
0000000000000000000000000000000000000000;;		case *string:
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&header))
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			b, err := base64.StdEncoding.DecodeString(header)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&b))
0000000000000000000000000000000000000000;;		case *bool:
0000000000000000000000000000000000000000;;			b, err := strconv.ParseBool(header)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&b))
0000000000000000000000000000000000000000;;		case *int64:
0000000000000000000000000000000000000000;;			i, err := strconv.ParseInt(header, 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&i))
0000000000000000000000000000000000000000;;		case *float64:
0000000000000000000000000000000000000000;;			f, err := strconv.ParseFloat(header, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&f))
0000000000000000000000000000000000000000;;		case *time.Time:
0000000000000000000000000000000000000000;;			t, err := time.Parse(RFC822, header)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.Set(reflect.ValueOf(&t))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			err := fmt.Errorf("Unsupported value for param %v (%s)", v.Interface(), v.Type())
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
