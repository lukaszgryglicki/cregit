0000000000000000000000000000000000000000;;	package rest
f49e160748842d0b155b75ebbab6d2b5b6b08571;Godeps/_workspace/src/github.com/aws/aws-sdk-go/internal/protocol/rest/payload.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/internal/protocol/rest/payload.go][vendor/github.com/aws/aws-sdk-go/private/protocol/rest/payload.go];	
0000000000000000000000000000000000000000;;	import "reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PayloadMember returns the payload field member of i if there is one, or nil.
0000000000000000000000000000000000000000;;	func PayloadMember(i interface{}) interface{} {
0000000000000000000000000000000000000000;;		if i == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(i).Elem()
0000000000000000000000000000000000000000;;		if !v.IsValid() {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if field, ok := v.Type().FieldByName("_"); ok {
0000000000000000000000000000000000000000;;			if payloadName := field.Tag.Get("payload"); payloadName != "" {
0000000000000000000000000000000000000000;;				field, _ := v.Type().FieldByName(payloadName)
0000000000000000000000000000000000000000;;				if field.Tag.Get("type") != "structure" {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				payload := v.FieldByName(payloadName)
0000000000000000000000000000000000000000;;				if payload.IsValid() || (payload.Kind() == reflect.Ptr && !payload.IsNil()) {
0000000000000000000000000000000000000000;;					return payload.Interface()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PayloadType returns the type of a payload field member of i if there is one, or "".
0000000000000000000000000000000000000000;;	func PayloadType(i interface{}) string {
0000000000000000000000000000000000000000;;		v := reflect.Indirect(reflect.ValueOf(i))
0000000000000000000000000000000000000000;;		if !v.IsValid() {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if field, ok := v.Type().FieldByName("_"); ok {
0000000000000000000000000000000000000000;;			if payloadName := field.Tag.Get("payload"); payloadName != "" {
0000000000000000000000000000000000000000;;				if member, ok := v.Type().FieldByName(payloadName); ok {
0000000000000000000000000000000000000000;;					return member.Tag.Get("type")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
