0000000000000000000000000000000000000000;;	package query
15505fe0b7961d9c807ac0af0b1f8961fbc154fb;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/internal/protocol/query/unmarshal_error.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/internal/protocol/query/unmarshal_error.go][vendor/github.com/aws/aws-sdk-go/private/protocol/query/unmarshal_error.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type xmlErrorResponse struct {
0000000000000000000000000000000000000000;;		XMLName   xml.Name `xml:"ErrorResponse"`
0000000000000000000000000000000000000000;;		Code      string   `xml:"Error>Code"`
0000000000000000000000000000000000000000;;		Message   string   `xml:"Error>Message"`
0000000000000000000000000000000000000000;;		RequestID string   `xml:"RequestId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type xmlServiceUnavailableResponse struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"ServiceUnavailableException"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalErrorHandler is a name request handler to unmarshal request errors
0000000000000000000000000000000000000000;;	var UnmarshalErrorHandler = request.NamedHandler{Name: "awssdk.query.UnmarshalError", Fn: UnmarshalError}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalError unmarshals an error response for an AWS Query service.
0000000000000000000000000000000000000000;;	func UnmarshalError(r *request.Request) {
0000000000000000000000000000000000000000;;		defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bodyBytes, err := ioutil.ReadAll(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Error = awserr.New("SerializationError", "failed to read from query HTTP response body", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// First check for specific error
0000000000000000000000000000000000000000;;		resp := xmlErrorResponse{}
0000000000000000000000000000000000000000;;		decodeErr := xml.Unmarshal(bodyBytes, &resp)
0000000000000000000000000000000000000000;;		if decodeErr == nil {
0000000000000000000000000000000000000000;;			reqID := resp.RequestID
0000000000000000000000000000000000000000;;			if reqID == "" {
0000000000000000000000000000000000000000;;				reqID = r.RequestID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r.Error = awserr.NewRequestFailure(
0000000000000000000000000000000000000000;;				awserr.New(resp.Code, resp.Message, nil),
0000000000000000000000000000000000000000;;				r.HTTPResponse.StatusCode,
0000000000000000000000000000000000000000;;				reqID,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check for unhandled error
0000000000000000000000000000000000000000;;		servUnavailResp := xmlServiceUnavailableResponse{}
0000000000000000000000000000000000000000;;		unavailErr := xml.Unmarshal(bodyBytes, &servUnavailResp)
0000000000000000000000000000000000000000;;		if unavailErr == nil {
0000000000000000000000000000000000000000;;			r.Error = awserr.NewRequestFailure(
0000000000000000000000000000000000000000;;				awserr.New("ServiceUnavailableException", "service is unavailable", nil),
0000000000000000000000000000000000000000;;				r.HTTPResponse.StatusCode,
0000000000000000000000000000000000000000;;				r.RequestID,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Failed to retrieve any error message from the response body
0000000000000000000000000000000000000000;;		r.Error = awserr.New("SerializationError",
0000000000000000000000000000000000000000;;			"failed to decode query XML error response", decodeErr)
0000000000000000000000000000000000000000;;	}
