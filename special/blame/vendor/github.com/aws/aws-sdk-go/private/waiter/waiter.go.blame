0000000000000000000000000000000000000000;;	package waiter
7381c378252ae8f66befb472cf056371ba4be46a;Godeps/_workspace/src/github.com/aws/aws-sdk-go/private/waiter/waiter.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/private/waiter/waiter.go][vendor/github.com/aws/aws-sdk-go/private/waiter/waiter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awsutil"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Config provides a collection of configuration values to setup a generated
0000000000000000000000000000000000000000;;	// waiter code with.
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		Name        string
0000000000000000000000000000000000000000;;		Delay       int
0000000000000000000000000000000000000000;;		MaxAttempts int
0000000000000000000000000000000000000000;;		Operation   string
0000000000000000000000000000000000000000;;		Acceptors   []WaitAcceptor
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A WaitAcceptor provides the information needed to wait for an API operation
0000000000000000000000000000000000000000;;	// to complete.
0000000000000000000000000000000000000000;;	type WaitAcceptor struct {
0000000000000000000000000000000000000000;;		Expected interface{}
0000000000000000000000000000000000000000;;		Matcher  string
0000000000000000000000000000000000000000;;		State    string
0000000000000000000000000000000000000000;;		Argument string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Waiter provides waiting for an operation to complete.
0000000000000000000000000000000000000000;;	type Waiter struct {
0000000000000000000000000000000000000000;;		Config
0000000000000000000000000000000000000000;;		Client interface{}
0000000000000000000000000000000000000000;;		Input  interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Wait waits for an operation to complete, expire max attempts, or fail. Error
0000000000000000000000000000000000000000;;	// is returned if the operation fails.
0000000000000000000000000000000000000000;;	func (w *Waiter) Wait() error {
0000000000000000000000000000000000000000;;		client := reflect.ValueOf(w.Client)
0000000000000000000000000000000000000000;;		in := reflect.ValueOf(w.Input)
0000000000000000000000000000000000000000;;		method := client.MethodByName(w.Config.Operation + "Request")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < w.MaxAttempts; i++ {
0000000000000000000000000000000000000000;;			res := method.Call([]reflect.Value{in})
0000000000000000000000000000000000000000;;			req := res[0].Interface().(*request.Request)
0000000000000000000000000000000000000000;;			req.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Waiter"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := req.Send()
0000000000000000000000000000000000000000;;			for _, a := range w.Acceptors {
0000000000000000000000000000000000000000;;				result := false
0000000000000000000000000000000000000000;;				var vals []interface{}
0000000000000000000000000000000000000000;;				switch a.Matcher {
0000000000000000000000000000000000000000;;				case "pathAll", "path":
0000000000000000000000000000000000000000;;					// Require all matches to be equal for result to match
0000000000000000000000000000000000000000;;					vals, _ = awsutil.ValuesAtPath(req.Data, a.Argument)
0000000000000000000000000000000000000000;;					if len(vals) == 0 {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					result = true
0000000000000000000000000000000000000000;;					for _, val := range vals {
0000000000000000000000000000000000000000;;						if !awsutil.DeepEqual(val, a.Expected) {
0000000000000000000000000000000000000000;;							result = false
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case "pathAny":
0000000000000000000000000000000000000000;;					// Only a single match needs to equal for the result to match
0000000000000000000000000000000000000000;;					vals, _ = awsutil.ValuesAtPath(req.Data, a.Argument)
0000000000000000000000000000000000000000;;					for _, val := range vals {
0000000000000000000000000000000000000000;;						if awsutil.DeepEqual(val, a.Expected) {
0000000000000000000000000000000000000000;;							result = true
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case "status":
0000000000000000000000000000000000000000;;					s := a.Expected.(int)
0000000000000000000000000000000000000000;;					result = s == req.HTTPResponse.StatusCode
0000000000000000000000000000000000000000;;				case "error":
0000000000000000000000000000000000000000;;					if aerr, ok := err.(awserr.Error); ok {
0000000000000000000000000000000000000000;;						result = aerr.Code() == a.Expected.(string)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case "pathList":
0000000000000000000000000000000000000000;;					// ignored matcher
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					logf(client, "WARNING: Waiter for %s encountered unexpected matcher: %s",
0000000000000000000000000000000000000000;;						w.Config.Operation, a.Matcher)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if !result {
0000000000000000000000000000000000000000;;					// If there was no matching result found there is nothing more to do
0000000000000000000000000000000000000000;;					// for this response, retry the request.
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch a.State {
0000000000000000000000000000000000000000;;				case "success":
0000000000000000000000000000000000000000;;					// waiter completed
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				case "failure":
0000000000000000000000000000000000000000;;					// Waiter failure state triggered
0000000000000000000000000000000000000000;;					return awserr.New("ResourceNotReady",
0000000000000000000000000000000000000000;;						fmt.Sprintf("failed waiting for successful resource state"), err)
0000000000000000000000000000000000000000;;				case "retry":
0000000000000000000000000000000000000000;;					// clear the error and retry the operation
0000000000000000000000000000000000000000;;					err = nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					logf(client, "WARNING: Waiter for %s encountered unexpected state: %s",
0000000000000000000000000000000000000000;;						w.Config.Operation, a.State)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			time.Sleep(time.Second * time.Duration(w.Delay))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return awserr.New("ResourceNotReady",
0000000000000000000000000000000000000000;;			fmt.Sprintf("exceeded %d wait attempts", w.MaxAttempts), nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func logf(client reflect.Value, msg string, args ...interface{}) {
0000000000000000000000000000000000000000;;		cfgVal := client.FieldByName("Config")
0000000000000000000000000000000000000000;;		if !cfgVal.IsValid() {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cfg, ok := cfgVal.Interface().(*aws.Config); ok && cfg.Logger != nil {
0000000000000000000000000000000000000000;;			cfg.Logger.Log(fmt.Sprintf(msg, args...))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
