0000000000000000000000000000000000000000;;	package ec2rolecreds
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/ec2_role_provider.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/ec2_role_provider.go][vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds/ec2_role_provider.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/ec2metadata"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderName provides a name of EC2Role provider
0000000000000000000000000000000000000000;;	const ProviderName = "EC2RoleProvider"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A EC2RoleProvider retrieves credentials from the EC2 service, and keeps track if
0000000000000000000000000000000000000000;;	// those credentials are expired.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example how to configure the EC2RoleProvider with custom http Client, Endpoint
0000000000000000000000000000000000000000;;	// or ExpiryWindow
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     p := &ec2rolecreds.EC2RoleProvider{
0000000000000000000000000000000000000000;;	//         // Pass in a custom timeout to be used when requesting
0000000000000000000000000000000000000000;;	//         // IAM EC2 Role credentials.
0000000000000000000000000000000000000000;;	//         Client: ec2metadata.New(sess, aws.Config{
0000000000000000000000000000000000000000;;	//             HTTPClient: &http.Client{Timeout: 10 * time.Second},
0000000000000000000000000000000000000000;;	//         }),
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//         // Do not use early expiry of credentials. If a non zero value is
0000000000000000000000000000000000000000;;	//         // specified the credentials will be expired early
0000000000000000000000000000000000000000;;	//         ExpiryWindow: 0,
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	type EC2RoleProvider struct {
0000000000000000000000000000000000000000;;		credentials.Expiry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Required EC2Metadata client to use when connecting to EC2 metadata service.
0000000000000000000000000000000000000000;;		Client *ec2metadata.EC2Metadata
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExpiryWindow will allow the credentials to trigger refreshing prior to
0000000000000000000000000000000000000000;;		// the credentials actually expiring. This is beneficial so race conditions
0000000000000000000000000000000000000000;;		// with expiring credentials do not cause request to fail unexpectedly
0000000000000000000000000000000000000000;;		// due to ExpiredTokenException exceptions.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// So a ExpiryWindow of 10s would cause calls to IsExpired() to return true
0000000000000000000000000000000000000000;;		// 10 seconds before the credentials are actually expired.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If ExpiryWindow is 0 or less it will be ignored.
0000000000000000000000000000000000000000;;		ExpiryWindow time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCredentials returns a pointer to a new Credentials object wrapping
0000000000000000000000000000000000000000;;	// the EC2RoleProvider. Takes a ConfigProvider to create a EC2Metadata client.
0000000000000000000000000000000000000000;;	// The ConfigProvider is satisfied by the session.Session type.
0000000000000000000000000000000000000000;;	func NewCredentials(c client.ConfigProvider, options ...func(*EC2RoleProvider)) *credentials.Credentials {
0000000000000000000000000000000000000000;;		p := &EC2RoleProvider{
0000000000000000000000000000000000000000;;			Client: ec2metadata.New(c),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, option := range options {
0000000000000000000000000000000000000000;;			option(p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return credentials.NewCredentials(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCredentialsWithClient returns a pointer to a new Credentials object wrapping
0000000000000000000000000000000000000000;;	// the EC2RoleProvider. Takes a EC2Metadata client to use when connecting to EC2
0000000000000000000000000000000000000000;;	// metadata service.
0000000000000000000000000000000000000000;;	func NewCredentialsWithClient(client *ec2metadata.EC2Metadata, options ...func(*EC2RoleProvider)) *credentials.Credentials {
0000000000000000000000000000000000000000;;		p := &EC2RoleProvider{
0000000000000000000000000000000000000000;;			Client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, option := range options {
0000000000000000000000000000000000000000;;			option(p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return credentials.NewCredentials(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve retrieves credentials from the EC2 service.
0000000000000000000000000000000000000000;;	// Error will be returned if the request fails, or unable to extract
0000000000000000000000000000000000000000;;	// the desired credentials.
0000000000000000000000000000000000000000;;	func (m *EC2RoleProvider) Retrieve() (credentials.Value, error) {
0000000000000000000000000000000000000000;;		credsList, err := requestCredList(m.Client)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return credentials.Value{ProviderName: ProviderName}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(credsList) == 0 {
0000000000000000000000000000000000000000;;			return credentials.Value{ProviderName: ProviderName}, awserr.New("EmptyEC2RoleList", "empty EC2 Role list", nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		credsName := credsList[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		roleCreds, err := requestCred(m.Client, credsName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return credentials.Value{ProviderName: ProviderName}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.SetExpiration(roleCreds.Expiration, m.ExpiryWindow)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return credentials.Value{
0000000000000000000000000000000000000000;;			AccessKeyID:     roleCreds.AccessKeyID,
0000000000000000000000000000000000000000;;			SecretAccessKey: roleCreds.SecretAccessKey,
0000000000000000000000000000000000000000;;			SessionToken:    roleCreds.Token,
0000000000000000000000000000000000000000;;			ProviderName:    ProviderName,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ec2RoleCredRespBody provides the shape for unmarshaling credential
0000000000000000000000000000000000000000;;	// request responses.
0000000000000000000000000000000000000000;;	type ec2RoleCredRespBody struct {
0000000000000000000000000000000000000000;;		// Success State
0000000000000000000000000000000000000000;;		Expiration      time.Time
0000000000000000000000000000000000000000;;		AccessKeyID     string
0000000000000000000000000000000000000000;;		SecretAccessKey string
0000000000000000000000000000000000000000;;		Token           string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Error state
0000000000000000000000000000000000000000;;		Code    string
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const iamSecurityCredsPath = "/iam/security-credentials"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// requestCredList requests a list of credentials from the EC2 service.
0000000000000000000000000000000000000000;;	// If there are no credentials, or there is an error making or receiving the request
0000000000000000000000000000000000000000;;	func requestCredList(client *ec2metadata.EC2Metadata) ([]string, error) {
0000000000000000000000000000000000000000;;		resp, err := client.GetMetadata(iamSecurityCredsPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, awserr.New("EC2RoleRequestError", "no EC2 instance role found", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		credsList := []string{}
0000000000000000000000000000000000000000;;		s := bufio.NewScanner(strings.NewReader(resp))
0000000000000000000000000000000000000000;;		for s.Scan() {
0000000000000000000000000000000000000000;;			credsList = append(credsList, s.Text())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := s.Err(); err != nil {
0000000000000000000000000000000000000000;;			return nil, awserr.New("SerializationError", "failed to read EC2 instance role from metadata service", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return credsList, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// requestCred requests the credentials for a specific credentials from the EC2 service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the credentials cannot be found, or there is an error reading the response
0000000000000000000000000000000000000000;;	// and error will be returned.
0000000000000000000000000000000000000000;;	func requestCred(client *ec2metadata.EC2Metadata, credsName string) (ec2RoleCredRespBody, error) {
0000000000000000000000000000000000000000;;		resp, err := client.GetMetadata(path.Join(iamSecurityCredsPath, credsName))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ec2RoleCredRespBody{},
0000000000000000000000000000000000000000;;				awserr.New("EC2RoleRequestError",
0000000000000000000000000000000000000000;;					fmt.Sprintf("failed to get %s EC2 instance role credentials", credsName),
0000000000000000000000000000000000000000;;					err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		respCreds := ec2RoleCredRespBody{}
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(strings.NewReader(resp)).Decode(&respCreds); err != nil {
0000000000000000000000000000000000000000;;			return ec2RoleCredRespBody{},
0000000000000000000000000000000000000000;;				awserr.New("SerializationError",
0000000000000000000000000000000000000000;;					fmt.Sprintf("failed to decode %s EC2 instance role credentials", credsName),
0000000000000000000000000000000000000000;;					err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if respCreds.Code != "Success" {
0000000000000000000000000000000000000000;;			// If an error code was returned something failed requesting the role.
0000000000000000000000000000000000000000;;			return ec2RoleCredRespBody{}, awserr.New(respCreds.Code, respCreds.Message, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return respCreds, nil
0000000000000000000000000000000000000000;;	}
