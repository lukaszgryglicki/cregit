0000000000000000000000000000000000000000;;	package credentials
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/chain_provider.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/chain_provider.go][vendor/github.com/aws/aws-sdk-go/aws/credentials/chain_provider.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrNoValidProvidersFoundInChain Is returned when there are no valid
0000000000000000000000000000000000000000;;		// providers in the ChainProvider.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This has been deprecated. For verbose error messaging set
0000000000000000000000000000000000000000;;		// aws.Config.CredentialsChainVerboseErrors to true
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @readonly
0000000000000000000000000000000000000000;;		ErrNoValidProvidersFoundInChain = awserr.New("NoCredentialProviders",
0000000000000000000000000000000000000000;;			`no valid providers in chain. Deprecated. 
0000000000000000000000000000000000000000;;		For verbose messaging see aws.Config.CredentialsChainVerboseErrors`,
0000000000000000000000000000000000000000;;			nil)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ChainProvider will search for a provider which returns credentials
0000000000000000000000000000000000000000;;	// and cache that provider until Retrieve is called again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The ChainProvider provides a way of chaining multiple providers together
0000000000000000000000000000000000000000;;	// which will pick the first available using priority order of the Providers
0000000000000000000000000000000000000000;;	// in the list.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If none of the Providers retrieve valid credentials Value, ChainProvider's
0000000000000000000000000000000000000000;;	// Retrieve() will return the error ErrNoValidProvidersFoundInChain.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If a Provider is found which returns valid credentials Value ChainProvider
0000000000000000000000000000000000000000;;	// will cache that Provider for all calls to IsExpired(), until Retrieve is
0000000000000000000000000000000000000000;;	// called again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example of ChainProvider to be used with an EnvProvider and EC2RoleProvider.
0000000000000000000000000000000000000000;;	// In this example EnvProvider will first check if any credentials are available
0000000000000000000000000000000000000000;;	// via the environment variables. If there are none ChainProvider will check
0000000000000000000000000000000000000000;;	// the next Provider in the list, EC2RoleProvider in this case. If EC2RoleProvider
0000000000000000000000000000000000000000;;	// does not return any credentials ChainProvider will return the error
0000000000000000000000000000000000000000;;	// ErrNoValidProvidersFoundInChain
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     creds := NewChainCredentials(
0000000000000000000000000000000000000000;;	//         []Provider{
0000000000000000000000000000000000000000;;	//             &EnvProvider{},
0000000000000000000000000000000000000000;;	//             &EC2RoleProvider{
0000000000000000000000000000000000000000;;	//                 Client: ec2metadata.New(sess),
0000000000000000000000000000000000000000;;	//             },
0000000000000000000000000000000000000000;;	//         })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Usage of ChainCredentials with aws.Config
0000000000000000000000000000000000000000;;	//     svc := ec2.New(&aws.Config{Credentials: creds})
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type ChainProvider struct {
0000000000000000000000000000000000000000;;		Providers     []Provider
0000000000000000000000000000000000000000;;		curr          Provider
0000000000000000000000000000000000000000;;		VerboseErrors bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewChainCredentials returns a pointer to a new Credentials object
0000000000000000000000000000000000000000;;	// wrapping a chain of providers.
0000000000000000000000000000000000000000;;	func NewChainCredentials(providers []Provider) *Credentials {
0000000000000000000000000000000000000000;;		return NewCredentials(&ChainProvider{
0000000000000000000000000000000000000000;;			Providers: append([]Provider{}, providers...),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve returns the credentials value or error if no provider returned
0000000000000000000000000000000000000000;;	// without error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If a provider is found it will be cached and any calls to IsExpired()
0000000000000000000000000000000000000000;;	// will return the expired state of the cached provider.
0000000000000000000000000000000000000000;;	func (c *ChainProvider) Retrieve() (Value, error) {
0000000000000000000000000000000000000000;;		var errs []error
0000000000000000000000000000000000000000;;		for _, p := range c.Providers {
0000000000000000000000000000000000000000;;			creds, err := p.Retrieve()
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				c.curr = p
0000000000000000000000000000000000000000;;				return creds, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.curr = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		err = ErrNoValidProvidersFoundInChain
0000000000000000000000000000000000000000;;		if c.VerboseErrors {
0000000000000000000000000000000000000000;;			err = awserr.NewBatchError("NoCredentialProviders", "no valid providers in chain", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Value{}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsExpired will returned the expired state of the currently cached provider
0000000000000000000000000000000000000000;;	// if there is one.  If there is no current provider, true will be returned.
0000000000000000000000000000000000000000;;	func (c *ChainProvider) IsExpired() bool {
0000000000000000000000000000000000000000;;		if c.curr != nil {
0000000000000000000000000000000000000000;;			return c.curr.IsExpired()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
