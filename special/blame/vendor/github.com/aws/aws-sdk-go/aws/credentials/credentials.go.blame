0000000000000000000000000000000000000000;;	// Package credentials provides credential retrieval and management
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Credentials is the primary method of getting access to and managing
0000000000000000000000000000000000000000;;	// credentials Values. Using dependency injection retrieval of the credential
0000000000000000000000000000000000000000;;	// values is handled by a object which satisfies the Provider interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default the Credentials.Get() will cache the successful result of a
0000000000000000000000000000000000000000;;	// Provider's Retrieve() until Provider.IsExpired() returns true. At which
0000000000000000000000000000000000000000;;	// point Credentials will call Provider's Retrieve() to get new credential Value.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Provider is responsible for determining when credentials Value have expired.
0000000000000000000000000000000000000000;;	// It is also important to note that Credentials will always call Retrieve the
0000000000000000000000000000000000000000;;	// first time Credentials.Get() is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example of using the environment variable credentials.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     creds := NewEnvCredentials()
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Retrieve the credentials value
0000000000000000000000000000000000000000;;	//     credValue, err := creds.Get()
0000000000000000000000000000000000000000;;	//     if err != nil {
0000000000000000000000000000000000000000;;	//         // handle error
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example of forcing credentials to expire and be refreshed on the next Get().
0000000000000000000000000000000000000000;;	// This may be helpful to proactively expire credentials and refresh them sooner
0000000000000000000000000000000000000000;;	// than they would naturally expire on their own.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     creds := NewCredentials(&EC2RoleProvider{})
0000000000000000000000000000000000000000;;	//     creds.Expire()
0000000000000000000000000000000000000000;;	//     credsValue, err := creds.Get()
0000000000000000000000000000000000000000;;	//     // New credentials will be retrieved instead of from cache.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Custom Provider
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Each Provider built into this package also provides a helper method to generate
0000000000000000000000000000000000000000;;	// a Credentials pointer setup with the provider. To use a custom Provider just
0000000000000000000000000000000000000000;;	// create a type which satisfies the Provider interface and pass it to the
0000000000000000000000000000000000000000;;	// NewCredentials method.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     type MyProvider struct{}
0000000000000000000000000000000000000000;;	//     func (m *MyProvider) Retrieve() (Value, error) {...}
0000000000000000000000000000000000000000;;	//     func (m *MyProvider) IsExpired() bool {...}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     creds := NewCredentials(&MyProvider{})
0000000000000000000000000000000000000000;;	//     credValue, err := creds.Get()
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package credentials
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/credentials.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/credentials.go][vendor/github.com/aws/aws-sdk-go/aws/credentials/credentials.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AnonymousCredentials is an empty Credential object that can be used as
0000000000000000000000000000000000000000;;	// dummy placeholder credentials for requests that do not need signed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This Credentials can be used to configure a service to not sign requests
0000000000000000000000000000000000000000;;	// when making service API calls. For example, when accessing public
0000000000000000000000000000000000000000;;	// s3 buckets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     svc := s3.New(&aws.Config{Credentials: AnonymousCredentials})
0000000000000000000000000000000000000000;;	//     // Access public S3 buckets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// @readonly
0000000000000000000000000000000000000000;;	var AnonymousCredentials = NewStaticCredentials("", "", "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Value is the AWS credentials value for individual credential fields.
0000000000000000000000000000000000000000;;	type Value struct {
0000000000000000000000000000000000000000;;		// AWS Access key ID
0000000000000000000000000000000000000000;;		AccessKeyID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AWS Secret Access Key
0000000000000000000000000000000000000000;;		SecretAccessKey string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AWS Session Token
0000000000000000000000000000000000000000;;		SessionToken string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Provider used to get credentials
0000000000000000000000000000000000000000;;		ProviderName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Provider is the interface for any component which will provide credentials
0000000000000000000000000000000000000000;;	// Value. A provider is required to manage its own Expired state, and what to
0000000000000000000000000000000000000000;;	// be expired means.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Provider should not need to implement its own mutexes, because
0000000000000000000000000000000000000000;;	// that will be managed by Credentials.
0000000000000000000000000000000000000000;;	type Provider interface {
0000000000000000000000000000000000000000;;		// Refresh returns nil if it successfully retrieved the value.
0000000000000000000000000000000000000000;;		// Error is returned if the value were not obtainable, or empty.
0000000000000000000000000000000000000000;;		Retrieve() (Value, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IsExpired returns if the credentials are no longer valid, and need
0000000000000000000000000000000000000000;;		// to be retrieved.
0000000000000000000000000000000000000000;;		IsExpired() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Expiry provides shared expiration logic to be used by credentials
0000000000000000000000000000000000000000;;	// providers to implement expiry functionality.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The best method to use this struct is as an anonymous field within the
0000000000000000000000000000000000000000;;	// provider's struct.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//     type EC2RoleProvider struct {
0000000000000000000000000000000000000000;;	//         Expiry
0000000000000000000000000000000000000000;;	//         ...
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	type Expiry struct {
0000000000000000000000000000000000000000;;		// The date/time when to expire on
0000000000000000000000000000000000000000;;		expiration time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If set will be used by IsExpired to determine the current time.
0000000000000000000000000000000000000000;;		// Defaults to time.Now if CurrentTime is not set.  Available for testing
0000000000000000000000000000000000000000;;		// to be able to mock out the current time.
0000000000000000000000000000000000000000;;		CurrentTime func() time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExpiration sets the expiration IsExpired will check when called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If window is greater than 0 the expiration time will be reduced by the
0000000000000000000000000000000000000000;;	// window value.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Using a window is helpful to trigger credentials to expire sooner than
0000000000000000000000000000000000000000;;	// the expiration time given to ensure no requests are made with expired
0000000000000000000000000000000000000000;;	// tokens.
0000000000000000000000000000000000000000;;	func (e *Expiry) SetExpiration(expiration time.Time, window time.Duration) {
0000000000000000000000000000000000000000;;		e.expiration = expiration
0000000000000000000000000000000000000000;;		if window > 0 {
0000000000000000000000000000000000000000;;			e.expiration = e.expiration.Add(-window)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsExpired returns if the credentials are expired.
0000000000000000000000000000000000000000;;	func (e *Expiry) IsExpired() bool {
0000000000000000000000000000000000000000;;		if e.CurrentTime == nil {
0000000000000000000000000000000000000000;;			e.CurrentTime = time.Now
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.expiration.Before(e.CurrentTime())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Credentials provides synchronous safe retrieval of AWS credentials Value.
0000000000000000000000000000000000000000;;	// Credentials will cache the credentials value until they expire. Once the value
0000000000000000000000000000000000000000;;	// expires the next Get will attempt to retrieve valid credentials.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Credentials is safe to use across multiple goroutines and will manage the
0000000000000000000000000000000000000000;;	// synchronous state so the Providers do not need to implement their own
0000000000000000000000000000000000000000;;	// synchronization.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The first Credentials.Get() will always call Provider.Retrieve() to get the
0000000000000000000000000000000000000000;;	// first instance of the credentials Value. All calls to Get() after that
0000000000000000000000000000000000000000;;	// will return the cached credentials Value until IsExpired() returns true.
0000000000000000000000000000000000000000;;	type Credentials struct {
0000000000000000000000000000000000000000;;		creds        Value
0000000000000000000000000000000000000000;;		forceRefresh bool
0000000000000000000000000000000000000000;;		m            sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provider Provider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCredentials returns a pointer to a new Credentials with the provider set.
0000000000000000000000000000000000000000;;	func NewCredentials(provider Provider) *Credentials {
0000000000000000000000000000000000000000;;		return &Credentials{
0000000000000000000000000000000000000000;;			provider:     provider,
0000000000000000000000000000000000000000;;			forceRefresh: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns the credentials value, or error if the credentials Value failed
0000000000000000000000000000000000000000;;	// to be retrieved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Will return the cached credentials Value if it has not expired. If the
0000000000000000000000000000000000000000;;	// credentials Value has expired the Provider's Retrieve() will be called
0000000000000000000000000000000000000000;;	// to refresh the credentials.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If Credentials.Expire() was called the credentials Value will be force
0000000000000000000000000000000000000000;;	// expired, and the next call to Get() will cause them to be refreshed.
0000000000000000000000000000000000000000;;	func (c *Credentials) Get() (Value, error) {
0000000000000000000000000000000000000000;;		c.m.Lock()
0000000000000000000000000000000000000000;;		defer c.m.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if c.isExpired() {
0000000000000000000000000000000000000000;;			creds, err := c.provider.Retrieve()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return Value{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.creds = creds
0000000000000000000000000000000000000000;;			c.forceRefresh = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return c.creds, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expire expires the credentials and forces them to be retrieved on the
0000000000000000000000000000000000000000;;	// next call to Get().
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This will override the Provider's expired state, and force Credentials
0000000000000000000000000000000000000000;;	// to call the Provider's Retrieve().
0000000000000000000000000000000000000000;;	func (c *Credentials) Expire() {
0000000000000000000000000000000000000000;;		c.m.Lock()
0000000000000000000000000000000000000000;;		defer c.m.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.forceRefresh = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsExpired returns if the credentials are no longer valid, and need
0000000000000000000000000000000000000000;;	// to be retrieved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the Credentials were forced to be expired with Expire() this will
0000000000000000000000000000000000000000;;	// reflect that override.
0000000000000000000000000000000000000000;;	func (c *Credentials) IsExpired() bool {
0000000000000000000000000000000000000000;;		c.m.Lock()
0000000000000000000000000000000000000000;;		defer c.m.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return c.isExpired()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isExpired helper method wrapping the definition of expired credentials.
0000000000000000000000000000000000000000;;	func (c *Credentials) isExpired() bool {
0000000000000000000000000000000000000000;;		return c.forceRefresh || c.provider.IsExpired()
0000000000000000000000000000000000000000;;	}
