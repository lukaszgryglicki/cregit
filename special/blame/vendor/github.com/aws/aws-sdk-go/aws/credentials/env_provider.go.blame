0000000000000000000000000000000000000000;;	package credentials
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/env_provider.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/env_provider.go][vendor/github.com/aws/aws-sdk-go/aws/credentials/env_provider.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnvProviderName provides a name of Env provider
0000000000000000000000000000000000000000;;	const EnvProviderName = "EnvProvider"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrAccessKeyIDNotFound is returned when the AWS Access Key ID can't be
0000000000000000000000000000000000000000;;		// found in the process's environment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @readonly
0000000000000000000000000000000000000000;;		ErrAccessKeyIDNotFound = awserr.New("EnvAccessKeyNotFound", "AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY not found in environment", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrSecretAccessKeyNotFound is returned when the AWS Secret Access Key
0000000000000000000000000000000000000000;;		// can't be found in the process's environment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @readonly
0000000000000000000000000000000000000000;;		ErrSecretAccessKeyNotFound = awserr.New("EnvSecretNotFound", "AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY not found in environment", nil)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A EnvProvider retrieves credentials from the environment variables of the
0000000000000000000000000000000000000000;;	// running process. Environment credentials never expire.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Environment variables used:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// * Access Key ID:     AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY
0000000000000000000000000000000000000000;;	// * Secret Access Key: AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY
0000000000000000000000000000000000000000;;	type EnvProvider struct {
0000000000000000000000000000000000000000;;		retrieved bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEnvCredentials returns a pointer to a new Credentials object
0000000000000000000000000000000000000000;;	// wrapping the environment variable provider.
0000000000000000000000000000000000000000;;	func NewEnvCredentials() *Credentials {
0000000000000000000000000000000000000000;;		return NewCredentials(&EnvProvider{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve retrieves the keys from the environment.
0000000000000000000000000000000000000000;;	func (e *EnvProvider) Retrieve() (Value, error) {
0000000000000000000000000000000000000000;;		e.retrieved = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		id := os.Getenv("AWS_ACCESS_KEY_ID")
0000000000000000000000000000000000000000;;		if id == "" {
0000000000000000000000000000000000000000;;			id = os.Getenv("AWS_ACCESS_KEY")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret := os.Getenv("AWS_SECRET_ACCESS_KEY")
0000000000000000000000000000000000000000;;		if secret == "" {
0000000000000000000000000000000000000000;;			secret = os.Getenv("AWS_SECRET_KEY")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if id == "" {
0000000000000000000000000000000000000000;;			return Value{ProviderName: EnvProviderName}, ErrAccessKeyIDNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if secret == "" {
0000000000000000000000000000000000000000;;			return Value{ProviderName: EnvProviderName}, ErrSecretAccessKeyNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		e.retrieved = true
0000000000000000000000000000000000000000;;		return Value{
0000000000000000000000000000000000000000;;			AccessKeyID:     id,
0000000000000000000000000000000000000000;;			SecretAccessKey: secret,
0000000000000000000000000000000000000000;;			SessionToken:    os.Getenv("AWS_SESSION_TOKEN"),
0000000000000000000000000000000000000000;;			ProviderName:    EnvProviderName,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsExpired returns if the credentials have been retrieved.
0000000000000000000000000000000000000000;;	func (e *EnvProvider) IsExpired() bool {
0000000000000000000000000000000000000000;;		return !e.retrieved
0000000000000000000000000000000000000000;;	}
