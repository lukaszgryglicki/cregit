0000000000000000000000000000000000000000;;	package credentials
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/shared_credentials_provider.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/credentials/shared_credentials_provider.go][vendor/github.com/aws/aws-sdk-go/aws/credentials/shared_credentials_provider.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-ini/ini"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SharedCredsProviderName provides a name of SharedCreds provider
0000000000000000000000000000000000000000;;	const SharedCredsProviderName = "SharedCredentialsProvider"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrSharedCredentialsHomeNotFound is emitted when the user directory cannot be found.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @readonly
0000000000000000000000000000000000000000;;		ErrSharedCredentialsHomeNotFound = awserr.New("UserHomeNotFound", "user home directory not found.", nil)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A SharedCredentialsProvider retrieves credentials from the current user's home
0000000000000000000000000000000000000000;;	// directory, and keeps track if those credentials are expired.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Profile ini file example: $HOME/.aws/credentials
0000000000000000000000000000000000000000;;	type SharedCredentialsProvider struct {
0000000000000000000000000000000000000000;;		// Path to the shared credentials file.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If empty will look for "AWS_SHARED_CREDENTIALS_FILE" env variable. If the
0000000000000000000000000000000000000000;;		// env value is empty will default to current user's home directory.
0000000000000000000000000000000000000000;;		// Linux/OSX: "$HOME/.aws/credentials"
0000000000000000000000000000000000000000;;		// Windows:   "%USERPROFILE%\.aws\credentials"
0000000000000000000000000000000000000000;;		Filename string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AWS Profile to extract credentials from the shared credentials file. If empty
0000000000000000000000000000000000000000;;		// will default to environment variable "AWS_PROFILE" or "default" if
0000000000000000000000000000000000000000;;		// environment variable is also not set.
0000000000000000000000000000000000000000;;		Profile string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// retrieved states if the credentials have been successfully retrieved.
0000000000000000000000000000000000000000;;		retrieved bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSharedCredentials returns a pointer to a new Credentials object
0000000000000000000000000000000000000000;;	// wrapping the Profile file provider.
0000000000000000000000000000000000000000;;	func NewSharedCredentials(filename, profile string) *Credentials {
0000000000000000000000000000000000000000;;		return NewCredentials(&SharedCredentialsProvider{
0000000000000000000000000000000000000000;;			Filename: filename,
0000000000000000000000000000000000000000;;			Profile:  profile,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve reads and extracts the shared credentials from the current
0000000000000000000000000000000000000000;;	// users home directory.
0000000000000000000000000000000000000000;;	func (p *SharedCredentialsProvider) Retrieve() (Value, error) {
0000000000000000000000000000000000000000;;		p.retrieved = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		filename, err := p.filename()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Value{ProviderName: SharedCredsProviderName}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		creds, err := loadProfile(filename, p.profile())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Value{ProviderName: SharedCredsProviderName}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.retrieved = true
0000000000000000000000000000000000000000;;		return creds, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsExpired returns if the shared credentials have expired.
0000000000000000000000000000000000000000;;	func (p *SharedCredentialsProvider) IsExpired() bool {
0000000000000000000000000000000000000000;;		return !p.retrieved
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// loadProfiles loads from the file pointed to by shared credentials filename for profile.
0000000000000000000000000000000000000000;;	// The credentials retrieved from the profile will be returned or error. Error will be
0000000000000000000000000000000000000000;;	// returned if it fails to read from the file, or the data is invalid.
0000000000000000000000000000000000000000;;	func loadProfile(filename, profile string) (Value, error) {
0000000000000000000000000000000000000000;;		config, err := ini.Load(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Value{ProviderName: SharedCredsProviderName}, awserr.New("SharedCredsLoad", "failed to load shared credentials file", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		iniProfile, err := config.GetSection(profile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Value{ProviderName: SharedCredsProviderName}, awserr.New("SharedCredsLoad", "failed to get profile", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		id, err := iniProfile.GetKey("aws_access_key_id")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Value{ProviderName: SharedCredsProviderName}, awserr.New("SharedCredsAccessKey",
0000000000000000000000000000000000000000;;				fmt.Sprintf("shared credentials %s in %s did not contain aws_access_key_id", profile, filename),
0000000000000000000000000000000000000000;;				err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret, err := iniProfile.GetKey("aws_secret_access_key")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Value{ProviderName: SharedCredsProviderName}, awserr.New("SharedCredsSecret",
0000000000000000000000000000000000000000;;				fmt.Sprintf("shared credentials %s in %s did not contain aws_secret_access_key", profile, filename),
0000000000000000000000000000000000000000;;				nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Default to empty string if not found
0000000000000000000000000000000000000000;;		token := iniProfile.Key("aws_session_token")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Value{
0000000000000000000000000000000000000000;;			AccessKeyID:     id.String(),
0000000000000000000000000000000000000000;;			SecretAccessKey: secret.String(),
0000000000000000000000000000000000000000;;			SessionToken:    token.String(),
0000000000000000000000000000000000000000;;			ProviderName:    SharedCredsProviderName,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// filename returns the filename to use to read AWS shared credentials.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Will return an error if the user's home directory path cannot be found.
0000000000000000000000000000000000000000;;	func (p *SharedCredentialsProvider) filename() (string, error) {
0000000000000000000000000000000000000000;;		if p.Filename == "" {
0000000000000000000000000000000000000000;;			if p.Filename = os.Getenv("AWS_SHARED_CREDENTIALS_FILE"); p.Filename != "" {
0000000000000000000000000000000000000000;;				return p.Filename, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			homeDir := os.Getenv("HOME") // *nix
0000000000000000000000000000000000000000;;			if homeDir == "" {           // Windows
0000000000000000000000000000000000000000;;				homeDir = os.Getenv("USERPROFILE")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if homeDir == "" {
0000000000000000000000000000000000000000;;				return "", ErrSharedCredentialsHomeNotFound
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			p.Filename = filepath.Join(homeDir, ".aws", "credentials")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return p.Filename, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// profile returns the AWS shared credentials profile.  If empty will read
0000000000000000000000000000000000000000;;	// environment variable "AWS_PROFILE". If that is not set profile will
0000000000000000000000000000000000000000;;	// return "default".
0000000000000000000000000000000000000000;;	func (p *SharedCredentialsProvider) profile() string {
0000000000000000000000000000000000000000;;		if p.Profile == "" {
0000000000000000000000000000000000000000;;			p.Profile = os.Getenv("AWS_PROFILE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.Profile == "" {
0000000000000000000000000000000000000000;;			p.Profile = "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return p.Profile
0000000000000000000000000000000000000000;;	}
