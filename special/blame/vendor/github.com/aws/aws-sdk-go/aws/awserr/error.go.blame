0000000000000000000000000000000000000000;;	// Package awserr represents API error interface accessors for the SDK.
0000000000000000000000000000000000000000;;	package awserr
f49e160748842d0b155b75ebbab6d2b5b6b08571;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/awserr/error.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/awserr/error.go][vendor/github.com/aws/aws-sdk-go/aws/awserr/error.go];	
0000000000000000000000000000000000000000;;	// An Error wraps lower level errors with code, message and an original error.
0000000000000000000000000000000000000000;;	// The underlying concrete error type may also satisfy other interfaces which
0000000000000000000000000000000000000000;;	// can be to used to obtain more specific information about the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Calling Error() or String() will always include the full information about
0000000000000000000000000000000000000000;;	// an error based on its underlying type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     output, err := s3manage.Upload(svc, input, opts)
0000000000000000000000000000000000000000;;	//     if err != nil {
0000000000000000000000000000000000000000;;	//         if awsErr, ok := err.(awserr.Error); ok {
0000000000000000000000000000000000000000;;	//             // Get error details
0000000000000000000000000000000000000000;;	//             log.Println("Error:", awsErr.Code(), awsErr.Message())
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//             // Prints out full error message, including original error if there was one.
0000000000000000000000000000000000000000;;	//             log.Println("Error:", awsErr.Error())
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//             // Get original error
0000000000000000000000000000000000000000;;	//             if origErr := awsErr.OrigErr(); origErr != nil {
0000000000000000000000000000000000000000;;	//                 // operate on original error.
0000000000000000000000000000000000000000;;	//             }
0000000000000000000000000000000000000000;;	//         } else {
0000000000000000000000000000000000000000;;	//             fmt.Println(err.Error())
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type Error interface {
0000000000000000000000000000000000000000;;		// Satisfy the generic error interface.
0000000000000000000000000000000000000000;;		error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the short phrase depicting the classification of the error.
0000000000000000000000000000000000000000;;		Code() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the error details message.
0000000000000000000000000000000000000000;;		Message() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the original error if one was set.  Nil is returned if not set.
0000000000000000000000000000000000000000;;		OrigErr() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BatchError is a batch of errors which also wraps lower level errors with
0000000000000000000000000000000000000000;;	// code, message, and original errors. Calling Error() will include all errors
0000000000000000000000000000000000000000;;	// that occurred in the batch.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deprecated: Replaced with BatchedErrors. Only defined for backwards
0000000000000000000000000000000000000000;;	// compatibility.
0000000000000000000000000000000000000000;;	type BatchError interface {
0000000000000000000000000000000000000000;;		// Satisfy the generic error interface.
0000000000000000000000000000000000000000;;		error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the short phrase depicting the classification of the error.
0000000000000000000000000000000000000000;;		Code() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the error details message.
0000000000000000000000000000000000000000;;		Message() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the original error if one was set.  Nil is returned if not set.
0000000000000000000000000000000000000000;;		OrigErrs() []error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BatchedErrors is a batch of errors which also wraps lower level errors with
0000000000000000000000000000000000000000;;	// code, message, and original errors. Calling Error() will include all errors
0000000000000000000000000000000000000000;;	// that occurred in the batch.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Replaces BatchError
0000000000000000000000000000000000000000;;	type BatchedErrors interface {
0000000000000000000000000000000000000000;;		// Satisfy the base Error interface.
0000000000000000000000000000000000000000;;		Error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the original error if one was set.  Nil is returned if not set.
0000000000000000000000000000000000000000;;		OrigErrs() []error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns an Error object described by the code, message, and origErr.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If origErr satisfies the Error interface it will not be wrapped within a new
0000000000000000000000000000000000000000;;	// Error object and will instead be returned.
0000000000000000000000000000000000000000;;	func New(code, message string, origErr error) Error {
0000000000000000000000000000000000000000;;		var errs []error
0000000000000000000000000000000000000000;;		if origErr != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, origErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newBaseError(code, message, errs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBatchError returns an BatchedErrors with a collection of errors as an
0000000000000000000000000000000000000000;;	// array of errors.
0000000000000000000000000000000000000000;;	func NewBatchError(code, message string, errs []error) BatchedErrors {
0000000000000000000000000000000000000000;;		return newBaseError(code, message, errs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A RequestFailure is an interface to extract request failure information from
0000000000000000000000000000000000000000;;	// an Error such as the request ID of the failed request returned by a service.
0000000000000000000000000000000000000000;;	// RequestFailures may not always have a requestID value if the request failed
0000000000000000000000000000000000000000;;	// prior to reaching the service such as a connection error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     output, err := s3manage.Upload(svc, input, opts)
0000000000000000000000000000000000000000;;	//     if err != nil {
0000000000000000000000000000000000000000;;	//         if reqerr, ok := err.(RequestFailure); ok {
0000000000000000000000000000000000000000;;	//             log.Println("Request failed", reqerr.Code(), reqerr.Message(), reqerr.RequestID())
0000000000000000000000000000000000000000;;	//         } else {
0000000000000000000000000000000000000000;;	//             log.Println("Error:", err.Error())
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Combined with awserr.Error:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    output, err := s3manage.Upload(svc, input, opts)
0000000000000000000000000000000000000000;;	//    if err != nil {
0000000000000000000000000000000000000000;;	//        if awsErr, ok := err.(awserr.Error); ok {
0000000000000000000000000000000000000000;;	//            // Generic AWS Error with Code, Message, and original error (if any)
0000000000000000000000000000000000000000;;	//            fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//            if reqErr, ok := err.(awserr.RequestFailure); ok {
0000000000000000000000000000000000000000;;	//                // A service error occurred
0000000000000000000000000000000000000000;;	//                fmt.Println(reqErr.StatusCode(), reqErr.RequestID())
0000000000000000000000000000000000000000;;	//            }
0000000000000000000000000000000000000000;;	//        } else {
0000000000000000000000000000000000000000;;	//            fmt.Println(err.Error())
0000000000000000000000000000000000000000;;	//        }
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type RequestFailure interface {
0000000000000000000000000000000000000000;;		Error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status code of the HTTP response.
0000000000000000000000000000000000000000;;		StatusCode() int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The request ID returned by the service for a request failure. This will
0000000000000000000000000000000000000000;;		// be empty if no request ID is available such as the request failed due
0000000000000000000000000000000000000000;;		// to a connection error.
0000000000000000000000000000000000000000;;		RequestID() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRequestFailure returns a new request error wrapper for the given Error
0000000000000000000000000000000000000000;;	// provided.
0000000000000000000000000000000000000000;;	func NewRequestFailure(err Error, statusCode int, reqID string) RequestFailure {
0000000000000000000000000000000000000000;;		return newRequestError(err, statusCode, reqID)
0000000000000000000000000000000000000000;;	}
