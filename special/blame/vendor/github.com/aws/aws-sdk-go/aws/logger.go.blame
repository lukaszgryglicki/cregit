0000000000000000000000000000000000000000;;	package aws
ba8371b1ad4f58d6c37fa3b43b005c306f9f2d92;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/logger.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/logger.go][vendor/github.com/aws/aws-sdk-go/aws/logger.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A LogLevelType defines the level logging should be performed at. Used to instruct
0000000000000000000000000000000000000000;;	// the SDK which statements should be logged.
0000000000000000000000000000000000000000;;	type LogLevelType uint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogLevel returns the pointer to a LogLevel. Should be used to workaround
0000000000000000000000000000000000000000;;	// not being able to take the address of a non-composite literal.
0000000000000000000000000000000000000000;;	func LogLevel(l LogLevelType) *LogLevelType {
0000000000000000000000000000000000000000;;		return &l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value returns the LogLevel value or the default value LogOff if the LogLevel
0000000000000000000000000000000000000000;;	// is nil. Safe to use on nil value LogLevelTypes.
0000000000000000000000000000000000000000;;	func (l *LogLevelType) Value() LogLevelType {
0000000000000000000000000000000000000000;;		if l != nil {
0000000000000000000000000000000000000000;;			return *l
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return LogOff
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Matches returns true if the v LogLevel is enabled by this LogLevel. Should be
0000000000000000000000000000000000000000;;	// used with logging sub levels. Is safe to use on nil value LogLevelTypes. If
0000000000000000000000000000000000000000;;	// LogLevel is nill, will default to LogOff comparison.
0000000000000000000000000000000000000000;;	func (l *LogLevelType) Matches(v LogLevelType) bool {
0000000000000000000000000000000000000000;;		c := l.Value()
0000000000000000000000000000000000000000;;		return c&v == v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AtLeast returns true if this LogLevel is at least high enough to satisfies v.
0000000000000000000000000000000000000000;;	// Is safe to use on nil value LogLevelTypes. If LogLevel is nill, will default
0000000000000000000000000000000000000000;;	// to LogOff comparison.
0000000000000000000000000000000000000000;;	func (l *LogLevelType) AtLeast(v LogLevelType) bool {
0000000000000000000000000000000000000000;;		c := l.Value()
0000000000000000000000000000000000000000;;		return c >= v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// LogOff states that no logging should be performed by the SDK. This is the
0000000000000000000000000000000000000000;;		// default state of the SDK, and should be use to disable all logging.
0000000000000000000000000000000000000000;;		LogOff LogLevelType = iota * 0x1000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogDebug state that debug output should be logged by the SDK. This should
0000000000000000000000000000000000000000;;		// be used to inspect request made and responses received.
0000000000000000000000000000000000000000;;		LogDebug
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Debug Logging Sub Levels
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// LogDebugWithSigning states that the SDK should log request signing and
0000000000000000000000000000000000000000;;		// presigning events. This should be used to log the signing details of
0000000000000000000000000000000000000000;;		// requests for debugging. Will also enable LogDebug.
0000000000000000000000000000000000000000;;		LogDebugWithSigning LogLevelType = LogDebug | (1 << iota)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogDebugWithHTTPBody states the SDK should log HTTP request and response
0000000000000000000000000000000000000000;;		// HTTP bodys in addition to the headers and path. This should be used to
0000000000000000000000000000000000000000;;		// see the body content of requests and responses made while using the SDK
0000000000000000000000000000000000000000;;		// Will also enable LogDebug.
0000000000000000000000000000000000000000;;		LogDebugWithHTTPBody
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogDebugWithRequestRetries states the SDK should log when service requests will
0000000000000000000000000000000000000000;;		// be retried. This should be used to log when you want to log when service
0000000000000000000000000000000000000000;;		// requests are being retried. Will also enable LogDebug.
0000000000000000000000000000000000000000;;		LogDebugWithRequestRetries
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogDebugWithRequestErrors states the SDK should log when service requests fail
0000000000000000000000000000000000000000;;		// to build, send, validate, or unmarshal.
0000000000000000000000000000000000000000;;		LogDebugWithRequestErrors
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Logger is a minimalistic interface for the SDK to log messages to. Should
0000000000000000000000000000000000000000;;	// be used to provide custom logging writers for the SDK to use.
0000000000000000000000000000000000000000;;	type Logger interface {
0000000000000000000000000000000000000000;;		Log(...interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A LoggerFunc is a convenience type to convert a function taking a variadic
0000000000000000000000000000000000000000;;	// list of arguments and wrap it so the Logger interface can be used.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//     s3.New(sess, &aws.Config{Logger: aws.LoggerFunc(func(args ...interface{}) {
0000000000000000000000000000000000000000;;	//         fmt.Fprintln(os.Stdout, args...)
0000000000000000000000000000000000000000;;	//     })})
0000000000000000000000000000000000000000;;	type LoggerFunc func(...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log calls the wrapped function with the arguments provided
0000000000000000000000000000000000000000;;	func (f LoggerFunc) Log(args ...interface{}) {
0000000000000000000000000000000000000000;;		f(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultLogger returns a Logger which will write log messages to stdout, and
0000000000000000000000000000000000000000;;	// use same formatting runes as the stdlib log.Logger
0000000000000000000000000000000000000000;;	func NewDefaultLogger() Logger {
0000000000000000000000000000000000000000;;		return &defaultLogger{
0000000000000000000000000000000000000000;;			logger: log.New(os.Stdout, "", log.LstdFlags),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A defaultLogger provides a minimalistic logger satisfying the Logger interface.
0000000000000000000000000000000000000000;;	type defaultLogger struct {
0000000000000000000000000000000000000000;;		logger *log.Logger
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log logs the parameters to the stdlib logger. See log.Println.
0000000000000000000000000000000000000000;;	func (l defaultLogger) Log(args ...interface{}) {
0000000000000000000000000000000000000000;;		l.logger.Println(args...)
0000000000000000000000000000000000000000;;	}
