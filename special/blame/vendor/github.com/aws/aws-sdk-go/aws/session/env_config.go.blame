0000000000000000000000000000000000000000;;	package session
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// envConfig is a collection of environment values the SDK will read
0000000000000000000000000000000000000000;;	// setup config from. All environment values are optional. But some values
0000000000000000000000000000000000000000;;	// such as credentials require multiple values to be complete or the values
0000000000000000000000000000000000000000;;	// will be ignored.
0000000000000000000000000000000000000000;;	type envConfig struct {
0000000000000000000000000000000000000000;;		// Environment configuration values. If set both Access Key ID and Secret Access
0000000000000000000000000000000000000000;;		// Key must be provided. Session Token and optionally also be provided, but is
0000000000000000000000000000000000000000;;		// not required.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	# Access Key ID
0000000000000000000000000000000000000000;;		//	AWS_ACCESS_KEY_ID=AKID
0000000000000000000000000000000000000000;;		//	AWS_ACCESS_KEY=AKID # only read if AWS_ACCESS_KEY_ID is not set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	# Secret Access Key
0000000000000000000000000000000000000000;;		//	AWS_SECRET_ACCESS_KEY=SECRET
0000000000000000000000000000000000000000;;		//	AWS_SECRET_KEY=SECRET=SECRET # only read if AWS_SECRET_ACCESS_KEY is not set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	# Session Token
0000000000000000000000000000000000000000;;		//	AWS_SESSION_TOKEN=TOKEN
0000000000000000000000000000000000000000;;		Creds credentials.Value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Region value will instruct the SDK where to make service API requests to. If is
0000000000000000000000000000000000000000;;		// not provided in the environment the region must be provided before a service
0000000000000000000000000000000000000000;;		// client request is made.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	AWS_REGION=us-east-1
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	# AWS_DEFAULT_REGION is only read if AWS_SDK_LOAD_CONFIG is also set,
0000000000000000000000000000000000000000;;		//	# and AWS_REGION is not also set.
0000000000000000000000000000000000000000;;		//	AWS_DEFAULT_REGION=us-east-1
0000000000000000000000000000000000000000;;		Region string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Profile name the SDK should load use when loading shared configuration from the
0000000000000000000000000000000000000000;;		// shared configuration files. If not provided "default" will be used as the
0000000000000000000000000000000000000000;;		// profile name.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	AWS_PROFILE=my_profile
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	# AWS_DEFAULT_PROFILE is only read if AWS_SDK_LOAD_CONFIG is also set,
0000000000000000000000000000000000000000;;		//	# and AWS_PROFILE is not also set.
0000000000000000000000000000000000000000;;		//	AWS_DEFAULT_PROFILE=my_profile
0000000000000000000000000000000000000000;;		Profile string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SDK load config instructs the SDK to load the shared config in addition to
0000000000000000000000000000000000000000;;		// shared credentials. This also expands the configuration loaded from the shared
0000000000000000000000000000000000000000;;		// credentials to have parity with the shared config file. This also enables
0000000000000000000000000000000000000000;;		// Region and Profile support for the AWS_DEFAULT_REGION and AWS_DEFAULT_PROFILE
0000000000000000000000000000000000000000;;		// env values as well.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	AWS_SDK_LOAD_CONFIG=1
0000000000000000000000000000000000000000;;		EnableSharedConfig bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Shared credentials file path can be set to instruct the SDK to use an alternate
0000000000000000000000000000000000000000;;		// file for the shared credentials. If not set the file will be loaded from
0000000000000000000000000000000000000000;;		// $HOME/.aws/credentials on Linux/Unix based systems, and
0000000000000000000000000000000000000000;;		// %USERPROFILE%\.aws\credentials on Windows.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	AWS_SHARED_CREDENTIALS_FILE=$HOME/my_shared_credentials
0000000000000000000000000000000000000000;;		SharedCredentialsFile string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Shared config file path can be set to instruct the SDK to use an alternate
0000000000000000000000000000000000000000;;		// file for the shared config. If not set the file will be loaded from
0000000000000000000000000000000000000000;;		// $HOME/.aws/config on Linux/Unix based systems, and
0000000000000000000000000000000000000000;;		// %USERPROFILE%\.aws\config on Windows.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	AWS_CONFIG_FILE=$HOME/my_shared_config
0000000000000000000000000000000000000000;;		SharedConfigFile string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		credAccessEnvKey = []string{
0000000000000000000000000000000000000000;;			"AWS_ACCESS_KEY_ID",
0000000000000000000000000000000000000000;;			"AWS_ACCESS_KEY",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		credSecretEnvKey = []string{
0000000000000000000000000000000000000000;;			"AWS_SECRET_ACCESS_KEY",
0000000000000000000000000000000000000000;;			"AWS_SECRET_KEY",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		credSessionEnvKey = []string{
0000000000000000000000000000000000000000;;			"AWS_SESSION_TOKEN",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		regionEnvKeys = []string{
0000000000000000000000000000000000000000;;			"AWS_REGION",
0000000000000000000000000000000000000000;;			"AWS_DEFAULT_REGION", // Only read if AWS_SDK_LOAD_CONFIG is also set
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		profileEnvKeys = []string{
0000000000000000000000000000000000000000;;			"AWS_PROFILE",
0000000000000000000000000000000000000000;;			"AWS_DEFAULT_PROFILE", // Only read if AWS_SDK_LOAD_CONFIG is also set
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// loadEnvConfig retrieves the SDK's environment configuration.
0000000000000000000000000000000000000000;;	// See `envConfig` for the values that will be retrieved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the environment variable `AWS_SDK_LOAD_CONFIG` is set to a truthy value
0000000000000000000000000000000000000000;;	// the shared SDK config will be loaded in addition to the SDK's specific
0000000000000000000000000000000000000000;;	// configuration values.
0000000000000000000000000000000000000000;;	func loadEnvConfig() envConfig {
0000000000000000000000000000000000000000;;		enableSharedConfig, _ := strconv.ParseBool(os.Getenv("AWS_SDK_LOAD_CONFIG"))
0000000000000000000000000000000000000000;;		return envConfigLoad(enableSharedConfig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// loadEnvSharedConfig retrieves the SDK's environment configuration, and the
0000000000000000000000000000000000000000;;	// SDK shared config. See `envConfig` for the values that will be retrieved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Loads the shared configuration in addition to the SDK's specific configuration.
0000000000000000000000000000000000000000;;	// This will load the same values as `loadEnvConfig` if the `AWS_SDK_LOAD_CONFIG`
0000000000000000000000000000000000000000;;	// environment variable is set.
0000000000000000000000000000000000000000;;	func loadSharedEnvConfig() envConfig {
0000000000000000000000000000000000000000;;		return envConfigLoad(true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func envConfigLoad(enableSharedConfig bool) envConfig {
0000000000000000000000000000000000000000;;		cfg := envConfig{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.EnableSharedConfig = enableSharedConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		setFromEnvVal(&cfg.Creds.AccessKeyID, credAccessEnvKey)
0000000000000000000000000000000000000000;;		setFromEnvVal(&cfg.Creds.SecretAccessKey, credSecretEnvKey)
0000000000000000000000000000000000000000;;		setFromEnvVal(&cfg.Creds.SessionToken, credSessionEnvKey)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Require logical grouping of credentials
0000000000000000000000000000000000000000;;		if len(cfg.Creds.AccessKeyID) == 0 || len(cfg.Creds.SecretAccessKey) == 0 {
0000000000000000000000000000000000000000;;			cfg.Creds = credentials.Value{}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			cfg.Creds.ProviderName = "EnvConfigCredentials"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		regionKeys := regionEnvKeys
0000000000000000000000000000000000000000;;		profileKeys := profileEnvKeys
0000000000000000000000000000000000000000;;		if !cfg.EnableSharedConfig {
0000000000000000000000000000000000000000;;			regionKeys = regionKeys[:1]
0000000000000000000000000000000000000000;;			profileKeys = profileKeys[:1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		setFromEnvVal(&cfg.Region, regionKeys)
0000000000000000000000000000000000000000;;		setFromEnvVal(&cfg.Profile, profileKeys)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.SharedCredentialsFile = sharedCredentialsFilename()
0000000000000000000000000000000000000000;;		cfg.SharedConfigFile = sharedConfigFilename()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setFromEnvVal(dst *string, keys []string) {
0000000000000000000000000000000000000000;;		for _, k := range keys {
0000000000000000000000000000000000000000;;			if v := os.Getenv(k); len(v) > 0 {
0000000000000000000000000000000000000000;;				*dst = v
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sharedCredentialsFilename() string {
0000000000000000000000000000000000000000;;		if name := os.Getenv("AWS_SHARED_CREDENTIALS_FILE"); len(name) > 0 {
0000000000000000000000000000000000000000;;			return name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return filepath.Join(userHomeDir(), ".aws", "credentials")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sharedConfigFilename() string {
0000000000000000000000000000000000000000;;		if name := os.Getenv("AWS_CONFIG_FILE"); len(name) > 0 {
0000000000000000000000000000000000000000;;			return name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return filepath.Join(userHomeDir(), ".aws", "config")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func userHomeDir() string {
0000000000000000000000000000000000000000;;		homeDir := os.Getenv("HOME") // *nix
0000000000000000000000000000000000000000;;		if len(homeDir) == 0 {       // windows
0000000000000000000000000000000000000000;;			homeDir = os.Getenv("USERPROFILE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return homeDir
0000000000000000000000000000000000000000;;	}
