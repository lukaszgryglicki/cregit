0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package session provides configuration for the SDK's service clients.
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	Sessions can be shared across all service clients that share the same base
0000000000000000000000000000000000000000;;	configuration.  The Session is built from the SDK's default configuration and
0000000000000000000000000000000000000000;;	request handlers.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Sessions should be cached when possible, because creating a new Session will
0000000000000000000000000000000000000000;;	load all configuration values from the environment, and config files each time
0000000000000000000000000000000000000000;;	the Session is created. Sharing the Session value across all of your service
0000000000000000000000000000000000000000;;	clients will ensure the configuration is loaded the fewest number of times possible.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Concurrency
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Sessions are safe to use concurrently as long as the Session is not being
0000000000000000000000000000000000000000;;	modified. The SDK will not modify the Session once the Session has been created.
0000000000000000000000000000000000000000;;	Creating service clients concurrently from a shared Session is safe.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Sessions from Shared Config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Sessions can be created using the method above that will only load the
0000000000000000000000000000000000000000;;	additional config if the AWS_SDK_LOAD_CONFIG environment variable is set.
0000000000000000000000000000000000000000;;	Alternatively you can explicitly create a Session with shared config enabled.
0000000000000000000000000000000000000000;;	To do this you can use NewSessionWithOptions to configure how the Session will
0000000000000000000000000000000000000000;;	be created. Using the NewSessionWithOptions with SharedConfigState set to
0000000000000000000000000000000000000000;;	SharedConfigEnabled will create the session as if the AWS_SDK_LOAD_CONFIG
0000000000000000000000000000000000000000;;	environment variable was set.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Creating Sessions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When creating Sessions optional aws.Config values can be passed in that will
0000000000000000000000000000000000000000;;	override the default, or loaded config values the Session is being created
0000000000000000000000000000000000000000;;	with. This allows you to provide additional, or case based, configuration
0000000000000000000000000000000000000000;;	as needed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	By default NewSession will only load credentials from the shared credentials
0000000000000000000000000000000000000000;;	file (~/.aws/credentials). If the AWS_SDK_LOAD_CONFIG environment variable is
0000000000000000000000000000000000000000;;	set to a truthy value the Session will be created from the configuration
0000000000000000000000000000000000000000;;	values from the shared config (~/.aws/config) and shared credentials
0000000000000000000000000000000000000000;;	(~/.aws/credentials) files. See the section Sessions from Shared Config for
0000000000000000000000000000000000000000;;	more information.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Create a Session with the default config and request handlers. With credentials
0000000000000000000000000000000000000000;;	region, and profile loaded from the environment and shared config automatically.
0000000000000000000000000000000000000000;;	Requires the AWS_PROFILE to be set, or "default" is used.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create Session
0000000000000000000000000000000000000000;;		sess, err := session.NewSession()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a Session with a custom region
0000000000000000000000000000000000000000;;		sess, err := session.NewSession(&aws.Config{Region: aws.String("us-east-1")})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a S3 client instance from a session
0000000000000000000000000000000000000000;;		sess, err := session.NewSession()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Handle Session creation error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		svc := s3.New(sess)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Create Session With Option Overrides
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In addition to NewSession, Sessions can be created using NewSessionWithOptions.
0000000000000000000000000000000000000000;;	This func allows you to control and override how the Session will be created
0000000000000000000000000000000000000000;;	through code instead of being driven by environment variables only.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Use NewSessionWithOptions when you want to provide the config profile, or
0000000000000000000000000000000000000000;;	override the shared config state (AWS_SDK_LOAD_CONFIG).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Equivalent to session.NewSession()
0000000000000000000000000000000000000000;;		sess, err := session.NewSessionWithOptions(session.Options{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify profile to load for the session's config
0000000000000000000000000000000000000000;;		sess, err := session.NewSessionWithOptions(session.Options{
0000000000000000000000000000000000000000;;			 Profile: "profile_name",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify profile for config and region for requests
0000000000000000000000000000000000000000;;		sess, err := session.NewSessionWithOptions(session.Options{
0000000000000000000000000000000000000000;;			 Config: aws.Config{Region: aws.String("us-east-1")},
0000000000000000000000000000000000000000;;			 Profile: "profile_name",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Force enable Shared Config support
0000000000000000000000000000000000000000;;		sess, err := session.NewSessionWithOptions(session.Options{
0000000000000000000000000000000000000000;;			SharedConfigState: SharedConfigEnable,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Adding Handlers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can add handlers to a session for processing HTTP requests. All service
0000000000000000000000000000000000000000;;	clients that use the session inherit the handlers. For example, the following
0000000000000000000000000000000000000000;;	handler logs every request and its payload made by a service client:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a session, and add additional handlers for all service
0000000000000000000000000000000000000000;;		// clients created with the Session to inherit. Adds logging handler.
0000000000000000000000000000000000000000;;		sess, err := session.NewSession()
0000000000000000000000000000000000000000;;		sess.Handlers.Send.PushFront(func(r *request.Request) {
0000000000000000000000000000000000000000;;			// Log every request made and its payload
0000000000000000000000000000000000000000;;			logger.Println("Request: %s/%s, Payload: %s",
0000000000000000000000000000000000000000;;				r.ClientInfo.ServiceName, r.Operation, r.Params)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Deprecated "New" function
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The New session function has been deprecated because it does not provide good
0000000000000000000000000000000000000000;;	way to return errors that occur when loading the configuration files and values.
0000000000000000000000000000000000000000;;	Because of this, NewSession was created so errors can be retrieved when
0000000000000000000000000000000000000000;;	creating a session fails.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Shared Config Fields
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	By default the SDK will only load the shared credentials file's (~/.aws/credentials)
0000000000000000000000000000000000000000;;	credentials values, and all other config is provided by the environment variables,
0000000000000000000000000000000000000000;;	SDK defaults, and user provided aws.Config values.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If the AWS_SDK_LOAD_CONFIG environment variable is set, or SharedConfigEnable
0000000000000000000000000000000000000000;;	option is used to create the Session the full shared config values will be
0000000000000000000000000000000000000000;;	loaded. This includes credentials, region, and support for assume role. In
0000000000000000000000000000000000000000;;	addition the Session will load its configuration from both the shared config
0000000000000000000000000000000000000000;;	file (~/.aws/config) and shared credentials file (~/.aws/credentials). Both
0000000000000000000000000000000000000000;;	files have the same format.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If both config files are present the configuration from both files will be
0000000000000000000000000000000000000000;;	read. The Session will be created from  configuration values from the shared
0000000000000000000000000000000000000000;;	credentials file (~/.aws/credentials) over those in the shared credentials
0000000000000000000000000000000000000000;;	file (~/.aws/config).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Credentials are the values the SDK should use for authenticating requests with
0000000000000000000000000000000000000000;;	AWS Services. They arfrom a configuration file will need to include both
0000000000000000000000000000000000000000;;	aws_access_key_id and aws_secret_access_key must be provided together in the
0000000000000000000000000000000000000000;;	same file to be considered valid. The values will be ignored if not a complete
0000000000000000000000000000000000000000;;	group. aws_session_token is an optional field that can be provided if both of
0000000000000000000000000000000000000000;;	the other two fields are also provided.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aws_access_key_id = AKID
0000000000000000000000000000000000000000;;		aws_secret_access_key = SECRET
0000000000000000000000000000000000000000;;		aws_session_token = TOKEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Assume Role values allow you to configure the SDK to assume an IAM role using
0000000000000000000000000000000000000000;;	a set of credentials provided in a config file via the source_profile field.
0000000000000000000000000000000000000000;;	Both "role_arn" and "source_profile" are required. The SDK does not support
0000000000000000000000000000000000000000;;	assuming a role with MFA token Via the Session's constructor. You can use the
0000000000000000000000000000000000000000;;	stscreds.AssumeRoleProvider credentials provider to specify custom
0000000000000000000000000000000000000000;;	configuration and support for MFA.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		role_arn = arn:aws:iam::<account_number>:role/<role_name>
0000000000000000000000000000000000000000;;		source_profile = profile_with_creds
0000000000000000000000000000000000000000;;		external_id = 1234
0000000000000000000000000000000000000000;;		mfa_serial = not supported!
0000000000000000000000000000000000000000;;		role_session_name = session_name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Region is the region the SDK should use for looking up AWS service endpoints
0000000000000000000000000000000000000000;;	and signing requests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		region = us-east-1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Environment Variables
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When a Session is created several environment variables can be set to adjust
0000000000000000000000000000000000000000;;	how the SDK functions, and what configuration data it loads when creating
0000000000000000000000000000000000000000;;	Sessions. All environment values are optional, but some values like credentials
0000000000000000000000000000000000000000;;	require multiple of the values to set or the partial values will be ignored.
0000000000000000000000000000000000000000;;	All environment variable values are strings unless otherwise noted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Environment configuration values. If set both Access Key ID and Secret Access
0000000000000000000000000000000000000000;;	Key must be provided. Session Token and optionally also be provided, but is
0000000000000000000000000000000000000000;;	not required.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# Access Key ID
0000000000000000000000000000000000000000;;		AWS_ACCESS_KEY_ID=AKID
0000000000000000000000000000000000000000;;		AWS_ACCESS_KEY=AKID # only read if AWS_ACCESS_KEY_ID is not set.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# Secret Access Key
0000000000000000000000000000000000000000;;		AWS_SECRET_ACCESS_KEY=SECRET
0000000000000000000000000000000000000000;;		AWS_SECRET_KEY=SECRET=SECRET # only read if AWS_SECRET_ACCESS_KEY is not set.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# Session Token
0000000000000000000000000000000000000000;;		AWS_SESSION_TOKEN=TOKEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Region value will instruct the SDK where to make service API requests to. If is
0000000000000000000000000000000000000000;;	not provided in the environment the region must be provided before a service
0000000000000000000000000000000000000000;;	client request is made.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AWS_REGION=us-east-1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# AWS_DEFAULT_REGION is only read if AWS_SDK_LOAD_CONFIG is also set,
0000000000000000000000000000000000000000;;		# and AWS_REGION is not also set.
0000000000000000000000000000000000000000;;		AWS_DEFAULT_REGION=us-east-1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Profile name the SDK should load use when loading shared config from the
0000000000000000000000000000000000000000;;	configuration files. If not provided "default" will be used as the profile name.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AWS_PROFILE=my_profile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# AWS_DEFAULT_PROFILE is only read if AWS_SDK_LOAD_CONFIG is also set,
0000000000000000000000000000000000000000;;		# and AWS_PROFILE is not also set.
0000000000000000000000000000000000000000;;		AWS_DEFAULT_PROFILE=my_profile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SDK load config instructs the SDK to load the shared config in addition to
0000000000000000000000000000000000000000;;	shared credentials. This also expands the configuration loaded so the shared
0000000000000000000000000000000000000000;;	credentials will have parity with the shared config file. This also enables
0000000000000000000000000000000000000000;;	Region and Profile support for the AWS_DEFAULT_REGION and AWS_DEFAULT_PROFILE
0000000000000000000000000000000000000000;;	env values as well.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AWS_SDK_LOAD_CONFIG=1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Shared credentials file path can be set to instruct the SDK to use an alternative
0000000000000000000000000000000000000000;;	file for the shared credentials. If not set the file will be loaded from
0000000000000000000000000000000000000000;;	$HOME/.aws/credentials on Linux/Unix based systems, and
0000000000000000000000000000000000000000;;	%USERPROFILE%\.aws\credentials on Windows.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AWS_SHARED_CREDENTIALS_FILE=$HOME/my_shared_credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Shared config file path can be set to instruct the SDK to use an alternative
0000000000000000000000000000000000000000;;	file for the shared config. If not set the file will be loaded from
0000000000000000000000000000000000000000;;	$HOME/.aws/config on Linux/Unix based systems, and
0000000000000000000000000000000000000000;;	%USERPROFILE%\.aws\config on Windows.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AWS_CONFIG_FILE=$HOME/my_shared_config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package session
