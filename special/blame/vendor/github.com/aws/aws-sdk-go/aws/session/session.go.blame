0000000000000000000000000000000000000000;;	package session
7381c378252ae8f66befb472cf056371ba4be46a;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/session/session.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/session/session.go][vendor/github.com/aws/aws-sdk-go/aws/session/session.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/corehandlers"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials/stscreds"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/defaults"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/endpoints"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Session provides a central location to create service clients from and
0000000000000000000000000000000000000000;;	// store configurations and request handlers for those services.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Sessions are safe to create service clients concurrently, but it is not safe
0000000000000000000000000000000000000000;;	// to mutate the Session concurrently.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Session satisfies the service client's client.ClientConfigProvider.
0000000000000000000000000000000000000000;;	type Session struct {
0000000000000000000000000000000000000000;;		Config   *aws.Config
0000000000000000000000000000000000000000;;		Handlers request.Handlers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new instance of the handlers merging in the provided configs
0000000000000000000000000000000000000000;;	// on top of the SDK's default configurations. Once the Session is created it
0000000000000000000000000000000000000000;;	// can be mutated to modify the Config or Handlers. The Session is safe to be
0000000000000000000000000000000000000000;;	// read concurrently, but it should not be written to concurrently.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the AWS_SDK_LOAD_CONFIG environment is set to a truthy value, the New
0000000000000000000000000000000000000000;;	// method could now encounter an error when loading the configuration. When
0000000000000000000000000000000000000000;;	// The environment variable is set, and an error occurs, New will return a
0000000000000000000000000000000000000000;;	// session that will fail all requests reporting the error that occurred while
0000000000000000000000000000000000000000;;	// loading the session. Use NewSession to get the error when creating the
0000000000000000000000000000000000000000;;	// session.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the AWS_SDK_LOAD_CONFIG environment variable is set to a truthy value
0000000000000000000000000000000000000000;;	// the shared config file (~/.aws/config) will also be loaded, in addition to
0000000000000000000000000000000000000000;;	// the shared credentials file (~/.aws/config). Values set in both the
0000000000000000000000000000000000000000;;	// shared config, and shared credentials will be taken from the shared
0000000000000000000000000000000000000000;;	// credentials file.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deprecated: Use NewSession functions to create sessions instead. NewSession
0000000000000000000000000000000000000000;;	// has the same functionality as New except an error can be returned when the
0000000000000000000000000000000000000000;;	// func is called instead of waiting to receive an error until a request is made.
0000000000000000000000000000000000000000;;	func New(cfgs ...*aws.Config) *Session {
0000000000000000000000000000000000000000;;		// load initial config from environment
0000000000000000000000000000000000000000;;		envCfg := loadEnvConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if envCfg.EnableSharedConfig {
0000000000000000000000000000000000000000;;			s, err := newSession(envCfg, cfgs...)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// Old session.New expected all errors to be discovered when
0000000000000000000000000000000000000000;;				// a request is made, and would report the errors then. This
0000000000000000000000000000000000000000;;				// needs to be replicated if an error occurs while creating
0000000000000000000000000000000000000000;;				// the session.
0000000000000000000000000000000000000000;;				msg := "failed to create session with AWS_SDK_LOAD_CONFIG enabled. " +
0000000000000000000000000000000000000000;;					"Use session.NewSession to handle errors occurring during session creation."
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Session creation failed, need to report the error and prevent
0000000000000000000000000000000000000000;;				// any requests from succeeding.
0000000000000000000000000000000000000000;;				s = &Session{Config: defaults.Config()}
0000000000000000000000000000000000000000;;				s.Config.MergeIn(cfgs...)
0000000000000000000000000000000000000000;;				s.Config.Logger.Log("ERROR:", msg, "Error:", err)
0000000000000000000000000000000000000000;;				s.Handlers.Validate.PushBack(func(r *request.Request) {
0000000000000000000000000000000000000000;;					r.Error = err
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return oldNewSession(cfgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSession returns a new Session created from SDK defaults, config files,
0000000000000000000000000000000000000000;;	// environment, and user provided config files. Once the Session is created
0000000000000000000000000000000000000000;;	// it can be mutated to modify the Config or Handlers. The Session is safe to
0000000000000000000000000000000000000000;;	// be read concurrently, but it should not be written to concurrently.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the AWS_SDK_LOAD_CONFIG environment variable is set to a truthy value
0000000000000000000000000000000000000000;;	// the shared config file (~/.aws/config) will also be loaded in addition to
0000000000000000000000000000000000000000;;	// the shared credentials file (~/.aws/config). Values set in both the
0000000000000000000000000000000000000000;;	// shared config, and shared credentials will be taken from the shared
0000000000000000000000000000000000000000;;	// credentials file. Enabling the Shared Config will also allow the Session
0000000000000000000000000000000000000000;;	// to be built with retrieving credentials with AssumeRole set in the config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the NewSessionWithOptions func for information on how to override or
0000000000000000000000000000000000000000;;	// control through code how the Session will be created. Such as specifying the
0000000000000000000000000000000000000000;;	// config profile, and controlling if shared config is enabled or not.
0000000000000000000000000000000000000000;;	func NewSession(cfgs ...*aws.Config) (*Session, error) {
0000000000000000000000000000000000000000;;		envCfg := loadEnvConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newSession(envCfg, cfgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SharedConfigState provides the ability to optionally override the state
0000000000000000000000000000000000000000;;	// of the session's creation based on the shared config being enabled or
0000000000000000000000000000000000000000;;	// disabled.
0000000000000000000000000000000000000000;;	type SharedConfigState int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SharedConfigStateFromEnv does not override any state of the
0000000000000000000000000000000000000000;;		// AWS_SDK_LOAD_CONFIG env var. It is the default value of the
0000000000000000000000000000000000000000;;		// SharedConfigState type.
0000000000000000000000000000000000000000;;		SharedConfigStateFromEnv SharedConfigState = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SharedConfigDisable overrides the AWS_SDK_LOAD_CONFIG env var value
0000000000000000000000000000000000000000;;		// and disables the shared config functionality.
0000000000000000000000000000000000000000;;		SharedConfigDisable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SharedConfigEnable overrides the AWS_SDK_LOAD_CONFIG env var value
0000000000000000000000000000000000000000;;		// and enables the shared config functionality.
0000000000000000000000000000000000000000;;		SharedConfigEnable
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Options provides the means to control how a Session is created and what
0000000000000000000000000000000000000000;;	// configuration values will be loaded.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type Options struct {
0000000000000000000000000000000000000000;;		// Provides config values for the SDK to use when creating service clients
0000000000000000000000000000000000000000;;		// and making API requests to services. Any value set in with this field
0000000000000000000000000000000000000000;;		// will override the associated value provided by the SDK defaults,
0000000000000000000000000000000000000000;;		// environment or config files where relevant.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If not set, configuration values from from SDK defaults, environment,
0000000000000000000000000000000000000000;;		// config will be used.
0000000000000000000000000000000000000000;;		Config aws.Config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Overrides the config profile the Session should be created from. If not
0000000000000000000000000000000000000000;;		// set the value of the environment variable will be loaded (AWS_PROFILE,
0000000000000000000000000000000000000000;;		// or AWS_DEFAULT_PROFILE if the Shared Config is enabled).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If not set and environment variables are not set the "default"
0000000000000000000000000000000000000000;;		// (DefaultSharedConfigProfile) will be used as the profile to load the
0000000000000000000000000000000000000000;;		// session config from.
0000000000000000000000000000000000000000;;		Profile string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Instructs how the Session will be created based on the AWS_SDK_LOAD_CONFIG
0000000000000000000000000000000000000000;;		// environment variable. By default a Session will be created using the
0000000000000000000000000000000000000000;;		// value provided by the AWS_SDK_LOAD_CONFIG environment variable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Setting this value to SharedConfigEnable or SharedConfigDisable
0000000000000000000000000000000000000000;;		// will allow you to override the AWS_SDK_LOAD_CONFIG environment variable
0000000000000000000000000000000000000000;;		// and enable or disable the shared config functionality.
0000000000000000000000000000000000000000;;		SharedConfigState SharedConfigState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSessionWithOptions returns a new Session created from SDK defaults, config files,
0000000000000000000000000000000000000000;;	// environment, and user provided config files. This func uses the Options
0000000000000000000000000000000000000000;;	// values to configure how the Session is created.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the AWS_SDK_LOAD_CONFIG environment variable is set to a truthy value
0000000000000000000000000000000000000000;;	// the shared config file (~/.aws/config) will also be loaded in addition to
0000000000000000000000000000000000000000;;	// the shared credentials file (~/.aws/config). Values set in both the
0000000000000000000000000000000000000000;;	// shared config, and shared credentials will be taken from the shared
0000000000000000000000000000000000000000;;	// credentials file. Enabling the Shared Config will also allow the Session
0000000000000000000000000000000000000000;;	// to be built with retrieving credentials with AssumeRole set in the config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Equivalent to session.New
0000000000000000000000000000000000000000;;	//     sess, err := session.NewSessionWithOptions(session.Options{})
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Specify profile to load for the session's config
0000000000000000000000000000000000000000;;	//     sess, err := session.NewSessionWithOptions(session.Options{
0000000000000000000000000000000000000000;;	//          Profile: "profile_name",
0000000000000000000000000000000000000000;;	//     })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Specify profile for config and region for requests
0000000000000000000000000000000000000000;;	//     sess, err := session.NewSessionWithOptions(session.Options{
0000000000000000000000000000000000000000;;	//          Config: aws.Config{Region: aws.String("us-east-1")},
0000000000000000000000000000000000000000;;	//          Profile: "profile_name",
0000000000000000000000000000000000000000;;	//     })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Force enable Shared Config support
0000000000000000000000000000000000000000;;	//     sess, err := session.NewSessionWithOptions(session.Options{
0000000000000000000000000000000000000000;;	//         SharedConfigState: SharedConfigEnable,
0000000000000000000000000000000000000000;;	//     })
0000000000000000000000000000000000000000;;	func NewSessionWithOptions(opts Options) (*Session, error) {
0000000000000000000000000000000000000000;;		var envCfg envConfig
0000000000000000000000000000000000000000;;		if opts.SharedConfigState == SharedConfigEnable {
0000000000000000000000000000000000000000;;			envCfg = loadSharedEnvConfig()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			envCfg = loadEnvConfig()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(opts.Profile) > 0 {
0000000000000000000000000000000000000000;;			envCfg.Profile = opts.Profile
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch opts.SharedConfigState {
0000000000000000000000000000000000000000;;		case SharedConfigDisable:
0000000000000000000000000000000000000000;;			envCfg.EnableSharedConfig = false
0000000000000000000000000000000000000000;;		case SharedConfigEnable:
0000000000000000000000000000000000000000;;			envCfg.EnableSharedConfig = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newSession(envCfg, &opts.Config)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Must is a helper function to ensure the Session is valid and there was no
0000000000000000000000000000000000000000;;	// error when calling a NewSession function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This helper is intended to be used in variable initialization to load the
0000000000000000000000000000000000000000;;	// Session and configuration at startup. Such as:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     var sess = session.Must(session.NewSession())
0000000000000000000000000000000000000000;;	func Must(sess *Session, err error) *Session {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sess
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func oldNewSession(cfgs ...*aws.Config) *Session {
0000000000000000000000000000000000000000;;		cfg := defaults.Config()
0000000000000000000000000000000000000000;;		handlers := defaults.Handlers()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Apply the passed in configs so the configuration can be applied to the
0000000000000000000000000000000000000000;;		// default credential chain
0000000000000000000000000000000000000000;;		cfg.MergeIn(cfgs...)
0000000000000000000000000000000000000000;;		if cfg.EndpointResolver == nil {
0000000000000000000000000000000000000000;;			// An endpoint resolver is required for a session to be able to provide
0000000000000000000000000000000000000000;;			// endpoints for service client configurations.
0000000000000000000000000000000000000000;;			cfg.EndpointResolver = endpoints.DefaultResolver()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.Credentials = defaults.CredChain(cfg, handlers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reapply any passed in configs to override credentials if set
0000000000000000000000000000000000000000;;		cfg.MergeIn(cfgs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := &Session{
0000000000000000000000000000000000000000;;			Config:   cfg,
0000000000000000000000000000000000000000;;			Handlers: handlers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initHandlers(s)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSession(envCfg envConfig, cfgs ...*aws.Config) (*Session, error) {
0000000000000000000000000000000000000000;;		cfg := defaults.Config()
0000000000000000000000000000000000000000;;		handlers := defaults.Handlers()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get a merged version of the user provided config to determine if
0000000000000000000000000000000000000000;;		// credentials were.
0000000000000000000000000000000000000000;;		userCfg := &aws.Config{}
0000000000000000000000000000000000000000;;		userCfg.MergeIn(cfgs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Order config files will be loaded in with later files overwriting
0000000000000000000000000000000000000000;;		// previous config file values.
0000000000000000000000000000000000000000;;		cfgFiles := []string{envCfg.SharedConfigFile, envCfg.SharedCredentialsFile}
0000000000000000000000000000000000000000;;		if !envCfg.EnableSharedConfig {
0000000000000000000000000000000000000000;;			// The shared config file (~/.aws/config) is only loaded if instructed
0000000000000000000000000000000000000000;;			// to load via the envConfig.EnableSharedConfig (AWS_SDK_LOAD_CONFIG).
0000000000000000000000000000000000000000;;			cfgFiles = cfgFiles[1:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Load additional config from file(s)
0000000000000000000000000000000000000000;;		sharedCfg, err := loadSharedConfig(envCfg.Profile, cfgFiles)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mergeConfigSrcs(cfg, userCfg, envCfg, sharedCfg, handlers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := &Session{
0000000000000000000000000000000000000000;;			Config:   cfg,
0000000000000000000000000000000000000000;;			Handlers: handlers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initHandlers(s)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mergeConfigSrcs(cfg, userCfg *aws.Config, envCfg envConfig, sharedCfg sharedConfig, handlers request.Handlers) {
0000000000000000000000000000000000000000;;		// Merge in user provided configuration
0000000000000000000000000000000000000000;;		cfg.MergeIn(userCfg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Region if not already set by user
0000000000000000000000000000000000000000;;		if len(aws.StringValue(cfg.Region)) == 0 {
0000000000000000000000000000000000000000;;			if len(envCfg.Region) > 0 {
0000000000000000000000000000000000000000;;				cfg.WithRegion(envCfg.Region)
0000000000000000000000000000000000000000;;			} else if envCfg.EnableSharedConfig && len(sharedCfg.Region) > 0 {
0000000000000000000000000000000000000000;;				cfg.WithRegion(sharedCfg.Region)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Configure credentials if not already set
0000000000000000000000000000000000000000;;		if cfg.Credentials == credentials.AnonymousCredentials && userCfg.Credentials == nil {
0000000000000000000000000000000000000000;;			if len(envCfg.Creds.AccessKeyID) > 0 {
0000000000000000000000000000000000000000;;				cfg.Credentials = credentials.NewStaticCredentialsFromCreds(
0000000000000000000000000000000000000000;;					envCfg.Creds,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			} else if envCfg.EnableSharedConfig && len(sharedCfg.AssumeRole.RoleARN) > 0 && sharedCfg.AssumeRoleSource != nil {
0000000000000000000000000000000000000000;;				cfgCp := *cfg
0000000000000000000000000000000000000000;;				cfgCp.Credentials = credentials.NewStaticCredentialsFromCreds(
0000000000000000000000000000000000000000;;					sharedCfg.AssumeRoleSource.Creds,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;				cfg.Credentials = stscreds.NewCredentials(
0000000000000000000000000000000000000000;;					&Session{
0000000000000000000000000000000000000000;;						Config:   &cfgCp,
0000000000000000000000000000000000000000;;						Handlers: handlers.Copy(),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					sharedCfg.AssumeRole.RoleARN,
0000000000000000000000000000000000000000;;					func(opt *stscreds.AssumeRoleProvider) {
0000000000000000000000000000000000000000;;						opt.RoleSessionName = sharedCfg.AssumeRole.RoleSessionName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						if len(sharedCfg.AssumeRole.ExternalID) > 0 {
0000000000000000000000000000000000000000;;							opt.ExternalID = aws.String(sharedCfg.AssumeRole.ExternalID)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						// MFA not supported
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			} else if len(sharedCfg.Creds.AccessKeyID) > 0 {
0000000000000000000000000000000000000000;;				cfg.Credentials = credentials.NewStaticCredentialsFromCreds(
0000000000000000000000000000000000000000;;					sharedCfg.Creds,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Fallback to default credentials provider, include mock errors
0000000000000000000000000000000000000000;;				// for the credential chain so user can identify why credentials
0000000000000000000000000000000000000000;;				// failed to be retrieved.
0000000000000000000000000000000000000000;;				cfg.Credentials = credentials.NewCredentials(&credentials.ChainProvider{
0000000000000000000000000000000000000000;;					VerboseErrors: aws.BoolValue(cfg.CredentialsChainVerboseErrors),
0000000000000000000000000000000000000000;;					Providers: []credentials.Provider{
0000000000000000000000000000000000000000;;						&credProviderError{Err: awserr.New("EnvAccessKeyNotFound", "failed to find credentials in the environment.", nil)},
0000000000000000000000000000000000000000;;						&credProviderError{Err: awserr.New("SharedCredsLoad", fmt.Sprintf("failed to load profile, %s.", envCfg.Profile), nil)},
0000000000000000000000000000000000000000;;						defaults.RemoteCredProvider(*cfg, handlers),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type credProviderError struct {
0000000000000000000000000000000000000000;;		Err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var emptyCreds = credentials.Value{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c credProviderError) Retrieve() (credentials.Value, error) {
0000000000000000000000000000000000000000;;		return credentials.Value{}, c.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (c credProviderError) IsExpired() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initHandlers(s *Session) {
0000000000000000000000000000000000000000;;		// Add the Validate parameter handler if it is not disabled.
0000000000000000000000000000000000000000;;		s.Handlers.Validate.Remove(corehandlers.ValidateParametersHandler)
0000000000000000000000000000000000000000;;		if !aws.BoolValue(s.Config.DisableParamValidation) {
0000000000000000000000000000000000000000;;			s.Handlers.Validate.PushBackNamed(corehandlers.ValidateParametersHandler)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copy creates and returns a copy of the current Session, coping the config
0000000000000000000000000000000000000000;;	// and handlers. If any additional configs are provided they will be merged
0000000000000000000000000000000000000000;;	// on top of the Session's copied config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create a copy of the current Session, configured for the us-west-2 region.
0000000000000000000000000000000000000000;;	//     sess.Copy(&aws.Config{Region: aws.String("us-west-2")})
0000000000000000000000000000000000000000;;	func (s *Session) Copy(cfgs ...*aws.Config) *Session {
0000000000000000000000000000000000000000;;		newSession := &Session{
0000000000000000000000000000000000000000;;			Config:   s.Config.Copy(cfgs...),
0000000000000000000000000000000000000000;;			Handlers: s.Handlers.Copy(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initHandlers(newSession)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newSession
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClientConfig satisfies the client.ConfigProvider interface and is used to
0000000000000000000000000000000000000000;;	// configure the service client instances. Passing the Session to the service
0000000000000000000000000000000000000000;;	// client's constructor (New) will use this method to configure the client.
0000000000000000000000000000000000000000;;	func (s *Session) ClientConfig(serviceName string, cfgs ...*aws.Config) client.Config {
0000000000000000000000000000000000000000;;		// Backwards compatibility, the error will be eaten if user calls ClientConfig
0000000000000000000000000000000000000000;;		// directly. All SDK services will use ClientconfigWithError.
0000000000000000000000000000000000000000;;		cfg, _ := s.clientConfigWithErr(serviceName, cfgs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Session) clientConfigWithErr(serviceName string, cfgs ...*aws.Config) (client.Config, error) {
0000000000000000000000000000000000000000;;		s = s.Copy(cfgs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var resolved endpoints.ResolvedEndpoint
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		region := aws.StringValue(s.Config.Region)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if endpoint := aws.StringValue(s.Config.Endpoint); len(endpoint) != 0 {
0000000000000000000000000000000000000000;;			resolved.URL = endpoints.AddScheme(endpoint, aws.BoolValue(s.Config.DisableSSL))
0000000000000000000000000000000000000000;;			resolved.SigningRegion = region
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			resolved, err = s.Config.EndpointResolver.EndpointFor(
0000000000000000000000000000000000000000;;				serviceName, region,
0000000000000000000000000000000000000000;;				func(opt *endpoints.Options) {
0000000000000000000000000000000000000000;;					opt.DisableSSL = aws.BoolValue(s.Config.DisableSSL)
0000000000000000000000000000000000000000;;					opt.UseDualStack = aws.BoolValue(s.Config.UseDualStack)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.Config{
0000000000000000000000000000000000000000;;			Config:        s.Config,
0000000000000000000000000000000000000000;;			Handlers:      s.Handlers,
0000000000000000000000000000000000000000;;			Endpoint:      resolved.URL,
0000000000000000000000000000000000000000;;			SigningRegion: resolved.SigningRegion,
0000000000000000000000000000000000000000;;			SigningName:   resolved.SigningName,
0000000000000000000000000000000000000000;;		}, err
0000000000000000000000000000000000000000;;	}
