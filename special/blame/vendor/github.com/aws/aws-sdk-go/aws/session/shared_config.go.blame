0000000000000000000000000000000000000000;;	package session
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials"
0000000000000000000000000000000000000000;;		"github.com/go-ini/ini"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Static Credentials group
0000000000000000000000000000000000000000;;		accessKeyIDKey  = `aws_access_key_id`     // group required
0000000000000000000000000000000000000000;;		secretAccessKey = `aws_secret_access_key` // group required
0000000000000000000000000000000000000000;;		sessionTokenKey = `aws_session_token`     // optional
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assume Role Credentials group
0000000000000000000000000000000000000000;;		roleArnKey         = `role_arn`          // group required
0000000000000000000000000000000000000000;;		sourceProfileKey   = `source_profile`    // group required
0000000000000000000000000000000000000000;;		externalIDKey      = `external_id`       // optional
0000000000000000000000000000000000000000;;		mfaSerialKey       = `mfa_serial`        // optional
0000000000000000000000000000000000000000;;		roleSessionNameKey = `role_session_name` // optional
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Additional Config fields
0000000000000000000000000000000000000000;;		regionKey = `region`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultSharedConfigProfile is the default profile to be used when
0000000000000000000000000000000000000000;;		// loading configuration from the config files if another profile name
0000000000000000000000000000000000000000;;		// is not provided.
0000000000000000000000000000000000000000;;		DefaultSharedConfigProfile = `default`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type assumeRoleConfig struct {
0000000000000000000000000000000000000000;;		RoleARN         string
0000000000000000000000000000000000000000;;		SourceProfile   string
0000000000000000000000000000000000000000;;		ExternalID      string
0000000000000000000000000000000000000000;;		MFASerial       string
0000000000000000000000000000000000000000;;		RoleSessionName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sharedConfig represents the configuration fields of the SDK config files.
0000000000000000000000000000000000000000;;	type sharedConfig struct {
0000000000000000000000000000000000000000;;		// Credentials values from the config file. Both aws_access_key_id
0000000000000000000000000000000000000000;;		// and aws_secret_access_key must be provided together in the same file
0000000000000000000000000000000000000000;;		// to be considered valid. The values will be ignored if not a complete group.
0000000000000000000000000000000000000000;;		// aws_session_token is an optional field that can be provided if both of the
0000000000000000000000000000000000000000;;		// other two fields are also provided.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	aws_access_key_id
0000000000000000000000000000000000000000;;		//	aws_secret_access_key
0000000000000000000000000000000000000000;;		//	aws_session_token
0000000000000000000000000000000000000000;;		Creds credentials.Value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AssumeRole       assumeRoleConfig
0000000000000000000000000000000000000000;;		AssumeRoleSource *sharedConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Region is the region the SDK should use for looking up AWS service endpoints
0000000000000000000000000000000000000000;;		// and signing requests.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//	region
0000000000000000000000000000000000000000;;		Region string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sharedConfigFile struct {
0000000000000000000000000000000000000000;;		Filename string
0000000000000000000000000000000000000000;;		IniData  *ini.File
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// loadSharedConfig retrieves the configuration from the list of files
0000000000000000000000000000000000000000;;	// using the profile provided. The order the files are listed will determine
0000000000000000000000000000000000000000;;	// precedence. Values in subsequent files will overwrite values defined in
0000000000000000000000000000000000000000;;	// earlier files.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For example, given two files A and B. Both define credentials. If the order
0000000000000000000000000000000000000000;;	// of the files are A then B, B's credential values will be used instead of A's.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See sharedConfig.setFromFile for information how the config files
0000000000000000000000000000000000000000;;	// will be loaded.
0000000000000000000000000000000000000000;;	func loadSharedConfig(profile string, filenames []string) (sharedConfig, error) {
0000000000000000000000000000000000000000;;		if len(profile) == 0 {
0000000000000000000000000000000000000000;;			profile = DefaultSharedConfigProfile
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		files, err := loadSharedConfigIniFiles(filenames)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return sharedConfig{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := sharedConfig{}
0000000000000000000000000000000000000000;;		if err = cfg.setFromIniFiles(profile, files); err != nil {
0000000000000000000000000000000000000000;;			return sharedConfig{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(cfg.AssumeRole.SourceProfile) > 0 {
0000000000000000000000000000000000000000;;			if err := cfg.setAssumeRoleSource(profile, files); err != nil {
0000000000000000000000000000000000000000;;				return sharedConfig{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func loadSharedConfigIniFiles(filenames []string) ([]sharedConfigFile, error) {
0000000000000000000000000000000000000000;;		files := make([]sharedConfigFile, 0, len(filenames))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, filename := range filenames {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadFile(filename)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// Skip files which can't be opened and read for whatever reason
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f, err := ini.Load(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, SharedConfigLoadError{Filename: filename}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			files = append(files, sharedConfigFile{
0000000000000000000000000000000000000000;;				Filename: filename, IniData: f,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return files, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cfg *sharedConfig) setAssumeRoleSource(origProfile string, files []sharedConfigFile) error {
0000000000000000000000000000000000000000;;		var assumeRoleSrc sharedConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Multiple level assume role chains are not support
0000000000000000000000000000000000000000;;		if cfg.AssumeRole.SourceProfile == origProfile {
0000000000000000000000000000000000000000;;			assumeRoleSrc = *cfg
0000000000000000000000000000000000000000;;			assumeRoleSrc.AssumeRole = assumeRoleConfig{}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			err := assumeRoleSrc.setFromIniFiles(cfg.AssumeRole.SourceProfile, files)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(assumeRoleSrc.Creds.AccessKeyID) == 0 {
0000000000000000000000000000000000000000;;			return SharedConfigAssumeRoleError{RoleARN: cfg.AssumeRole.RoleARN}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.AssumeRoleSource = &assumeRoleSrc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cfg *sharedConfig) setFromIniFiles(profile string, files []sharedConfigFile) error {
0000000000000000000000000000000000000000;;		// Trim files from the list that don't exist.
0000000000000000000000000000000000000000;;		for _, f := range files {
0000000000000000000000000000000000000000;;			if err := cfg.setFromIniFile(profile, f); err != nil {
0000000000000000000000000000000000000000;;				if _, ok := err.(SharedConfigProfileNotExistsError); ok {
0000000000000000000000000000000000000000;;					// Ignore proviles missings
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setFromFile loads the configuration from the file using
0000000000000000000000000000000000000000;;	// the profile provided. A sharedConfig pointer type value is used so that
0000000000000000000000000000000000000000;;	// multiple config file loadings can be chained.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Only loads complete logically grouped values, and will not set fields in cfg
0000000000000000000000000000000000000000;;	// for incomplete grouped values in the config. Such as credentials. For example
0000000000000000000000000000000000000000;;	// if a config file only includes aws_access_key_id but no aws_secret_access_key
0000000000000000000000000000000000000000;;	// the aws_access_key_id will be ignored.
0000000000000000000000000000000000000000;;	func (cfg *sharedConfig) setFromIniFile(profile string, file sharedConfigFile) error {
0000000000000000000000000000000000000000;;		section, err := file.IniData.GetSection(profile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Fallback to to alternate profile name: profile <name>
0000000000000000000000000000000000000000;;			section, err = file.IniData.GetSection(fmt.Sprintf("profile %s", profile))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return SharedConfigProfileNotExistsError{Profile: profile, Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Shared Credentials
0000000000000000000000000000000000000000;;		akid := section.Key(accessKeyIDKey).String()
0000000000000000000000000000000000000000;;		secret := section.Key(secretAccessKey).String()
0000000000000000000000000000000000000000;;		if len(akid) > 0 && len(secret) > 0 {
0000000000000000000000000000000000000000;;			cfg.Creds = credentials.Value{
0000000000000000000000000000000000000000;;				AccessKeyID:     akid,
0000000000000000000000000000000000000000;;				SecretAccessKey: secret,
0000000000000000000000000000000000000000;;				SessionToken:    section.Key(sessionTokenKey).String(),
0000000000000000000000000000000000000000;;				ProviderName:    fmt.Sprintf("SharedConfigCredentials: %s", file.Filename),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assume Role
0000000000000000000000000000000000000000;;		roleArn := section.Key(roleArnKey).String()
0000000000000000000000000000000000000000;;		srcProfile := section.Key(sourceProfileKey).String()
0000000000000000000000000000000000000000;;		if len(roleArn) > 0 && len(srcProfile) > 0 {
0000000000000000000000000000000000000000;;			cfg.AssumeRole = assumeRoleConfig{
0000000000000000000000000000000000000000;;				RoleARN:         roleArn,
0000000000000000000000000000000000000000;;				SourceProfile:   srcProfile,
0000000000000000000000000000000000000000;;				ExternalID:      section.Key(externalIDKey).String(),
0000000000000000000000000000000000000000;;				MFASerial:       section.Key(mfaSerialKey).String(),
0000000000000000000000000000000000000000;;				RoleSessionName: section.Key(roleSessionNameKey).String(),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Region
0000000000000000000000000000000000000000;;		if v := section.Key(regionKey).String(); len(v) > 0 {
0000000000000000000000000000000000000000;;			cfg.Region = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SharedConfigLoadError is an error for the shared config file failed to load.
0000000000000000000000000000000000000000;;	type SharedConfigLoadError struct {
0000000000000000000000000000000000000000;;		Filename string
0000000000000000000000000000000000000000;;		Err      error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Code is the short id of the error.
0000000000000000000000000000000000000000;;	func (e SharedConfigLoadError) Code() string {
0000000000000000000000000000000000000000;;		return "SharedConfigLoadError"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message is the description of the error
0000000000000000000000000000000000000000;;	func (e SharedConfigLoadError) Message() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("failed to load config file, %s", e.Filename)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrigErr is the underlying error that caused the failure.
0000000000000000000000000000000000000000;;	func (e SharedConfigLoadError) OrigErr() error {
0000000000000000000000000000000000000000;;		return e.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error satisfies the error interface.
0000000000000000000000000000000000000000;;	func (e SharedConfigLoadError) Error() string {
0000000000000000000000000000000000000000;;		return awserr.SprintError(e.Code(), e.Message(), "", e.Err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SharedConfigProfileNotExistsError is an error for the shared config when
0000000000000000000000000000000000000000;;	// the profile was not find in the config file.
0000000000000000000000000000000000000000;;	type SharedConfigProfileNotExistsError struct {
0000000000000000000000000000000000000000;;		Profile string
0000000000000000000000000000000000000000;;		Err     error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Code is the short id of the error.
0000000000000000000000000000000000000000;;	func (e SharedConfigProfileNotExistsError) Code() string {
0000000000000000000000000000000000000000;;		return "SharedConfigProfileNotExistsError"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message is the description of the error
0000000000000000000000000000000000000000;;	func (e SharedConfigProfileNotExistsError) Message() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("failed to get profile, %s", e.Profile)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrigErr is the underlying error that caused the failure.
0000000000000000000000000000000000000000;;	func (e SharedConfigProfileNotExistsError) OrigErr() error {
0000000000000000000000000000000000000000;;		return e.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error satisfies the error interface.
0000000000000000000000000000000000000000;;	func (e SharedConfigProfileNotExistsError) Error() string {
0000000000000000000000000000000000000000;;		return awserr.SprintError(e.Code(), e.Message(), "", e.Err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SharedConfigAssumeRoleError is an error for the shared config when the
0000000000000000000000000000000000000000;;	// profile contains assume role information, but that information is invalid
0000000000000000000000000000000000000000;;	// or not complete.
0000000000000000000000000000000000000000;;	type SharedConfigAssumeRoleError struct {
0000000000000000000000000000000000000000;;		RoleARN string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Code is the short id of the error.
0000000000000000000000000000000000000000;;	func (e SharedConfigAssumeRoleError) Code() string {
0000000000000000000000000000000000000000;;		return "SharedConfigAssumeRoleError"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message is the description of the error
0000000000000000000000000000000000000000;;	func (e SharedConfigAssumeRoleError) Message() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("failed to load assume role for %s, source profile has no shared credentials",
0000000000000000000000000000000000000000;;			e.RoleARN)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrigErr is the underlying error that caused the failure.
0000000000000000000000000000000000000000;;	func (e SharedConfigAssumeRoleError) OrigErr() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error satisfies the error interface.
0000000000000000000000000000000000000000;;	func (e SharedConfigAssumeRoleError) Error() string {
0000000000000000000000000000000000000000;;		return awserr.SprintError(e.Code(), e.Message(), "", nil)
0000000000000000000000000000000000000000;;	}
