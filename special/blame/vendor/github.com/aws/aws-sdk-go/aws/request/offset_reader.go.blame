0000000000000000000000000000000000000000;;	package request
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// offsetReader is a thread-safe io.ReadCloser to prevent racing
0000000000000000000000000000000000000000;;	// with retrying requests
0000000000000000000000000000000000000000;;	type offsetReader struct {
0000000000000000000000000000000000000000;;		buf    io.ReadSeeker
0000000000000000000000000000000000000000;;		lock   sync.Mutex
0000000000000000000000000000000000000000;;		closed bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newOffsetReader(buf io.ReadSeeker, offset int64) *offsetReader {
0000000000000000000000000000000000000000;;		reader := &offsetReader{}
0000000000000000000000000000000000000000;;		buf.Seek(offset, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reader.buf = buf
0000000000000000000000000000000000000000;;		return reader
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Close will close the instance of the offset reader's access to
0000000000000000000000000000000000000000;;	// the underlying io.ReadSeeker.
0000000000000000000000000000000000000000;;	func (o *offsetReader) Close() error {
0000000000000000000000000000000000000000;;		o.lock.Lock()
0000000000000000000000000000000000000000;;		defer o.lock.Unlock()
0000000000000000000000000000000000000000;;		o.closed = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Read is a thread-safe read of the underlying io.ReadSeeker
0000000000000000000000000000000000000000;;	func (o *offsetReader) Read(p []byte) (int, error) {
0000000000000000000000000000000000000000;;		o.lock.Lock()
0000000000000000000000000000000000000000;;		defer o.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.closed {
0000000000000000000000000000000000000000;;			return 0, io.EOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o.buf.Read(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Seek is a thread-safe seeking operation.
0000000000000000000000000000000000000000;;	func (o *offsetReader) Seek(offset int64, whence int) (int64, error) {
0000000000000000000000000000000000000000;;		o.lock.Lock()
0000000000000000000000000000000000000000;;		defer o.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o.buf.Seek(offset, whence)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloseAndCopy will return a new offsetReader with a copy of the old buffer
0000000000000000000000000000000000000000;;	// and close the old buffer.
0000000000000000000000000000000000000000;;	func (o *offsetReader) CloseAndCopy(offset int64) *offsetReader {
0000000000000000000000000000000000000000;;		o.Close()
0000000000000000000000000000000000000000;;		return newOffsetReader(o.buf, offset)
0000000000000000000000000000000000000000;;	}
