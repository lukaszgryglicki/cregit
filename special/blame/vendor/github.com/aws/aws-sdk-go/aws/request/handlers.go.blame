0000000000000000000000000000000000000000;;	package request
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/handlers.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/handlers.go][vendor/github.com/aws/aws-sdk-go/aws/request/handlers.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Handlers provides a collection of request handlers for various
0000000000000000000000000000000000000000;;	// stages of handling requests.
0000000000000000000000000000000000000000;;	type Handlers struct {
0000000000000000000000000000000000000000;;		Validate         HandlerList
0000000000000000000000000000000000000000;;		Build            HandlerList
0000000000000000000000000000000000000000;;		Sign             HandlerList
0000000000000000000000000000000000000000;;		Send             HandlerList
0000000000000000000000000000000000000000;;		ValidateResponse HandlerList
0000000000000000000000000000000000000000;;		Unmarshal        HandlerList
0000000000000000000000000000000000000000;;		UnmarshalMeta    HandlerList
0000000000000000000000000000000000000000;;		UnmarshalError   HandlerList
0000000000000000000000000000000000000000;;		Retry            HandlerList
0000000000000000000000000000000000000000;;		AfterRetry       HandlerList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copy returns of this handler's lists.
0000000000000000000000000000000000000000;;	func (h *Handlers) Copy() Handlers {
0000000000000000000000000000000000000000;;		return Handlers{
0000000000000000000000000000000000000000;;			Validate:         h.Validate.copy(),
0000000000000000000000000000000000000000;;			Build:            h.Build.copy(),
0000000000000000000000000000000000000000;;			Sign:             h.Sign.copy(),
0000000000000000000000000000000000000000;;			Send:             h.Send.copy(),
0000000000000000000000000000000000000000;;			ValidateResponse: h.ValidateResponse.copy(),
0000000000000000000000000000000000000000;;			Unmarshal:        h.Unmarshal.copy(),
0000000000000000000000000000000000000000;;			UnmarshalError:   h.UnmarshalError.copy(),
0000000000000000000000000000000000000000;;			UnmarshalMeta:    h.UnmarshalMeta.copy(),
0000000000000000000000000000000000000000;;			Retry:            h.Retry.copy(),
0000000000000000000000000000000000000000;;			AfterRetry:       h.AfterRetry.copy(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clear removes callback functions for all handlers
0000000000000000000000000000000000000000;;	func (h *Handlers) Clear() {
0000000000000000000000000000000000000000;;		h.Validate.Clear()
0000000000000000000000000000000000000000;;		h.Build.Clear()
0000000000000000000000000000000000000000;;		h.Send.Clear()
0000000000000000000000000000000000000000;;		h.Sign.Clear()
0000000000000000000000000000000000000000;;		h.Unmarshal.Clear()
0000000000000000000000000000000000000000;;		h.UnmarshalMeta.Clear()
0000000000000000000000000000000000000000;;		h.UnmarshalError.Clear()
0000000000000000000000000000000000000000;;		h.ValidateResponse.Clear()
0000000000000000000000000000000000000000;;		h.Retry.Clear()
0000000000000000000000000000000000000000;;		h.AfterRetry.Clear()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A HandlerListRunItem represents an entry in the HandlerList which
0000000000000000000000000000000000000000;;	// is being run.
0000000000000000000000000000000000000000;;	type HandlerListRunItem struct {
0000000000000000000000000000000000000000;;		Index   int
0000000000000000000000000000000000000000;;		Handler NamedHandler
0000000000000000000000000000000000000000;;		Request *Request
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A HandlerList manages zero or more handlers in a list.
0000000000000000000000000000000000000000;;	type HandlerList struct {
0000000000000000000000000000000000000000;;		list []NamedHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Called after each request handler in the list is called. If set
0000000000000000000000000000000000000000;;		// and the func returns true the HandlerList will continue to iterate
0000000000000000000000000000000000000000;;		// over the request handlers. If false is returned the HandlerList
0000000000000000000000000000000000000000;;		// will stop iterating.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Should be used if extra logic to be performed between each handler
0000000000000000000000000000000000000000;;		// in the list. This can be used to terminate a list's iteration
0000000000000000000000000000000000000000;;		// based on a condition such as error like, HandlerListStopOnError.
0000000000000000000000000000000000000000;;		// Or for logging like HandlerListLogItem.
0000000000000000000000000000000000000000;;		AfterEachFn func(item HandlerListRunItem) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A NamedHandler is a struct that contains a name and function callback.
0000000000000000000000000000000000000000;;	type NamedHandler struct {
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		Fn   func(*Request)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// copy creates a copy of the handler list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) copy() HandlerList {
0000000000000000000000000000000000000000;;		n := HandlerList{
0000000000000000000000000000000000000000;;			AfterEachFn: l.AfterEachFn,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n.list = append([]NamedHandler{}, l.list...)
0000000000000000000000000000000000000000;;		return n
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clear clears the handler list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) Clear() {
0000000000000000000000000000000000000000;;		l.list = []NamedHandler{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Len returns the number of handlers in the list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) Len() int {
0000000000000000000000000000000000000000;;		return len(l.list)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PushBack pushes handler f to the back of the handler list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) PushBack(f func(*Request)) {
0000000000000000000000000000000000000000;;		l.list = append(l.list, NamedHandler{"__anonymous", f})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PushFront pushes handler f to the front of the handler list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) PushFront(f func(*Request)) {
0000000000000000000000000000000000000000;;		l.list = append([]NamedHandler{{"__anonymous", f}}, l.list...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PushBackNamed pushes named handler f to the back of the handler list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) PushBackNamed(n NamedHandler) {
0000000000000000000000000000000000000000;;		l.list = append(l.list, n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PushFrontNamed pushes named handler f to the front of the handler list.
0000000000000000000000000000000000000000;;	func (l *HandlerList) PushFrontNamed(n NamedHandler) {
0000000000000000000000000000000000000000;;		l.list = append([]NamedHandler{n}, l.list...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove removes a NamedHandler n
0000000000000000000000000000000000000000;;	func (l *HandlerList) Remove(n NamedHandler) {
0000000000000000000000000000000000000000;;		newlist := []NamedHandler{}
0000000000000000000000000000000000000000;;		for _, m := range l.list {
0000000000000000000000000000000000000000;;			if m.Name != n.Name {
0000000000000000000000000000000000000000;;				newlist = append(newlist, m)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l.list = newlist
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run executes all handlers in the list with a given request object.
0000000000000000000000000000000000000000;;	func (l *HandlerList) Run(r *Request) {
0000000000000000000000000000000000000000;;		for i, h := range l.list {
0000000000000000000000000000000000000000;;			h.Fn(r)
0000000000000000000000000000000000000000;;			item := HandlerListRunItem{
0000000000000000000000000000000000000000;;				Index: i, Handler: h, Request: r,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if l.AfterEachFn != nil && !l.AfterEachFn(item) {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandlerListLogItem logs the request handler and the state of the
0000000000000000000000000000000000000000;;	// request's Error value. Always returns true to continue iterating
0000000000000000000000000000000000000000;;	// request handlers in a HandlerList.
0000000000000000000000000000000000000000;;	func HandlerListLogItem(item HandlerListRunItem) bool {
0000000000000000000000000000000000000000;;		if item.Request.Config.Logger == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item.Request.Config.Logger.Log("DEBUG: RequestHandler",
0000000000000000000000000000000000000000;;			item.Index, item.Handler.Name, item.Request.Error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandlerListStopOnError returns false to stop the HandlerList iterating
0000000000000000000000000000000000000000;;	// over request handlers if Request.Error is not nil. True otherwise
0000000000000000000000000000000000000000;;	// to continue iterating.
0000000000000000000000000000000000000000;;	func HandlerListStopOnError(item HandlerListRunItem) bool {
0000000000000000000000000000000000000000;;		return item.Request.Error == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeAddToUserAgentHandler will add the name/version pair to the User-Agent request
0000000000000000000000000000000000000000;;	// header. If the extra parameters are provided they will be added as metadata to the
0000000000000000000000000000000000000000;;	// name/version pair resulting in the following format.
0000000000000000000000000000000000000000;;	// "name/version (extra0; extra1; ...)"
0000000000000000000000000000000000000000;;	// The user agent part will be concatenated with this current request's user agent string.
0000000000000000000000000000000000000000;;	func MakeAddToUserAgentHandler(name, version string, extra ...string) func(*Request) {
0000000000000000000000000000000000000000;;		ua := fmt.Sprintf("%s/%s", name, version)
0000000000000000000000000000000000000000;;		if len(extra) > 0 {
0000000000000000000000000000000000000000;;			ua += fmt.Sprintf(" (%s)", strings.Join(extra, "; "))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return func(r *Request) {
0000000000000000000000000000000000000000;;			AddToUserAgent(r, ua)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeAddToUserAgentFreeFormHandler adds the input to the User-Agent request header.
0000000000000000000000000000000000000000;;	// The input string will be concatenated with the current request's user agent string.
0000000000000000000000000000000000000000;;	func MakeAddToUserAgentFreeFormHandler(s string) func(*Request) {
0000000000000000000000000000000000000000;;		return func(r *Request) {
0000000000000000000000000000000000000000;;			AddToUserAgent(r, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
