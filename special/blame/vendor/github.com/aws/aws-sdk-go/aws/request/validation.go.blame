0000000000000000000000000000000000000000;;	package request
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InvalidParameterErrCode is the error code for invalid parameters errors
0000000000000000000000000000000000000000;;		InvalidParameterErrCode = "InvalidParameter"
0000000000000000000000000000000000000000;;		// ParamRequiredErrCode is the error code for required parameter errors
0000000000000000000000000000000000000000;;		ParamRequiredErrCode = "ParamRequiredError"
0000000000000000000000000000000000000000;;		// ParamMinValueErrCode is the error code for fields with too low of a
0000000000000000000000000000000000000000;;		// number value.
0000000000000000000000000000000000000000;;		ParamMinValueErrCode = "ParamMinValueError"
0000000000000000000000000000000000000000;;		// ParamMinLenErrCode is the error code for fields without enough elements.
0000000000000000000000000000000000000000;;		ParamMinLenErrCode = "ParamMinLenError"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validator provides a way for types to perform validation logic on their
0000000000000000000000000000000000000000;;	// input values that external code can use to determine if a type's values
0000000000000000000000000000000000000000;;	// are valid.
0000000000000000000000000000000000000000;;	type Validator interface {
0000000000000000000000000000000000000000;;		Validate() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ErrInvalidParams provides wrapping of invalid parameter errors found when
0000000000000000000000000000000000000000;;	// validating API operation input parameters.
0000000000000000000000000000000000000000;;	type ErrInvalidParams struct {
0000000000000000000000000000000000000000;;		// Context is the base context of the invalid parameter group.
0000000000000000000000000000000000000000;;		Context string
0000000000000000000000000000000000000000;;		errs    []ErrInvalidParam
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add adds a new invalid parameter error to the collection of invalid
0000000000000000000000000000000000000000;;	// parameters. The context of the invalid parameter will be updated to reflect
0000000000000000000000000000000000000000;;	// this collection.
0000000000000000000000000000000000000000;;	func (e *ErrInvalidParams) Add(err ErrInvalidParam) {
0000000000000000000000000000000000000000;;		err.SetContext(e.Context)
0000000000000000000000000000000000000000;;		e.errs = append(e.errs, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddNested adds the invalid parameter errors from another ErrInvalidParams
0000000000000000000000000000000000000000;;	// value into this collection. The nested errors will have their nested context
0000000000000000000000000000000000000000;;	// updated and base context to reflect the merging.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use for nested validations errors.
0000000000000000000000000000000000000000;;	func (e *ErrInvalidParams) AddNested(nestedCtx string, nested ErrInvalidParams) {
0000000000000000000000000000000000000000;;		for _, err := range nested.errs {
0000000000000000000000000000000000000000;;			err.SetContext(e.Context)
0000000000000000000000000000000000000000;;			err.AddNestedContext(nestedCtx)
0000000000000000000000000000000000000000;;			e.errs = append(e.errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Len returns the number of invalid parameter errors
0000000000000000000000000000000000000000;;	func (e ErrInvalidParams) Len() int {
0000000000000000000000000000000000000000;;		return len(e.errs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Code returns the code of the error
0000000000000000000000000000000000000000;;	func (e ErrInvalidParams) Code() string {
0000000000000000000000000000000000000000;;		return InvalidParameterErrCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message returns the message of the error
0000000000000000000000000000000000000000;;	func (e ErrInvalidParams) Message() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d validation error(s) found.", len(e.errs))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns the string formatted form of the invalid parameters.
0000000000000000000000000000000000000000;;	func (e ErrInvalidParams) Error() string {
0000000000000000000000000000000000000000;;		w := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, "%s: %s\n", e.Code(), e.Message())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, err := range e.errs {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "- %s\n", err.Message())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return w.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrigErr returns the invalid parameters as a awserr.BatchedErrors value
0000000000000000000000000000000000000000;;	func (e ErrInvalidParams) OrigErr() error {
0000000000000000000000000000000000000000;;		return awserr.NewBatchError(
0000000000000000000000000000000000000000;;			InvalidParameterErrCode, e.Message(), e.OrigErrs())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrigErrs returns a slice of the invalid parameters
0000000000000000000000000000000000000000;;	func (e ErrInvalidParams) OrigErrs() []error {
0000000000000000000000000000000000000000;;		errs := make([]error, len(e.errs))
0000000000000000000000000000000000000000;;		for i := 0; i < len(errs); i++ {
0000000000000000000000000000000000000000;;			errs[i] = e.errs[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return errs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ErrInvalidParam represents an invalid parameter error type.
0000000000000000000000000000000000000000;;	type ErrInvalidParam interface {
0000000000000000000000000000000000000000;;		awserr.Error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Field name the error occurred on.
0000000000000000000000000000000000000000;;		Field() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SetContext updates the context of the error.
0000000000000000000000000000000000000000;;		SetContext(string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AddNestedContext updates the error's context to include a nested level.
0000000000000000000000000000000000000000;;		AddNestedContext(string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type errInvalidParam struct {
0000000000000000000000000000000000000000;;		context       string
0000000000000000000000000000000000000000;;		nestedContext string
0000000000000000000000000000000000000000;;		field         string
0000000000000000000000000000000000000000;;		code          string
0000000000000000000000000000000000000000;;		msg           string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Code returns the error code for the type of invalid parameter.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) Code() string {
0000000000000000000000000000000000000000;;		return e.code
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message returns the reason the parameter was invalid, and its context.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) Message() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s, %s.", e.msg, e.Field())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns the string version of the invalid parameter error.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s: %s", e.code, e.Message())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrigErr returns nil, Implemented for awserr.Error interface.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) OrigErr() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Field Returns the field and context the error occurred.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) Field() string {
0000000000000000000000000000000000000000;;		field := e.context
0000000000000000000000000000000000000000;;		if len(field) > 0 {
0000000000000000000000000000000000000000;;			field += "."
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(e.nestedContext) > 0 {
0000000000000000000000000000000000000000;;			field += fmt.Sprintf("%s.", e.nestedContext)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		field += e.field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return field
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContext updates the base context of the error.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) SetContext(ctx string) {
0000000000000000000000000000000000000000;;		e.context = ctx
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddNestedContext prepends a context to the field's path.
0000000000000000000000000000000000000000;;	func (e *errInvalidParam) AddNestedContext(ctx string) {
0000000000000000000000000000000000000000;;		if len(e.nestedContext) == 0 {
0000000000000000000000000000000000000000;;			e.nestedContext = ctx
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			e.nestedContext = fmt.Sprintf("%s.%s", ctx, e.nestedContext)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ErrParamRequired represents an required parameter error.
0000000000000000000000000000000000000000;;	type ErrParamRequired struct {
0000000000000000000000000000000000000000;;		errInvalidParam
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewErrParamRequired creates a new required parameter error.
0000000000000000000000000000000000000000;;	func NewErrParamRequired(field string) *ErrParamRequired {
0000000000000000000000000000000000000000;;		return &ErrParamRequired{
0000000000000000000000000000000000000000;;			errInvalidParam{
0000000000000000000000000000000000000000;;				code:  ParamRequiredErrCode,
0000000000000000000000000000000000000000;;				field: field,
0000000000000000000000000000000000000000;;				msg:   fmt.Sprintf("missing required field"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ErrParamMinValue represents a minimum value parameter error.
0000000000000000000000000000000000000000;;	type ErrParamMinValue struct {
0000000000000000000000000000000000000000;;		errInvalidParam
0000000000000000000000000000000000000000;;		min float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewErrParamMinValue creates a new minimum value parameter error.
0000000000000000000000000000000000000000;;	func NewErrParamMinValue(field string, min float64) *ErrParamMinValue {
0000000000000000000000000000000000000000;;		return &ErrParamMinValue{
0000000000000000000000000000000000000000;;			errInvalidParam: errInvalidParam{
0000000000000000000000000000000000000000;;				code:  ParamMinValueErrCode,
0000000000000000000000000000000000000000;;				field: field,
0000000000000000000000000000000000000000;;				msg:   fmt.Sprintf("minimum field value of %v", min),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			min: min,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MinValue returns the field's require minimum value.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// float64 is returned for both int and float min values.
0000000000000000000000000000000000000000;;	func (e *ErrParamMinValue) MinValue() float64 {
0000000000000000000000000000000000000000;;		return e.min
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ErrParamMinLen represents a minimum length parameter error.
0000000000000000000000000000000000000000;;	type ErrParamMinLen struct {
0000000000000000000000000000000000000000;;		errInvalidParam
0000000000000000000000000000000000000000;;		min int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewErrParamMinLen creates a new minimum length parameter error.
0000000000000000000000000000000000000000;;	func NewErrParamMinLen(field string, min int) *ErrParamMinLen {
0000000000000000000000000000000000000000;;		return &ErrParamMinLen{
0000000000000000000000000000000000000000;;			errInvalidParam: errInvalidParam{
0000000000000000000000000000000000000000;;				code:  ParamMinValueErrCode,
0000000000000000000000000000000000000000;;				field: field,
0000000000000000000000000000000000000000;;				msg:   fmt.Sprintf("minimum field size of %v", min),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			min: min,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MinLen returns the field's required minimum length.
0000000000000000000000000000000000000000;;	func (e *ErrParamMinLen) MinLen() int {
0000000000000000000000000000000000000000;;		return e.min
0000000000000000000000000000000000000000;;	}
