0000000000000000000000000000000000000000;;	package request
7381c378252ae8f66befb472cf056371ba4be46a;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/request/request_pagination.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/request/request_pagination.go][vendor/github.com/aws/aws-sdk-go/aws/request/request_pagination.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awsutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//type Paginater interface {
0000000000000000000000000000000000000000;;	//	HasNextPage() bool
0000000000000000000000000000000000000000;;	//	NextPage() *Request
0000000000000000000000000000000000000000;;	//	EachPage(fn func(data interface{}, isLastPage bool) (shouldContinue bool)) error
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HasNextPage returns true if this request has more pages of data available.
0000000000000000000000000000000000000000;;	func (r *Request) HasNextPage() bool {
0000000000000000000000000000000000000000;;		return len(r.nextPageTokens()) > 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nextPageTokens returns the tokens to use when asking for the next page of
0000000000000000000000000000000000000000;;	// data.
0000000000000000000000000000000000000000;;	func (r *Request) nextPageTokens() []interface{} {
0000000000000000000000000000000000000000;;		if r.Operation.Paginator == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.Operation.TruncationToken != "" {
0000000000000000000000000000000000000000;;			tr, _ := awsutil.ValuesAtPath(r.Data, r.Operation.TruncationToken)
0000000000000000000000000000000000000000;;			if len(tr) == 0 {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch v := tr[0].(type) {
0000000000000000000000000000000000000000;;			case *bool:
0000000000000000000000000000000000000000;;				if !aws.BoolValue(v) {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case bool:
0000000000000000000000000000000000000000;;				if v == false {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokens := []interface{}{}
0000000000000000000000000000000000000000;;		tokenAdded := false
0000000000000000000000000000000000000000;;		for _, outToken := range r.Operation.OutputTokens {
0000000000000000000000000000000000000000;;			v, _ := awsutil.ValuesAtPath(r.Data, outToken)
0000000000000000000000000000000000000000;;			if len(v) > 0 {
0000000000000000000000000000000000000000;;				tokens = append(tokens, v[0])
0000000000000000000000000000000000000000;;				tokenAdded = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				tokens = append(tokens, nil)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !tokenAdded {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return tokens
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPage returns a new Request that can be executed to return the next
0000000000000000000000000000000000000000;;	// page of result data. Call .Send() on this request to execute it.
0000000000000000000000000000000000000000;;	func (r *Request) NextPage() *Request {
0000000000000000000000000000000000000000;;		tokens := r.nextPageTokens()
0000000000000000000000000000000000000000;;		if len(tokens) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data := reflect.New(reflect.TypeOf(r.Data).Elem()).Interface()
0000000000000000000000000000000000000000;;		nr := New(r.Config, r.ClientInfo, r.Handlers, r.Retryer, r.Operation, awsutil.CopyOf(r.Params), data)
0000000000000000000000000000000000000000;;		for i, intok := range nr.Operation.InputTokens {
0000000000000000000000000000000000000000;;			awsutil.SetValueAtPath(nr.Params, intok, tokens[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EachPage iterates over each page of a paginated request object. The fn
0000000000000000000000000000000000000000;;	// parameter should be a function with the following sample signature:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   func(page *T, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//       return true // return false to stop iterating
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Where "T" is the structure type matching the output structure of the given
0000000000000000000000000000000000000000;;	// operation. For example, a request object generated by
0000000000000000000000000000000000000000;;	// DynamoDB.ListTablesRequest() would expect to see dynamodb.ListTablesOutput
0000000000000000000000000000000000000000;;	// as the structure "T". The lastPage value represents whether the page is
0000000000000000000000000000000000000000;;	// the last page of data or not. The return value of this function should
0000000000000000000000000000000000000000;;	// return true to keep iterating or false to stop.
0000000000000000000000000000000000000000;;	func (r *Request) EachPage(fn func(data interface{}, isLastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		for page := r; page != nil; page = page.NextPage() {
0000000000000000000000000000000000000000;;			if err := page.Send(); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if getNextPage := fn(page.Data, !page.HasNextPage()); !getNextPage {
0000000000000000000000000000000000000000;;				return page.Error
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
