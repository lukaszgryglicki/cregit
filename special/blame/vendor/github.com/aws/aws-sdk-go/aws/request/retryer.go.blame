0000000000000000000000000000000000000000;;	package request
ba8371b1ad4f58d6c37fa3b43b005c306f9f2d92;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/request/retryer.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/request/retryer.go][vendor/github.com/aws/aws-sdk-go/aws/request/retryer.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retryer is an interface to control retry logic for a given service.
0000000000000000000000000000000000000000;;	// The default implementation used by most services is the service.DefaultRetryer
0000000000000000000000000000000000000000;;	// structure, which contains basic retry logic using exponential backoff.
0000000000000000000000000000000000000000;;	type Retryer interface {
0000000000000000000000000000000000000000;;		RetryRules(*Request) time.Duration
0000000000000000000000000000000000000000;;		ShouldRetry(*Request) bool
0000000000000000000000000000000000000000;;		MaxRetries() int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithRetryer sets a config Retryer value to the given Config returning it
0000000000000000000000000000000000000000;;	// for chaining.
0000000000000000000000000000000000000000;;	func WithRetryer(cfg *aws.Config, retryer Retryer) *aws.Config {
0000000000000000000000000000000000000000;;		cfg.Retryer = retryer
0000000000000000000000000000000000000000;;		return cfg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// retryableCodes is a collection of service response codes which are retry-able
0000000000000000000000000000000000000000;;	// without any further action.
0000000000000000000000000000000000000000;;	var retryableCodes = map[string]struct{}{
0000000000000000000000000000000000000000;;		"RequestError":   {},
0000000000000000000000000000000000000000;;		"RequestTimeout": {},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var throttleCodes = map[string]struct{}{
0000000000000000000000000000000000000000;;		"ProvisionedThroughputExceededException": {},
0000000000000000000000000000000000000000;;		"Throttling":                             {},
0000000000000000000000000000000000000000;;		"ThrottlingException":                    {},
0000000000000000000000000000000000000000;;		"RequestLimitExceeded":                   {},
0000000000000000000000000000000000000000;;		"RequestThrottled":                       {},
0000000000000000000000000000000000000000;;		"LimitExceededException":                 {}, // Deleting 10+ DynamoDb tables at once
0000000000000000000000000000000000000000;;		"TooManyRequestsException":               {}, // Lambda functions
0000000000000000000000000000000000000000;;		"PriorRequestNotComplete":                {}, // Route53
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// credsExpiredCodes is a collection of error codes which signify the credentials
0000000000000000000000000000000000000000;;	// need to be refreshed. Expired tokens require refreshing of credentials, and
0000000000000000000000000000000000000000;;	// resigning before the request can be retried.
0000000000000000000000000000000000000000;;	var credsExpiredCodes = map[string]struct{}{
0000000000000000000000000000000000000000;;		"ExpiredToken":          {},
0000000000000000000000000000000000000000;;		"ExpiredTokenException": {},
0000000000000000000000000000000000000000;;		"RequestExpired":        {}, // EC2 Only
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isCodeThrottle(code string) bool {
0000000000000000000000000000000000000000;;		_, ok := throttleCodes[code]
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isCodeRetryable(code string) bool {
0000000000000000000000000000000000000000;;		if _, ok := retryableCodes[code]; ok {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return isCodeExpiredCreds(code)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isCodeExpiredCreds(code string) bool {
0000000000000000000000000000000000000000;;		_, ok := credsExpiredCodes[code]
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrorRetryable returns whether the error is retryable, based on its Code.
0000000000000000000000000000000000000000;;	// Returns false if the request has no Error set.
0000000000000000000000000000000000000000;;	func (r *Request) IsErrorRetryable() bool {
0000000000000000000000000000000000000000;;		if r.Error != nil {
0000000000000000000000000000000000000000;;			if err, ok := r.Error.(awserr.Error); ok {
0000000000000000000000000000000000000000;;				return isCodeRetryable(err.Code())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrorThrottle returns whether the error is to be throttled based on its code.
0000000000000000000000000000000000000000;;	// Returns false if the request has no Error set
0000000000000000000000000000000000000000;;	func (r *Request) IsErrorThrottle() bool {
0000000000000000000000000000000000000000;;		if r.Error != nil {
0000000000000000000000000000000000000000;;			if err, ok := r.Error.(awserr.Error); ok {
0000000000000000000000000000000000000000;;				return isCodeThrottle(err.Code())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsErrorExpired returns whether the error code is a credential expiry error.
0000000000000000000000000000000000000000;;	// Returns false if the request has no Error set.
0000000000000000000000000000000000000000;;	func (r *Request) IsErrorExpired() bool {
0000000000000000000000000000000000000000;;		if r.Error != nil {
0000000000000000000000000000000000000000;;			if err, ok := r.Error.(awserr.Error); ok {
0000000000000000000000000000000000000000;;				return isCodeExpiredCreds(err.Code())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
