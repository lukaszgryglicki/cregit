0000000000000000000000000000000000000000;;	package aws
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/config.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/config.go][vendor/github.com/aws/aws-sdk-go/aws/config.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/endpoints"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UseServiceDefaultRetries instructs the config to use the service's own
0000000000000000000000000000000000000000;;	// default number of retries. This will be the default action if
0000000000000000000000000000000000000000;;	// Config.MaxRetries is nil also.
0000000000000000000000000000000000000000;;	const UseServiceDefaultRetries = -1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestRetryer is an alias for a type that implements the request.Retryer
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type RequestRetryer interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Config provides service configuration for service clients. By default,
0000000000000000000000000000000000000000;;	// all clients will use the defaults.DefaultConfig tructure.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create Session with MaxRetry configuration to be shared by multiple
0000000000000000000000000000000000000000;;	//     // service clients.
0000000000000000000000000000000000000000;;	//     sess, err := session.NewSession(&aws.Config{
0000000000000000000000000000000000000000;;	//         MaxRetries: aws.Int(3),
0000000000000000000000000000000000000000;;	//     })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create S3 service client with a specific Region.
0000000000000000000000000000000000000000;;	//     svc := s3.New(sess, &aws.Config{
0000000000000000000000000000000000000000;;	//         Region: aws.String("us-west-2"),
0000000000000000000000000000000000000000;;	//     })
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// Enables verbose error printing of all credential chain errors.
0000000000000000000000000000000000000000;;		// Should be used when wanting to see all errors while attempting to
0000000000000000000000000000000000000000;;		// retrieve credentials.
0000000000000000000000000000000000000000;;		CredentialsChainVerboseErrors *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The credentials object to use when signing requests. Defaults to a
0000000000000000000000000000000000000000;;		// chain of credential providers to search for credentials in environment
0000000000000000000000000000000000000000;;		// variables, shared credential file, and EC2 Instance Roles.
0000000000000000000000000000000000000000;;		Credentials *credentials.Credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An optional endpoint URL (hostname only or fully qualified URI)
0000000000000000000000000000000000000000;;		// that overrides the default generated endpoint for a client. Set this
0000000000000000000000000000000000000000;;		// to `""` to use the default generated endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @note You must still provide a `Region` value when specifying an
0000000000000000000000000000000000000000;;		//   endpoint for a client.
0000000000000000000000000000000000000000;;		Endpoint *string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The resolver to use for looking up endpoints for AWS service clients
0000000000000000000000000000000000000000;;		// to use based on region.
0000000000000000000000000000000000000000;;		EndpointResolver endpoints.Resolver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The region to send requests to. This parameter is required and must
0000000000000000000000000000000000000000;;		// be configured globally or on a per-client basis unless otherwise
0000000000000000000000000000000000000000;;		// noted. A full list of regions is found in the "Regions and Endpoints"
0000000000000000000000000000000000000000;;		// document.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @see http://docs.aws.amazon.com/general/latest/gr/rande.html
0000000000000000000000000000000000000000;;		//   AWS Regions and Endpoints
0000000000000000000000000000000000000000;;		Region *string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set this to `true` to disable SSL when sending requests. Defaults
0000000000000000000000000000000000000000;;		// to `false`.
0000000000000000000000000000000000000000;;		DisableSSL *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The HTTP client to use when sending requests. Defaults to
0000000000000000000000000000000000000000;;		// `http.DefaultClient`.
0000000000000000000000000000000000000000;;		HTTPClient *http.Client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An integer value representing the logging level. The default log level
0000000000000000000000000000000000000000;;		// is zero (LogOff), which represents no logging. To enable logging set
0000000000000000000000000000000000000000;;		// to a LogLevel Value.
0000000000000000000000000000000000000000;;		LogLevel *LogLevelType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The logger writer interface to write logging messages to. Defaults to
0000000000000000000000000000000000000000;;		// standard out.
0000000000000000000000000000000000000000;;		Logger Logger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of times that a request will be retried for failures.
0000000000000000000000000000000000000000;;		// Defaults to -1, which defers the max retry setting to the service
0000000000000000000000000000000000000000;;		// specific configuration.
0000000000000000000000000000000000000000;;		MaxRetries *int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Retryer guides how HTTP requests should be retried in case of
0000000000000000000000000000000000000000;;		// recoverable failures.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When nil or the value does not implement the request.Retryer interface,
0000000000000000000000000000000000000000;;		// the request.DefaultRetryer will be used.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When both Retryer and MaxRetries are non-nil, the former is used and
0000000000000000000000000000000000000000;;		// the latter ignored.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// To set the Retryer field in a type-safe manner and with chaining, use
0000000000000000000000000000000000000000;;		// the request.WithRetryer helper function:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//   cfg := request.WithRetryer(aws.NewConfig(), myRetryer)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		Retryer RequestRetryer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Disables semantic parameter validation, which validates input for
0000000000000000000000000000000000000000;;		// missing required fields and/or other semantic request input errors.
0000000000000000000000000000000000000000;;		DisableParamValidation *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Disables the computation of request and response checksums, e.g.,
0000000000000000000000000000000000000000;;		// CRC32 checksums in Amazon DynamoDB.
0000000000000000000000000000000000000000;;		DisableComputeChecksums *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set this to `true` to force the request to use path-style addressing,
0000000000000000000000000000000000000000;;		// i.e., `http://s3.amazonaws.com/BUCKET/KEY`. By default, the S3 client
0000000000000000000000000000000000000000;;		// will use virtual hosted bucket addressing when possible
0000000000000000000000000000000000000000;;		// (`http://BUCKET.s3.amazonaws.com/KEY`).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// @note This configuration option is specific to the Amazon S3 service.
0000000000000000000000000000000000000000;;		// @see http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html
0000000000000000000000000000000000000000;;		//   Amazon S3: Virtual Hosting of Buckets
0000000000000000000000000000000000000000;;		S3ForcePathStyle *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set this to `true` to disable the SDK adding the `Expect: 100-Continue`
0000000000000000000000000000000000000000;;		// header to PUT requests over 2MB of content. 100-Continue instructs the
0000000000000000000000000000000000000000;;		// HTTP client not to send the body until the service responds with a
0000000000000000000000000000000000000000;;		// `continue` status. This is useful to prevent sending the request body
0000000000000000000000000000000000000000;;		// until after the request is authenticated, and validated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// 100-Continue is only enabled for Go 1.6 and above. See `http.Transport`'s
0000000000000000000000000000000000000000;;		// `ExpectContinueTimeout` for information on adjusting the continue wait
0000000000000000000000000000000000000000;;		// timeout. https://golang.org/pkg/net/http/#Transport
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You should use this flag to disble 100-Continue if you experience issues
0000000000000000000000000000000000000000;;		// with proxies or third party S3 compatible services.
0000000000000000000000000000000000000000;;		S3Disable100Continue *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set this to `true` to enable S3 Accelerate feature. For all operations
0000000000000000000000000000000000000000;;		// compatible with S3 Accelerate will use the accelerate endpoint for
0000000000000000000000000000000000000000;;		// requests. Requests not compatible will fall back to normal S3 requests.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The bucket must be enable for accelerate to be used with S3 client with
0000000000000000000000000000000000000000;;		// accelerate enabled. If the bucket is not enabled for accelerate an error
0000000000000000000000000000000000000000;;		// will be returned. The bucket name must be DNS compatible to also work
0000000000000000000000000000000000000000;;		// with accelerate.
0000000000000000000000000000000000000000;;		S3UseAccelerate *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set this to `true` to disable the EC2Metadata client from overriding the
0000000000000000000000000000000000000000;;		// default http.Client's Timeout. This is helpful if you do not want the
0000000000000000000000000000000000000000;;		// EC2Metadata client to create a new http.Client. This options is only
0000000000000000000000000000000000000000;;		// meaningful if you're not already using a custom HTTP client with the
0000000000000000000000000000000000000000;;		// SDK. Enabled by default.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Must be set and provided to the session.NewSession() in order to disable
0000000000000000000000000000000000000000;;		// the EC2Metadata overriding the timeout for default credentials chain.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Example:
0000000000000000000000000000000000000000;;		//    sess, err := session.NewSession(aws.NewConfig().WithEC2MetadataDiableTimeoutOverride(true))
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    svc := s3.New(sess)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		EC2MetadataDisableTimeoutOverride *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Instructs the endpiont to be generated for a service client to
0000000000000000000000000000000000000000;;		// be the dual stack endpoint. The dual stack endpoint will support
0000000000000000000000000000000000000000;;		// both IPv4 and IPv6 addressing.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Setting this for a service which does not support dual stack will fail
0000000000000000000000000000000000000000;;		// to make requets. It is not recommended to set this value on the session
0000000000000000000000000000000000000000;;		// as it will apply to all service clients created with the session. Even
0000000000000000000000000000000000000000;;		// services which don't support dual stack endpoints.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the Endpoint config value is also provided the UseDualStack flag
0000000000000000000000000000000000000000;;		// will be ignored.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Only supported with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//     sess, err := session.NewSession()
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//     svc := s3.New(sess, &aws.Config{
0000000000000000000000000000000000000000;;		//         UseDualStack: aws.Bool(true),
0000000000000000000000000000000000000000;;		//     })
0000000000000000000000000000000000000000;;		UseDualStack *bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SleepDelay is an override for the func the SDK will call when sleeping
0000000000000000000000000000000000000000;;		// during the lifecycle of a request. Specifically this will be used for
0000000000000000000000000000000000000000;;		// request delays. This value should only be used for testing. To adjust
0000000000000000000000000000000000000000;;		// the delay of a request see the aws/client.DefaultRetryer and
0000000000000000000000000000000000000000;;		// aws/request.Retryer.
0000000000000000000000000000000000000000;;		SleepDelay func(time.Duration)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisableRestProtocolURICleaning will not clean the URL path when making rest protocol requests.
0000000000000000000000000000000000000000;;		// Will default to false. This would only be used for empty directory names in s3 requests.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Example:
0000000000000000000000000000000000000000;;		//    sess, err := session.NewSession(&aws.Config{DisableRestProtocolURICleaning: aws.Bool(true))
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    svc := s3.New(sess)
0000000000000000000000000000000000000000;;		//    out, err := svc.GetObject(&s3.GetObjectInput {
0000000000000000000000000000000000000000;;		//    	Bucket: aws.String("bucketname"),
0000000000000000000000000000000000000000;;		//    	Key: aws.String("//foo//bar//moo"),
0000000000000000000000000000000000000000;;		//    })
0000000000000000000000000000000000000000;;		DisableRestProtocolURICleaning *bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewConfig returns a new Config pointer that can be chained with builder
0000000000000000000000000000000000000000;;	// methods to set multiple configuration values inline without using pointers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create Session with MaxRetry configuration to be shared by multiple
0000000000000000000000000000000000000000;;	//     // service clients.
0000000000000000000000000000000000000000;;	//     sess, err := session.NewSession(aws.NewConfig().
0000000000000000000000000000000000000000;;	//         WithMaxRetries(3),
0000000000000000000000000000000000000000;;	//     )
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create S3 service client with a specific Region.
0000000000000000000000000000000000000000;;	//     svc := s3.New(sess, aws.NewConfig().
0000000000000000000000000000000000000000;;	//         WithRegion("us-west-2"),
0000000000000000000000000000000000000000;;	//     )
0000000000000000000000000000000000000000;;	func NewConfig() *Config {
0000000000000000000000000000000000000000;;		return &Config{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCredentialsChainVerboseErrors sets a config verbose errors boolean and returning
0000000000000000000000000000000000000000;;	// a Config pointer.
0000000000000000000000000000000000000000;;	func (c *Config) WithCredentialsChainVerboseErrors(verboseErrs bool) *Config {
0000000000000000000000000000000000000000;;		c.CredentialsChainVerboseErrors = &verboseErrs
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCredentials sets a config Credentials value returning a Config pointer
0000000000000000000000000000000000000000;;	// for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithCredentials(creds *credentials.Credentials) *Config {
0000000000000000000000000000000000000000;;		c.Credentials = creds
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEndpoint sets a config Endpoint value returning a Config pointer for
0000000000000000000000000000000000000000;;	// chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithEndpoint(endpoint string) *Config {
0000000000000000000000000000000000000000;;		c.Endpoint = &endpoint
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEndpointResolver sets a config EndpointResolver value returning a
0000000000000000000000000000000000000000;;	// Config pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithEndpointResolver(resolver endpoints.Resolver) *Config {
0000000000000000000000000000000000000000;;		c.EndpointResolver = resolver
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithRegion sets a config Region value returning a Config pointer for
0000000000000000000000000000000000000000;;	// chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithRegion(region string) *Config {
0000000000000000000000000000000000000000;;		c.Region = &region
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDisableSSL sets a config DisableSSL value returning a Config pointer
0000000000000000000000000000000000000000;;	// for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithDisableSSL(disable bool) *Config {
0000000000000000000000000000000000000000;;		c.DisableSSL = &disable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithHTTPClient sets a config HTTPClient value returning a Config pointer
0000000000000000000000000000000000000000;;	// for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithHTTPClient(client *http.Client) *Config {
0000000000000000000000000000000000000000;;		c.HTTPClient = client
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxRetries sets a config MaxRetries value returning a Config pointer
0000000000000000000000000000000000000000;;	// for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithMaxRetries(max int) *Config {
0000000000000000000000000000000000000000;;		c.MaxRetries = &max
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDisableParamValidation sets a config DisableParamValidation value
0000000000000000000000000000000000000000;;	// returning a Config pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithDisableParamValidation(disable bool) *Config {
0000000000000000000000000000000000000000;;		c.DisableParamValidation = &disable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDisableComputeChecksums sets a config DisableComputeChecksums value
0000000000000000000000000000000000000000;;	// returning a Config pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithDisableComputeChecksums(disable bool) *Config {
0000000000000000000000000000000000000000;;		c.DisableComputeChecksums = &disable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLogLevel sets a config LogLevel value returning a Config pointer for
0000000000000000000000000000000000000000;;	// chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithLogLevel(level LogLevelType) *Config {
0000000000000000000000000000000000000000;;		c.LogLevel = &level
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLogger sets a config Logger value returning a Config pointer for
0000000000000000000000000000000000000000;;	// chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithLogger(logger Logger) *Config {
0000000000000000000000000000000000000000;;		c.Logger = logger
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithS3ForcePathStyle sets a config S3ForcePathStyle value returning a Config
0000000000000000000000000000000000000000;;	// pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithS3ForcePathStyle(force bool) *Config {
0000000000000000000000000000000000000000;;		c.S3ForcePathStyle = &force
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithS3Disable100Continue sets a config S3Disable100Continue value returning
0000000000000000000000000000000000000000;;	// a Config pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithS3Disable100Continue(disable bool) *Config {
0000000000000000000000000000000000000000;;		c.S3Disable100Continue = &disable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithS3UseAccelerate sets a config S3UseAccelerate value returning a Config
0000000000000000000000000000000000000000;;	// pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithS3UseAccelerate(enable bool) *Config {
0000000000000000000000000000000000000000;;		c.S3UseAccelerate = &enable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithUseDualStack sets a config UseDualStack value returning a Config
0000000000000000000000000000000000000000;;	// pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithUseDualStack(enable bool) *Config {
0000000000000000000000000000000000000000;;		c.UseDualStack = &enable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEC2MetadataDisableTimeoutOverride sets a config EC2MetadataDisableTimeoutOverride value
0000000000000000000000000000000000000000;;	// returning a Config pointer for chaining.
0000000000000000000000000000000000000000;;	func (c *Config) WithEC2MetadataDisableTimeoutOverride(enable bool) *Config {
0000000000000000000000000000000000000000;;		c.EC2MetadataDisableTimeoutOverride = &enable
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithSleepDelay overrides the function used to sleep while waiting for the
0000000000000000000000000000000000000000;;	// next retry. Defaults to time.Sleep.
0000000000000000000000000000000000000000;;	func (c *Config) WithSleepDelay(fn func(time.Duration)) *Config {
0000000000000000000000000000000000000000;;		c.SleepDelay = fn
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MergeIn merges the passed in configs into the existing config object.
0000000000000000000000000000000000000000;;	func (c *Config) MergeIn(cfgs ...*Config) {
0000000000000000000000000000000000000000;;		for _, other := range cfgs {
0000000000000000000000000000000000000000;;			mergeInConfig(c, other)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mergeInConfig(dst *Config, other *Config) {
0000000000000000000000000000000000000000;;		if other == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.CredentialsChainVerboseErrors != nil {
0000000000000000000000000000000000000000;;			dst.CredentialsChainVerboseErrors = other.CredentialsChainVerboseErrors
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.Credentials != nil {
0000000000000000000000000000000000000000;;			dst.Credentials = other.Credentials
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.Endpoint != nil {
0000000000000000000000000000000000000000;;			dst.Endpoint = other.Endpoint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.EndpointResolver != nil {
0000000000000000000000000000000000000000;;			dst.EndpointResolver = other.EndpointResolver
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.Region != nil {
0000000000000000000000000000000000000000;;			dst.Region = other.Region
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.DisableSSL != nil {
0000000000000000000000000000000000000000;;			dst.DisableSSL = other.DisableSSL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.HTTPClient != nil {
0000000000000000000000000000000000000000;;			dst.HTTPClient = other.HTTPClient
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.LogLevel != nil {
0000000000000000000000000000000000000000;;			dst.LogLevel = other.LogLevel
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.Logger != nil {
0000000000000000000000000000000000000000;;			dst.Logger = other.Logger
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.MaxRetries != nil {
0000000000000000000000000000000000000000;;			dst.MaxRetries = other.MaxRetries
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.Retryer != nil {
0000000000000000000000000000000000000000;;			dst.Retryer = other.Retryer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.DisableParamValidation != nil {
0000000000000000000000000000000000000000;;			dst.DisableParamValidation = other.DisableParamValidation
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.DisableComputeChecksums != nil {
0000000000000000000000000000000000000000;;			dst.DisableComputeChecksums = other.DisableComputeChecksums
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.S3ForcePathStyle != nil {
0000000000000000000000000000000000000000;;			dst.S3ForcePathStyle = other.S3ForcePathStyle
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.S3Disable100Continue != nil {
0000000000000000000000000000000000000000;;			dst.S3Disable100Continue = other.S3Disable100Continue
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.S3UseAccelerate != nil {
0000000000000000000000000000000000000000;;			dst.S3UseAccelerate = other.S3UseAccelerate
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.UseDualStack != nil {
0000000000000000000000000000000000000000;;			dst.UseDualStack = other.UseDualStack
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.EC2MetadataDisableTimeoutOverride != nil {
0000000000000000000000000000000000000000;;			dst.EC2MetadataDisableTimeoutOverride = other.EC2MetadataDisableTimeoutOverride
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.SleepDelay != nil {
0000000000000000000000000000000000000000;;			dst.SleepDelay = other.SleepDelay
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if other.DisableRestProtocolURICleaning != nil {
0000000000000000000000000000000000000000;;			dst.DisableRestProtocolURICleaning = other.DisableRestProtocolURICleaning
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copy will return a shallow copy of the Config object. If any additional
0000000000000000000000000000000000000000;;	// configurations are provided they will be merged into the new config returned.
0000000000000000000000000000000000000000;;	func (c *Config) Copy(cfgs ...*Config) *Config {
0000000000000000000000000000000000000000;;		dst := &Config{}
0000000000000000000000000000000000000000;;		dst.MergeIn(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, cfg := range cfgs {
0000000000000000000000000000000000000000;;			dst.MergeIn(cfg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
