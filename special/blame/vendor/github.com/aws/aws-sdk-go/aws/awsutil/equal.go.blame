0000000000000000000000000000000000000000;;	package awsutil
7381c378252ae8f66befb472cf056371ba4be46a;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/awsutil/equal.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/awsutil/equal.go][vendor/github.com/aws/aws-sdk-go/aws/awsutil/equal.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeepEqual returns if the two values are deeply equal like reflect.DeepEqual.
0000000000000000000000000000000000000000;;	// In addition to this, this method will also dereference the input values if
0000000000000000000000000000000000000000;;	// possible so the DeepEqual performed will not fail if one parameter is a
0000000000000000000000000000000000000000;;	// pointer and the other is not.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// DeepEqual will not perform indirection of nested values of the input parameters.
0000000000000000000000000000000000000000;;	func DeepEqual(a, b interface{}) bool {
0000000000000000000000000000000000000000;;		ra := reflect.Indirect(reflect.ValueOf(a))
0000000000000000000000000000000000000000;;		rb := reflect.Indirect(reflect.ValueOf(b))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if raValid, rbValid := ra.IsValid(), rb.IsValid(); !raValid && !rbValid {
0000000000000000000000000000000000000000;;			// If the elements are both nil, and of the same type the are equal
0000000000000000000000000000000000000000;;			// If they are of different types they are not equal
0000000000000000000000000000000000000000;;			return reflect.TypeOf(a) == reflect.TypeOf(b)
0000000000000000000000000000000000000000;;		} else if raValid != rbValid {
0000000000000000000000000000000000000000;;			// Both values must be valid to be equal
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(ra.Interface(), rb.Interface())
0000000000000000000000000000000000000000;;	}
