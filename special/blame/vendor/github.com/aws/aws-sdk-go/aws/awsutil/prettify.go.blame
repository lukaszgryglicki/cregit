0000000000000000000000000000000000000000;;	package awsutil
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/awsutil/string_value.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/awsutil/string_value.go][vendor/github.com/aws/aws-sdk-go/aws/awsutil/prettify.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Prettify returns the string representation of a value.
0000000000000000000000000000000000000000;;	func Prettify(i interface{}) string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		prettify(reflect.ValueOf(i), 0, &buf)
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// prettify will recursively walk value v to build a textual
0000000000000000000000000000000000000000;;	// representation of the value.
0000000000000000000000000000000000000000;;	func prettify(v reflect.Value, indent int, buf *bytes.Buffer) {
0000000000000000000000000000000000000000;;		for v.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			v = v.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Struct:
0000000000000000000000000000000000000000;;			strtype := v.Type().String()
0000000000000000000000000000000000000000;;			if strtype == "time.Time" {
0000000000000000000000000000000000000000;;				fmt.Fprintf(buf, "%s", v.Interface())
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if strings.HasPrefix(strtype, "io.") {
0000000000000000000000000000000000000000;;				buf.WriteString("<buffer>")
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buf.WriteString("{\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			names := []string{}
0000000000000000000000000000000000000000;;			for i := 0; i < v.Type().NumField(); i++ {
0000000000000000000000000000000000000000;;				name := v.Type().Field(i).Name
0000000000000000000000000000000000000000;;				f := v.Field(i)
0000000000000000000000000000000000000000;;				if name[0:1] == strings.ToLower(name[0:1]) {
0000000000000000000000000000000000000000;;					continue // ignore unexported fields
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if (f.Kind() == reflect.Ptr || f.Kind() == reflect.Slice || f.Kind() == reflect.Map) && f.IsNil() {
0000000000000000000000000000000000000000;;					continue // ignore unset fields
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				names = append(names, name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i, n := range names {
0000000000000000000000000000000000000000;;				val := v.FieldByName(n)
0000000000000000000000000000000000000000;;				buf.WriteString(strings.Repeat(" ", indent+2))
0000000000000000000000000000000000000000;;				buf.WriteString(n + ": ")
0000000000000000000000000000000000000000;;				prettify(val, indent+2, buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if i < len(names)-1 {
0000000000000000000000000000000000000000;;					buf.WriteString(",\n")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buf.WriteString("\n" + strings.Repeat(" ", indent) + "}")
0000000000000000000000000000000000000000;;		case reflect.Slice:
0000000000000000000000000000000000000000;;			strtype := v.Type().String()
0000000000000000000000000000000000000000;;			if strtype == "[]uint8" {
0000000000000000000000000000000000000000;;				fmt.Fprintf(buf, "<binary> len %d", v.Len())
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			nl, id, id2 := "", "", ""
0000000000000000000000000000000000000000;;			if v.Len() > 3 {
0000000000000000000000000000000000000000;;				nl, id, id2 = "\n", strings.Repeat(" ", indent), strings.Repeat(" ", indent+2)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.WriteString("[" + nl)
0000000000000000000000000000000000000000;;			for i := 0; i < v.Len(); i++ {
0000000000000000000000000000000000000000;;				buf.WriteString(id2)
0000000000000000000000000000000000000000;;				prettify(v.Index(i), indent+2, buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if i < v.Len()-1 {
0000000000000000000000000000000000000000;;					buf.WriteString("," + nl)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buf.WriteString(nl + id + "]")
0000000000000000000000000000000000000000;;		case reflect.Map:
0000000000000000000000000000000000000000;;			buf.WriteString("{\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i, k := range v.MapKeys() {
0000000000000000000000000000000000000000;;				buf.WriteString(strings.Repeat(" ", indent+2))
0000000000000000000000000000000000000000;;				buf.WriteString(k.String() + ": ")
0000000000000000000000000000000000000000;;				prettify(v.MapIndex(k), indent+2, buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if i < v.Len()-1 {
0000000000000000000000000000000000000000;;					buf.WriteString(",\n")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buf.WriteString("\n" + strings.Repeat(" ", indent) + "}")
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			if !v.IsValid() {
0000000000000000000000000000000000000000;;				fmt.Fprint(buf, "<invalid value>")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			format := "%v"
0000000000000000000000000000000000000000;;			switch v.Interface().(type) {
0000000000000000000000000000000000000000;;			case string:
0000000000000000000000000000000000000000;;				format = "%q"
0000000000000000000000000000000000000000;;			case io.ReadSeeker, io.Reader:
0000000000000000000000000000000000000000;;				format = "buffer(%p)"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(buf, format, v.Interface())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
