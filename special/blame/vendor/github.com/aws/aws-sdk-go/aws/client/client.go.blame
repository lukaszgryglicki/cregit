0000000000000000000000000000000000000000;;	package client
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/service.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/aws/service.go][vendor/github.com/aws/aws-sdk-go/aws/client/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http/httputil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client/metadata"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Config provides configuration to a service client instance.
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		Config        *aws.Config
0000000000000000000000000000000000000000;;		Handlers      request.Handlers
0000000000000000000000000000000000000000;;		Endpoint      string
0000000000000000000000000000000000000000;;		SigningRegion string
0000000000000000000000000000000000000000;;		SigningName   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfigProvider provides a generic way for a service client to receive
0000000000000000000000000000000000000000;;	// the ClientConfig without circular dependencies.
0000000000000000000000000000000000000000;;	type ConfigProvider interface {
0000000000000000000000000000000000000000;;		ClientConfig(serviceName string, cfgs ...*aws.Config) Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Client implements the base client request and response handling
0000000000000000000000000000000000000000;;	// used by all service clients.
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		request.Retryer
0000000000000000000000000000000000000000;;		metadata.ClientInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config   aws.Config
0000000000000000000000000000000000000000;;		Handlers request.Handlers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New will return a pointer to a new initialized service client.
0000000000000000000000000000000000000000;;	func New(cfg aws.Config, info metadata.ClientInfo, handlers request.Handlers, options ...func(*Client)) *Client {
0000000000000000000000000000000000000000;;		svc := &Client{
0000000000000000000000000000000000000000;;			Config:     cfg,
0000000000000000000000000000000000000000;;			ClientInfo: info,
0000000000000000000000000000000000000000;;			Handlers:   handlers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch retryer, ok := cfg.Retryer.(request.Retryer); {
0000000000000000000000000000000000000000;;		case ok:
0000000000000000000000000000000000000000;;			svc.Retryer = retryer
0000000000000000000000000000000000000000;;		case cfg.Retryer != nil && cfg.Logger != nil:
0000000000000000000000000000000000000000;;			s := fmt.Sprintf("WARNING: %T does not implement request.Retryer; using DefaultRetryer instead", cfg.Retryer)
0000000000000000000000000000000000000000;;			cfg.Logger.Log(s)
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			maxRetries := aws.IntValue(cfg.MaxRetries)
0000000000000000000000000000000000000000;;			if cfg.MaxRetries == nil || maxRetries == aws.UseServiceDefaultRetries {
0000000000000000000000000000000000000000;;				maxRetries = 3
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			svc.Retryer = DefaultRetryer{NumMaxRetries: maxRetries}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		svc.AddDebugHandlers()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, option := range options {
0000000000000000000000000000000000000000;;			option(svc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRequest returns a new Request pointer for the service API
0000000000000000000000000000000000000000;;	// operation and parameters.
0000000000000000000000000000000000000000;;	func (c *Client) NewRequest(operation *request.Operation, params interface{}, data interface{}) *request.Request {
0000000000000000000000000000000000000000;;		return request.New(c.Config, c.ClientInfo, c.Handlers, c.Retryer, operation, params, data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddDebugHandlers injects debug logging handlers into the service to log request
0000000000000000000000000000000000000000;;	// debug information.
0000000000000000000000000000000000000000;;	func (c *Client) AddDebugHandlers() {
0000000000000000000000000000000000000000;;		if !c.Config.LogLevel.AtLeast(aws.LogDebug) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Handlers.Send.PushFront(logRequest)
0000000000000000000000000000000000000000;;		c.Handlers.Send.PushBack(logResponse)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const logReqMsg = `DEBUG: Request %s/%s Details:
0000000000000000000000000000000000000000;;	---[ REQUEST POST-SIGN ]-----------------------------
0000000000000000000000000000000000000000;;	%s
0000000000000000000000000000000000000000;;	-----------------------------------------------------`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const logReqErrMsg = `DEBUG ERROR: Request %s/%s:
0000000000000000000000000000000000000000;;	---[ REQUEST DUMP ERROR ]-----------------------------
0000000000000000000000000000000000000000;;	%s
0000000000000000000000000000000000000000;;	-----------------------------------------------------`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func logRequest(r *request.Request) {
0000000000000000000000000000000000000000;;		logBody := r.Config.LogLevel.Matches(aws.LogDebugWithHTTPBody)
0000000000000000000000000000000000000000;;		dumpedBody, err := httputil.DumpRequestOut(r.HTTPRequest, logBody)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Config.Logger.Log(fmt.Sprintf(logReqErrMsg, r.ClientInfo.ServiceName, r.Operation.Name, err))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if logBody {
0000000000000000000000000000000000000000;;			// Reset the request body because dumpRequest will re-wrap the r.HTTPRequest's
0000000000000000000000000000000000000000;;			// Body as a NoOpCloser and will not be reset after read by the HTTP
0000000000000000000000000000000000000000;;			// client reader.
0000000000000000000000000000000000000000;;			r.ResetBody()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Config.Logger.Log(fmt.Sprintf(logReqMsg, r.ClientInfo.ServiceName, r.Operation.Name, string(dumpedBody)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const logRespMsg = `DEBUG: Response %s/%s Details:
0000000000000000000000000000000000000000;;	---[ RESPONSE ]--------------------------------------
0000000000000000000000000000000000000000;;	%s
0000000000000000000000000000000000000000;;	-----------------------------------------------------`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const logRespErrMsg = `DEBUG ERROR: Response %s/%s:
0000000000000000000000000000000000000000;;	---[ RESPONSE DUMP ERROR ]-----------------------------
0000000000000000000000000000000000000000;;	%s
0000000000000000000000000000000000000000;;	-----------------------------------------------------`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func logResponse(r *request.Request) {
0000000000000000000000000000000000000000;;		var msg = "no response data"
0000000000000000000000000000000000000000;;		if r.HTTPResponse != nil {
0000000000000000000000000000000000000000;;			logBody := r.Config.LogLevel.Matches(aws.LogDebugWithHTTPBody)
0000000000000000000000000000000000000000;;			dumpedBody, err := httputil.DumpResponse(r.HTTPResponse, logBody)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				r.Config.Logger.Log(fmt.Sprintf(logRespErrMsg, r.ClientInfo.ServiceName, r.Operation.Name, err))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			msg = string(dumpedBody)
0000000000000000000000000000000000000000;;		} else if r.Error != nil {
0000000000000000000000000000000000000000;;			msg = r.Error.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.Config.Logger.Log(fmt.Sprintf(logRespMsg, r.ClientInfo.ServiceName, r.Operation.Name, msg))
0000000000000000000000000000000000000000;;	}
