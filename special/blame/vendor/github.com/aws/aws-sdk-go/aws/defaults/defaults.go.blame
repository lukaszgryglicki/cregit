0000000000000000000000000000000000000000;;	// Package defaults is a collection of helpers to retrieve the SDK's default
0000000000000000000000000000000000000000;;	// configuration and handlers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generally this package shouldn't be used directly, but session.Session
0000000000000000000000000000000000000000;;	// instead. This package is useful when you need to reset the defaults
0000000000000000000000000000000000000000;;	// of a session or service client to the SDK defaults before setting
0000000000000000000000000000000000000000;;	// additional parameters.
0000000000000000000000000000000000000000;;	package defaults
ba8371b1ad4f58d6c37fa3b43b005c306f9f2d92;Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/defaults/defaults.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/aws/defaults/defaults.go][vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/corehandlers"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/credentials/endpointcreds"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/ec2metadata"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/endpoints"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Defaults provides a collection of default values for SDK clients.
0000000000000000000000000000000000000000;;	type Defaults struct {
0000000000000000000000000000000000000000;;		Config   *aws.Config
0000000000000000000000000000000000000000;;		Handlers request.Handlers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns the SDK's default values with Config and handlers pre-configured.
0000000000000000000000000000000000000000;;	func Get() Defaults {
0000000000000000000000000000000000000000;;		cfg := Config()
0000000000000000000000000000000000000000;;		handlers := Handlers()
0000000000000000000000000000000000000000;;		cfg.Credentials = CredChain(cfg, handlers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Defaults{
0000000000000000000000000000000000000000;;			Config:   cfg,
0000000000000000000000000000000000000000;;			Handlers: handlers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Config returns the default configuration without credentials.
0000000000000000000000000000000000000000;;	// To retrieve a config with credentials also included use
0000000000000000000000000000000000000000;;	// `defaults.Get().Config` instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generally you shouldn't need to use this method directly, but
0000000000000000000000000000000000000000;;	// is available if you need to reset the configuration of an
0000000000000000000000000000000000000000;;	// existing service client or session.
0000000000000000000000000000000000000000;;	func Config() *aws.Config {
0000000000000000000000000000000000000000;;		return aws.NewConfig().
0000000000000000000000000000000000000000;;			WithCredentials(credentials.AnonymousCredentials).
0000000000000000000000000000000000000000;;			WithRegion(os.Getenv("AWS_REGION")).
0000000000000000000000000000000000000000;;			WithHTTPClient(http.DefaultClient).
0000000000000000000000000000000000000000;;			WithMaxRetries(aws.UseServiceDefaultRetries).
0000000000000000000000000000000000000000;;			WithLogger(aws.NewDefaultLogger()).
0000000000000000000000000000000000000000;;			WithLogLevel(aws.LogOff).
0000000000000000000000000000000000000000;;			WithSleepDelay(time.Sleep).
0000000000000000000000000000000000000000;;			WithEndpointResolver(endpoints.DefaultResolver())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handlers returns the default request handlers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generally you shouldn't need to use this method directly, but
0000000000000000000000000000000000000000;;	// is available if you need to reset the request handlers of an
0000000000000000000000000000000000000000;;	// existing service client or session.
0000000000000000000000000000000000000000;;	func Handlers() request.Handlers {
0000000000000000000000000000000000000000;;		var handlers request.Handlers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handlers.Validate.PushBackNamed(corehandlers.ValidateEndpointHandler)
0000000000000000000000000000000000000000;;		handlers.Validate.AfterEachFn = request.HandlerListStopOnError
0000000000000000000000000000000000000000;;		handlers.Build.PushBackNamed(corehandlers.SDKVersionUserAgentHandler)
0000000000000000000000000000000000000000;;		handlers.Build.AfterEachFn = request.HandlerListStopOnError
0000000000000000000000000000000000000000;;		handlers.Sign.PushBackNamed(corehandlers.BuildContentLengthHandler)
0000000000000000000000000000000000000000;;		handlers.Send.PushBackNamed(corehandlers.ValidateReqSigHandler)
0000000000000000000000000000000000000000;;		handlers.Send.PushBackNamed(corehandlers.SendHandler)
0000000000000000000000000000000000000000;;		handlers.AfterRetry.PushBackNamed(corehandlers.AfterRetryHandler)
0000000000000000000000000000000000000000;;		handlers.ValidateResponse.PushBackNamed(corehandlers.ValidateResponseHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return handlers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CredChain returns the default credential chain.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generally you shouldn't need to use this method directly, but
0000000000000000000000000000000000000000;;	// is available if you need to reset the credentials of an
0000000000000000000000000000000000000000;;	// existing service client or session's Config.
0000000000000000000000000000000000000000;;	func CredChain(cfg *aws.Config, handlers request.Handlers) *credentials.Credentials {
0000000000000000000000000000000000000000;;		return credentials.NewCredentials(&credentials.ChainProvider{
0000000000000000000000000000000000000000;;			VerboseErrors: aws.BoolValue(cfg.CredentialsChainVerboseErrors),
0000000000000000000000000000000000000000;;			Providers: []credentials.Provider{
0000000000000000000000000000000000000000;;				&credentials.EnvProvider{},
0000000000000000000000000000000000000000;;				&credentials.SharedCredentialsProvider{Filename: "", Profile: ""},
0000000000000000000000000000000000000000;;				RemoteCredProvider(*cfg, handlers),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoteCredProvider returns a credenitials provider for the default remote
0000000000000000000000000000000000000000;;	// endpoints such as EC2 or ECS Roles.
0000000000000000000000000000000000000000;;	func RemoteCredProvider(cfg aws.Config, handlers request.Handlers) credentials.Provider {
0000000000000000000000000000000000000000;;		ecsCredURI := os.Getenv("AWS_CONTAINER_CREDENTIALS_RELATIVE_URI")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(ecsCredURI) > 0 {
0000000000000000000000000000000000000000;;			return ecsCredProvider(cfg, handlers, ecsCredURI)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ec2RoleProvider(cfg, handlers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ecsCredProvider(cfg aws.Config, handlers request.Handlers, uri string) credentials.Provider {
0000000000000000000000000000000000000000;;		const host = `169.254.170.2`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return endpointcreds.NewProviderClient(cfg, handlers,
0000000000000000000000000000000000000000;;			fmt.Sprintf("http://%s%s", host, uri),
0000000000000000000000000000000000000000;;			func(p *endpointcreds.Provider) {
0000000000000000000000000000000000000000;;				p.ExpiryWindow = 5 * time.Minute
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ec2RoleProvider(cfg aws.Config, handlers request.Handlers) credentials.Provider {
0000000000000000000000000000000000000000;;		resolver := cfg.EndpointResolver
0000000000000000000000000000000000000000;;		if resolver == nil {
0000000000000000000000000000000000000000;;			resolver = endpoints.DefaultResolver()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		e, _ := resolver.EndpointFor(endpoints.Ec2metadataServiceID, "")
0000000000000000000000000000000000000000;;		return &ec2rolecreds.EC2RoleProvider{
0000000000000000000000000000000000000000;;			Client:       ec2metadata.NewClient(cfg, handlers, e.URL, e.SigningRegion),
0000000000000000000000000000000000000000;;			ExpiryWindow: 5 * time.Minute,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
