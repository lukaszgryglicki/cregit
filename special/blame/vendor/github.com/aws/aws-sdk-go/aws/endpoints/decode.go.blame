0000000000000000000000000000000000000000;;	package endpoints
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type modelDefinition map[string]json.RawMessage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A DecodeModelOptions are the options for how the endpoints model definition
0000000000000000000000000000000000000000;;	// are decoded.
0000000000000000000000000000000000000000;;	type DecodeModelOptions struct {
0000000000000000000000000000000000000000;;		SkipCustomizations bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set combines all of the option functions together.
0000000000000000000000000000000000000000;;	func (d *DecodeModelOptions) Set(optFns ...func(*DecodeModelOptions)) {
0000000000000000000000000000000000000000;;		for _, fn := range optFns {
0000000000000000000000000000000000000000;;			fn(d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecodeModel unmarshals a Regions and Endpoint model definition file into
0000000000000000000000000000000000000000;;	// a endpoint Resolver. If the file format is not supported, or an error occurs
0000000000000000000000000000000000000000;;	// when unmarshaling the model an error will be returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Casting the return value of this func to a EnumPartitions will
0000000000000000000000000000000000000000;;	// allow you to get a list of the partitions in the order the endpoints
0000000000000000000000000000000000000000;;	// will be resolved in.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    resolver, err := endpoints.DecodeModel(reader)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    partitions := resolver.(endpoints.EnumPartitions).Partitions()
0000000000000000000000000000000000000000;;	//    for _, p := range partitions {
0000000000000000000000000000000000000000;;	//        // ... inspect partitions
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	func DecodeModel(r io.Reader, optFns ...func(*DecodeModelOptions)) (Resolver, error) {
0000000000000000000000000000000000000000;;		var opts DecodeModelOptions
0000000000000000000000000000000000000000;;		opts.Set(optFns...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the version of the partition file to determine what
0000000000000000000000000000000000000000;;		// unmarshaling model to use.
0000000000000000000000000000000000000000;;		modelDef := modelDefinition{}
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(r).Decode(&modelDef); err != nil {
0000000000000000000000000000000000000000;;			return nil, newDecodeModelError("failed to decode endpoints model", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var version string
0000000000000000000000000000000000000000;;		if b, ok := modelDef["version"]; ok {
0000000000000000000000000000000000000000;;			version = string(b)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return nil, newDecodeModelError("endpoints version not found in model", nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if version == "3" {
0000000000000000000000000000000000000000;;			return decodeV3Endpoints(modelDef, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, newDecodeModelError(
0000000000000000000000000000000000000000;;			fmt.Sprintf("endpoints version %s, not supported", version), nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeV3Endpoints(modelDef modelDefinition, opts DecodeModelOptions) (Resolver, error) {
0000000000000000000000000000000000000000;;		b, ok := modelDef["partitions"]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, newDecodeModelError("endpoints model missing partitions", nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ps := partitions{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(b, &ps); err != nil {
0000000000000000000000000000000000000000;;			return nil, newDecodeModelError("failed to decode endpoints model", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.SkipCustomizations {
0000000000000000000000000000000000000000;;			return ps, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Customization
0000000000000000000000000000000000000000;;		for i := 0; i < len(ps); i++ {
0000000000000000000000000000000000000000;;			p := &ps[i]
0000000000000000000000000000000000000000;;			custAddEC2Metadata(p)
0000000000000000000000000000000000000000;;			custAddS3DualStack(p)
0000000000000000000000000000000000000000;;			custRmIotDataService(p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ps, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func custAddS3DualStack(p *partition) {
0000000000000000000000000000000000000000;;		if p.ID != "aws" {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s, ok := p.Services["s3"]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Defaults.HasDualStack = boxedTrue
0000000000000000000000000000000000000000;;		s.Defaults.DualStackHostname = "{service}.dualstack.{region}.{dnsSuffix}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.Services["s3"] = s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func custAddEC2Metadata(p *partition) {
0000000000000000000000000000000000000000;;		p.Services["ec2metadata"] = service{
0000000000000000000000000000000000000000;;			IsRegionalized:    boxedFalse,
0000000000000000000000000000000000000000;;			PartitionEndpoint: "aws-global",
0000000000000000000000000000000000000000;;			Endpoints: endpoints{
0000000000000000000000000000000000000000;;				"aws-global": endpoint{
0000000000000000000000000000000000000000;;					Hostname:  "169.254.169.254/latest",
0000000000000000000000000000000000000000;;					Protocols: []string{"http"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func custRmIotDataService(p *partition) {
0000000000000000000000000000000000000000;;		delete(p.Services, "data.iot")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type decodeModelError struct {
0000000000000000000000000000000000000000;;		awsError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDecodeModelError(msg string, err error) decodeModelError {
0000000000000000000000000000000000000000;;		return decodeModelError{
0000000000000000000000000000000000000000;;			awsError: awserr.New("DecodeEndpointsModelError", msg, err),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
