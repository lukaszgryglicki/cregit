0000000000000000000000000000000000000000;;	// +build codegen
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	package endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A CodeGenOptions are the options for code generating the endpoints into
0000000000000000000000000000000000000000;;	// Go code from the endpoints model definition.
0000000000000000000000000000000000000000;;	type CodeGenOptions struct {
0000000000000000000000000000000000000000;;		// Options for how the model will be decoded.
0000000000000000000000000000000000000000;;		DecodeModelOptions DecodeModelOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set combines all of the option functions together
0000000000000000000000000000000000000000;;	func (d *CodeGenOptions) Set(optFns ...func(*CodeGenOptions)) {
0000000000000000000000000000000000000000;;		for _, fn := range optFns {
0000000000000000000000000000000000000000;;			fn(d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CodeGenModel given a endpoints model file will decode it and attempt to
0000000000000000000000000000000000000000;;	// generate Go code from the model definition. Error will be returned if
0000000000000000000000000000000000000000;;	// the code is unable to be generated, or decoded.
0000000000000000000000000000000000000000;;	func CodeGenModel(modelFile io.Reader, outFile io.Writer, optFns ...func(*CodeGenOptions)) error {
0000000000000000000000000000000000000000;;		var opts CodeGenOptions
0000000000000000000000000000000000000000;;		opts.Set(optFns...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resolver, err := DecodeModel(modelFile, func(d *DecodeModelOptions) {
0000000000000000000000000000000000000000;;			*d = opts.DecodeModelOptions
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tmpl := template.Must(template.New("tmpl").Funcs(funcMap).Parse(v3Tmpl))
0000000000000000000000000000000000000000;;		if err := tmpl.ExecuteTemplate(outFile, "defaults", resolver); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to execute template, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toSymbol(v string) string {
0000000000000000000000000000000000000000;;		out := []rune{}
0000000000000000000000000000000000000000;;		for _, c := range strings.Title(v) {
0000000000000000000000000000000000000000;;			if !(unicode.IsNumber(c) || unicode.IsLetter(c)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			out = append(out, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return string(out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func quoteString(v string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%q", v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func regionConstName(p, r string) string {
0000000000000000000000000000000000000000;;		return toSymbol(p) + toSymbol(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func partitionGetter(id string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%sPartition", toSymbol(id))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func partitionVarName(id string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%sPartition", strings.ToLower(toSymbol(id)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func listPartitionNames(ps partitions) string {
0000000000000000000000000000000000000000;;		names := []string{}
0000000000000000000000000000000000000000;;		switch len(ps) {
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return ps[0].Name
0000000000000000000000000000000000000000;;		case 2:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%s and %s", ps[0].Name, ps[1].Name)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			for i, p := range ps {
0000000000000000000000000000000000000000;;				if i == len(ps)-1 {
0000000000000000000000000000000000000000;;					names = append(names, "and "+p.Name)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					names = append(names, p.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return strings.Join(names, ", ")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func boxedBoolIfSet(msg string, v boxedBool) string {
0000000000000000000000000000000000000000;;		switch v {
0000000000000000000000000000000000000000;;		case boxedTrue:
0000000000000000000000000000000000000000;;			return fmt.Sprintf(msg, "boxedTrue")
0000000000000000000000000000000000000000;;		case boxedFalse:
0000000000000000000000000000000000000000;;			return fmt.Sprintf(msg, "boxedFalse")
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringIfSet(msg, v string) string {
0000000000000000000000000000000000000000;;		if len(v) == 0 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf(msg, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringSliceIfSet(msg string, vs []string) string {
0000000000000000000000000000000000000000;;		if len(vs) == 0 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		names := []string{}
0000000000000000000000000000000000000000;;		for _, v := range vs {
0000000000000000000000000000000000000000;;			names = append(names, `"`+v+`"`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf(msg, strings.Join(names, ","))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func endpointIsSet(v endpoint) bool {
0000000000000000000000000000000000000000;;		return !reflect.DeepEqual(v, endpoint{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func serviceSet(ps partitions) map[string]struct{} {
0000000000000000000000000000000000000000;;		set := map[string]struct{}{}
0000000000000000000000000000000000000000;;		for _, p := range ps {
0000000000000000000000000000000000000000;;			for id := range p.Services {
0000000000000000000000000000000000000000;;				set[id] = struct{}{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return set
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var funcMap = template.FuncMap{
0000000000000000000000000000000000000000;;		"ToSymbol":           toSymbol,
0000000000000000000000000000000000000000;;		"QuoteString":        quoteString,
0000000000000000000000000000000000000000;;		"RegionConst":        regionConstName,
0000000000000000000000000000000000000000;;		"PartitionGetter":    partitionGetter,
0000000000000000000000000000000000000000;;		"PartitionVarName":   partitionVarName,
0000000000000000000000000000000000000000;;		"ListPartitionNames": listPartitionNames,
0000000000000000000000000000000000000000;;		"BoxedBoolIfSet":     boxedBoolIfSet,
0000000000000000000000000000000000000000;;		"StringIfSet":        stringIfSet,
0000000000000000000000000000000000000000;;		"StringSliceIfSet":   stringSliceIfSet,
0000000000000000000000000000000000000000;;		"EndpointIsSet":      endpointIsSet,
0000000000000000000000000000000000000000;;		"ServicesSet":        serviceSet,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const v3Tmpl = `
0000000000000000000000000000000000000000;;	{{ define "defaults" -}}
0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{{ template "partition consts" . }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{{ range $_, $partition := . }}
0000000000000000000000000000000000000000;;			{{ template "partition region consts" $partition }}
0000000000000000000000000000000000000000;;		{{ end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{{ template "service consts" . }}
0000000000000000000000000000000000000000;;		
0000000000000000000000000000000000000000;;		{{ template "endpoint resolvers" . }}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "partition consts" }}
0000000000000000000000000000000000000000;;		// Partition identifiers
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			{{ range $_, $p := . -}}
0000000000000000000000000000000000000000;;				{{ ToSymbol $p.ID }}PartitionID = {{ QuoteString $p.ID }} // {{ $p.Name }} partition.
0000000000000000000000000000000000000000;;			{{ end -}}
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "partition region consts" }}
0000000000000000000000000000000000000000;;		// {{ .Name }} partition's regions.
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			{{ range $id, $region := .Regions -}}
0000000000000000000000000000000000000000;;				{{ ToSymbol $id }}RegionID = {{ QuoteString $id }} // {{ $region.Description }}.
0000000000000000000000000000000000000000;;			{{ end -}}
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "service consts" }}
0000000000000000000000000000000000000000;;		// Service identifiers
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			{{ $serviceSet := ServicesSet . -}}
0000000000000000000000000000000000000000;;			{{ range $id, $_ := $serviceSet -}}
0000000000000000000000000000000000000000;;				{{ ToSymbol $id }}ServiceID = {{ QuoteString $id }} // {{ ToSymbol $id }}.
0000000000000000000000000000000000000000;;			{{ end -}}
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "endpoint resolvers" }}
0000000000000000000000000000000000000000;;		// DefaultResolver returns an Endpoint resolver that will be able
0000000000000000000000000000000000000000;;		// to resolve endpoints for: {{ ListPartitionNames . }}.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Casting the return value of this func to a EnumPartitions will
0000000000000000000000000000000000000000;;		// allow you to get a list of the partitions in the order the endpoints
0000000000000000000000000000000000000000;;		// will be resolved in.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    resolver := endpoints.DefaultResolver()
0000000000000000000000000000000000000000;;		//    partitions := resolver.(endpoints.EnumPartitions).Partitions()
0000000000000000000000000000000000000000;;		//    for _, p := range partitions {
0000000000000000000000000000000000000000;;		//        // ... inspect partitions
0000000000000000000000000000000000000000;;		//    }
0000000000000000000000000000000000000000;;		func DefaultResolver() Resolver {
0000000000000000000000000000000000000000;;			return defaultPartitions
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var defaultPartitions = partitions{
0000000000000000000000000000000000000000;;			{{ range $_, $partition := . -}}
0000000000000000000000000000000000000000;;				{{ PartitionVarName $partition.ID }},
0000000000000000000000000000000000000000;;			{{ end }}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		
0000000000000000000000000000000000000000;;		{{ range $_, $partition := . -}}
0000000000000000000000000000000000000000;;			{{ $name := PartitionGetter $partition.ID -}}
0000000000000000000000000000000000000000;;			// {{ $name }} returns the Resolver for {{ $partition.Name }}.
0000000000000000000000000000000000000000;;			func {{ $name }}() Partition {
0000000000000000000000000000000000000000;;				return  {{ PartitionVarName $partition.ID }}.Partition()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var {{ PartitionVarName $partition.ID }} = {{ template "gocode Partition" $partition }}
0000000000000000000000000000000000000000;;		{{ end }}
0000000000000000000000000000000000000000;;	{{ end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "default partitions" }}
0000000000000000000000000000000000000000;;		func DefaultPartitions() []Partition {
0000000000000000000000000000000000000000;;			return []partition{
0000000000000000000000000000000000000000;;				{{ range $_, $partition := . -}}
0000000000000000000000000000000000000000;;				// {{ ToSymbol $partition.ID}}Partition(),
0000000000000000000000000000000000000000;;				{{ end }}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	{{ end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Partition" -}}
0000000000000000000000000000000000000000;;	partition{
0000000000000000000000000000000000000000;;		{{ StringIfSet "ID: %q,\n" .ID -}}
0000000000000000000000000000000000000000;;		{{ StringIfSet "Name: %q,\n" .Name -}}
0000000000000000000000000000000000000000;;		{{ StringIfSet "DNSSuffix: %q,\n" .DNSSuffix -}}
0000000000000000000000000000000000000000;;		RegionRegex: {{ template "gocode RegionRegex" .RegionRegex }},
0000000000000000000000000000000000000000;;		{{ if EndpointIsSet .Defaults -}}
0000000000000000000000000000000000000000;;			Defaults: {{ template "gocode Endpoint" .Defaults }},
0000000000000000000000000000000000000000;;		{{- end }}
0000000000000000000000000000000000000000;;		Regions:  {{ template "gocode Regions" .Regions }},
0000000000000000000000000000000000000000;;		Services: {{ template "gocode Services" .Services }},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode RegionRegex" -}}
0000000000000000000000000000000000000000;;	regionRegex{
0000000000000000000000000000000000000000;;		Regexp: func() *regexp.Regexp{
0000000000000000000000000000000000000000;;			reg, _ := regexp.Compile({{ QuoteString .Regexp.String }})
0000000000000000000000000000000000000000;;			return reg
0000000000000000000000000000000000000000;;		}(),
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Regions" -}}
0000000000000000000000000000000000000000;;	regions{
0000000000000000000000000000000000000000;;		{{ range $id, $region := . -}}
0000000000000000000000000000000000000000;;			"{{ $id }}": {{ template "gocode Region" $region }},
0000000000000000000000000000000000000000;;		{{ end -}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Region" -}}
0000000000000000000000000000000000000000;;	region{
0000000000000000000000000000000000000000;;		{{ StringIfSet "Description: %q,\n" .Description -}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Services" -}}
0000000000000000000000000000000000000000;;	services{
0000000000000000000000000000000000000000;;		{{ range $id, $service := . -}}
0000000000000000000000000000000000000000;;		"{{ $id }}": {{ template "gocode Service" $service }},
0000000000000000000000000000000000000000;;		{{ end }}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Service" -}}
0000000000000000000000000000000000000000;;	service{
0000000000000000000000000000000000000000;;		{{ StringIfSet "PartitionEndpoint: %q,\n" .PartitionEndpoint -}}
0000000000000000000000000000000000000000;;		{{ BoxedBoolIfSet "IsRegionalized: %s,\n" .IsRegionalized -}}
0000000000000000000000000000000000000000;;		{{ if EndpointIsSet .Defaults -}}
0000000000000000000000000000000000000000;;			Defaults: {{ template "gocode Endpoint" .Defaults -}},
0000000000000000000000000000000000000000;;		{{- end }}
0000000000000000000000000000000000000000;;		{{ if .Endpoints -}}
0000000000000000000000000000000000000000;;			Endpoints: {{ template "gocode Endpoints" .Endpoints }},
0000000000000000000000000000000000000000;;		{{- end }}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Endpoints" -}}
0000000000000000000000000000000000000000;;	endpoints{
0000000000000000000000000000000000000000;;		{{ range $id, $endpoint := . -}}
0000000000000000000000000000000000000000;;		"{{ $id }}": {{ template "gocode Endpoint" $endpoint }},
0000000000000000000000000000000000000000;;		{{ end }}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	{{ define "gocode Endpoint" -}}
0000000000000000000000000000000000000000;;	endpoint{
0000000000000000000000000000000000000000;;		{{ StringIfSet "Hostname: %q,\n" .Hostname -}}
0000000000000000000000000000000000000000;;		{{ StringIfSet "SSLCommonName: %q,\n" .SSLCommonName -}}
0000000000000000000000000000000000000000;;		{{ StringSliceIfSet "Protocols: []string{%s},\n" .Protocols -}}
0000000000000000000000000000000000000000;;		{{ StringSliceIfSet "SignatureVersions: []string{%s},\n" .SignatureVersions -}}
0000000000000000000000000000000000000000;;		{{ if or .CredentialScope.Region .CredentialScope.Service -}}
0000000000000000000000000000000000000000;;		CredentialScope: credentialScope{
0000000000000000000000000000000000000000;;			{{ StringIfSet "Region: %q,\n" .CredentialScope.Region -}}
0000000000000000000000000000000000000000;;			{{ StringIfSet "Service: %q,\n" .CredentialScope.Service -}}
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{{- end }}
0000000000000000000000000000000000000000;;		{{ BoxedBoolIfSet "HasDualStack: %s,\n" .HasDualStack -}}
0000000000000000000000000000000000000000;;		{{ StringIfSet "DualStackHostname: %q,\n" .DualStackHostname -}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	{{- end }}
0000000000000000000000000000000000000000;;	`
