0000000000000000000000000000000000000000;;	// Package endpoints provides the types and functionality for defining regions
0000000000000000000000000000000000000000;;	// and endpoints, as well as querying those definitions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The SDK's Regions and Endpoints metadata is code generated into the endpoints
0000000000000000000000000000000000000000;;	// package, and is accessible via the DefaultResolver function. This function
0000000000000000000000000000000000000000;;	// returns a endpoint Resolver will search the metadata and build an associated
0000000000000000000000000000000000000000;;	// endpoint if one is found. The default resolver will search all partitions
0000000000000000000000000000000000000000;;	// known by the SDK. e.g AWS Standard (aws), AWS China (aws-cn), and
0000000000000000000000000000000000000000;;	// AWS GovCloud (US) (aws-us-gov).
0000000000000000000000000000000000000000;;	// .
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Enumerating Regions and Endpoint Metadata
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Casting the Resolver returned by DefaultResolver to a EnumPartitions interface
0000000000000000000000000000000000000000;;	// will allow you to get access to the list of underlying Partitions with the
0000000000000000000000000000000000000000;;	// Partitions method. This is helpful if you want to limit the SDK's endpoint
0000000000000000000000000000000000000000;;	// resolving to a single partition, or enumerate regions, services, and endpoints
0000000000000000000000000000000000000000;;	// in the partition.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     resolver := endpoints.DefaultResolver()
0000000000000000000000000000000000000000;;	//     partitions := resolver.(endpoints.EnumPartitions).Partitions()
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     for _, p := range partitions {
0000000000000000000000000000000000000000;;	//         fmt.Println("Regions for", p.Name)
0000000000000000000000000000000000000000;;	//         for id, _ := range p.Regions() {
0000000000000000000000000000000000000000;;	//             fmt.Println("*", id)
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//         fmt.Println("Services for", p.Name)
0000000000000000000000000000000000000000;;	//         for id, _ := range p.Services() {
0000000000000000000000000000000000000000;;	//             fmt.Println("*", id)
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Using Custom Endpoints
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The endpoints package also gives you the ability to use your own logic how
0000000000000000000000000000000000000000;;	// endpoints are resolved. This is a great way to define a custom endpoint
0000000000000000000000000000000000000000;;	// for select services, without passing that logic down through your code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If a type implements the Resolver interface it can be used to resolve
0000000000000000000000000000000000000000;;	// endpoints. To use this with the SDK's Session and Config set the value
0000000000000000000000000000000000000000;;	// of the type to the EndpointsResolver field of aws.Config when initializing
0000000000000000000000000000000000000000;;	// the session, or service client.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In addition the ResolverFunc is a wrapper for a func matching the signature
0000000000000000000000000000000000000000;;	// of Resolver.EndpointFor, converting it to a type that satisfies the
0000000000000000000000000000000000000000;;	// Resolver interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     myCustomResolver := func(service, region string, optFns ...func(*endpoints.Options)) (endpoints.ResolvedEndpoint, error) {
0000000000000000000000000000000000000000;;	//         if service == endpoints.S3ServiceID {
0000000000000000000000000000000000000000;;	//             return endpoints.ResolvedEndpoint{
0000000000000000000000000000000000000000;;	//                 URL:           "s3.custom.endpoint.com",
0000000000000000000000000000000000000000;;	//                 SigningRegion: "custom-signing-region",
0000000000000000000000000000000000000000;;	//             }, nil
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//         return endpoints.DefaultResolver().EndpointFor(service, region, optFns...)
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     sess := session.Must(session.NewSession(&aws.Config{
0000000000000000000000000000000000000000;;	//         Region:           aws.String("us-west-2"),
0000000000000000000000000000000000000000;;	//         EndpointResolver: endpoints.ResolverFunc(myCustomResolver),
0000000000000000000000000000000000000000;;	//     }))
0000000000000000000000000000000000000000;;	package endpoints
